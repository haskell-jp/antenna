<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2019-02-04T01:59:07+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/waddlaw/items/746765b2af929722baf5</id><title type="text">Haskellで10桁のISBNを13桁に変換する</title><updated>2019-02-04T01:59:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/waddlaw/items/746765b2af929722baf5"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html</id><title type="text">Dual Monoid</title><updated>2019-02-02T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Dual&#34;&gt;Dual&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getDual ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbbaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いつか使う時もあるかもしれないので、適当な例を作ってみます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a, b, c は Semigroup なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (a &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;headmaybe&#34;&gt;headMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;headMaybe &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- First を使った定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;headMaybe &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lastmaybe&#34;&gt;lastMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;lastMaybe &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Last を使った定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;lastMaybe &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;last&#34;&gt;last&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;last&amp;#39; ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;last&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getAlt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; user &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; (mzero)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reverse&#34;&gt;reverse&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;rev ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;rev &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getDual &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; rev [&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;[&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; rev &lt;span class=&#34;st&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dlroW olleH&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;foldl&#34;&gt;foldl&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; f z t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; appEndo (getDual (&lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; f) t)) z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/haskell/example/2555/folding-a-structure-in-reverse&#34;&gt;Folding a structure in reverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@sjsyrek/five-minutes-to-monoid-fe6f364d0bba&#34;&gt;Five Minutes to Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ozark.hendrix.edu/~yorgey/pub/monoid-pearl.pdf&#34;&gt;Monoids: Theme and Variations (Functional Pearl)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-13.5/base-4.12.0.0/Prelude.html#t:Foldable&#34;&gt;Foldable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://qiita.com/huging/items/ebfa0647306b4a20a8bc</id><title type="text">Haskell学習時に書いたコード置き場</title><updated>2019-02-01T17:38:00+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/huging/items/ebfa0647306b4a20a8bc"/></entry><entry><id>https://qiita.com/huging/items/722b0fede19930c04988</id><title type="text">Haskell 初学者の疑問</title><updated>2019-02-01T17:16:25+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/huging/items/722b0fede19930c04988"/></entry><entry><id>https://qiita.com/huging/items/ab9b0e0c0abaa91b4c4e</id><title type="text">Haskell 学習メモ</title><updated>2019-02-01T12:03:05+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/huging/items/ab9b0e0c0abaa91b4c4e"/></entry><entry><id>http://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://qiita.com/YoshikuniJujo/items/f601195d44aeafc0fadb</id><title type="text">Haskell入門ハンズオン #5 - 当日用資料 (5/5)</title><updated>2019-01-30T15:05:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/f601195d44aeafc0fadb"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/9b6bec1aa74ccf36bdef</id><title type="text">Haskell入門ハンズオン! #5 - 当日用資料 (4/5)</title><updated>2019-01-30T15:04:45+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/9b6bec1aa74ccf36bdef"/></entry><entry><id>https://qiita.com/autotaker1984/items/258ed186383a1e5c58d6</id><title type="text">GHC/RTSのGCについて</title><updated>2019-01-30T13:03:52+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/autotaker1984/items/258ed186383a1e5c58d6"/></entry><entry><id>https://qiita.com/yuyakato/items/1d472c954603b1350274</id><title type="text">オンライン版『Real World Haskell』読書会 2019年1月30日</title><updated>2019-01-30T01:51:23+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yuyakato/items/1d472c954603b1350274"/></entry><entry><id>https://qiita.com/mkanenobu/items/5de024ce8fb2ce98295d</id><title type="text">ghc-mod</title><updated>2019-01-28T20:36:50+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mkanenobu/items/5de024ce8fb2ce98295d"/></entry><entry><id>https://qiita.com/ringo-apo/items/60fa01976f8cba2a1fc6</id><title type="text">CentOS7にwxHaskellをインストール</title><updated>2019-01-28T15:57:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ringo-apo/items/60fa01976f8cba2a1fc6"/></entry><entry><id>http://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hourly-antenna.html</id><title type="text">DroneでHaskell Antennaを毎時更新する</title><updated>2019-01-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hourly-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という &lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt; ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;この&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページは&lt;a href=&#34;https://github.com/haskell-jp/antenna&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のリポジトリ&lt;/a&gt;で開発し、&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;として公開しています。 更新は&lt;a href=&#34;https://travis-ci.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;Daily Cron&lt;/span&gt;を使って行なっていましたが、なんとかして &lt;strong&gt;毎時更新を実現したい&lt;/strong&gt; と思案していました。 ひょんなことから&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスを見つけ、このサービスでは&lt;span class=&#34;ascii&#34;&gt;Hourly Cron&lt;/span&gt;が可能だったので試しに更新の部分だけ移行してみました。 という話です。&lt;/p&gt;
&lt;p&gt;ちなみに、本稿は全く&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードが出て来ません &lt;span class=&#34;ascii&#34;&gt;;)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;毎時更新を実現するために&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;はパブリックリポジトリであれば無料で利用できる&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスです。 内部では&lt;a href=&#34;https://drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームを利用しています。 &lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;は以下のような特徴を持っています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Jenkins&lt;/span&gt;のような&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;である&lt;span class=&#34;ascii&#34;&gt;(Go&lt;/span&gt;言語製&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のようなパイプラインによる設定を行う&lt;span class=&#34;ascii&#34;&gt;(YAML&lt;/span&gt;形式&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;との親和性が高く&lt;span class=&#34;ascii&#34;&gt;k8s&lt;/span&gt;などでの動作もサポートしている&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Plugin&lt;/span&gt;システムによって外部サービスとの連携が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;のためお好みのクラウドサービスなどで自前運用も可能ですし、&lt;span class=&#34;ascii&#34;&gt;Drone Enterprise&lt;/span&gt;という有料のクラウドサービスも提供しています。&lt;/p&gt;
&lt;h1 id=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;毎時更新を実現するために&lt;/h1&gt;
&lt;p&gt;単純に&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;の設定ファイルを記述するだけではなく、次のような作業を行いました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージを自動更新&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;順に説明していきましょう。&lt;/p&gt;
&lt;h2 id=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;では無償でキャッシュを利用することができません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。 &lt;span class=&#34;ascii&#34;&gt;Haskell(&lt;/span&gt;というか&lt;span class=&#34;ascii&#34;&gt;Stack)&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;をしている方ならわかると思いますが、キャッシュなしにビルドするとすごい時間がかかります。 なので、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の静的ページの生成を行う &lt;code&gt;antenna&lt;/code&gt; コマンドを&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージとしておき、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;内ではこのイメージを利用して静的ページの生成を行う方針でいきます。&lt;/p&gt;
&lt;p&gt;もちろん&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの生成には、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;インテグレーションを使います。 以下のような設定を&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に追記し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行するだけで&lt;code&gt;antenna&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージが生成されます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stack docker pull
stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;に&lt;a href=&#34;https://hub.docker.com/r/haskelljp/antenna/&#34;&gt;&lt;code&gt;haskelljp/antenna&lt;/code&gt;&lt;/a&gt;というネームスペースを確保した&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のでここにプッシュしました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker tag antenna haskelljp/antenna
docker push haskelljp/antenna&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに、&lt;code&gt;haskell-jp&lt;/code&gt; ではなく &lt;code&gt;haskelljp&lt;/code&gt; なのは、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の組織アカウント名には &lt;code&gt;-&lt;/code&gt; が使えなかったからです。&lt;/p&gt;
&lt;h2 id=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;Automated builds&lt;/span&gt;と呼ばれる&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;などのプッシュによって行う自動ビルドがありますが、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt;を使うと、その機能を利用することができません。 そこで、&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;を使って自動ビルドすることにしました。 この辺りは「&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt; とイメージの自動更新 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」で記事にしてあるので、細かい話は割愛します。&lt;/p&gt;
&lt;p&gt;今回は次のような設定をして、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt; ブランチにプッシュがあった時にのみ&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;にプッシュします&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;export PATH=$HOME/.local/bin:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;$PATH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;travis_retry curl -L https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; data-line-number=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker --install-ghc test --bench --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; data-line-number=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker build --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; data-line-number=&#34;17&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type = push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; data-line-number=&#34;18&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; data-line-number=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; data-line-number=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker tag antenna haskelljp/antenna&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; data-line-number=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; data-line-number=&#34;22&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker push haskelljp/antenna&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のビルドもするために毎回&lt;span class=&#34;ascii&#34;&gt;Docker Pull&lt;/span&gt;が走るようになり少し遅くなったのが辛いですね&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;今後要検討&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/h2&gt;
&lt;p&gt;いよいよ&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;による &lt;code&gt;antenna&lt;/code&gt; コマンドの実行を設定します。 元々は &lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt; でこんな感じでした&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install anttena&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal install&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git clone -b gh-pages &amp;quot;https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git&amp;quot; temp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type IN (push, cron)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;after_success:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; data-line-number=&#34;11&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack exec -- antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; data-line-number=&#34;13&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; data-line-number=&#34;14&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; data-line-number=&#34;15&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; data-line-number=&#34;16&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &amp;quot;[skip ci] Update planet haskell. See https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; data-line-number=&#34;17&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack install&lt;/code&gt; で &lt;code&gt;antenna&lt;/code&gt; コマンドの実行ファイルを生成し&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;これはキャッシュされるので早い&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;、&lt;code&gt;gh-pages&lt;/code&gt; ブランチへページの更新をプッシュするために&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;を使って再度クローンしていました。 更新の有無は &lt;code&gt;git diff&lt;/code&gt; を使って確認しています。&lt;/p&gt;
&lt;p&gt;まずはこれをこのまま&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;に移植します&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GH_TOKEN:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github_api_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GIT_NAME:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; BOT&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git clone -b gh-pages &amp;quot;https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//${GH_TOKEN}@github.com/haskell-jp/antenna.git&amp;quot; temp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; data-line-number=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; data-line-number=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-19&#34; data-line-number=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-20&#34; data-line-number=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-21&#34; data-line-number=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-22&#34; data-line-number=&#34;22&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &amp;quot;[skip ci] Update planet haskell. See https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-23&#34; data-line-number=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-24&#34; data-line-number=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-25&#34; data-line-number=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-26&#34; data-line-number=&#34;26&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-27&#34; data-line-number=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-28&#34; data-line-number=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-29&#34; data-line-number=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記法は違うもののそのまま移植ができました。 条件&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;if&lt;/code&gt;や&lt;code&gt;when&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;のところですが、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;で&lt;code&gt;cron&lt;/code&gt;のイベントを指定する方法がわからなかったので、動作しては困る&lt;code&gt;pull_request&lt;/code&gt;だけ弾くようにしました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Cron&lt;/span&gt;の設定は&lt;span class=&#34;ascii&#34;&gt;Web UI&lt;/span&gt;上で行います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/drone-cron-setting.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;これで毎時間&lt;code&gt;master&lt;/code&gt;ブランチのビルドが実行されます。&lt;/p&gt;
&lt;h2 id=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;は他の個人のリポジトリも操作できてしまうので、兼ねてからできれば使いたくないなと思っていました&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;特に個人プロジェクトじゃない&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のプロジェクトでは&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 なので、これを機にリポジトリ固有の&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行しました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のような書き込み用の&lt;span class=&#34;ascii&#34;&gt;SSH Key&lt;/span&gt;を登録する機能は&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;にはありません。 代わりに次のように書くと良いです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com\n\tStrictHostKeyChecking no\n&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git clone -b gh-pages git@github.com:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;haskell-jp/antenna.git temp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Secret&lt;/span&gt;というのは&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;側で保持・秘匿できる環境変数のような機能です&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;名前が違うだけでだいたいどの&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームにもありますね&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 今回はせっかくなので、これを&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt;として自作した&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;、&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;&lt;code&gt;matsubara0507/git-with-ssh&lt;/code&gt;&lt;/a&gt; というのを使います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git clone -b gh-pages git@github.com:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;haskell-jp/antenna.git temp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; data-line-number=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; data-line-number=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; data-line-number=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; data-line-number=&#34;22&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; data-line-number=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskelljp/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; data-line-number=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; data-line-number=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; data-line-number=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; data-line-number=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; data-line-number=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; data-line-number=&#34;29&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; data-line-number=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; data-line-number=&#34;31&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; data-line-number=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; data-line-number=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; data-line-number=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; data-line-number=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; data-line-number=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; data-line-number=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; data-line-number=&#34;38&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; data-line-number=&#34;39&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.name  BOT&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; data-line-number=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.email bot@example.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-41&#34; data-line-number=&#34;41&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-42&#34; data-line-number=&#34;42&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-43&#34; data-line-number=&#34;43&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cd temp &amp;amp;&amp;amp; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &amp;quot;[skip ci] Update planet haskell. See https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-44&#34; data-line-number=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-45&#34; data-line-number=&#34;45&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-46&#34; data-line-number=&#34;46&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-47&#34; data-line-number=&#34;47&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-48&#34; data-line-number=&#34;48&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-49&#34; data-line-number=&#34;49&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-50&#34; data-line-number=&#34;50&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd temp &amp;amp;&amp;amp;&lt;/code&gt; というのがダサいですが、そこはおいおい直します&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;git-with-ssh&lt;/code&gt; の方を&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/h2&gt;
&lt;p&gt;元々は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の &lt;code&gt;#antenna&lt;/code&gt; チャンネルに&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の通知設定をしているだけでした。 今回の開発中、ずっとコミットの通知などが来てうるさかったので次のように分けました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#antenna&lt;/code&gt; チャンネルは &lt;code&gt;gh-pages&lt;/code&gt; ブランチのコミットだけ通知
&lt;ul&gt;
&lt;li&gt;ついでに&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;を設定した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#antenna-dev&lt;/code&gt; チャンネルを新しく作り&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の全ての更新はこっちに設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#dockerhub&lt;/code&gt; チャンネルもついでに作って &lt;code&gt;haskelljp&lt;/code&gt; の更新を通知する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の大リニューアルがあって、いつのまにか&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;を連携できるようになっていました。 なので試しに連携して更新の通知が飛ぶようにしてみました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/dockerhub-slack.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後やりたいこと&lt;/h1&gt;
&lt;p&gt;いくつかあります&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;LTS&lt;/span&gt;の更新&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;最新&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;でも動作したらかな&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;の改善
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;でもちゃんと更新が通知されるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ないしは更新差分の通知
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;App&lt;/span&gt;が満杯なので厳しいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと、&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;がコメントや追記などでも更新され、その通知が &lt;code&gt;#antenna&lt;/code&gt; チャンネルに飛んで来てうるさいので修正したいです&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;キャッシュの導入の仕方は記事にしたので興味のある方は是非「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GCS&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;Drone 1.0&lt;/span&gt; をキャッシュする &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;もし&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;haskelljp&lt;/span&gt;組織アカウントのメンバーになりたい場合は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で声をかけてください&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;チャンネルはどこでも良いですよ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;この話も記事にしておきました「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt; を作ってみた&lt;span class=&#34;ascii&#34;&gt;: git-with-ssh -&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;この修正は &lt;code&gt;haskell-jp/antenna&lt;/code&gt; ではなく、&lt;a href=&#34;https://github.com/matsubara0507/scrapbook&#34;&gt;&lt;code&gt;matsubara0507/scrapbook&lt;/code&gt;&lt;/a&gt; からやる必要があります。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://qiita.com/autotaker1984/items/6e15bd36e1de50a0ad1d</id><title type="text">動的計画法にData.Vector.constructNは使うべきではない。</title><updated>2019-01-22T20:00:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/autotaker1984/items/6e15bd36e1de50a0ad1d"/></entry><entry><id>https://qiita.com/mitubaEX328/items/adb2fc8227c8635a257b</id><title type="text">Haskellにおける周辺概念をざっくり説明してみる (入門者向け)</title><updated>2019-01-22T19:23:05+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mitubaEX328/items/adb2fc8227c8635a257b"/></entry><entry><id>https://qiita.com/mod_poppo/items/4f78d135bb43b7fd1743</id><title type="text">Haskellでフィボナッチ数列 〜Haskellで非実用的なコードを書いて悦に入るのはやめろ〜</title><updated>2019-01-22T14:10:24+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/4f78d135bb43b7fd1743"/></entry><entry><id>https://qiita.com/takenobu-hs/items/a2eeb327088bb1d2fe77</id><title type="text">GHC(Haskell)の上流リポジトリ等がGitLabに移行しました</title><updated>2019-01-20T15:13:12+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/takenobu-hs/items/a2eeb327088bb1d2fe77"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Drone Plugin を作ってみた: git-with-ssh&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2019-01-20&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 20, 2019
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Drone.html&#34;&gt;Drone&lt;/a&gt; &lt;a href=&#34;/tags/Go.html&#34;&gt;Go&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近 &lt;a href=&#34;https://drone.io&#34;&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href=&#34;https://github.com/drone/drone/issues/1891#issuecomment-269629929&#34;&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href=&#34;https://docs.drone.io/plugins&#34;&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id=&#34;drone-plugin&#34;&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id=&#34;main.go-と-plugin.go&#34;&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;package&lt;/span&gt; main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; build = &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;  app := cli.NewApp()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;  app.Name = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;  app.Usage = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;  app.Action = run&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;  app.Version = fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  app.Flags = []cli.Flag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    cli.StringFlag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;      Name:   &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;      Usage:  &lt;span class=&#34;st&#34;&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;      EnvVar: &lt;span class=&#34;st&#34;&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    },&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;    log.Fatal(err)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;    _ = godotenv.Load(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;    SSHKey: c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id=&#34;脱線-vs.改行&#34;&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// plugin.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Plugin &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  Home     &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  SSHKey   &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  Hosts    []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  Commands []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  sshDir := fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class=&#34;dv&#34;&gt;0700&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class=&#34;dt&#34;&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class=&#34;dv&#34;&gt;0600&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$&#39;aaa\nbbb&#39;&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href=&#34;https://blog.konboi.com/post/2018/05/01/225336/&#34;&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;    SSHKey: strings.Replace(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;docker-イメージ&#34;&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; docker:git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href=&#34;https://hub.docker.com/r/plugins/base/&#34;&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href=&#34;https://hub.docker.com/_/docker&#34;&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;va&#34;&gt;GOOS=&lt;/span&gt;linux &lt;span class=&#34;va&#34;&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class=&#34;va&#34;&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class=&#34;ex&#34;&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;drone-を設定する&#34;&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build docker image (dry_run)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;dry-run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# Push をしないフラグ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-22&#34; title=&#34;22&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-35&#34; title=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-36&#34; title=&#34;36&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href=&#34;https://github.com/drone-plugins/drone-docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id=&#34;テストをどうするか&#34;&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; go build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt; --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;  ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id=&#34;おまけ-バッチ&#34;&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md&#34;&gt;&lt;img src=&#34;/assets/create-drone-git-with-ssh/badges.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreportcard.com/&#34;&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microbadger.com/&#34;&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://qiita.com/mod_poppo/items/166e28b12d3331ade275</id><title type="text">Haskellで型クラス制約の和を表現する</title><updated>2019-01-19T11:50:59+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/166e28b12d3331ade275"/></entry><entry><id>https://qiita.com/lotz/items/b9ca3dfdbe97ad42bd12</id><title type="text">ある数がパスカルの三角形に出現する回数を数えるプログラムを高速化して3003が8回出現するところまで確認する</title><updated>2019-01-17T01:16:04+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/b9ca3dfdbe97ad42bd12"/></entry><entry><id>https://haskell.jp/blog/posts/2019/tidalcycles-stack.html</id><title type="text">TidalCyclesをstackで確実にインストールする</title><updated>2019-01-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/tidalcycles-stack.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;実行した環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;各種依存パッケージのインストール&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;そのままの手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;使い方・動作確認&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;ハマったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;背景&lt;/h1&gt;
&lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;タグを眺めていたところ、下記のような質問がありました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://teratail.com/questions/167461?rss&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell - network&lt;/span&gt;パッケージがうまく機能しない｜&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Welcome&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;でシンセサイザーの演奏ができるライブラリーのインストールがうまくいかない、という質問です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;network&lt;/span&gt;パッケージがインストールできていない、ということなので&lt;span class=&#34;ascii&#34;&gt;cabal hell&lt;/span&gt;にでもハマったのかな、と思ったのですが、&lt;a href=&#34;https://github.com/tidalcycles/tidal-chocolatey/issues/1&#34;&gt;類似しているとおぼしき報告&lt;/a&gt;（と、&lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c#comment-b568fc7ecb423b9bc2ce&#34;&gt;こちら&lt;/a&gt;）を読む限り、どうも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストール自体に何か問題があるように見えました。&lt;/p&gt;
&lt;p&gt;もう当の質問者は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;をインストールすることで解決したそうですが、いずれにしても、我々&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としては、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;なり&lt;span class=&#34;ascii&#34;&gt;cabal new-install&lt;/span&gt;なりといった、慣れた方法でインストールできた方がサポートしやすいですし、きっと確実です。&lt;br /&gt;
というわけで今回は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でのインストールに挑戦してみました。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;をインストールしているという&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は多いでしょうし、そうした方が&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を使いたくなったときの参考になれば幸いです。&lt;/p&gt;
&lt;p&gt;結論から言うとほとんど問題なくできたんですが、以下の&lt;span class=&#34;ascii&#34;&gt;tweet&lt;/span&gt;で述べたポイントにご注意ください。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles, Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;package&lt;/span&gt;の設定で&lt;span class=&#34;ascii&#34;&gt;stack exec ghci&lt;/span&gt;を使うよう設定したら普通に&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で入れた&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;から使えましたわ。&lt;br&gt;ポイントは、&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- hosc-0.17&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;に加えないといけない&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC 8.6.3&lt;/span&gt;は地雷なので&lt;span class=&#34;ascii&#34;&gt;LTS 12.26&lt;/span&gt;を使う&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- ~/.ghci&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;:set +m&lt;/span&gt;してるとうまく動かない&lt;br&gt;ぐらいか。
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;Yuji Yamamoto:&lt;/span&gt; 山本悠滋 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;igrep&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@igrep&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/igrep/status/1082475580753207296?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実行した環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10 Pro 64bit ver. 1809&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack --version&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;: Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles:&lt;/span&gt; &lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.0.6&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider: 3.10.0, 64bit&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom: 1.34.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグイン&lt;span class=&#34;ascii&#34;&gt;: 0.14.0&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;各種依存パッケージのインストール&lt;/h1&gt;
&lt;p&gt;冒頭に挙げた質問をされた方が参考にしたページ &lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストール&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年版 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt; では、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;を使ったインストール方法を紹介していますが、この方法では、直接&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tarball&lt;/span&gt;をダウンロードしてインストールしているようです。&lt;br /&gt;
私が知る限り特にその方法でも問題はないはずなんですが、なぜか質問者が挙げたようなエラーが発生してしまいます。&lt;br /&gt;
また、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が実行時に依存している&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;といったソフトウェアを、別の&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージに分けることなく、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストールスクリプトで直接インストールしているようです&lt;small&gt;（詳細は&lt;a href=&#34;https://chocolatey.org/packages/TidalCycles&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージ情報&lt;/a&gt;に書かれた&lt;span class=&#34;ascii&#34;&gt;chocolateyinstall.ps1&lt;/span&gt;を参照されたし）&lt;/small&gt;。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしようとすると、問題のある&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;などの依存パッケージを一緒にインストールしなければなりませんし、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;だけを&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;でインストールすることもできません。&lt;/p&gt;
&lt;p&gt;なので、ここは素直に&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;に書かれた方法に従って&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;をインストールしつつ、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;関連のものだけ&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でインストールしようと思います。&lt;/p&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;そのままの手順&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;⚠️行く先々で&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;のファイアウォールの警告が出るかと思います。適当に承認しちゃってください！⚠️&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://supercollider.github.io/download&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を公式サイトからインストール&lt;/a&gt;します。&lt;br /&gt;
今回は「&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;」の箇所に書いてある「&lt;span class=&#34;ascii&#34;&gt;3.10.0, 64-bit (no SuperNova)&lt;/span&gt;」というリンクをクリックしてダウンロードされた実行ファイルでインストールしました。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;&lt;/a&gt;も公式サイトからインストールしました。&lt;br /&gt;
後で触れます&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の対話環境を、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で呼び出すためのプラグインがあるためです。他のエディタ向けのプラグインもありますが、公式サイトで紹介していたのは&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;なので、一番これがサポートされているのでしょう。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;も&lt;span class=&#34;ascii&#34;&gt;Prerequisites&lt;/span&gt;として挙げられていますが、すでに私の環境に入っているので今回は特に何もしていません。なければ普通に&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Git for Windows&lt;/span&gt;&lt;/a&gt;を入れるのが無難かと思います。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストール
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;ウィンドウの左側にある「&lt;span class=&#34;ascii&#34;&gt;Untitled&lt;/span&gt;」と書かれた箇所の下が&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタになっているようです&lt;small&gt;（色がわかりづらい！）&lt;/small&gt;。&lt;br /&gt;
そこに&lt;code&gt;include(&amp;quot;SuperDirt&amp;quot;)&lt;/code&gt;と書いて、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押せば、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールが始まります。&lt;/li&gt;
&lt;li&gt;次のセクションで&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動する前に、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を終了&lt;/strong&gt;させましょう。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインのインストール
&lt;ul&gt;
&lt;li&gt;面倒なので省略します。他のプラグインと変わらないはずなので適当に検索してください！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/h2&gt;
&lt;p&gt;ここからはこの記事特有の手順です。&lt;br /&gt;
最近の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;というツールを使って開発環境を整えることが多いですので、冒頭の予告通りここでは&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使います。&lt;br /&gt;
ちなみに、現在は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;にも&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が添付されていますが、&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;に含まれる、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使うことでも簡単にインストールできるため、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のみをインストールすれば十分です。&lt;br /&gt;
なお、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;自体のインストール方法については拙作の&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell#%E3%81%BE%E3%81%A0stack%E3%82%84haskell-platform%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AF&#34;&gt;「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;ではインストーラーをダウンロードして実行するだけで十分でしょう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のインストールが終わったら、次の手順を踏んでください。&lt;/p&gt;
&lt;h3 id=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルドをするには、&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;というファイルを、下記でコメントしたように書き換えてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.26 &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= ここを編集&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行と、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hosc-0.17         &lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行を追記&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単に編集した内容について解説させてください。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;resolver:&lt;/code&gt;で始まる行ですが、これは「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」という、パッケージの一覧のバージョンを指定するものです。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」は、「確実にビルドできるバージョンのパッケージをまとめた一覧」です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のメンテナーの方々は、毎日登録された大量のパッケージをまとめてビルド・テストしてみることで、実際に登録されたバージョンのパッケージのビルドとテストが成功することを確認しています。&lt;br /&gt;
なので、この&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されているバージョンのパッケージを使う限りは、私たちは安心してビルドができると言うことです。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを書き換えたのかというと、それは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;には実際にはパッケージの一覧だけでなく、それらをビルドできる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも含まれているからです。&lt;br /&gt;
したがって、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを指定する、ということは、そのままインストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも指定することになります&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
実は特に今回の場合、インストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンを指定しなければ、ビルドできない可能性が高かったのです。&lt;br /&gt;
現在の最新の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは「&lt;span class=&#34;ascii&#34;&gt;8.6.3&lt;/span&gt;」ですが、残念ながらこのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/16057&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;版のみにおいて深刻なバグ&lt;/a&gt;があります。&lt;br /&gt;
実際に&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をビルドする際にこのバグに遭遇するかは確かめてませんが、内容からして遭遇する確率が高そうであるという点と、遭遇するとビルドができないという点を考慮して、念のため確実にビルドできるバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を指定しておきました。&lt;/p&gt;
&lt;p&gt;そして、&lt;code&gt;extra-deps&lt;/code&gt;という項目は、ビルドしようとしているパッケージ&lt;small&gt;（今回の場合&lt;code&gt;tidal&lt;/code&gt;パッケージ）&lt;/small&gt;が依存しているパッケージが、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されていない場合に指定するものです。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージ &lt;span class=&#34;ascii&#34;&gt;ver. 1.0.6&lt;/span&gt;のパッケージ情報&lt;/a&gt;を確認すると、確かに&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;というパッケージに依存していると書かれていますね！&lt;br /&gt;
残念ながらこの&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;パッケージは今回指定した、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ver. 12.26&lt;/span&gt;には登録されていないので、上記のとおり&lt;code&gt;extra-deps&lt;/code&gt;に明記しておいてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;の編集が終わったら、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build tidal&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と実行しましょう。&lt;br /&gt;
初回は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストールも含めて行われるので、結構時間がかかると思います。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;stack install tidal&lt;/code&gt;と実行してもいいですが、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;の仕様上、特に結果は変わりません。&lt;br /&gt;
&lt;code&gt;stack install&lt;/code&gt;は、実行ファイルがついたパッケージをビルドして&lt;code&gt;PATH&lt;/code&gt;にインストールするためのコマンドなので、&lt;code&gt;tidal&lt;/code&gt;のように実行ファイルがないパッケージでは意味がありません。&lt;/p&gt;
&lt;h3 id=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/h3&gt;
&lt;p&gt;続いて、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインの設定をしましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は使用する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を、前述の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に書いた&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンに応じて切り替える関係上、&lt;code&gt;PATH&lt;/code&gt;の通ったところに&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールしません。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインに、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;がインストールした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を認識させるには、下記のように設定を書き換える必要があります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動し、「&lt;span class=&#34;ascii&#34;&gt;File&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」の順にメニューをクリックして、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の設定画面を開きます。&lt;/li&gt;
&lt;li&gt;画面左側の「📦&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」と書かれた箇所をクリックすると、インストールした&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの一覧が表示されるはずです。&lt;/li&gt;
&lt;li&gt;一覧から「&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;」を探して、「⚙️&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」をクリックします。&lt;/li&gt;
&lt;li&gt;「&lt;span class=&#34;ascii&#34;&gt;Ghci Path&lt;/span&gt;」という設定項目があるので、それを&lt;code&gt;stack exec ghci&lt;/code&gt;に書き換えてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・動作確認&lt;/h1&gt;
&lt;h2 id=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/h2&gt;
&lt;p&gt;※&lt;a href=&#34;https://tidalcycles.org/index.php/Start_tidalcycles_and_superdirt_for_the_first_time&#34;&gt;公式サイトのこちらのページ&lt;/a&gt;に対応しています。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;先ほど&lt;code&gt;include(&amp;quot;SuperDirt&amp;quot;)&lt;/code&gt;と入力した、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタに、今度は&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力して、同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が起動します。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動して、拡張子が&lt;code&gt;.tidal&lt;/code&gt;なファイルを開くか作成します。&lt;/li&gt;
&lt;li&gt;メニューを「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順に選択してください。&lt;/li&gt;
&lt;li&gt;画面下部で&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動し、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を実行するのに必要なパッケージの&lt;code&gt;import&lt;/code&gt;や、&lt;code&gt;import&lt;/code&gt;では賄いきれない関数の定義などが自動的に行われます。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルの中身を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に貼り付けているみたいです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;動作確認のために、適当な&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式 — 例えば公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;どおり&lt;code&gt;d1 $ sound &amp;quot;bd sn&amp;quot;&lt;/code&gt; — を入力して、入力した行にカーソルを置き、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押しましょう。
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;入力した式が画面下部で起動した&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に送信され、実行されます。うまくいっていれば音が鳴るはずです。&lt;/li&gt;
&lt;li&gt;停止させたいときは、&lt;code&gt;d1 silence&lt;/code&gt;と入力して同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押してください。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;より詳しい&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の使い方は、&lt;a href=&#34;https://qiita.com/mk668a/items/6e8e0151817f484a526c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のチュートリアル&lt;span class=&#34;ascii&#34;&gt;1 - Qiita&lt;/span&gt;&lt;/a&gt;など、他の方が書いた記事を検索してみてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ハマったこと&lt;/h1&gt;
&lt;h2 id=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/h2&gt;
&lt;p&gt;正確なエラーメッセージは申し訳なくも忘れてしまったのですが、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;上で&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力した際、エラーになることがあります。&lt;br /&gt;
この場合、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を再起動するのを忘れている可能性がありますので、再起動してみてください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールを終えた直後では、まだ&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;は利用できないのです。&lt;/p&gt;
&lt;h2 id=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先ほどの「&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動」という手順で、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;というエラーに出遭うことがあります。&lt;br /&gt;
そのまま&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を入力して「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しても、&lt;code&gt;Variable not in scope: d1 :: ControlPattern -&amp;gt; t&lt;/code&gt;などというエラーになってしまうでしょう。&lt;br /&gt;
これは、前のセクションで触れた&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む際に、エラーになってしまったからです。&lt;/p&gt;
&lt;p&gt;原因はいろいろあり得るかと思いますが、私の場合、&lt;code&gt;~/.ghci&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定ファイルに&lt;code&gt;:set +m&lt;/code&gt;という行を加えていたためでした。&lt;br /&gt;
まず、&lt;code&gt;~/.ghci&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動するときに必ず読み込まれるファイルです。&lt;br /&gt;
必ず有効にしたい言語拡張や、&lt;code&gt;:set +m&lt;/code&gt;のような&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定を記載しておくファイルとなっています。要するに&lt;code&gt;~/.vimrc&lt;/code&gt;などと似たようなものですね。&lt;br /&gt;
そして&lt;code&gt;:set +m&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で複数行の入力を有効にするためのものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で&lt;code&gt;:set +m&lt;/code&gt;と実行すると、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;は入力した行を見て「あっ、この入力はまだ続きがありそうだな」と判断したとき、次の行を自動で前の行の続きとして扱うようになります。&lt;br /&gt;
そして、その場合入力の終了を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に伝えたい場合は、空行を入力しなければなりません。&lt;br /&gt;
結果、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を読み込む際に、空行が入力されないため、意図しない行が「前の行の続き」と&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に認識されてしまい、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;となってしまうようです。&lt;/p&gt;
&lt;p&gt;仕方ないので、直すために&lt;code&gt;~/.ghci&lt;/code&gt;を開いて&lt;code&gt;:set +m&lt;/code&gt;と書いた行をコメントアウトするか削除しちゃいましょう。&lt;br /&gt;
再び&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;で「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順にメニューをクリックすれば、今度は該当のエラーがなく起動するかと思います😌。&lt;/p&gt;
&lt;p&gt;このエラーは、特にすでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境を導入している方で遭遇するケースが多いかと思います。ご注意ください。&lt;/p&gt;
&lt;h2 id=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/h2&gt;
&lt;p&gt;表題の通りです。&lt;br /&gt;
困ったことに&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れた状態で&lt;code&gt;d1 $ sound &amp;quot;bd sn&amp;quot;&lt;/code&gt;などの式を実行しても、特に何のエラーもなく、音も鳴りません。&lt;br /&gt;
&lt;small&gt;（サーバーとして起動しているべき）&lt;/small&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;に接続し損ねたんだから、何かしらエラーが表示されてもいいはずなんですが、困ったことにウンともスンとも言いません😰。&lt;br /&gt;
と、言うわけで、何のエラーもなく音も出なかった場合は、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れてないか確認しましょう。&lt;/p&gt;
&lt;h1 id=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;※ここから先はおまけ &lt;span class=&#34;ascii&#34;&gt;+&lt;/span&gt; 宣伝です。&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしたいだけの方は適当に読み飛ばしてください&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまで、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;という、昨今の&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;の多くが好んで利用するツールで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を利用する方法を説明しました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;にはこの方法は書かれてませんが、より確実なインストール方法として、覚えておいていただけると幸いです。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境をインストールしている方にも参考になるかと思います。&lt;/p&gt;
&lt;p&gt;ところで、ここまで&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を自分でインストールしてみて、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としていくつか気になった点があります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;としては、ちょっと変わっているように感じました。&lt;/p&gt;
&lt;p&gt;それは、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が「標準」として提供している関数を実行する際、&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージに含まれるモジュールを&lt;code&gt;import&lt;/code&gt;するだけでなく、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを読んで、追加の関数を定義する必要がある、という点です。&lt;br /&gt;
大抵の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;は、そんなことしなくてもモジュールを&lt;code&gt;import&lt;/code&gt;するだけで使えるようになっています&lt;small&gt;（&lt;a href=&#34;http://hspec.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;https://github.com/chrisdone/lucid&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;lucid&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://hackage.haskell.org/package/clay&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;clay&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://khibino.github.io/haskell-relational-record/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;relational-record&lt;/span&gt;&lt;/a&gt;とか）&lt;/small&gt;。&lt;br /&gt;
つまり本来ならばわざわざ、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のような、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む専用のファイルを用意しなくとも良いはずなのです。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定で簡単に切り替えることができるものなので、もし間違ったファイルに設定してしまったら、言語の標準にあたる関数がおかしな動作をすることになりかねませんし、あまり良いやり方だとは思えません。本来なら設定に混ぜて書くべきものではないでしょう。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;はこんな仕様になっているかというと、それにはある意味&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;らしい制約が絡んでいると推測されます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する、というのは、実際には&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を起動して、&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルを読み込ませる、ということなのでした&lt;small&gt;（事実、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;などのエディターを介さなくとも、お使いのターミナルエミュレーターから&lt;code&gt;ghci&lt;/code&gt;コマンドを起動して&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;ファイルの中身をコピペするだけで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は利用できます）&lt;/small&gt;。&lt;br /&gt;
その&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;の中身を見てみると、サンプルで実行した&lt;code&gt;d1&lt;/code&gt;という関数が、下記のように定義されていることがわかります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sound.Tidal.Context&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- total latency = oLatency + cFrameTimespan&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;tidal &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; startTidal (superdirtTarget {oLatency &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.1&lt;/span&gt;, oAddress &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;, oPort &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;57120&lt;/span&gt;}) (defaultConfig {cFrameTimespan &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; p &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; streamReplace tidal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;で始まる行で、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の初期化を行っていると思われます。&lt;br /&gt;
初期化の際には、サーバーとして起動している&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続設定&lt;small&gt;（この場合&lt;code&gt;127.0.0.1&lt;/code&gt;の&lt;code&gt;57120&lt;/code&gt;番ポートへ接続している）&lt;/small&gt;を渡しているようです。&lt;br /&gt;
恐らくこの&lt;code&gt;startTidal&lt;/code&gt;関数が、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;へ接続し、代入した&lt;code&gt;tidal&lt;/code&gt;という変数に、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を含んでいるんでしょう。&lt;br /&gt;
そして、&lt;code&gt;let p = streamReplace tidal&lt;/code&gt;という行で、その&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;streamReplace&lt;/code&gt;関数に&lt;a href=&#34;http://capm-network.com/?tag=Haskell-%E9%83%A8%E5%88%86%E9%81%A9%E7%94%A8&#34;&gt;部分適用&lt;/a&gt;することで、&lt;code&gt;p&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を参照できるようにしています。&lt;br /&gt;
さらに、&lt;code&gt;let d1 = p 1&lt;/code&gt;などの行で、前の行で定義した&lt;code&gt;p&lt;/code&gt;に整数&lt;small&gt;（シンセサイザーの番号だそうです）&lt;/small&gt;を部分適用することで、結果、&lt;code&gt;d1&lt;/code&gt;、&lt;code&gt;d2&lt;/code&gt;などの関数へ、間接的に&lt;code&gt;tidal&lt;/code&gt;を渡すことになります。&lt;/p&gt;
&lt;p&gt;つまり&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数は、何らかの形で、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を持っているのです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として、&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数に毎回接続情報を渡すのは煩雑だと考えたためでしょう。&lt;br /&gt;
残念ながら、通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;がそうであるように、外部のサーバーに接続した結果取得されるものを、関数が暗黙に参照できるようにしたい場合、 — つまり、今回のようにユーザーが接続情報を明示的に渡すことなく使えるようにしたい場合 — 少なくともパッケージを&lt;code&gt;import&lt;/code&gt;するだけではうまくいきません&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のように、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のような外部に接続する処理を、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の実行時に書かなければならないのです。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;の行で作られる&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を&lt;code&gt;d1&lt;/code&gt;などの関数が暗黙に利用できるようにすることは、実際には&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;で行っているような方法を使わなくともできます。&lt;br /&gt;
そうすることで、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を変なファイルに切り替えてしまって、&lt;code&gt;d1&lt;/code&gt;などの関数の定義が間違ったものになってしまう&lt;small&gt;（あるいはそもそも定義されなくなってしまう）&lt;/small&gt;リスクを回避できます。&lt;br /&gt;
具体的には、下記のような方法が考えられます。&lt;br /&gt;
申し訳なくも私はこれ以上&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;に入れ込むつもりもないので、誰か&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を気に入った方が適当に提案するなりパッチを送るなりしてみてください&lt;small&gt;（他力本願😰）&lt;/small&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の中で&lt;code&gt;ReaderT&lt;/code&gt;を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で「関数に渡した引数を暗黙に利用できるようにする」といえば、やはり&lt;code&gt;ReaderT&lt;/code&gt;モナドトランスフォーマーが一番オーソドックスな方法でしょう。&lt;br /&gt;
実は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上では、&lt;code&gt;IO&lt;/code&gt;以外のモナドのアクションで&lt;code&gt;print&lt;/code&gt;することができます。&lt;br /&gt;
&lt;a href=&#34;https://www.reddit.com/r/haskell/comments/87otrn/you_can_override_the_monad_that_ghci_uses/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;You can override the monad that GHCi uses&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Reddit&lt;/span&gt;のスレッドでは、&lt;code&gt;ReaderT&lt;/code&gt;を使ったサンプルが紹介されています。&lt;br /&gt;
これと同じ要領で、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;-interactive-print&lt;/code&gt;というオプションに、&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;ReaderT&lt;/code&gt;経由で渡してから結果を&lt;code&gt;print&lt;/code&gt;する関数を設定しましょう。&lt;br /&gt;
あとは&lt;code&gt;d1&lt;/code&gt;などを&lt;code&gt;ReaderT&lt;/code&gt;のアクションにするだけで、それらを&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;から消し去ることができます。&lt;br /&gt;
残念ながらこの方法を使うと、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に与えた式の結果がすべて当該のモナドのアクションになっていなければならなくなるため、例えば単純な計算結果でさえ&lt;code&gt;return&lt;/code&gt;をいちいち書かないといけなくなります。しかし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の利用方法を見る限り、大きな問題にはならないだろうと思います。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;code&gt;ImplicitParams&lt;/code&gt;という、もっと直接的にこれを実現する言語拡張があります。文字通り、暗黙の引数を実現するための拡張です&lt;small&gt;（&lt;a href=&#34;https://qiita.com/philopon/items/e6d2522f5b514c219a5f&#34;&gt;参考&lt;/a&gt;）&lt;/small&gt;。&lt;br /&gt;
これを利用して、例えば&lt;code&gt;d1&lt;/code&gt;を&lt;code&gt;?tidal :: Stream =&amp;gt; ControlPattern -&amp;gt; IO ()&lt;/code&gt;のように型宣言しておき、&lt;code&gt;?tidal&lt;/code&gt;&lt;small&gt;（頭に&lt;code&gt;?&lt;/code&gt;を付けたものが暗黙の引数となります）&lt;/small&gt;を暗黙の引数として参照するようにしましょう。後は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の起動時に&lt;code&gt;?tidal&lt;/code&gt;を定義すれば、&lt;code&gt;?tidal&lt;/code&gt;の後に&lt;code&gt;d1&lt;/code&gt;などを定義する必要がなくなるので、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;はもっとコンパクトに済むはずです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他、&lt;code&gt;unsafePerformIO&lt;/code&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;など、ちょっと危ない手段を使う
&lt;ul&gt;
&lt;li&gt;こちらについては詳細を割愛します。&lt;code&gt;d1&lt;/code&gt;などの再利用性が下がるので、おすすめしません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の技術的な側面で気になった点は以上です。&lt;br /&gt;
ちょっと難しい話になってしまいましたが、これを機会に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;そのものへの興味を持っていただけると幸いです。&lt;br /&gt;
素晴らしいことに、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;そのものは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知らなくてもそれなりに使えるようになっているようですが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知った上で使えば、より簡単にトラブルシューティングができるようになりますし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をより柔軟に使えるようになるでしょう。&lt;/p&gt;
&lt;p&gt;もし、今回の記事や&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をきっかけに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を勉強してみたいと思ったら、&lt;a href=&#34;https://wiki.haskell.jp/Links&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Wiki&lt;/span&gt;の日本語のリンク集&lt;/a&gt;を読んで、自分に合う入門コンテンツを見つけてみてください！&lt;br /&gt;
それから、何か困ったことがあれば&lt;a href=&#34;https://haskell-jp.slack.com/messages/C5666B6BB/convo/C4M4TT8JJ-1547294914.091800/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;にある、&lt;span class=&#34;ascii&#34;&gt;#questions&lt;/span&gt;チャンネル&lt;/a&gt;で質問してみてください。&lt;br /&gt;
&lt;a href=&#34;https://join.slack.com/t/haskell-jp/shared_invite/enQtNDY4Njc1MTA5MDQxLTAzZGNkZDlkMWYxZDRlODI3NmNlNTQ1ZDc3MjQxNzg3OTg4YzUzNmUyNmU5YWVkMjFmMjFjYzk1OTE3Yzg4ZTM&#34;&gt;登録はこちら&lt;/a&gt;からどうぞ！&lt;/p&gt;
&lt;p&gt;それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Hacking!!&lt;/span&gt; 🎶🎶🎶&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;どのバージョンの&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;でどのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がインストールされるかは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;を管理している&lt;a href=&#34;https://www.stackage.org/&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;」というウェブサイトのトップページ&lt;/a&gt;にある、「&lt;span class=&#34;ascii&#34;&gt;Latest LTS per GHC version&lt;/span&gt;」というセクションをご覧ください。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;後で軽く触れる、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;という邪悪なテクニックを使わない限りは。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hourly-antenna.html&#34; lang=&#34;ja&#34;&gt;DroneでHaskell Antennaを毎時更新する&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://qiita.com/cp3/items/784f9ae0e09279b36ad8</id><title type="text">Haskell触る際の備忘録</title><updated>2019-01-14T18:00:09+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/cp3/items/784f9ae0e09279b36ad8"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/6e92a82a1d9fdb6a4b5a</id><title type="text">理想の浮動小数点数である「浜田のURR」を理解する</title><updated>2019-01-11T13:26:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/6e92a82a1d9fdb6a4b5a"/></entry><entry><id>https://qiita.com/ayase/items/a03e9e8484b492e6bc08</id><title type="text">Haskellで自然言語処理100本ノックの第2章を解いてみる。【前編】</title><updated>2019-01-08T02:04:51+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ayase/items/a03e9e8484b492e6bc08"/></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://qiita.com/chupaaaaaaan/items/709b6e241468e3f2dd1c</id><title type="text">トーラス上のライフゲームを、List Zipperを使用して実装してみた</title><updated>2019-01-07T12:36:27+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/chupaaaaaaan/items/709b6e241468e3f2dd1c"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id><title type="text">GCS で Drone 1.0 をキャッシュする</title><updated>2019-01-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;GCS で Drone 1.0 をキャッシュする&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2019-01-06&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 6, 2019
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Drone.html&#34;&gt;Drone&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．&lt;/p&gt;
&lt;h2 id=&#34;cache-in-drone&#34;&gt;Cache in Drone&lt;/h2&gt;
&lt;p&gt;Drone でキャッシュを利用するには次のような Plugin を使用する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drone-s3-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-s3-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drone-plugins/drone-s3-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-volume-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-volume-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drillster/drone-volume-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-gcs-cache: &lt;a href=&#34;https://github.com/hvalle/drone-gcs-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/hvalle/drone-gcs-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの &lt;code&gt;Trusted&lt;/code&gt; フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．&lt;/p&gt;
&lt;p&gt;ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．&lt;/p&gt;
&lt;h2 id=&#34;drone-gcs-cache&#34;&gt;Drone GCS Cache&lt;/h2&gt;
&lt;h3 id=&#34;認証鍵の設定&#34;&gt;認証鍵の設定&lt;/h3&gt;
&lt;p&gt;GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの &lt;code&gt;APIとサービス&lt;/code&gt; の &lt;code&gt;認証情報&lt;/code&gt; からサービスアカウントを作成し(このときに JSON が DL される)，&lt;code&gt;IAMと管理&lt;/code&gt; の &lt;code&gt;IAM&lt;/code&gt; からさっき作ったアカウントに &lt;code&gt;ストレージ管理者&lt;/code&gt; を追加した IAM を作成する．&lt;/p&gt;
&lt;p&gt;この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら &lt;code&gt;Allow Pull Requests&lt;/code&gt; にチェックする．&lt;/p&gt;
&lt;h3 id=&#34;yaml-の設定&#34;&gt;YAML の設定&lt;/h3&gt;
&lt;p&gt;あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restore:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; node_modules&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush_age:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは Drone の Secret に &lt;code&gt;gcs-access-json-key&lt;/code&gt; という名前で登録している場合である． ちなみに &lt;code&gt;flush_age&lt;/code&gt; は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で試す&#34;&gt;Haskell で試す&lt;/h2&gt;
&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/pull/3&#34;&gt;導入したPRはこれ&lt;/a&gt;． &lt;code&gt;.stack&lt;/code&gt; と &lt;code&gt;.stack-work&lt;/code&gt; をキャッシュする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell:8.6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara-drone-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack-work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;    ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;flush&lt;/code&gt; は同じなので割愛． &lt;code&gt;$HOME/.stack&lt;/code&gt; だと動作しなかったので，いっそのことカレントディレクトリに &lt;code&gt;.stack&lt;/code&gt; を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/before.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9分は長い． そんでアフター:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/after.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html</id><title type="text">Drone 1.0 を docker-compose up する</title><updated>2019-01-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Drone 1.0 を docker-compose up する&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2019-01-05&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 5, 2019
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Drone.html&#34;&gt;Drone&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/library.html&#34;&gt;library&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;新年一発目です． &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; が，めでたくバージョン1.0(まだ rc だけど)をリリースしてドキュメントも刷新されたんですけど，&lt;a href=&#34;https://0-8-0.docs.drone.io/install-for-github/&#34;&gt;0.8.x 時代にはあった &lt;code&gt;docker-compose&lt;/code&gt; でのやり方&lt;/a&gt;が書いてなかった(見つけられなかった)ので，そのメモ書きです． ちなみに経緯は，結構前に作っていた &lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;drone-haskell&lt;/a&gt; と言う Drone CI の Haskell クライアントを Drone 1.0 に対応したくて，手元で Drone を起動しようとしたためです． めでたく，Haskell クライアントも 1.0 に対応したので，それの紹介もおまけでします．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Drone.io, Inc. というアメリカ企業が開発している継続的デリバリーを支援するためのプラットフォームである． 同種のものに Jenkins や TravisCI，CircleCI などが挙げられます(多分)． 単純な利用者側(リポジトリにCIなどを設定する側)としては，TravisCI・CircleCI に似ているが，これらとの大きな違いとして，Drone は GitHub 上に OSS として公開されている点だ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと個人的に特徴的なのが Plugin という形で様々な機能を提供している点だ(このあたりは Jenkins に似ているのかな)． 公式のページより，組織アカウントを見た方が早い気がする(これに限らずドキュメントが色々追いついてない印象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugins - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-compose-する&#34;&gt;docker-compose する&lt;/h2&gt;
&lt;p&gt;さて本題． ローカルで Drone サーバを &lt;code&gt;docker-compose up&lt;/code&gt; して GitHub で利用する． GitHub で利用するには Drone を &lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-an-oauth-application&#34;&gt;GitHub の OAuth App として登録する必要がある&lt;/a&gt;． OAuth App にするにはパブリックな URL が必要なので，&lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; を利用する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ngrok http 8000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで仮に &lt;code&gt;abcdef.ngrok.io&lt;/code&gt; と言うドメインを得たとする． 次のような OAuth App を登録する:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/docker-compose-up-drone-1-0/oauth-app.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意点として，8.0.x のときは callback URL が &lt;code&gt;/authorize&lt;/code&gt; だったのに対し，1.0 では &lt;code&gt;/login&lt;/code&gt; となっている． あとは次のような &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを書けば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-server:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;9000&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .:/data&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=XXX&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=YYY&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_HOST=abcdef.ngrok.io&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;command:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; agent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; drone-server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SERVER=drone-server:9000&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;XXX&lt;/code&gt; は GitHub OAuth App の Client ID を，&lt;code&gt;YYY&lt;/code&gt; には Client Secret を記述する． &lt;code&gt;DRONE_RPC_SECRET&lt;/code&gt; の &lt;code&gt;ZZZ&lt;/code&gt; は server と agent で同じであればなんでも良いのだが，&lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-a-shared-secret&#34;&gt;ここ&lt;/a&gt;に &lt;code&gt;openssl rand -hex 16&lt;/code&gt; で生成すると書いてあるので，それに従う． これであとは &lt;code&gt;docker-compose up&lt;/code&gt; をすれば無事起動完了だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8000/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;ffe3ad2aa2a30d0ba4d848c1cd0f61238b73a21c&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ちなみに&#34;&gt;ちなみに&lt;/h3&gt;
&lt;p&gt;Drone ってクラウドのフリープランがあったのに記事を書いてる時に気づいた(遅い):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl https://cloud.drone.io/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;f16b67b54fb462d3a4b2cfa93f527d4f8d1e19af&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;わざわざ検証用に立てる必要なかったな笑 ちなみにフリープランでは5リポジトリまでと書いてあったが，試しに6個 Activate したらできた． 謎．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-drone-haskell&#34;&gt;おまけ: drone-haskell&lt;/h2&gt;
&lt;p&gt;ここからおまけ． drone の Haskell クライアントを作った． ちゃんとバージョン 1.0 に対応させてます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;matsubara0507/drone-haskell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drone 1.0 の RESTful API に関するドキュメントは見つからなかったので，唯一公式から出ている Drone クライアントである &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone-go&lt;/a&gt; のコード読んで実装した． なので，drone-go が間違ってたらこっちも間違ってる．&lt;/p&gt;
&lt;h3 id=&#34;利用したパッケージ&#34;&gt;利用したパッケージ&lt;/h3&gt;
&lt;p&gt;HTTP クライアントには &lt;a href=&#34;http://hackage.haskell.org/package/req&#34;&gt;req&lt;/a&gt; を，レスポンス型には &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; を利用した． このあたりの組み合わせについては昔記事に書いた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2017-08-13-create-rest-api-package-with-extensible.html&#34;&gt;extensible の拡張可能レコードを使って REST API Haskell パッケージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，管理がめんどくさい(加えて extensible は今の LTS にはまだないし)ので，Stackage や Hackage には登録していない． なので Stack でビルドするには &lt;code&gt;extra-deps&lt;/code&gt; に書き加える必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; extensible-0.5&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/drone-haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; XXX&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ちょっと工夫&#34;&gt;ちょっと工夫&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テストは Servant でモックサーバーを立てて行ってる
&lt;ul&gt;
&lt;li&gt;テストケースも drone-go から取ってきてる&lt;/li&gt;
&lt;li&gt;https://github.com/drone/drone-go/tree/master/drone/testdata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API のパスに &lt;a href=&#34;http://hackage.haskell.org/package/formatting&#34;&gt;formatting&lt;/a&gt; を使ってみた
&lt;ul&gt;
&lt;li&gt;あくまで試しに&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/blob/e735b77171eebedc35160346afec71cd7631b532/src/Drone/Client/Path.hs#L65-L102&#34;&gt;こんな感じ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/super-precure-monad.html</id><title type="text">モナドの新しい力！スーパープリキュアモナド！</title><updated>2018-12-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/super-precure-monad.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;この記事は&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;できたもの&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;この記事は&lt;/h1&gt;
&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt; その&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;&lt;/a&gt;兼&lt;a href=&#34;https://adventar.org/calendars/2984&#34;&gt;プリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2018&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事です。&lt;br /&gt;
毎度同時投稿で失礼します。&lt;br /&gt;
今年は私用で忙しかったので、のんびり書いてできあがったら空いてる日に投稿する、という楽なスタイルで書かせていただきました。なのでタイムスリップして&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事と言うことにします&lt;small&gt;（それにしてもずいぶん時間かかってしまってすみません、もうクリスマスも過ぎたし…😥）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;今回も例年の私の&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;どおり、&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;に、最近追加しようとした機能と、その際使用したもろもろの要素技術についての記事です。&lt;br /&gt;
タイプセーフプリキュア！そのものについては&lt;a href=&#34;https://haskell.jp/blog/posts/2018/substring-parser.html&#34;&gt;今年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月の記事&lt;/a&gt;や、そこで言及しているもっと古い記事をご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/h1&gt;
&lt;p&gt;従来より、タイプセーフプリキュア！には、&lt;code&gt;PreCureMonad&lt;/code&gt;と呼ばれる、プリキュアの台詞を&lt;code&gt;do&lt;/code&gt;記法で組み立てる機能があります。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で下記のように書くだけで、&lt;a href=&#34;https://www.youtube.com/watch?v=oQLIyIZ2vk0&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Go!&lt;/span&gt; プリンセスプリキュア」のあの名シーン&lt;/a&gt;を再現できます&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; scene &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       say &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyScarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;名シーンを単純な文字列のリストとして使いたい場合はこう👇しましょう&lt;small&gt;（出力は手で見やすく加工しています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; composeEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！プリンセスエンゲージ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;深紅の炎のプリンセス！キュアスカーレット！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;冷たい檻に閉ざされた夢、返していただきますわ。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;お覚悟を決めなさい！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;エクスチェンジ！モードエレガント！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;スカーレット・バイオリン！フェニックス！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;羽ばたけ炎の翼！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！ フェニックス・ブレイズ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ごきげんよう。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに&lt;code&gt;printEpisode&lt;/code&gt;という関数で実行すれば、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行ごとに間隔を置いてあの台詞を再生できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;プリキュア！プリンセスエンゲージ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;深紅の炎のプリンセス！キュアスカーレット！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;冷たい檻に閉ざされた夢、返していただきますわ。&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;お覚悟を決めなさい！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;エクスチェンジ！モードエレガント！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;スカーレット・バイオリン！フェニックス！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;羽ばたけ炎の翼！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;プリキュア！ フェニックス・ブレイズ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;ごきげんよう。&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんな&lt;code&gt;PreCureMonad&lt;/code&gt;ですが、先ほどのコードをよく読めばわかるとおり、ちょっと不格好ですよね。&lt;br /&gt;
具体的には下記の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKey_Scarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を返し、さらにその&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数に渡すことでキュアスカーレットのモード・エレガント（&lt;code&gt;CureScarlet_ModeElegant&lt;/code&gt;）を取得しています。&lt;br /&gt;
「&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を」返すという箇所について、&lt;code&gt;Towa&lt;/code&gt;に&lt;strong&gt;加えて&lt;/strong&gt;&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;strong&gt;新しく作っている&lt;/strong&gt;ように聞こえます。&lt;br /&gt;
本来同一人物であるはずの&lt;code&gt;Towa&lt;/code&gt;と&lt;code&gt;CureScarlet&lt;/code&gt;を、あたかも別々のものとして扱っているように捉えられかねません。&lt;br /&gt;
そう、本来プリキュアの「変身」は女の子自身の状態を書き換えるものとして表現した方が自然なのです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でそうした「状態」を表現する場合、名前のとおり&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を使うのが割と一般的な方法です&lt;small&gt;（プログラム全体で状態を管理する場合、&lt;code&gt;IORef&lt;/code&gt;や&lt;code&gt;TVar&lt;/code&gt;などを使う方が例外に強く安全ではありますが、それはさておき）&lt;/small&gt;。&lt;br /&gt;
しかし、従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;でプリキュアの変身や浄化技を表現する場合、&lt;strong&gt;女の子が変身していない状態で浄化技&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;purify&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を使おうとした場合をどのように扱うか&lt;/strong&gt;、という問題があります。&lt;br /&gt;
先ほどの例で言うところの&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という行でまさにその「浄化技」を実行しているのですが、プリキュアの設定上、特定の浄化技を使うには、特定のプリキュアのフォームに、専用のアイテムを渡さなければなりません。&lt;br /&gt;
タイプセーフプリキュア！ではこの点に強くこだわり、浄化技が使用できる組み合わせごとに型クラスのインスタンスを定義することで、間違った組み合わせを&lt;code&gt;purify&lt;/code&gt;関数に渡すと、型エラーになります&lt;small&gt;（詳しくは&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;タイプセーフプリキュア！を最初に技術的に解説した記事&lt;/a&gt;をご覧ください）&lt;/small&gt;。&lt;br /&gt;
当然、まだ変身していない状態の女の子を&lt;code&gt;purify&lt;/code&gt;関数に渡しても、エラーになってしまいます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; for (&lt;span class=&#34;dt&#34;&gt;Purification&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;                         &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;        arising from a use &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘purify’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘scene’&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;          scene &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プリキュア実装の大先輩である&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;では、同じようなケースで実行時エラーを出すようにしていますし、&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;においても、&lt;code&gt;ExceptT&lt;/code&gt;を使ってエラーにする、という方法が採れるでしょう。&lt;br /&gt;
しかしそこは「タイプセーフプリキュア！」。どうにかして、変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーにして、従来のこの振る舞いと一貫させたいところですよね。&lt;br /&gt;
というのが今回の課題です。&lt;/p&gt;
&lt;h1 id=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/h1&gt;
&lt;p&gt;今回の課題のとおり、「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラー」としつつ、「変身した状態での&lt;code&gt;purify&lt;/code&gt;を型エラーとしない」ためには、&lt;code&gt;purify&lt;/code&gt;や&lt;code&gt;transform&lt;/code&gt;を実行する前後で、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;内で共有している値の型を変更できるようにする必要があります。&lt;br /&gt;
残念ながら、これは従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;では不可能です。&lt;br /&gt;
&lt;code&gt;State s&lt;/code&gt;に対する&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: State s a -&amp;gt; (a -&amp;gt; State s b) -&amp;gt; State s b&lt;/code&gt;となっていることから察せられるとおり、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の中で共有する型は、アクションの実行前後にかかわらず同じ&lt;code&gt;s&lt;/code&gt;でないといけないためです。&lt;br /&gt;
これはそもそも従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の仕様上やむを得ないことです。&lt;br /&gt;
従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;はそもそもアクションの実行前後で、アクションの実行結果以外の型を変えることができないようになっています。&lt;br /&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;となっていることからしても、アクションの実行前後で&lt;code&gt;m&lt;/code&gt;は&lt;code&gt;m&lt;/code&gt;のままであることがわかります。&lt;/p&gt;
&lt;p&gt;この、「アクションの実行前後で、&lt;code&gt;m&lt;/code&gt;の型を変えることができる」ようにしたのが&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は次のような型宣言にすることで、アクションの実行前後で異なる型の “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を挟めるようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxApplicative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxMonad&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  ibind ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m j k b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i j a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i k b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IxApplicative&lt;/code&gt;は名前のとおり&lt;code&gt;IxMonad&lt;/code&gt;と同様に“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”が付いた&lt;code&gt;Applicative&lt;/code&gt;となっています。&lt;a href=&#34;http://hackage.haskell.org/package/indexed-0.1/docs/Control-Monad-Indexed.html&#34;&gt;詳しい定義はドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;唯一のメソッドである&lt;code&gt;ibind&lt;/code&gt;が、普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の引数をひっくり返して“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”を追加したものです。&lt;br /&gt;
&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;の&lt;code&gt;m&lt;/code&gt;に、型引数が&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ追加されていますね？これが“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”です。&lt;br /&gt;
ある&lt;code&gt;IxMonad&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;が&lt;code&gt;m i j a&lt;/code&gt;という形で型引数を渡されている時、&lt;code&gt;i&lt;/code&gt;がアクションを実行する&lt;strong&gt;前&lt;/strong&gt;の型、&lt;code&gt;j&lt;/code&gt;がアクションを実行した&lt;strong&gt;後&lt;/strong&gt;の型を表します。&lt;br /&gt;
&lt;code&gt;a&lt;/code&gt;は普通の&lt;code&gt;Monad&lt;/code&gt;と同様、アクションの実行結果となっています。&lt;/p&gt;
&lt;p&gt;さらに&lt;span class=&#34;ascii&#34;&gt;Indexed&lt;/span&gt;な&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad (&lt;/span&gt;&lt;code&gt;IxState&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;で使えるアクションの型宣言を見れば、&lt;code&gt;IxState&lt;/code&gt;で共有している状態の型が、アクションの実行前後で変更できることがよりはっきりとわかるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iget ::&lt;/span&gt;      &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i i i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ igetしてもIxStateが管理している状態は変わらないため、型もやはり変わらず。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iput ::&lt;/span&gt; j &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i j ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ iputするとIxStateが管理している状態は、引数で渡した値の型に変わる。&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらもおなじみ&lt;a href=&#34;http://hackage.haskell.org/package/mtl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mtl&lt;/span&gt;パッケージ&lt;/a&gt;にある&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;に、単純に “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を加えただけのものとなっています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2013/05/04/144840&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;の世界 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; モナドとわたしとコモナド&lt;/a&gt;で紹介された際の&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は、&lt;code&gt;ido&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Quasi Quote&lt;/span&gt;を使って&lt;code&gt;do&lt;/code&gt;記法を無理矢理シミュレートしていましたが、現在は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;RebindableSyntax&lt;/code&gt;という拡張を使うことで、普通の&lt;code&gt;do&lt;/code&gt;記法をそのまま利用することができるようになりました&lt;small&gt;（例は後で紹介します）&lt;/small&gt;。&lt;br /&gt;
さらに、現在は&lt;code&gt;RebindableSyntax&lt;/code&gt;を使った場合の諸々の問題を回避するべく、&lt;a href=&#34;https://github.com/jbracker/supermonad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を一般化した&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;と、それを簡単に使えるようにした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の型チェッカープラグイン&lt;/a&gt;が作られたり、&lt;a href=&#34;https://github.com/isovector/do-notation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;という、&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を型クラスで抽象化したパッケージ&lt;/a&gt;が作られたりしています。&lt;br /&gt;
今回は純粋に&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使うだけで十分だったので、&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;は使用しませんでしたが、今後&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;をもっと実践的に使用する機会があれば、使用してみたいと思います。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使用することで、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型を、アクションの実行前後で変更できるようになりました。&lt;br /&gt;
続いて、各女の子の状態を、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型として、どのように管理するかを検討しましょう。&lt;br /&gt;
というのも、タイプセーフプリキュア！には最新の&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;の時点で&lt;span class=&#34;ascii&#34;&gt;59&lt;/span&gt;人の女の子が収録されている&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のですが、それらすべてを変身前と変身後に分けて管理するだけでも、&lt;span class=&#34;ascii&#34;&gt;2 ^ 59&lt;/span&gt;通りの状態を型として表現できなければなりません。&lt;br /&gt;
これを直感的に表現できるようにするために、ちょっと型レベルプログラミングの力を借りましょう。そこで登場するのが「型レベル連想配列」です。&lt;br /&gt;
「型レベル連想配列」という言い方はあまりしないのでピンとこないかも知れませんが、要するに型&lt;small&gt;（タイプセーフプリキュア！の場合、プリキュアに変身する女の子一人一人に個別の型を割り当てているので、その個別の型）&lt;/small&gt;と、それに対応する値のペアを含んだ型レベルリストです。&lt;br /&gt;
大雑把に言うと、下記👇のような内容となります&lt;small&gt;（実際にはもう少し違う型で構成されています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;[ (&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;,   &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;True)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ プリキュアに変身する女の子を表す型（この場合「HUGっと！プリキュア」の野乃はな）&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt;,  &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;False)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;--         ^ 対応する女の子が変身しているかどうかを表すsingleton type。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           DataKindsで型に持ち上げられたBoolを、普通の値として扱えるよう変換するためのラッパー。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           申し訳なくもsingleton typeについては割愛します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           Haskell-jpのSlack Workspaceあたりでリクエストがあったら書こうかな。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Homare&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;False)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;, &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;別の視点で見ると、これはいわゆる&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;とも似ています。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;パッケージ&lt;/a&gt;や&lt;a href=&#34;https://github.com/chrisdone/labels&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;labels&lt;/span&gt;パッケージ&lt;/a&gt;、&lt;a href=&#34;https://www.athiemann.net/2017/07/02/superrecord.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;superrecord&lt;/span&gt;パッケージ&lt;/a&gt;がそうしているように、&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;は、フィールドのラベルを表す&lt;small&gt;（型レベルの、静的な）&lt;/small&gt;文字列をキーとして、それに対応する値を含んだ連想配列として見なすことができるためです。&lt;br /&gt;
事実私は今回、&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;を使ってこの機能を実装しました。他の&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;の実装でも良かったのですが、これ以外のものを全く使ったことがないので😅。&lt;/p&gt;
&lt;h1 id=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;できたもの&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;を組み合わせることで、&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;の各種アクションを、次のように置き換えられることがわかりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform &amp;lt;girl&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxState&lt;/code&gt;（実際にはその&lt;span class=&#34;ascii&#34;&gt;Monad Transformer&lt;/span&gt;版である&lt;code&gt;IxStateT&lt;/code&gt;）で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」に更新する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;がすでに変身している状態の場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身した状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、変身時の台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purify &amp;lt;precure&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキーを取得するため、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;にあらかじめ定義しておいた&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsGirl&lt;/code&gt;で取得した型を、これ以降&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と呼びます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;が「変身した状態」になっていない場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身していない状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、浄化技を使用したときの台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように生まれ変わった&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;を&lt;strong&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨&lt;/strong&gt;と呼ぶこととします💪&lt;/p&gt;
&lt;p&gt;下記が&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;のサンプルコードです。&lt;br /&gt;
野乃はながキュアエールに変身して、「ハート・フォー・ユー」という浄化技を放つまでを表しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cureYell ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreCureM&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;StatusTable&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[]) (StatusTable &amp;#39;&lt;/span&gt;[&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;True]) ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;cureYell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureYell&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enter&lt;/code&gt;は、旧&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;にはない、&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;に新しく追加されたアクションです。&lt;br /&gt;
引数で指定された女の子や、女の子が変身したプリキュアを「登場」させます。&lt;br /&gt;
具体的には、以下のように振る舞います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数で指定された値が女の子&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身していない状態」で追加する。&lt;/li&gt;
&lt;li&gt;引数で指定された値がすでに変身したプリキュア&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;に&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用し、女の子を表す値&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;を取得する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」で追加する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、&lt;code&gt;transform&lt;/code&gt;するにしても&lt;code&gt;purify&lt;/code&gt;するにしても、事前に変身前の女の子かその変身後のプリキュアが&lt;code&gt;enter&lt;/code&gt;していないといけません。&lt;br /&gt;
これは単純にその方が実装が簡単だから、という理由もありますし、一旦「登場」させたほうがなんとなくかっこいいかな、と感じたからです。&lt;/p&gt;
&lt;h2 id=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/h2&gt;
&lt;p&gt;ここまで述べたような基本的な仕様は実装できたものの、まだ解決すべき技術的な問題が見つかったので、残念ながらリリースはされていません&lt;small&gt;（その詳細は気が向いたら書きます）&lt;/small&gt;。&lt;br /&gt;
なので、試す場合は下記のように実行してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; chcp &lt;span class=&#34;dv&#34;&gt;65001&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ Windowsの方は恐らく必要&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; git clone &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;b super&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;monad https&lt;span class=&#34;fu&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; cd typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; stack build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; stack exec ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XRebindableSyntax&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XFlexibleContexts&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XTypeFamilies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((&amp;gt;&amp;gt;), (&amp;gt;&amp;gt;=))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Monad.Super&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       enter &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       transform &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;       purify &lt;span class=&#34;dt&#34;&gt;CureSword&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; data-line-number=&#34;18&#34;&gt;(ダビィー！)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; data-line-number=&#34;19&#34;&gt;プリキュア！ラブリンク！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; data-line-number=&#34;20&#34;&gt;(&lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; data-line-number=&#34;21&#34;&gt;勇気の刃！ キュアソード！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; data-line-number=&#34;22&#34;&gt;このキュアソードが 愛の剣で、あなたの野望を断ち切ってみせる！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; data-line-number=&#34;23&#34;&gt;閃け！ホーリー・ソード！&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーとする」といった仕様を試す場合は、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/super-precure-monad/gen/AllPreCureM.hs&#34;&gt;こちらに置いた、全プリキュアの変身と浄化技を列挙したテスト用ファイル&lt;/a&gt;を&lt;span class=&#34;ascii&#34;&gt;ghci&lt;/span&gt;で読んでみるといいでしょう。&lt;br /&gt;
先ほど👆の手順で&lt;code&gt;git clone&lt;/code&gt;したディレクトリーにおいて、あらかじめ&lt;code&gt;stack build&lt;/code&gt;を実行しておくのをお忘れなく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack build
$ stack exec ghci gen/AllPreCureM.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適当に&lt;code&gt;gen/AllPreCureM.hs&lt;/code&gt;を書き換えて&lt;code&gt;:r&lt;/code&gt;してみれば、概ねいい感じに動いていることがわかるはずです。&lt;/p&gt;
&lt;p&gt;例えば冒頭付近にある、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;act_CureDiamond_LovelyCommuneRaquel_CureLoveads &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; printEpisode &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureDiamond&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;によるアクションから、&lt;code&gt;transform Rikka (LovelyCommuneRaquel CureLoveads)&lt;/code&gt;という行を削除した上で&lt;code&gt;:r&lt;/code&gt;してみると、次のようなエラーになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; :r
[1 of 1] Compiling AllPreCureM      ( gen\AllPreCureM.hs, interpreted )

gen\AllPreCureM.hs:22:3: error:
    • Couldn&amp;#39;t match type ‘&amp;#39;False’ with ‘&amp;#39;True’
        arising from a use of ‘purify’
    • In a stmt of a &amp;#39;do&amp;#39; block:
        purify CureDiamond (LovelyCommuneRaquel CureLoveads)
      In the second argument of ‘($)’, namely
        ‘do enter Rikka
            purify CureDiamond (LovelyCommuneRaquel CureLoveads)’
      In the expression:
        printEpisode
          $ do enter Rikka
               purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |
22 |   purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと、変身していない状態で&lt;code&gt;purify&lt;/code&gt;することを型エラーにできていますね！&lt;/p&gt;
&lt;p&gt;ここまでできていながら残念ですが、リリースは、来年のプリキュアハッカソンか&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;あたりに乞うご期待と言うことで！💦&lt;br /&gt;
それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Super PreCure Hacking&lt;/span&gt;を❣️❣️❣️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;リンク先の動画をご覧になればわかるとおり、実際のそのシーンより大幅に省略されているところは突っ込まないでいただきたい…🙏。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;「この間の映画に出ていた人数より多くない？」と思った方へ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 「プリキュアオールスターズ」に出てくる女の子たちに加え、坂上あゆみ、ペコリン、若宮アンリ、はぐたんの&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;人が、タイプセーフプリキュア！の分類上&lt;code&gt;Girl&lt;/code&gt;として収録されています。ちなみにキュアモフルンも収録されていますが、モフルンはあくまでも変身アイテム&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;SpecialItem&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;という扱いです。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html</id><title type="text">cabal build で package.yaml を使う</title><updated>2018-12-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近少しずつ &lt;code&gt;cabal&lt;/code&gt; を使うようになりました。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; と &lt;code&gt;cabal&lt;/code&gt; のどちらを使ってもビルドできるようにプロジェクトを修正していたのですが、&lt;code&gt;cabal&lt;/code&gt; ファイルの取り扱いが難しかったのでメモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;方針としては &lt;code&gt;cabal&lt;/code&gt; コマンドの実行時にフックを仕掛けて &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;cabal&lt;/code&gt; ファイルを生成しようという感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; cabal &lt;span class=&#34;co&#34;&gt;--numeric-version&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fl&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;setup.hs-は何のためにあるのか&#34;&gt;Setup.hs は何のためにあるのか？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; を使ってプロジェクトを作ると &lt;code&gt;Setup.hs&lt;/code&gt; が以下の内容で自動的に生成されると思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今まで特に使わなくても困らなかったので、気にせずに放置していましたが、このファイルが今回の主役になります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; には &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-type&#34;&gt;build-type&lt;/a&gt; という設定項目があり、この値はデフォルトでは &lt;code&gt;Simple&lt;/code&gt; か &lt;code&gt;Custom&lt;/code&gt; のどちらかに自動的に推論されます。(他にも &lt;code&gt;Configure&lt;/code&gt;, &lt;code&gt;Make&lt;/code&gt; などもあります。詳しくはドキュメントを参照してください)&lt;/p&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Simple&lt;/code&gt; を指定した場合、&lt;code&gt;cabal&lt;/code&gt; は &lt;code&gt;Setup.hs&lt;/code&gt; に以下の内容が記述されているものとして処理を進めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため &lt;code&gt;Setup.hs&lt;/code&gt; を削除しても問題なくビルド可能です。&lt;/p&gt;
&lt;h3 id=&#34;custom&#34;&gt;Custom&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Custom&lt;/code&gt; を指定した場合、&lt;code&gt;Setup.hs&lt;/code&gt; の内容をユーザが自由に書き換えることができます。&lt;/p&gt;
&lt;p&gt;Cabal には &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#v:defaultMainWithHooks&#34;&gt;defaultMainWithHooks&lt;/a&gt; という素晴らしい関数が用意されています。&lt;/p&gt;
&lt;p&gt;この関数を利用することで、コマンドの前後に好きな処理を挟むことができます。(処理の上書きも可能です)&lt;/p&gt;
&lt;p&gt;詳しいドキュメントは &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#more-complex-packages&#34;&gt;3.3.8. More complex packages&lt;/a&gt; を参照ください。&lt;/p&gt;
&lt;h3 id=&#34;userhooks&#34;&gt;UserHooks&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;defaultMainWithHooks&lt;/code&gt; に渡す &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#t:UserHooks&#34;&gt;UserHooks&lt;/a&gt; 型はこんな感じで定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    runTests ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    readDesc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPreProcessors ::&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;PPSuffixHandler&lt;/span&gt; ],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPrograms ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preConf  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    confHook ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postConf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBuild  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    buildHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBuild ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preRepl  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    replHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postRepl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preClean  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    cleanHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postClean ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preCopy  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    copyHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postCopy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preInst  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    instHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postInst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preSDist  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    sDistHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postSDist ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preReg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    regHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postReg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preUnreg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    unregHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postUnreg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHscolour  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hscolourHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHscolour ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preDoctest  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    doctestHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postDoctest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHaddock  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    haddockHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHaddock ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    testHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    benchHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけあれば、やりたいことはほとんど出来そうですね。&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;p&gt;フックする場所はたくさんあるので問題無さそうです。&lt;/p&gt;
&lt;p&gt;しかし、これだけあると、どこにフックすれば良いのか？ということになるのですが、処理的には &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;.cabal&lt;/code&gt; ファイルを生成したいので &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込む手前で差し込む必要がありそうです。&lt;/p&gt;
&lt;p&gt;適当に cabal のコードを読んでいると、どうやら &lt;a href=&#34;https://github.com/haskell/cabal/blob/e15d87d542b4b23983aed3d54e0b42585257f453/cabal-install/Distribution/Client/CmdBuild.hs#L119&#34;&gt;establishProjectBaseContext&lt;/a&gt; という関数が &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込んでコンテキストを作っているっぽいことがわかりました。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;preBuild&lt;/code&gt; にフックすれば良さそうです。(&lt;code&gt;cabal&lt;/code&gt; のコードベースについて全然わからないので、本当に合ってるかどうかは不安)&lt;/p&gt;
&lt;p&gt;最終的に、こんな感じで完成しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple.Setup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Types.HookedBuildInfo&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;, emptyHookedBuildInfo)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; myHook &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; simpleUserHooks {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    preBuild &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pbHpack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  defaultMainWithHooks myHook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pbHpack ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;pbHpack _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; emptyHookedBuildInfo&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/package/hpack&#34;&gt;hpack&lt;/a&gt; パッケージの関数をそのまま使ってます。&lt;/p&gt;
&lt;p&gt;今回は他に何もしないので &lt;code&gt;emptyHookedBuildInfo&lt;/code&gt; で大丈夫でした。(たぶん)&lt;/p&gt;
&lt;h3 id=&#34;extra-source-files&#34;&gt;extra-source-files&lt;/h3&gt;
&lt;p&gt;キャッシュの問題があるので &lt;code&gt;extra-source-files&lt;/code&gt; に &lt;code&gt;package.yaml&lt;/code&gt; を追加しておくと良さそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-source-files:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; package.yaml&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;custom-setup&#34;&gt;custom-setup&lt;/h3&gt;
&lt;p&gt;最後に忘れてはいけないのが、&lt;code&gt;custom-setup&lt;/code&gt; の設定です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Setup.hs&lt;/code&gt; で利用する依存関係などは &lt;code&gt;library&lt;/code&gt; や &lt;code&gt;executables&lt;/code&gt;, &lt;code&gt;tests&lt;/code&gt; と同様に &lt;code&gt;custom-setup&lt;/code&gt; を &lt;code&gt;package.yaml&lt;/code&gt; に追記します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;custom-setup:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; Cabal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hpack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成です。&lt;/p&gt;
&lt;p&gt;最初の一度だけは &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;cabal&lt;/code&gt; ファイルを生成する必要がありますが、それ以降は必要ありません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash
$ hpack package.yaml
$ cabal new-build&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;失敗したこと&#34;&gt;失敗したこと&lt;/h2&gt;
&lt;p&gt;最初はフックさせずにこんな感じですぐに実装できるものだと思ってましたが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;  defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと、あんまり上手くいきません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.yaml&lt;/code&gt; を更新しても実行されなかったり、期待するタイミングで &lt;code&gt;.cabal&lt;/code&gt; ファイルが生成されていないっぽい感じでした。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;とりあえず実装してみたという感じなので、実際どのぐらい使えるのか試してみようと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; も &lt;code&gt;cabal&lt;/code&gt; も両方とも良いビルドツールだと思います。&lt;/p&gt;
&lt;p&gt;もうちょっとしたら、&lt;code&gt;cabal&lt;/code&gt; も同様にオススメしていこうと思います。&lt;/p&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-12-19T09:22:10.151+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html</id><title type="text">Elm 0.19 で作るライフゲーム</title><updated>2018-12-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elm 0.19 で作るライフゲーム&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-19&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/elm2&#34;&gt;Elm2(完全版) Advent Calendar 2018&lt;/a&gt; の19日目の記事です．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ライフゲームを Elm で作りました。 ウェブアプリケーション(?)としては，鉄板中の鉄板ですね． 完全に一発ネタ+思いつきでやったのですが，Elm の最新バージョンによる違いもあり，いくつか躓いたのでそのメモ書きです(巷の資料の多くは旧バージョン)． まぁそれでも2日ぐらいでできるので Elm は便利ですね．&lt;/p&gt;
&lt;p&gt;完成品は&lt;a href=&#34;https://matsubara0507.github.io/lifegame&#34;&gt;コレ&lt;/a&gt;で，コードは GitHub においてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/lifegame&#34;&gt;matsubara0507/lifegame - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ライフゲーム&#34;&gt;ライフゲーム&lt;/h2&gt;
&lt;p&gt;ライフゲームのルールは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;囲碁や将棋のような NxM マスの盤上（今回は正方形 NxN）&lt;/li&gt;
&lt;li&gt;マスの状態は「生」と「死」がある&lt;/li&gt;
&lt;li&gt;状態の更新の規則は以下の3つ
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;生の状態の回りに生の状態のマスが2つか3つならば生のまま&lt;/li&gt;
&lt;li&gt;死の状態の回りに生の状態のマスが3つならば生になる&lt;/li&gt;
&lt;li&gt;それ以外は死の状態になる&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでいう「回り」というのは，自身のマスの周囲８マスのことを指す．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;一般的なライフゲームに加えて，次のようなことを実現した．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;レンジスライダーで盤面の粒度をコントロール&lt;/li&gt;
&lt;li&gt;レンジスライダーで盤面の更新間隔をコントロール&lt;/li&gt;
&lt;li&gt;URLのクエリから生と死の画像を上書き&lt;/li&gt;
&lt;li&gt;スマホでも動作するように Touch イベントをいい感じに&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;実装について&#34;&gt;実装について&lt;/h2&gt;
&lt;p&gt;次の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/miyamo_madoka/items/2cad5473010292982303&#34;&gt;[Elm]Life Gameで生命を生み出す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記憶に新しいのでステップバイステップにまとめる．&lt;/p&gt;
&lt;h3 id=&#34;盤面の描写&#34;&gt;盤面の描写&lt;/h3&gt;
&lt;p&gt;まずはモデルを考える． 適当にパッケージを探して見たが， Elm 0.19 に対応している良さげなものはなかったので自作することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alisa &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回は正方形を想定するので &lt;code&gt;size&lt;/code&gt; は一辺のマス数にする． つまり初期化関数は次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;initBoard n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n, cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に盤面をどうやって描写するかを考えた． テーブルでゴリゴリ書くのもいいかなと思ったが，あんまりエレガントではない気がした． ヒントを得るために GitHub をブラブラしてたら個人ページの左下の組織アカウント一覧に目が行った． HTMLを見てみると，これは直列に繋いだ &lt;code&gt;div&lt;/code&gt; を適当なタイミングで折り返しているようだ． このやり方なら &lt;code&gt;cells&lt;/code&gt; を &lt;code&gt;size&lt;/code&gt; 個ごとに行へとする必要がなく，完全にCSSだけでなんとかなる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; viewBoard (initBoard &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;viewBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;viewBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;        attr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    concatMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;viewCell board cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;        styleAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; title=&#34;21&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; title=&#34;22&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; title=&#34;24&#34;&gt;    Html.img (List.concat [ styleAttrs, [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ] ]) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; title=&#34;26&#34;&gt;concatMapWith &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-27&#34; title=&#34;27&#34;&gt;concatMapWith f g board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-28&#34; title=&#34;28&#34;&gt;    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.map g&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-30&#34; title=&#34;30&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-31&#34; title=&#34;31&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-33&#34; title=&#34;33&#34;&gt;maxLength &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-34&#34; title=&#34;34&#34;&gt;maxLength &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;90.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-36&#34; title=&#34;36&#34;&gt;vmin &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-37&#34; title=&#34;37&#34;&gt;vmin n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;append (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n) &lt;span class=&#34;st&#34;&gt;&amp;quot;vmin&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4bx9X6b6S7Ma1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;プログラムの中で割り算を記述するのは気がひけるが，まぁ上手く描写されているのでよしとする．&lt;/p&gt;
&lt;h3 id=&#34;粒度スライダーの導入&#34;&gt;粒度スライダーの導入&lt;/h3&gt;
&lt;p&gt;スライダーには次のパッケージを利用した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/&#34;&gt;carwow/elm-slider - Elm Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/SingleSlider&#34;&gt;SingleSlider&lt;/a&gt; を使いたい． SingleSlider の中に &lt;code&gt;Model&lt;/code&gt; や &lt;code&gt;Msg&lt;/code&gt; などが定義されているので，それらを適切に使えば良い．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  { board &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  , sizeSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always (initModel, Cmd.none)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;        size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;            &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;        defaultSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;            SingleSlider.defaultModel&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;        sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;            { defaultSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;5.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;                , &lt;span class=&#34;fu&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;                , step &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;                , value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;                , minFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;                , maxFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;                , currentValueFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;                    \n _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;1列のマス数: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;            }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;                    initBoard (&lt;span class=&#34;fu&#34;&gt;truncate&lt;/span&gt; updatedSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;            , Cmd.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;        sliderAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-63&#34; title=&#34;63&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-64&#34; title=&#34;64&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-65&#34; title=&#34;65&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-66&#34; title=&#34;66&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-67&#34; title=&#34;67&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-68&#34; title=&#34;68&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-69&#34; title=&#34;69&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-70&#34; title=&#34;70&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-71&#34; title=&#34;71&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-72&#34; title=&#34;72&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-73&#34; title=&#34;73&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-74&#34; title=&#34;74&#34;&gt;        , viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-75&#34; title=&#34;75&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4bXck9C58qFa1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; の初期化関数，&lt;code&gt;update&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; メソッドがそれぞれあって，それを呼び出して &lt;code&gt;map&lt;/code&gt; するだけ． こういう風に細かいパーツを呼び出すだけでできるデザインいいですよね．&lt;/p&gt;
&lt;h3 id=&#34;状態と入力&#34;&gt;状態と入力&lt;/h3&gt;
&lt;p&gt;現状はまだ全セルが死んでいる状態なので，何らかの入力を受け取って好きなセルを生きてる状態にできるようにする必要がある． まずはPCだけ考えるとして，できればセルを一個一個クリックして更新する形にはしたくない(めんどくさいから)． 生状態にできるかどうかのフラグと，オンの時だけマウスオーバーで生状態にするようにしたい． なので，まずはフラグを &lt;code&gt;Model&lt;/code&gt; に追加した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 状態の更新が可能か&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;initBoard n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;planting&lt;/code&gt; が真のときだけマウスオーバーでセルを生状態にできる(ようにする)． したがって「&lt;code&gt;planting&lt;/code&gt; のオンオフ」と「セルを生状態にする」の二つの &lt;code&gt;Msg&lt;/code&gt; が必要だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- インデックスのセルを生状態にする&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 生状態への変更を可能にする&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;updateBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;updateBoard msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; idx &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;            ( born idx board, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; xor board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;born &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;born idx board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.set idx &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，盤上をクリックして &lt;code&gt;planting&lt;/code&gt; のオンオフをし，マウスオーバーで生状態にするように &lt;code&gt;view&lt;/code&gt; へ &lt;code&gt;Msg&lt;/code&gt; を追加する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html.Events.Extra.Pointer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pointer&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;viewBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;viewBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;        attr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;    concatIndexedMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;viewCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;        styleAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;        bornAttr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                [ Pointer.onDown (always &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;                , Pointer.onOver (always (&lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; idx))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;                ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-31&#34; title=&#34;31&#34;&gt;                [ Pointer.onDown (always &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-33&#34; title=&#34;33&#34;&gt;        imageLink &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-34&#34; title=&#34;34&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; cell &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-35&#34; title=&#34;35&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-36&#34; title=&#34;36&#34;&gt;                    [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-37&#34; title=&#34;37&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-38&#34; title=&#34;38&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-39&#34; title=&#34;39&#34;&gt;                    [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-41&#34; title=&#34;41&#34;&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-42&#34; title=&#34;42&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-43&#34; title=&#34;43&#34;&gt;concatIndexedMapWith &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-44&#34; title=&#34;44&#34;&gt;concatIndexedMapWith f g board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-45&#34; title=&#34;45&#34;&gt;    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-46&#34; title=&#34;46&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.indexedMap g&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-47&#34; title=&#34;47&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-48&#34; title=&#34;48&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マウスイベントには，おいおいスマホ対応もできるように &lt;a href=&#34;https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest&#34;&gt;&lt;code&gt;mpizenberg/elm-pointer-events&lt;/code&gt;&lt;/a&gt; パッケージを利用した． あとは &lt;code&gt;main&lt;/code&gt; 側を書き換えれば出来上がり:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;                ( updatedBoard, cmd ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;                    updateBoard subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard }, Cmd.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; cmd )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;        sliderAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;        , Html.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4c3qbgJmvZ8a1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;更新を追加&#34;&gt;更新を追加&lt;/h3&gt;
&lt;p&gt;いよいよライフゲーム化． まず，上述した状態変化の定義を関数(&lt;code&gt;nextCell&lt;/code&gt;)にする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;nextBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;nextBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.indexedMap (nextCell board) board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;nextCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;nextCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; ( countAroundAliveCell board idx, cell ) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;        ( &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;        ( &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, _ ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;countAroundAliveCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;countAroundAliveCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Debug.todo &lt;span class=&#34;st&#34;&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;countAroundAliveCell&lt;/code&gt; は「回り」の生状態のセル数を返す想定． ここで少し大変． &lt;code&gt;cells&lt;/code&gt; を2次元配列ではなく，1次元配列にしてCSSで折りたたむようにしてしまったので，壁際にあるかどうかの判定をインデックスと盤面のサイズから導く必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;countAroundAliveCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;countAroundAliveCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;    aroundCell board idx &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.filter ((&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.length&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;aroundCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;aroundCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;    [ &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; modBy board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size idx &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;        [] &lt;span class=&#34;co&#34;&gt;-- 左端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;        [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;    , [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size ] &lt;span class=&#34;co&#34;&gt;-- 上下は `Array.get` で `Nothing` になる&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;    , &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; modBy board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size idx &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;        &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;        [] &lt;span class=&#34;co&#34;&gt;-- 右端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;        [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.concat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.filterMap (\n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Array.get n board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで更新部分はできた． 次に &lt;code&gt;nextBoard&lt;/code&gt; 関数を呼び出すタイミングを &lt;code&gt;subscriptions&lt;/code&gt; と &lt;code&gt;Msg&lt;/code&gt; で定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;  , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;  , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; nextBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-24&#34; title=&#34;24&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-26&#34; title=&#34;26&#34;&gt;        Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-29&#34; title=&#34;29&#34;&gt;        Time.every &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt; (always &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4c7ncvvgQVqa1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;時間スライダーの導入&#34;&gt;時間スライダーの導入&lt;/h3&gt;
&lt;p&gt;ついでに更新間隔の時間もスライダーで設定できるようにした． やり方は簡単で，&lt;code&gt;Model&lt;/code&gt; にもう一つ &lt;code&gt;SingleSlider&lt;/code&gt; を生やせばいい:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;  { board &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;  , sizeSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;  , tickSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;        tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;            { defaultSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; title=&#34;14&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; title=&#34;15&#34;&gt;                , &lt;span class=&#34;fu&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;1000.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; title=&#34;16&#34;&gt;                , step &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;10.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; title=&#34;17&#34;&gt;                , value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;100.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; title=&#34;18&#34;&gt;                , minFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-19&#34; title=&#34;19&#34;&gt;                , maxFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-20&#34; title=&#34;20&#34;&gt;                , currentValueFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-21&#34; title=&#34;21&#34;&gt;                    \n _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;更新間隔: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n, &lt;span class=&#34;st&#34;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-22&#34; title=&#34;22&#34;&gt;            }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-24&#34; title=&#34;24&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-25&#34; title=&#34;25&#34;&gt;    , sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-26&#34; title=&#34;26&#34;&gt;    , tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-27&#34; title=&#34;27&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-31&#34; title=&#34;31&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-35&#34; title=&#34;35&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-36&#34; title=&#34;36&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-38&#34; title=&#34;38&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-39&#34; title=&#34;39&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-40&#34; title=&#34;40&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-41&#34; title=&#34;41&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-42&#34; title=&#34;42&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-43&#34; title=&#34;43&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-44&#34; title=&#34;44&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-45&#34; title=&#34;45&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-46&#34; title=&#34;46&#34;&gt;            , Cmd.batch [ Cmd.map &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; cmd ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-47&#34; title=&#34;47&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-48&#34; title=&#34;48&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-49&#34; title=&#34;49&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-50&#34; title=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-51&#34; title=&#34;51&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-52&#34; title=&#34;52&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-53&#34; title=&#34;53&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-54&#34; title=&#34;54&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-55&#34; title=&#34;55&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-56&#34; title=&#34;56&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-58&#34; title=&#34;58&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-59&#34; title=&#34;59&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-60&#34; title=&#34;60&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-61&#34; title=&#34;61&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-62&#34; title=&#34;62&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-63&#34; title=&#34;63&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-64&#34; title=&#34;64&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-65&#34; title=&#34;65&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-66&#34; title=&#34;66&#34;&gt;            , &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-67&#34; title=&#34;67&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-68&#34; title=&#34;68&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-69&#34; title=&#34;69&#34;&gt;        , Html.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-70&#34; title=&#34;70&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでスライダーが増えた． あとは &lt;code&gt;subscriptions&lt;/code&gt; のところを書き換えるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;        Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;        Time.every model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value (always &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単ですね． &lt;a href=&#34;https://ellie-app.com/4c7nNjzjy44a1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;urlパーサー&#34;&gt;URLパーサー&lt;/h3&gt;
&lt;p&gt;生状態や死状態の画像を好きなのに変えたいなと思った． そこで，ちょうど elm/url の勉強をしたので，url のクエリから指定できるようにしようと考えた． まずは状態の画像のリンクを &lt;code&gt;Board&lt;/code&gt; に持たせる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;    { alive &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; title=&#34;10&#34;&gt;    , dead &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; title=&#34;11&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; title=&#34;13&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; title=&#34;14&#34;&gt;initBoard n links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; title=&#34;15&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; title=&#34;16&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; title=&#34;17&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; title=&#34;18&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; title=&#34;19&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-21&#34; title=&#34;21&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-22&#34; title=&#34;22&#34;&gt;viewCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-26&#34; title=&#34;26&#34;&gt;        imageLink &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-27&#34; title=&#34;27&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; cell &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-28&#34; title=&#34;28&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-29&#34; title=&#34;29&#34;&gt;                    [ src board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;dead ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-31&#34; title=&#34;31&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-32&#34; title=&#34;32&#34;&gt;                    [ src board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;alive ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-34&#34; title=&#34;34&#34;&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は URL から値を取得する． URL を取得するには &lt;code&gt;Browser.application&lt;/code&gt; を使う必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;    Browser.application&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;        , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;        , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;        , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;        , onUrlRequest &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always (&lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; defaultLinks)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;        , onUrlChange &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \url &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; (parseUrl url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; _ url _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (initModel url, Cmd.none)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; title=&#34;14&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; title=&#34;15&#34;&gt;initModel url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; title=&#34;19&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size (parseUrl url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; title=&#34;20&#34;&gt;    , sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-21&#34; title=&#34;21&#34;&gt;    , tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-22&#34; title=&#34;22&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-24&#34; title=&#34;24&#34;&gt;defaultLinks &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-25&#34; title=&#34;25&#34;&gt;    { alive &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-26&#34; title=&#34;26&#34;&gt;    , dead &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-27&#34; title=&#34;27&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-29&#34; title=&#34;29&#34;&gt;parseUrl &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-30&#34; title=&#34;30&#34;&gt;parseUrl url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Debug.todo &lt;span class=&#34;st&#34;&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.onUrlRequest&lt;/code&gt; や &lt;code&gt;.onUrlChange&lt;/code&gt; は SPA 内で URL を変更して遷移した場合に使う． 今回はおそらく不要だが適当にそれっぽい &lt;code&gt;Msg&lt;/code&gt; を生やした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; title=&#34;8&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; title=&#34;9&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; title=&#34;12&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; title=&#34;13&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; title=&#34;14&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; title=&#34;16&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; title=&#34;17&#34;&gt;                    initBoard (&lt;span class=&#34;fu&#34;&gt;truncate&lt;/span&gt; updatedSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value) model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links &lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; title=&#34;18&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; title=&#34;19&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; title=&#34;20&#34;&gt;            , Cmd.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; title=&#34;21&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-23&#34; title=&#34;23&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-25&#34; title=&#34;25&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-27&#34; title=&#34;27&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; links &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-30&#34; title=&#34;30&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-31&#34; title=&#34;31&#34;&gt;                board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-32&#34; title=&#34;32&#34;&gt;                    model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-33&#34; title=&#34;33&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-34&#34; title=&#34;34&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-35&#34; title=&#34;35&#34;&gt;                    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-36&#34; title=&#34;36&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-37&#34; title=&#34;37&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard }, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さぁいよいよ URL のパーサーだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing (&lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser.Query&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlQuery&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;parseUrl &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;parseUrl url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; title=&#34;8&#34;&gt;        queryParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; title=&#34;9&#34;&gt;            UrlQuery.map2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; title=&#34;10&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; title=&#34;11&#34;&gt;                (UrlQuery.string &lt;span class=&#34;st&#34;&gt;&amp;quot;alive&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;alive))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; title=&#34;12&#34;&gt;                (UrlQuery.string &lt;span class=&#34;st&#34;&gt;&amp;quot;dead&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;dead))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-14&#34; title=&#34;14&#34;&gt;        parser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-15&#34; title=&#34;15&#34;&gt;            Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; queryParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-17&#34; title=&#34;17&#34;&gt;    { url &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Url.parse parser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回の要件ではクエリしか必要ないので &lt;code&gt;{ url | path = &amp;quot;&amp;quot; }&lt;/code&gt; とパースする前にした． 現状の全体のコードは&lt;a href=&#34;https://gist.github.com/matsubara0507/b3c5b33505fbe50f63c1d3242414eece&#34;&gt;こんな感じ&lt;/a&gt;(ellie は application を動かせない)． これで &lt;code&gt;https://matsubara0507.github.io/lifegame?alive=http://4.bp.blogspot.com/-_A6aKYIGbf8/UOJXnVPCmQI/AAAAAAAAKH0/CHFd0OPz0Hk/s180-c/virus_character.png&lt;/code&gt; などで状態の画像が指定できるようになった．&lt;/p&gt;
&lt;h3 id=&#34;スマホ対応&#34;&gt;スマホ対応&lt;/h3&gt;
&lt;p&gt;最後にスマホでもできるようにした． 色々試行錯誤してみたが，マウスのような &lt;code&gt;onOver&lt;/code&gt; を使うことはできない． マウスのように一筆書きのみたいに入力するには &lt;code&gt;Touch.onMove&lt;/code&gt; を使うしかなく，このためには &lt;code&gt;Model&lt;/code&gt; に &lt;code&gt;Touch.onMove&lt;/code&gt; イベントで取得した値を保持させる必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; title=&#34;6&#34;&gt;    , touchPos &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-7&#34; title=&#34;7&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-9&#34; title=&#34;9&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-10&#34; title=&#34;10&#34;&gt;initBoard n links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-11&#34; title=&#34;11&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-12&#34; title=&#34;12&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-13&#34; title=&#34;13&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-14&#34; title=&#34;14&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-15&#34; title=&#34;15&#34;&gt;    , touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-16&#34; title=&#34;16&#34;&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.touchPos&lt;/code&gt; を更新するために &lt;code&gt;BoardMsg&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; を書き換える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-6&#34; title=&#34;6&#34;&gt;updateBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-7&#34; title=&#34;7&#34;&gt;updateBoard msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; pos &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-12&#34; title=&#34;12&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-13&#34; title=&#34;13&#34;&gt;            , Cmd.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-14&#34; title=&#34;14&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-16&#34; title=&#34;16&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-17&#34; title=&#34;17&#34;&gt;view board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-21&#34; title=&#34;21&#34;&gt;        getTouchPos event &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-22&#34; title=&#34;22&#34;&gt;            List.head event&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;targetTouches&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-23&#34; title=&#34;23&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;clientPos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-24&#34; title=&#34;24&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault ( &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-26&#34; title=&#34;26&#34;&gt;        bornAttr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-27&#34; title=&#34;27&#34;&gt;            [ Touch.onWithOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-28&#34; title=&#34;28&#34;&gt;                &lt;span class=&#34;st&#34;&gt;&amp;quot;touchmove&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-29&#34; title=&#34;29&#34;&gt;                { stopPropagation &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, preventDefault &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-30&#34; title=&#34;30&#34;&gt;                (&lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; getTouchPos)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-31&#34; title=&#34;31&#34;&gt;            ]    &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-33&#34; title=&#34;33&#34;&gt;    concatIndexedMapWith (Html.div (attr &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; bornAttr)) (viewCell board) board&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確か &lt;code&gt;.preventDefault&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; にするとスワイプ(?)で画面が動いてしまうのを止めてくれるらしい． さて問題はここから． &lt;code&gt;cells&lt;/code&gt; を1次元配列にしてしまった弊害パート2で，この &lt;code&gt;.touchPos&lt;/code&gt; からなんとかして配列のインデックスを出さなきゃいけない． 幸いなことにセル一つの大きさは相対サイズにしていたので，盤全体の実際の大きさとセル数がわかれば逆算できる． 盤全体の大きさを得るには &lt;code&gt;Dom.getElement&lt;/code&gt; を使う必要があり，そのためには &lt;code&gt;BoardMsg&lt;/code&gt; を追加する必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Element&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; title=&#34;7&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; title=&#34;8&#34;&gt;update msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; pos &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-13&#34; title=&#34;13&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-14&#34; title=&#34;14&#34;&gt;            , Dom.getElement &lt;span class=&#34;st&#34;&gt;&amp;quot;board&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-15&#34; title=&#34;15&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Task.attempt (&lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Result.toMaybe)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-16&#34; title=&#34;16&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-19&#34; title=&#34;19&#34;&gt;            ( board, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-21&#34; title=&#34;21&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-22&#34; title=&#34;22&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-23&#34; title=&#34;23&#34;&gt;                &lt;span class=&#34;co&#34;&gt;-- 1セルの大きさ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-24&#34; title=&#34;24&#34;&gt;                ( px, py ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-25&#34; title=&#34;25&#34;&gt;                    ( &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;width &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-26&#34; title=&#34;26&#34;&gt;                    , &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;height &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-27&#34; title=&#34;27&#34;&gt;                    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-29&#34; title=&#34;29&#34;&gt;                ( tx, ty ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-30&#34; title=&#34;30&#34;&gt;                    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;touchPos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-32&#34; title=&#34;32&#34;&gt;                &lt;span class=&#34;co&#34;&gt;-- タップしたところの2次元座標&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-33&#34; title=&#34;33&#34;&gt;                ( x, y ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-34&#34; title=&#34;34&#34;&gt;                    ( (tx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;x) &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; px &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-35&#34; title=&#34;35&#34;&gt;                    , (ty &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;y) &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; py &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-36&#34; title=&#34;36&#34;&gt;                    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-37&#34; title=&#34;37&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-38&#34; title=&#34;38&#34;&gt;            ( born (y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; x) board, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成． ちなみに，最初は全てのセルの &lt;code&gt;Dom.getElement&lt;/code&gt; して，&lt;code&gt;element.width&lt;/code&gt; を比較する全探索方式でやってみたが，遅すぎて使い物にならなかったので，逆算するようにした． まぁ多少誤差があったってもともと指でなぞってるだけなのでいいでしょう．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;.touchPos&lt;/code&gt; みたいな要素を盤面の &lt;code&gt;Model&lt;/code&gt; に入れるべきか？って気がするが，今回はやっつけなので大目にみてください．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;無駄にコードを貼りまくったせいで長くなってしまった． できたアプリ，意外と気に入ってます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html</id><title type="text">GHC 8.x 勉強会に行ってきた</title><updated>2018-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;GHC 8.x 勉強会に行ってきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; の18日目の記事です． 空いていたのでついでに埋めました．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;12/7 の10-17時半ぐらいに IIJ-II で GHC8 系のバージョンアップを追う会的なイベントが企画されました． このイベントは IIJ-II の Haskell チームで発案・企画し，Haskell-jp の Slack で募集をかけていました． 定員12人かつ，平日昼間でしたが，面白そうなので有給とって行ってきた(僕は IIJ-II では無いので)． 多少クローズドな会ということもあり，せっかくなので色々と議論したことを記事に起こしておきます． 正確な情報は GHC のドキュメントを呼んでください．&lt;/p&gt;
&lt;h2 id=&#34;進め方&#34;&gt;進め方&lt;/h2&gt;
&lt;p&gt;GHCには&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html&#34;&gt;こんな感じ&lt;/a&gt;のリリースノートがある． 当日は8系のリリースノートのハイライトを追っていくという感じだった．&lt;/p&gt;
&lt;p&gt;事前に一人一つぐらいは調べてきて発表する感じだったが，担当者がいない内容でも，紹介記事を引っ張ってきたりなんだりしてた．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;8.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;． 8.0だけめっちゃ多い． 当初は 7.12 とかにする予定だったが，あまりにも差分があったので 8 にした的な話があるとかないとか(要出典)．&lt;/p&gt;
&lt;h3 id=&#34;typeintype-など&#34;&gt;TypeInType など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeInType&#34;&gt;&lt;code&gt;TypeInType&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;以下3つの言語拡張も包含している
&lt;ul&gt;
&lt;li&gt;PolyKinds&lt;/li&gt;
&lt;li&gt;DataKinds&lt;/li&gt;
&lt;li&gt;KindSignatures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PolyKind: 型変数のカインドが多相的になる（本来は &lt;code&gt;*&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;DataKinds: 定義した型をカインドとして利用できる&lt;/li&gt;
&lt;li&gt;KindSignatures: カインドを明示的に指定できる&lt;/li&gt;
&lt;li&gt;TypeInType:
&lt;ul&gt;
&lt;li&gt;上記全部を利用可&lt;/li&gt;
&lt;li&gt;多相カインド&lt;/li&gt;
&lt;li&gt;RankNTypes も追加で高階カインドも可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: 結局目指すところは？
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell&#34;&gt;Dependent Haskell&lt;/a&gt; のマイルストーンの一部では？&lt;/li&gt;
&lt;li&gt;Merging Types and Kinds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patternsynonyms-系&#34;&gt;PatternSynonyms 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#record-patsyn&#34;&gt;Record Pattern Synonyms&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;レコード型でも PatternSynonyms を利用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20170919/1505787393&#34;&gt;PatternSynonymsのススメ - あどけない話&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;そもそも PatternSynonyms って？&lt;/li&gt;
&lt;li&gt;PatternSynonyms それ自体は 7.8.1 から&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8.0 から export 時に &lt;code&gt;pattern&lt;/code&gt; キーワードがいらなくなった
&lt;ul&gt;
&lt;li&gt;すごい助かるって意見もあれば&lt;/li&gt;
&lt;li&gt;あえて明示的にすべきという意見も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ネットワーク屋さん的にはこのパターンは本当に便利という話&lt;/li&gt;
&lt;li&gt;BangPattern や ViewPattern の組み合わせ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deriveanyclass&#34;&gt;DeriveAnyClass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#derive-any-class&#34;&gt;DeriveAnyClass&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;名前の通り任意の型クラスに対して &lt;code&gt;deriving&lt;/code&gt; を利用する仕組みを提供&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; 可能な型クラスからデフォルト実装を定義したり&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;injective-type-families&#34;&gt;Injective type families&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#injective-ty-fams&#34;&gt;&lt;code&gt;TypeFamilyDependencies&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lotz/items/6c038698c8f04f57113a&#34;&gt;型族が単射だと嬉しい理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(書いた当人は書いてたこと忘れてた笑)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;applicativedo&#34;&gt;ApplicativeDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#applicative-do&#34;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;do 記法が Applicative でも使える&lt;/li&gt;
&lt;li&gt;だけじゃなく，do 記法が特定の条件を満たすと勝手に Applicative や Functor に脱糖してくれる
&lt;ul&gt;
&lt;li&gt;この条件がなかなか(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか結構盛り上がった(笑)&lt;/p&gt;
&lt;h3 id=&#34;wildcards-in-data-and-type-family&#34;&gt;Wildcards in data and type family&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#wildcards-on-the-lhs-of-data-and-type-family-instances&#34;&gt;この辺り&lt;/a&gt;？ ちょっと何話したか忘れた．&lt;/p&gt;
&lt;h3 id=&#34;strict-系&#34;&gt;Strict 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#strict-haskell&#34;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679&#34;&gt;Strict Haskell - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;昔から正格評価にする記法はあったが，この拡張によりデフォルトの評価戦略を切り替えれる．&lt;/li&gt;
&lt;li&gt;実は逆に &lt;code&gt;~x&lt;/code&gt; とすることで &lt;code&gt;x&lt;/code&gt; を遅延評価できる&lt;/li&gt;
&lt;li&gt;Q: パターンマッチの反駁不能パターンはどうなるんだろ？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~(~x)&lt;/code&gt; のようにチルダをカッコで重ねる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;duplicate-record-fields&#34;&gt;Duplicate record fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20160114/1452735514&#34;&gt;重複したフィールドラベル - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: &lt;code&gt;instance (a ~ Int) =&amp;gt; IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; a)&lt;/code&gt; の &lt;code&gt;a ~ Int&lt;/code&gt; はなぜ必要か？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; Int)&lt;/code&gt; ではなく&lt;/li&gt;
&lt;li&gt;推論の順番を明示的にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: ボイラーテンプレートの件は進んだの？？
&lt;ul&gt;
&lt;li&gt;なんか放置されてる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SystemF + レコード多相は死ぬ
&lt;ul&gt;
&lt;li&gt;OCaml は分けている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ユーザ定義-typeerror&#34;&gt;ユーザ定義 TypeError&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;型エラーをユーザーで定義できる？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Proposal/CustomTypeErrors&#34;&gt;プロポーザル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;どんな話したか忘れました，すいません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ghci-関連&#34;&gt;GHCi 関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本来 GHCi はコードを同一のプロセスと共通のヒープで実行する&lt;/li&gt;
&lt;li&gt;それを &lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/ghci.html#external-interpreter&#34;&gt;&lt;code&gt;fexternal-interpreter&lt;/code&gt;&lt;/a&gt; オプションでコントロールできる&lt;/li&gt;
&lt;li&gt;だっけか（また細かい話は忘れました，すいません）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-2&#34;&gt;8.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/8.2.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typeable mechanism, Type.Reflection&lt;/li&gt;
&lt;li&gt;そういえばCUIがカラフルになったね&lt;/li&gt;
&lt;li&gt;Heap 系
&lt;ul&gt;
&lt;li&gt;あんまりよく覚えてないごめんなさい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;derivingstrategies&#34;&gt;DerivingStrategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DerivingStrategies&lt;/code&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies&#34;&gt;Commentary/Compiler/DerivingStrategies – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kakkun61/deriving-strategies-playground&#34;&gt;kakkun 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; する時に &lt;code&gt;newtype&lt;/code&gt; や &lt;code&gt;stock&lt;/code&gt; などのキーワードを指定することで &lt;code&gt;deriving&lt;/code&gt; の仕方をコントロールできる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unboxedsums&#34;&gt;UnboxedSums&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XUnboxedSums&#34;&gt;&lt;code&gt;UnboxedSums&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/maoe/e5888fad16a190a9c7cf58b8bedb1d04&#34;&gt;maoe 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compact-regions&#34;&gt;Compact Regions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ezyang/compact&#34;&gt;ezyang/compact - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;処理系によってGCされないデータ領域&lt;/li&gt;
&lt;li&gt;インターフェースは充実してる&lt;/li&gt;
&lt;li&gt;ただしデータの追加しかできない（書き換えは不可）&lt;/li&gt;
&lt;li&gt;Q: 何に使える？
&lt;ul&gt;
&lt;li&gt;強大な辞書とか？&lt;/li&gt;
&lt;li&gt;設定ファイルとか？（巨大なら）&lt;/li&gt;
&lt;li&gt;NGワード集とか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GHC8.x 勉強会のあとに記事にしてくれた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ruicc/items/c955e794c5dc74c4cb58&#34;&gt;Compact Regionsについて軽く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;backpack&#34;&gt;Backpack&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Backpack&#34;&gt;Backpack – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;雑にいうと: ML系のファンクターのようなより強力なモジュールシステム&lt;/li&gt;
&lt;li&gt;モジュールのインターフェースと実装を分離できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html&#34;&gt;Haskell Backpack 覚え書き - ひげメモ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;自分の記事だけど1年近く前で覚えてない(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: どんな時に有用？
&lt;ul&gt;
&lt;li&gt;本質的には型クラスと同じ用途のはず&lt;/li&gt;
&lt;li&gt;ただし型に依存しない（型クラスは型によって実装をディスパッチ）&lt;/li&gt;
&lt;li&gt;不自然な &lt;code&gt;Proxy a&lt;/code&gt; を渡さなくていい（苦肉の策でそういう実装をしている型クラスがある）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;そういえば最近 &lt;a href=&#34;https://github.com/kowainik/containers-backpack&#34;&gt;contains の Backpack 版&lt;/a&gt;がでた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者さんが忙しくて Stack への適用を断念したため，なかなか浸透しない． 今「Stack への適用をやりたい」という人が現れたが時間がかかりそう．&lt;/p&gt;
&lt;h3 id=&#34;脱線-各位リンカどうしてるの&#34;&gt;脱線: 各位リンカどうしてるの？&lt;/h3&gt;
&lt;p&gt;kazu yamamoto 氏が GHC 8.6 になってから(だっけ？)リンカ周りで動作しなくて困ってるらしい(OS は Mac)． 僕は適当にやってて困ったことないのでよくわからない．&lt;/p&gt;
&lt;p&gt;ちなみに GHC 8.6.3 で無事動いたらしい:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
吉報：GHC 8.6.3 は macOS で問題なく使えるようになりました！
&lt;/p&gt;
— 山本和彦 (&lt;span class=&#34;citation&#34; data-cites=&#34;kazu_yamamoto&#34;&gt;@kazu_yamamoto&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/kazu_yamamoto/status/1072030847799255040?ref_src=twsrc%5Etfw&#34;&gt;2018年12月10日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;section-3&#34;&gt;8.4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.4/docs/html/users_guide/8.4.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;そういえば，8.4.4 は 8.6 系が出てから出て，ちゃんとバグフィックス出すんだと感心した的な話をした．&lt;/p&gt;
&lt;h3 id=&#34;semigroup-monoid-proposal&#34;&gt;Semigroup-Monoid Proposal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; にサブクラスとして &lt;code&gt;Semigroup&lt;/code&gt; を持たせる
&lt;ul&gt;
&lt;li&gt;その方が数学的に自然&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20180306/1520314185&#34;&gt;あなたの知らないSemigroupの世界 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前のバージョンアから &lt;code&gt;-Wnoncanonical-monoid-instances&lt;/code&gt; などの警告を付け足して段階的にやっている
&lt;ul&gt;
&lt;li&gt;しかし &lt;code&gt;-Wall&lt;/code&gt; に含まれてないので気づかず&lt;/li&gt;
&lt;li&gt;なんか 8.4 で急にエラーに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ちなみに以降は &lt;code&gt;Monoid&lt;/code&gt; をインポートしなくても &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; が使える&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monadfail-と-no-return&#34;&gt;MonadFail と no return&lt;/h3&gt;
&lt;p&gt;ここは脱線．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/MonadFail_Proposal&#34;&gt;MonadFail Proposal - HaskellWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; には &lt;code&gt;fail&lt;/code&gt; が定義されている
&lt;ul&gt;
&lt;li&gt;が &lt;code&gt;error&lt;/code&gt; などを利用している残念な実装もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MonadFail&lt;/code&gt; という型クラスで切り出す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wnoncanonical-monadfail-instances&lt;/code&gt; ができた？&lt;/li&gt;
&lt;li&gt;8.6: &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadFailDesugaring&#34;&gt;&lt;code&gt;MonadFailDesugaring&lt;/code&gt;&lt;/a&gt; 言語拡張がデフォルトに
&lt;ul&gt;
&lt;li&gt;do 記法の &lt;code&gt;fail&lt;/code&gt; への脱糖が &lt;code&gt;MonadFail&lt;/code&gt; のものになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-4&#34;&gt;8.6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/8.6.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;quantifiedconstraints&#34;&gt;QuantifiedConstraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-QuantifiedConstraints&#34;&gt;QuantifiedConstraints&lt;/a&gt; 言語拡張を追加&lt;/li&gt;
&lt;li&gt;インスタンスの定義に量化が使える
&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;instance (Eq a, forall b. (Eq b) =&amp;gt; Eq (f b)) =&amp;gt; Eq (Rose f a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://the.igreque.info/slides/2018-12-07-ghc8x.html&#34;&gt;igrap 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: Constraint のシノニムでも使える？
&lt;ul&gt;
&lt;li&gt;無理だった orz&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;derivingvia&#34;&gt;DerivingVia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DerivingVia&#34;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;code&gt;via&lt;/code&gt; キーワードを使ってインスタンスを明示的に選択できるようになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kayhide/try-ghc86&#34;&gt;kayhide 氏の資料&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;QuickCheck の例&lt;/li&gt;
&lt;li&gt;テストの実装を Via で定義&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;わかりやすい&lt;a href=&#34;https://speakerdeck.com/konn/ben-dang-hasugoi-newtype&#34;&gt;スライド&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;後半の方&lt;/li&gt;
&lt;li&gt;タプルの例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;plugin-mechanism&#34;&gt;Plugin mechanism&lt;/h3&gt;
&lt;p&gt;(誰も調べてはない) ちょうど記事があった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/waddlaw/items/65b57517f105fcbbe724&#34;&gt;GHC Source Plugin 作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終わった後の雑談で，Scala には似たような機能(Scala Compiler Plugins?)が既にあるので，真似するといいとかなんとか．&lt;/p&gt;
&lt;h3 id=&#34;valid-hole-fits&#34;&gt;Valid hole fits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/GHC/Typed_holes&#34;&gt;Type holes&lt;/a&gt; という機能についての拡張
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/07-TypedHoles.html&#34;&gt;Type Hole については Haskell-jp に記事がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#typed-hole-valid-hole-fits&#34;&gt;コンパイルフラグ&lt;/a&gt;で type Holes での推論アルゴリズム(?)のコントロールができるようになった(って感じかな)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;シンタックスの言語拡張&#34;&gt;シンタックスの言語拡張&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数値リテラルに &lt;code&gt;_&lt;/code&gt; が使える: &lt;code&gt;10_000_000&lt;/code&gt; とか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; 記法の前に &lt;code&gt;$&lt;/code&gt; などがいらなくなる: &lt;code&gt;\x -&amp;gt; do ...&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;時間経ちすぎてめっちゃ適当になってしまった． すいません． ただ，めっちゃ楽しかった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html</id><title type="text">詳解 elm/url !!</title><updated>2018-12-11T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;詳解 elm/url !!&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-11&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 11, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/elm&#34;&gt;Elm Advent Calendar 2018&lt;/a&gt; の11日目の記事です． elm-jp の Discord で突如無茶振りされたので頑張ります．&lt;/p&gt;
&lt;h2 id=&#34;elmurl&#34;&gt;elm/url&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/elm/url/1.0.0/&#34;&gt;elm/url&lt;/a&gt; は Elm 0.19 で刷新されたパッケージ群にしれっと混ざってきた URL に関するパッケージ． &lt;a href=&#34;https://package.elm-lang.org/packages/elm/browser/latest/Browser#application&#34;&gt;Browser.application&lt;/a&gt; でも使われているのでみなさんも頑張って使えるようになりましょう．&lt;/p&gt;
&lt;p&gt;ちなみに本記事では ver1.0.0 の elm/url を想定している．&lt;/p&gt;
&lt;h2 id=&#34;url-の型&#34;&gt;Url の型&lt;/h2&gt;
&lt;p&gt;こんな風に定義されている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    { protocol &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protocol&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    , host &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    , port_ &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    , path &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    , query &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    , fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protocol&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Https&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超絶わかりやすい ASCII アートまでありエヴァン様神って感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  https://example.com:8042/over/there?name=ferret#nose
  \___/   \______________/\_________/ \_________/ \__/
    |            |            |            |        |
  scheme     authority       path        query   fragment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; は &lt;code&gt;example.com&lt;/code&gt; の部分で &lt;code&gt;port_&lt;/code&gt; は &lt;code&gt;8042&lt;/code&gt; の部分． 試しに REPL で &lt;code&gt;Url.fromString&lt;/code&gt; してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:8042/over/there?name=ferret#nose&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { fragment &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;nose&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/over/there&amp;quot;&lt;/span&gt;, port_ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8042&lt;/span&gt;, protocol &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Https&lt;/span&gt;, query &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name=ferret&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Url&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;url.parser-の使い方&#34;&gt;Url.Parser の使い方&lt;/h2&gt;
&lt;p&gt;さて，ここからが本番． &lt;code&gt;Url.Parser&lt;/code&gt; モジュールを利用して &lt;code&gt;Browser.application&lt;/code&gt; などから受け取った URL をパースして，任意の型に変換するパーサーを記述する．&lt;/p&gt;
&lt;h3 id=&#34;パーサーの例&#34;&gt;パーサーの例&lt;/h3&gt;
&lt;p&gt;次のような型にパースするパーサーを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  , name &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入力には &lt;code&gt;http://localhost/hoge/1234?name=fuga&lt;/code&gt; URL というのを想定している．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser.Query&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  Url.map &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; (Url.s &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使ってみると:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/hoge/1234?name=fuga&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser1)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1234&lt;/span&gt;, name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;基本的な関数と型&#34;&gt;基本的な関数と型&lt;/h3&gt;
&lt;p&gt;まずは肝となる &lt;code&gt;Url.parse&lt;/code&gt; 関数の型を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;parse &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; というのがパーサーの型だ(&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が何を意味しているかは後述，無論 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が同じでもいい)． &lt;code&gt;Parser (a -&amp;gt; a) a&lt;/code&gt; という型(この &lt;code&gt;a&lt;/code&gt; は全て同じ型)のパーサーを与えて &lt;code&gt;Url&lt;/code&gt; という入力を食わせることで &lt;code&gt;Maybe a&lt;/code&gt; という結果を受け取れる． 途中でパース失敗した場合は &lt;code&gt;Nothing&lt;/code&gt; が返り，成功すると &lt;code&gt;Just a&lt;/code&gt; の値が返る．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;次のような関数を組み合わせて，パーサーを構築する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;int    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;s      &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;top    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;(&lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;)  &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;/code&gt; の型が &lt;code&gt;Parser a b&lt;/code&gt; の場合と &lt;code&gt;Parser (a -&amp;gt; b) b&lt;/code&gt; の場合の2パターンがあることに気づいただろうか？ &lt;code&gt;string&lt;/code&gt; や &lt;code&gt;int&lt;/code&gt; のような &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; のようなパーサーの場合は， &lt;code&gt;a&lt;/code&gt; の部分がパース結果の型と考えられる． 対して &lt;code&gt;s&lt;/code&gt; や &lt;code&gt;top&lt;/code&gt; のような関数は入力(&lt;code&gt;Url&lt;/code&gt;)を消費するだけでパース結果の型(&lt;code&gt;parse&lt;/code&gt; の &lt;code&gt;Maybe a&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分)に影響を与えない． そして &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; が URL の区切り文字(&lt;code&gt;/&lt;/code&gt;) である．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;試しにいくつか組み合わせてみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.s &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser2 &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.top&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { hoge1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, hoge2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, hoge3 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser4 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.map &lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; parser3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; でパーサーを連結することで &lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分がどんどん伸びてくる． ちなみに，&lt;code&gt;top&lt;/code&gt; はURLの末尾かどうかのチェックするパーサーだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/1&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;url.parser.query-の使い方&#34;&gt;Url.Parser.Query の使い方&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;b&lt;/code&gt; 側が仕事をするのはクエリに関するパーサーがある場合だ． なので次にクエリのパーサーを見てみる． 便宜上以降ではクエリの型や関数には &lt;code&gt;Query&lt;/code&gt; を付けるようにする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;(&lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;)  &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a (query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;int    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;map2   &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; result) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; result&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; という演算子が Url のパーサーとクエリのパーサーを繋ぐ． クエリのパーサーの型は &lt;code&gt;Parser a&lt;/code&gt; と JSON デコーダーのような型と同じ仕組みだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; で連結したものを &lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一気に繋げても良いし，&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一つずつ繋げても良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { fuga1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, fuga2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.map2 &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; (Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt;) (Query.int &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.map &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; (Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.int &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;fragment&#34;&gt;Fragment&lt;/h2&gt;
&lt;p&gt;フラグメントの部分をパースするには &lt;code&gt;fragment&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (fragment &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんでもよければ &lt;code&gt;identity&lt;/code&gt; を使えば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser6 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.fragment identity&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost#abc&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;中身を読んでいく&#34;&gt;中身を読んでいく&lt;/h2&gt;
&lt;p&gt;今までの話でなんとなく使い方はわかっただろう． ここからは elm/url の実装について読み解いていく． なので，使い方が分かればもう十分勢の人は以降を読む必要はない．&lt;/p&gt;
&lt;h3 id=&#34;余談-参考にしたもの&#34;&gt;余談: 参考にしたもの&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elm/url#related-work&#34;&gt;README曰く&lt;/a&gt;，&lt;code&gt;Url.Parser&lt;/code&gt; の実装の着想は下記の記事によって得たようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrisdone.com/posts/formatting&#34;&gt;Formatting in Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rgrinberg.com/posts/primitive-type-safe-routing/&#34;&gt;Type Safe Routing - Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者は Haskell の &lt;code&gt;printf&lt;/code&gt; のようなフォーマット出力ライブラリで，後者は OCaml のルーティングのライブラリに関する記事．&lt;/p&gt;
&lt;h3 id=&#34;パーサーの型&#34;&gt;パーサーの型&lt;/h3&gt;
&lt;p&gt;まずは型の中身を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; b))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;  { visited &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;  , unvisited &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  , params &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;  , frag &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;  , value &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; というのは関数型パーサー(パーサーコンビネーター)でよくある型だ(&lt;code&gt;Functional Parser&lt;/code&gt; や &lt;code&gt;Parser Combinator&lt;/code&gt; などで調べると良い)． 入力の状態が &lt;code&gt;State a&lt;/code&gt; で出力の状態が &lt;code&gt;State b&lt;/code&gt;，出力がリストになっているが &lt;code&gt;Maybe&lt;/code&gt; と考えて問題ないはずだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Url.parse&lt;/code&gt; や簡単なパーサーの中身を見てみればそれぞれのフィールドの意味がわかるはずだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;parse &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;parse (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parser) url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  getFirstMatch &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parser &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; [] (preparePath url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;path) (prepareQuery url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;query) url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fragment identity&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;getFirstMatch &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;getFirstMatch states &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; states &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; title=&#34;9&#34;&gt;    [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    state ::&lt;/span&gt; rest &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;unvisited &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; title=&#34;14&#34;&gt;        [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; title=&#34;15&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; title=&#34;17&#34;&gt;        [&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; title=&#34;18&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; title=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; title=&#34;20&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; title=&#34;21&#34;&gt;          getFirstMatch rest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt; の定義より，&lt;code&gt;unvisited&lt;/code&gt; と &lt;code&gt;params&lt;/code&gt; と &lt;code&gt;frag&lt;/code&gt; はそれぞれパスとクエリとフラグメントを与えているのがわかる． &lt;code&gt;getFirstMatch&lt;/code&gt; の定義を見ると，最後に &lt;code&gt;Just state.value&lt;/code&gt; をしているので，&lt;code&gt;value&lt;/code&gt; フィールドが最終的な結果となる． では &lt;code&gt;visited&lt;/code&gt; はなんだろうか？ パーサーの実装を見てみる．&lt;/p&gt;
&lt;h3 id=&#34;組み込みのパーサー&#34;&gt;組み込みのパーサー&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;Url.string&lt;/code&gt; を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;  custom &lt;span class=&#34;st&#34;&gt;&amp;quot;STRING&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;custom &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;custom tipe stringToSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; unvisited &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; title=&#34;9&#34;&gt;      [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; title=&#34;10&#34;&gt;        []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;      next ::&lt;/span&gt; rest &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-13&#34; title=&#34;13&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; stringToSomething next &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-14&#34; title=&#34;14&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; nextValue &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-15&#34; title=&#34;15&#34;&gt;            [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;next ::&lt;/span&gt; visited) rest params frag (value nextValue) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-17&#34; title=&#34;17&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-18&#34; title=&#34;18&#34;&gt;            []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;custom&lt;/code&gt; 関数の定義からわかるように，&lt;code&gt;unvisited&lt;/code&gt; を入力にして &lt;code&gt;stringToSomething&lt;/code&gt; というパーサーを咬ませて，その結果を &lt;code&gt;value&lt;/code&gt; に追加し，元の文字列を &lt;code&gt;visited&lt;/code&gt; に追加している． すなわち，&lt;code&gt;visited&lt;/code&gt; はパースできたパスをためている． しかし，elm/url のコードを探しても &lt;code&gt;visited&lt;/code&gt; が使われているところはないので，今の実装では無くても良いフィールドのはずだ(パースエラーをわかりやすくするときに使えそう)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，クエリやフラグメントのパーサーは入力が違う(&lt;code&gt;unvisited&lt;/code&gt; を使うのではない)だけだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;query &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;query (&lt;span class=&#34;dt&#34;&gt;Q.Parser&lt;/span&gt; queryParser) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;    [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (value (queryParser params))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-7&#34; title=&#34;7&#34;&gt;fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (fragment &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-8&#34; title=&#34;8&#34;&gt;fragment toFrag &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-10&#34; title=&#34;10&#34;&gt;    [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (value (toFrag frag))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-11&#34; title=&#34;11&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;コンビネーター&#34;&gt;コンビネーター&lt;/h3&gt;
&lt;p&gt;ちなみに，コンビネーター(&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt;)の定義も見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;slash &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;slash (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseBefore) (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseAfter) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \state &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;    List.concatMap parseAfter (parseBefore state)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; は &lt;code&gt;slash&lt;/code&gt; のエイリアスになっている． &lt;code&gt;Parser&lt;/code&gt; の型は &lt;code&gt;State a -&amp;gt; [State b]&lt;/code&gt; のラップなので，パーサーの連結は &lt;code&gt;concatMap&lt;/code&gt; をするだけになっている．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;Url.map&lt;/code&gt; も見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; subValue (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseArg) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;    List.map (mapState value) &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; title=&#34;7&#34;&gt;mapState &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; title=&#34;8&#34;&gt;mapState func { visited, unvisited, params, frag, value } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (func value)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; を利用する場合，各型変数は次のようになっていることが多いだろう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- parseArg : State (x -&amp;gt; y) -&amp;gt; List (State y)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- value を identity と考えれば良い&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y) y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z) z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; subValue (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseArg) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-6&#34; title=&#34;6&#34;&gt;    List.map (mapState value) &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こう考えれば &lt;code&gt;map&lt;/code&gt; 関数の定義も読めるはずだ．&lt;/p&gt;
&lt;h2 id=&#34;結局&#34;&gt;結局&lt;/h2&gt;
&lt;p&gt;最後に &lt;code&gt;Parser a b&lt;/code&gt; の各型変数は何を意味して，従来の &lt;code&gt;Parser a&lt;/code&gt; 方式のパーサーではなぜダメなのかについて議論する(まぁあくまでも，実際に実装などを読んでの個人的な肌感なんですけど)．&lt;/p&gt;
&lt;h3 id=&#34;型変数の意味&#34;&gt;型変数の意味&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の意味は &lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; からわかるように，パーサーの入力の状態に使われる型 &lt;code&gt;a&lt;/code&gt; と出力の状態に使われる型 &lt;code&gt;b&lt;/code&gt; である． ここで，「使われる」というのが肝で，&lt;code&gt;a&lt;/code&gt; それ自体は入力ではない． 入力にせよ，出力にせよ，パーサーが行うのは状態 &lt;code&gt;State r1&lt;/code&gt; から &lt;code&gt;State r2&lt;/code&gt; への変換だ(ただしそれは失敗するかもしれないので &lt;code&gt;List&lt;/code&gt; でラップされている)． &lt;code&gt;State r&lt;/code&gt; にとって &lt;code&gt;r&lt;/code&gt; は &lt;strong&gt;パースの最終結果&lt;/strong&gt; を意味している(変化する状態の最終結果)．&lt;/p&gt;
&lt;p&gt;なので &lt;code&gt;Parser a b&lt;/code&gt; のパーサーがあった場合，このパーサーの最終結果は &lt;code&gt;b&lt;/code&gt; であり，&lt;code&gt;a&lt;/code&gt; は入力の状態が想定している最終結果である． ただし，&lt;code&gt;Parser (String -&amp;gt; b) b&lt;/code&gt; というパーサーの場合，&lt;code&gt;b&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; でも良く，このパーサーを &lt;code&gt;Url.parse&lt;/code&gt; で実行する場合は &lt;code&gt;b = String&lt;/code&gt; と推論される．&lt;/p&gt;
&lt;h3 id=&#34;parser-a-との違い&#34;&gt;&lt;code&gt;Parser a&lt;/code&gt; との違い&lt;/h3&gt;
&lt;p&gt;大きな違いは &lt;code&gt;map&lt;/code&gt; の振る舞いだ． &lt;code&gt;Parser a&lt;/code&gt; の場合，レコード型 &lt;code&gt;Hoge = { hoge1 : Int, hoge2 : String }&lt;/code&gt; のパーサーを記述するのには次のように書く:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;intParser &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;stringParser &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; map2 &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; intParser stringParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールドの個数が3つ4つと増えるたびに，&lt;code&gt;map3&lt;/code&gt; &lt;code&gt;map4&lt;/code&gt; と作る必要がある． また，parser1 を再利用して &lt;code&gt;Fuga = { hoge1 : Int, hoge2 : String, hoge3 : Int }&lt;/code&gt; 型のパーサーを記述することはできない．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;対して &lt;code&gt;Parser a b&lt;/code&gt; の場合は &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; を用いて &lt;code&gt;intParser&lt;/code&gt; や &lt;code&gt;stringParser&lt;/code&gt; をどんどん連結していき，最終的に &lt;code&gt;map&lt;/code&gt; をする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; intParser &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; parser0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; (parser0 &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; intParser)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すなわち利点は:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;引数ごとの &lt;code&gt;map&lt;/code&gt; がいらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; で繋いだパーサーの再利用性が高い&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;applicative-スタイル&#34;&gt;Applicative スタイル&lt;/h3&gt;
&lt;p&gt;Elm で一般的かどうかはわからないが，Haskell では一般的な Applicative スタイルというのがある． ちなみに elm/url を Applicative スタイルにしたパッケージは GitHub に揚げてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elm-url-applicative&#34;&gt;matsubara0507/elm-url-applicative - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applicative スタイルとは，次のようなコンビネーターを使って関数を構築する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;apply &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，今回の話の流れ上 &lt;code&gt;Parser&lt;/code&gt; を用いたが，ここが &lt;code&gt;Maybe&lt;/code&gt; だろうと &lt;code&gt;List&lt;/code&gt; だろうと同じに扱える． この場合，パーサーの構築は次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; title=&#34;3&#34;&gt;  apply (apply (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser) stringParser) intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 的にはパイプで連結できるので &lt;code&gt;app&lt;/code&gt; の引数の順番を変えた方がいいかもしれない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;andApply &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-3&#34; title=&#34;3&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-4&#34; title=&#34;4&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一見問題なさそうだ． しかし，今回でいう &lt;code&gt;Url.s : String -&amp;gt; Parser a a&lt;/code&gt; のような入力を消費するだけで結果に反映しないパーサーがあるとうまく行かない． &lt;code&gt;ignore&lt;/code&gt; のようなコンビネーターが必要になる(ちなみに Haskell の Applicative にはもちろんある):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;s &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;ignore &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;parser3 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-5&#34; title=&#34;5&#34;&gt;parser3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; ignore (s &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，再利用の方もうまくいく:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; title=&#34;2&#34;&gt;parser0 f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; f intParser &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser0 &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; title=&#34;7&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; title=&#34;8&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser0 &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;Parser a b&lt;/code&gt; の場合と同等の能力を持つはずだ． すなわち，&lt;code&gt;Parser a b&lt;/code&gt; と Applicative スタイルは見た目以上の差異はない（はず）．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;Elm には珍しく型がテクニカルなパッケージということで，細かく中を読んでみました． 色々試した結果，Haskell の Applicative スタイルの見た目を変えてるだけのようでした． まだ，エヴァンさんが参考にしたという記事をちゃんと読んでないので，もしかしたら間違っているかも． 時間ができたら読んでみます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html</id><title type="text">Stack 1.9.3 がリリースされました。</title><updated>2018-12-10T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;12月3日に Stack version 1.9.3 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.3/ChangeLog.md#v193&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
...

$ stack --numeric-version
1.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はバグフィックスが3点のみです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack をコンパイルする際に &lt;code&gt;.git&lt;/code&gt; ディレクトリが含まれていない場合、コンパイルに失敗する問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題は &lt;code&gt;Stack&lt;/code&gt; をビルドする人の話なので、普通の人は問題になりませんが、githash を使っている人は自分のアプリケーションでも起こりうる問題なので注意です。&lt;/p&gt;
&lt;p&gt;Stack はバージョン情報に git の情報を含めるために &lt;a href=&#34;https://github.com/acfoltzer/gitrev&#34;&gt;gitrev&lt;/a&gt; を使っていたのですが、現在は開発が止まっているようで &lt;a href=&#34;https://github.com/snoyberg/githash&#34;&gt;githash&lt;/a&gt; に切り替えました。(&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回の問題を修正するために実装された &lt;code&gt;tGitInfoCwdTry&lt;/code&gt; 関数を使うことで &lt;code&gt;.git&lt;/code&gt; ディレクトリが存在しない場合でもコンパイルできるようになります。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364&#34;&gt;1.9.1 fails to build from tarball without .git/ #4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4368&#34;&gt;Compile without a Git dir #4364 #4368&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC が生成する hi-dump ファイルの &lt;code&gt;addDependentFile&lt;/code&gt; 関連のフォーマット変更 (ハッシュを含むようになった) に対応しました。詳細: &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yesod で報告された問題に対する修正です。&lt;code&gt;.hi-dump&lt;/code&gt; フォーマットが変わったので、それに対応しました。shakespeare の問題なので主に Yesod ユーザに影響があるかと思われます。以下のバージョンを利用すればこの問題は解決するため、この現象で悩んでいる人は stack と shakespeare の両方を更新しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack &amp;gt;= 1.9.3&lt;/li&gt;
&lt;li&gt;shakespeare &amp;gt;= 2.0.19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stack は GHC が出力する &lt;code&gt;hi&lt;/code&gt; ファイルの情報を内部で利用しているため、このようなことが起きます。(ビルド時にデフォルトで &lt;code&gt;-ddump-hi -ddump-to-file&lt;/code&gt; オプションが追加されています)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ddump-to-file&lt;/code&gt; が自動的に追加されてしまうせいで &lt;code&gt;-ddump-splices&lt;/code&gt; の結果を表示しようとしてもコンソールに出力されなかったりして不便だったので出力先のディレクトリを指定できるようにしました。たぶん次のメジャーリリースで使えるようになると思います。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;Unable to detect file changes on hamlet templates on stack devel for lts-12.5 #1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4369&#34;&gt;Support GHC 8.4 in addDependentFile for 1.9.3 #4369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4360&#34;&gt;qAddDependentFile doesn’t cause re-compilation without extra-source-files #4360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/aae15e3&#34;&gt;commit@aae15e3ae5767febe9fcad36bf5a5e184c635de1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4225&#34;&gt;Can’t display -ddump-splices result. #4225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4242&#34;&gt;Add the ddump-dir option/config value #4225 #4242&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートファイルのファイル名に変数が利用できるようになりました&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じで使えます。&lt;/p&gt;
&lt;pre class=&#34;mastache&#34;&gt;&lt;code&gt;{-# START_FILE {{name}}.cabal #-}
name: {{name}}
version: 0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4397&#34;&gt;Expand mustache variables in template file names #4397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4381&#34;&gt;Allow variables in filenames in templates #4381&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack can now be compiled again inside a directory that does not contain a &lt;code&gt;.git&lt;/code&gt; directory, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle a change in GHC’s hi-dump format around &lt;code&gt;addDependentFile&lt;/code&gt;, which now includes a hash. See &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow variables to appear in template file names.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html</id><title type="text">Dhall を試して物足りない部分を補うツールを自作した</title><updated>2018-12-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Dhall を試して物足りない部分を補うツールを自作した&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-05&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 5, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/Dhall.html&#34;&gt;Dhall&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本稿は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell&#34;&gt;Haskell Advent Calendar 2018&lt;/a&gt; 5日目の記事です．&lt;/p&gt;
&lt;p&gt;Haskell Day 2018 の発表をきっかけに，兼ねてから気になっていた Dhall を試した． いくつかツールが欲しくなったので作りましたっていう話です．&lt;/p&gt;
&lt;p&gt;作ったものはこれ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/yaml-to-dhall&#34;&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex&#34;&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，今回作ったツールは現状の stack の stable resolver にある v1.5.1 を利用している．&lt;/p&gt;
&lt;h2 id=&#34;dhall&#34;&gt;Dhall&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;Dhall&lt;/a&gt; は静的型付けされた設定記述言語である． 多くの場合，プログラミング言語やアプリケーションに使われる設定ファイルには JSON や YAML が利用されている． プログラミング言語のビルドシステムのような設定ファイル一つ程度なら問題ないが，Kubernetes や Ansible のような膨大な設定ファイルが依存しあう場合，静的型付けプログラミング言語のようにコンパイルによる型検査を導入したくなるだろう． Dhall はそのための言語であり，また便利な関数が用意されているため，非常に再利用性の高い設定ファイルを記述できる．&lt;/p&gt;
&lt;h3 id=&#34;例&#34;&gt;例:&lt;/h3&gt;
&lt;p&gt;Dhall は静的片付け言語なので，まずは型を定義しよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ocaml&#34;&gt;&lt;code class=&#34;sourceCode ocaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;$ cat ./User.dhall&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;{ homeDirectory : Text, privateKeyFile : Text, publicKeyFile : Text }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このユーザ型の値はユーザ名から一意に生成されることは容易に想像できるだろう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode ocaml&#34;&gt;&lt;code class=&#34;sourceCode ocaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;$ cat ./makeUser.dhall&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  \(user_name : Text)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;-&amp;gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; homeDirectory = &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/${user_name}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; privateKeyFile = &lt;span class=&#34;st&#34;&gt;&amp;quot;${homeDirectory}/id_rsa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; publicKeyFile = &lt;span class=&#34;st&#34;&gt;&amp;quot;${privateKeyFile}.pub&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;    { homeDirectory =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;            homeDirectory&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;        , privateKeyFile =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;            privateKeyFile&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;        , publicKeyFile =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;            publicKeyFile&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      : ./User.dhall&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;./makeUser.dhall&lt;/code&gt; は任意の文字列を与えると，それをユーザ名として &lt;code&gt;./User.dhall&lt;/code&gt; 型の値を生成してくれる． さらに，高階関数を使って複数のユーザに対し一気に適用してみよう．&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;$ cat ./users.dhall
let User = ./User.dhall

in  let map =
      https://raw.githubusercontent.com/dhall-lang/dhall-lang/0a7f596d03b3ea760a96a8e03935f4baa64274e1/Prelude/List/map

in  map Text User ./makeUser.dhall [ &amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;curry&amp;quot; ] : List User&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; には &lt;a href=&#34;https://github.com/dhall-lang/dhall-lang/blob/master/Prelude/List/map&#34;&gt;dhall のリポジトリにある標準パッケージの関数&lt;/a&gt;を直接インポートしている． &lt;code&gt;map&lt;/code&gt; の型は &lt;code&gt;∀(a : Type) → ∀(b : Type) → (a → b) → List a → List b&lt;/code&gt; となっている． 基本的に Dhall で多相な高階関数を利用するときは，引数から直接型を与えてあげる必要がある．&lt;/p&gt;
&lt;p&gt;さて，これを dhall でビルドすると次のような結果を得る:&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;$ dhall &amp;lt;&amp;lt;&amp;lt; ./users.dhall
[ { homeDirectory =
      &amp;quot;/home/alice&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/alice/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/alice/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/bob&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/bob/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/bob/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/curry&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/curry/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/curry/id_rsa.pub&amp;quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは次のようなYAMLに対応し，&lt;code&gt;dhall-to-yaml&lt;/code&gt; などのツールで変換可能だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;また，ざっくりとしたイメージを得るには、先日あった &lt;a href=&#34;https://wiki.haskell.jp/Workshop/HaskellDay/2018&#34;&gt;Haskell Day 2018&lt;/a&gt; での&lt;a href=&#34;https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri&#34;&gt;発表資料&lt;/a&gt;がわかりやすくてオススメ．&lt;/p&gt;
&lt;h3 id=&#34;使ってみて思うところ&#34;&gt;使ってみて思うところ&lt;/h3&gt;
&lt;p&gt;もしかしたら最新のバージョンであれば改善しているものもあるかもしれない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的な高階関数があり便利
&lt;ul&gt;
&lt;li&gt;map,fold,filter など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;普通のプログラミングのように式を再利用できる&lt;/li&gt;
&lt;li&gt;型推論がザコい
&lt;ul&gt;
&lt;li&gt;パラメトリック多相を挟むとダメみたいですね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結構ビルドエラーがエスパー
&lt;ul&gt;
&lt;li&gt;慣れの問題か？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YAML のいわゆる連想配列への変換ができない&lt;/li&gt;
&lt;li&gt;日本語が化ける ;;
&lt;ul&gt;
&lt;li&gt;まぁ原因はわかるので最新でも治ってなかったらPRしてみるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;何に導入したか&#34;&gt;何に導入したか&lt;/h2&gt;
&lt;p&gt;弊社が企画してる学生向けの競技型イベントに関するシステムの設定ファイルを Dhall に置き換えてみた． そのシステムは，インフラ・スコアボード・デプロイツールの3つのリポジトリに別れており，ところどころ重複した設定が3つのリポジトリに存在する． そこで，設定用のリポジトリを作って，そこに Dhall で記述した設定を置き，そこから各リポジトリに設定を撒くような仕組みを考えることにした．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-dhall-ex/system-with-dhall.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;別に Dhall にしたからといって劇的に何かがよくなるわけでは無いのだが，ちょうど良いサンドボックスがあったのでイロイロと試してみる，というのが本音です（笑）&lt;/p&gt;
&lt;h2 id=&#34;yaml-to-dhall&#34;&gt;yaml-to-dhall&lt;/h2&gt;
&lt;p&gt;最初の方はせっせと手作業で変換していたが，何個かやって変換の仕方の勘所がわかって来た． そうなると後は作業でしか無いので，なんとかして大量にある設定ファイルを一括変換したい．&lt;/p&gt;
&lt;p&gt;調べた限り，YAML から Dhall に変換するプログラムは無さそう(逆はもちろんあるけど)． なのですっごい雑なものを作った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/yaml-to-dhall&#34;&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは極めて単純なことしかできない． 数値は全て Float に変換されるし，Optional や空リストの書き方が間違っている． とりあえず変換して，手元のエディタで置換すればいいかなと思ったので雑なままである．&lt;/p&gt;
&lt;p&gt;時間ができたらそのうち直すかも．&lt;/p&gt;
&lt;h2 id=&#34;dhall-ex&#34;&gt;dhall-ex&lt;/h2&gt;
&lt;p&gt;前述した通り，一組の設定ファイル群から複数のリポジトリの設定ファイルを生成したかったのでその仕組みを作った． dhall-ex は次のような設定ファイルを記述する:&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;{ GH_TOKEN =
      [ &amp;quot;matsubara0507:XXXX&amp;quot; ] : Optional Text
  , root =
      &amp;quot;configs&amp;quot;
  , exports =
      [ { name =
            &amp;quot;deploy-tool&amp;quot;
        , repo =
            [ &amp;quot;git-challenge/deploy-tool&amp;quot; ] : Optional Text
        , paths =
            [ &amp;quot;settings/orgs/orgs.yml&amp;quot;
            , &amp;quot;settings/orgs/review.yml&amp;quot;
            ...
            ]
        }
      ...
      ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別にどっちでもよかったのだが，せっかくなので dhall-ex の設定ファイルも Dhall で記述するようにした． なので，具体例より&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex/blob/master/dhall/dhall-ex-type.dhall&#34;&gt;型&lt;/a&gt;を見た方が早いだろう．&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;let Export = { name : Text, repo : Optional Text, paths : List Text }
in  { GH_TOKEN : Optional Text, root : Text, exports : List Export }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt; は設定ファイル群を置くパスで，&lt;code&gt;exports&lt;/code&gt; が設定ファイル群の更新先のリポジトリなどの情報だ． &lt;code&gt;repo&lt;/code&gt; で GitHub リポジトリを指定し，&lt;code&gt;paths&lt;/code&gt; で関連する設定ファイルを列挙する． 例の場合 &lt;code&gt;./config/settings/orgs/orgs.yml.dhall&lt;/code&gt; を &lt;code&gt;./.dhall-ex/git-challenge/deploy-tool/settings/orgs/orgs.yml&lt;/code&gt; に dhall でビルドする．&lt;/p&gt;
&lt;p&gt;ちなみに Dhall のバージョンが古いので &lt;code&gt;Optional&lt;/code&gt; がリストのリテラルを利用しているが，最新の Dhall には &lt;code&gt;Some&lt;/code&gt; と &lt;code&gt;None&lt;/code&gt; があるはず．&lt;/p&gt;
&lt;h3 id=&#34;機能&#34;&gt;機能&lt;/h3&gt;
&lt;p&gt;現状はこんな感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dhall-ex --help
dhall-ex - cli tool to support dhall

Usage: dhall-ex [-v|--verbose] [-c|--config PATH] [--only NAME] COMMAND
                [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &amp;quot;debug&amp;quot;
  -c,--config PATH         Configuration file
  --only NAME              Exec subcommand only NAME in config
  --version                Show version
  -h,--help                Show this help text

Available commands:
  sort                     Sort record keys in dhall file
  echo                     Echo TEXT
  init                     Init dhall-ex work directory
  build                    Build Dhall file to YAML or JSON
  deploy                   Deploy builded config file to remote repository
  checkout                 Checkout repository in dhall workspace
  pull                     Pull repository in dhall workspace&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; は設定が正しく読み取れるかどうかにだけ使う雑機能． &lt;code&gt;sort&lt;/code&gt; レコードのフィールドの順番を型に合わせて並び替えてくれるコマンドだ． 前述した &lt;code&gt;yaml-to-dhall&lt;/code&gt; などを使った後に使った(並び変える必要はないんだけど，なんか読みやすいように)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; でリポジトリなどの初期化をし，&lt;code&gt;build&lt;/code&gt; で設定ファイルを変換し，&lt;code&gt;deploy&lt;/code&gt; でコミットとプッシュを行ってくれる． &lt;code&gt;checkout&lt;/code&gt; や &lt;code&gt;pull&lt;/code&gt; はただの git コマンドのラッパーだ．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;--only deploy-tool&lt;/code&gt; などとすることでコマンドの実行を特定のリポジトリに限定できる．&lt;/p&gt;
&lt;h3 id=&#34;実装&#34;&gt;実装&lt;/h3&gt;
&lt;p&gt;実は内部実装はそこまで難しいことをしていない． Dhall のファイルを読み込み，ビルドし，それを dhall-ex の設定ファイルに則って出力するだけだ． &lt;code&gt;build&lt;/code&gt; 以外のコマンドは &lt;a href=&#34;http://hackage.haskell.org/package/shelly&#34;&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; を使ってシェルスクリプトもどきを実行している．&lt;/p&gt;
&lt;h3 id=&#34;todo&#34;&gt;ToDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;例外処理が雑なのを直す
&lt;ul&gt;
&lt;li&gt;だいたいこの部分が残る（笑）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;任意のコマンドを各リポジトリのワークスペースで実行できるようにする
&lt;ul&gt;
&lt;li&gt;なんか &lt;code&gt;git status&lt;/code&gt; とか &lt;code&gt;git branch&lt;/code&gt; とかしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;並行処理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;随分雑な記事になってしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html</id><title type="text">Stack の Docker Integration とイメージの自動更新</title><updated>2018-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Stack の Docker Integration とイメージの自動更新&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-02&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 2, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/Docker.html&#34;&gt;Docker&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本稿は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; 2日目の記事です．&lt;/p&gt;
&lt;p&gt;最近よく CLI ツールを作るんですが，Haskell Stack を持ってなくても CLI ツールが使えるように，ツールを Docker イメージ化するようにしています． その流れを書き留めておこうというの本稿の趣旨です．&lt;/p&gt;
&lt;p&gt;ちなみに，以下のリポジトリで実際に試しています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/mdium&#34;&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex&#34;&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-integration&#34;&gt;Docker Integration&lt;/h2&gt;
&lt;p&gt;Haskell のビルドツール Stack には Dcoker Integration という機能がある（現在最新の安定版である v1.9.1 を想定しています）．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/v1.9.1/docker_integration/&#34;&gt;Docker integration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/v1.9.1/yaml_configuration/#image&#34;&gt;Image - Yaml configuration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker Integration として，ざっくりと次のような機能がある．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;指定したイメージのコンテナでビルド・実行をする&lt;/li&gt;
&lt;li&gt;ビルドした実行ファイルを含めた Docker イメージの作成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2 は正確には Docker Integration とは呼ばない)&lt;/p&gt;
&lt;p&gt;ちなみに，Stack はワークスペース内の &lt;code&gt;.stack-work&lt;/code&gt; の中に中間結果などを含むビルド結果をバージョンやビルド環境ごとに保存する． そして，&lt;code&gt;--docker&lt;/code&gt; オプションでビルドすることで，ローカルではなく Docker のコンテナ内でビルドをしたり，生成したプログラムを実行したりできる． しかも，コンテナ内でビルドした場合でもビルド結果をローカルの &lt;code&gt;.stack-work&lt;/code&gt; に保存するのだ．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージ内でビルド&#34;&gt;Docker イメージ内でビルド&lt;/h2&gt;
&lt;p&gt;まず stack.yaml に次のような設定を追加する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;fpco/stack-build&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enable: true&lt;/code&gt; にすると，以降の &lt;code&gt;--docker&lt;/code&gt; オプションを省けるが，逆に普通にローカルでビルドしたい場合は &lt;code&gt;--no-docker&lt;/code&gt; オプションが必要になる． &lt;code&gt;repo&lt;/code&gt; でビルドするイメージを指定する． [&lt;code&gt;fpco/stack-build&lt;/code&gt; はこれだ]（https://hub.docker.com/r/fpco/stack-build/）． stack.yaml の &lt;code&gt;resolver&lt;/code&gt; からイメージタグを自動的に選んでくれるはずだ．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでビルドできる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack docker pull

# docker コンテナ内でビルド
$ stack build --docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他にも細かい設定がかけるが割愛（上述したドキュメントを参照してください）．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;stack.yaml に次の設定を追加する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;image.container.name&lt;/code&gt; は生成する Docker イメージの名前で，&lt;code&gt;image.container.base&lt;/code&gt; は生成する Docker イメージに使うベースイメージだ． ベースイメージは &lt;code&gt;docker.repo&lt;/code&gt; などで指定したイメージのOSとあってさえいれば良い（ちなみに &lt;code&gt;fpco/stack-build&lt;/code&gt; は &lt;code&gt;ubuntu:16.04&lt;/code&gt;）． やってくれることは簡単で， &lt;code&gt;stack build --docker&lt;/code&gt; で作成した実行ファイルをベースイメージの &lt;code&gt;local/bin&lt;/code&gt; などにコピーするだけだ． なので，もし静的リンクしていない場合はリンクが含まれるベースイメージを指定すると良い(&lt;a href=&#34;https://hub.docker.com/r/fpco/ubuntu-with-libgmp/&#34;&gt;&lt;code&gt;fpco/ubuntu-with-libgmp&lt;/code&gt;&lt;/a&gt; はそのために使っている)．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでイメージの作成ができる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--docker&lt;/code&gt; を指定しないとローカルでビルドした実行ファイルをコピーして，生成したイメージのコンテナで実行できなくなるので注意してください（もちろんローカルが ubuntu なら問題ないけど）． あと， stack によるイメージ作成方法では他に Dockerfile の &lt;code&gt;add&lt;/code&gt; っぽいことと &lt;code&gt;entrypoints&lt;/code&gt; っぽいことができるが，それ以上のことはできない． もっと複雑な設定をしたい場合は，生成したイメージをベースイメージにした Dockerfile を書いたり， Docker のマルチステージビルドを使って設定を上書きしたりするとと良いだろう．&lt;/p&gt;
&lt;h2 id=&#34;travisci-docker-hub&#34;&gt;TravisCI + Docker Hub&lt;/h2&gt;
&lt;p&gt;Docker Integration の欠点は Docker Hub の Automated build が使えない点だ． そこで，TravisCI を使って自動ビルドし，Docker Hub にプッシュするようにした． 次のような設定を travis.yml に書くと良いだろう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker push $TRAVIS_REPO_SLUG&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;stack --docker image container&lt;/code&gt; でビルドまでしてくれる． Docker Hub には Token のようなものはないので &lt;code&gt;--password-stdin&lt;/code&gt; とパイプを使って普通のパスワードでログインする． あとは &lt;code&gt;image.container.name&lt;/code&gt; で指定する名前を &lt;code&gt;hoge&lt;/code&gt; ではなく &lt;code&gt;user_name/repo_name&lt;/code&gt; としておけば良い． もちろんこれは GitHub と Docker Hub のユーザ名が同じ場合にしか使えない． 違う場合は直接書いてね．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;この方法なら実行ファイルしか入ってないイメージが出来上がるので軽いし， stack のビルド遅すぎて利用者側は厳しい問題も緩和するので最近のマイブームです．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120502/1335973255</id><title type="text">AtCoder Regular Contest #2</title><updated>2018-11-29T19:16:22+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120502/1335973255"/><summary type="html">AtCoder Regular Contest #2 参加したおーい。 成績は気にするなおーい。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120709/1341769539</id><title type="text">関数合成をいろんな言語で書いてみた。</title><updated>2018-11-29T19:16:05+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120709/1341769539"/><summary type="html">友人に Java で関数合成するプログラムを作れって課題の相談をされて一緒に考えた。で、せっかくだから勉強も兼ねていろんな言語で書いてみた。Java 以外はほとんど書いたことのない言語。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120725/1343186129</id><title type="text">すごい H 本7.10章の「読者への練習問題」</title><updated>2018-11-29T19:15:57+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120725/1343186129"/><summary type="html">大学の教科書とかでよくある「読者への練習問題としましょう」ってやつですよ。考査前、知りたいことが「読者への練習問題」で泣くやつですよ。 今回は API 調べて分かればそんなに難しくなかった。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120822/1345602358</id><title type="text">Reader モナド（関数モナド）</title><updated>2018-11-29T19:15:37+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120822/1345602358"/><summary type="html">すごい Haskell たのしく学ぼう！の14.2章331ページの関数モナドを do 記法で書いてあるコード、どういう動作になるかは解説されてあるので分かるのだけどなんでそうなるのかが分からないので書き下してみる。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/haskell-day-2018.html</id><title type="text">Haskell Day 2018 開催レポート</title><updated>2018-11-20T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/haskell-day-2018.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;去る&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;日に&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;が開催されましたので、そのイベントレポートをお送りします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;セッション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;懇親会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;アンケート&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/connpass.png&#34; alt=&#34;Connpass&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://haskell-jp.connpass.com/event/92617/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;2012&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;年と不定期に開催しており今回で&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;度目となります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年の今回は「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで」というテーマで開催されました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1173.jpg&#34; alt=&#34;受付&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;セッション&lt;/h1&gt;
&lt;h2 id=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/h2&gt;
&lt;p&gt;開発中の対話的チュートリアル&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt;を使って、参加者の皆さんにもくもくと入門していただきました。「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」では、簡単な課題を解くことで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の初歩的な使い方を学びつつ、学んだ知識をその場でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/makeMistakesToLearnHaskell&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1176.jpg&#34; alt=&#34;ハンズオン&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/khibino.png&#34; alt=&#34;Haskell を導入した話と HRR の紹介&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1177.jpg&#34; alt=&#34;khibino&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;413d120b6bee433c985c1d2b3395ff0e&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1193.jpg&#34; alt=&#34;nakaji-dayo&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;07d92af9d7aa40bca6cc3959d3f56b28&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1178.jpg&#34; alt=&#34;syocy&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7a16b1e09882433ca2dac9a6a81eb236&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/#/&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/aiya000.png&#34; alt=&#34;Semigroup とは？Monoid？環？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1179.jpg&#34; alt=&#34;aiya000&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;
&lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/noob00/haskell-cli&#34; title=&#34;Haskell で CLI&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt; &lt;span class=&#34;ascii&#34;&gt;from&lt;/span&gt; &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/noob00&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Nobutada Matsubara&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1183.jpg&#34; alt=&#34;matsubara0507&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/lotz.png&#34; alt=&#34;動かして遊んで学ぶ Haskell&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1186.jpg&#34; alt=&#34;lotz&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/fumieval.png&#34; alt=&#34;Liszt あるいは永続データ構造を真に永続させる方法&#34; style=&#34;width: 100%; max-width: 600px; border: solid 1px black;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1191.jpg&#34; alt=&#34;fumieval&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;懇親会&lt;/h2&gt;
&lt;p&gt;スポンサーとして&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;に飲食物の提供をしていただきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1194.jpg&#34; alt=&#34;懇親会&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート&lt;/h1&gt;
&lt;p&gt;約&lt;span class=&#34;ascii&#34;&gt;110&lt;/span&gt;名の方が出席し約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方が回答してくださいました。&lt;/p&gt;
&lt;p&gt;参加できなくなった約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方は事前のキャンセルをよろしくお願いします。&lt;/p&gt;
&lt;h2 id=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire1.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;ここ&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以内に始めた方が全体の&lt;span class=&#34;ascii&#34;&gt;21.4&lt;/span&gt;％、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方がちょうど半分程度となりました。&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方の&lt;span class=&#34;ascii&#34;&gt;57%&lt;/span&gt;の方は今でも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使い続けているようです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年以上前に始めた方は全体の&lt;span class=&#34;ascii&#34;&gt;1/4&lt;/span&gt;となりました。&lt;/p&gt;
&lt;h2 id=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire2.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;項目は下記となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すごい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; による並列・並行プログラミング&lt;/li&gt;
&lt;li&gt;関数プログラミング実践入門 ── 完結で正しいコードを書くために&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 ── &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で学ぶ原理と技法&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;関数プログラミング ── 珠玉のアルゴリズムデザイン&lt;/li&gt;
&lt;li&gt;簡約！λカ娘&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── 教養としての関数型プログラミング&lt;/li&gt;
&lt;li&gt;その他（自由記述）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この項目にはアンケートの途中で追加したものもあるので、結果があまり厳密でないことに注意してください。&lt;/p&gt;
&lt;p&gt;その他の選択肢で自由記述では次の票がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門 &lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;ふつうの&lt;span class=&#34;ascii&#34;&gt;Haskell 1&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による関数プログラミングの思考法 &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;票&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;終わりに&lt;/h1&gt;
&lt;p&gt;参加者の発表者、スタッフのみなさんのおかげで無事開催することができました。ありがとうございました。&lt;/p&gt;
&lt;p&gt;今後とも&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;をよろしくお願いします。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html</id><title type="text">Haskell Day 2018 に参加してきた</title><updated>2018-11-17T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell Day 2018 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-17&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 17, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;11月10日にあった「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;Haskell Day 2018&lt;/a&gt;」に参加してきたのでメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;午前中-ハンズオン&#34;&gt;午前中 : ハンズオン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/igrep&#34;&gt;igrep&lt;/a&gt; 氏が中心になって作成した &lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;code&gt;makeMistakesToLearnHaskell&lt;/code&gt;&lt;/a&gt; を使ったハンズオン． ぼくも少しだけコミットした．&lt;/p&gt;
&lt;p&gt;当日の様子は，みなさんかなり黙々と作業してて静かだったが，Twitter 上で質問している人がチラチラいた． それらの Twitter の様子などをみてリアルタイムに修正を行なっていたのはすごい．&lt;/p&gt;
&lt;h2 id=&#34;午後&#34;&gt;午後&lt;/h2&gt;
&lt;p&gt;そのうちログミーが公開されるそうなので，概要と感想だけ．&lt;/p&gt;
&lt;h3 id=&#34;haskellを導入した話hrrの話&#34;&gt;Haskellを導入した話/HRRの話&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;10年近く職業 Haskeller をやっていた &lt;a href=&#34;https://github.com/khibino&#34;&gt;khibino&lt;/a&gt; 氏が，当時 Haskell を導入するに至った話と，彼が作った &lt;a href=&#34;https://hackage.haskell.org/package/relational-record&#34;&gt;HRR&lt;/a&gt; というライブラリの紹介 Perl に変わるグルー言語を求めて Haskell に行き着いたそうだ． 「GHC6.8 ですよ，GHC8.6 じゃなく，すごく無いですか？」すごい． HRRは面白そうだけど，使うタイミングがないや．&lt;/p&gt;
&lt;h3 id=&#34;servantで実現する高速かつ安全なapi&#34;&gt;Servantで実現する高速かつ安全なAPI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/daishi/servantdexing-uan-quan-katugao-su-naapikai-fa&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;同様に職業 Haskeller の &lt;a href=&#34;https://github.com/nakaji-dayo&#34;&gt;nakaji&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://haskell-servant.github.io/&#34;&gt;Servant&lt;/a&gt; という型レベルに RSETful API を定義できるパッケージを実際にどのように使っているかという話． Servant は僕もよく使う． 「実際に依存してるパッケージの紹介」や「実運用する上で困ったこと」などもあって興味深い．&lt;/p&gt;
&lt;h3 id=&#34;並列並行言語haskell&#34;&gt;並列並行言語Haskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/bing-lie-bing-xing-yan-yu-haskell&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;次のも含めて2本連続で &lt;a href=&#34;https://github.com/syocy&#34;&gt;syocy&lt;/a&gt; 氏の発表． Haskell における並行・並列プログラミングについての紹介． 並行・並列プログラミングとして最近は Go・Elixir/Erlang・Rust などが注目されているが，Haskell は20年近く前から並行・並列に対して意識してる． おまけとして，ツールの話や並行並列系パッケージの話があって勉強になる． 余談として「&lt;a href=&#34;https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html&#34;&gt;A Tour of Go in Haskell&lt;/a&gt;」というのを作ったが，英語版も作ったところめっさ PR が来たという話をしてくれた． やっぱ分母の大きい自然言語は強い．&lt;/p&gt;
&lt;h3 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;Dhall: Haskellの新たなキラーアプリ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;個人的に今回一番面白かった． &lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;Dhall&lt;/a&gt; というアプリケーションの紹介． Dhall は設定ファイルを記述するための DSL である． 設定ファイルの多くは YAML や JSON などで書かれるが，複数の YAML が複雑な依存関係を持っている場合(k8sとか)は静的解析したいよね？ しかし逆に「設定ファイルとしての領分」を守って欲しいという要求もある(汎用プログラミング言語としての役割はいらない)． そこで Dhall です！って感じの発表だった． 最後の導入事例として，自社の設定ファイル群を書き換えた話も面白かった．&lt;/p&gt;
&lt;h3 id=&#34;semigroupとはmonoidとは環とは&#34;&gt;Semigroupとは？Monoidとは？環とは？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aiya000&#34;&gt;aiya&lt;/a&gt; 氏の発表． 群や環などの代数的構造についての話． ステップバイステップに要件が増えていくのでわかりやすい説明だった．&lt;/p&gt;
&lt;p&gt;ちなみに個人的な肌感として，このような数学的な素養がないと Haskell プログラミングができないかというと，そうでもないと思う． 僕自身は教養としてそのあたりを知ってはいるので微妙なところだが，普段 Haskell プログラミングしてる時に意識してはいないはず． ただ，いくつかの言語機能やライブラリは数学や論理学など学術的なバックグランドを持ってることがある． そのような場合は「なぜこのような仕様なのか」「どうしてこのような仕組みでうまくいくかのか」などは，学術論文にしか書いてないことが多い． そのため，そういう機能やライブラリの仕組みを &lt;strong&gt;ちゃんと&lt;/strong&gt; 追おうとする場合は数学的素養がないと厳しいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;haskellで作るcli&#34;&gt;Haskellで作るCLI&lt;/h3&gt;
&lt;p&gt;僕の発表．後述します．&lt;/p&gt;
&lt;h3 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;gloss: 動かして遊んで学ぶHaskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lotz84&#34;&gt;lotz&lt;/a&gt; 氏の発表． Haskell を勉強したあと何するかシリーズ，GUI 編． 作りたいものがはっきりないときは &lt;a href=&#34;http://hackage.haskell.org/package/gloss&#34;&gt;gloss&lt;/a&gt; で振り子やライフゲームを作って遊んでみよう，という感じ． 僕自身はあんまり GUI に関心がないけど，実際に作りたいものがない場合はこういうので色々出力して手をうごしてみるのは正しい． 時間あるときになんか変なことできないか調べてみようかな．&lt;/p&gt;
&lt;h3 id=&#34;liszt-あるいは永続データ構造を真に永続させる方法&#34;&gt;Liszt あるいは永続データ構造を真に永続させる方法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;僕が愛用している extensible というライブラリの作者，&lt;a href=&#34;https://github.com/fumieval&#34;&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://github.com/fumieval/liszt&#34;&gt;liszt&lt;/a&gt; を作り始めていたことは知っていたので気になっていた． Liszt は Kafka のような大量のデータを収集・配信するためのプログラムだそうだ(名前も &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・カフカ&#34;&gt;Franz Kafka&lt;/a&gt; に対抗して &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・リスト&#34;&gt;Franz Liszt&lt;/a&gt; らしい)． 内部のデータ構造として Skew binary random access list を要素としてもつ 2-3 木 を用いている． このあたりの詳しい話は「&lt;a href=&#34;https://asciidwango.jp/post/160831986220/純粋関数型データ構造&#34;&gt;純粋関数型データ構造&lt;/a&gt;」を読むと良いとのこと(本の名前が上がった瞬間「ですよね〜」となってたw)．&lt;/p&gt;
&lt;h2 id=&#34;自分の話&#34;&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Haskell で CLI を作るうえでの小話をした。 スライドはこれ． &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;実はどれも，既に記事におこしたことのあるネタだった．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;コマンドライン引数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs&lt;/code&gt;・&lt;code&gt;GetOpt&lt;/code&gt;・&lt;code&gt;optparse-applicative&lt;/code&gt; について紹介&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optparse-applicative&lt;/code&gt; + &lt;code&gt;extensible&lt;/code&gt; でサブコマンドも網羅性をチェック&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-05-10-make-cli-with-haskell-in-2018&#34;&gt;オレ的 Haskell で CLI を作る方法 2018&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Alt. Prelude
&lt;ul&gt;
&lt;li&gt;Prelude 微妙だなって思ったら Alt. Prelude なパッケージを使ってみようという話&lt;/li&gt;
&lt;li&gt;具体的には愛用している RIO を紹介した&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-04-13-try-rio-1&#34;&gt;rio ライブラリを試す その１&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stack Template
&lt;ul&gt;
&lt;li&gt;よく使う依存パッケージやアプリのインターフェースの書き方がパターン化してきたら Stack Template 化しようという話&lt;/li&gt;
&lt;li&gt;Stack 1.9 から GitHub にあるテンプレートを参照できるようになった&lt;/li&gt;
&lt;li&gt;GitHub にあるテンプレートを出力する stack-tpls コマンドの紹介&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-10-14-collect-stack-templates&#34;&gt;stack-templates を集める with GraphQL&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haskell を知ってる人にとってはあんまり面白くない話題だったかもしれないが，まぁまぁ(発言が)ウケていたのでよかった(?)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;初心者がわかりやすく，玄人にもウケるネタってなんだろうね． 来年もやるかもしれないから考えておこう．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html</id><title type="text">CamelCase の split</title><updated>2018-11-16T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Twitter で &lt;code&gt;CamelCase&lt;/code&gt; の文字列を &lt;code&gt;Camel Case&lt;/code&gt; にするという話を見かけたので、やってみました。&lt;/p&gt;
&lt;p&gt;文字列に含まれる文字は &lt;code&gt;[&#39;a&#39;..&#39;z&#39;] ++ [&#39;A&#39;..&#39;Z&#39;]&lt;/code&gt; を想定しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記: 寄せられたご意見について追記しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;split&#34;&gt;split&lt;/h2&gt;
&lt;p&gt;分割するということなので &lt;a href=&#34;https://www.stackage.org/package/split&#34;&gt;split&lt;/a&gt; パッケージを使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt; (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;splitCC  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; splitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fold&#34;&gt;fold&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; パッケージを使った実装は直感的でコードもコンパクトです。&lt;/p&gt;
&lt;p&gt;しかし、見た感じ効率悪そうですよね。(リスト全体を分割した後で &lt;code&gt;unwords&lt;/code&gt; かけるため)&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;fold&lt;/code&gt; バージョンも実装してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (isUpper, isSpace)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; foldSplitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quickcheck&#34;&gt;QuickCheck&lt;/h2&gt;
&lt;p&gt;念の為 &lt;a href=&#34;https://www.stackage.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; を使ってランダムテストを行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; quickCheck prop_split&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;prop_split ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;prop_split xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; splitCC xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getString xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
splitcc-0.1.0.0: test (suite: splitcc-test)

+++ OK, passed 100 tests.

splitcc-0.1.0.0: Test suite splitcc-test passed&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;
&lt;p&gt;次は &lt;a href=&#34;https://github.com/vincenthz/hs-gauge&#34;&gt;gauge&lt;/a&gt; を使ってどっちが速いか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main.Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultConfig { displayMode &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Condensed&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;  sampleData1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;  sampleData2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;  sampleData3 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;100000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;  sampleData4 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  defaultMainWith conf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;    [ bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;splitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;                       ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;    , bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;foldSplitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                           ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;charGen ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;charGen &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack bench
Benchmark splitcc-bench: RUNNING...
splitCC/10                               mean 2.847 μs  ( +- 261.0 ns  )
splitCC/1000                             mean 287.2 μs  ( +- 3.935 μs  )
splitCC/100000                           mean 29.10 ms  ( +- 1.348 ms  )
splitCC/1000000                          mean 287.3 ms  ( +- 735.0 μs  )

foldSplitCC/10                           mean 219.3 ns  ( +- 2.955 ns  )
foldSplitCC/1000                         mean 25.65 μs  ( +- 246.5 ns  )
foldSplitCC/100000                       mean 2.640 ms  ( +- 22.98 μs  )
foldSplitCC/1000000                      mean 27.43 ms  ( +- 1.795 ms  )
Benchmark splitcc-bench: FINISH&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;autobench&#34;&gt;AutoBench&lt;/h2&gt;
&lt;p&gt;最後に &lt;a href=&#34;https://github.com/mathandley/AutoBench&#34;&gt;AutoBench&lt;/a&gt; を使って視覚的に実行時間の変化を確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveGeneric #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Input&lt;/span&gt; (ts, splitCC, foldSplitCC) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;          (isSpace, isUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt;    (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Generics&lt;/span&gt;    (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.DeepSeq&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Default&lt;/span&gt;         (def)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.Types&lt;/span&gt;      (&lt;span class=&#34;dt&#34;&gt;DataOpts&lt;/span&gt;(..), &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.QuickCheck&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;splitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; title=&#34;20&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go [] &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; title=&#34;22&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; title=&#34;24&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; title=&#34;25&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ts ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-31&#34; title=&#34;31&#34;&gt;ts  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; def { _dataOpts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;200000&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;NFData&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-37&#34; title=&#34;37&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;AutoBench を利用する際、デフォルトの設定では、入力の型は &lt;code&gt;NFData&lt;/code&gt; 型クラスのインスタンスになっている必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AutoBench の結果&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/AutoBenched.png&#34; alt=&#34;AutoBench の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応ターミナルにもこんな感じで詳細な結果も出力してくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;     • Executed benchmarking file ✔
     • Generating test report ✔
     • Analysing performance results...

 ―― Test summary ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  Programs       foldSplitCC, splitCC
  Data           Random, size range [0,10000..200000]
  Normalisation  nf
  QuickCheck     ✔
  GHC flags      n/a

 ―― Analysis ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  foldSplitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   0.179   1.225   1.978   2.112   6.172   4.232   1.248
                  0.217   5.961   5.184   2.715   5.186   2.690   6.810   4.810
                  7.073   7.760   5.122   8.280   18.66
    Std dev (ms)  1.742
    Average variance introduced by outliers: 83% (severely inflated)

    Fits          y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
                  y = 3.45e-13 + 4.71e-8x
                  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  splitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   1.080   9.397   13.53   6.133   39.55   29.14   9.504
                  1.596   44.46   38.58   16.35   35.41   17.94   38.40   52.06
                  59.35   62.88   40.68   58.27   105.0
    Std dev (ms)  10.54
    Average variance introduced by outliers: 62% (severely inflated)

    Fits          y = 2.41e-12 + 3.29e-7x
                  y = 8.06e-15 + 1.92e-8xlog₂(x)
                  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  Optimisation:

    splitCC ≥ foldSplitCC (1.00)

 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; ということなので &lt;code&gt;foldSplitCC&lt;/code&gt; の方が良い結果となりました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リストを何度も走査すると遅くなるので、fold で書くと良いよ！&lt;/li&gt;
&lt;li&gt;関数の振る舞いが変化していないか確認するために QuickCheck を使おう！&lt;/li&gt;
&lt;li&gt;ベンチマークの実行はとても簡単なので積極的にやってみよう！&lt;/li&gt;
&lt;li&gt;AutoBench を使って可視化すると楽しいよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄せられたご意見&#34;&gt;寄せられたご意見&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;問題設定として &lt;code&gt;convertRGB&lt;/code&gt; は &lt;code&gt;convert R G B&lt;/code&gt; でいいの？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直感的に良くないですが、全然考えてなかったので今回は良いことにしておきたいと思います・・・。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;グラフの隅に、“splitCCは線形でfoldsplitCCは2次”とか書いてあって本当にそうだと巨大な列で結果が逆転してしまうんだけどそれは間違いだよね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは (たぶん) グラフをプロットする際の値の選択が良くなかったため、間違った計算量が推論されてしまっています。&lt;/p&gt;
&lt;p&gt;具体的にはこのような表示があり、ここから選ぶことになるのですが全然わからないので &lt;code&gt;1&lt;/code&gt; を選択した結果、今回の図のようになりました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
    2)  y = 3.45e-13 + 4.71e-8x
    3)  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.41e-12 + 3.29e-7x
    2)  y = 8.06e-15 + 1.92e-8xlog₂(x)
    3)  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のように正しく選ぶと&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 2.80e-13 + 3.83e-8x
    2)  y = 9.34e-16 + 2.22e-9xlog₂(x)
    3)  y = -7.13e-3 + 1.34e-6log₂(x) + 4.22e-5log₂²(x)

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.15e-12 + 2.94e-7x
    2)  y = 7.18e-15 + 1.71e-8xlog₂(x)
    3)  y = 6.99e-23 + 2.79e-16x + 1.76e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、正しい計算量になります。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/true-result.png&#34; alt=&#34;AutoBench の真の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の真の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MyString を定義するのが面倒な場合は以下のようにすると良いよ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;prop_split &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  xs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; splitCC xs &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; っていうのはどういう意味&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitCC ≥ foldSplitCC&lt;/code&gt; の部分は &lt;code&gt;splitCC&lt;/code&gt; よりも &lt;code&gt;foldSplitCC&lt;/code&gt; 関数の方がパフォーマンスが向上していることを示しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1.00)&lt;/code&gt; は QuickCheck によって生成されたテストケースを入力として利用した時に全てのテストケース (&lt;code&gt;100%&lt;/code&gt;) で性能が改善されたという意味です。&lt;code&gt;0.5&lt;/code&gt; などとなっていた場合はテストケースによっては性能が向上していないということです。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html</id><title type="text">Markdownで書いたテキストをMediumへポストする(mdium)</title><updated>2018-11-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Markdownで書いたテキストをMediumへポストする(mdium)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-04&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;完全な二番煎じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://namaraii.com/markdownで書いたテキストをmediumへポストする-md2mid-60c6ff9efde&#34;&gt;Markdownで書いたテキストをMediumへポストする(md2mid) – namaraii.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記記事は，Go 言語で作った「Markdownで書いたテキストをMediumへポストする」CLIツールです． 弊社の技術記事置き場が Medium だったので，なんとか，ここのように Markdown で書けないかと調べていたら上記記事が出て来ました． もっといいのできないかなと車輪の再発明してみたけど，正直大して変わらなかったと思います．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;md2mid と同様に Markdown で書いた記事を Medium に送信する CLI ツールを作った． 言わずもがな Haskell 製．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/mdium&#34;&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;違いがあるとすれば:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell 製（しつこい）&lt;/li&gt;
&lt;li&gt;環境変数を使ったトークンの管理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/matsubara0507/mdium/&#34;&gt;Docker Image&lt;/a&gt; 化してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;まず CLI ツールをインストールするには，リポジトリをクローンして Haskell Stack で直接ビルド・インストールする:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/matsubara0507/mdium.git
$ cd mdium
$ stack install mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは，Docker Image をプルしてくる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker pull matsubara0507/mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドを使うには，まず Medium のトークンを&lt;a href=&#34;https://medium.com/me/settings&#34;&gt;設定&lt;/a&gt;から生成する．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-mdium/generate-token.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これを環境変数 &lt;code&gt;MEDIUM_TOKEN&lt;/code&gt; にセットする． 直接でも良いし，&lt;code&gt;./.env&lt;/code&gt; か &lt;code&gt;~/.env&lt;/code&gt; に描いても良い． 下記のコマンドを実行することでトークンをチェックできる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mdium --me
Hi MATSUBARA Nobutada!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker イメージを使う場合にはこう:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm --env-file=&amp;quot;$HOME/.env&amp;quot; matsubara0507/mdium /bin/bash -c &amp;quot;mdium --me&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;トークンを渡すのは &lt;code&gt;--env-file&lt;/code&gt; オプションでも &lt;code&gt;-e&lt;/code&gt; オプションでも何でも良い． 実際に送信するには引数に送信したいファイルのパスを渡すだけ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ medium example.md
post success, browse to: https://medium.com/@nobutada/e31f70013b36&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうすることで指定した Markdown ファイルを draft として記事にしてくれる． ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/mdium/blob/master/example/example.md&#34;&gt;これ&lt;/a&gt;が下記のようになる．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/matsubara0507/mdium/raw/master/example/example.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;medium-api&#34;&gt;Medium API&lt;/h2&gt;
&lt;p&gt;こっからは中身の話を少し． 中では Medium の API を使っている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Medium/medium-api-docs#readme&#34;&gt;Medium’s API documentation - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その中に記事を送信する API があるのだが，驚いたことに送信できるファイルフォーマットに HTML と &lt;strong&gt;Markdown&lt;/strong&gt; があったのだ． つまり，特別な処理をせずともこの API を使ってマークダウンを送信すれば良い．&lt;/p&gt;
&lt;h2 id=&#34;dockerise&#34;&gt;Dockerise&lt;/h2&gt;
&lt;p&gt;Haskell Stack には Docker integration というのがある（あんまりドキュメントにまとまっていない機能）． これを使うことで，指定した Docker image 内で Haskell プロジェクトをビルドしたり，ビルドした実行ファイルを突っ込んだ Docker image を作成したりできる．&lt;/p&gt;
&lt;p&gt;今回は次のような設定を書き:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/mdium&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行することで Docker image を作成している:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack docker pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成した Image は &lt;code&gt;docker push&lt;/code&gt; コマンドでアップロードしている． また，この一連の流れを TravisCI で自動化している．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;p&gt;突貫で作ったのでいくつかやり残しがある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーハンドリング : 特に何も例外処理していないので&lt;/li&gt;
&lt;li&gt;記事の更新 : 今はひたすら新しい記事を生成してしまう&lt;/li&gt;
&lt;li&gt;タグやファイルフォーマットなどの細かい指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;だいたい1日とちょっとでサクッと作った割にはいい感じのものができて満足． どんどん再発明していこ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html</id><title type="text">Stack 1.9.1 がリリースされました。</title><updated>2018-10-22T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;10月18日に Stack version 1.9.1 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.1/ChangeLog.md#v191&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
Current Stack version: 1.7.1, available download version: 1.9.1
Newer version detected, downloading
Querying for archive location for platform: linux-x86_64-static
Downloading from: https://github.com/commercialhaskell/stack/releases/download/v1.9.1/stack-1.9.1-linux-x86_64-static.tar.gz
Download complete, testing executable
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
New stack executable available at /home/guchi/.local/bin/stack
Also copying stack executable to /usr/local/bin/stack
Permission error when trying to copy: /usr/local/bin: copyFile:atomicCopyFileContents:withReplacementFile:openBinaryTempFile: permission denied (Permission denied)
Should I try to perform the file copy using sudo? This may fail
Try using sudo? (y/n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルは &lt;code&gt;~/.local/bin/stack&lt;/code&gt; と &lt;code&gt;/usr/local/bin&lt;/code&gt; にインストールされます。&lt;/p&gt;
&lt;p&gt;ただし、権限が無いと上記のように &lt;code&gt;/usr/local/bin&lt;/code&gt; へのコピーに失敗するため &lt;code&gt;sudo&lt;/code&gt; で再実行するか聞かれます。必要であれば &lt;code&gt;y&lt;/code&gt; でインストールしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Try using sudo? (y/n) y
Going to run the following commands:

-  sudo cp /home/guchi/.local/bin/stack /usr/local/bin/stack.tmp
-  sudo mv /usr/local/bin/stack.tmp /usr/local/bin/stack

sudo file copy worked!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされるバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack --version
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;気になる更新内容まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static binary の復活&lt;/li&gt;
&lt;li&gt;Cabal 2.4 への対応&lt;/li&gt;
&lt;li&gt;internal-library 関連のバグ修正&lt;/li&gt;
&lt;li&gt;namespaced template&lt;/li&gt;
&lt;li&gt;stack run&lt;/li&gt;
&lt;li&gt;ghci に -fobject-code を渡した際にちゃんとキャッシュされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;さんのおかげで、静的にリンクされた Linux バイナリが再び利用できるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c34f11190302b2db9bab44ac6e45ca2c5f7810ce/doc/maintainers/releases.md#build-linux-static-binary-distribution-with-nix&#34;&gt;Build Linux static binary distribution with Nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2/static-haskell-nix/tree/upstream-nixpkgs-musl-1.1.19/static-stack&#34;&gt;Fully statically linked stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;download.fpcomplete.com&lt;/code&gt; から Ubuntu, Debian, CentOS, Fedora, Arch のパッケージリポジトリを削除する予定です。これらは既に1年以上前から非推奨となっており、新しいリリースにも対応していませんでしたが、過去のスクリプトとの互換性のために残していました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;大きな変更点&#34;&gt;大きな変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cabal 2.4 にアップグレードしました。
&lt;ul&gt;
&lt;li&gt;注意点: ファイル名のパターンマッチの動作が変わりました。Cabal spec 2.4 より前のバージョンでは &lt;code&gt;*.txt&lt;/code&gt; は &lt;code&gt;foo.txt&lt;/code&gt; にマッチしていましたが、&lt;code&gt;foo.2.txt&lt;/code&gt; にはマッチしませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4317&#34;&gt;Use Cabal 2.4 for the 1.9 branch #4317&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/blob/master/Cabal/ChangeLog.md#2400-mikhail-glushenkov-september-2018&#34;&gt;ChangeLog (Cabal 2.4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5372&#34;&gt;Multi-dot globbing #5372&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/784&#34;&gt;Wildcards in data-files don’t work with filenames containing multiple dots #784&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5057&#34;&gt;&lt;code&gt;cabal sdist&lt;/code&gt; does not pick up files with multiple dots #5057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; のサポートが &lt;code&gt;experimental (実験的)&lt;/code&gt; へ降格しました。また、&lt;code&gt;GHCJS&lt;/code&gt; が実験段階であることをユーザに知らせるための警告が表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4086&#34;&gt;DISCUSSION: Mark GHCJS support as deprecated? #4086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4154&#34;&gt;Warning about GHCJS use when constructing a build plan #4154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/729a052cede11855644bf00c4b7661a89148bdc7#diff-e705c8fadf1193ab59443a5e6c8cbe8b&#34;&gt;commit@729a052cede11855644bf00c4b7661a89148bdc7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;変更点&#34;&gt;変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; と &lt;code&gt;config.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようにしました。今までは置き換えていました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;グローバルな &lt;code&gt;~/.stack/.config.yaml&lt;/code&gt; とプロジェクト固有の &lt;code&gt;stack.yaml&lt;/code&gt; の話で &lt;code&gt;package.yaml&lt;/code&gt; は関係しません。&lt;/p&gt;
&lt;p&gt;例として、それぞれファイルの内容を以下のように設定しておきます。(&lt;code&gt;$everything&lt;/code&gt; は全てのパッケージを指定)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パッケージの指定が重複していたときに今までは、&lt;code&gt;stack.yaml&lt;/code&gt; (プロジェクト固有) の &lt;code&gt;ghc-options&lt;/code&gt; で上書きされていましたが、 &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようになりました。以下は動作例です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# stack v1.9.1 の動作
$ stack build
... --ghc-options aaa --ghc-options bbb

# stack v1.7.1 の動作
$ stack build
... --ghc-options bbb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc-options&lt;/code&gt; の内容が重複する場合は両方とも引数に与えられますが、後ろの値で上書きされるようなのでプロジェクト固有の設定が優先されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-config&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-stack&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に試してみると、以下のようになると思います。&lt;/p&gt;
&lt;pre class=&#34;sell&#34;&gt;&lt;code&gt;$ stack build -v
... --ghc-options -dumpdir=./respect-config --ghc-options -dumpdir=./respect-stack

$ ls  -l
...
drwxrwxr-x 5 guchi guchi 4096 10月 21 13:35 respect-stack
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3753&#34;&gt;Stack does not respect ghc-options in user config #3753&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3781&#34;&gt;Fix inheritance of category ghc-options from config.yaml #3753 #3781&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4089&#34;&gt;Have project ghc-options append to config.yaml ghc-options #3753&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはパッケージのサブライブラリをビルドする際に executables, test, benchmarks, libraries などと同様の方法でアナウンスを行うようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111/commits/4a4b63f59130bb66477d155dcb401d50fac02fab&#34;&gt;commit@4a4b63f59130bb66477d155dcb401d50fac02fab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドはサニティチェックの結果にかかわらず、生成された tarball の場所をアナウンスするようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4117&#34;&gt;Mention tarball earlier in sdist #4117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4112&#34;&gt;stack sdist fails when modules are exposed based on a flag in the cabal file #4112&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack setup&lt;/code&gt; コマンドの &lt;code&gt;--upgrade-cabal&lt;/code&gt; オプションは廃止されます。この機能は GHC 8.2 以降では動作しません。また、このフラグが実装された当初の動機は Stack がカスタムセットアップのためにスナップショットの &lt;code&gt;Cabal&lt;/code&gt; ライブラリを利用し始めたことでほとんど無くなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4118&#34;&gt;Deprecate the –upgrade-cabal flag (fixes #4070) #4118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;&lt;code&gt;stack setup --upgrade-cabal&lt;/code&gt; doesn’t work for Cabal-2.2.0.1 + ghc-8.2.2 #4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たに namespaced template 機能が実装されたため、&lt;code&gt;stack templates&lt;/code&gt; コマンドは利用可能な全てのテンプレートの一覧を良い感じに表示できなくなりました。代わりに、テンプレートを見つける方法についての&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;ヘルプファイル&lt;/a&gt;をダウンロードし、表示します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4129&#34;&gt;Get stack templates help from Github file #4039 #4129&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;ビルドツールを &lt;code&gt;cabal-install&lt;/code&gt; と同様の方法で取り扱うようになりました。また、レガシーな &lt;code&gt;build-tools&lt;/code&gt; フィールドに対しては、ツールマップの中からビルドツールパッケージを調べるのではなく、ハードコードされたビルドツールのリストを利用します。この変更により Stack の動作は &lt;code&gt;cabal-install&lt;/code&gt; に近づいたため、いくつかのバグを回避し、最適化/遅延性の恩恵を得られる可能性があります。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;stack 1.7.1 still has problems finding build tools (“The program ‘happy’ is required”) #4125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4132&#34;&gt;Use a hard-coded tool dependency map (fixes #4125) #4132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/595&#34;&gt;Build-tools not detected when not using Stackage snapshot #595&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3178&#34;&gt;Stack cannot find happy during build #3178&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3249&#34;&gt;Extensible snapshots #3249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの低下を避けるため、Mustache テンプレートに (50kb を超える) 大きなファイルを適用できなくなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4134&#34;&gt;Do not apply Mustache to large files (fixes #4133) #4134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;stack new is very slow at compiling Mustache templates #4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; はデフォルトでパッケージに署名を行うようになりました。また、&lt;code&gt;--no-signature&lt;/code&gt; オプションで署名をスキップできます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートダウンロード時のネットワーク接続問題に備えて、事前にチェックを行うようになりました。もし、問題があればキャッシュ済みのテンプレートを利用します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4173&#34;&gt;Use cached template if template download fails #4173&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;その他の改良点&#34;&gt;その他の改良点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 より前の Windows 環境では、ターミナルのデフォルト値が &lt;code&gt;--color=never&lt;/code&gt; となります。エミュレーションによる出力のみ ANSI カラーコードが利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4106&#34;&gt;Re #4091: Pre-Windows 10, default –color=never #4106&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Windows 環境では、デフォルトのターミナルを ‘mintty’ (false) として認識するように変更しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4015&#34;&gt;Windows: use ‘hIsTerminalDevice or isMinTTYHandle’ #4015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に &lt;code&gt;base&lt;/code&gt; が明示的に記載されているとき、警告を出すようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3940&#34;&gt;Warn when upgrading base #3940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、ビルドプランで達成不可能な &lt;code&gt;base&lt;/code&gt; バージョンが要求された際に、別の GHC バージョンを試すように提案するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たなサブコマンド &lt;code&gt;run&lt;/code&gt; が導入されました。このコマンドは &lt;code&gt;cabal run&lt;/code&gt; のように、指定された executable をビルド&amp;amp;実行します。executable が省略された場合は、プロジェクト内で最初に利用可能な executable が指定されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3952&#34;&gt;Introduce &lt;code&gt;stack run&lt;/code&gt; command line option #3952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/233&#34;&gt;Wishlist: &lt;code&gt;stack run&lt;/code&gt; #233&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-stack-run.html&#34;&gt;stack run コマンド – BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、依存関係が足りない旨を伝えるメッセージにパッケージの最新の cabal ファイルリビジョンハッシュを含めるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-1&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;こんな感じで表示されるようです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
  * Recommended action: try adding the following to your extra-deps in /home/thomas/github/stack/stack.yaml:
rio-0.1.2.0@sha256:cb2a65cee1c0450815002ca890633215e4544b5c1c9f7091a950142c6efe8f3f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;Add cabal-hash revision info when displaying recommended packages when failing to construct buildplan #4068&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3925&#34;&gt;Modify “recommended packages” output to include revision info #3925&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドに新しく &lt;code&gt;--tar-dir&lt;/code&gt; オプションを追加しました。このオプションにより指定したディレクトリに生成された tarball をコピーできるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3621&#34;&gt;3568 add tar files option to sdist #3621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3568&#34;&gt;Stack sdist option to place build artefacts elsewhere #3568&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/9a58d5bf5346bedb0d460335c7018c256591966d&#34;&gt;commit@9a58d5bf5346bedb0d460335c7018c256591966d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interleaved-output&lt;/code&gt; オプションと &lt;code&gt;build.interleaved-output&lt;/code&gt; 設定値が導入されました。これにより、複数の並行ビルドの出力が &lt;code&gt;packagename&amp;gt;&lt;/code&gt; プレフィックス付きで同時に標準エラー出力にダンプされます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4097&#34;&gt;Add the interleaved-output option/config value #3225 #4097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;Add flag to print GHC output to stdout #3225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3508&#34;&gt;Report progress on STDOUT/STDERR during compilation of individual modules #3508&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの再接続戦略を exponential backoff に変更しました。これにより &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt; の問題が緩和されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4109&#34;&gt;Changed the default retry strategy #4109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;Stack does not retry effectively when S3 is being flaky. #3510&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.14/retry-0.7.7.0/Control-Retry.html#v:exponentialBackoff&#34;&gt;exponentialBackoff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; コマンドは &lt;code&gt;username/foo&lt;/code&gt; という形式で、&lt;code&gt;commercialstack&lt;/code&gt; 以外のリポジトリからテンプレートをダウンロードできるようになりました。また &lt;code&gt;github:&lt;/code&gt; という形式でプレフィックスを付けることでサービスを指定することもできます。現状は &lt;code&gt;github:&lt;/code&gt; の他に &lt;code&gt;gitlab:&lt;/code&gt; と &lt;code&gt;bitbucket:&lt;/code&gt; が利用可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4103&#34;&gt;4039 namespaced templates #4103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;Namespaced templates #4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html&#34;&gt;namespaced templates - BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitrev&lt;/code&gt; から &lt;code&gt;githash&lt;/code&gt; に切り替えました。このパッケージには &lt;code&gt;gitrev&lt;/code&gt; にマージされていないバグフィックスが含まれています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; を追加するファイルがわかりづらいため、ユーザ設定ファイルへのパスをエラーメッセージに含めるようにしました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;allow-newer in global-project doesn’t work #3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4127&#34;&gt;Point to user’s config.yaml when advising ‘allow-newer: true’ #4127&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; コマンドはビルド後ではなく、ビルド前にどのメインターゲットを読み込むか質問するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4138&#34;&gt;‘stack ghci’ now asks which main module to load before building #4138&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;hpack のバージョンを 0.29.0 に更新しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4151&#34;&gt;Bump to hpack 0.29 #4151&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC 8.4 以降のバージョンを利用したとき、自動的に Haddock へ &lt;code&gt;--quickjump&lt;/code&gt; オプションが渡されるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4163&#34;&gt;Pass –quickjump to Haddock for GHC 8.4 and later #4163&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hackage-base-url&lt;/code&gt; 設定オプションを利用することで、パッケージアップロード時の Hackage ベースURL に任意のURLを指定できるようになりました。(デフォルトは &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt; です)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Nix 利用時に GHC のマイナーバージョンを省略した場合、メジャーブランチの最新のマイナーバージョンを自動的に利用するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4189&#34;&gt;Do not hardcode GHC versions for Nixpkgs #4189&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; を繰り返し実行したときに &lt;code&gt;.o&lt;/code&gt; ファイルを無効化しなくなりました。これにより、&lt;code&gt;-fobject-code&lt;/code&gt; でコンパイルされた全てのモジュールは ghci を実行する度にキャッシュされます。 詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;Set cabal_macros.h work directory in stack ghci to something non-temporary #4038&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3344&#34;&gt;stack ghci recompiles all modules on every startup, even when invoked with “-fobject-code” or “–no-build” #3344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; の最後に改行が追加されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3983&#34;&gt;fixed: terminating is newline #3983&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;前回のリリースで &lt;code&gt;ghc-pkg&lt;/code&gt; コマンドの出力が &lt;code&gt;stderr&lt;/code&gt; に出力されてしまう問題が再発したので修正しました。現在の出力はとても静かになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4028&#34;&gt;Make ghc-pkg calls less noisy #4028&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1.7.1&lt;/code&gt; で導入された再コンパイルチェックの問題を修正し、回帰テストを追加しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4003&#34;&gt;4001 excess recompilation #4003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;–file-watch is watching test suites again #4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; は internal library を含むパッケージの処理で internal libray に対応する間違ったパッケージを探し、モジュールの読み込みに失敗していました。この問題は現在修正済みで、ライブラリとサブライブラリが適切に追跡されるようにコードが変更されました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;&lt;code&gt;stack ghci&lt;/code&gt; does not recognise internal libraries #3926&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3982&#34;&gt;Handle internal libraries in GHCi. #3982&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存していないパッケージを &lt;code&gt;stack build&lt;/code&gt; すると、internal library をビルドしていないのにも関わらず登録しようとするため、ビルドに失敗していました。この問題は internal library を常にビルドすることで解決しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4033&#34;&gt;Handle internal libs not listed as dependencies #4033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;Build fails with internal libraries that aren’t dependencies #3996&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;NixOS 環境では &lt;code&gt;--no-nix&lt;/code&gt; オプションの影響を受けなくなりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4021&#34;&gt;Allow Nix mode to be disabled under NixOS #4021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4002&#34;&gt;stack does not honor –no-nix under NixOS #4002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;RAM を大量に消費してしまう問題が再発していたので修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;Regression in 1.7.1 (compared to 1.6.5) in getPackageFiles RAM usage #4027&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4066&#34;&gt;Fix RAM usage upon big dump-hi files parsing #4066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインの引数の順序によって動作が異なる問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;It should not matter if flags given before command or after #3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4067&#34;&gt;Change parsers to use &lt;code&gt;flag&#39;&lt;/code&gt; instead of &lt;code&gt;switch&lt;/code&gt; #4067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パッケージをアップロードする際の Hackage クレデンシャル保存プロンプトで、ユーザの入力前に表示されなければならないメッセージが入力後に表示されてしまっていた問題を修正しました。ghci のターゲット選択プロンプトでも同様の問題が発生していたので修正しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4063&#34;&gt;Flush after prompt #4063&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4162&#34;&gt;Stack Upload waits for confirmation BEFORE printing confirmation message #4162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack solver&lt;/code&gt; コマンドで、PATH に &lt;code&gt;cabal&lt;/code&gt; が存在しない場合、ユーザに対して &lt;code&gt;stack install cabal-install&lt;/code&gt; の実行を促すためのメッセージが表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4100&#34;&gt;Solver cabal install hint #4100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3841&#34;&gt;stack solver complains there’s no cabal in path. #3841&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはサブライブラリを含むパッケージが executable, test, benchmark などの依存関係になっている場合でも、正しくビルドできるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-2&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;Cabal 2.0 から &lt;code&gt;internal Libraries&lt;/code&gt; が追加され、stack 側も対応したという感じです。&lt;/p&gt;
&lt;p&gt;例として以下のような &lt;code&gt;package.yaml&lt;/code&gt; があった場合&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# package.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test-internal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;internal-libraries:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;internal-foo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動生成される &lt;code&gt;cabal&lt;/code&gt; ファイルは以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           test-internal
version:        0.0.0
build-type:     Simple
cabal-version:  &amp;gt;= 2.0

library internal-foo
  other-modules:
      Paths_test_internal
  build-depends:
      base
  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態でビルドした結果は次のとおりです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# v1.7.1
$ stack build
Package has buildable sublibraries but no buildable libraries, I&amp;#39;m giving up
CallStack (from HasCallStack):
  error, called at src/Stack/Package.hs:280:30 in stack-1.7.1-JqFYW3fz7If7um4NzPRwPj:Stack.Package

# v1.9.1
$ stack build
test-internal-0.0.0: configure (internal-lib)
Configuring test-internal-0.0.0...
test-internal-0.0.0: build (internal-lib)
Preprocessing library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
Building library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
[1 of 1] Compiling Paths_test_internal ( .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/autogen/Paths_test_internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/Paths_test_internal.o )
ignoring (possibly broken) abi-depends field for packages
test-internal-0.0.0: copy/register
Installing internal library internal-foo in /home/guchi/Desktop/stack-191-working/test-internal/.stack-work/install/x86_64-linux/lts-12.14/8.4.3/lib/x86_64-linux-ghc-8.4.3/test-internal-0.0.0-6jijyMwb8IH16YEILzaUQW-internal-foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;Internal libraries does not work if there’s no main library #3787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#sublibs&#34;&gt;Internal Libraries - Cabal document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sol/hpack#library-fields&#34;&gt;hpack Top-level fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存したテストスイートのカバレッジレポートで、サブライブラリが適切に処理されるようになりました。以前まではカバレッジレポートを生成するときにエラーとなっていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;Error running test coverage when tests depend on internal lbraries. #4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スナップショット更新時にサブライブラリがプリコンパイルキャシュに追加されるようになりました。以前まではスナップショットにサブライブラリを含むパッケージが存在するようなスナップショットを更新するとビルドが壊れていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;haddock-library’s internal attoparsec library cannot be found - broken package #4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Stack は &lt;code&gt;warning&lt;/code&gt; の代わりに適切な &lt;code&gt;error&lt;/code&gt; ログレベルでエラーメッセージをプリティプリントするようになりました。これにより self-executing scripts で runhaskell のプラン構築エラーがターミナルに出力されない問題も修正されます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;#4114&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;Fixes self-executing scripts not piping plan construction errors from runhaskell to terminal, issue #3942 #4114&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3942&#34;&gt;Self-executing scripts don’t pipe plan construction errors from runhaskell to terminal #3942&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Cabal の呼び出しに失敗した際に “While building Setup.hs” という間違ったメッセージが表示されていた問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4131&#34;&gt;Fix invalid “While building Setup.hs” #3934 #4131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;Invalid “While building Setup.hs” error message #3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;release-notes&#34;&gt;Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically linked Linux bindists are back again, thanks to &lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We will be deleting the Ubuntu, Debian, CentOS, Fedora, and Arch package repos from &lt;code&gt;download.fpcomplete.com&lt;/code&gt; soon. These have been deprecated for over a year and have not received new releases, but were left in place for compatibility with older scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;major-changes&#34;&gt;Major changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade to Cabal 2.4
&lt;ul&gt;
&lt;li&gt;Note that, in this process, the behavior of file globbing has been modified to match that of Cabal. In particular, this means that for Cabal spec versions less than 2.4, &lt;code&gt;*.txt&lt;/code&gt; will match &lt;code&gt;foo.txt&lt;/code&gt;, but not &lt;code&gt;foo.2.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; support is being downgraded to ‘experimental’. A warning notifying the user of the experimental status of &lt;code&gt;GHCJS&lt;/code&gt; will be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;behavior-changes&#34;&gt;Behavior changes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;stack.yaml&lt;/code&gt; are now appended to &lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;config.yaml&lt;/code&gt;, whereas before they would be replaced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; will now announce when sublibraries of a package are being build, in the same way executables, tests, benchmarks and libraries are announced&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; will now announce the destination of the generated tarball, regardless of whether or not it passed the sanity checks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--upgrade-cabal&lt;/code&gt; option to &lt;code&gt;stack setup&lt;/code&gt; has been deprecated. This feature no longer works with GHC 8.2 and later. Furthermore, the reason for this flag originally being implemented was drastically lessened once Stack started using the snapshot’s &lt;code&gt;Cabal&lt;/code&gt; library for custom setups. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;With the new namespaced template feature, &lt;code&gt;stack templates&lt;/code&gt; is no longer able to meaningfully display a list of all templates available. Instead, the command will download and display a &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt; with more information on how to discover templates. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build tools are now handled in a similar way to &lt;code&gt;cabal-install&lt;/code&gt;. In particular, for legacy &lt;code&gt;build-tools&lt;/code&gt; fields, we use a hard-coded list of build tools in place of looking up build tool packages in a tool map. This both brings Stack’s behavior closer into line with &lt;code&gt;cabal-install&lt;/code&gt;, avoids some bugs, and opens up some possible optimizations/laziness. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mustache templating is not applied to large files (over 50kb) to avoid performance degredation. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In case there is a network connectivity issue while trying to download a template, stack will check whether that template had been downloaded before. In that case, the cached version will be used. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3850&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-enhancements&#34;&gt;Other enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On Windows before Windows 10, –color=never is the default on terminals that can support ANSI color codes in output only by emulation&lt;/li&gt;
&lt;li&gt;On Windows, recognise a ‘mintty’ (false) terminal as a terminal, by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; issues a warning when &lt;code&gt;base&lt;/code&gt; is explicitly listed in &lt;code&gt;extra-deps&lt;/code&gt; of &lt;code&gt;stack.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; suggests trying another GHC version should the build plan end up requiring unattainable &lt;code&gt;base&lt;/code&gt; version.&lt;/li&gt;
&lt;li&gt;A new sub command &lt;code&gt;run&lt;/code&gt; has been introduced to build and run a specified executable similar to &lt;code&gt;cabal run&lt;/code&gt;. If no executable is provided as the first argument, it defaults to the first available executable in the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; missing dependency suggestions (on failure to construct a valid build plan because of missing deps) are now printed with their latest cabal file revision hash. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new &lt;code&gt;--tar-dir&lt;/code&gt; option to &lt;code&gt;stack sdist&lt;/code&gt;, that allows to copy the resulting tarball to the specified directory.&lt;/li&gt;
&lt;li&gt;Introduced the &lt;code&gt;--interleaved-output&lt;/code&gt; command line option and &lt;code&gt;build.interleaved-output&lt;/code&gt; config value which causes multiple concurrent builds to dump to stderr at the same time with a &lt;code&gt;packagename&amp;gt;&lt;/code&gt; prefix. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The default retry strategy has changed to exponential backoff. This should help with &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; now allows template names of the form &lt;code&gt;username/foo&lt;/code&gt; to download from a user other than &lt;code&gt;commercialstack&lt;/code&gt; on Github, and can be prefixed with the service &lt;code&gt;github:&lt;/code&gt;, &lt;code&gt;gitlab:&lt;/code&gt;, or &lt;code&gt;bitbucket:&lt;/code&gt;. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch to &lt;code&gt;githash&lt;/code&gt; to include some unmerged bugfixes in &lt;code&gt;gitrev&lt;/code&gt; Suggestion to add &lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; now shows path to user config file where this flag should be put into &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now asks which main target to load before doing the build, rather than after&lt;/li&gt;
&lt;li&gt;Bump to hpack 0.29.0&lt;/li&gt;
&lt;li&gt;With GHC 8.4 and later, Haddock is given the &lt;code&gt;--quickjump&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;It is possible to specify the Hackage base URL to upload packages to, instead of the default of &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt;, by using &lt;code&gt;hackage-base-url&lt;/code&gt; configuration option.&lt;/li&gt;
&lt;li&gt;When using Nix, if a specific minor version of GHC is not requested, the latest minor version in the given major branch will be used automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now does not invalidate &lt;code&gt;.o&lt;/code&gt; files on repeated runs, meaning any modules compiled with &lt;code&gt;-fobject-code&lt;/code&gt; will be cached between ghci runs. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; and &lt;code&gt;stack.yaml&lt;/code&gt; terminating by newline&lt;/li&gt;
&lt;li&gt;The previous released caused a regression where some &lt;code&gt;stderr&lt;/code&gt; from the &lt;code&gt;ghc-pkg&lt;/code&gt; command showed up in the terminal. This output is now silenced.&lt;/li&gt;
&lt;li&gt;A regression in recompilation checking introduced in v1.7.1 has been fixed. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; on a package with internal libraries was erroneously looking for a wrong package corresponding to the internal library and failing to load any module. This has been fixed now and changes to the code in the library and the sublibrary are properly tracked. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For packages with internal libraries not depended upon, &lt;code&gt;stack build&lt;/code&gt; used to fail the build process since the internal library was not built but it was tried to be registered. This is now fixed by always building internal libraries. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;#3996&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-nix&lt;/code&gt; was not respected under NixOS&lt;/li&gt;
&lt;li&gt;Fix a regression which might use a lot of RAM. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Order of commandline arguments does not matter anymore. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When prompting users about saving their Hackage credentials on upload, flush to stdout before waiting for the response so the prompt actually displays. Also fixes a similar issue with ghci target selection prompt.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;cabal&lt;/code&gt; is not on PATH, running &lt;code&gt;stack solver&lt;/code&gt; now prompts the user to run &lt;code&gt;stack install cabal-install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; now succeeds in building packages which contain sublibraries which are dependencies of executables, tests or benchmarks but not of the main library. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now properly considered for coverage reports when the test suite depends on the internal library. Before, stack was erroring when trying to generate the coverage report, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now added to the precompiled cache and recovered from there when the snapshot gets updated. Previously, updating the snapshot when there was a package with a sublibrary in the snapshot resulted in broken builds. This is now fixed, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[#4114] Stack pretty prints error messages with proper &lt;code&gt;error&lt;/code&gt; logging level instead of &lt;code&gt;warning&lt;/code&gt; now. This also fixes self-executing scripts not piping plan construction errors from runhaskell to terminal (issue #3942).&lt;/li&gt;
&lt;li&gt;Fix invalid “While building Setup.hs” when Cabal calls fail. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/tech-book-fest-5.html</id><title type="text">技術書典 5 での Haskell 関連サークルのまとめ</title><updated>2018-10-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/tech-book-fest-5.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;来たる&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日（月・祝）に池袋にて技術系同人誌即売会「技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;」が開催されます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を題材にした同人誌もいくつかあるようですのでまとめてみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;技術書典とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-a-la-carte-vol.1&#34; title=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;矢澤にこ先輩といっしょに代数！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;それでは当日に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;技術書典とは？&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/tech-book-fest-5-banner.png&#34; alt=&#34;技術書典 5 バナー&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（バナー画像は技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;サイトよりの引用です。）&lt;/p&gt;
&lt;p&gt;技術書典とは技術系同人誌即売会としておそらく日本最大のもので、今回で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回目の開催となります。（ニコニコ超会議内での超技術書典があったのでナンバリングがずれています。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05&#34;&gt;サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.techbookfest.org/&#34;&gt;ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/techbookfest&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは秋葉原での開催でしたが、今回はなんと場所を&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;倍の広さに拡張して池袋で開催されます。&lt;/p&gt;
&lt;p&gt;それにともないサークル数もどどんと&lt;span class=&#34;ascii&#34;&gt;470&lt;/span&gt;超となり、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;サークル&lt;span class=&#34;ascii&#34;&gt;45&lt;/span&gt;秒で回っても全サークルは見て回れないことになります。&lt;/p&gt;
&lt;p&gt;事前準備の重要性が高まった今回、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;向けに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;サークルをまとめてみました。&lt;/p&gt;
&lt;h1 id=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/32370012&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#data-a-la-carte-vol.1&#34; title=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
あと技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;に、鴨川書房というサークル名で合同本を出品します。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による&lt;span class=&#34;ascii&#34;&gt;NN&lt;/span&gt;実装&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://twitter.com/lotz84_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;lotz84_&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@lotz84_&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; や、&lt;span class=&#34;ascii&#34;&gt;FPGA&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;auto encoder&lt;/span&gt;実装に関する苦労話等が掲載される予定です。ぜひに🙏……
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1027501210494853120?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
形態素解析ライブラリ&lt;span class=&#34;ascii&#34;&gt;nagisa&lt;/span&gt;については，技術書典の合同本に寄稿してもらえるよう作成者に依頼中なので興味ある方は是非&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;表紙は鋭意作成中&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 &lt;a href=&#34;https://t.co/zUtngAS23t&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/zUtngAS23t&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1042018372207108099?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;268&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥2500&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/09/techbookfest5/&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代数的数（整数係数多項式の根として表される数）を実装するためのアルゴリズムを解説します。代数的数を使うと、ルートを含むような数に関して、浮動小数点数の誤差に煩わされることなく正確な演算が行えます。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によるサンプルコードを掲載しています。&lt;/p&gt;
&lt;p&gt;この本は、&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;連載していた「週刊 代数的実数を作る」 &lt;span class=&#34;ascii&#34;&gt;https://miz-ar.info/math/algebraic-real/&lt;/span&gt; の書籍化です。本文の加筆修正の他、「付録&lt;span class=&#34;ascii&#34;&gt;A&lt;/span&gt; ユークリッドの互除法と拡張された互除法」「付録&lt;span class=&#34;ascii&#34;&gt;B&lt;/span&gt; 部分分数分解」を追加しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt;で「代数的数を作る 多項式の根と因数分解のアルゴリズム」を頒布します。よろしくお願いします。 &lt;a href=&#34;https://t.co/HkLF1YFDuN&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/HkLF1YFDuN&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/V17ZIj2Iub&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/V17ZIj2Iub&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— だめぽラボ&lt;span class=&#34;ascii&#34;&gt;@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;mod_poppo&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mod_poppo&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/mod_poppo/status/1045885679232737281?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/h1&gt;
&lt;p&gt;私のサークルです。新刊落としました……&lt;/p&gt;
&lt;h2 id=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;28&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doujin.kakkun61.com/procedural-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://doujin.kakkun61.com/procedural-haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;での手続きプログラミングの側面について解説します。&lt;/p&gt;
&lt;p&gt;対象読者 &lt;span class=&#34;ascii&#34;&gt;- Haskell&lt;/span&gt;入門書程度が読める &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 特に読めるが書こうとすると悩む人に読んでほしいです &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミングのプログラマー &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 厳密に本書を読むためには&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を読めた方がよいですが、手続きプログラミングですのでプログラマーなら雰囲気で読めると思います&lt;/p&gt;
&lt;p&gt;書かれてあること &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 書き換え可能な変数 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミング的な制御構造 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 配列 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; サンプルプログラム &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続き的な実装と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;的な実装の対比&lt;/p&gt;
&lt;p&gt;電子版（&lt;span class=&#34;ascii&#34;&gt;PDF&lt;/span&gt;）はこちらで販売中です。 &lt;span class=&#34;ascii&#34;&gt;https://kakkun61.booth.pm/items/829369&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;商業誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;76&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://nextpublishing.jp/book/9979.html&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書！】&lt;/p&gt;
&lt;p&gt;本書は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書レベルの知識をもつ読者を対象とした、ウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書です。比較的学習コストの高い&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;ですが、本書を通じて&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の基本的な知識と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのウェブアプリケーション開発に挑んで見ましょう！ 〈本書の対象読者〉 &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書は既に読みこなしているプログラマ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でウェブアプリを作ってみたいプログラマ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;出版社ページ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみにこんな本を作るつもりでした。欲しい方いらっしゃったら次で書けとお伝えください。はげみになります。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;にサークル「趣味はデバッグ……」として参加申込をしました！ &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; 技術書典 &lt;a href=&#34;https://t.co/nD4eBo9622&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/nD4eBo9622&lt;/span&gt;&lt;/a&gt; 「自作静的型付け言語を作ってそれに対して型推論する方法を解説する」書籍を作るぞ！
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;kakkun61@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;61 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;kakkun61&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@kakkun61&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/kakkun61/status/1009271813107474432?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;矢澤にこ先輩といっしょに代数！&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;84&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1000&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://aiya000.github.io/posts/2018-09-12-techbookfest5.html&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゆるふわにこまき数学！&lt;/p&gt;
&lt;p&gt;以下のような人に向けて、頒布します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学・代数の雰囲気をゆるく知りたい&lt;/li&gt;
&lt;li&gt;軽い&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知りたい&lt;/li&gt;
&lt;li&gt;なんでもいいから技術系にこまきが読みたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;の「か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt;」で、矢澤にこ先輩が簡単な&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で代数（半群・モノイド・群・環・体）を教えてくれる本を頒布します。&lt;br&gt;よろしくお願いします🐕&lt;a href=&#34;https://t.co/KBFxqX69m3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/KBFxqX69m3&lt;/span&gt;&lt;/a&gt;&lt;br&gt;☝サークルページ&lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B85?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/HvD5ql4gFl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/HvD5ql4gFl&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— あいや🤘🙄🤘技術書典&lt;span class=&#34;ascii&#34;&gt;5@&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;public_ai000ya&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@public_ai000ya&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/public_ai000ya/status/1045946096327962624?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでは当日に&lt;/h1&gt;
&lt;p&gt;当日は安全に配慮しつつ楽しんでいきましょう！！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1000&lt;/span&gt;円札と&lt;span class=&#34;ascii&#34;&gt;500&lt;/span&gt;円玉の準備はしっかりとね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html</id><title type="text">time パッケージの使い方</title><updated>2018-09-17T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell で時間や日付を扱う際に良く利用されるのは &lt;a href=&#34;https://www.stackage.org/lts-12.9/package/time&#34;&gt;time&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;このパッケージが使いやすいかどうかは人それぞれですが、使い方を知っておくと便利なのでよく使いそうな関数を簡単に解説しようと思います。&lt;/p&gt;
&lt;p&gt;これからの例は以下のコマンドを実行していると仮定して話を進めます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack repl --package time --resolver lts-12.9
$ import Data.Time&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;time-パッケージのモジュール構造&#34;&gt;Time パッケージのモジュール構造&lt;/h2&gt;
&lt;p&gt;基本的には &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time.html&#34;&gt;Data.Time&lt;/a&gt; を import して使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data.Time は以下のモジュールを再エクスポートしています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;モジュール名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html&#34;&gt;Data.Time.Clock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全然使わないので良くわからない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-LocalTime.html&#34;&gt;Data.Time.LocalTime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日本の現在時刻を取得など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html&#34;&gt;Data.Time.Format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力の整形&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;rio-を利用している場合&#34;&gt;rio を利用している場合&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/lts-12.9/package/rio&#34;&gt;rio&lt;/a&gt; を利用している場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/rio-0.1.5.0/RIO-Time.html&#34;&gt;RIO.Time&lt;/a&gt; を import します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;data.time.localtime&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;現在時刻を取得する場合にこのモジュールを使います。現在時刻を取得したいからと言って &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:getCurrentTime&#34;&gt;getCurrentTime&lt;/a&gt; を利用すると日本時間にならないので注意してください。&lt;/p&gt;
&lt;h3 id=&#34;getzonedtime&#34;&gt;getZonedTime&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンに応じた現在時刻を返します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getZonedTime
getZonedTime :: IO ZonedTime

&amp;gt; getZonedTime
2018-09-17 13:41:05.512522063 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;getcurrenttimezone&#34;&gt;getCurrentTimeZone&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンを取得します。このタイムゾーンに基づいて &lt;code&gt;getZonedTime&lt;/code&gt; が計算されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getCurrentTimeZone
getCurrentTimeZone :: IO TimeZone

&amp;gt; getCurrentTimeZone
JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zonedtimetoutc&#34;&gt;zonedTimeToUTC&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ZonedTime&lt;/code&gt; を &lt;code&gt;UTCTime&lt;/code&gt; に変換するために使います。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t zonedTimeToUTC
zonedTimeToUTC :: ZonedTime -&amp;gt; UTCTime

&amp;gt; zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 04:41:27.907476307 UTC&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;utctozonedtime&#34;&gt;utcToZonedTime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zonedTimeToUTC&lt;/code&gt; の逆で &lt;code&gt;UTCTime&lt;/code&gt; を &lt;code&gt;ZonedTime&lt;/code&gt; に変換する関数です。タイムゾーンのための引数を余分に取ります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t utcToZonedTime
utcToZonedTime :: TimeZone -&amp;gt; UTCTime -&amp;gt; ZonedTime

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; getCurrentTime
2018-09-17 13:41:37.955641567 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日後の時間を計算するには&#34;&gt;1日後の時間を計算するには？&lt;/h2&gt;
&lt;p&gt;ここで、取得した時間の1日後を計算してみましょう。&lt;/p&gt;
&lt;p&gt;そのためには Data.Time.Clock で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:addUTCTime&#34;&gt;addUTCTime&lt;/a&gt; を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addUTCTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数に &lt;code&gt;NominalDiffTime&lt;/code&gt; という謎の型を取りますが、&lt;code&gt;nominalDay&lt;/code&gt; の実装を見れば &lt;code&gt;60 * 60 * 24&lt;/code&gt; っぽいことがわかるので、そんな感じで値を作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;nominalDay ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;nominalDay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;86400&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、上記の実装でなぜ &lt;code&gt;NominalDiffTime&lt;/code&gt; の値になるかと言うと、&lt;code&gt;NominalDiffTime&lt;/code&gt; は &lt;code&gt;Num&lt;/code&gt; クラスのインスタンスになっているため、自動的に &lt;code&gt;fromInteger&lt;/code&gt; が呼ばれて変換されるという仕組みです。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。1日後を計算してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime nominalDay . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 10:32:56.880362453 UTC

&amp;gt; getZonedTime
2018-09-17 13:49:09.279378323 JST

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-18 13:49:16.211737218 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に1時間後も計算してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime (60 * 60) . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime

&amp;gt; getZonedTime
2018-09-17 13:49:33.169797528 JST

&amp;gt; t
2018-09-17 05:49:36.757498845 UTC

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-17 14:49:40.930944714 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上手くいってますね！&lt;/p&gt;
&lt;h2 id=&#34;data.time.localtime-1&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;時刻の取得・計算ができたら、あとは整形して出力するだけです！&lt;/p&gt;
&lt;p&gt;Data.Time.LocalTime モジュールの関数を使って出力を整形してみましょう！&lt;/p&gt;
&lt;h3 id=&#34;formattime&#34;&gt;formatTime&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;formatTime&lt;/a&gt; 関数の使い方がわかれば、任意の形式で出力できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t formatTime
formatTime :: FormatTime t =&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; t -&amp;gt; String&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで &lt;code&gt;FormatTime t&lt;/code&gt; の &lt;code&gt;t&lt;/code&gt; は &lt;code&gt;UTCTime&lt;/code&gt; や &lt;code&gt;ZonedTime&lt;/code&gt;、&lt;code&gt;Day&lt;/code&gt; などの型が使えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型に応じて第三引数が変わるということです。&lt;/p&gt;
&lt;p&gt;実際に使えばすぐに慣れます。(第一引数の値は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:defaultTimeLocale&#34;&gt;defaultTimeLocale&lt;/a&gt; を指定しておけば良いのですが、自分でカスタマイズしたものを使うこともあります)&lt;/p&gt;
&lt;p&gt;第二引数がフォーマット文字列なので、空文字列を与えれば当然結果も空になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フォーマットの指定方法については &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;haddock&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%D&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%x&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%Y/%m/%d-%T&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018/09/17-13:52:21&amp;quot;

&amp;gt; formatTime defaultTimeLocale rfc822DateFormat &amp;lt;$&amp;gt; getZonedTime
&amp;quot;Sun, 16 Sep 2018 19:53:10 JST&amp;quot;

&amp;gt; formatTime defaultTimeLocale (iso8601DateFormat Nothing) &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-16&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文字列をパーズして-zonedtime-や-day-の値を作る&#34;&gt;文字列をパーズして ZonedTime や Day の値を作る&lt;/h2&gt;
&lt;p&gt;ここまでは現在時刻を元に時刻の計算や出力結果の整形を行いました。&lt;/p&gt;
&lt;p&gt;しかし、実際のプログラムでは文字列をパーズして &lt;code&gt;ZonedTime&lt;/code&gt; や &lt;code&gt;Day&lt;/code&gt; の値に変換したいこともあるでしょう。そのような場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:parseTimeM&#34;&gt;parseTimeM&lt;/a&gt; を使うと便利です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t parseTimeM
parseTimeM
  :: (Monad m, ParseTime t) =&amp;gt;
     Bool -&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; String -&amp;gt; m t&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;型がわかりづらいですが、具体的にはこんな型で利用することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一引数は &lt;strong&gt;空白&lt;/strong&gt; を許容するかどうかのフラグです (True だと空白OK)&lt;/li&gt;
&lt;li&gt;第二引数は気にせず &lt;strong&gt;defaultTimeLocale&lt;/strong&gt; を指定しておきましょう&lt;/li&gt;
&lt;li&gt;第三引数は &lt;strong&gt;パーズで利用するフォーマット&lt;/strong&gt; を指定します&lt;/li&gt;
&lt;li&gt;第四引数は &lt;strong&gt;入力の文字列&lt;/strong&gt; です&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具体例&#34;&gt;具体例&lt;/h3&gt;
&lt;p&gt;実際にいくつか使ってみましょう。以下の通り &lt;code&gt;%F&lt;/code&gt; は &lt;code&gt;YYYY-MM-DD&lt;/code&gt; の書式になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モナドを &lt;code&gt;IO&lt;/code&gt; や &lt;code&gt;Maybe&lt;/code&gt; などに変化させた基本的な例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: Maybe ZonedTime
Just 2018-09-17 00:00:00 +0000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一引数を変化させて、入力文字列の空白の有無について確認する例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot;2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入力文字列とパーズの書式がマッチしない例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%x&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot; 2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Day 型の値をとしてパーズする例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day
2018-09-17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにして日付を取得できれば、今回は説明していませんが &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt; の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html#v:addDays&#34;&gt;addDays&lt;/a&gt; 関数などを使って日付の計算を行うこともできるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; d = parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day

&amp;gt; addDays 1 &amp;lt;$&amp;gt; d
2018-09-18

&amp;gt; addDays 35 &amp;lt;$&amp;gt; d
2018-10-22&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;time パッケージを使うと時刻や日付の計算ができる&lt;/li&gt;
&lt;li&gt;現在の&lt;strong&gt;日本&lt;/strong&gt;時間を取得した場合は &lt;strong&gt;getCurrentTime&lt;/strong&gt; ではなく、&lt;strong&gt;getZonedTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;整形には &lt;strong&gt;formatTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;文字列から &lt;strong&gt;ZonedTime&lt;/strong&gt; や &lt;strong&gt;Day&lt;/strong&gt; に変換する際は &lt;strong&gt;parseTimeM&lt;/strong&gt; を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell入門の &lt;strong&gt;7.7 日付・時刻を扱う&lt;/strong&gt; にも3ページほど &lt;strong&gt;time&lt;/strong&gt; パッケージの解説があるので、気になる人はそちらも確認してみると良いかもしれません。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;getZonedTime&lt;/code&gt; に対して &lt;code&gt;formatTime defaultTimeLocale &amp;lt;フォーマット文字&amp;gt;&lt;/code&gt; の対応表です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; getZonedTime
2018-09-17 14:44:52.052040178 JST&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;narrow-table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;出力結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%_z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+ 900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%0z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%^z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%#z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%8z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+00000900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%_12z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+         900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JST&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon Sep 17 14:39:34 JST 2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:39&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:12&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:31&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02:40:55 PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;43&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;49&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;903244678000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%Q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.28084722&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1537163079&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018-09-17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;September&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;260&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Monday&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;37&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/substring-parser.html</id><title type="text">substring-parserで「タイプセーフプリキュア！」を移行した話</title><updated>2018-09-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/substring-parser.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日私は&lt;a href=&#34;https://cure-hack.connpass.com/event/91157/&#34;&gt;プリキュアハッカソン &lt;span class=&#34;ascii&#34;&gt;NewStage&lt;/span&gt;&lt;/a&gt;というちょっと変わったイベントで、「&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;」の最近の更新について発表いたしました。&lt;br /&gt;
今回は&lt;a href=&#34;http://the.igreque.info/slides/2018-08-18-substring-parser.html&#34;&gt;その際使用したスライド&lt;/a&gt;を、ブログ記事として拡大して共有させていただきたいと思います！&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;予告編（はじめにまとめ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;これまでのあらすじ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;「タイプセーフプリキュア！」とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;どうやって修正する？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;パーサーコンビネーターとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;👎記述が冗長&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;👎文字列の先頭からのマッチしかできない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;結果、できたもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;その他の似たソリューション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;次のゴール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;予告編（はじめにまとめ）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;これまでのあらすじ&lt;/h1&gt;
&lt;h2 id=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「タイプセーフプリキュア！」とは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;https://github.com/kan/p5-acme-prettycure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ACME::PrettyCure&lt;/span&gt;&lt;/a&gt;のような「&lt;a href=&#34;https://qiita.com/sue445/items/b41a4f5bdca46f1736c3&#34;&gt;プリキュア実装&lt;/a&gt;」の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つです。&lt;br /&gt;
詳しくはこれから挙げる過去の記事をご覧ください、と言いたいところですが、よくよく見たら「プリキュア実装」が何かを明記してる記事ではないようなので😅、ここで軽く説明しましょう。&lt;br /&gt;
「プリキュア実装」とは一言で言うと「プリキュアやプリキュアに変身する女の子たち、変身時の台詞など諸々のプリキュアの設定をソースコードに収録したライブラリー」です。&lt;/p&gt;
&lt;p&gt;例えば、今回取り上げます私の「タイプセーフプリキュア！」は（もちろん）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書かれたプリキュア実装で、次のように書くことで、キュアアンジュが変身する際の台詞を取得することができます。&lt;br /&gt;
&lt;small&gt;（出力されるリストは、手で整形しています）&lt;/small&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- キュアアンジュには、薬師寺さあやが「ミライクリスタル・ブルー」を&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- セットした「プリハート」を使うことで変身します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; transformationSpeech &lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalBlue&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;ミライクリスタル！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ハートキラっと！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;は～ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;輝く未来をー、抱きしめて！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなを癒す！知恵のプリキュア！キュアアンジュ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で上記のコードを試す場合は、下記のコードで&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;と&lt;a href=&#34;https://github.com/haskell-jp/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;をインストールした上で起動するとよいでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build typesafe-precure unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci -- -interactive-print=&lt;span class=&#34;st&#34;&gt;&amp;quot;Text.Show.Unicode.uprint&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その他の機能や、使っている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張などについては下記の記事をご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://the.igreque.info/posts/2016/06-type-safe-precure.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;igreque : Info -&amp;gt; Haskell&lt;/span&gt;でプリキュアを作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;「タイプセーフプリキュア！」を支える技術 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/h2&gt;
&lt;p&gt;そんな「タイプセーフプリキュア！」ですが、前述の&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の記事の最後で「&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;は現状非常に冗長で、非実用的な実装になってしまっています」と述べているとおり、ほかのプリキュア実装と異なり、&lt;del&gt;実用性を度外視して&lt;/del&gt;「設定の正しさ」を最優先事項とした結果、変身時の台詞や浄化技（「必殺技」ともしばしば呼ばれます）の台詞を取得するのに、非常に冗長なコードが必要になってしまいました。&lt;br /&gt;
それではせっかく&lt;span class=&#34;ascii&#34;&gt;YouTube&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Wikipedia&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Blu-ray&lt;/span&gt;やらを見直してせっせと集めた情報が勿体ないので、集めた情報を、コンパイル時に&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;として出力することにしました。&lt;br /&gt;
そうして生まれたのが&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;&lt;/a&gt;とそれをプリティープリントした&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/pretty-cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pretty-cure-index.json&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
将来的には、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を書き直すのに使用しようかと考えています。&lt;/p&gt;
&lt;p&gt;作るに当たって新たに「タイプセーフプリキュア！」のソースコードに仕込んだ仕組みについては、&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;ANN&lt;/code&gt;という機能を濫用することで達成しました。😎&lt;/p&gt;
&lt;h1 id=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/h1&gt;
&lt;p&gt;従来の&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;には、最新作である「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と、その一つ前の作品である「キラキラ☆プリキュアアラモード」の情報しか収録されていませんでした。&lt;br /&gt;
前述の&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;でも触れましたが、収録のためにはプリキュアの設定の書式を大幅に変更しなければならず、面倒なのでひとまず後回しにしていたのです。&lt;/p&gt;
&lt;p&gt;そこで今年のプリキュアハッカソンにて発表するのによいネタだろうと思い、あの手この手を使って、全シリーズを&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に含める対応を行いました&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;🎉。&lt;/p&gt;
&lt;h2 id=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;それでは、具体的にどんな修正を行ったのか紹介しましょう。&lt;br /&gt;
修正前は、プリキュアの設定を収録した各モジュール（&lt;code&gt;ACME.PreCure.Textbook&lt;/code&gt;以下にあるので、今後は「&lt;strong&gt;各&lt;code&gt;Textbook&lt;/code&gt;モジュール&lt;/strong&gt;」と呼びます）には&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Types.hs#L71&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;がたくさん&lt;/a&gt;ありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;transformedInstance&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  [t| CureMiracle |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;  introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;  variation_Dia&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記はキュアミラクルを表す型の定義と、その日本語での名前、変身時の名乗りといったプロフィールを設定しているコードです。&lt;br /&gt;
このほかにも、プリキュアに変身する女の子の設定や、変身の際に必要な変身アイテムなどの型定義がたくさんあります。&lt;br /&gt;
&lt;code&gt;transformedInstance&lt;/code&gt;で始まる行は、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を使った、型クラスのインスタンス宣言です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types/TH.hs#L151-L158&#34;&gt;&lt;code&gt;transformedInstance&lt;/code&gt;というマクロ&lt;/a&gt;が、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types.hs#L15-L19&#34;&gt;&lt;code&gt;Transformed&lt;/code&gt;という型クラス&lt;/a&gt;のインスタンスを生成することで、プリキュアを表す型と、日本語での名前、変身時の名乗りを実際に紐付けているのです。&lt;br /&gt;
&lt;small&gt;（実際の日本語での名前はご覧のとおり&lt;code&gt;cureName_Miracle&lt;/code&gt;といった変数に束縛されております。&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Words.hs#L18&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Words.hs&lt;/span&gt;&lt;/a&gt;というファイルから参照しています）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;修正前はこのように、あくまでも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとして、プリキュアの設定を書いていたため、このままでは&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;のデータとして扱うのが難しい状態でした。&lt;/p&gt;
&lt;h2 id=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;そのため、今回修正した後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/fd5f89797372f616a551e07251c0fcd2ca1531c2/src/ACME/PreCure/Textbook/MahoGirls/Profiles.hs#L20&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Profiles.hs&lt;/span&gt;&lt;/a&gt;で、各種の設定を宣言することにしました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;transformees ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Transformee&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;transformees &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;  [ mkTransformee&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;Cure Miracle&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;      cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;      variation_Dia&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;      introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;  , &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; data-line-number=&#34;10&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkTransformee&lt;/code&gt;関数で作っている&lt;code&gt;Transformee&lt;/code&gt;型の値は、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;の一部として、&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する中間データです。もちろん&lt;code&gt;ToJSON&lt;/code&gt;のインスタンスになっております。&lt;br /&gt;
このように新しい各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、直接&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとしてプリキュアの設定を書く代わりに、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する用の中間データを設けることで、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録しやすい状態に&lt;/strong&gt;しています。&lt;/p&gt;
&lt;p&gt;こうして作られた&lt;code&gt;Transformee&lt;/code&gt;などの中間データ用の値は、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのルートに当たるモジュールで、型クラスのインスタンス宣言を行ったり、&lt;code&gt;ANN&lt;/code&gt;という機能でモジュールに紐付けられます。&lt;br /&gt;
以下は「魔法つかいプリキュア！」のルートに当たるモジュール&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Textbook/MahoGirls.hs&#34;&gt;&lt;code&gt;MahoGirls.hs&lt;/code&gt;&lt;/a&gt;からの抜粋です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls.Profiles&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# ANN module transformees #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(declareTransformees transformees)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Profiles.hs&lt;/code&gt;で定義した&lt;code&gt;transformees&lt;/code&gt;というリストを、&lt;code&gt;ANN&lt;/code&gt;で&lt;code&gt;MahoGirls&lt;/code&gt;モジュールに紐付け、&lt;code&gt;declareTransformees&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロで型宣言やインスタンス宣言を生成するのに使っています。&lt;br /&gt;
&lt;code&gt;ANN&lt;/code&gt;については&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;前回の「タイプセーフプリキュア！を支える技術」&lt;/a&gt;をご覧ください&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;修正前との違いにおける要点を繰り返しましょう。修正後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリキュアの情報を、
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;として書き出すためのデータ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;で型や型クラスのインスタンスとして生成するためのデータ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;両方で扱えるようにするために、専用の型の値として保存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;するようにしています。&lt;/p&gt;
&lt;h2 id=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうやって修正する？&lt;/h2&gt;
&lt;p&gt;それではここからは、各&lt;code&gt;Textbook&lt;/code&gt;モジュールの書式を、どうやって前節で説明したような、「修正前」から「修正後」の書式に移行したのか説明します。&lt;/p&gt;
&lt;p&gt;当然、手で修正するには大変な量です。&lt;br /&gt;
従来より「タイプセーフプリキュア！」では&lt;span class=&#34;ascii&#34;&gt;TV&lt;/span&gt;シリーズ&lt;span class=&#34;ascii&#34;&gt;15&lt;/span&gt;作品に加えてキュアエコーが出てくる映画もサポートしているため、各&lt;code&gt;Textbook&lt;/code&gt;モジュールは&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;作品分存在しています。&lt;br /&gt;
すでに「修正後」の書式に移行済みの「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と「キラキラ☆プリキュアアラモード」を除いても、&lt;span class=&#34;ascii&#34;&gt;14&lt;/span&gt;作品分書き換えないといけません。&lt;br /&gt;
シリーズごとに定義されている型やインスタンス宣言の数にはばらつきがありますが、すべて移行してから数えてみたところ、型の数だけで&lt;span class=&#34;ascii&#34;&gt;313&lt;/span&gt;個、変身や浄化技のインスタンス宣言だけで&lt;span class=&#34;ascii&#34;&gt;211&lt;/span&gt;個ありました。&lt;br /&gt;
プリキュアやプリキュアに変身する女の子、変身アイテムだけでなく、それぞれの変種も別の型として定義しているため、実際のプリキュアの数よりも遙かに多いのです😵。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim&lt;/span&gt;のマクロなどを駆使すれば決して人間の手でも移行できない規模ではありませんが、そこは「タイプセーフプリキュア！」です。&lt;br /&gt;
始まって以来私が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張を始めいろいろな技術を試すための実験場としても機能していたので、ここは是非ちょっと凝ったことをしてぱーっと書き換えてみたいものでしょう😏。&lt;br /&gt;
そこで思いついたのがパーサーコンビネーター、並びに拙作のライブラリー&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;だったのです💡！&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターとは&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の紹介の前に、パーサーコンビネーターについて簡単に紹介しておきましょう。&lt;br /&gt;
&lt;small&gt;（「すでに知ってるよ！」という方はこの節は飛ばした方が良いかと思います）&lt;/small&gt;&lt;br /&gt;
パーサーコンビネーターは、例えば正規表現のような、文字列を解析する技術の一つです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;&lt;/a&gt;をはじめ、多くのプログラミング言語にライブラリーとして提供されています。&lt;/p&gt;
&lt;p&gt;実装はいろいろありますが、本質的にパーサーコンビネーターは「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」として表現されます。&lt;br /&gt;
加えて、それらを簡単に組み合わせるための&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を提供することで、複雑な文字列から複雑なデータ構造を抽出できるようにしてくれます。&lt;/p&gt;
&lt;p&gt;実際のパーサーコンビネーターのライブラリーを単純化して例を挙げましょう。&lt;br /&gt;
例えば、通例パーサーコンビネーターのライブラリーは&lt;code&gt;decimal&lt;/code&gt;という、「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取って、整数を返すパーサー」を提供していることが多いです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt;関数に、解析したい文字列と一緒に渡すことで、「文字列を解析した結果」と、「残りの文字列」を取得することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;123abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆上記の例では「解析したい文字列」として&lt;code&gt;123abc&lt;/code&gt;を渡したので、パースした結果の整数&lt;code&gt;123&lt;/code&gt;と、その残りの文字列&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;を返しています。&lt;/p&gt;
&lt;p&gt;これだけではつまらないので、ほかのパーサーの例も挙げましょう。&lt;br /&gt;
👇今度は「文字 セミコロン &lt;code&gt;;&lt;/code&gt; を受け取って、そのまま返すパーサー」です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;(&lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「パースした結果」がセミコロン &lt;code&gt;;&lt;/code&gt; で、「残りの文字列」が&lt;code&gt;&amp;quot;aaa&amp;quot;&lt;/code&gt;となっていますね。&lt;/p&gt;
&lt;p&gt;それでは以上&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパーサーを組み合わせて、&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー&lt;/strong&gt;を作ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; decimalAndSemicolon &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;    n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decimal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;    char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;    return n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimalAndSemicolon &lt;span class=&#34;st&#34;&gt;&amp;quot;123;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 結果にセミコロンが含まれてない点に注意&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;におけるパーサーコンビネーターのライブラリーは、パーサーを&lt;code&gt;Monad&lt;/code&gt;として提供することで、上記のように&lt;code&gt;do&lt;/code&gt;記法でパーサーを組み合わせることができるようになっています。&lt;br /&gt;
ここでは詳細は割愛しますが、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;で整数をパースしたあと、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char &#39;;&#39;&lt;/code&gt; で文字セミコロン &lt;code&gt;;&lt;/code&gt;をパース（でも結果は無視）し&lt;/li&gt;
&lt;li&gt;パースした結果として「&lt;code&gt;decimal&lt;/code&gt;がパースした整数」&lt;code&gt;n&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を行っているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;ちなみに、パーサーコンビネーターに慣れた読者の方なら、いわゆる&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルを使って、次のようにも書けると気づくでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;decimalAndSemicolon &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; decimal &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これならパースした結果をいちいち変数に束縛する必要もなく、より簡潔に書くことができますね！&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターのパワーを実感していただくために、もう一つ例を紹介します。&lt;br /&gt;
&lt;code&gt;many&lt;/code&gt;という関数にパーサーコンビネーターを渡すと、「受け取ったパーサーコンビネーターで失敗するまで繰り返しパースして、その結果をリストとして返す」パーサーが作れます。&lt;br /&gt;
例えば先ほどの「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー」から、「セミコロンが末尾に着けられた整数のリストを返すパーサー」を作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;parse (many decimalAndSemicolon) &lt;span class=&#34;st&#34;&gt;&amp;quot;12;34;56;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;([&lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;34&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;56&lt;/span&gt;], &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにパーサーコンビネーターは、小さなパーサーをどんどん組み合わせることで、複雑な文字列から複雑なデータ構造を取り出すパーサーを、クールに作れるようにしてくれます。&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/h3&gt;
&lt;p&gt;そんなパーサーコンビネーターについて、正規表現と比べた場合の長所短所を明確にしておきましょう。&lt;br /&gt;
まずはよいところから。&lt;/p&gt;
&lt;h4 id=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/h4&gt;
&lt;p&gt;前節で示したように、複雑なパーサーも、小さなパーサーの組み合わせからコツコツと作れるようになっています。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/h4&gt;
&lt;p&gt;さっきの&lt;code&gt;decimal&lt;/code&gt;は、パースした結果を直接整数&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;として返していたことにお気づきでしょうか？&lt;br /&gt;
正規表現で欲しい文字列からデータ構造を取り出したい際は、通常グルーピング機能を使うことになりますが、必ず一旦文字列として取り出すことになります。&lt;br /&gt;
それに対してパーサーコンビネーターには、取り出した文字列を対象のデータ構造に変換する仕組みが組み込まれています。&lt;br /&gt;
再帰的なパーサーを書いて再帰的なデータ構造に割り当てるのも楽ちんです。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/h4&gt;
&lt;p&gt;今回の例にはありませんでしたが、例えばパースして取り出した整数の数だけ、続きの文字列を繰り返しパースする、といったことも簡単にできます。&lt;/p&gt;
&lt;p&gt;一方、正規表現と比べて悪いところもあります。&lt;/p&gt;
&lt;h4 id=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎記述が冗長&lt;/h4&gt;
&lt;p&gt;正規表現はいわゆる「外部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」、すなわちプログラミング言語から独立した構文で提供されています。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Ruby&lt;/span&gt;などの構文で言えば、&lt;code&gt;/.../&lt;/code&gt;の中は別世界ですよね。&lt;br /&gt;
パーサーコンビネーターは、本質的に「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」であるとおり、あくまでプログラミング言語標準の関数&lt;small&gt;（のうち、文字列の解析に特化したもの）&lt;/small&gt;として提供されます。「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」なんて呼ばれることもあります。&lt;/p&gt;
&lt;p&gt;そのため、正規表現とは異なり、あくまでもプログラミング言語の構文の中で使えなければならないため、使用できる文字列に限りがあり、必然的に長くなります。&lt;br /&gt;
例えば先ほどの&lt;code&gt;many&lt;/code&gt;は正規表現で言うところの&lt;code&gt;*&lt;/code&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上の量指定子）&lt;/small&gt;とちょっと似てますが、正規表現の方が&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;文字も短いですよね。&lt;/p&gt;
&lt;p&gt;しかしながら、冗長であることはメリットにもなり得ます👍。&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt;をはじめ、正規表現の特殊な機能を使うには、専用の記号（メタキャラクター）をその数だけ覚えなければなりません。&lt;br /&gt;
片やパーサーコンビネーターは&lt;code&gt;many&lt;/code&gt;のような機能も普通の関数として提供されるため、冗長である分分かりやすい名前をつけやすいのです。&lt;/p&gt;
&lt;h4 id=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/h4&gt;
&lt;p&gt;パーサーコンビネーターは先ほども触れた「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」です。&lt;br /&gt;
つまり、プログラミング言語の普通の関数として使用されるものです。&lt;br /&gt;
したがって、例えば正規表現をエディターの検索機能に利用すると言ったような、「ユーザーからの入力として受け取る」と言ったことは、不可能ではないものの、正規表現に比べれば難しいです。&lt;/p&gt;
&lt;h4 id=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/h4&gt;
&lt;p&gt;こちらについてはちょっと難しいので後述します。&lt;/p&gt;
&lt;h4 id=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎文字列の先頭からのマッチしかできない&lt;/h4&gt;
&lt;p&gt;この問題は、パーサーコンビネーターをベター正規表現として使おうと思った場合に、しばしばパーサー作りを面倒くさくします。&lt;br /&gt;
パーサーコンビネーターは、原理上必ず文字列の先頭から解析するよう作られています。&lt;br /&gt;
例えば先ほど紹介したパーサー&lt;code&gt;decimal&lt;/code&gt;の場合、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;abc123&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても、&lt;code&gt;&amp;quot;abc123&amp;quot;&lt;/code&gt;は先頭が「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列」ではないので、失敗してしまいます&lt;small&gt;（実際の戻り値はライブラリーによって異なります。試してみましょう！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターはそもそもの用途が&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;からプログラミング言語などのマシンリーダブルな構文を作るところにあるので、妥当と言えば妥当な制限です。&lt;br /&gt;
その場合は必ず、文字列を頭から読んでパースすることになるでしょうから。&lt;/p&gt;
&lt;p&gt;とはいえ、これは正規表現で例えるなら、常に先頭に&lt;code&gt;\A&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;あるいは &lt;code&gt;^&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を付けなければならない、あるいは自動的に付いてしまう、というような制限です。&lt;br /&gt;
正規表現は行の中にある一部の文字列を抽出したり置換したりするのによく使われるので、役に立たないケースがたくさん出てきてしまいます。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターでこの問題に対応するには、マッチさせたい文字列に到達するまで、スキップするための処理を書かないといけません。&lt;br /&gt;
残念ながらこれは、正規表現で言うところの &lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt; と書けばよい話&lt;strong&gt;ではありません&lt;/strong&gt;。&lt;br /&gt;
&lt;code&gt;\A(マッチさせたくない文字列)*(本当にマッチさせたい文字列)&lt;/code&gt; という書き方をしなければならないのです。&lt;br /&gt;
なぜなら、先ほど触れた「正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が強欲なマッチになる」という問題があるためです。&lt;br /&gt;
正規表現で言うところの&lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt;を書くと、&lt;code&gt;.*&lt;/code&gt;が「マッチさせたくない文字列」だけでなく「本当にマッチさせたい文字列」までマッチしてしまい、結果肝心の「本当にマッチさせたい文字列」を扱うことができなくなってしまうのです。&lt;/p&gt;
&lt;h3 id=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;さて、今回の目的は「『タイプセーフプリキュア！』のソースコードの書式を書き換えることで、全シリーズのプリキュアの情報を&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録する」ことでした。&lt;br /&gt;
そのためには、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのソースコードにおいて&lt;strong&gt;途中&lt;/strong&gt;に含まれている、プリキュアを表す型の定義や、型クラスのインスタンス宣言を集める必要があります。&lt;br /&gt;
しかもそれらは、一つの定義が行をまたいでいたりまたいでなかったりするので、よくある行単位で処理するツールを使うのも、なかなか難しいと思います。&lt;br /&gt;
また、抽出したいデータ構造も多様かつそこそこに複雑で、中には再帰的なデータ構造もあります。正規表現を用いてのパースも、かなり困難なことでしょう。&lt;br /&gt;
とはいえパーサーコンビネーターを通常のとおりに使うと、これまでに述べたとおり、「文字列の先頭からしかマッチできない」という制限が、考えることを複雑にします。&lt;/p&gt;
&lt;p&gt;こうした状況は今回の問題に限らず、このように、ソースコードの多くの類似箇所を書き換える場面において、しばしば発生するでしょう。&lt;br /&gt;
そこで今回は&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;こうした問題全般に対応するライブラリーとして、&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを作りました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を使えば、任意のパーサーコンビネーター&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;を&lt;strong&gt;文字列の中間でも&lt;/strong&gt;マッチさせることができます。&lt;br /&gt;
残念ながらドキュメントらしいドキュメントが全く書けてない状況ではありますが、一応動きます。&lt;br /&gt;
&lt;a href=&#34;https://gitlab.com/igrep/substring-parser/blob/master/test/Spec.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Spec.hs&lt;/span&gt;&lt;/a&gt;が動作を知る際の参考になるかも知れません。&lt;/p&gt;
&lt;h4 id=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;はどのようにして、任意のパーサーコンビネーターを文字列の中間でもマッチできるようにしているのでしょう？&lt;br /&gt;
仕組みは単純です。&lt;br /&gt;
引数として受け取ったパーサーを、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;とりあえず先頭からマッチさせてみる。&lt;/li&gt;
&lt;li&gt;失敗したら先頭の一文字をスキップして、次の文字からまたマッチさせてみる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という手順を繰り返すだけです。 結果として文字列の先頭にある「マッチさせたくない文字列」をスキップすることができるのです。&lt;/p&gt;
&lt;p&gt;⚠️残念ながら決して効率のいい方法ではないので、真面目なパーサーを書くときはおすすめしません！&lt;br /&gt;
あくまでも今回のような、書き捨てだけど、それなりに複雑な文字列を解析する必要がある場合のみ使うべきでしょう。&lt;/p&gt;
&lt;h2 id=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果、できたもの&lt;/h2&gt;
&lt;p&gt;ここまで説明した&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を駆使することで、私は無事、各&lt;code&gt;Textbook&lt;/code&gt;モジュールを半自動で古い書式から新しい書式に書き換えることに成功しました。&lt;br /&gt;
&lt;small&gt;（残念ながら古い&lt;code&gt;Textbook&lt;/code&gt;モジュールには存在しない情報を補ったり、体裁を整えたりする必要があったため、完全に自動で書き換えられたわけではありません）&lt;/small&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/pull/25&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure#25&lt;/span&gt;&lt;/a&gt;という大きな&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;に、移行したもののほぼすべてが刻まれています。&lt;/p&gt;
&lt;p&gt;なお、上記の&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;では消してしまってますが、実際に実行した、移行用スクリプトは&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/ed038aa57a4df6b1fcc23fb071253888ebd7d477/app/migrate2cure-index.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure/app/migrate2cure-index.hs&lt;/span&gt;&lt;/a&gt;にあります。&lt;br /&gt;
ご興味のある方はご覧になってみてください。&lt;/p&gt;
&lt;p&gt;また、もう少し小さいサンプルとして、プリキュアハッカソンの成果発表でデモをした時点のコミットも載せておきます。&lt;br /&gt;
👇のコマンドを実行すれば、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/app/migrate2cure-index.hs#L101-L118&#34;&gt;こちらのコミット時点のパーサー&lt;/a&gt;で、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/Dokidoki/Types.hs#L19-L23&#34;&gt;同時点の&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;&lt;/a&gt;から、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;で使用する&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Index/Types.hs#L44-L46&#34;&gt;&lt;code&gt;Girl&lt;/code&gt;&lt;/a&gt;という型の値を取り出すことができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; git clone https&lt;span class=&#34;fu&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; cd typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; git checkout 73948fb4a82baaf4e33900d77326791c7703f786&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; stack build &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;migrate2cure&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;index&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; stack exec migrate2cure&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;index&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt; 略 &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- src/ACME/PreCure/Textbook/Dokidoki --&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他の似たソリューション&lt;/h1&gt;
&lt;p&gt;今回は、自前で作ったライブラリーと一から書いたパーサーを組み合わせることで「ソースコードの多くの類似箇所を書き換える」問題に対応しましたが、似たようなことを行うツールはほかにもあります。&lt;br /&gt;
いずれも私はほぼ使ったことがないので詳しい解説はできませんが、軽く紹介しておきます。&lt;/p&gt;
&lt;h2 id=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;製の一括置換ツールです。指定したディレクトリーのファイル群を、正規表現で一括置換できます。&lt;br /&gt;
ここまで書くと&lt;code&gt;perl&lt;/code&gt;や&lt;code&gt;sed&lt;/code&gt;、&lt;code&gt;awk&lt;/code&gt;などで十分できそうにも聞こえますが、修正前後の状態を色つきで見ながら対話的に修正できるそうです。&lt;br /&gt;
正規表現での単純な修正が気に入らなければ、その場で該当箇所だけをエディタで修正できるとのこと。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Python 2&lt;/span&gt;に依存しているのがちょっとつらいところでしょうか…😨。&lt;/p&gt;
&lt;h2 id=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同じく&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;が作った、名前のとおり&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;に特化したソースコードの修正ツールです。&lt;br /&gt;
こちらは正規表現は使用せず、「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」と呼ばれる、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;を変換するための専用のスクリプトを実行することで修正するそうです。&lt;br /&gt;
様々な状況に特化した「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」を別パッケージとしても提供しているようです。&lt;/p&gt;
&lt;p&gt;📝以上の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つについては「&lt;a href=&#34;https://www.webprofessional.jp/getting-started-with-codemods/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;疲れに効く！ &lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;JSCodeshift&lt;/span&gt;でリファクタリングが捗る &lt;span class=&#34;ascii&#34;&gt;- WPJ&lt;/span&gt;&lt;/a&gt;」も参考にしました。&lt;/p&gt;
&lt;h2 id=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.superpowerscorp.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperPowers Corp&lt;/span&gt;&lt;/a&gt;という会社が開発中の、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;をはじめとする&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のパワーを集大成させた、ソースコードの一括置換ツールです。&lt;br /&gt;
&lt;code&gt;ByteString -&amp;gt; ByteString&lt;/code&gt;という型の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を渡すことで、指定したディレクトリーのファイルすべてに対して関数を適用し、書き換えます。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;--haskell&lt;/code&gt;や&lt;code&gt;--html&lt;/code&gt;、&lt;code&gt;--javascript&lt;/code&gt;など、各言語に特化したオプションを渡すと、各言語のソースコードを修正する&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ベースの&lt;span class=&#34;ascii&#34;&gt;module&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;した状態で、関数を作れるようにしてくれます。&lt;br /&gt;
具体的には、例えば&lt;code&gt;--haskell&lt;/code&gt;オプションを渡すと、&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts&lt;/span&gt;&lt;/a&gt;と&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts-prisms&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts-prisms&lt;/span&gt;&lt;/a&gt;パッケージのモジュールを&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;の各トークンに対応した&lt;code&gt;Prism&lt;/code&gt;などが使えるようになります。&lt;/p&gt;
&lt;p&gt;後は&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;など&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのコンビネーターと組み合わせれば、一気に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードを編集することができます。 「任意のデータ構造に対する&lt;span class=&#34;ascii&#34;&gt;jQuery&lt;/span&gt;」とも言われる&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのパワーを存分に生かしたツールなのです。&lt;/p&gt;
&lt;p&gt;残念なところは、今でも開発中である点と、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーに習熟していなければ使いこなせないという点でしょうか。&lt;br /&gt;
よく使う&lt;code&gt;Lens&lt;/code&gt;型や&lt;code&gt;Prism&lt;/code&gt;型だけでなく、&lt;code&gt;Traversal&lt;/code&gt;も使えなければなりません。&lt;br /&gt;
特に&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio#haskell-via-haskell-src-exts-and-haskell-src-exts-prisms&#34;&gt;サンプル&lt;/a&gt;で紹介されているような&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;を使った場合において、指定した&lt;code&gt;Prism&lt;/code&gt;がマッチしなかった場合、何事もなかったかのようにソースが書き換えられないため、デバッグが面倒なところもつらいです。&lt;/p&gt;
&lt;h1 id=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次のゴール&lt;/h1&gt;
&lt;p&gt;「タイプセーフプリキュア！」の開発は、これからもプリキュアハッカソンの前後とプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;の前後を中心に、今後も続ける予定です。&lt;br /&gt;
先にも触れましたが、次回は今回完成させた&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;を使用することで、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を「ユナイトプリキュア」を「ディナイトプリキュア」として書き直すかも知れません。&lt;br /&gt;
ただ、それ以外にももうちょっと&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で遊びたいことがあるので、後回しにするかも知れません。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim script&lt;/span&gt;、あんまり書きたくないんですよね…😥&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それではこの秋もパーサーコンビネーターで&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking!!&lt;/span&gt;✌️✌️✌️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;プリキュアハッカソンは「ハッカソン」の名を冠してはいるものの、実態としてはプリキュアの映画を観ながら好き勝手に開発するというゆるい会です。&lt;br /&gt;
また、そもそもそれほど時間もないので、私は当日の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;～&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;週間ほど前から今回の対応を始めておりました。「今回のプリキュアハッカソンに&lt;strong&gt;向けて&lt;/strong&gt;行ったこと」なる見出しなのは、そのためです。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;当時は各&lt;code&gt;Textbook&lt;/code&gt;モジュールの&lt;code&gt;Types.hs&lt;/code&gt;というファイルで&lt;code&gt;ANN&lt;/code&gt;や&lt;code&gt;declareTransformees&lt;/code&gt;などを使っていましたが、現在は「ルートに当たるモジュール」で行うことにしました。ファイル数を減らすのと、&lt;span class=&#34;ascii&#34;&gt;export&lt;/span&gt;する識別子を型に絞ることで、&lt;code&gt;transformeesHugtto&lt;/code&gt;のような、あまりかっこよくない識別子を隠す、というのがその目的です。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;実際には、前職時代に同様の問題に遭遇した際作成しました。今後も必要になったときにちょっとずつ開発していく予定です。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;一応&lt;a href=&#34;http://hackage.haskell.org/package/parsers&#34;&gt;&lt;code&gt;parsers&lt;/code&gt;&lt;/a&gt;パッケージを使って様々なパーサーコンビネーターのライブラリーをサポートするように作りましたが、現状&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;code&gt;attoparsec&lt;/code&gt;&lt;/a&gt;でのみテストしています。用途を考えれば多分十分じゃないかと思っています。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html</id><title type="text">stack でアプリケーションのバックトレースを取得する (デバッグ)</title><updated>2018-09-01T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell のデバッグ手法については、以下の記事がとても詳しく参考になります。素晴らしい記事です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はHaskellアプリケーションをデバックする際に、バックトレースのとても簡単な取得方法があったのでご紹介したいと思います。&lt;/p&gt;
&lt;p&gt;まとめると以下の2行です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
$ stack exec -- &amp;lt;exe_name&amp;gt; +RTS -xc&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;バックトレースの取得方法&#34;&gt;バックトレースの取得方法&lt;/h2&gt;
&lt;p&gt;まず、バックトレースを取得するために &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html&#34;&gt;GHC.Stack&lt;/a&gt; で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html#t:HasCallStack&#34;&gt;HasCallStack&lt;/a&gt; をクラス制約として追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記の例を雛形として、&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加するとどうなるのか確認していきましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Main.hs&lt;/code&gt; はこんな感じで &lt;strong&gt;f1&lt;/strong&gt; を呼び出します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しない場合は以下のような出力となります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f3&lt;/strong&gt; でエラーが発生したことはわかりますが、それ以外は何もわかりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-f2-f3-に-hascallstack-を追加した場合&#34;&gt;f1, f2, f3 に HasCallStack を追加した場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドしてみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと呼び出しの関係が &lt;code&gt;error&lt;/code&gt; -&amp;gt; &lt;code&gt;f3&lt;/code&gt; -&amp;gt; &lt;code&gt;f2&lt;/code&gt; -&amp;gt; &lt;code&gt;f1&lt;/code&gt; と表示されていますね！&lt;/p&gt;
&lt;h3 id=&#34;f2-f3-にのみ-hascallstack-を追加する&#34;&gt;f2, f3 にのみ HasCallStack を追加する&lt;/h3&gt;
&lt;p&gt;では、ここで &lt;code&gt;f1&lt;/code&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除くとどうなるか確認してみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f1&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いた影響により、先程出力されていた &lt;code&gt;f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt; が出なくなりました。&lt;/p&gt;
&lt;p&gt;しかし、依然として &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f3&lt;/strong&gt; のバックトレースは取得できています。そのため、本当に全てのバックトレースを取得したい場合は全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加しなけばなりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f3-にのみ-hascallstack-制約を追加する&#34;&gt;f1 と f3 にのみ HasCallStack 制約を追加する&lt;/h3&gt;
&lt;p&gt;次に中間の &lt;strong&gt;f2&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今度は &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f1&lt;/strong&gt; の両方の情報がが抜け落ちてしまいました。&lt;strong&gt;f2&lt;/strong&gt; で &lt;strong&gt;HasCallStack&lt;/strong&gt; の伝搬がストップしてしまったということです。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f2-のみに-hascallstack-を追加する&#34;&gt;f1 と f2 のみに HasCallStack を追加する&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予想通り &lt;strong&gt;f1&lt;/strong&gt;, &lt;strong&gt;f2&lt;/strong&gt;, &lt;strong&gt;f3&lt;/strong&gt; の全ての情報が途絶えましたね・・・。&lt;/p&gt;
&lt;h2 id=&#34;hascallstack-を省略したままバックトレースを取りたい&#34;&gt;HasCallStack を省略したままバックトレースを取りたい&lt;/h2&gt;
&lt;p&gt;先程の結果を見たとおり、正確な情報を取得するためには全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加する必要がありそうです。&lt;/p&gt;
&lt;p&gt;しかしながら、規模が大きくなってくるとそんなの不可能ですよね。&lt;/p&gt;
&lt;p&gt;そんな時には &lt;code&gt;stack&lt;/code&gt; の &lt;code&gt;--profile&lt;/code&gt; オプションと &lt;code&gt;+RTS -xc&lt;/code&gt; オプションを利用します。(&lt;code&gt;--profile&lt;/code&gt; オプションは &lt;strong&gt;ghc&lt;/strong&gt; のオプションを良い感じに追加してくれます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような素のコードに対しても、同様にバックトレースが取得できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
...
$ stack exec -- example +RTS -xc
*** Exception (reporting due to +RTS -xc): (THUNK_2_0), stack trace:
  Lib.f3,
  called from Lib.CAF:f3
  --&amp;gt; evaluated by: Lib.CAF:f2
  --&amp;gt; evaluated by: Lib.CAF:f1
  --&amp;gt; evaluated by: Main.CAF:main
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
CallStack (from -prof):
  Lib.f3 (src/Lib.hs:10:1-15)
  Lib.CAF:f3 (src/Lib.hs:10:1-2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なんか沢山表示されますが、&lt;code&gt;reporting due to +RTS -xc&lt;/code&gt; の部分を見ると、しっかりとバックトレースが取得できています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を使うとバックトレースが取得できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build --profile&lt;/code&gt; でビルドする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack exec -- &amp;lt;exe&amp;gt; +RTS -xc&lt;/code&gt; を使えば、明示的に &lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しなくても、バックトレースが取得できる&lt;/li&gt;
&lt;li&gt;アプリケーションのコードに対して有効&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program/#HasCallStack&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md#debugging&#34;&gt;Debugging – stack document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-flag--xc&#34;&gt;-xc option – GHC Users Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html</id><title type="text">stack-1.11 から location に extra-dep を指定できなくなります。</title><updated>2018-08-31T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;まだまだ先の話ですが、&lt;code&gt;extra-dep&lt;/code&gt; の書き方が &lt;strong&gt;Legacy syntax&lt;/strong&gt; になりました。&lt;code&gt;stack-1.11&lt;/code&gt; からはビルドできなくなります。&lt;/p&gt;
&lt;p&gt;以下の設定例は&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/yaml_configuration.md#packages&#34;&gt;公式ドキュメント&lt;/a&gt;の例を少し変更したものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;subdirs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正方法は、設定ファイルの &lt;code&gt;packages&lt;/code&gt; に &lt;code&gt;extra-dep: true&lt;/code&gt; と指定している部分を、以下のように &lt;code&gt;extra-deps&lt;/code&gt; へ追加するだけです。また、 &lt;code&gt;subdirs&lt;/code&gt; を指定している場合は単純に分割して指定します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp/haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;extra-deps&lt;/code&gt; の構文は従来の &lt;code&gt;stack&lt;/code&gt; でも使えるので、今から対応しておいても問題ないと思います。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;!--more--&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html</id><title type="text">RecordWildCards と Reader モナド</title><updated>2018-08-26T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Twitter&lt;/code&gt; で &lt;code&gt;RecordWildCards&lt;/code&gt; の話が流れて来たので &lt;code&gt;Reader&lt;/code&gt; モナドと組み合わせた例を1つご紹介します。&lt;/p&gt;
&lt;p&gt;この書き方は &lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さんが使っていてカッコイイ書き方だなぁと思った記憶があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;func &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- personName, personAge という名前でそのまま値を利用できる&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RecordWildCards&lt;/code&gt; に関しては既に色んな方が記事にしてくれているので、そちらをご参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rf0444.hatenablog.jp/entry/20120617/1339910411&#34;&gt;Haskellの言語拡張たち 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2016/12/18/181540&#34;&gt;波打たせるものの正体(エクステンシブル・タングル)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-wildcards&#34;&gt;GHC user guide 10.5.5. Record wildcards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;p&gt;あまり良い例が思いつかなかったのですが、 &lt;code&gt;Env&lt;/code&gt; に必要な情報を持たせておけば任意のタイミングで利用できて便利です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.IO.Class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.Trans.Reader&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.IORef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Time.LocalTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; envCounter  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envLogPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envUserName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;  counter &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;        { envCounter  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;        , envLogPath  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;./output.log&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;        , envUserName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;wado&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;  runReaderT (access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access) env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;  n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;counter = &amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; n]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;access ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;access &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;  modifyIORef envCounter (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-35&#34; title=&#34;35&#34;&gt;  now &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getZonedTime&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-36&#34; title=&#34;36&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;appendFile&lt;/span&gt; (toFilePath envLogPath)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [envUserName, &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;access&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot; (&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; now, &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs
counter = 3

$ cat ./output.log
wado: access (2018-08-26 14:04:07.132813451 JST)
wado: access (2018-08-26 14:04:07.133330363 JST)
wado: access (2018-08-26 14:04:07.133389916 JST)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;missing-fields-警告&#34;&gt;missing-fields 警告&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;    personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のようにフィールドが全て初期化されていないコードはコンパイル時に &lt;code&gt;missing-fields&lt;/code&gt; 警告が出ます。&lt;/p&gt;
&lt;p&gt;この警告を無視すると実行時エラーになる可能性があります。無視せずにしっかり修正しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;warning&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Wmissing&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;fields]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;’ &lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; initialised&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; personAge&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘f’&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;          f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;                personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dv&#34;&gt;46&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、通常のレコード構文でもフィールドが部分的にしか初期化されていない場合は、同様の警告がでます。(&lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さん、ご指摘ありがとうございます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/5334&#34;&gt;record wildcards: field not initialised reported as type error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RecordWildCards 言語拡張は現実世界ではとても便利 (レコードのフィールドがかなり沢山あったりするので)&lt;/li&gt;
&lt;li&gt;Reader とかと組み合わせるとオシャレ&lt;/li&gt;
&lt;li&gt;GHC の &lt;code&gt;missing-fields&lt;/code&gt; 警告は絶対に無視しない (実行時エラーが発生する可能性がある)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html</id><title type="text">path ＆ path-io パッケージ</title><updated>2018-08-21T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell でファイルやディレクトリを扱うプログラムを書く時によく使うパッケージとして &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/filepath-1.4.2&#34;&gt;filepath&lt;/a&gt; パッケージや &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/directory-1.3.1.5&#34;&gt;directory&lt;/a&gt; パッケージがあります。(Haskell入門の「4.4 ファイルシステム」に &lt;strong&gt;directory&lt;/strong&gt; パッケージの話が少し載っています。)&lt;/p&gt;
&lt;p&gt;これらのパッケージは結局のところただの文字列操作なので、バグを出さないためにはパッケージ利用者がかなり注意深く使わなければなりません。&lt;/p&gt;
&lt;p&gt;例えば、以下のようなパスは型レベルでは同じ文字列 (&lt;strong&gt;FilePath&lt;/strong&gt;) ですが&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathRel ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;pathRel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathAbs ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;pathAbs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;user&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ファイルへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;pathFile &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;png&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ディレクトリへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathDir ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;pathDir &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、&lt;strong&gt;FilePath&lt;/strong&gt; 型では&lt;strong&gt;相対パス&lt;/strong&gt;なのか&lt;strong&gt;絶対パス&lt;/strong&gt;なのか型レベルで判断する方法が無かったり、そもそもパスが&lt;strong&gt;ファイル&lt;/strong&gt;なのか&lt;strong&gt;ディレクトリ&lt;/strong&gt;なのかすらわからなかったりします。&lt;/p&gt;
&lt;p&gt;今回紹介するのは、型レベルでこれらをちゃんと分類できるようにしている &lt;a href=&#34;https://github.com/commercialhaskell/path&#34;&gt;path&lt;/a&gt; と &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;型レベルで &lt;strong&gt;相対パス&lt;/strong&gt; or &lt;strong&gt;絶対パス&lt;/strong&gt; と &lt;strong&gt;ファイル&lt;/strong&gt; or &lt;strong&gt;ディレクトリ&lt;/strong&gt; を表現するため、不正な操作はコンパイル時にチェックできるようになります。&lt;/p&gt;
&lt;p&gt;また、&lt;strong&gt;stack&lt;/strong&gt; の内部でも利用していたので、実用しても大丈夫だと思います。&lt;/p&gt;
&lt;p&gt;パッケージのバージョンは以下のとおりです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path-0.6.1&lt;/li&gt;
&lt;li&gt;path-io-1.3.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだまだ更新が活発なパッケージなので、path-0.7 では破壊的変更を含む更新があるようです。(&lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt;)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;path-パッケージ&#34;&gt;path パッケージ&lt;/h2&gt;
&lt;p&gt;ドキュメントが充実しているので &lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/README.md&#34;&gt;Readme&lt;/a&gt; を読めば使い方はすぐにわかると思います。&lt;/p&gt;
&lt;h3 id=&#34;データ型&#34;&gt;データ型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; の型は &lt;code&gt;FilePath&lt;/code&gt; を幽霊型 (Phantom type) を使ってラップしているだけです。(幽霊型については &lt;a href=&#34;https://qiita.com/nobkz/items/5926257a375a4a181dde&#34;&gt;ElmでPhantom Type (幽霊型)入門&lt;/a&gt; や &lt;a href=&#34;https://qiita.com/HirotoShioi/items/3444e215070144b8ca0f&#34;&gt;で、出たー！幽霊型だー！(Phantom Type)&lt;/a&gt; などが日本語のわかりやすい解説だと思います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで2つの型変数の意味は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - 相対パス or 絶対パス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; - ファイル or ディレクトリ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型変数 &lt;code&gt;b&lt;/code&gt; は実際には以下の型のどちらかを取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同様に型変数 &lt;code&gt;t&lt;/code&gt; は以下の型を取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的なパスの型は以下の4種類のどれかになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの相対パス&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型を見るだけでどんなパスなのか一目瞭然なので、めっちゃ良いですね。&lt;/p&gt;
&lt;h3 id=&#34;値の作り方&#34;&gt;値の作り方&lt;/h3&gt;
&lt;p&gt;型については説明したので、次は実際に &lt;code&gt;Path&lt;/code&gt; 型の値を作っていきましょう！&lt;/p&gt;
&lt;h4 id=&#34;パースする方法&#34;&gt;パースする方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型は4種類あるので、パーズする関数も4種類あります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MonadThrow m&lt;/code&gt; がついていますが、この &lt;code&gt;m&lt;/code&gt; は &lt;code&gt;IO&lt;/code&gt; だと思えば以下の型と同じですし&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; であれば、以下の型と同じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;難しいことはあまり気にせず、(&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/exceptions-0.10.0/Control-Monad-Catch.html#t:MonadThrow&#34;&gt;MonadThrow&lt;/a&gt; 型クラスのインスタンスになっている) 色んなモナドで使えるんだなと思えば良いと思います。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;ghci&lt;/code&gt; を使って動作を確認してみましょう！&lt;/p&gt;
&lt;pre class=&#34;shel&#34;&gt;&lt;code&gt;$ stack repl --package path
&amp;gt; import Path

# 型のチェック
&amp;gt; :t parseAbsDir &amp;quot;/&amp;quot;
parseAbsDir &amp;quot;/&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)
&amp;gt; :t parseAbsDir &amp;quot;./&amp;quot;
parseAbsDir &amp;quot;./&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)

# IO モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot;
&amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./&amp;quot;

# Maybe モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot; :: Maybe (Path Abs Dir)
Just &amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot; :: Maybe (Path Abs Dir)
Nothing

# 以下のような &amp;quot;../&amp;quot; を含むパスはパーズできない
&amp;gt; parseAbsDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;
&amp;gt; parseRelDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで文字列から &lt;code&gt;Path&lt;/code&gt; 型に変換する方法がわかりましたね！結構簡単です。&lt;/p&gt;
&lt;h4 id=&#34;template-haskell-quasiquotes&#34;&gt;Template Haskell &amp;amp; QuasiQuotes&lt;/h4&gt;
&lt;p&gt;コンパイル時にすでにファイルパスが決まっている時はテンプレートHaskellや準クォートを使うこともできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsDir &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsFile &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;[absdir|/home/chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;[reldir|chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;[absfile|/home/chris/x.txt|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;[relfile|chris/x.txt|]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで不正なパスはコンパイル時エラーとなるため、かなり安全ですね。&lt;/p&gt;
&lt;h3 id=&#34;path-から-filepath-への変換&#34;&gt;Path から FilePath への変換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型の値を &lt;code&gt;FilePath&lt;/code&gt; に変換するためには &lt;code&gt;toFilePath&lt;/code&gt; 関数を利用します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a////b//////&amp;quot;
&amp;quot;a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じで期待している文字列に変換されているか確かめることができます。&lt;/p&gt;
&lt;h3 id=&#34;パスの等価性&#34;&gt;パスの等価性&lt;/h3&gt;
&lt;p&gt;2つの &lt;code&gt;Path&lt;/code&gt; の等しさは単純に文字列の等価性として定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; x) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にいくつか試してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
True

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/c&amp;quot;
False

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
True&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パスの操作&#34;&gt;パスの操作&lt;/h3&gt;
&lt;p&gt;関数と実行結果のみを紹介していきます。&lt;/p&gt;
&lt;h4 id=&#34;つのパスの結合&#34;&gt;2つのパスの結合&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;/&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数は &lt;strong&gt;Dir&lt;/strong&gt; で第二引数は &lt;strong&gt;Rel&lt;/strong&gt; が指定されている点に注意してください。そのため、第一引数にファイルへのパスを与えようとするとコンパイルエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelFile &amp;quot;a.png&amp;quot;
&amp;quot;a/b/c/a.png&amp;quot;

&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;d&amp;quot;
&amp;quot;a/b/c/d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスの先頭部分からディレクトリパスを除去&#34;&gt;パスの先頭部分から、ディレクトリパスを除去&lt;/h4&gt;
&lt;p&gt;Data.List の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/base-4.11.1.0/Data-List.html#v:stripPrefix&#34;&gt;stripPrefix&lt;/a&gt; 関数と同じように利用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;stripProperPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/usr/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
&amp;quot;stack&amp;quot;

&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
*** Exception: NotAProperPrefix &amp;quot;/local/bin/&amp;quot; &amp;quot;/usr/local/bin/stack&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスから親ディレクトリパスを取得&#34;&gt;パスから親ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;ab&amp;quot;
&amp;quot;./&amp;quot;

&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;a/b/c/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ディレクトリパスから相対ディレクトリパスを取得&#34;&gt;ディレクトリパスから、相対ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dirname ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; dirname &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;

&amp;gt; dirname &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから相対ファイルパスを取得&#34;&gt;ファイルパスから相対ファイルパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;filename ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; filename &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;

&amp;gt; filename &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから拡張子を取得&#34;&gt;ファイルパスから拡張子を取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; fileExtension &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;

&amp;gt; fileExtension &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加&#34;&gt;ファイルパスに拡張子を追加&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ addFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;

&amp;gt; join $ (&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;既に拡張子があっても、追加する点に注意。&lt;/p&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加-既に拡張子がある場合は置き換える&#34;&gt;ファイルパスに拡張子を追加 (既に拡張子がある場合は置き換える)&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;setFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (-&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(-&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ setFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ (-&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;path-io&#34;&gt;path-io&lt;/h2&gt;
&lt;p&gt;ここまでで &lt;code&gt;Path&lt;/code&gt; 型の定義や値の作り方、操作する関数などを見てきました。&lt;/p&gt;
&lt;p&gt;しかしながら、これだけでは実際にファイルを作ったり削除したりすることはできません。文字列に変換して &lt;code&gt;directory&lt;/code&gt; パッケージを利用することもできますが、やはり &lt;code&gt;Path&lt;/code&gt; 型のまま使いたいですよね。&lt;/p&gt;
&lt;p&gt;そのためには &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージを利用すると良いです。内部的には &lt;code&gt;directory&lt;/code&gt; パッケージを再利用していますが、&lt;code&gt;Path&lt;/code&gt; 型で使えるようにラップしてくれています。(また、便利な関数もいくつか追加されています)&lt;/p&gt;
&lt;h3 id=&#34;サンプルプログラム&#34;&gt;サンプルプログラム&lt;/h3&gt;
&lt;p&gt;例えばこんな感じで使えます。以下の例はコマンドライン引数から受け取った文字列に拡張子 &lt;code&gt;.hs&lt;/code&gt; を追加して適当な内容で保存し、最後にディレクトリを再帰的にコピーする例です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path.IO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt; (when)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-12&#34; title=&#34;12&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-13&#34; title=&#34;13&#34;&gt;  args &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getArgs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-15&#34; title=&#34;15&#34;&gt;  when (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; args &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; src  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./src&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-17&#34; title=&#34;17&#34;&gt;        dest &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./.backup&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- 安全にディレクトリを作成&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; ensureDir [src, dest]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-22&#34; title=&#34;22&#34;&gt;    rawName &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; parseRelFile &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-23&#34; title=&#34;23&#34;&gt;    fn &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (src &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; rawName) &lt;span class=&#34;fu&#34;&gt;-&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;writeFile&lt;/span&gt; (toFilePath fn) &lt;span class=&#34;st&#34;&gt;&amp;quot;main :: IO ()\nmain = undefined\n&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ディレクトリを再帰的にコピー&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-28&#34; title=&#34;28&#34;&gt;    copyDirRecur&amp;#39; src dest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs aaa

$ tree -a .
.
├── .backup
│   └── aaa.hs
├── Sample.hs
└── src
    └── aaa.hs

2 directories, 3 files

$ cat src/aaa.hs
main :: IO ()
main = undefined

$ cat .backup/aaa.hs
main :: IO ()
main = undefined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;動いているようです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filepath&lt;/code&gt; や &lt;code&gt;directory&lt;/code&gt; パッケージでは文字列の操作となってしまうため、コンパイル時に不正な利用方法をチェックできない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; や &lt;code&gt;path-io&lt;/code&gt; は幽霊型を使って不正な利用をコンパイル時にチェックする&lt;/li&gt;
&lt;li&gt;実際に &lt;code&gt;stack&lt;/code&gt; でも利用されているパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html</id><title type="text">deriveJsonNoPrefixをリリースしました</title><updated>2018-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;前回の更新からちょっと時間が空いてしまいました 💦&lt;br /&gt;
小ネタです。掲題の通り&lt;a href=&#34;http://hackage.haskell.org/package/deriveJsonNoPrefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;というパッケージをリリースしました。&lt;br /&gt;
地味に有用だと思うので、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/master/README.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をやや意訳気味に翻訳して記事にします。&lt;br /&gt;
十分に単純なので、仕様が変わることもまさかないでしょうし。&lt;/p&gt;
&lt;p&gt;以下、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/6114e0fc55cf5b57a771871e53971a51592f618b/README.md&#34;&gt;こちらのコミットの時点の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;の翻訳です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;同じ問題を解決するほかのライブラリー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;プレフィックスに優しい&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを定義する&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロを提供します。&lt;/p&gt;
&lt;h2 id=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;例&lt;/h2&gt;
&lt;p&gt;こんな感じの&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;を作りたいとしましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode json&#34;&gt;&lt;code class=&#34;sourceCode json&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ID STRING&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;max&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.789&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;min&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.123&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きっと&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ToJSON&lt;/span&gt;&lt;/a&gt;（おそらくそれに加えて&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:FromJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;FromJSON&lt;/span&gt;&lt;/a&gt;も）のインスタンスを自動的に定義するための、次のようなレコード型を定義したくなるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.TH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; id ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; max ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; min ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveToJSON defaultOptions &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、こんなレコード型は定義すべきではありません。&lt;br /&gt;
&lt;code&gt;id&lt;/code&gt;も&lt;code&gt;max&lt;/code&gt;も&lt;code&gt;min&lt;/code&gt;も、&lt;code&gt;Prelude&lt;/code&gt;に定義済みなのですから！&lt;/p&gt;
&lt;p&gt;この問題を回避するために、レコードラベルに型の名前をプレフィックスとして加える、ということをわれわれはよくやります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; someRecordId ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMax ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして、&lt;code&gt;deriveToJSON&lt;/code&gt;にデフォルトと異なるオプションを渡して実行します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;st&#34;&gt;&amp;quot;SomeRecord&amp;quot;&lt;/span&gt;) } &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fieldLabelModifier&lt;/code&gt;オプションは文字通り、対象のレコードを&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換するとき、あるいは&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;から対象のレコードの値に変換する時、レコードのラベルを変換する関数を設定するために使います。&lt;br /&gt;
👆の場合、プレフィックスである&lt;code&gt;SomeRecord&lt;/code&gt;の文字数分レコードラベルから&lt;code&gt;drop&lt;/code&gt;して、先頭の文字&lt;small&gt;（&lt;code&gt;someRecordId&lt;/code&gt;で言えば&lt;code&gt;Id&lt;/code&gt;の&lt;code&gt;I&lt;/code&gt;に相当します）&lt;/small&gt;を小文字に変換しているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;そう、これが&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;がやっていることとほぼ同等のことです。&lt;br /&gt;
&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;は、実質次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;deriveToJsonNoTypeNamePrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Q&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;deriveToJsonNoTypeNamePrefix deriver name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;  deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; dropPrefix name } name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dropPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;dropPrefix name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nameBase name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果、これからは&lt;code&gt;fieldLabelModifier&lt;/code&gt;をもう自分で定義する必要がありません！🙌&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.DeriveNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveJsonNoTypeNamePrefix &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆 の&lt;code&gt;deriveJsonNoTypeNamePrefix&lt;/code&gt; は &lt;a href=&#34;https://hackage.haskell.org/package/aeson/docs/Data-Aeson-TH.html#v:deriveJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJSON&lt;/span&gt;&lt;/a&gt;と同様に、&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンス、両方を生成します。&lt;br /&gt;
もちろん、&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを生成するときのオプションとしても、プレフィックスを削除するための&lt;code&gt;fieldLabelModifier&lt;/code&gt;を渡してくれます！&lt;/p&gt;
&lt;h2 id=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;同じ問題を解決するほかのライブラリー&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;など、&lt;code&gt;ToJSON&lt;/code&gt;・&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスが定義された&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので、そうした&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリーが学習コストや依存関係などの事情で「重たい」と感じたときにこのパッケージを使ってください。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/windows-gotchas-en.html</id><title type="text">Errors and the workarounds frequently encountered when dealing with Haskell on Windows</title><updated>2018-05-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/windows-gotchas-en.html"/><summary type="html">
&lt;article lang=&#34;en&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;This is the English version of &lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法&lt;/a&gt;.&lt;br /&gt;
The original article is the 4th article of &lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell4&#34;&gt;Haskell (その4) Advent Calendar 2017 (Japanese)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I’m going to tell is summarized as &lt;a href=&#34;https://twitter.com/igrep/status/938056578934042626&#34;&gt;just one tweet (originally in Japanese)&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I’ve learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chcp65001 if ‘Invalid character’&lt;/li&gt;
&lt;li&gt;rebuild if ‘Permission Denied’&lt;/li&gt;
&lt;li&gt;Don’t mix Japanese characters in file paths.&lt;/li&gt;
&lt;li&gt;Some libraries in C are available, and others are not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps they’re helpful in other languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me add more details.&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;chcp 65001 if “Invalid character”&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;Workaround&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;If you encounter as a user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;Rebuild if “Permission Denied”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;Try hard to build libraries in C…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;chcp 65001 if “Invalid character”&lt;/h1&gt;
&lt;p&gt;You would have encountered this frequently, especially if you don’t know how to avoid/fix this.&lt;br /&gt;
Oh, it’s caused again by building with hakyll!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; stack exec -- site rebuild
...
  [ERROR] preprocessed-site\posts/2017/01-first.md: hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The object called &lt;a href=&#34;https://www.stackage.org/haddock/lts-10.0/base-4.10.1.0/System-IO.html#t:Handle&#34;&gt;&lt;code&gt;Handle&lt;/code&gt;&lt;/a&gt;, used by GHC to read and write a file, knows its character encoding.&lt;/p&gt;
&lt;p&gt;This resembles Ruby’s &lt;a href=&#34;https://ruby-doc.org/core-2.5.0/IO.html&#34;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; and Perl’s file handler.&lt;br /&gt;
Both of them represent the “gateway” of data, and assigning character encoding to them enables us to handle the only, consistently encoded strings by converting the incoming data.&lt;br /&gt;
In Haskell’s type &lt;code&gt;Char&lt;/code&gt;, the only default encoding is UTF-32 (is this the right name in this case?).&lt;/p&gt;
&lt;p&gt;The character encoding assigned to a &lt;code&gt;Handle&lt;/code&gt; by default depends on the locale settings of the OS: in Japanese Windows, Windows-31J (a.k.a CP932).&lt;br /&gt;
But it’s now soon becoming 2018 (when writing the original article). Most files you create should be in UTF-8 unless you write programs in notepad.exe&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
It doesn’t work to read a UTF-8 file as a Windows-31J file because they’re very different encoding system.&lt;br /&gt;
The &lt;code&gt;invalid byte sequence&lt;/code&gt; error, shown at the head of this section, is caused by that inconsistency.&lt;br /&gt;
Remember this kind of errors are often caused when reading or writing stdout/stdin, as well as plain files.&lt;/p&gt;
&lt;h2 id=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Workaround&lt;/h2&gt;
&lt;h3 id=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If you encounter as a user&lt;/h3&gt;
&lt;p&gt;In many cases you can avoid these kind of errors by running the below command in advance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 65001
&amp;gt; stack exec -- site rebuild
... Should work!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command temporarily changes the character encoding in the current Command Prompt session.&lt;br /&gt;
The number &lt;code&gt;65001&lt;/code&gt; seems to stand for UTF-8.&lt;br /&gt;
To roll it back, run &lt;code&gt;chcp 932&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 932&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that the “932” of “CP932” is the same “932” entered here!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;chcp&lt;/code&gt; command is available in MSYS2’s bash (Surprises me a little. Wondering how it works…😕).&lt;br /&gt;
But you should know that &lt;code&gt;chcp&lt;/code&gt; exists at &lt;code&gt;C:\Windows\System32\&lt;/code&gt;, which MSYS2 users usually don’t want to include in the &lt;code&gt;PATH&lt;/code&gt;.&lt;br /&gt;
The directory contains many incompatible commands whose names conflict with the tools loved by Unix people (e.g. &lt;code&gt;find.exe&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;So I’ve dropped &lt;code&gt;C:\Windows\System32\&lt;/code&gt; from &lt;code&gt;PATH&lt;/code&gt; when using MSYS2.&lt;br /&gt;
If you’ve done like me, run by full path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/c/Windows/System32/chcp.com 932&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/h3&gt;
&lt;p&gt;Unfortunately, the error can often persist even after running &lt;code&gt;chcp 65001&lt;/code&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
According to my guess, the &lt;code&gt;chcp 65001&lt;/code&gt; command doesn’t affect the grandchild processes of the Command Prompt (or bash etc.) on which the &lt;code&gt;chcp&lt;/code&gt; is run (i.e. the child processes of the command you enter).&lt;/p&gt;
&lt;p&gt;If the error still happens you can either report to the developer, or fix it yourself!&lt;br /&gt;
When reporting; asking the developer to run after doing &lt;code&gt;chcp 932&lt;/code&gt; could help him/her reproduce the bug (Sorry, I’ve never tried it).&lt;br /&gt;
When fixing by yourself, perhaps the best and most certain way would be to switch the character encoding of the &lt;code&gt;Handle&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;This problem is caused by the inconsistency between the &lt;code&gt;Handle&lt;/code&gt;&#39;s character encoding and the encoding of the bytes that are actually transferred. So switching into the proper encoding should fix it.&lt;br /&gt;
If the error happens when reading/writing a common UTF-8 file via the &lt;code&gt;Handle&lt;/code&gt;, writing like below can avoid it:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding&lt;/span&gt; (utf8)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;hSetEncoding handle utf8&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a bonus, I’ll show you an example of how &lt;a href=&#34;https://github.com/haskell/haddock/pull/566&#34;&gt;I myself addressed a problem caused by the standard output (or standard error output), and fixed a bug in haddock&lt;/a&gt;. In short, it can at least suppress the error to paste the code below before your program uses the &lt;code&gt;Handle&lt;/code&gt; (Copied from &lt;a href=&#34;https://github.com/haskell/haddock/pull/566/commits/855118ee45e323fd9b2ee32103c7ba3eb1fbe4f2&#34;&gt;this commit&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding, stdout)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.CodePage&lt;/span&gt; (mkLocaleEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.Failure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CodingFailureMode&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; hSetEncoding stdout &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mkLocaleEncoding &lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPP macros to &lt;code&gt;import&lt;/code&gt; modules only available on Windows makes this code hard to read, so let’s cut out the verbose part:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hSetEncoding stdout $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’re the details:&lt;br /&gt;
First of all, &lt;code&gt;hSetEncoding&lt;/code&gt; is the function to change the &lt;code&gt;Handle&lt;/code&gt;‘s character encoding, as I referred before.&lt;br /&gt;
Then &lt;code&gt;stdout&lt;/code&gt; is the &lt;code&gt;Handle&lt;/code&gt; for the standard output as its name.&lt;br /&gt;
The last function call &lt;code&gt;mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; returns a character encoding object for the current Windows’ character encoding (i.e. &lt;code&gt;chcp&lt;/code&gt;ed character encoding), configured as “Even if the &lt;code&gt;Handle&lt;/code&gt; detects any characters which can’t be converted into/from a Unicode character, don’t raise an error, convert it into some likable character instead.”.&lt;/p&gt;
&lt;p&gt;As the result of the &lt;code&gt;hSetEncoding&lt;/code&gt; above, and the current character encoding is Windows-31J, the character used in the compilation error of GHC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;↓This character
• No instance for (Transformation Nagisa CardCommune_Mepple)
↑&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is converted into&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? No instance for (Transformation Nagisa CardCommune_Mepple)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the question mark. Yeah, this is the “?” I bet most users of GHC on Japanese Windows have seen at least once 😅&lt;br /&gt;
This makes me guess GHC executes &lt;code&gt;hSetEncoding stderr $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; by default before printing out the compilation error.&lt;br /&gt;
Anyway, it’s good that the program doesn’t abort due to the error!&lt;/p&gt;
&lt;p&gt;As the last note of this section: Read &lt;a href=&#34;https://hackage.haskell.org/package/base-4.10.1.0/docs/GHC-IO-Encoding.html&#34;&gt;the document of GHC.IO.Encoding&lt;/a&gt; for the details of how GHC handles various character encodings.&lt;/p&gt;
&lt;h1 id=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Rebuild if “Permission Denied”&lt;/h1&gt;
&lt;p&gt;I’ve made the first section too long for “Quick-and-dirty checklist”, but I’ll tell you in short from this section.&lt;br /&gt;
We often encounter some errors like “Permission Denied”, “Directory not empty” and similar ones when running &lt;code&gt;stack build&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt;, &lt;code&gt;elm-make&lt;/code&gt;, and any other commands written in Haskell.&lt;br /&gt;
To tell the truth, I’m completely not sure of the cause, but those errors disappear by running the same command several times.&lt;br /&gt;
The key is to repeat many times. Never give up only by once or twice 😅&lt;br /&gt;
Turning off your antivirus software’s scanning of the problematic directory, Dropbox’s synchronisation, etc. might also fix such errors.&lt;/p&gt;
&lt;h1 id=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Try hard to build libraries in C…&lt;/h1&gt;
&lt;p&gt;On Windows, it frequently troubles us to install libraries which depend on libraries written in C (registered as &lt;code&gt;lib***&lt;/code&gt; in your OS’s package manager).&lt;br /&gt;
But this is not the case only for Haskell.&lt;/p&gt;
&lt;p&gt;The way to fix depends on the case, so let me give you some examples as external links (Sorry, all pages are written in Japanese!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDBC-sqlite3:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/d947ab871eb5b20b57e4&#34;&gt;Windows版stackでもHDBC-sqlite3をビルドする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2017/01/29/110100&#34;&gt;MSYS2でHDBC-sqlite3をコンパイル - 北海道苫小牧市出身の初老PGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://teratail.com/questions/102462&#34;&gt;Haskell - Haskellにてstackでiconvパッケージを利用する方法【Windows環境】(102462)｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s all!&lt;br /&gt;
Then, Happy Hacking in Haskell on Windows 10!! I don’t know WSL!🏁🏁🏁&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Translator’s note: In Japanese locale, notepad.exe saves the file in Windows-31J. This will be changed (into UTF-8) in the future release of Windows 10.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;By the way, when I once tried to build the compiler of &lt;a href=&#34;http://eta-lang.org/&#34;&gt;Eta&lt;/a&gt;, (as far as I remember) &lt;code&gt;chcp 65001&lt;/code&gt; didn’t fix the problem, but &lt;code&gt;chcp 20127&lt;/code&gt; did.&lt;br /&gt;
As &lt;code&gt;chcp 20127&lt;/code&gt; switches into US-ASCII, I suspect the local environment of the developer of Eta is US-ASCII…&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html</id><title type="text">GHC拡張ノック(Part 1)</title><updated>2018-05-15T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;では各処理系で言語拡張を提供し，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものを利用することで，言語拡張を利用することが許容されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準的な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も多くの言語拡張を提供しており，その拡張は&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/strong&gt;と呼ばれています．&lt;/p&gt;
&lt;p&gt;今回は，この&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と，個人的に良く使う拡張についての簡単な紹介を，全&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;回に分けて行いたいと思います．対象としては，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングをしたことがあり，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の構文や動作方法が分かっている人を考えています．また，この記事はあくまで簡単な紹介に留めるもので，付随する留意点や詳細な機能説明は，大事な箇所は漏らさないよう注意するつもりですが，全てを網羅するつもりはありませんのでその点は注意してください．もし，実際に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;便利な構文の導入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;新たなリテラル表記を可能にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;空のデータ型に対するより強力なサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;新たな基本構文を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;正格化に対するサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;パターンマッチをより柔軟に扱えるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;レコードに対するサポートを強化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;型演算子を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;型クラスを拡張する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;型ワイルドカードをより柔軟に扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;新たな表記法の導入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;次回予告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/h1&gt;
&lt;h2 id=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，言語拡張を取り込む方法が標準で提供されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，コンパイラプラグマというものが策定されており，これを通してコンパイラに追加情報を提供することができます．コンパイラプラグマは&lt;code&gt;{-#&lt;/code&gt;と&lt;code&gt;#-}&lt;/code&gt;で囲まれ，字句的にはコメントとして扱われます．標準では，インラインプラグマや特殊化プラグマの他に，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものが策定されており，このプラグマを通して言語拡張を指定することができます．&lt;/p&gt;
&lt;p&gt;例えば，実装によって&lt;code&gt;CPP&lt;/code&gt;と&lt;code&gt;ScopedTypeVariables&lt;/code&gt;という名前の言語拡張が提供されており，それを使いたい場合，次のような文をモジュールの開始前に指定することで，言語拡張が有効になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP, ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを複数指定することもできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP                 #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この機能を通して，多くの&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;処理系では言語拡張を提供しています．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も，多数の拡張を提供しており，この拡張が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張と呼ばれるものです．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は，バージョン&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;現在，以下の数が提供されています&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; --supported-extensions &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;wc&lt;/span&gt; -l&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;235&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--supported-extensions&lt;/code&gt;オプションは，現在の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で使用できる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を表示してくれるオプションです．ただ，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は全てが独立した拡張ではなく，互いに依存しあった拡張が多く存在します．また，先頭に&lt;code&gt;No&lt;/code&gt;がついている拡張は，その&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を無効にするような拡張になっています &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;（例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張は&lt;code&gt;ImplicitPrelude&lt;/code&gt;拡張を無効にする拡張です&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;．&lt;/p&gt;
&lt;p&gt;また，デフォルトで有効になっている拡張などもあります．例えば，&lt;code&gt;ImplicitPrelude&lt;/code&gt;という拡張はデフォルトで有効になります．現在デフォルトの&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;をベースにしたモードで&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2&lt;/span&gt;を使用する場合，以下の拡張が&lt;a href=&#34;https://github.com/ghc/ghc/blob/ghc-8.4.2-release/compiler/main/DynFlags.hs#L2022&#34;&gt;デフォルトで有効になります&lt;/a&gt; &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/NondecreasingIndentation&#34;&gt;&lt;code&gt;NondecreasingIndentation&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;のレイアウトルールを変更する拡張です．この拡張を有効にすると，ネストされた&lt;code&gt;do&lt;/code&gt;式の場合，インデントをしなくていいようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#rebindable-syntax-and-the-implicit-prelude-import&#34;&gt;&lt;code&gt;ImplicitPrelude&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 暗黙的に&lt;code&gt;Prelude&lt;/code&gt;モジュールがインポートされるようになる拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#switching-off-the-dreaded-monomorphism-restriction&#34;&gt;&lt;code&gt;MonomorphismRestriction&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-930004.5.5&#34;&gt;単相性制限&lt;/a&gt;を課すようにする拡張です．この制限により，関数束縛でなく型注釈もない束縛変数の型は，デフォルティングルールによって単相化されます．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#traditional-record-syntax&#34;&gt;&lt;code&gt;TraditionalRecordSyntax&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; レコード構文を有効にする拡張です．この拡張では，名前付きのフィールドを持つデータ型を定義し，それを使用することが可能になります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyDataDecls&#34;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; コンストラクタを持たないデータ型の定義を許容する拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html#extension-ForeignFunctionInterface&#34;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: FFI&lt;/span&gt;が使えるようになる拡張です．この拡張により，&lt;code&gt;foreign import&lt;/code&gt;構文を使用することで，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;の関数を読み込むことができるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-guards&#34;&gt;&lt;code&gt;PatternGuards&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;case&lt;/code&gt;式において，通常のパターンに加えて，&lt;code&gt;&amp;lt;-&lt;/code&gt;を使用してガードの中でさらにマッチした条件下でパターンマッチができるようになる拡張です．例えば，&lt;code&gt;case (x, y) of { (True, y) | False &amp;lt;- y -&amp;gt; True; _ -&amp;gt; False }&lt;/code&gt;というような式が書けるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/DoAndIfThenElse&#34;&gt;&lt;code&gt;DoAndIfThenElse&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;if&lt;/code&gt;式の構文を，&lt;code&gt;then&lt;/code&gt;と&lt;code&gt;else&lt;/code&gt;の前に&lt;code&gt;;&lt;/code&gt;を許容するよう変更する拡張です．これにより，&lt;code&gt;do&lt;/code&gt;式において&lt;code&gt;then&lt;/code&gt;や&lt;code&gt;else&lt;/code&gt;をインデントする必要がなくなります．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;歴史的経緯で生まれ，互換性のために残されているものの，現状使用が推奨されていない拡張もあります．他に実験的な拡張やかなり大胆な拡張も存在するため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する方法は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用する他に，幾つかあります．まず，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;にオプションを渡して有効にする方法です．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で&lt;code&gt;Main.hs&lt;/code&gt;をコンパイルしたい場合，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; -XNoImplicitPrelude -XStrict --make Main.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では&lt;code&gt;-X&lt;/code&gt;の後に拡張名を続けることで，言語拡張を有効にしてコンパイルすることができます．通常は，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用するのが良いですが，何らかの事情で&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用できない場合や，デフォルトで有効にしたい言語拡張がある場合などに便利でしょう．特に&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で言語拡張を有効にしたくなった場合，このオプションを&lt;code&gt;set&lt;/code&gt;コマンドで指定すると良いでしょう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoImplicitPrelude&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を有効にする方法として，&lt;code&gt;Cabal&lt;/code&gt;の機能を活用する方法があります．&lt;code&gt;cabal&lt;/code&gt;ファイルのビルド情報欄には，&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-default-extensions&#34;&gt;&lt;code&gt;default-extensions&lt;/code&gt;というフィールド&lt;/a&gt;を指定することができ，そこにデフォルトで有効にしたい言語拡張のリストを書くことで，その拡張を有効にした状態で&lt;code&gt;Cabal&lt;/code&gt;がビルドを行ってくれます．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張をデフォルトで有効にしてビルドしたい場合，次のように書きます．&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           TestPackage
version:        0.0
synopsis:       Small package with a program
author:         Angela Author
license:        BSD3
build-type:     Simple
cabal-version:  &amp;gt;= 1.2

executable program1
  build-depends:      base
  main-is:            Main.hs
  default-extensions: NoImplicitPrelude, Strict&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h1&gt;
&lt;p&gt;以下では，個人的にデフォルトで有効化して使っている拡張を幾つか紹介します．なお，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;モードで使用することを前提にしています．&lt;/p&gt;
&lt;h2 id=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/h2&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoImplicitPrelude&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NoImplicitPrelude&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NoImplicitPrelude&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;が暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;されます．つまり，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムは暗黙に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いてあると，解釈されるということです．&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;には，&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;IO&lt;/code&gt;といった基本的なデータ型や，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Functor&lt;/code&gt;といった基本的な型クラス，&lt;code&gt;zip&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;putStrLn&lt;/code&gt;といった基本的な関数が含まれています．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;の暗黙的な&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムを簡潔に書く上では便利ですが，これを無効にしたい場合もあります．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;にあるデータ型や関数と同じ名前の，別モジュールの関数を使いたい時&lt;/li&gt;
&lt;li&gt;別の代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージを使う時&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった場合です．&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張はまさしくこのような場合に，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;を暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;しないようにする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張です．&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;番目の理由の場合，この拡張をデフォルトで入れずモジュール度に指定すればいいと思いますが，私的には&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目の理由でこの拡張を使うためデフォルトで有効にしています．代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージは幾つか存在しますが，主に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;classy-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/classy-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;protolude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/protolude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;universum:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/universum&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;basic-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/basic-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などがあります&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;．これらのパッケージを探すには&lt;a href=&#34;https://hackage.haskell.org/packages/#cat:Prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;カテゴリ&lt;/a&gt;を参照するといいでしょう．&lt;/p&gt;
&lt;p&gt;私の場合，&lt;span class=&#34;ascii&#34;&gt;classy-prelude&lt;/span&gt;を使っていますが，それも生で使用しているわけではなく，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作って使用しています．&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;は，最もよく使うものが提供されているモジュールですから，&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の変更の影響を最も強く受けます．それを外部パッケージに依存させると，パッケージ保守が結構大変です．もし，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作っておけば，パッケージ側や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン変更の影響などで&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が変更されても，そのモジュール内でフォールバックを設定することで他のモジュールに変更を持ち越す必要がなくなります．これを&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と組み合わせ，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE NoImplicitPrelude #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyPrelude&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くことで，保守がかなりしやすくなります．&lt;/p&gt;
&lt;h2 id=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;便利な構文の導入&lt;/h2&gt;
&lt;h3 id=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たなリテラル表記を可能にする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BinaryLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BinaryLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BinaryLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NagativeLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NegativeLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NagativeLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HexFloatLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XHexFloatLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- HexFloatLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には幾つかのリテラルが存在します．例えば，&lt;code&gt;&#39;c&#39;&lt;/code&gt;は文字&lt;span class=&#34;ascii&#34;&gt;c&lt;/span&gt;を表す&lt;span class=&#34;ascii&#34;&gt;Char&lt;/span&gt;型のリテラルです．&lt;code&gt;100&lt;/code&gt;は整数&lt;span class=&#34;ascii&#34;&gt;100&lt;/span&gt;を表す&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルで，&lt;code&gt;100.1&lt;/code&gt;は浮動小数点数&lt;span class=&#34;ascii&#34;&gt;100.1&lt;/span&gt;を表す&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルになります．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準には他にも幾つかリテラルが存在しますが，特に数値は非常に多様な使われ方がなされるため，他の多くの言語はより強力なリテラル表現を持つことがあります．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張ではこの背景を元に，リテラルに対する幾つかの拡張を提供しています．&lt;code&gt;BinaryLiterals&lt;/code&gt;は&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;HexFloatLiterals&lt;/code&gt;は&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;NegativeLiterals&lt;/code&gt;はどちらに対してもの拡張を，それぞれ提供します．&lt;/p&gt;
&lt;p&gt;数値型に対するリテラルは，既存のものでも数種類存在します．通常の数値表現&lt;code&gt;20&lt;/code&gt;，オクテット&lt;span class=&#34;ascii&#34;&gt;(8&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0o24&lt;/code&gt;，ヘックス&lt;span class=&#34;ascii&#34;&gt;(16&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0x14&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つです．&lt;code&gt;BinaryLiterals&lt;/code&gt;拡張は，これに加え&lt;code&gt;0b&lt;/code&gt;を接頭辞に付けることでバイナリ&lt;span class=&#34;ascii&#34;&gt;(2&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0b10100&lt;/code&gt;を可能にする拡張です．&lt;/p&gt;
&lt;p&gt;これらのオクテット表現やヘックス，バイナリ表現は浮動小数点数の表現はできません．しかし，浮動小数点数は実際には&lt;span class=&#34;ascii&#34;&gt;IEEE&lt;/span&gt;の規格に則ったデータ表現になりますから，&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数表現よりも&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;進数表現の方が実態として分かりやすい場合があります．このため&lt;code&gt;HexFloatLiterals&lt;/code&gt;拡張では，接頭に&lt;code&gt;0x&lt;/code&gt;の付くヘックス表現でも浮動小数点数のリテラルを記述できるようにしています．この拡張によって，&lt;code&gt;0.25&lt;/code&gt;は&lt;code&gt;0x0.4&lt;/code&gt;と表記できるようになります．また，指数表記も&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進方式のものではなく，ビット方式のものになります．指数表記には&lt;code&gt;e&lt;/code&gt;ではなく&lt;code&gt;p&lt;/code&gt;を使い，何ビット移動させるか&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つまり，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;の何乗を掛けるか&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を書くようにします．例えば，&lt;code&gt;1.0&lt;/code&gt;は&lt;code&gt;0x0.4p2&lt;/code&gt;と表記できます．また，&lt;code&gt;0.125&lt;/code&gt;は&lt;code&gt;0x0.4p-1&lt;/code&gt;と表記できます．&lt;/p&gt;
&lt;p&gt;さて，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には唯一の単項演算子&lt;code&gt;-&lt;/code&gt;があります．この演算子を使用することで&lt;code&gt;negate 1&lt;/code&gt;の代わりに&lt;code&gt;-1&lt;/code&gt;という表記が可能になります．しかし，この演算子の結合度は非常に弱く，また二項演算子の&lt;code&gt;-&lt;/code&gt;も存在することから&lt;code&gt;f -1&lt;/code&gt;という表記は&lt;code&gt;(f) - (1)&lt;/code&gt;というように解釈されてしまうなどの問題があり，非常に使い勝手が悪い演算子となっていました．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の仕様上，&lt;code&gt;-128&lt;/code&gt;という表現は最終的に&lt;code&gt;negate (fromInteger 128)&lt;/code&gt;という式に&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-280003.4&#34;&gt;脱糖されます&lt;/a&gt;が，例えば&lt;code&gt;Int8&lt;/code&gt;などの，負数は&lt;code&gt;-128&lt;/code&gt;まで扱えるが正数は&lt;code&gt;+127&lt;/code&gt;までしか扱えないといったデータ型の場合に，この式は&lt;code&gt;fromInteger&lt;/code&gt;で一度&lt;code&gt;+128&lt;/code&gt;の値になってしまいオーバーフローを起こしてしまうという問題がありました．これを解決するため導入されたのが&lt;code&gt;NagativeLiterals&lt;/code&gt;拡張です．この拡張を導入することで空白を挟まない&lt;code&gt;-1.0&lt;/code&gt;などは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのリテラルと解釈されるようになります．この拡張を導入後は，次のようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; max &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; max (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: max -1 2 == max - (1 2)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromInteger i &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; i &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fractional&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromRational r &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;空のデータ型に対するより強力なサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyDataDeriving&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyDataDeriving&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，コンストラクタを一切持たない型を定義できます．これは空のデータ型と呼ばれ，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような型は&lt;code&gt;base&lt;/code&gt;パッケージの&lt;code&gt;Data.Void&lt;/code&gt;モジュールでも提供されており，有用な場合があります．しかし，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではこのようなデータ型に対するサポートが薄く，使用する上で不便な場面があります．このサポートを強化する拡張が，&lt;code&gt;EmptyCase&lt;/code&gt;拡張と&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EmptyCase&lt;/code&gt;拡張は，空のパターンマッチを書けるようにする拡張です．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，空のパターンマッチは書けません．つまり，&lt;code&gt;case x of {}&lt;/code&gt;というような式が書けないということです．通常はデータ型は何らかのコンストラクタを持っていますから，このようなパターンマッチを書きたいと思う場面はないでしょう．しかし，空のデータ型においてこのようなパターンマッチを書きたいと思うことがあります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような表記を可能にするのが&lt;code&gt;EmptyCase&lt;/code&gt;拡張です．なお，このケース式は次のように書くのと同値になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;Non-exhaustive patterns in case&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張は，空のデータ型に対して&lt;code&gt;deriving&lt;/code&gt;構文を使用できるようにする拡張です．空のデータ型は，通常のデータ型と違い&lt;code&gt;Eq&lt;/code&gt;や&lt;code&gt;Show&lt;/code&gt;などの型クラスインスタンスを&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch11.html#x18-182014x6&#34;&gt;&lt;code&gt;deriving&lt;/code&gt;することができません&lt;/a&gt;．つまり以下のようなことができません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これでは不便な場合があります．それを可能にするのが&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．この拡張では，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Show&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Read&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つが&lt;code&gt;deriving&lt;/code&gt;可能になり，それぞれは次のようなインスタンスを生成します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  _ &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;  compare _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;  readPrec &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pfail&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;  showsPrec _ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな基本構文を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TupleSections&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TupleSections&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiWayIf&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiWayIf&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-LambdaCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- LambdaCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，タプルやラムダ抽象，セクション，&lt;code&gt;if&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式といった構文が導入されていますが，これらを組み合わせて多用する場合，幾つか冗長な表現が生まれる場合があります．その中でも頻出する表現に対して，新たな構文を提供する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張があります．それが，&lt;code&gt;TupleSections&lt;/code&gt;，&lt;code&gt;MultiWayIf&lt;/code&gt;，&lt;code&gt;LambdaCase&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，セクションと呼ばれる二項演算子の部分適用を表す構文があります．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではタプルにも独自の構文が充てがわれています．このタプルを使用する際，セクションのように部分適用を簡潔に書きたい場合があります．例えば，&lt;code&gt;\x -&amp;gt; (1, x)&lt;/code&gt;という表現をもっと簡潔に書きたい場合があります．この場合は&lt;code&gt;(,) 1&lt;/code&gt;というな表記が可能ですが，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目に部分適用したい場合や，&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ組のタプルに部分適用したい場合などは非常に面倒です．このため，&lt;code&gt;TupleSections&lt;/code&gt;拡張は&lt;code&gt;(1, )&lt;/code&gt;という表記でタプルの部分適用を書ける構文を提供します．&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ以上空きがある場合は，左から引数を受け取っていくようになります．例えば，&lt;code&gt;(True, , &amp;quot;str&amp;quot;, )&lt;/code&gt;は&lt;code&gt;\x y -&amp;gt; (True, x, &amp;quot;str&amp;quot;, y)&lt;/code&gt;と同等です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;は名前の通り複数の条件をガード構文のように指定できる&lt;code&gt;if&lt;/code&gt;式を提供する拡張です．つまり，以下のようなことがかけます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;MultiWayIf&lt;/code&gt;は次のように&lt;code&gt;case&lt;/code&gt;式で書き換えることが可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ目の&lt;code&gt;LambdaCase&lt;/code&gt;拡張は，ラムダ抽象と&lt;code&gt;case&lt;/code&gt;式を組み合わせた際に良く使う表現をより簡潔に書けるようにする拡張です．この拡張を使うと，&lt;code&gt;\x -&amp;gt; case x of (a, b) -&amp;gt; a + b&lt;/code&gt;というようなラムダ抽象を，&lt;code&gt;\case (a, b) -&amp;gt; a + b&lt;/code&gt;と書けるようになります．もちろんレイアウトルールも&lt;code&gt;case-of&lt;/code&gt;式と同じように作用するため，改行を含んだ式も書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; negate &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;正格化に対するサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BangPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BangPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-StrictData&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- StrictData&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Strict&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Strict&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;はデフォルトの評価戦略として，グラフ簡約の遅延評価を採用しています．これはリストや再帰に関する表現を非常に豊かにする反面，パフォーマンスを悪化させたりデバッグを困難にさせる場面が多いなどの負の面もあります．このため&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，&lt;code&gt;seq&lt;/code&gt;関数や正格フラグといった正格評価へのサポートも提供しています．しかし，このサポートは表現が冗長な場合が多く，使い勝手が悪い側面があります．この面を解決するための拡張が，&lt;code&gt;BangPatterns&lt;/code&gt;，&lt;code&gt;StrictData&lt;/code&gt;，&lt;code&gt;Strict&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;再帰関数において，累積引数は多くの場合正格に計算した方が効率が良いですが，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では以下のように書く必要がありました．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;sum xs y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような&lt;code&gt;seq&lt;/code&gt;による評価をより簡潔に書けるよう，&lt;code&gt;BangPatterns&lt;/code&gt;拡張というものが提供されています．これはパターンを拡張し，バンパターンというものを導入します．このバンパターンは，通常のパターンに&lt;code&gt;!&lt;/code&gt;を付けることで書けます．例えば，上の例はバンパターンを使うと以下のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;sum xs &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バンパターンはパターンの&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つですから，もちろん&lt;code&gt;let&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式でも&lt;code&gt;let !y = f x in y&lt;/code&gt;や&lt;code&gt;case f x of !y -&amp;gt; y&lt;/code&gt;というように使えます．また，&lt;code&gt;case x of (!y, z) -&amp;gt; y + z&lt;/code&gt;というように部分パターンとしても有効です．バンパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;≡ v &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，データ型の宣言において，コンストラクタの引数に正格フラグというものを付けることが許容されています．このフラグをつけた引数は，正格に評価された後コンストラクタに渡されます．ただ，一般にデータ型の引数は正格な方が効率が良いため，データ型宣言時に正格フラグを付けるという慣習がありました．この慣習を打破するために導入されたのが，&lt;code&gt;StrictData&lt;/code&gt;拡張です．&lt;code&gt;StrictData&lt;/code&gt;拡張下のモジュールでは，データ型宣言時，コンストラクタの引数は全て正格フラグをつけているものとして扱われます．また，&lt;code&gt;~&lt;/code&gt;というフラグが新たに導入され，このフラグをつけた引数の場合は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準化のデフォルトの動作，つまり引数は正格に評価されず遅延されるようになります．&lt;code&gt;StrictData&lt;/code&gt;下で宣言された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というデータ型は，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下のデータ型と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt;拡張は，&lt;code&gt;StrictData&lt;/code&gt;拡張に加え，ほとんどのパターンを暗黙的にバンパターンにする拡張です．つまり，殆どの評価を正格にする拡張です．バンパターンに変わる箇所は，関数の引数，&lt;code&gt;let&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;where&lt;/code&gt;句の束縛変数，&lt;code&gt;case&lt;/code&gt;式のパターンマッチなどです．これらのパターンには，最外の場所に&lt;code&gt;!&lt;/code&gt;が暗黙的に付与されます．例えば，&lt;code&gt;Strict&lt;/code&gt;拡張下で定義された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; data-line-number=&#34;2&#34;&gt;f x (z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数は，&lt;code&gt;BangPatterns&lt;/code&gt;拡張下の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下の関数と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;(z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意して欲しいのは，このバンパターンは&lt;code&gt;seq&lt;/code&gt;に置き換わるため，&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;までしか評価されないということです．つまり，&lt;code&gt;!(z, y)&lt;/code&gt;というパターンは単なる&lt;code&gt;(z, y)&lt;/code&gt;と完全に同じです．またトップレベルの束縛にバンパターンを付与することは許されておらず，遅延されるということにも注意が必要です．&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パターンマッチをより柔軟に扱えるようにする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ViewPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- ViewPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-PatternSynonyms&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- PatternSynonyms&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張では，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準のパターンをさらに強力なものにする拡張があります．&lt;code&gt;ViewPatterns&lt;/code&gt;はビューパターンという新たなパターンを導入します．また，&lt;code&gt;PatternSynonyms&lt;/code&gt;はパターンの別名を付けることができるようにする拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にあるパターンガードは，非常に強力ですが，表現が非常に冗長になる場合があります．これを短縮して書けるように，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張はビューパターンというものを導入します．ビューパターンは，&lt;code&gt;-&amp;gt;&lt;/code&gt;の左側に式を，右側にパターンを書くことで，左の式に対象を適用して結果が右側のパターンにマッチした時，マッチするようなパターンです．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; data-line-number=&#34;1&#34;&gt;f ((&lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; data-line-number=&#34;2&#34;&gt;f x                &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように使用でき，&lt;code&gt;f 0&lt;/code&gt;は&lt;code&gt;Nothing&lt;/code&gt;を，&lt;code&gt;f 3&lt;/code&gt;は&lt;code&gt;Just 3&lt;/code&gt;をそれぞれ返すようになります．この関数宣言は，以下のパターンガードを用いて書いた関数と一致します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; data-line-number=&#34;1&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; data-line-number=&#34;2&#34;&gt;f x                  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビューパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; p) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; data-line-number=&#34;2&#34;&gt;≡ &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; (e v) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { p &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は，非常に強力で大きな拡張です&lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;．&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は名前の通り，パターンに別名を与えるパターンシノニム機能を提供します．パターンシノニムは通常の関数と同じように，次のように定義できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; data-line-number=&#34;4&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; x xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# COMPLETE Nil, Cons #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように定義したパターンは，以下のように使用できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;len ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; data-line-number=&#34;2&#34;&gt;len (&lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; _ xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; len xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; data-line-number=&#34;3&#34;&gt;len &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは非常に便利な機能ですが，一方で注意する事項も幾つかあります．&lt;/p&gt;
&lt;p&gt;まず，パターンシノニムの定義は関数定義と非常に似ていますが，パターンの別名であることに注意してください．パターンシノニムの定義において変数が出現する場合，関数の引数のように錯覚してしまいがちですが，この変数にはパターンにマッチした時そのマッチした部分が当てがわれます．つまり，右の式でマッチしたものが左の変数に束縛されるため，左の変数に束縛された後右の式を実行する関数と，流れが逆になるということです．このため，パターンシノニムの引数の変数は必ず右に出現する必要があります．また，パターンシノニムの右側には変数を含むパターンしかかけません．そのため，式を書きたい場合，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張などを用いなければなりません．さらにパターンシノニムは，デフォルトではパターンの網羅性検査が非常に難しいため，網羅性検査を行わないようになっています．ただし，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#complete-pragma&#34;&gt;&lt;code&gt;COMPLETE&lt;/code&gt;プラグマ&lt;/a&gt;を用いてパターンシノニムの網羅条件を与えることで，その範囲で網羅性検査を行うようになります．&lt;/p&gt;
&lt;p&gt;パターンシノニムはパターンの種類に応じて&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の書き方が存在します．上の単純なパターンシノニムは，双方向&lt;span class=&#34;ascii&#34;&gt;(bidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，暗黙的にパターンの名前と等しい関数が作られます．この関数を用いることで，&lt;code&gt;[0, 1, 2]&lt;/code&gt;の代わりに&lt;code&gt;Cons 0 (Cons 1 (Cons 2 Nil))&lt;/code&gt;といった式も書くことができるようになります．ただし，このような関数が単純には作れないパターンも存在します．例えば，&lt;code&gt;(x, _)&lt;/code&gt;というパターンに，&lt;code&gt;First x&lt;/code&gt;というパターンシノニムを与えたい場合，この&lt;code&gt;First&lt;/code&gt;に対する関数は&lt;code&gt;_&lt;/code&gt;の部分に入れるべき値が分からないため，作りようがありません．このような関数が単純に作れないパターンシノニムは単方向&lt;span class=&#34;ascii&#34;&gt;(unidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，双方向パターンシノニムが&lt;code&gt;=&lt;/code&gt;を使って定義されるのに対し，次のように&lt;code&gt;&amp;lt;-&lt;/code&gt;を使って書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このパターンシノニムは&lt;code&gt;First&lt;/code&gt;という関数は作らず，単純にパターンの別名だけを提供します．ただし，&lt;code&gt;First&lt;/code&gt;関数の定義を次のように与えることが可能になっています．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，パターンシノニムはパターンの評価順序にも注意する必要があります．例えば，次の例をみてください．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; b c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-6&#34; data-line-number=&#34;6&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; x y z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-9&#34; data-line-number=&#34;9&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-10&#34; data-line-number=&#34;10&#34;&gt;f _                      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-13&#34; data-line-number=&#34;13&#34;&gt;f&amp;#39; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-14&#34; data-line-number=&#34;14&#34;&gt;f&amp;#39; _                            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;f&lt;/code&gt;と&lt;code&gt;f&#39;&lt;/code&gt;は評価順が異なり，&lt;code&gt;f (Pair False undefined)&lt;/code&gt;が例外を投げるのに対し，&lt;code&gt;f&#39; (Pair False undefined)&lt;/code&gt;は&lt;code&gt;False&lt;/code&gt;を返します．これは，パターンシノニムを使ったパターンマッチでは，自身のパターンを先に調べ，次に引数のパターンマッチを行うからです．つまり，&lt;code&gt;f&lt;/code&gt;は以下と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; data-line-number=&#34;2&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)) &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; y, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; data-line-number=&#34;3&#34;&gt;f _                                                     &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは，モジュールエクスポートを書く際にも注意が必要で，&lt;code&gt;module A (pattern Cons, pattern Nil) where ...&lt;/code&gt;というように接頭に&lt;code&gt;pattern&lt;/code&gt;をつける必要があります．&lt;/p&gt;
&lt;h3 id=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;レコードに対するサポートを強化する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DuplicateRecordFields&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DuplicateRecordFields&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- DuplicateRecordFields&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-OverloadedLabels&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- OverloadedLabels&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedFieldPuns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedFieldPuns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecordWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecordWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のレコード構文は，便利な反面幾つか機能が劣る場面もあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，レコードをより扱いやすくするための拡張を幾つか提供しています．それが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;，&lt;code&gt;OverloadedLabels&lt;/code&gt;，&lt;code&gt;NamedFieldPuns&lt;/code&gt;，&lt;code&gt;RecordWildCards&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です&lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，同じモジュール内で同じフィールド名を持つ複数のレコード構文を使用したデータ型の定義を行うことができません．これはどのデータ型のフィールドかが曖昧であるようなプログラムを書けてしまうからですが，そういう状況に遭遇するとこの制約は非常に不便です．これを解決するのが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張です．&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張は，曖昧になるような式を書けなくする代わりに，同一モジュールの複数のデータ型が同じフィールド名を持つことを許容する拡張です．つまり，以下のようなことが可能になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，この拡張下では，曖昧なフィールドを用いたレコードのアップデート構文やフィールドの選択関数の使用の際は型を明記する必要があったり，モジュールのエクスポートリストで選択関数をエクスポートすることが出来なくなったりします．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張は，&lt;code&gt;#foo&lt;/code&gt;というような&lt;code&gt;#&lt;/code&gt;から始まる新たな構文を導入します．&lt;code&gt;#foo&lt;/code&gt;は&lt;code&gt;GHC.OverloadedLabels&lt;/code&gt;モジュールの&lt;code&gt;fromLabel&lt;/code&gt;メソッドにおいて&lt;code&gt;IsLabel &amp;quot;foo&amp;quot; a =&amp;gt; a&lt;/code&gt;というような型を持つ場合と同等になります．これを用いることで，同じフィールドを持つデータ型に対する選択関数を次のように書けます&lt;a href=&#34;#fn11&#34; class=&#34;footnote-ref&#34; id=&#34;fnref11&#34;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels       #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- the main extension&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds              #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for Symbol kind&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE KindSignatures         #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField&amp;#39;s `l` parameter&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField and IsLabel classes&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FunctionalDependencies #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances      #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField instances&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables    #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for the IsLabel instance&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DuplicateRecordFields  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for A and B data types&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.OverloadedLabels&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a (&lt;span class=&#34;ot&#34;&gt;l ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;) b &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; a l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  selectField ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-21&#34; data-line-number=&#34;21&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-24&#34; data-line-number=&#34;24&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-25&#34; data-line-number=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-26&#34; data-line-number=&#34;26&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a l b &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt; l (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-27&#34; data-line-number=&#34;27&#34;&gt;  fromLabel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; selectField (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使うことで，&lt;code&gt;#d A { d = 0 }&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;を，&lt;code&gt;#d B { d = True }&lt;/code&gt;は&lt;code&gt;True&lt;/code&gt;を返してくるようになります．また，&lt;code&gt;#d&lt;/code&gt;には型を明記しなくても型推論が働くようになります．&lt;/p&gt;
&lt;p&gt;さて他にレコードのパターンマッチやコンストラクトを非常に便利にしてくれる拡張として，&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張と&lt;code&gt;RecordWildCards&lt;/code&gt;拡張があります．レコードのパターンマッチは多くの場合冗長になりがちで，次のようなボイラープレートを書きがちです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; y ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; data-line-number=&#34;4&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張は，同等のことを次のように書けるようにする拡張です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，このパターンは旧来の書き方と合わせて書くこともできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x, y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x }            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらにこの拡張は，コンストラクトの際も役に立ちます．&lt;code&gt;let x = 1 in A { x, y = True }&lt;/code&gt;と書くとこの式は，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張ではフィールド名を明記する必要がありましたが，&lt;code&gt;RecordWildCards&lt;/code&gt;拡張はさらにフィールド名を明記する必要がなくなります．以下のように&lt;code&gt;{..}&lt;/code&gt;と書くことで，全てのフィールドを展開してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，部分的に明記することも可能で，その場合以下のように書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}             &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コンストラクトの際も，この拡張は有効です．&lt;code&gt;let x = 1 in A { y = True, ..}&lt;/code&gt;と書いた場合，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;h3 id=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型演算子を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeOperators&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeOperators&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TypeOperators&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではユーザー定義の関数やデータ型のコンストラクタにおいて，演算子表記のものも定義できるようになっています．例えば，以下のようにです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;amp;) ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-5&#34; data-line-number=&#34;5&#34;&gt;x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型を定義する場合そのようなことはできません．これを可能にするのが，&lt;code&gt;TypeOperators&lt;/code&gt;拡張です．この拡張の有効下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixr&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということが可能になります．ただし，このように定義した型演算子は，同じ名前の値としての演算子があった場合区別ができません．このため，モジュールのエクスポートリストを書く際，型演算子か値レベルの演算子かの区別が付かなくなった場合，値レベルの方が優先されます．この時，型演算子を明示したい場合，&lt;code&gt;type&lt;/code&gt;を付けます&lt;a href=&#34;#fn12&#34; class=&#34;footnote-ref&#34; id=&#34;fnref12&#34;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-4&#34; data-line-number=&#34;4&#34;&gt;  ( &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-5&#34; data-line-number=&#34;5&#34;&gt;  ) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型クラスを拡張する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiParamTypeClasses&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiParamTypeClasses&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleContexts&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleContexts&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleInstances&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleInstances&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InstanceSigs&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-InstanceSigs&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- InstanceSigs&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型クラスは非常に強力な機構です．しかしながら，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の型クラスの構文は非常に制約がきつく，これらを緩和したいと思うことがよくあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では制約を緩和する拡張をいくつか提供しています．それが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;，&lt;code&gt;FlexibleContexts&lt;/code&gt;，&lt;code&gt;FlexibleInstances&lt;/code&gt;，&lt;code&gt;InstanceSigs&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，クラスは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの変数しか持てません．なので，次のような型クラスは作れません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは非常に不便な制約なため，複数のパラメータを使うような型クラスを許容する拡張が&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張です．この拡張により，上のコードが許容されるようになる他，以下のように変数が全くない型クラスも宣言することができるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullary&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，メソッドにおいてクラスの型変数に型制約をかけるということも許容されていませんが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張ではこれも可能にします&lt;a href=&#34;#fn13&#34; class=&#34;footnote-ref&#34; id=&#34;fnref13&#34;&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt;．これによって以下のようなクラス定義も書けるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Setable&lt;/span&gt; s a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  elem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型制約の解決を安全に，しかも単純にするために，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-660004.1.3&#34;&gt;型注釈における制約の書き方&lt;/a&gt;や&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-760004.3.1&#34;&gt;クラス定義，インスタンス定義の際の制約の書き方&lt;/a&gt;を大きく制限しています．しかし，より複雑な型制約を書きたい時が往々にしてあります．そこで，この制限を緩め，クラス階層が非循環である場合には許容するようにする拡張が，&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張です．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (t m)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Transform&lt;/span&gt; t m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (t m) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-7&#34; data-line-number=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張も&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張と同じく，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準での&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-770004.3.2&#34;&gt;型クラスインスタンスの書き方&lt;/a&gt;の制限を，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination&#34;&gt;停止制限&lt;/a&gt;を守る場合に許容するというように緩和する拡張です．停止制限は簡単に言ってしまえば，インスタンス宣言において，型制約がインスタンスより小さく&lt;a href=&#34;#fn14&#34; class=&#34;footnote-ref&#34; id=&#34;fnref14&#34;&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;，型関数を使っていないというものです&lt;a href=&#34;#fn15&#34; class=&#34;footnote-ref&#34; id=&#34;fnref15&#34;&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; [a])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; [a] [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C3&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (s a)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; s a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; [] &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．また，この拡張下では，型シノニムをインスタンスにすることもできます&lt;a href=&#34;#fn16&#34; class=&#34;footnote-ref&#34; id=&#34;fnref16&#34;&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Instead of `instance C [a]`&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，型シノニムを使う場合そのシノニムの引数は全て適用しなければならないことに注意が必要です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型クラスインスタンスの定義時，そのメソッドの型注釈は書けないようになっています．しかし，複雑な型クラスインスタンスを書く際，メソッドの型注釈を書きたい場合があります&lt;a href=&#34;#fn17&#34; class=&#34;footnote-ref&#34; id=&#34;fnref17&#34;&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;．これを可能にするのが&lt;code&gt;InstanceSigs&lt;/code&gt;拡張です．&lt;code&gt;InstanceSigs&lt;/code&gt;拡張の元では，以下のようなインスタンス宣言が書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  (==) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型ワイルドカードをより柔軟に扱う&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には型ワイルドカードという機能があります．この機能は，&lt;code&gt;_&lt;/code&gt;と型シグネチャ上で書いておくと，そこの部分の型を推論してエラーメッセージとして表示してくれる機能です．この機能は，以下のように部分的に記述したり複数指定したりすることも可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb51&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, b) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを活用すれば，複雑な型をある程度ヒントを与えた状態で推論してもらい，型を追記するプログラミングスタイルや，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が実際に型をどう推論するかを見るための補助に応用できます．しかし，例えば&lt;code&gt;ignoreSecond&lt;/code&gt;が引数と返り値で型が同じであるという情報が分かっていた場合に，これをヒントとして伝えたい場合がありますが，型ワイルドカードでそれを伝える方法はありません．これを解決するのが&lt;code&gt;NamedWildCards&lt;/code&gt;拡張です．この拡張を使うと，以下のようなプログラムに対しても，接頭に&lt;code&gt;_&lt;/code&gt;が付いている型をワイルドカードとみなして，エラーメッセージで型の推論結果を表示してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb52&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, Maybe a1) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな表記法の導入&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Arrows&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Arrows&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecursiveDo&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecursiveDo&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，モナドを扱いやすくするための，&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文という専用の構文が用意されています．この構文は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングにおいて広く利用されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，これに加え&lt;code&gt;Arrow&lt;/code&gt;と&lt;code&gt;MonadFix&lt;/code&gt;というクラスに対しての専用の構文も提供しています．これは&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張で実装されており，それぞれ&lt;code&gt;Arrows&lt;/code&gt;拡張，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張を有効にすることで使用可能です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arrow&lt;/code&gt;クラスは，モナドの一般化として導入されました&lt;a href=&#34;#fn18&#34; class=&#34;footnote-ref&#34; id=&#34;fnref18&#34;&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;．このクラスには，モナドの&lt;code&gt;do&lt;/code&gt;構文と同様に，クラスメソッドだけの式に脱糖できる構文が考案され，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張として実装されています．それが&lt;code&gt;Arrows&lt;/code&gt;拡張で利用できる&lt;code&gt;proc&lt;/code&gt;構文です．&lt;/p&gt;
&lt;p&gt;例えば，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドを使った次のような関数は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb53&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;   arr (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, x))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; first (f &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (arr (\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g) &lt;span class=&#34;fu&#34;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr snd)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(y, x) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x, x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(x, z) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (z, x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; second h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(z, t) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文を使うと，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb54&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-3&#34; data-line-number=&#34;3&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-4&#34; data-line-number=&#34;4&#34;&gt;  g &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-6&#34; data-line-number=&#34;6&#34;&gt;  t &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-7&#34; data-line-number=&#34;7&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように書けます&lt;a href=&#34;#fn19&#34; class=&#34;footnote-ref&#34; id=&#34;fnref19&#34;&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;．また，&lt;code&gt;ArrowLoop&lt;/code&gt;クラスの&lt;code&gt;loop&lt;/code&gt;メソッドに変換される，&lt;code&gt;rec&lt;/code&gt;構文も搭載されており次のようなフィードバック制御を相互再帰で行うプログラムを書くことができます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb55&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;counter ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ArrowLoop&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-2&#34; data-line-number=&#34;2&#34;&gt;counter delay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc reset &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-3&#34; data-line-number=&#34;3&#34;&gt;  rec output &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; reset &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; next&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-4&#34; data-line-number=&#34;4&#34;&gt;      next &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; delay &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-5&#34; data-line-number=&#34;5&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文については&lt;a href=&#34;https://www.haskell.org/arrows/syntax.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Arrow syntax&lt;/span&gt;&lt;/a&gt;のページにまとめられている他，&lt;a href=&#34;http://www.staff.city.ac.uk/~ross/papers/notation.html&#34;&gt;提案論文&lt;/a&gt;にて変換規則を確認することが可能です．&lt;/p&gt;
&lt;p&gt;さて，もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;MonadFix&lt;/code&gt;クラスは，モナドを拡張し，再帰的なバインディングを許すようなものです．このクラスを元に，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張は&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文をさらに拡張します．具体的には，次のように使用できる&lt;code&gt;rec&lt;/code&gt;という構文を新たに導入します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb56&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-3&#34; data-line-number=&#34;3&#34;&gt;  rec x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-4&#34; data-line-number=&#34;4&#34;&gt;      y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は，次のように&lt;code&gt;MonadFix&lt;/code&gt;クラスのメソッド&lt;code&gt;mfix&lt;/code&gt;を使った関数と同等です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb57&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-3&#34; data-line-number=&#34;3&#34;&gt;  (x, y) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(x, y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-4&#34; data-line-number=&#34;4&#34;&gt;    x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-5&#34; data-line-number=&#34;5&#34;&gt;    y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-6&#34; data-line-number=&#34;6&#34;&gt;    pure (x, y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-7&#34; data-line-number=&#34;7&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;rec&lt;/code&gt;を省略して書ける&lt;code&gt;mdo&lt;/code&gt;という構文も提供されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb58&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-4&#34; data-line-number=&#34;4&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mdo&lt;/code&gt;構文は，それぞれの文と変数の依存関係を解析し，自動的に&lt;code&gt;rec&lt;/code&gt;ブロックに分けてくれます．後は，その分けられた&lt;code&gt;rec&lt;/code&gt;文を&lt;code&gt;mfix&lt;/code&gt;に翻訳することで，通常の&lt;code&gt;do&lt;/code&gt;構文に翻訳することができます．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb59&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-1&#34; data-line-number=&#34;1&#34;&gt;mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-3&#34; data-line-number=&#34;3&#34;&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-4&#34; data-line-number=&#34;4&#34;&gt;  c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-5&#34; data-line-number=&#34;5&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-6&#34; data-line-number=&#34;6&#34;&gt;  d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-7&#34; data-line-number=&#34;7&#34;&gt;  e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-8&#34; data-line-number=&#34;8&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb60&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-3&#34; data-line-number=&#34;3&#34;&gt;  (b, c) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(b, c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-4&#34; data-line-number=&#34;4&#34;&gt;    b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-5&#34; data-line-number=&#34;5&#34;&gt;    c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-6&#34; data-line-number=&#34;6&#34;&gt;    pure (b, c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-7&#34; data-line-number=&#34;7&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-8&#34; data-line-number=&#34;8&#34;&gt;  (d, e) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(d, e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-9&#34; data-line-number=&#34;9&#34;&gt;    d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-10&#34; data-line-number=&#34;10&#34;&gt;    e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-11&#34; data-line-number=&#34;11&#34;&gt;    pure (d, e)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-12&#34; data-line-number=&#34;12&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式に翻訳されます．&lt;code&gt;mdo&lt;/code&gt;と&lt;code&gt;rec&lt;/code&gt;の変換規則は，&lt;a href=&#34;https://dl.acm.org/citation.cfm?doid=581690.581693&#34;&gt;提案論文&lt;/a&gt;にて確認が可能です．&lt;/p&gt;
&lt;h1 id=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次回予告&lt;/h1&gt;
&lt;p&gt;今回は，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と使い方について，それから個人的にデフォルトで有効化している，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的なインポートを抑制する拡張，新たな構文を導入する拡張を紹介しました．&lt;/p&gt;
&lt;p&gt;次回は，他のデフォルトで有効化している拡張について紹介したいと思います．&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/glasgow_exts.html#options-language&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 9. GHC Language Features&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/ffi-chap.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 10. Foreign function interface (FFI)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/#language-extensions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;What I Wish I Knew When Learning Haskell - Language Extensions&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/language-standards&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Guide to GHC Extensions - Language Standards&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell 2010 Language Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/cabal-projectindex.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cabal reference&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この記事では特に断らない限り，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;&lt;/a&gt;を「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準」または「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;」と呼称します．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;このオプションは，拡張を無効にする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;も含めて表示します．実際には&lt;code&gt;No&lt;/code&gt;が付いている拡張を抜くと，提供されている数は&lt;span class=&#34;ascii&#34;&gt;120&lt;/span&gt;個になります．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，ある拡張を無効にするといった機能は提供されていません．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では無効にする機能を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの拡張として，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準に則った形で提供しています．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;有効にする拡張と無効にする拡張を両方指定した場合，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は指定された順番に沿って最後に指定された方を拡張として採用します．&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;標準では，&lt;code&gt;Haskell2010&lt;/code&gt;というプラグマをサポートすること，また&lt;span class=&#34;ascii&#34;&gt;Haskell98&lt;/span&gt;から新たに&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;までに取り込まれた機能を切り離した&lt;code&gt;PatternGuards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;NoNPlusKPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;RelaxedPolyRec&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;という拡張をそれぞれサポートすることが望ましいと規定されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も&lt;code&gt;Haskell2010&lt;/code&gt;という拡張を指定できるようになっており，ここにあるほとんどはこの拡張を有効にした場合にも有効になります．&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;デフォルトで有効になる拡張のほとんどは，&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;を元にしたものです．ただし全てがそうというわけではありません．&lt;code&gt;NondecreasingIndentation&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にはない機能です．また&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;で規定されている仕様を全てデフォルトで取り込んでいる訳でもありません．特に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではデータ型の宣言に型制約を書くことができますが，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;ではデフォルトではできません．これを有効にする場合，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DatatypeContexts&#34;&gt;&lt;code&gt;DatatypeContexts&lt;/code&gt;拡張&lt;/a&gt;を有効にする必要があります．&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の内部では&lt;code&gt;RelaxedPolyRec&lt;/code&gt;という拡張も一緒に有効になります．しかし，現在この拡張は実装上の問題で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;上で無効にすることができないため，ドキュメント上からも削除されています．この記事でも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の方針に従って，この拡張は特に扱いませんのでご留意ください．&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;現在，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の代替を目指す，&lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;というパッケージが作成されています．このパッケージは現在まだ&lt;span class=&#34;ascii&#34;&gt;prerelease&lt;/span&gt;の段階で，&lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;において実験的に使用されています．様々な最新の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングの知見を取り入れており，標準の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;に大きく拡張を施しているため，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で大規模な開発を行う場合注目する価値があるかもしれません．&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.2.2&lt;/span&gt;の段階では，パターンシノニムはコンパイラがクラッシュするなどの非常に多くのバグを抱えていました．私は&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;をまだあまり試していませんが，パターンシノニムの仕様が非常に複雑なため，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．パターンシノニムをプロダクトで多用する場合，その点に注意した方が良いでしょう．&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のレコードシステムの拡張は非常に強力ですが，その反面システムが非常に複雑になっています．このため，&lt;span class=&#34;ascii&#34;&gt;8.2.2&lt;/span&gt;の段階でコンパイラがクラッシュするなど非常に多くのバグを抱えていました．レコードシステムの仕様の改良は現在も進んでいますが，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．これらの拡張をプロダクトで多用する場合，その点に注意した方が良いでしょう．特に，&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;以降に導入された拡張には注意が必要です．&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn11&#34;&gt;&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張はかなり最近入った拡張で，多数の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張，特に強力な型システムを前提にして書かれています．このため，選択関数の実装にもかなり多くの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用しています．ここでは，特に解説しないのでそういうものだと思っておいてください．なお，このプログラムはプロダクションで使うことを前提にしていませんので，そこはご注意ください．&lt;a href=&#34;#fnref11&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn12&#34;&gt;&lt;p&gt;この機能は型演算子を定義しないで再エクスポートなどをする場合にも使用されるため，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ExplicitNamespaces&#34;&gt;&lt;code&gt;ExplicitNamespaces&lt;/code&gt;拡張&lt;/a&gt;として切り離されています．&lt;a href=&#34;#fnref12&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn13&#34;&gt;&lt;p&gt;この機能は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ConstrainedClassMethods&#34;&gt;&lt;code&gt;ConstrainedClassMethods&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref13&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn14&#34;&gt;&lt;p&gt;型制約が小さいとは，型変数とコンストラクタと変数の組の出現が少ないということです．&lt;a href=&#34;#fnref14&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn15&#34;&gt;&lt;p&gt;より正確には，&lt;code&gt;FunctionalDependencies&lt;/code&gt;に対する制限もありますが，ここでは割愛します．&lt;a href=&#34;#fnref15&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn16&#34;&gt;&lt;p&gt;この拡張は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeSynonymInstances&#34;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref16&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn17&#34;&gt;&lt;p&gt;特に&lt;code&gt;ScopedTypeVariables&lt;/code&gt;拡張を指定する場合，型注釈は必要です．&lt;a href=&#34;#fnref17&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn18&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=347246&#34;&gt;“&lt;span class=&#34;ascii&#34;&gt;Generalising Monads to Arrows&lt;/span&gt;”&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;, John Hughes, in Science of Computer Programming 37, pp. 67&lt;/span&gt;–&lt;span class=&#34;ascii&#34;&gt;111, May 2000&lt;/span&gt;&lt;a href=&#34;#fnref18&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn19&#34;&gt;&lt;p&gt;一見，この構文は単純な脱糖を行うと脱糖後のプログラムが非常に冗長になるように思えます．しかし，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドに設けられている書き換え規則によって，最終的に妥当な大きさまで脱糖後のプログラムが小さくなってくれます．&lt;a href=&#34;#fnref19&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/main-tester.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/main-tester.html</id><title type="text">CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました</title><updated>2018-04-09T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/main-tester.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;こんにちは。みなさん、テストは書いてますか？&lt;br /&gt;
「&lt;a href=&#34;http://syocy.hatenablog.com/entry/haskell-library-2016#%E3%83%86%E3%82%B9%E3%83%88&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;&lt;/a&gt;」という記事でも紹介されているとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;にも様々なテスト用ライブラリーがあります。&lt;br /&gt;
今回は、「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;」でも紹介されている&lt;a href=&#34;https://hackage.haskell.org/package/silently&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;&lt;/a&gt;というパッケージにインスパイアされた、新しいテスト用ライブラリーを作りました。&lt;br /&gt;
タイトルにも書きましたが&lt;a href=&#34;https://hackage.haskell.org/package/main-tester&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;&lt;/a&gt;といいます。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;ほかのライブラリーとの違い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;使い方・バグ報告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は名前の通り、&lt;code&gt;main&lt;/code&gt;関数のテストをサポートするライブラリーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製のプログラムを起動すると最初に実行される、あの&lt;code&gt;main&lt;/code&gt;関数です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数は&lt;code&gt;IO ()&lt;/code&gt;という型であるとおり、原則として必ず入出力を伴うので、自動テストがしにくい関数です。&lt;br /&gt;
一般的なベストプラクティスとしては、できるだけ&lt;code&gt;IO&lt;/code&gt;でない、純粋な関数を中心にテストを書いていくのが普通でしょう。&lt;br /&gt;
それでも敢えて&lt;code&gt;main&lt;/code&gt;関数の自動テストを書くのには、以下のメリットがあります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数をテストすると言うことは、作っているコマンドの、ユーザーの要求に最も近いレベルのテスト、&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テスト（&lt;span class=&#34;ascii&#34;&gt;end-to-end&lt;/span&gt; テスト）をすることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数（や、その他の&lt;code&gt;IO&lt;/code&gt;を伴う関数）に対するテストは、データベースやファイルシステムなど、外部のソフトウェアとの「組み合わせ」で起こるバグを検出できる。
&lt;ul&gt;
&lt;li&gt;経験上、特に単純なアプリケーションでは、そうした外部のソフトウェアに対する「誤解」が原因となったバグが比較的多いように感じています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;私の個人的な都合ですが、趣味では小さなアプリケーションを書くことが多いので、そうした&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストの方が効果的だったりする。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このように、&lt;code&gt;main&lt;/code&gt;関数をはじめとする、&lt;code&gt;IO&lt;/code&gt;な関数に対して敢えて自動テストを書くことには、様々なメリットがあります。&lt;br /&gt;
&lt;code&gt;main-tester&lt;/code&gt;はそうした&lt;code&gt;IO&lt;/code&gt;な関数をテストする際に伴う、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの問題を解決しました。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;標準出力・標準エラー出力に出力した文字列がテストしにくい
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;captureProcessResult&lt;/code&gt;という関数で、標準出力・標準エラー出力に出力した文字列をそれぞれ&lt;code&gt;ByteString&lt;/code&gt;として取得することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;標準入力から文字列を読み出そうとすると、テストの実行が停止してしまう。
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;withStdin&lt;/code&gt;という関数で、標準入力に与えたい文字列を&lt;code&gt;ByteString&lt;/code&gt;として与えることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここに書いたことは、ビルドした実行ファイルを子プロセスとして呼び出すことによってもできます。&lt;br /&gt;
入出力の順番など、標準出力や標準エラー出力のより細かい挙動をテストするにはその方がいいでしょう&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
しかし、テストのために&lt;code&gt;PATH&lt;/code&gt;を分離させる必要があったり、そのために&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/2885&#34;&gt;&lt;code&gt;stack exec&lt;/code&gt;を使ったらめっちゃ遅い&lt;/a&gt;という問題があったり、そもそも子プロセス呼び出しはそれだけでオーバーヘッドがあったりと、様々な問題があります。&lt;br /&gt;
物事をよりシンプルにするには、&lt;code&gt;main&lt;/code&gt;関数を直接呼び出した方がよいでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;アプリケーションの&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストにおける、そうした子プロセスの呼び出しの問題と、より大きな関数をテストしたいというニーズに応えるためのライブラリーなのです。&lt;/p&gt;
&lt;h1 id=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ほかのライブラリーとの違い&lt;/h1&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;というパッケージにインスパイアされた」と冒頭で申しましたとおり、前節で紹介した機能は、実はすでにほかのライブラリーに似たものがあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;に加え、&lt;a href=&#34;https://hackage.haskell.org/package/imperative-edsl-0.7.1/docs/System-IO-Fake.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;imperative-edsl&lt;/span&gt;というパッケージに含まれる、&lt;code&gt;System.IO.Fake&lt;/code&gt;というモジュール&lt;/a&gt;です&lt;small&gt;（ほかにもあったらすみません！🙇🙇🙇）&lt;/small&gt;。&lt;br /&gt;
これらと&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;との違いは何でしょう？&lt;/p&gt;
&lt;p&gt;第一に、先ほども触れましたが、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数や&lt;code&gt;withStdin&lt;/code&gt;関数は、標準出力・標準エラー出力・標準入力でやりとりする文字列を&lt;span class=&#34;ascii&#34;&gt;strict&lt;/span&gt;な&lt;code&gt;ByteString&lt;/code&gt;でやりとりします。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;や&lt;code&gt;System.IO.Fake&lt;/code&gt;は、&lt;code&gt;String&lt;/code&gt;なのです。&lt;br /&gt;
&lt;code&gt;ByteString&lt;/code&gt;は文字通り任意のバイト列を扱うことができるので、「&lt;span class=&#34;ascii&#34;&gt;Unicode&lt;/span&gt;の文字のリスト」である&lt;code&gt;String&lt;/code&gt;よりも、多様なデータを扱うことができます。&lt;/p&gt;
&lt;p&gt;これは、特に複数の種類の文字コードを扱うとき、非常に重要な機能となります。&lt;br /&gt;
&lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;以前の記事で取り上げた、&lt;code&gt;Invalid character&lt;/code&gt;というエラー&lt;/a&gt;を再現させる場合も、ないと大変やりづらいでしょう。&lt;/p&gt;
&lt;p&gt;第二に、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数は、&lt;code&gt;main&lt;/code&gt;関数の終了コードも&lt;a href=&#34;https://hackage.haskell.org/package/base-4.11.0.0/docs/System-Exit.html#t:ExitCode&#34;&gt;&lt;code&gt;ExitCode&lt;/code&gt;型&lt;/a&gt;の値として取得できます。&lt;br /&gt;
&lt;code&gt;main&lt;/code&gt;関数の中で&lt;code&gt;exitFailure&lt;/code&gt;等の関数を呼び出すと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として投げられます。&lt;br /&gt;
既存のライブラリーでこれを行うと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として処理されるため、テストしたい&lt;code&gt;main&lt;/code&gt;関数の実行が終了してしまいます。&lt;br /&gt;
結果、&lt;code&gt;main&lt;/code&gt;関数が標準出力・標準エラー出力に書き込んだ文字列を取得することができないのです。&lt;br /&gt;
「○○というエラーメッセージを出力して異常終了する」といったことをテストしたい場合、これでは使いづらいでしょう。&lt;br /&gt;
&lt;strong&gt;「&lt;code&gt;main&lt;/code&gt;関数の&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストを行うためのライブラリーである」&lt;/strong&gt;という観点から、必須の機能であると判断し、実装しました。 ちなみに、&lt;code&gt;ExitCode&lt;/code&gt;以外の例外についてはそのまま投げられます。仕様を単純にするために、これはユーザーのテストコードの中で処理することとしています。&lt;/p&gt;
&lt;h1 id=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・バグ報告&lt;/h1&gt;
&lt;p&gt;機能は非常にシンプルなので、使い方については&lt;a href=&#34;https://hackage.haskell.org/package/main-tester-0.1.0.0/docs/Test-Main.html&#34;&gt;ドキュメント&lt;/a&gt;のサンプルコードを読めば大体わかるかなぁと思いますが、簡単にサンプルを載せておきましょう。&lt;/p&gt;
&lt;p&gt;例えばこんなソース👇のプログラムがあった場合、&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleMain.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;  putStr &lt;span class=&#34;st&#34;&gt;&amp;quot;What&amp;#39;s your name?: &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`isInfixOf`&lt;/span&gt; name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; die &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; name &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;? Sorry I don&amp;#39;t know such a guy!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;を使えば、次のように&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleSpec.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hspec &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;your-cool-command&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given &amp;#39;Yuji&amp;#39; to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints a string including &amp;#39;Nice name&amp;#39; without an error&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitSuccess&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; B.null&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;        prStdout result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given other name to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints an error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;other name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitFailure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (not &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; B.null)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれのファイルを同じディレクトリーに置いた上で、次のように実行すれば試せるはずです &lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;ユーザーの皆さんは適当に読み替えてください…）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build hspec main-tester&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- --ghc-arg=-i. ExampleSpec.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ex&#34;&gt;your-cool-command&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Yuji&amp;#39;&lt;/span&gt; to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; a string including &lt;span class=&#34;st&#34;&gt;&amp;#39;Nice name&amp;#39;&lt;/span&gt; without an error&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; other name to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; an error message&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;ex&#34;&gt;Finished&lt;/span&gt; in 0.0130 seconds&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; examples, 0 failures&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バグを見つけたら&lt;a href=&#34;https://gitlab.com/igrep/main-tester/issues&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;に報告してください&lt;small&gt;（最近の個人的な判官贔屓により、敢えて&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;にしております 😏）&lt;/small&gt;。&lt;br /&gt;
それではこの春は&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Testing!!&lt;/span&gt; 💚💚💚&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数を子スレッドとして&lt;code&gt;forkIO&lt;/code&gt;することで同じことが恐らくできますが、テスト結果の報告に使うべき、標準出力・標準エラー出力を食い合うことになってしまうので、非常にやりづらいと思います。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/renew-haskell-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Antenna をリニューアルしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2018-03-20T22:47:14+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/02/13/175220</id><title type="text">すごい JVM 言語 Frege をたのしく学ぼう！</title><updated>2016-02-13T17:52:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/02/13/175220"/><summary type="html">言わずと知れた Haskell の定番教科書『すごい Haskell たのしく学ぼう！』に登場するサンプルコードを、プログラミング言語 Frege に翻訳してみました。 github.com Frege について Frege は、JVM 上で動く純粋関数型プログラミング言語です。 github.com 最近、JVM 用 Lisp である Clojure の存在感を増してきている気がしますが、Frege はいわばその Haskell 版ですね。 文法的には Haskell + Java のメソッドを呼び出すための追加構文、といった感じ。細かな違いはありますが、Haskell が読める人間であれば…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/23/190729</id><title type="text">Alloy で自動定理証明っぽいやつ</title><updated>2015-12-23T19:42:18+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/23/190729"/><summary type="html">このエントリは Theorem Prover Advent Calendar 2015 - Qiita の 23 日目です。 とは言ってみたものの、内容はいわゆる定理証明器の話ではありません。モデル検査器 Alloy を利用して古典命題論理のシークエント計算をモデル化し、証明図を自動生成させることを目標にします。 なお、以下で部分的に引用しているモデル定義の完全版は alloy_sequent.als · GitHub にアップロードしてあります。 モデル化してみる 命題論理式の実装 まず対象となる論理式を Alloy で記述します。 abstract sig Formula {} sig A…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/13/193508</id><title type="text">NGK2015B で AWS + Alloy について話してきました</title><updated>2015-12-13T19:35:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/13/193508"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2015B / 名古屋合同懇親会 2015 忘年会 で発表してきました。 AWS は形式手法の夢を見るか？ - モデル検査器 Alloy によるインフラ設計 from y_taka_23 www.slideshare.net 当日の動画は [3] NGK2015B（名古屋合同懇親会 2015 忘年会） - YouTube から見ることができます。 TL;DR AWS でインフラ運用中 でも設定が大人の都合でカオスになりがちだったりして辛い よろしい、ならば形式手法だ サンプルコードを動かしてみよう！ まずはインストールしてみる 公式ページ Alloy …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/06/22/162833</id><title type="text">Haskellの型クラスを活用する</title><updated>2015-06-22T16:30:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/06/22/162833"/><summary type="html">Haskellの型クラスは、うまく使えば高いパフォーマンスと抽象度を両立できる、優れた仕組みである。その使い方のコツは、決して理解の難しいものではない。 小さな性質、大きな恩恵 プログラマは大きなものを小さく見せがちだ。オブジェクト指向プログラミングに慣れている人がやりがちなアンチパターンとして、欲しい機能と、それを分割する基準が現実に寄りすぎていて、一つ一つが巨大というものがある。 普通のプログラミングではありえない例かもしれないが、たとえば家を作りたいことを考える。「ベッド」「箪笥」「台所」「冷蔵庫」「トイレ」「風呂」のように設備ごとに分けた抽象化をしたいと考えるだろう。確かにこれは理に適…</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/17/125213</id><title type="text">最近やったこと</title><updated>2015-04-20T18:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/17/125213"/><summary type="html">最近やったことのまとめ。 CPSのモナド変換子 モナド変換子の速さを測ってみる - モナドとわたしとコモナドfumieval.hatenablog.com で作ったmtl-cの塵を払い、Hackageにリリースした。 StateTやWriterTは中でタプルを作ったり壊したりしているが、CPS変換するとそれがなくなり、しかも(&gt;&gt;=)も最適化されるためそれなりのパフォーマンスの向上が期待できる。モナドガチユーザにおすすめだ。 補足 GHC 7.10.1現在、StateTに関しては最適化がうまく効くらしく、Lazy、Strict、CPS版のパフォーマンスはほぼ同じだった。一方、CPS版Write…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/173848</id><title type="text">Haskellでいかに多態を表すか</title><updated>2015-04-06T17:46:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/173848"/><summary type="html">オブジェクト指向を行使する心 ではオブジェクト指向の必要性と仕組みについて議論した。 インスタンスは言語によって様々な実装方法があるが、大きく分けて「クラス(処理)のインデックス」か「処理そのもの」のどちらかがインスタンスの内部に隠れている。 と述べたが、Haskellの場合、クラスのインデックスに基づいた表現では、インターフェイスは型クラス、クラスはインスタンス、インスタンスは存在量化された型の値に対応する。…といってもややこしいことこの上ないので、実装例を考えてみよう。 まず、問題となっている愚直な実装は、Haskellではこんな感じだ。 data World = World { … } …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/141523</id><title type="text">オブジェクト指向を行使する心</title><updated>2015-04-06T14:16:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/141523"/><summary type="html">今日、とあるツイートでプログラミングにおけるよくある問題が顕現していた。 プログラミングしてそうなサークル探したら、ゲーム公開してて、ソースコード公開されてたから見た。 pic.twitter.com/7W09sb9DFa— タコス(祭り) (@tacosufestival) 2015, 4月 4 奇妙な行コメントには目を瞑るとして、このコードは要約すれば以下のような処理を実現していることが窺える。 ゲームプログラミングでは、現在のシーンによって処理を切り替える必要がある。メニュー画面ならメニューの処理を、戦闘画面なら戦闘を、マップならマップの表示をそれぞれ行う。 現在のシーンの種類は変数によ…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
&#34;Haslell Platform 2014.2.0.0&#34;を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/20/155326</id><title type="text">モノイドと継続渡しの道具箱</title><updated>2015-03-21T06:54:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/20/155326"/><summary type="html">関数型言語Haskellにおいて、普通は計算の結果は関数の戻り値として扱うが、「結果を受け取る関数」 に渡すという継続渡しというスタイルもある。これは単なる冗長なやり方ではなく、様々な興味深い性質を持つ。 基本形は、aという値を渡すところを ∀r. (a -&gt; r) -&gt; r のような表現にする。たとえば、与えられた数の42倍を渡したいとき、そのまま\x -&gt; x * 42ではなく、\x f -&gt; f (x * 42)と書く。もちろんこれだけではありがたみが分からない。 さて、与えられた文字列の中のうち、大文字のアルファベットを取り出し、それがアルファベットの何番目か計算するプログラムを作りた…</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>May  2, 2020</updated><link href="https://haskell.jp/antenna"/><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html</id><title type="text">stack で管理されたプロジェクトを cabal でビルドするために</title><updated>May  2, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html"/><summary type="html">&lt;p&gt;Haskell のビルドツールといえば &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; です。ちょっと前までは &lt;strong&gt;cabal&lt;/strong&gt; より &lt;strong&gt;stack&lt;/strong&gt; の方が流行っていたのですが、最近は開発も落ち着いているようであまり動きがありません。それよりも &lt;strong&gt;cabal&lt;/strong&gt; の &lt;strong&gt;nix-style local build&lt;/strong&gt; が非常に使いやすく、近頃では &lt;strong&gt;stack&lt;/strong&gt; から &lt;strong&gt;cabal&lt;/strong&gt; に移行しているプロジェクトも多くあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; を使っていて改善したら良いなぁと思う部分としては、新しい &lt;strong&gt;GHC&lt;/strong&gt; やライブラリをすぐに使おうと思っても &lt;strong&gt;LTS&lt;/strong&gt; や &lt;strong&gt;nightly&lt;/strong&gt; に入っていないため使えなかったり、&lt;strong&gt;Backpack&lt;/strong&gt; が未だに使えなかったりするところでしょうか。&lt;/p&gt;
&lt;p&gt;ただ、ビルドの再現性という点においては &lt;strong&gt;stack&lt;/strong&gt; の方が優秀だと思っているので今は両方使っています。(&lt;strong&gt;index-state&lt;/strong&gt; と &lt;strong&gt;freeze&lt;/strong&gt; ファイルを組み合わせれば &lt;strong&gt;cabal&lt;/strong&gt; でも再現性が保証されそうな気がしますが、どうなんだろう)&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;stack&lt;/strong&gt; で管理されたプロジェクトを確実に &lt;strong&gt;cabal&lt;/strong&gt; でビルドするための方法についてまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt; に載ってた &lt;strong&gt;Stackage&lt;/strong&gt; の使い方の紹介でもあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;ここでは &lt;strong&gt;stack&lt;/strong&gt; で管理されていて、&lt;strong&gt;cabal&lt;/strong&gt; ファイルにバージョン制約が明記されていないという、良くあるシチュエーションを考えます。&lt;/p&gt;
&lt;p&gt;どんなプロジェクトでも良いのですが、具体的には &lt;a href=&#34;https://github.com/arcticmatt/dino-brick&#34;&gt;arcticmatt/dino-brick&lt;/a&gt; のようなプロジェクトです。&lt;code&gt;stack.yaml&lt;/code&gt; は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-8.23&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arcticmatt/dino-brick/blob/dino/dino.cabal#L16&#34;&gt;dino.cabal の build-depends&lt;/a&gt; には、ほとんどバージョンが明記されていません。(&lt;strong&gt;stack&lt;/strong&gt; の場合はスナップショットが決まると自動的にパッケージのバージョンが決まるため、明示する必要はあまり無いのです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプロジェクトを &lt;strong&gt;cabal&lt;/strong&gt; でビルドするためにはどうしたら良いんだろうか？というお話です。何もしなくてもビルドできるプロジェクトも結構あるんですが、ハマる時もあります・・・。&lt;/p&gt;
&lt;h2 id=&#34;package.yaml-から-cabal-ファイルを生成する&#34;&gt;package.yaml から cabal ファイルを生成する&lt;/h2&gt;
&lt;p&gt;リポジトリに &lt;code&gt;package.yaml&lt;/code&gt; しか含まれていない場合は、&lt;code&gt;package.yaml&lt;/code&gt; から &lt;strong&gt;cabal&lt;/strong&gt; ファイルを生成しましょう。&lt;/p&gt;
&lt;p&gt;以下のコマンドでビルドすることなくすぐに生成できます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --dry-run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回は &lt;code&gt;dino.cabal&lt;/code&gt; が最初からリポジトリに含まれているため何もしなくても良さそうですね。&lt;/p&gt;
&lt;h2 id=&#34;cabal-でビルドしてみよう&#34;&gt;cabal でビルドしてみよう&lt;/h2&gt;
&lt;p&gt;とりあえずビルドしてみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick

$ cabal update
Downloading the latest package list from hackage.haskell.org
To revert to previous state run:
    cabal v2-update &amp;#39;hackage.haskell.org,2020-01-19T06:12:36Z&amp;#39;

$ cabal build
...

src/UI.hs:142:56: error:
    • Couldn&amp;#39;t match expected type ‘App s0 e0 n0’
                  with actual type ‘Game’
    • In the fourth argument of ‘customMain’, namely ‘g’
      In a stmt of a &amp;#39;do&amp;#39; block:
        customMain (V.mkVty V.defaultConfig) (Just chan) app g
      In the expression:
        do chan &amp;lt;- newBChan 10
           forkIO
             $ forever
                 $ do modifyIORef counter (+ 1)
                      c&amp;#39; &amp;lt;- readIORef counter
                      ....
           g &amp;lt;- initGame 0
           customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |
142 |   customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |                                                        ^
cabal: Failed to build dino-0.1.0.0 (which is required by exe:dino from
dino-0.1.0.0).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーがいくつも出てしまいました。上記の結果はそのうちの最後の1つだけを表示しています。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;stack build&lt;/code&gt; だとビルドできます。&lt;/p&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; だとビルドできて、&lt;strong&gt;cabal&lt;/strong&gt; だと失敗してしまう原因はビルド時にパッケージのバージョンにあります。どのパッケージが原因かと言うと、今回は &lt;a href=&#34;https://hackage.haskell.org/package/brick&#34;&gt;brick&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; の場合は &lt;a href=&#34;https://www.stackage.org/lts-8.23&#34;&gt;LTS-8.23&lt;/a&gt; に含まれるバージョンを利用することになるので &lt;a href=&#34;https://www.stackage.org/lts-8.23/package/brick-0.17.2&#34;&gt;brick-0.17.2&lt;/a&gt; を利用します。&lt;/p&gt;
&lt;p&gt;一方で &lt;strong&gt;cabal&lt;/strong&gt; の場合は &lt;code&gt;cabal update&lt;/code&gt; を最後に実行した時の &lt;strong&gt;Hackage&lt;/strong&gt; の最新バージョンが利用されます。これは明示的なバージョン制約が &lt;strong&gt;cabal&lt;/strong&gt; ファイルに記述されていないためです。そのため &lt;a href=&#34;https://hackage.haskell.org/package/brick-0.50.1&#34;&gt;brick-0.50.1&lt;/a&gt; などが利用されます。&lt;/p&gt;
&lt;p&gt;バージョンアップによって後方互換性が保たれている場合は何も考えずにビルドが通るのですが、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンが変わるタイミングなどでは破壊的変更が含まれている場合も多いため、どこかでビルドが壊れます。&lt;/p&gt;
&lt;p&gt;今回のプロジェクトでは &lt;a href=&#34;https://github.com/jtdaugherty/brick/blob/master/CHANGELOG.md#047&#34;&gt;brick-0.47&lt;/a&gt; の変更によって &lt;code&gt;Brick.Main.customMain&lt;/code&gt; の型が変わり、その結果ビルドエラーになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.46&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;        &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.47&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、原因が特定できれば、修正は簡単です。&lt;code&gt;brick&lt;/code&gt; にバージョン制約を付けるだけです。(0.47 でビルドできるようにコードを修正する方法ももちろん考えられます)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick == 0.46       -- 破壊的変更が起きる前のバージョンを指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトはこれで上手く動きました。&lt;/p&gt;
&lt;p&gt;しかし、どのバージョンで壊れたかどうかを毎回調べるのはかなりつらいです。そのため、もっと良い方法として &lt;code&gt;LTS-8.23&lt;/code&gt; のバージョン制約を使ってみましょう。&lt;/p&gt;
&lt;h2 id=&#34;cabal-freeze-コマンド&#34;&gt;cabal freeze コマンド&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; には &lt;code&gt;cabal freeze&lt;/code&gt; というコマンドがあります。アプリケーション開発で便利な機能です。&lt;/p&gt;
&lt;p&gt;コマンドを実行すると &lt;code&gt;cabal.project.freeze&lt;/code&gt; というファイルが作られます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal freeze
Wrote freeze file: dino-brick/cabal.project.freeze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルは一言でいえば &lt;code&gt;npm&lt;/code&gt; の &lt;code&gt;package-lock.json&lt;/code&gt; ファイルと同じです。ビルドの再現性を保証するためのものです。&lt;/p&gt;
&lt;p&gt;例えば、先ほどの &lt;code&gt;dino.cabal&lt;/code&gt; ファイルで &lt;code&gt;brick&lt;/code&gt; のバージョンを &lt;code&gt;^&amp;gt;= 0.46&lt;/code&gt; のように指定した場合を考えてみましょう。この指定方法は &lt;code&gt;brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47&lt;/code&gt; と同じ意味になります。(&lt;strong&gt;cabal 2.0&lt;/strong&gt; から利用可能な記法です)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.46      -- brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47 と同じ意味
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば、会社のデスクトップPCでビルドしたときに &lt;code&gt;brick-0.46&lt;/code&gt; がインストールされたとしましょう。&lt;/p&gt;
&lt;p&gt;次の日の朝、バグフィックスされた &lt;code&gt;brick-0.46.1&lt;/code&gt; が &lt;strong&gt;Hackage&lt;/strong&gt; にアップロードされました。&lt;/p&gt;
&lt;p&gt;その日の午後、自宅のノートPCで &lt;code&gt;cabal update &amp;amp;&amp;amp; cabal build&lt;/code&gt; を行った場合、インストールされるのは &lt;code&gt;brick-0.46.1&lt;/code&gt; になります。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;brick ^&amp;gt;= 0.46&lt;/code&gt; という指定方法では環境ごとに同じバージョンが使われていることを保証できません。そのため、&lt;code&gt;cabal freeze&lt;/code&gt; コマンドで &lt;code&gt;cabal.project.freeze&lt;/code&gt; を生成し、コマンドを実行した環境で実際に利用されている具体的なバージョンを記録しておきます。これは &lt;strong&gt;stack&lt;/strong&gt; のスナップショットと同じようなものです。&lt;/p&gt;
&lt;p&gt;実際に生成されたファイルの中身はこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;constraints: any.Cabal ==2.4.0.1,
             any.MonadRandom ==0.5.1.2,
             any.QuickCheck ==2.13.2,
             QuickCheck +templatehaskell,
             any.StateVar ==1.2,
             any.adjunctions ==4.4,
             any.ansi-terminal ==0.10.2,
             ansi-terminal -example,
             any.ansi-wl-pprint ==0.6.9,
             ansi-wl-pprint -example,
             any.array ==0.5.3.0,
             any.base ==4.12.0.0,
             any.base-orphans ==0.8.1,
             any.bifunctors ==5.5.6,
             bifunctors +semigroups +tagged,
             any.binary ==0.8.6.0,
             any.binary-orphans ==1.0.1,
             any.blaze-builder ==0.4.1.0,
             any.brick ==0.46,
             brick -demos,
             any.bytes ==0.16,
             bytes +test-doctests,
             any.bytestring ==0.10.8.2,
             any.cabal-doctest ==1.0.8,
             any.call-stack ==0.2.0,
             any.case-insensitive ==1.2.1.0,
             any.cereal ==0.5.8.1,
             cereal -bytestring-builder,
             any.colour ==2.3.5,
             any.comonad ==5.0.6,
             comonad +containers +distributive +test-doctests,
             any.config-ini ==0.2.4.0,
             config-ini -enable-doctests,
             any.containers ==0.6.0.1,
             any.contravariant ==1.5.2,
             contravariant +semigroups +statevar +tagged,
             any.data-clist ==0.1.2.3,
             any.deepseq ==1.4.4.0,
             any.directory ==1.3.3.0,
             any.distributive ==0.6.1,
             distributive +semigroups +tagged,
             any.dlist ==0.8.0.7,
             any.exceptions ==0.10.4,
             exceptions +transformers-0-4,
             any.filepath ==1.4.2.1,
             any.free ==5.1.3,
             any.ghc-boot-th ==8.6.5,
             any.ghc-prim ==0.5.3,
             any.hashable ==1.3.0.0,
             hashable -examples +integer-gmp +sse2 -sse41,
             any.integer-gmp ==1.0.2.0,
             any.integer-logarithms ==1.0.3,
             integer-logarithms -check-bounds +integer-gmp,
             any.invariant ==0.5.3,
             any.kan-extensions ==5.2,
             any.lens ==4.18.1,
             lens -benchmark-uniplate -dump-splices +inlining -j -old-inline-pragmas -safe +test-doctests +test-hunit +test-properties +test-templates +trustworthy,
             any.linear ==1.20.9,
             linear -herbie +template-haskell,
             any.megaparsec ==7.0.5,
             megaparsec -dev,
             any.microlens ==0.4.11.2,
             any.microlens-mtl ==0.2.0.1,
             any.microlens-th ==0.4.3.2,
             any.mtl ==2.2.2,
             any.optparse-applicative ==0.15.1.0,
             any.parallel ==3.2.2.0,
             any.parsec ==3.1.13.0,
             any.parser-combinators ==1.2.1,
             parser-combinators -dev,
             any.pretty ==1.1.3.6,
             any.primitive ==0.7.0.0,
             any.process ==1.6.5.0,
             any.profunctors ==5.5.1,
             any.random ==1.1,
             any.reflection ==2.1.5,
             reflection -slow +template-haskell,
             any.rts ==1.0,
             any.scientific ==0.3.6.2,
             scientific -bytestring-builder -integer-simple,
             any.semigroupoids ==5.3.4,
             semigroupoids +comonad +containers +contravariant +distributive +doctests +tagged +unordered-containers,
             any.semigroups ==0.19.1,
             semigroups +binary +bytestring -bytestring-builder +containers +deepseq +hashable +tagged +template-haskell +text +transformers +unordered-containers,
             any.splitmix ==0.0.3,
             splitmix -optimised-mixer +random,
             any.stm ==2.5.0.0,
             any.tagged ==0.8.6,
             tagged +deepseq +transformers,
             any.template-haskell ==2.14.0.0,
             any.terminfo ==0.4.1.2,
             any.text ==1.2.3.1,
             any.text-zipper ==0.10.1,
             any.th-abstraction ==0.3.1.0,
             any.time ==1.8.0.2,
             any.transformers ==0.5.6.2,
             any.transformers-base ==0.4.5.2,
             transformers-base +orphaninstances,
             any.transformers-compat ==0.6.5,
             transformers-compat -five +five-three -four +generic-deriving +mtl -three -two,
             any.type-equality ==1,
             any.unix ==2.7.2.2,
             any.unordered-containers ==0.2.10.0,
             unordered-containers -debug,
             any.utf8-string ==1.0.1.1,
             any.vector ==0.12.0.3,
             vector +boundschecks -internalchecks -unsafechecks -wall,
             any.void ==0.7.3,
             void -safe,
             any.vty ==5.26,
             any.word-wrap ==0.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルと &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; ファイルでバージョンが異なる場合は &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; のバージョンが優先されるようです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.47      -- ビルドが失敗するバージョン制約を指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino

$ cabal freeze
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そもそも制約を満たさない場合は &lt;code&gt;cabal freeze&lt;/code&gt; が失敗するみたいです。&lt;/p&gt;
&lt;h2 id=&#34;スナップショットに対応した-freeze-ファイルを使おう&#34;&gt;スナップショットに対応した freeze ファイルを使おう&lt;/h2&gt;
&lt;p&gt;さて、それではリポジトリを &lt;strong&gt;clone&lt;/strong&gt; した直後に戻しましょう。こんな状態です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の後ろに &lt;code&gt;cabal.config&lt;/code&gt; を付けた &lt;a href=&#34;https://www.stackage.org/lts-8.23/cabal.config&#34;&gt;https://www.stackage.org/lts-8.23/cabal.config&lt;/a&gt; にアクセスすると &lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルとして利用可能なテキストファイルが表示されます。&lt;/p&gt;
&lt;p&gt;これをそのまま保存してビルドするだけで全てが上手くいきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl https://www.stackage.org/lts-8.23/cabal.config &amp;gt; cabal.project.freeze
$ cabal build
[__2] fail (backjumping, conflict set: base, dino, optparse-applicative)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: optparse-applicative, base, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おっと忘れていました。&lt;code&gt;LTS-8.23&lt;/code&gt; は &lt;code&gt;GHC-8.0.2&lt;/code&gt; でしたね。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;with-compiler&lt;/code&gt; の頭文字) オプションで利用する &lt;strong&gt;GHC&lt;/strong&gt; を切り替えてビルドしましょう！&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build -w ghc-8.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; でビルドが通っていれば、&lt;strong&gt;cabal&lt;/strong&gt; でも通る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cabal freeze&lt;/code&gt; を使うとスナップショットのようにバージョンを記録できる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の最後に &lt;code&gt;cabal.config&lt;/code&gt; を付けると &lt;strong&gt;freeze&lt;/strong&gt; ファイルを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-freeze&#34;&gt;5.4.6. cabal v2-freeze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html</id><title type="text">Ap Monoid</title><updated>March  3, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html"/><summary type="html">&lt;p&gt;まずは以下の関数 &lt;code&gt;f&lt;/code&gt; を考えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、この &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; をもっと短くカッコよく書けないかな？と考えます。&lt;/p&gt;
&lt;p&gt;何となく &lt;code&gt;mconcat&lt;/code&gt; で置き換えれそうな気がしたんですよ・・・。 だけど、動作が変わってしまうんです・・・。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題です。なぜ &lt;code&gt;mconcat&lt;/code&gt; にすると結果が異なるのでしょうか？ また、&lt;code&gt;f = fmap concat . sequence&lt;/code&gt; という定義を畳み込みを使って書き直すことはできるのでしょうか？&lt;/p&gt;
&lt;p&gt;このことを考えていたら &lt;code&gt;Ap&lt;/code&gt; モノイドにたどり着きました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;関数-f-は何を行っているのか&#34;&gt;関数 f は何を行っているのか？&lt;/h2&gt;
&lt;p&gt;まずは &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; がどのように動作するか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e2&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは簡単ですね。では &lt;code&gt;f = mconcat&lt;/code&gt; の場合も確認します。(ここでの定義はデフォルト実装の &lt;code&gt;mconcat = foldr (&amp;lt;&amp;gt;) mempty&lt;/code&gt; を使います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ココ!!!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうやら &lt;code&gt;mconcat&lt;/code&gt; に変更すると &lt;code&gt;Just [3,4] &amp;lt;&amp;gt; Nothing&lt;/code&gt; の計算で結果が変わってくるということがわかります。 つまり、求めている計算は &lt;code&gt;Monoid&lt;/code&gt; の演算ではなく &lt;code&gt;Monad (Applicative)&lt;/code&gt; の &lt;code&gt;Effect&lt;/code&gt; なのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 雰囲気でいえば、こんな感じになれば良いかも？&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- mconcat で行われる演算&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 期待しているのは Maybe モナドの Effect&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;畳み込んでみる&#34;&gt;畳み込んでみる&lt;/h2&gt;
&lt;p&gt;何となく方向性は掴めました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算の途中で出てきたこの形を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (とりあえず) こうしたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;形だけ見れば &lt;code&gt;foldr (&amp;gt;&amp;gt;) mempty&lt;/code&gt; とすれば良さげです。試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;f e2&lt;/code&gt; は良い感じですが、今度は &lt;code&gt;f e1&lt;/code&gt; の結果がおかしくなりました・・・。 それはそうですよね。&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; で畳み込んでいるため、どこかで &lt;code&gt;Nothing&lt;/code&gt; が出てきたら計算全体は &lt;code&gt;Nothing&lt;/code&gt; になりますよね。&lt;/p&gt;
&lt;p&gt;これってつまり、&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; と &lt;code&gt;リスト&lt;/code&gt; モノイドの演算の両方が必要ってことになりますね・・・。 オリジナルの &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; の定義も確かにそんな感じです。&lt;/p&gt;
&lt;h2 id=&#34;自分で定義しよう&#34;&gt;自分で定義しよう！&lt;/h2&gt;
&lt;p&gt;もう一度整理しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算対象のリスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;[ m_a1, m_a2, m_a3, me ]&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- まずは Effect を実行したい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;m_a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; me&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- m_a1, m_a2, m_a3, me の結果をそれぞれ a1, a2, a3, e として&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Monoid の演算を行いたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 具体的に、値が全部 Just でラップされていると考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どこか一箇所に Nothing がある (この場合 m_a2 が Nothing) と考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 以下のようになってはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- こんな感じで計算が進むモノイドが欲しい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e)&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-32&#34;&gt;&lt;a href=&#34;#cb8-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-33&#34;&gt;&lt;a href=&#34;#cb8-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-34&#34;&gt;&lt;a href=&#34;#cb8-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-35&#34;&gt;&lt;a href=&#34;#cb8-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような挙動を行う &lt;code&gt;Monoid&lt;/code&gt; を新しく定義してみます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSequence ::&lt;/span&gt; m a }&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  ma &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; mb &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence ma&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence mb&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に確かめてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (&amp;lt;&amp;gt;) に変更した。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1)&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2)&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;期待通りに動いていますね。&lt;code&gt;foldMap&lt;/code&gt; を使うともう少し短くかけます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ap-モノイド&#34;&gt;Ap モノイド&lt;/h2&gt;
&lt;p&gt;ここまでで定義した &lt;code&gt;Sequence&lt;/code&gt; モノイドは &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Ap&#34;&gt;Ap&lt;/a&gt; という名前で定義されています。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;Monad&lt;/code&gt; で話を進めましたが、実際は &lt;code&gt;Applicative&lt;/code&gt; でも成り立ちます。 最初の例を &lt;code&gt;Ap&lt;/code&gt; モノイドで置き換えれば以下のようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ap&lt;/code&gt; モノイドの使い道がわかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2019/02/monoid-for-haskellers/&#34;&gt;Haskellerのためのモノイド完全ガイド&lt;/a&gt; でも解説されているので、気になった方はこちらもどうぞ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmap fold . sequenceA&lt;/code&gt; と &lt;code&gt;getAp . foldMap Ap&lt;/code&gt; を比較すると型クラス制約が若干違う&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequenceA&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; sequenceA ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Traversable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html</id><title type="text">cabal の build-tool-depends フィールド</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html"/><summary type="html">&lt;p&gt;cabal の &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;build-tool-depends&lt;/a&gt; というフィールドが便利だったので紹介します。&lt;/p&gt;
&lt;p&gt;テストを書くときに &lt;a href=&#34;https://hackage.haskell.org/package/hspec-discover&#34;&gt;hspec-discover&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/tasty-discover&#34;&gt;tasty-discover&lt;/a&gt; などを使う場合、このフィールドを設定しておくことで依存している実行ファイルを自動的にダウンロードして使ってくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal --version
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library &lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;サンプルプロジェクトの構成&#34;&gt;サンプルプロジェクトの構成&lt;/h2&gt;
&lt;p&gt;全体のディレクトリ構成は以下のようになっているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── example.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    ├── LibSpec.hs
    └── Spec.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それぞれのファイルの内容は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- src/Lib.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; (someFunc) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;someFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;someFunc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/LibSpec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LibSpec&lt;/span&gt; (spec) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;spec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Spec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/Spec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;-- example.cabal
cabal-version: 2.4
name:          example
version:       0.1.0.0

library
  exposed-modules:  Lib
  hs-source-dirs:   src
  build-depends:    base &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
  default-language: Haskell2010

test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような状況で &lt;code&gt;cabal&lt;/code&gt; や &lt;code&gt;stack&lt;/code&gt; がどのように振舞うか見ていきましょう。&lt;/p&gt;
&lt;p&gt;現時点では &lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルは存在していません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ hspec-discover
bash: hspec-discover: コマンドが見つかりません&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stack&#34;&gt;stack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルが無い状態で &lt;code&gt;stack test&lt;/code&gt; を実行すると以下のようにエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のようにインストールした場合は、問題無く動作します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; がファイルを自動的に見つけてくれたので、コンパイルエラーになりました。&lt;/p&gt;
&lt;p&gt;次に進む前に実行ファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.local/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-depends-に追加した場合&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルの &lt;code&gt;build-depends&lt;/code&gt; に追加した場合はどうなるのでしょうか？&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example
    , hspec-discover  -- 新しく追加した

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では &lt;code&gt;stack test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルがローカル環境に存在しなくても自動的に &lt;code&gt;hspec-discover&lt;/code&gt; が動作しています。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; プロジェクトでは &lt;code&gt;hspec-discover&lt;/code&gt; を依存関係 (&lt;code&gt;build-depends&lt;/code&gt;) に追加するだけで良い感じにテストが進みます。&lt;/p&gt;
&lt;h2 id=&#34;cabal&#34;&gt;cabal&lt;/h2&gt;
&lt;p&gt;同様に &lt;code&gt;cabal&lt;/code&gt; の場合も確かめてみましょう。(&lt;code&gt;example.cabal&lt;/code&gt; ファイルから &lt;code&gt;hspec-discover&lt;/code&gt; を削除しておきます)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と同様のエラーになりました。&lt;/p&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合-1&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に &lt;code&gt;cabal test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の場合と同じように、ちゃんと動いていますね。&lt;/p&gt;
&lt;h3 id=&#34;build-depends-に追加した場合-1&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;まずはバイナリファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.cabal/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルは先ほどと同じように &lt;code&gt;build-depends&lt;/code&gt; に &lt;code&gt;hspec-discover&lt;/code&gt; を追加した状態です。&lt;/p&gt;
&lt;p&gt;テストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と異なる結果になりましたね・・・。僕は今までこの結果への対処法は &lt;code&gt;hspec-discover&lt;/code&gt; をインストールしておくしかないと思っていました。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;build-tool-depends&lt;/code&gt; をフィールドを利用することで &lt;code&gt;stack&lt;/code&gt; と同じ挙動になるということがわかりました。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;build-tool-depends-に追加した場合&#34;&gt;build-tool-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; に追加するとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  build-tool-depends:                 -- 新たに追加した行
    , hspec-discover:hspec-discover   -- 新たに追加した行

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-depends&lt;/code&gt; が &lt;code&gt;&amp;lt;package_name&amp;gt;&lt;/code&gt; という指定方法でしたが、&lt;code&gt;build-tool-depends&lt;/code&gt; では &lt;code&gt;&amp;lt;package_name&amp;gt;:&amp;lt;exe_name&amp;gt;&lt;/code&gt; という指定方法になっている点に注意です。&lt;/p&gt;
&lt;p&gt;バージョン制約が必要な場合は &lt;code&gt;build-depends&lt;/code&gt; と同じように指定できます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;hspec-discover:hspec-discover ^&amp;gt;=2.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでテストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;stack&lt;/code&gt; と同じような挙動になりました！happy!&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな便利なフィールドがあるなんて全然知りませんでした・・・。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; を指定しておけば、実行ファイルが無くても大丈夫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; は初心者に優しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/ghc/blog/20200116-ghc-8.8.2-released.html&#34;&gt;GHC-8.8.2 がリリース&lt;/a&gt;されましたね。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;cabal user guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html</id><title type="text">Memo - unexpected At most 9 numbers are allowed per version number part</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html"/><summary type="html">&lt;p&gt;GHC-8.8 への移行中に GitHub Actions で以下のようなエラーが発生しました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;proj/dist-newstyle/src/barbies-6f24224e2c384e2f/barbies.cabal:2:31: error:
unexpected At most 9 numbers are allowed per version number part

    1 | name:           barbies
    2 | version:        1.999999999999
      |                               ^

##[error]Process completed with exit code 1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初めて見るエラーだったのでメモとして残しておきます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;エラーが発生した理由&#34;&gt;エラーが発生した理由&lt;/h2&gt;
&lt;p&gt;エラー発生の原因はたぶんこれです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6386&#34;&gt;Limit version number parts to be 9 digits #6386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; に含まれるはずなので &lt;code&gt;cabal-3.0.0.0&lt;/code&gt; では関係ないと思っていたのですが、&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/commit/73a7adcb8bf8204dd81de35d014c967b76040526/checks?check_suite_id=384131716&#34;&gt;GitHub Actions のログ&lt;/a&gt;を見るとわかるとおり、GitHub Actions では &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; がインストールされていました。(何故?&lt;a href=&#34;https://github.com/haskell/cabal/issues/6328&#34;&gt;cabal-install 3.0.1.0 release planning #6328&lt;/a&gt; はまだ閉じられてない)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
The Glorious Glasgow Haskell Compilation System, version 8.6.5
cabal-install version 3.0.1.0
compiled using version 3.0.1.0 of the Cabal library 
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また &lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell&lt;/a&gt; の README を見る限り &lt;code&gt;cabal&lt;/code&gt; のバージョン指定方法は &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;2.4&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt; しか無いので &lt;code&gt;3.0.0.0&lt;/code&gt; を使う方法がありません・・・。&lt;/p&gt;
&lt;h2 id=&#34;とりあえずの解決策&#34;&gt;とりあえずの解決策&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jcpetruzza/barbies/blob/0b09a4235cd719aa3df9f9467f3e8fee81446bc8/barbies.cabal&#34;&gt;barbies.cabal&lt;/a&gt; のバージョン番号が長すぎるために起きているエラーなので、fork して一時的にバージョンを短くして対応しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name:           barbies
version:        1.999999999999  -- 変更前
version:        1.999999999     -- 変更後&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;もうすぐ GHC-8.10.1 がリリースされそうですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/status/ghc-8.10.1&#34;&gt;GHC plans for 8.10.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html</id><title type="text">HUnit で日本語が文字化けする問題</title><updated>February 19, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html"/><summary type="html">&lt;p&gt;&lt;code&gt;HUnit&lt;/code&gt; で日本語を扱おうとすると、以下のように文字化けしますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は簡単に回避できるので、その方法を紹介します。やり方は &lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt; の方法そのまんまです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;問題が発生している原因&#34;&gt;問題が発生している原因&lt;/h2&gt;
&lt;p&gt;今回使うコードはとてもシンプルです。依存しているパッケージは &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードを実行すると、以下のような結果になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; bad&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:                              &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は何故発生するかと言うと、&lt;code&gt;HUnit&lt;/code&gt; 内部で &lt;code&gt;show&lt;/code&gt; 関数を利用しているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような文字化けに対応するには &lt;a href=&#34;https://hackage.haskell.org/package/unicode-show&#34;&gt;unicode-show&lt;/a&gt; パッケージの &lt;strong&gt;ushow&lt;/strong&gt; 関数が便利です。より詳しい紹介は「&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit --package unicode-show ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; ushow &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということで、&lt;strong&gt;HUnit&lt;/strong&gt; を &lt;strong&gt;ushow&lt;/strong&gt; を使うようにしてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策&lt;/h2&gt;
&lt;p&gt;やり方はとても簡単です。&lt;strong&gt;(@?=)&lt;/strong&gt; を以下のように再定義するだけです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit.Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード全体は以下の通りです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;good ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;good &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみましょう！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; good&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで他の関数も同様に定義してしまえば良い感じです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;日本語の文字化けで困っている人向け情報でした。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iwamototakashi.hatenadiary.jp/entry/20100722/p1&#34;&gt;HUnitで日本語を出力してみる→成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html</id><title type="text">cabal install コマンドについて</title><updated>April  3, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html"/><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; と全く同じ動作をする &lt;strong&gt;cabal&lt;/strong&gt; コマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今回利用した &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; のバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library 

$ stack --version
Version 2.1.3, Git revision 636e3a759d51127df2b62f90772def126cdf6d1f (7735 commits) x86_64 hpack-0.31.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この記事では &lt;code&gt;stack install&lt;/code&gt; コマンドと &lt;code&gt;cabal install&lt;/code&gt; コマンドの挙動の違いなどについて調査した結果等をまとめています。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;プロジェクトの構成&#34;&gt;プロジェクトの構成&lt;/h2&gt;
&lt;p&gt;例えば、プロジェクトが以下のような構成になっていて、&lt;strong&gt;executable&lt;/strong&gt; (mainExe1, mainExe2, subExe1, subExe2) が定義されているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── app
│   ├── Main1.hs
│   └── Main2.hs
├── cabal.project
├── stack.yaml
├── subs
│   ├── pkg1
│   │   ├── app
│   │   │   └── Main.hs
│   │   └── pkg1.cabal
│   └── pkg2
│       ├── app
│       │   └── Main.hs
│       └── pkg2.cabal
└── app.cabal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/tree/master/sample-code/2020/03-25/&#34;&gt;プロジェクトのコード&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stack-install-と-cabal-install-の違い&#34;&gt;stack install と cabal install の違い&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;　&lt;/th&gt;
&lt;th&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;インストール方法&lt;/td&gt;
&lt;td&gt;コピー&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;シンボリックリンク&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;インストール先ディレクトリの指定オプション&lt;/td&gt;
&lt;td&gt;&lt;code&gt;local-bin-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--installdir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;cabal-install&#34;&gt;cabal install&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal install&lt;/code&gt; に指定可能なコマンドをいくつか試してみて、実際に何がインストールされるか一覧にしました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;*注意点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install&lt;/code&gt; や &lt;code&gt;stack install .&lt;/code&gt; の挙動など、いくつか &lt;strong&gt;stack&lt;/strong&gt; と異なる場合があるので注意が必要です。&lt;/li&gt;
&lt;li&gt;注意点: 全てのパッケージに &lt;strong&gt;executable&lt;/strong&gt; が含まれている場合に限り実行可能です。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install all&lt;/code&gt; で &lt;strong&gt;executable&lt;/strong&gt; が含まれていないパッケージがある場合は以下のようなエラーになります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cabal: Cannot build the executables in the package pkg2 because it does not
contain any executables. Check the .cabal file for the package and make sure
that it properly declares the components that you expect.&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; に相当するコマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stack-install&#34;&gt;stack install&lt;/h3&gt;
&lt;p&gt;同様に &lt;code&gt;stack install&lt;/code&gt; も確認しました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;エラー 1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install . pkg1 pkg2
The following errors occurred while parsing the build targets:
- The package pkg1 was specified in multiple, incompatible ways: . pkg1
- The package pkg2 was specified in multiple, incompatible ways: . pkg2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー 2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install all
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: all
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;その他の指定方法&#34;&gt;その他の指定方法&lt;/h3&gt;
&lt;h4 id=&#34;cabal&#34;&gt;cabal&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install app:exe
cabal: Unknown target &amp;#39;app:exe&amp;#39;.
The package app has no component &amp;#39;exe&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;stack&#34;&gt;stack&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install app:exe
Error parsing targets: Component exe does not exist in package app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install exe:mainExe1
Error parsing targets: Unknown local package: exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー3&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install mainExe1
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: mainExe1
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-install-で良く使うオプション&#34;&gt;cabal install で良く使うオプション&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 47%&#34; /&gt;
&lt;col style=&#34;width: 52%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--installdir=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インストール先のパスを指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;--install-method=copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボリックリンクではなく、実体がコピーされる。&lt;br&gt;&lt;strong&gt;Docker&lt;/strong&gt; にバイナリをコピーする際や &lt;strong&gt;Windows&lt;/strong&gt; 環境などで利用することがあります。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すでに実行ファイルが存在する場合でも、常に上書きします。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt; を毎回指定するのが面倒な場合は&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal user-config update -a overwrite-policy:always&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というコマンドで &lt;code&gt;~/.cabal/config&lt;/code&gt; に設定できます。&lt;/p&gt;
&lt;h2 id=&#34;で変更になる点など&#34;&gt;3.2.0.0 で変更になる点など&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6519/files&#34;&gt;Copy on windows #6519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; 環境において &lt;code&gt;cabal install&lt;/code&gt; の際のデフォルトの挙動が変更されます。シンボリックリンクが作成できない場合は自動的にコピーになります。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6428&#34;&gt;Implement cabal install -z #6428&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルのプロジェクト設定を無視するオプション &lt;code&gt;-z&lt;/code&gt;, &lt;code&gt;--ignore-project&lt;/code&gt; が追加されます。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6576&#34;&gt;Resolve #6369 and #6393: Allow cabal v2-install pkgname:exename or http://example.com/package.tar.gz(#sha256=abcde…) #6576&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install &amp;#39;https://hackage.haskell.org/package/cabal-fmt-0.1.2/cabal-fmt-0.1.2.tar.gz#sha256=aae556efbcaddfd65c6a1c1811b122b0d8c8d00624c8c2e36aabb5e9f9ea9840&amp;#39;&lt;/code&gt;&lt;/pre&gt;</summary></entry><entry><id>https://qiita.com/tim-semba/items/3fabd61d96d457653227</id><title type="text">Haskell でループする (2)</title><updated>2020-10-09T21:10:42+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tim-semba/items/3fabd61d96d457653227"/></entry><entry><id>https://qiita.com/satosystems/items/09834a174865d3cebef7</id><title type="text">モダンな言語のバイナリサイズとコンパイル時間について調べてみた</title><updated>2020-10-09T20:28:15+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/satosystems/items/09834a174865d3cebef7"/></entry><entry><id>https://qiita.com/yoshii0110/items/3bb9a06c0dee20f4fd62</id><title type="text">Haskell開発環境構築 for Mac</title><updated>2020-10-08T23:16:33+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yoshii0110/items/3bb9a06c0dee20f4fd62"/></entry><entry><id>https://qiita.com/ytaki0801/items/dcb0fe48cbeab30ac40d</id><title type="text">簡易LISP処理系の実装例【各言語版まとめ】</title><updated>2020-10-07T21:04:52+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ytaki0801/items/dcb0fe48cbeab30ac40d"/></entry><entry><id>https://qiita.com/ytaki0801/items/b8d7d4c778fe98966ce5</id><title type="text">『括弧文字列』簡易パーサ実装例まとめ</title><updated>2020-10-06T22:04:35+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ytaki0801/items/b8d7d4c778fe98966ce5"/></entry><entry><id>https://qiita.com/SuuCH/items/950199b6ead0cc89c132</id><title type="text">Stackでyesodを使う</title><updated>2020-10-04T06:01:08+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/SuuCH/items/950199b6ead0cc89c132"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2020/10/02/204554</id><title type="text">自動printfデバッグ</title><updated>2020-10-02T22:49:54+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2020/10/02/204554"/><summary type="html">関数をデバッグするために、引数と戻り値をそれぞれ表示するというのを誰しもやったことがあると思う。今回はそれを自動化するからくりをHaskellで実装してみる。 目標となるのは、関数が与えられたとき、その引数と結果をターミナルに出力する関数に変換する高階関数、probe :: Traceable a =&gt; String -&gt; a -&gt; aである。 testDelay :: Double -&gt; Double -&gt; IO () testDelay dur dur&#39; = threadDelay $ round $ (dur + dur&#39;) * 1000000 *Probe&gt; probe &#34;testDe…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/09/26/shake_%2B_lucid_%2B_hint_%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E7%94%9F%E6%88%90</id><title type="text">shake + lucid + hint で静的ウェブサイト生成</title><updated>2020-09-27T15:53:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/09/26/shake_%2B_lucid_%2B_hint_%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E7%94%9F%E6%88%90"/><summary type="html">The English version is at Dev. 同人活動用のウェブサイトがあって今までは Jekyll で生成していました。これを Shake + Lucid + Hint で作成した生成器に置き換えました。 doujin.kakkun61.com shakebuild.com hackage.haskell.org hackage.haskell.org ソースコードはこちらです。 github.com 経緯 GitHub Pages をホストに選択したので最初は自然に Jekyll を選びました。レールに乗っているうちはいいのですが外れたことをしようとすると難しくなってきまし…</summary></entry><entry><id>https://qiita.com/Pctg-x8/items/37bb2a15d33bbe82ceb8</id><title type="text">HaskellでもDirectX12したい！</title><updated>2020-09-23T10:42:56+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Pctg-x8/items/37bb2a15d33bbe82ceb8"/></entry><entry><id>https://qiita.com/masaki_shoji/items/b384eed4595df3423e0c</id><title type="text">関数型プログラミング入門~Contravariantについて~</title><updated>2020-09-21T05:58:29+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/masaki_shoji/items/b384eed4595df3423e0c"/></entry><entry><id>https://qiita.com/ytaki0801/items/bdd1a9c1f4e108b4bca0</id><title type="text">簡易LISP処理系の実装例（Haskell版）</title><updated>2020-09-19T19:55:48+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ytaki0801/items/bdd1a9c1f4e108b4bca0"/></entry><entry><id>https://qiita.com/ktaro011/items/b2cb29ee92e9d25b11f2</id><title type="text">BWT（Haskellでのコーディング練習）</title><updated>2020-09-18T17:01:14+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ktaro011/items/b2cb29ee92e9d25b11f2"/></entry><entry><id>https://qiita.com/Nipper1357/items/4b4b9d60d8067fcf238c</id><title type="text">Haskellの実行　まずはHello World</title><updated>2020-09-18T02:01:34+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Nipper1357/items/4b4b9d60d8067fcf238c"/></entry><entry><id>https://blog.miz-ar.info/2020/09/techbookfest9/</id><title type="text">技術書典9に「浮動小数点数小話」を出します</title><updated>2020-09-13T09:17:29Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2020/09/techbookfest9/"/><summary type="html">昨日からオンラインで「技術書典9」が始まっています。昨今のアレで今回はオンラインです。だめぽラボでは1年ぶりに技術書典に出展しています。 今回は既刊「Haskellで戦う競技プログラミング」の改訂第2版を出したほか、新刊 [&amp;#8230;]</summary></entry><entry><id>https://qiita.com/transnano/items/a03283777cfdfb9e794e</id><title type="text">GitHub ActionsのHadolint Actionを使って安全なDockerfileを運用する</title><updated>2020-09-11T13:04:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/transnano/items/a03283777cfdfb9e794e"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/09/02/%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA_MonadFail_%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9</id><title type="text">一番簡単な MonadFail インスタンス</title><updated>2020-09-11T12:05:36+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/09/02/%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA_MonadFail_%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9"/><summary type="html">The English version is at Dev. 導入 fail が Monad から剥がされて早や幾年、私は失敗する可能性のある計算は MonadFail を使って型を付けるのが好きです。 foo :: MonadFail m =&gt; m a こうすると IO の文脈であればその中で、純粋な文脈であれば Maybe などで具体化して呼ぶことができます。 -- IO の文脈では foo :: IO a -- 純粋な文脈では foo :: Maybe a さて、純粋な文脈として Maybe を使うと失敗のメッセージを失ってしまうことが嬉しくありません。では、Either を使えばいいの…</summary></entry><entry><id>https://qiita.com/Izawa_/items/1ef3c3e758698be79b29</id><title type="text">Haskellの代数的データ型とGADTs</title><updated>2020-09-10T19:37:21+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Izawa_/items/1ef3c3e758698be79b29"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/09/10/044848</id><title type="text">CloudNative Days Tokyo 2020 で CockroachDB と TLA+ について話してきました</title><updated>2020-09-10T04:48:48+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/09/10/044848"/><summary type="html">こんにちは、チェシャ猫です。先日行われた CloudNative Days Tokyo 2020 で、形式手法ツール TLA+ が CockroachDB の設計に使用された事例について発表してきました。公募 CFP 枠です。 講演概要 CockroachDB は、Google Spanner の系譜に連なるいわゆる NewSQL データベースの一種です。 強い一貫性や ACID トランザクションといった従来の関係データベースが持つ「良い特徴」を残したまま、従来の関係データベースが苦手としていた水平スケーリングにも優れるのが特徴です。CockroachDB 自身は「地理分散 (geo-dist…</summary></entry><entry><id>https://qiita.com/sgmryk/items/bc99efe36ad1c9104e1b</id><title type="text">VSCodeのHaskell拡張を使って最速開発環境構築</title><updated>2020-09-03T21:02:34+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sgmryk/items/bc99efe36ad1c9104e1b"/></entry><entry><id>https://qiita.com/ysn/items/bf70c973198d5b76bbdd</id><title type="text">関数適用演算子 ($演算子)</title><updated>2020-09-02T20:59:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ysn/items/bf70c973198d5b76bbdd"/></entry><entry><id>https://qiita.com/Arakur65536/items/ac6e40dde1ed1061d4fb</id><title type="text">Haskell/連想配列のマージとData.Map.Merge.Strict</title><updated>2020-08-28T18:02:11+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Arakur65536/items/ac6e40dde1ed1061d4fb"/></entry><entry><id>https://qiita.com/oskats1987/items/8e87619dec012b1af72c</id><title type="text">Haskellで3次元座標の回転を計算するプログラム</title><updated>2020-08-27T16:48:43+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/oskats1987/items/8e87619dec012b1af72c"/></entry><entry><id>https://blog.miz-ar.info/2020/08/debugging-with-quickcheck/</id><title type="text">QuickCheckで競プロ用Haskellコードをデバッグする</title><updated>2020-08-27T06:27:45Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2020/08/debugging-with-quickcheck/"/><summary type="html">競技プログラミングでは、提出したプログラムが誤答（WA）だった場合に「どのような入力について」答えを間違えたのか（参加者には）分からないことが多いです。 こういう場合はエスパーするなり眼力でソースコードをぐっと睨んだりす [&amp;#8230;]</summary></entry><entry><id>https://qiita.com/eijian/items/07b8681f6c7fed04ddae</id><title type="text">レイトレーシング(13): Progressive Photon Mapping (ただし本家ではない)</title><updated>2020-08-22T17:57:21+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/eijian/items/07b8681f6c7fed04ddae"/></entry><entry><id>https://qiita.com/TTsurutani/items/1ea89e97af39c4b8362c</id><title type="text">Windows環境でのStackのアンインストール</title><updated>2020-08-20T13:39:18+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/TTsurutani/items/1ea89e97af39c4b8362c"/></entry><entry><id>https://qiita.com/GengarOOQ/items/a75f4e7ad059e57702a4</id><title type="text">Haskell競技プログラミング用メモ</title><updated>2020-08-16T20:58:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/GengarOOQ/items/a75f4e7ad059e57702a4"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/07/30/173935</id><title type="text">【#CODT2020 解説】Infrastructure as Code の静的テスト戦略</title><updated>2020-08-02T04:34:49+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/07/30/173935"/><summary type="html">こんにちは、チェシャ猫です。先日行われた Cloud Operator Days Tokyo 2020 で、Infrastructure as Code のテストについて発表してきました。公募 CFP 枠です。 Cloud Operator Days Tokyo 2020 は今回が初開催のイベントですが、昨年 CloudNative Days Tokyo と併設されていた OpenStack Days Tokyo が前身となっているようです。 ASCII.jp：ふれあえるオンラインイベント「Cloud Operator Days Tokyo 2020」は泥臭い？ 今年は OpenStack に…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html</id><title type="text">Hamler の Docker イメージを作る（その２）</title><updated>2020-07-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;なんと「&lt;a href=&#34;https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html&#34;&gt;Hamler の Docker イメージを作る&lt;/a&gt;」の第2段です． 現在，&lt;a href=&#34;https://github.com/hamler-lang/hamler&#34;&gt;Hamler&lt;/a&gt; は活発に開発が進んでるのですが，そのたびに前回の方法でビルドしていると時間がかかりすぎるので新しい方法を考えたという話です．&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://hub.docker.com/r/hamlerlang/hamler&#34;&gt;Hamler 側で公式の Docker イメージが提供されるようになりました&lt;/a&gt;． しかし，あまりタグがうたれません． 今回の方法は任意のリビジョンで簡単に自前ビルドできるので，最新のリビジョンやフォークを試すのに非常に便利です．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;今回やりたいのは最新のリビジョン（masterブランチ）で素早くイメージを作り直すこと． しかし，Docker 内で master を Haskell Stack でフルビルドし直すのはヒジョーに時間がかかる．&lt;/p&gt;
&lt;p&gt;そこで Haskell Stack の Docker 機能を使って，ローカルのキャッシュをうまく利用できる方法をとることにする． 最終的にできた &lt;a href=&#34;https://github.com/matsubara0507/docker-hamler/blob/781abfbdcf78f12d306f66593e94a3f08cbbd569/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; は次の通り：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION=8.6.5&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; haskell:${GHC_VERSION} AS ghc&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /usr/local/bin/stack /usr/local/bin/stack&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /opt/ghc /opt/ghc&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec --system-ghc hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p ${HAMLER_HOME}/bin \&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/ebin  ${HAMLER_HOME} \&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/lib  ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5 \&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build ${HAMLER_HOME} ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH ${HAMLER_HOME}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/lib/hamler/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;stack-with-docker&#34;&gt;Stack with Docker&lt;/h3&gt;
&lt;p&gt;ローカル環境ではなく，Docker コンテナ内でビルドをすることで Mac 上でも Linux のイメージを作ったりすることができる Haskell Stack の機能． また，ローカル環境でビルドするのと同様にキャッシュが効くので効率よくビルドすることが可能だ．&lt;/p&gt;
&lt;p&gt;この辺りの涙ぐましい工夫は下記の記事でもやってる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html&#34;&gt;stack image コマンドなしに Haskell アプリの Docker イメージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;やることはこれと同じで，Stack でビルドしたバイナリを指定した手元のパスに保存して，それを &lt;code&gt;docker build&lt;/code&gt; 時にコピってくる感じ． 手元で任意のリビジョンの &lt;code&gt;hamler&lt;/code&gt; をビルドするには次のような &lt;code&gt;stack.yaml&lt;/code&gt; を書く：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.27&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;allow-different-user&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; happy-1.19.9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; language-javascript-0.7.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; network-3.0.1.1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; these-1.0.1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; semialign-1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/CoreErlang&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2ea1038140118f5bc29f4cb14b50aa0918d62581&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/purescript&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bc43f3b094feee61e7b9091a69cc7154d5f7d6a7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; megaparsec-8.0.0@sha256:362f85e243ecbcb550e1de6e5c74ba5a50c09edaa1208c99bc5b9fd242227fc6,3808&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ここからの extra-deps は追記（lts-14にした関係）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; baa5f72e9139c60e4c72a7134132522e40138633&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # ここでリビジョン指定する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Glob-0.9.3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ansi-terminal-0.8.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ansi-wl-pprint-0.6.8.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; tasty-1.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;these&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;assoc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;quickcheck&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;  # このイメージに lts-13 がないから lts-14 にした&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package.yaml はこんだけで良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker-hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;0.1.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;stack --local-bin-path=./bin install hamler&lt;/code&gt; とすることで &lt;code&gt;./bin/hamler&lt;/code&gt; が生成される．&lt;/p&gt;
&lt;h3 id=&#34;任意のリビジョンをクローンする&#34;&gt;任意のリビジョンをクローンする&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリは手に入るようになったが，他にもいくつか必要な作業がある． README を読むと手元でフルビルドをする場合は次のような手続きが書いてある：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/hamler-lang/hamler.git
$ cd hamler
$ export LC_ALL=en_US.UTF-8
$ make
$ make install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリをビルドする必要はないが，これらの作業をするために &lt;code&gt;docker build&lt;/code&gt; 内でリポジトリをクローンする必要はある． そのときに，&lt;code&gt;stack.yaml&lt;/code&gt; で指定したリビジョンと同じものをクローンしたい． 調べた結果，次のようにすれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HAMLER_REVISION&lt;/code&gt; は外部から与える：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat hamler_revision
#!/bin/bash
grep -A1 &amp;#39;github: hamler-lang/hamler&amp;#39; stack.yaml | grep -woE &amp;quot;[0-9a-f]+&amp;quot;
$ docker build . --build-arg HAMLER_REVISION=`./hamler_revision`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでクローンまではできた． 次は &lt;code&gt;make&lt;/code&gt; と &lt;code&gt;make install&lt;/code&gt; の部分を再現する．&lt;/p&gt;
&lt;h3 id=&#34;hamlerのセットアップ&#34;&gt;Hamlerのセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; は &lt;code&gt;make build&lt;/code&gt; と &lt;code&gt;make foreign&lt;/code&gt; を実行している． &lt;code&gt;make biuld&lt;/code&gt; は &lt;code&gt;hamler&lt;/code&gt; バイナリをビルドして &lt;code&gt;hamler build&lt;/code&gt; を実行している． &lt;code&gt;make foreign&lt;/code&gt; は Foreign 用の Erlang の実行ファイルを生成しているようだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# libtinfo5 は stack や hamler の実行に使う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack のインストール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sSL https://get.haskellstack.org/ | sh&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# local_bin_path でローカルからバイナリを渡す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ここから make の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; は &lt;code&gt;HAMLER_HOME&lt;/code&gt; へ以下の4つをコピーしている：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリ&lt;/li&gt;
&lt;li&gt;リポジトリにある &lt;code&gt;replsrv&lt;/code&gt; という Erlang スクリプト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make foreign&lt;/code&gt; で生成した Erlang バイナリ&lt;/li&gt;
&lt;li&gt;標準ライブラリ（リポジトリの &lt;code&gt;lib&lt;/code&gt; のやつ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを &lt;code&gt;docker build&lt;/code&gt; でもやる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 続きから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p ${HAMLER_HOME}/bin \&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/ebin  ${HAMLER_HOME} \&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/lib  ${HAMLER_HOME}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで準備はほぼ整った． あとは実行用のイメージに必要なものだけをコピってくるだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 続きから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5 \&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build ${HAMLER_HOME} ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH ${HAMLER_HOME}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/lib/hamler/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ghcをdlしない&#34;&gt;GHCをDLしない&lt;/h3&gt;
&lt;p&gt;現状だと &lt;code&gt;docker build&lt;/code&gt; 毎に GHC をインストールしてきて結構時間がかかる． せっかくマルチステージビルドができるので，GHC も別のイメージからコピってくることにした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION=8.6.5&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; haskell:${GHC_VERSION} AS ghc&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt; &lt;span class=&#34;co&#34;&gt;# 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ついでに stack もとってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /usr/local/bin/stack /usr/local/bin/stack&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /opt/ghc /opt/ghc&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# GHC のパスも追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt; &lt;span class=&#34;co&#34;&gt;# system-ghc フラグをつける&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec --system-ghc hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;動作確認&#34;&gt;動作確認&lt;/h3&gt;
&lt;p&gt;適当に Makefile を書いておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode makefile&#34;&gt;&lt;code class=&#34;sourceCode makefile&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;bin/hamler:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;	stack --local-bin-path=./bin install hamler&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;clean:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;	rm bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt; bin/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;	docker build -t &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; . --build-arg local_bin_path=./bin --build-arg HAMLER_REVISION=`./hamler_revision`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;make image tag=matsubara0507/hamler:dev&lt;/code&gt; とかやるとイメージができる． こんな感じに使う．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir sample
$ cd sample
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev init
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev repl
Compiling JSON
Hamler REPL, version 0.2
Type :? for help

&amp;gt; 1 + 1
2&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;バイナリがビルドできないケース&#34;&gt;バイナリがビルドできないケース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; の設定から &lt;code&gt;./bin/hamler&lt;/code&gt; が残っている場合はバイナリのビルドをスキップする． なのでリビジョンを更新してビルドしなおしたいときは先に &lt;code&gt;make clean&lt;/code&gt; して &lt;code&gt;./bin/hamler&lt;/code&gt; を削除する． しかし，間違えてリビジョンを変えずに &lt;code&gt;make clean&lt;/code&gt; をした場合，次のようなエラーが出る：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make clean
rm bin/hamler
$ make bin/hamler
stack --docker --local-bin-path=./bin install hamler
Cabal file warning in/path/to/docker-hamler.cabal@0:0: A package using &amp;#39;cabal-version: 1.12&amp;#39; must use section syntax. See the Cabal user guide for details.
No latest package revision found for: hamler, dependency callstack: []&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どうやらこれは &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/5258&#34;&gt;Stack 側のバグっぽい&lt;/a&gt;． リビジョンを更新する以外に，Pantry 側を削除するしかなさそうなのが痛い． 早く治りますように…&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;その３があるかどうかはわかりません．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2020-07-16T12:08:20.505+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html</id><title type="text">Featherweight Go を読んでみた</title><updated>2020-07-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Go言語にジェネリクスを導入するために，その形式的な議論を研究した論文「&lt;a href=&#34;https://arxiv.org/abs/2005.11710&#34;&gt;Featherweight Go&lt;/a&gt;」が6月頭に発表されました． せっかくなので（久々に）全訳をしながら丁寧に読んでみたので，それを簡単にまとめることにします．&lt;/p&gt;
&lt;p&gt;可能な限りGo言語に馴染みのない人や，プログラミング言語の形式的な議論に馴染みのない人でも理解できるようにしてみます．&lt;/p&gt;
&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;僕は英語がとても苦手です（DeepLを駆使しても3週間かかりました）&lt;/li&gt;
&lt;li&gt;僕はGoでアプリケーションを少し書いていますがコアについては全く詳しくありません&lt;/li&gt;
&lt;li&gt;僕は言語の形式的な議論を院生時代にやってましたが卒業して数年経ちます&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので間違ってる可能性も十分に考慮してください．&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Goにジェネリクスを導入する新しいデザインを提案：
&lt;ul&gt;
&lt;li&gt;インターフェースと型アサーションを駆使する方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;新デザインを形式的に議論するために FG と FGG を定義
&lt;ul&gt;
&lt;li&gt;FG：Goの極めて小さいモデル&lt;/li&gt;
&lt;li&gt;FGG：FG をジェネリクスで拡張&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単相化（Monomorphisation）というFGGからFGの変換を定義
&lt;ul&gt;
&lt;li&gt;単相化は型パラメーターを具体化した実装を必要な型だけ完全に列挙する方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rhu1/fgg&#34;&gt;これらは全てGoでプロトタイプ実装した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加えて，この Go のジェネリクスは Expression Problem の解法にもなり得るという議論もある．&lt;/p&gt;
&lt;h2 id=&#34;前提知識&#34;&gt;前提知識&lt;/h2&gt;
&lt;h3 id=&#34;featherweight-java&#34;&gt;Featherweight Java&lt;/h3&gt;
&lt;p&gt;1999年に出された論文に「&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/320385.320395&#34;&gt;Featherweight Java&lt;/a&gt;」というものがある． 僕はこの論文を読んではいないがどうやら，この論文も FJ という Java の小さな言語モデルを定義し，それをジェネリクスで拡張した FGJ を定義し，FGJ から FJ への変換の仕方を定義して形式的な議論を与えている．&lt;/p&gt;
&lt;p&gt;Featherweight Go でも言及されているとおり，Featherweight Go は議論の展開の仕方に Featherweight Java を参考としている．&lt;/p&gt;
&lt;h3 id=&#34;goの型&#34;&gt;Goの型&lt;/h3&gt;
&lt;p&gt;Goで型と呼べるものは大きく分けて2つ，構造体（structure）とインターフェース（interface）がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構造体：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type [name] structure { ... }&lt;/code&gt; という形で宣言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; にフィールド名と型を列挙（いわゆるレコード型）&lt;/li&gt;
&lt;li&gt;フィールドアクセスはドット記法（e.g. &lt;code&gt;x.m()&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インターフェース：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type [name] interface { ... }&lt;/code&gt; という形で宣言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; にメソッド仕様（method specification，メソッド名 + 型）を列挙&lt;/li&gt;
&lt;li&gt;列挙したメソッドを定義した型はインターフェースのサブタイプになる（いわゆる構造的部分型）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;型アサーション&#34;&gt;型アサーション&lt;/h3&gt;
&lt;p&gt;Goでの型キャストっぽい機能． インターフェースで指定されてる型からサブタイプへと変換する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Hoge &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; { ... }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Fuga &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { ... }&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// Fuga は Hoge を実装しているとする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; piyo(x Hoge) *Fuga {  &lt;span class=&#34;co&#34;&gt;// *X はX型のポインタ型&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    y, ok := x.(Fuga)      &lt;span class=&#34;co&#34;&gt;// これが型アサーション&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; !ok {               &lt;span class=&#34;co&#34;&gt;// 型アサーションに失敗したときに false を返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;// nil はポインタのゼロ値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &amp;amp;y&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;piyo&lt;/code&gt; 関数は &lt;code&gt;Hoge&lt;/code&gt; インターフェースを実装した型の値であれば，なんでも引数として与えることができる． 型アサーションの &lt;code&gt;ok&lt;/code&gt; は省略することができ，その場合は型アサーションに失敗したときに実行時エラーとなる．&lt;/p&gt;
&lt;h3 id=&#34;用語と翻訳&#34;&gt;用語と翻訳&lt;/h3&gt;
&lt;p&gt;基本的に，この分野の入門書として名高い[要出典]「型システム入門（原題：Type and Programming Language，略して TaPL）」の訳し方を参考にする． TaPL には無い用語は次のように翻訳したが，Go ジェネリクスが市民権を得たときには別の翻訳が宛てがわれるかもしれない：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monomorphisation：単相化
&lt;ul&gt;
&lt;li&gt;Polymorphism（多相性）の対義語が Monomorphism（単相性）というらしい&lt;/li&gt;
&lt;li&gt;Rust でも Monomorphization という用語を単相化と訳していた&lt;/li&gt;
&lt;li&gt;（この表記の揺れはおそらくイギリス綴りかアメリカ綴りかの差？）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bound：境界
&lt;ul&gt;
&lt;li&gt;機能は Java の Bounded Types（境界型などと訳されている）に近い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-ja/the-rust-programming-language-ja/issues/153&#34;&gt;Rust でも色々議論した結果 Bound を「境界」と訳した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，プログラミング言語の形式的な議論で頻出する用語について簡単に解説する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構文（Syntax）:
&lt;ul&gt;
&lt;li&gt;ある言語においてプログラムの「正しい記述方法」を定義したもの&lt;/li&gt;
&lt;li&gt;一般的に BNF（バッカス・ナウア記法）で定義する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;意味論（Semantics）:
&lt;ul&gt;
&lt;li&gt;ある言語においてプログラムが「どのように実行されるか」を定義したもの&lt;/li&gt;
&lt;li&gt;いくつか定義の仕方があるがこの論文では簡約規則（操作的意味論）を利用している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型付け規則（Typing Rule）:
&lt;ul&gt;
&lt;li&gt;式 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; に対して「正しい」型の付け方の規則&lt;/li&gt;
&lt;li&gt;正しく型付けされているとはつまり静的型検査が通るような状態&lt;/li&gt;
&lt;li&gt;一般的に &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Γ&lt;/em&gt; ⊢ &lt;em&gt;e&lt;/em&gt; : &lt;em&gt;t&lt;/em&gt;&lt;/span&gt; とかく（&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; は環境で変数がなんの型なのかを保存している）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡約（Reduction）:
&lt;ul&gt;
&lt;li&gt;ある式 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; から別の式（値）への変換&lt;/li&gt;
&lt;li&gt;一般的に &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt; → &lt;em&gt;e&lt;/em&gt;′&lt;/span&gt; のように矢印を使う&lt;/li&gt;
&lt;li&gt;例: &lt;span class=&#34;math inline&#34;&gt;1 + 2 * 3 → 1 + 6 → 7&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型安全性（Safety）:
&lt;ul&gt;
&lt;li&gt;健全性（Soundness）とも呼ぶ&lt;/li&gt;
&lt;li&gt;正しく型付けされた項は「おかしくなる」ことがないということ&lt;/li&gt;
&lt;li&gt;「おかしくなる」の定義は言語モデルによって異なる（例：行き詰まり状態）&lt;/li&gt;
&lt;li&gt;進行定理 + 保存定理 なのでこの2つを証明するのが一般的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進行定理（Progress）:
&lt;ul&gt;
&lt;li&gt;正しく型付けされた項は行き詰まり状態では無い&lt;/li&gt;
&lt;li&gt;行き詰まり状態：値でもないし簡約もできない状態&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;保存定理（Preservation）:
&lt;ul&gt;
&lt;li&gt;正しく型付けされた項が評価できるならば，評価後の項も正しく型付けされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双模倣性（Bisimulation）:
&lt;ul&gt;
&lt;li&gt;並行モデルでよく出てくる性質（今回の中では最もマイナーな性質）&lt;/li&gt;
&lt;li&gt;ざっくりいうと，2つのモデルが同じように振舞うという性質&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;プログラミング言語の形式的な議論&#34;&gt;プログラミング言語の形式的な議論&lt;/h3&gt;
&lt;p&gt;なぜ，わざわざ形式的な議論（証明を与える）をするのか． TaPL の第19章「事例: Featherweight Java」にはこう書いてある：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラミング言語のような現実世界の複雑な人工物を設計するには，形式的にモデル化することが大きな手助けとなる．形式モデルを使うと，設計のある側面を正確に説明したり，その性質を記述・証明したり，そこまでしないと見落としかねない問題に注意を向けたりできる．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現に，Featherweight Go ではFGGがある「前提条件」のもとで必ず単相化できることを証明しており，その結果，実際のジェネリクス付きGoの「正しい」静的検査（コンパイル）を定義できた（この条件がないと，単相化が停止しない可能性がある）．&lt;/p&gt;
&lt;h3 id=&#34;expression-problem&#34;&gt;Expression Problem&lt;/h3&gt;
&lt;p&gt;今回は割愛する（ググって）が，本論文で提案するジェネリクス付きGoは Expression Problem に対する解法になっていると主張している（個人的には，あまり Go っぽい書き方じゃない気がするけど笑）．&lt;/p&gt;
&lt;h2 id=&#34;goで多相的な実装をする&#34;&gt;Goで多相的な実装をする&lt;/h2&gt;
&lt;p&gt;現状のGoでも多相的な実装をする方法がいくつかある． 今回目を付けたのが，インターフェースと型アサーションを使った方法だ．&lt;/p&gt;
&lt;p&gt;例えば，高階関数を次のように表現できる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Any &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    Apply(x Any) Any&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// g(f(x)) を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    f Function&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    g Function&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this compose) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; } &lt;span class=&#34;co&#34;&gt;// nだけインクリメントする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x.(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) + this.n&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {} &lt;span class=&#34;co&#34;&gt;// 正数なら真が返る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x.(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function = compose{incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;).(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードは，既存の Go としても完全に正しい． &lt;code&gt;Any&lt;/code&gt; インターフェースは実装すべきメソッド仕様を一つも持たないので，全ての型が実装していることになる． 無論，本当は &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; であるべきところが &lt;code&gt;Any&lt;/code&gt; になっていたり，&lt;code&gt;Any&lt;/code&gt; な型同士の区別が付かなくなっていたりする問題がある． だがしかし，それがコンパイル時に検査できるようになったらどうだろうか．新しいデザインがまさにそういう形式になっている．&lt;/p&gt;
&lt;h2 id=&#34;fg-と-fgg&#34;&gt;FG と FGG&lt;/h2&gt;
&lt;p&gt;論文では，それぞれの構文と型付け規則，簡約規則を定義し，構文的正しさの検証規則の定義と，保存定理と進行定理を証明している（すなわち型安全であることを示している）． ここでは2つの構文だけ紹介する．&lt;/p&gt;
&lt;h3 id=&#34;fgの構文&#34;&gt;FGの構文&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x̄&lt;/em&gt;&lt;/span&gt; のような上線付きの記法は，ある形式の項の「列」であることを示している． 例えば &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x̄&lt;/em&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;x&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, ...&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; を意味している．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/read-featherweight-go/fg.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;プログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; は，Go の形式にならって定義されているが，論文中では諸々省略して &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;D̄&lt;/em&gt; ⊳ &lt;em&gt;e&lt;/em&gt;&lt;/span&gt; と記述することもある．&lt;/p&gt;
&lt;p&gt;FG は極めてコンパクトな Go のサブセットである． そのため，有効な式は変数・メソッド呼び出し・構造体リテラル・フィールド選択・型アサーションの5つしかない． 対して型（構造体・インターフェース）に関する構文はかなり充実している．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;FG には他に型付け規則と簡約規則がある．特に型付け規則の一部である，構造的部分型を表現した規則 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt; &amp;lt;  : &lt;em&gt;u&lt;/em&gt;&lt;/span&gt; は重要だ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;u&lt;/em&gt;&lt;/span&gt; が構造体 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 自信のみがサブタイプになる（i.e. &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt; &amp;lt;  : &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;u&lt;/em&gt;&lt;/span&gt; がインターフェース &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;) ⊇ &lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;)&lt;/span&gt; を満たすような &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; のみがサブタイプになる（i.e. &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt; &amp;lt;  : &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;)&lt;/span&gt; という補助関数は型 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; に定義されているメソッドのメソッド仕様の集合である（重複しないという前提）． また，メソッド仕様の等価性には変数名は関係しない（つまり，メソッド名・引数の型・返り値の型が一致するかどうかをみる）． この部分型関係 &lt;span class=&#34;math inline&#34;&gt; &amp;lt; :&lt;/span&gt; は，メソッド呼び出しや構造体リテラルの引数を適用する部分や，型アサーションの型付け規則で利用される．&lt;/p&gt;
&lt;h3 id=&#34;fggの構文&#34;&gt;FGGの構文&lt;/h3&gt;
&lt;p&gt;前述したとおり，FGG は FG をジェネリクスで拡張した言語である． なので下記の構文規則のうち，FG からの拡張に当たる部分を赤でハイライトしてある．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/read-featherweight-go/fgg.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最も大きな変更として型宣言とメソッド宣言（メソッドシグネチャ）が型引数 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt; も取りうるようになったことだ． この型引数がまさにジェネリクスである． 手っ取り早く具体的なコードを見てみよう． 下記のコードは「Goで多相的な実装をする」を FGG 風の記法で置き換えたものだ（風というのは &lt;code&gt;+&lt;/code&gt; や &lt;code&gt;&amp;gt;&lt;/code&gt; や &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; は FGG にはまだ無いため）：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Any &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;    Apply(x a) b&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// g(f(x)) を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any, c Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;    f Function(a, b)&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    g Function(b, c)&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this compose(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any, c Any)) Apply(x a) c {&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; } &lt;span class=&#34;co&#34;&gt;// nだけインクリメントする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x + this.n&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {} &lt;span class=&#34;co&#34;&gt;// 正数なら真が返る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-26&#34;&gt;&lt;a href=&#34;#cb3-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb3-27&#34;&gt;&lt;a href=&#34;#cb3-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) = compose(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;){incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb3-28&#34;&gt;&lt;a href=&#34;#cb3-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-29&#34;&gt;&lt;a href=&#34;#cb3-29&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと，このコードには型アサーションが一切出てこない． また，高階関数を表現するインターフェースで，ちゃんと引数と戻り値の型を区別することができている．&lt;/p&gt;
&lt;p&gt;構文の本質的な変更を見てみよう． インターフェースや構造体，メソッドの宣言に &lt;code&gt;(type a Any, b Any)&lt;/code&gt; というのが出てくるようになった． これがまさに型引数 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt; や &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Ψ&lt;/em&gt;&lt;/span&gt; に当たる． &lt;code&gt;a&lt;/code&gt; や &lt;code&gt;b&lt;/code&gt; の型パラメーターの後に記述している &lt;code&gt;Any&lt;/code&gt; は &lt;strong&gt;境界（bound）&lt;/strong&gt; と呼び，自由にインターフェースを置くことができる． 構造体リテラルやメソッド呼び出しで型引数に型を適用する場合や，部分型関係が成り立つ場合（&lt;code&gt;Apply(x int) bool&lt;/code&gt; の &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; のこと）は，与えた型が境界のインターフェースのサブタイプになっている必要がある（今回の場合は &lt;code&gt;Any&lt;/code&gt; なのでどんな型でも良いが）． ここで重要になるのが，型引数の型パラメーターのスコープである：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// 型名やメソッド名の型パラメーターは内部のメソッドシグネチャで利用できる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a, b)) List(b)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// 型パラメーターを自身の境界で利用することもできる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Eq(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Eq(a)) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;    Equal(that a) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インターフェースの型引数はメソッド仕様の型引数でも使うことはできるが，その逆はできない．&lt;/p&gt;
&lt;h2 id=&#34;単相化&#34;&gt;単相化&lt;/h2&gt;
&lt;p&gt;いよいよ FGG から FG への変換方法をみていく． 論文では，単相化の規則を形式的に定義し，単相化したコードは構文的正しさが保存されることと，双模倣性を証明した．ここでは形式的な議論を割愛する．&lt;/p&gt;
&lt;h3 id=&#34;単相化の例&#34;&gt;単相化の例&lt;/h3&gt;
&lt;p&gt;まずは例を見てみよう． 前述した FGG の &lt;code&gt;Function&lt;/code&gt; などの例を「単相化」で FG に変換すると次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Top &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; = compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    g Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; Top&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;    &lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;    Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; Top&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;    &lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this incr) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x + this.n&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-35&#34;&gt;&lt;a href=&#34;#cb5-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-36&#34;&gt;&lt;a href=&#34;#cb5-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-37&#34;&gt;&lt;a href=&#34;#cb5-37&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-38&#34;&gt;&lt;a href=&#34;#cb5-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-39&#34;&gt;&lt;a href=&#34;#cb5-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos strcut {}&lt;/span&gt;
&lt;span id=&#34;cb5-40&#34;&gt;&lt;a href=&#34;#cb5-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-41&#34;&gt;&lt;a href=&#34;#cb5-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-42&#34;&gt;&lt;a href=&#34;#cb5-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-43&#34;&gt;&lt;a href=&#34;#cb5-43&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-44&#34;&gt;&lt;a href=&#34;#cb5-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-45&#34;&gt;&lt;a href=&#34;#cb5-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-46&#34;&gt;&lt;a href=&#34;#cb5-46&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大きな変更箇所として，&lt;code&gt;Function&amp;lt;int, int&amp;gt;&lt;/code&gt; のように &lt;code&gt;(,)&lt;/code&gt; が &lt;code&gt;&amp;lt;,&amp;gt;&lt;/code&gt; へ至る所でなっている． FGG のときの &lt;code&gt;(,)&lt;/code&gt; は内部の型は個別の型として認識されていたが，&lt;code&gt;&amp;lt;,&amp;gt;&lt;/code&gt; は &lt;code&gt;Function&amp;lt;int, int&amp;gt;&lt;/code&gt; で一つの型となり内部の型は区別されない．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;Apply&amp;lt;0&amp;gt; Top&lt;/code&gt; のようなメソッドやメソッド仕様が追加されている． これは，部分型関係を正しく解決するためのダミーメソッドだ． 全てのメソッド宣言に対してダミーメソッドは追加で宣言され，インターフェースの全てのメソッド仕様に対してダミーメソッドのメソッド仕様が追加される． メソッド仕様の数字（&lt;code&gt;&amp;lt;0&amp;gt;&lt;/code&gt; とか &lt;code&gt;&amp;lt;1&amp;gt;&lt;/code&gt; とか）はメソッドの引数の型と返り値の型に対して一意に定まる（そのため &lt;code&gt;compose&lt;/code&gt; と &lt;code&gt;pos&lt;/code&gt; の &lt;code&gt;Apply&lt;/code&gt; メソッドの数字は同じになる）．&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;Top&lt;/code&gt; 構造体はダミーメソッドのために追加された構造体だ．&lt;/p&gt;
&lt;h3 id=&#34;ダミーメソッドが有効な例&#34;&gt;ダミーメソッドが有効な例&lt;/h3&gt;
&lt;p&gt;さて，上記の例ではダミーメソッドの有効性がわからないので，もう一つ例を示す． 前にちょっとだけ出てきた &lt;code&gt;List&lt;/code&gt; インターフェースの完全な例を示す． 下記は FGG でのコードだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;    Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a, b)) List(b)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;    head a&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    tail List(a)&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a,b)) List(b) {&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil(b){}&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a,b)) List(b) {&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons(b){f.Apply(xs.head), xs.tail.Map(b)(f)}&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xs List(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) = Cons(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, Cons(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;, Nil(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){}}}&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; ys List(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) = xs.Map(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;)(incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _ List(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) = ys.Map(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;)(pos{})&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; インターフェースは，配列のようなコンテナ型の各要素に同じメソッドを適用する高階関数を提供する． &lt;code&gt;Nil&lt;/code&gt; と &lt;code&gt;Cons&lt;/code&gt; 構造体は線形リストを表したものだ． ちなみに，Go の構造体は構造体による再帰的な構造を宣言することはできないが，インターフェースを介する場合は可能だ．&lt;/p&gt;
&lt;p&gt;さて，これを単相化すると次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xs List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; = Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;, Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;}}&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; ys List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; = xs.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _ List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; = ys.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(pos{})&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top &lt;span class=&#34;co&#34;&gt;// これは `(f Function(int, b)) List(b)` からの数字&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{}&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{}&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34;&gt;&lt;/a&gt;    head &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34;&gt;&lt;/a&gt;    tail List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{f.Apply(xs.head), xs.tail.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f)}&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{f.Apply(xs.head), xs.tail.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f)}&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-35&#34;&gt;&lt;a href=&#34;#cb7-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-36&#34;&gt;&lt;a href=&#34;#cb7-36&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-37&#34;&gt;&lt;a href=&#34;#cb7-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-38&#34;&gt;&lt;a href=&#34;#cb7-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-39&#34;&gt;&lt;a href=&#34;#cb7-39&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top&lt;/span&gt;
&lt;span id=&#34;cb7-40&#34;&gt;&lt;a href=&#34;#cb7-40&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-41&#34;&gt;&lt;a href=&#34;#cb7-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-42&#34;&gt;&lt;a href=&#34;#cb7-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb7-43&#34;&gt;&lt;a href=&#34;#cb7-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-44&#34;&gt;&lt;a href=&#34;#cb7-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-45&#34;&gt;&lt;a href=&#34;#cb7-45&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-46&#34;&gt;&lt;a href=&#34;#cb7-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-47&#34;&gt;&lt;a href=&#34;#cb7-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-48&#34;&gt;&lt;a href=&#34;#cb7-48&#34;&gt;&lt;/a&gt;    head &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-49&#34;&gt;&lt;a href=&#34;#cb7-49&#34;&gt;&lt;/a&gt;    tail List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-50&#34;&gt;&lt;a href=&#34;#cb7-50&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-51&#34;&gt;&lt;a href=&#34;#cb7-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-52&#34;&gt;&lt;a href=&#34;#cb7-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-53&#34;&gt;&lt;a href=&#34;#cb7-53&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; の &lt;code&gt;Map&lt;/code&gt; メソッドは &lt;code&gt;main&lt;/code&gt; のところで &lt;code&gt;int -&amp;gt; int&lt;/code&gt; と &lt;code&gt;int -&amp;gt; bool&lt;/code&gt; の2パターンで使われていたため，2つもインターフェースのメソッドとして宣言されている． 対して &lt;code&gt;List&amp;lt;bool&amp;gt;&lt;/code&gt; は &lt;code&gt;ys.Map&amp;lt;bool&amp;gt;(pos{})&lt;/code&gt; で生成されるものの，&lt;code&gt;Map&lt;/code&gt; メソッドを呼んでいないため，インターフェースのメソッドは1つもない． このようにインターフェースのメソッドは，実際に利用された型のものしか生成されない． これにより，メソッドの無いインターフェースが生成されることがある（正確にはダミーメソッド以外には無い，だが）． ダミーメソッドはこのような振る舞いに対して有効だ．例えば，変数 &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;incr{1}&lt;/code&gt; が束縛されているときを考える． 型アサーション &lt;code&gt;f.(List&amp;lt;bool&amp;gt;)&lt;/code&gt; はダミーメソッドがあることで失敗するが，ダミーメソッドがないと成功してしまう．&lt;/p&gt;
&lt;h3 id=&#34;単相化ができない場合&#34;&gt;単相化ができない場合&lt;/h3&gt;
&lt;p&gt;全ての型付け可能な FGG のコードが単相化可能かというとそうではない． 例えば，次のような FGG のコードは単相化できない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Box(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;    value a&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this Box(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Nest(n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) Any {&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;    } &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Box(Box(a)){this}.Nest(n&lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは多相再帰（polymorphic recursion），ある型で呼び出されたメソッドが別の型で再帰呼び出しをするもの，をしているプログラムの例である．&lt;code&gt;Box(a)&lt;/code&gt; 型をレシーバーとするメソッド &lt;code&gt;Nest&lt;/code&gt; を呼び出すと &lt;code&gt;Box(Box(a))&lt;/code&gt; 型のレシーバーで再帰的に呼び出される． この例は型がどれだけ深くネストするかを事前に決定することができないので単相化することができない．&lt;/p&gt;
&lt;p&gt;逆に，このような多相再帰なコードが含まれていない場合は，全ての FGG のコードを単相化することができる（ことを論文で証明していた）． なので，実際のコンパイラでは多相再帰が含まれてるかどうかの検査をするようだ．&lt;/p&gt;
&lt;h3 id=&#34;単相化の仕組み&#34;&gt;単相化の仕組み&lt;/h3&gt;
&lt;p&gt;単相化のプロセスは2つのフェーズから構成されている． 第一フェーズは，FGG プログラムから型とメソッドのインスタンス（型パラメーターを具体化したものだと思う）を取集する． 第二フェーズでは，第一フェーズで収集したインスタンスをもとにして，FGG プログラムを等価な FG プログラムへと変換する．&lt;/p&gt;
&lt;p&gt;FGG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; から，各インスタンスの集合 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Ω&lt;/em&gt;&lt;/span&gt; を収集した場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt; ▸ &lt;em&gt;Ω&lt;/em&gt;&lt;/span&gt; と記述する（これが第一フェーズ）．FGG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; から FG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;′&lt;/span&gt; への変換は &lt;span class=&#34;math inline&#34;&gt; ⊢ &lt;em&gt;P&lt;/em&gt; ↦ &lt;em&gt;P&lt;/em&gt;′&lt;/span&gt; と記述する．&lt;/p&gt;
&lt;p&gt;論文ではこれらの規則を形式的に定義している（がここでは割愛）．&lt;/p&gt;
&lt;h3 id=&#34;他言語と単相化&#34;&gt;他言語と単相化&lt;/h3&gt;
&lt;p&gt;7章の「RELATED WORK」では，他のプログラミング言語での単相化の事例について紹介されていた．興味深いので論文から引用する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bracha 氏らは「Making the Future Safe for the Past: Adding Genericity to the Java Programming Language」という論文でジェネリクス付きの Java からジェネリクスなしの Java へ，全ての型パラメーターの情報を消去することで変換する方法を提案した（これは単相化では無い）．消去の欠点として消去されたコードは単相化されたコードに比べて（実行？）効率が悪くなることがよくある．一方，消去はコードサイズの増加が線形であるのに対して，単相化はコードサイズが爆発的に増加する可能性がある．&lt;/li&gt;
&lt;li&gt;Kennedy 氏と Syme 氏は「Design and Implementation of Generics for the .NET Common Language Runtime」で .NET Common Language Runtime (CLR) と C# の拡張を開発してジェネリクスをサポートした．これらは特化したコードと共有したコードを混ぜたものを生成する．前者は，各プリミティブ型ごとに個別にコンパイルする（これは単相化に似ている）．後者は，全てのオブジェクト型に対してひとつにコンパイルされる（これは消去に似ている）．&lt;/li&gt;
&lt;li&gt;Stroustrup 氏は「The C++ Programming Language」という書籍の16章で，C++ におけるテンプレートのインスタンス化について述べている（実質，単相化）．これは広く使われているがコードが肥大化するとして悪名高い．&lt;/li&gt;
&lt;li&gt;Benton 氏らは「Compiling Standard ML to Java Bytecodes」という論文で SML’97 プログラムから Java バイトコードへ変換するコンパイラについて述べており，ここで多相性は完全に単相化される．Standard ML では多相的な再帰を禁止しているため，常に単相化することが可能．&lt;/li&gt;
&lt;li&gt;Fluet 氏は &lt;a href=&#34;http://mlton.org/Monomorphise&#34;&gt;MLton のウェブページ&lt;/a&gt;で，SML の最適化コンパイラ MLton で利用している同様のアプローチを紹介している．&lt;/li&gt;
&lt;li&gt;Tolmach 氏と Oliva 氏は「From ML to Ada: Strongly-Typed Language Interoperability via Source Translation」という論文で，MLライクな言語から Agda への型付きの変換を単相化ベースで開発し，その詳細を発表した．FGGのとは異なりサブタイピングに対応しておらず多相再帰もない．&lt;/li&gt;
&lt;li&gt;Jones 氏は「Dictionary-free overloading by partial evaluation」という論文で，Haskell用の型クラスを効率的にコンパイルする方法について述べており，これは単相化に多少似ている．&lt;/li&gt;
&lt;li&gt;Yu 氏らは「Formalization of generics for the .NET common language runtime」で，.NET JIT コンパイラの特化と共有を混ぜるメカニズムの形式化している．この論文では，型と意味論を保持した多相的な .NET の中間言語（IL）への変換を記述している．&lt;/li&gt;
&lt;li&gt;Siek 氏と Taha 氏は「A Semantic Analysis of C++ Templates」という論文で，C++テンプレートのインスタンス化メカニズムを形式化している．&lt;/li&gt;
&lt;li&gt;田中氏らは「Safe Low-level Code Generation in Coq Using Monomorphization and Monadification」という論文で，低レベルのCコードを生成する Coq (Gallina) のための単相化アルゴリズムをレポートしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実装について&#34;&gt;実装について&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FGとFGGの型検査器とインタプリタ&lt;/li&gt;
&lt;li&gt;FGG から FG への変換器（monomorphiser）のプロトタイプ実装（単相化可能かの検査も含む）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を Go で実装して公開したそうだ． Go で実装したのは Go の設計者やコミュニティとの議論を容易にするためらしい． さらに，これらの実装を使い多くのテストを行ったようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FG の評価結果を公式の Go コンパイラを使用したものと比較&lt;/li&gt;
&lt;li&gt;FG と FGG インタプリタは保存定理と進行定理の動的な検査をサポート&lt;/li&gt;
&lt;li&gt;単相化をテストするために双模倣性のテストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，&lt;a href=&#34;https://doi.org/10.1017/s0956796815000143&#34;&gt;NEAT&lt;/a&gt; を利用して FGG のサブセットから全ての正しく型付けされたプログラム（ただし，メソッドと型の出現巣の合計を指定して，ある程度のサイズまでに限定した上で）を列挙もしたらしい（SmallCheck に似ているらしい）． このサブセットに含まれる全ての FGG プログラムをサイズ20まで生成して，上述した双模倣性のテストが通ったことを確認したそうだ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;今後は C# のような，型のランタイム表現を渡すことに基づいた実装を検討して，単相化と組み合わせる方法を模索するらしい． あと，代入・配列・スライス・パッケージなどの他の重要な機能のモデル化も計画してるらしく，これを Bantamweight Go と呼ぶつもりらしい． さらに，「goroutines」とメッセージパッシングに基づくGoの並行メカニズムのモデル化も計画していて，これを Cruiserweight Go と呼ぶらしい． いったい素の Go は何級なんだろう笑&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/how-to-use-type-newtype-data.html</id><title type="text">data / newtype / type の使い方</title><updated>2020-06-14T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/how-to-use-type-newtype-data.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングにおいて，データ型は非常に重要な役割を持つ．データ型は，扱うデータをプログラミング上で安全かつ容易に加工するために用いられ，またデータに対してどのような操作ができるのかを規定する．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; には，データ型を新たに定義する方法が&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ目は &lt;code&gt;type&lt;/code&gt; キーワードによって定義する方法で，これにより定義されたデータ型は型シノニムと呼ばれる．&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ目は &lt;code&gt;data&lt;/code&gt; キーワードによって定義する方法で，これにより定義されたデータ型は代数的データ型と呼ばれる．&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ目は &lt;code&gt;newtype&lt;/code&gt; キーワードによってある型を元に新たな型を作る方法だ．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，それぞれどういう使い方をするのか，どういう違いがあるのかについて見ていきたいと思う．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#型シノニム&#34; title=&#34;型シノニム&#34;&gt;型シノニム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代数的データ型&#34; title=&#34;代数的データ型&#34;&gt;代数的データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ある型を元に新たな型を作る-datatype-renaming&#34; title=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;ある型を元に新たな型を作る &lt;span class=&#34;ascii&#34;&gt;(Datatype Renaming)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;型シノニム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型シノニム&#34; title=&#34;型シノニム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型シノニム&lt;/h2&gt;
&lt;p&gt;例えば，あなたは &lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt; サイトを運営していて，一部年齢制限が必要なため，人の年齢が &lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt; 歳以上かを判定する関数を書かなければいけないとする．年齢は整数だが，入力は必須でないため入力してない人もいる．その場合は，&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt; 歳以上でないと判定する．この関数は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;isAdult m &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書ける．ただ，この定義はどこか味気ない．&lt;code&gt;isAdult&lt;/code&gt; が受け取るデータは，年齢を表していて，整数か未詳かの状態を持つので，&lt;code&gt;Maybe Int&lt;/code&gt; はデータを正確に捉えられている．しかし，&lt;code&gt;Maybe Int&lt;/code&gt; に適合するデータは他に無数にあるため，&lt;code&gt;isAdult&lt;/code&gt; が受け取るデータが年齢を表すのか知能指数を表すのか，はたまた今までお酒を飲んだことのある回数なのかは推測しないと分からない．年齢を表すデータ型を新たに定義して，それを受け取るようにすればもっとプログラムがクールになるだろう．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で新しくデータ型を定義する最も簡単な方法は，&lt;code&gt;type&lt;/code&gt; キーワードを使って型シノニム &lt;span class=&#34;ascii&#34;&gt;(type synonym)&lt;/span&gt; を定義する方法だ．シノニムとは，別名という意味で，型シノニムは文字通り，ある型の別名を表す．今回は次のように使える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;isAdult age &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; age &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで関数 &lt;code&gt;isAdult&lt;/code&gt; は，先ほどと比べてとても明確になった．&lt;code&gt;Age&lt;/code&gt; は &lt;code&gt;Maybe Int&lt;/code&gt; を元に作られた型シノニムで，つまり &lt;code&gt;Age&lt;/code&gt; は &lt;code&gt;Maybe Int&lt;/code&gt; の別名になっている．単なる別名なので，&lt;code&gt;isAdult&lt;/code&gt; は &lt;code&gt;Maybe Int -&amp;gt; Bool&lt;/code&gt; 型の関数だと思って使うこともできる．&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; で試してみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe Int&lt;/code&gt; を &lt;code&gt;Age&lt;/code&gt; だと思うこともできるしその逆もできる．型シノニムと元となった型は自在に取り替え可能だ．型シノニムはとても手軽なので，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の標準ライブラリでも使われている．例えば，次のようなデータ型が型シノニムで定義されている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列は文字のリストと見做せる．そこから文字列によるデータ型 &lt;code&gt;String&lt;/code&gt; は，単に文字のリスト型の型シノニムで定義されている．文字列に対してリストの関数を自由に適用できるのは，このためだ．ファイルのパスによるデータ型 &lt;code&gt;FilePath&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; の型シノニムで定義されている．なので，文字列の関数を自由に適用できる．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の型シノニムは，これだけに止まらずもっと強力な機能も持っている．例えば，型シノニムは型コンストラクタ，すなわち型を受け取って新たな型を作るコンストラクタに対しても作れる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;Maybe Int&lt;/code&gt; と書く代わりに &lt;code&gt;Option Int&lt;/code&gt; と書くことも可能だ．部分適用された型コンストラクタに対する型シノニムも書ける&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failable&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;Either String ()&lt;/code&gt; と書く代わりに &lt;code&gt;Failable ()&lt;/code&gt; と書くことができる．&lt;/p&gt;
&lt;p&gt;さらに型シノニムは，パラメータを持つことができる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [a]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;[Int]&lt;/code&gt; は &lt;code&gt;List Int&lt;/code&gt; と書ける．ただし，型シノニムはあくまで別名なので，全てのパラメータを適用した状態でしか書けないことに注意する必要がある．例えば，次のプログラムはコンパイルエラーになる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Apply&lt;/code&gt; は&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパラメータをとるが，&lt;code&gt;ApplyMaybe&lt;/code&gt; は &lt;code&gt;Apply&lt;/code&gt; に&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのパラメータしか渡していない．この場合，&lt;code&gt;Apply Maybe&lt;/code&gt; という型がどういう型の別名になるか &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は分からないため，この型を拒否する．このプログラムを修正するには，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように，&lt;code&gt;Apply&lt;/code&gt; に全ての引数を渡してやる必要がある．こうすることで，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は &lt;code&gt;Apply&lt;/code&gt; の定義から &lt;code&gt;Apply Maybe a&lt;/code&gt; が &lt;code&gt;Maybe a&lt;/code&gt; の別名であると認識できるようになる &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;型シノニムは，他にも幾つか用途上で制限がある．&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ目は再帰的な型シノニムが作れないという制限だ．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfiniteList&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;InfiniteList&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という定義は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では却下される．相互再帰的な定義も許容されていない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Rec2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec2&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Rec1&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Rec1&lt;/code&gt; の型を具体的に求めようとすると，&lt;code&gt;[Rec2]&lt;/code&gt; の型になる．&lt;code&gt;Rec2&lt;/code&gt; はやっぱり型シノニムで，&lt;code&gt;[Rec1]&lt;/code&gt; の別名なので，この型はさらに &lt;code&gt;[[Rec1]]&lt;/code&gt; という型になる．このようにして具体的な型を求めようとしても永遠に型シノニムがどこかしらに入り込むことになってしまい，型シノニムが現れない型を求めることはできない．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ではそのようなことがないように，そのような定義を排除している &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの制約は，型シノニムを型クラスのインスタンスとして使えないというものだ．例えば，次のようなことはできない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;I&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代わりに，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように型シノニムを使わず書く必要がある．これは型シノニムを使って書けない唯一の例外だ．ただ，この制限は本質的なものではなく，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準で型シノニムに対する混乱を避けるための制限になっている．もし，型シノニムに対してインスタンスを書けるようにしても，型シノニムは単なる別名なので，それは元となった型に対してインスタンスを定義してることと同じになる．このため，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;f x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数は，&lt;code&gt;type Age = Int&lt;/code&gt; による型シノニム &lt;code&gt;Age&lt;/code&gt; に対して &lt;code&gt;C&lt;/code&gt; のインスタンスが定義されていた場合，&lt;code&gt;a&lt;/code&gt; が &lt;code&gt;Age&lt;/code&gt; の場合も &lt;code&gt;Int&lt;/code&gt; の場合も許容される．これは，プログラマが意図していない動作かもしれない．つまり，年齢のデータだけにインスタンスを定義したつもりが，整数データ全般に対していつのまにかインスタンスを定義してしまったことになるからだ &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;これらの制限はあるものの，型シノニムはデータ型を定義する上でとても強力で，しかも簡単に使用できる機能だ．&lt;/p&gt;
&lt;h2 id=&#34;代数的データ型&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的データ型&#34; title=&#34;代数的データ型&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的データ型&lt;/h2&gt;
&lt;p&gt;さて，型シノニムでデータ型を定義する場合には幾つかの制限があった．では，この制限を超えたデータ型を定義する方法はないのだろうか？ そのような場合には代数的データ型 &lt;span class=&#34;ascii&#34;&gt;(algebraic datatype)&lt;/span&gt; を使うことができる．&lt;/p&gt;
&lt;p&gt;代数的データ型は，複数の型の値を統合して&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型の値として扱うデータ型の積と，複数の型の表現範囲を合わせて&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型として扱うデータ型の和を組み合わせることで構成されている．そして，このデータ型の定義は，型シノニムと異なり完全に新しい型を作り出す．実際の例を見てみよう．&lt;/p&gt;
&lt;p&gt;あなたは積木パズルのパーツそれぞれの面積を計算する関数を，書かなければいけない．積木パズルのパーツはそれぞれ，長方形，真円，三角形から構成されている．まずはこのパーツを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; のデータ型に落とし込む必要がある．それぞれのパーツにおいて，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四角形の面積は縦横の長さ&lt;/li&gt;
&lt;li&gt;真円は半径&lt;/li&gt;
&lt;li&gt;三角形は三辺の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;によって特徴付けられている．では，これを代数的データ型に落とし込んでみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PuzzleElement&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 縦の長さ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 横の長さ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 半径&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 三つの辺の長さを与える&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この定義は，&lt;code&gt;PuzzleElement&lt;/code&gt; という新しい型を作り，&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの値コンストラクタを作る．それぞれ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rect :: Double -&amp;gt; Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Circle :: Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Triangle :: Double -&amp;gt; Double -&amp;gt; Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という型を持つ．&lt;code&gt;Rect&lt;/code&gt; は &lt;code&gt;Double&lt;/code&gt; 型の値を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ受け取り，その&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの値を &lt;code&gt;PuzzleElement&lt;/code&gt; 型の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの値として統合する．つまり，&lt;code&gt;Double&lt;/code&gt; 型&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの積を作る．&lt;code&gt;Circle&lt;/code&gt; や &lt;code&gt;Triangle&lt;/code&gt; も同様だ．そして，&lt;code&gt;PuzzleElement&lt;/code&gt; 型は&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の積の値のいずれかを表し，すなわちこれら&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の積の和を表す．このように，積和によって新しいデータ型を定義できるのが &lt;code&gt;data&lt;/code&gt; 宣言であり，それによって定義されるのが代数的データ型になる．&lt;/p&gt;
&lt;p&gt;代数的データ型の値から統合した値を取り出したい時は，&lt;code&gt;case&lt;/code&gt; 文を使ったパターンマッチを行う&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;areaMeasure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PuzzleElement&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;areaMeasure x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; w h &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pi&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; s1 s2 s3 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (s1 &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; s2 &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; s3) &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sqrt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s1) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s2) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s3)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;areaMeasure&lt;/code&gt; によってパズルのピースの面積を求めることができるようになった．&lt;/p&gt;
&lt;p&gt;前に紹介した型シノニムは，ある型に対してその別名を与えるだけだった．それに比べ，代数的データ型では新しいデータ型を作り，その型の値を作る値コンストラクタを定義する．そして，型シノニムと大きく異なる点は，型システム上からは新たに定義された型しか分からず，実際にそのデータ型がどういう型から構成されるか分からない点にある．&lt;code&gt;PuzzleElement&lt;/code&gt; 型の値は，もしかしたら &lt;code&gt;Double&lt;/code&gt; 型の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの値から &lt;code&gt;Rect&lt;/code&gt; コンストラクタを介して作られているかもしれないし，&lt;code&gt;Double&lt;/code&gt; 型&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの値から &lt;code&gt;Circle&lt;/code&gt; コンストラクタを通して作られているかもしれない．これは実行時にその関数でパターンマッチをしてみて初めて分かることだ．型シノニムでは，型システムからそれがどういう型を元にしていたか分かるが，代数的データ型で観測できるのは新たに作られたデータ型があることだけだ．この違いは，代数的データ型と型シノニムの制約の違いに表れてくる．代数的データ型では，型シノニムの時に挙げたような制約はない．&lt;/p&gt;
&lt;p&gt;例えば，代数的データ型は型シノニムと同様，パラメータをとることができ，さらに部分適用も可能だ &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; (f a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の正しいプログラムになる．&lt;code&gt;Apply&lt;/code&gt; は，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパラメータをとる型コンストラクタになっていて，データ型 &lt;code&gt;Apply f a&lt;/code&gt; の値を作る方法として，&lt;code&gt;f a&lt;/code&gt; 型の値から値コンストラクタ &lt;code&gt;Apply :: f a -&amp;gt; Apply f a&lt;/code&gt; を通す方法がある．&lt;code&gt;ApplyMaybe&lt;/code&gt; は &lt;code&gt;Apply Maybe&lt;/code&gt; の型シノニムになっていて，これを使えば &lt;code&gt;Apply Maybe Int&lt;/code&gt; と書く代わりに &lt;code&gt;ApplyMaybe Int&lt;/code&gt; と書けるようになる．&lt;code&gt;ApplyMaybe&lt;/code&gt; の定義は，&lt;code&gt;Apply&lt;/code&gt; に対して&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのパラメータしか渡していない．にも関わらず正しいというのが，型シノニムと異なる点になる．&lt;/p&gt;
&lt;p&gt;再帰的なデータ型を代数的データ型で定義することも可能だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;データ型 &lt;code&gt;List a&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; 型の要素を持つ単連結リストを表す．値コンストラクタが &lt;code&gt;List a&lt;/code&gt; 型の値を受け取ることがポイントだ．型シノニムでは，その型の定義に自身を含めることはできなかった．これは実際の具体的な型を求めようとした時，その計算が永遠に終わらなくなってしまうからだった．代数的データ型 &lt;code&gt;List a&lt;/code&gt; ではその型は単に新しい型として作られ，実際にその型の値がどういう型の値によって構成されているか知る必要はない．&lt;code&gt;List a&lt;/code&gt; はそれ自体が具体的な型であり &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; ，それ以上計算する必要はないからだ．代数的データ型において，定義された型とその型の値を作る方法は分離されている．そのため，データ型の計算においてその型の値を作る方法は考慮されない．よって，自身が定義中で用いられても，型シノニムのようにデータ型の計算が永遠に終わることがないということはないため，その操作が許容されている．&lt;/p&gt;
&lt;p&gt;もちろん，新しい型が定義されるため，型クラスのインスタンスを混乱なく定義できる．代数的データ型を作成した時，基本的なインスタンスを定義することは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングにおいてよくあることだ．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では，言語機能としてそれを支援する機能がある．それは，&lt;code&gt;deriving&lt;/code&gt; 構文というもので，&lt;code&gt;Eq&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;Ord&lt;/code&gt; などの標準的な型クラスを，データ型の定義から自動で導出してくれる．例えば，&lt;code&gt;List a&lt;/code&gt; に対して使ってみると，以下のようになる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように代数的データ型は，型シノニムでは定義できなかったデータ型を定義することができる．そして，代数的データ型は全く新しい型を作ることもできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Succ&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Zero&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このデータ型 &lt;code&gt;Nat&lt;/code&gt; は，他の型には依存しない全く新しい型だ．このように，代数的データ型は型シノニムと異なり全く新しい構造を作り出すことができる．&lt;/p&gt;
&lt;p&gt;ただ，その代わり既存の関数を流用できなくなってしまう場合がある．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は，&lt;code&gt;(a, b)&lt;/code&gt; と構造が同じであり，&lt;code&gt;(a, b)&lt;/code&gt; に対する関数 &lt;code&gt;fst :: (a, b) -&amp;gt; a&lt;/code&gt; を適用できてもいいはずだ．ところが，データ型 &lt;code&gt;Tuple a b&lt;/code&gt; とその値コンストラクタは型システム上は切り離されているため，自身の値が &lt;code&gt;(a, b)&lt;/code&gt; の値と同じ方法でしか構成できないことを知らない．&lt;code&gt;Tuple a b&lt;/code&gt; と &lt;code&gt;(a, b)&lt;/code&gt; において型上で言及できることは，それらが異なる型であるということだけだ．なので，&lt;code&gt;fst&lt;/code&gt; に &lt;code&gt;Tuple a b&lt;/code&gt; 型の値を渡すことはできない．これは，もし型シノニムを使って，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (a, b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義した場合は解決する問題だ &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;このように両者にはトレードオフがあり，利用目的に合った使い分けをするのがいいだろう．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;data&lt;/code&gt; 宣言の構文は他に&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ，便利な機能がある．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つは正格性フラグと呼ばれる機能で，値コンストラクタにおいて引数を正格に評価することを強制できる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;a &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように，正格性フラグ &lt;code&gt;!&lt;/code&gt; を使った定義を行うと，値コンストラクタ &lt;code&gt;StrictTuple :: a -&amp;gt; b -&amp;gt; StrictTuple&lt;/code&gt; はその引数を正格に評価してから格納するようになる．通常，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように正格性フラグを使わない定義では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように値コンストラクタは受け取った引数の評価を行わず，素直にそのままの形で遅延させて格納するため，エラーを出す式を渡してもその式の評価を行わない限りエラーにはならない．これは通常の関数の動作と同じになる．ところが，正格性フラグを使用した &lt;code&gt;StrictTuple&lt;/code&gt; の場合，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; Prelude.undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように引数の評価を行うため，エラーを出す式を受け取った場合値コンストラクタの適用においてその式を評価しエラーを出す．データ型を作成する際，その元となる式の評価を強制させることはパフォーマンスに大きく寄与する．そのため，そのようなことを支援するために正格性フラグは設けられている．&lt;/p&gt;
&lt;p&gt;また，代数的データ型の値コンストラクタはフィールド名を持つことができる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; firstVal  ::&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; secondVal ::&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合，型コンストラクタ &lt;code&gt;Tuple&lt;/code&gt;，値コンストラクタ &lt;code&gt;Tuple :: a -&amp;gt; b -&amp;gt; Tuple a b&lt;/code&gt; の他に，関数 &lt;code&gt;firstVal :: Tuple a b -&amp;gt; a&lt;/code&gt;， &lt;code&gt;secondVal :: Tuple a b -&amp;gt; b&lt;/code&gt; が作られる．また，値コンストラクタの呼び出しにおいて特別なレコード構文 &lt;code&gt;Tuple { firstVal = 0, secondVal = 1 }&lt;/code&gt; を使用でき，またレコード更新構文 &lt;code&gt;(Tuple 2 1) { firstVal = 0 }&lt;/code&gt; を使用できる．これらは両者 &lt;code&gt;Tuple 0 1&lt;/code&gt; と同様の値が作成される．&lt;/p&gt;
&lt;h2 id=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ある型を元に新たな型を作る-datatype-renaming&#34; title=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ある型を元に新たな型を作る &lt;span class=&#34;ascii&#34;&gt;(Datatype Renaming)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;さて，これまで見てきたように，型シノニムは型の別名を定義し，代数的データ型は型の積和により新たなデータ型を定義するものだった．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; にはもう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つデータ型を定義する方法がある．それが &lt;code&gt;newtype&lt;/code&gt; 宣言だ．この宣言によって作られるデータ型は，型システム上は代数的データ型と同じように扱われ，実行時は型シノニムと同様の動作をする．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; 宣言の構文は，&lt;code&gt;data&lt;/code&gt; 宣言と同じような形をしている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールド名をつけることもできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; unIdentity ::&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合 &lt;code&gt;data&lt;/code&gt; 宣言と同様に，型コンストラクタ &lt;code&gt;Identity&lt;/code&gt;，値コンストラクタ &lt;code&gt;Identity&lt;/code&gt; が作られることになる．ただし，&lt;code&gt;data&lt;/code&gt; 宣言と異なり &lt;code&gt;newtype&lt;/code&gt; は積和の機能を使用することはできない．単にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型を受け取る値コンストラクタしか定義できない．なので，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unit&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はいずれも受け入れられない．この &lt;code&gt;newtype&lt;/code&gt; の制約はいまいちよく分からない．では，このような制約によりどのような違いが出るのだろうか？ &lt;code&gt;newtype&lt;/code&gt; と &lt;code&gt;data&lt;/code&gt; は型システム上は違いはない．しかし，パターンマッチの動作など，実行時の動作に少し差異が設けられている．例えば，通常&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;において，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; Prelude.undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにエラーを出す式をパターンマッチで分解しようとするとエラーが出力される．ところが，&lt;code&gt;newtype&lt;/code&gt; によって作られた値コンストラクタの場合，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにパターンマッチ時にエラーが出されることはない．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では &lt;code&gt;newtype&lt;/code&gt; で作られた値コンストラクタが実行動作に影響することはないと規定されている．よって，上のパターンマッチは，以下と同様の動きをすることになっている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように値コンストラクタを指定しないパターンマッチの場合，&lt;code&gt;data&lt;/code&gt; 宣言で作られたものもエラーを出さない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;よって，&lt;code&gt;data&lt;/code&gt; と &lt;code&gt;newtype&lt;/code&gt; で作られた値コンストラクタの動作が異なるのは，パターンマッチにおいて値コンストラクタを指定した場合だけということになる．&lt;/p&gt;
&lt;p&gt;では，&lt;code&gt;newtype&lt;/code&gt; はなぜ値コンストラクタを無視するよう規定されているのだろう？ これは，&lt;code&gt;newtype&lt;/code&gt; によるデータ型が実行時の動作として型シノニムと同様の動作をすることを目的としてしているからだ．値コンストラクタが無視されるのは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という宣言は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IdentitySynonym&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という宣言と同様の意味を持って欲しいことを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の設計者が意図しているからだ．よって，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の動作は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IdentitySynonym&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように，代数的データ型ではなく型シノニムに合わせてあるため，&lt;code&gt;data&lt;/code&gt; 宣言主体に見ると一見不思議な動作をしていたというわけだ．&lt;/p&gt;
&lt;p&gt;さて，ではなぜわざわざ型シノニムとは別に &lt;code&gt;newtype&lt;/code&gt; 宣言を導入したのだろうか？ 型シノニムには幾つか制約があったのを思い出して欲しい．そして，それらの制約は代数的データ型では解決されたのだった．それは &lt;code&gt;type&lt;/code&gt; 宣言が単に型の別名を導入するのに対し，&lt;code&gt;data&lt;/code&gt; 宣言が完全に新たな型を作るからだった．&lt;code&gt;newtype&lt;/code&gt; はその点に着目し，実行時には単なる別名として動作するが型システム上は完全に別の新たな型を導入することで，&lt;code&gt;type&lt;/code&gt; 宣言同様ある型の別名を作りたいものの型シノニムの制約は回避したい需要を満たすようにしたものだ．&lt;/p&gt;
&lt;p&gt;例えば，大文字小文字を区別しない文字列データを考えてみよう．この場合，&lt;code&gt;&#34;aBc&#34; == &#34;Abc&#34;&lt;/code&gt; であって欲しいが，これは型シノニムで&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義するだけでは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のままだ．そこで，&lt;code&gt;newtype&lt;/code&gt; を使って，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; s1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; s2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go s1 s2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-8&#34; title=&#34;8&#34;&gt;      go []       []       &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-9&#34; title=&#34;9&#34;&gt;      go []       (_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_)    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-10&#34; title=&#34;10&#34;&gt;      go (_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_)    []       &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-11&#34; title=&#34;11&#34;&gt;      go (c1&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;cs1) (c2&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;cs2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; c1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; c2 &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go cs1 cs2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とできる．型シノニムは単なる &lt;code&gt;String&lt;/code&gt; の別名なので，&lt;code&gt;String&lt;/code&gt; と異なるインスタンスを新しく定義することはできない．それに対して，&lt;code&gt;newtype&lt;/code&gt; によるデータ型は代数的データ型と同様に自由に定義することができる．そして，値コンストラクタ &lt;code&gt;CaseInsens&lt;/code&gt; は単なる飾りであり，実行時には完全に無視されるため，&lt;code&gt;CaseInsensString&lt;/code&gt; は動作としては &lt;code&gt;String&lt;/code&gt; の別名としてみることができる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; は型シノニムでの制約であった，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再帰的なデータ型が定義できない&lt;/li&gt;
&lt;li&gt;型コンストラクタに対する部分適用ができない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった問題も解決する．このように &lt;code&gt;newtype&lt;/code&gt; は型シノニムの問題を改善したデータ型を定義するが，&lt;code&gt;data&lt;/code&gt; 宣言と同様型シノニムでは起きなかった問題も一緒に顕在化させてしまう．&lt;/p&gt;
&lt;p&gt;上の例で，&lt;code&gt;CaseInsens&lt;/code&gt; は飾りだと言ったが，実際にはこの値コンストラクタは必要不可欠であり，重要な役割を持っている．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の例は，片方だけ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としてしまうと，コンパイルエラーになってしまう．なぜなら，&lt;code&gt;(==)&lt;/code&gt; は&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの引数が同じ型の値である必要があり，&lt;code&gt;&#34;aBc&#34;&lt;/code&gt; の型である &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;CaseInsens &#34;Abc&lt;/code&gt; の型である &lt;code&gt;CaseInsensString&lt;/code&gt; は全く異なる型であるからだ．つまり，値コンストラクタ &lt;code&gt;CaseInsens&lt;/code&gt; は，実行時には何の影響も与えないが，型システム上は全く異なる型の値であることを示すマーカーとなる．そして，型シノニムではデータ型は単なる別名であったが，&lt;code&gt;newtype&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; と同様全く新たな型として導入する道を選んだため，元の型として受け入れてもらうことが出来なくなってしまったのだ．&lt;/p&gt;
&lt;p&gt;といっても，これは一長一短である．&lt;code&gt;data&lt;/code&gt; と同様 &lt;code&gt;newtype&lt;/code&gt; で作られた型は，型シノニムのように既存の関数を使い回すことができない．その反面，データの意味に沿わないプログラムを型によって弾くことができるという点は長所になる場合もある．例えば，&lt;code&gt;&#34;aBc&#34; == CaseInsens &#34;Abc&#34;&lt;/code&gt; の例は，一体どのような結果を返すべきか一見して分からない．両者は単なる文字列と，大文字小文字を区別しない文字列という異なるデータを表しており，その比較は定義されないとするのが自然だろう．このような場合に，型シノニムでは定義されないことを表す方法はなかったが，&lt;code&gt;newtype&lt;/code&gt; は元の型と異なる型を持つので，そのような仕組みを作ることができる．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;newtype&lt;/code&gt; において値コンストラクタは実行時に何の影響も及ぼさないことと，何故そうなっているかについて分かってもらえただろうか？ この影響は，パターンマッチ以外にも表れる．例えば，&lt;code&gt;newtype&lt;/code&gt; の値コンストラクタに正格性フラグの機能はない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictNewtype&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictNewtype&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というプログラムは，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では受け入れられない．なぜなら，これを受け入れた場合，値コンストラクタがあるかどうかによって実行時の動作が変わってしまうからだ．ただ，その他の &lt;code&gt;data&lt;/code&gt; 宣言の機能は使用できる．&lt;code&gt;deriving&lt;/code&gt; も使用できる．&lt;code&gt;newtype&lt;/code&gt; で作られたデータ型は，元のデータ型のインスタンスを継承することはできない．全く新たな型を作ったため，更地の状態から始まる．ただし，&lt;code&gt;deriving&lt;/code&gt; を使うことでインスタンスを用意に導出することは可能だ．ただ，標準クラスのインスタンスしか自動で導出できないため，自身で定義した型クラスなどのインスタンスは一から書く必要がある．そのことには，注意する必要があるだろう &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;最後に少し応用的な &lt;code&gt;newtype&lt;/code&gt; の使い方を紹介しよう．&lt;code&gt;newtype&lt;/code&gt; は上のように目的に合わせて型を既存の型から作る他，型シノニムの制約によって定義できない型上の計算を実現するのにも使用できる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; (f (&lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; f))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という変わったデータ型を使うと，型上の不動点演算をエミュレートできる．また，&lt;code&gt;newtype&lt;/code&gt; を使うことで幽霊型による曖昧な型を避けることもできる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; ann a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-4&#34; title=&#34;4&#34;&gt;readShow s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を考える．この関数 &lt;code&gt;readShow&lt;/code&gt; は，&lt;code&gt;WithAnn&lt;/code&gt; で引数に &lt;code&gt;a&lt;/code&gt; を使っているにもかかわらず &lt;code&gt;a&lt;/code&gt; が曖昧な型になるため弾かれる．なぜなら，型シノニム &lt;code&gt;WithAnn a String&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; と書いてるのと同じであり，&lt;code&gt;readShow&lt;/code&gt; は&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型を持つのと同様になってしまうからだ．このため，制約だけに &lt;code&gt;a&lt;/code&gt; が現れることになってしまい，曖昧な型になってしまう．この例のような，型シノニムが具体化されてしまうことで曖昧な型が生じる問題は，&lt;code&gt;newtype&lt;/code&gt; を使用することで回避できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; ann a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-4&#34; title=&#34;4&#34;&gt;readShow (&lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は型システム上は &lt;code&gt;WithAnn a String&lt;/code&gt; が実行時に単なる &lt;code&gt;String&lt;/code&gt; の別名として扱われることを知らず，これを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの具体化された型として認識する．このため，実際には &lt;code&gt;a&lt;/code&gt; が引数の値に何ら関与しない場合も，型 &lt;code&gt;a&lt;/code&gt; を伴う型として残る．よって，この場合は &lt;code&gt;a&lt;/code&gt; は曖昧な型にならず，&lt;code&gt;WithAnn a String&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分にあてがわれる型から特定することができる．このように，型シノニムで早期に元となった型に具体化されることで生じる問題は，&lt;code&gt;newtype&lt;/code&gt; を使うことで実際に値を作る箇所とパターンマッチの箇所での型計算に遅延させることができ，回避できる場合がある．&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つのデータ型定義方法について紹介した．&lt;/p&gt;
&lt;p&gt;型シノニムは，ある型に対してその別名を与えることで，データ型を定義するものだった．簡易で元の型に対する関数をそのまま流用でき，使いやすい反面，部分適用ができない，再帰的データ型が定義できない，型クラスのインスタンスにできないと言う制約があった．&lt;/p&gt;
&lt;p&gt;代数的データ型は複数の型の積和によって全く新しいデータ型を定義するものだった．型シノニムであった制約を回避でき，新たな構造を導入できるが，関数の流用が困難な場合があり型シノニムとの使い分けが必要だった．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; によるデータ型は，型システム上は代数的データ型と，実行時の動作は型シノニムと同様といった，それぞれの中間をとったようなものだった．型シノニムのような関数の流用ができない場合はあるものの，その代わり型シノニムの制約を回避でき，型システム上は全く異なる振る舞いを行うことも可能だった．&lt;/p&gt;
&lt;p&gt;これらは，それぞれが一長一短を持ち，目的にあった使い分けをする必要がある．この記事が，そのような場合の助けになればいいと思う．では，今回はこれで．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;型シノニムに対して部分適用を許容する一般的な方法は，型上にもラムダ抽象にあたる表現を導入することである．ただ，この場合型上の演算が停止しない場合があり，型システムが決定不能になる．このため，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では型シノニムに対しての部分適用は許容していない．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;等価再帰データ型 &lt;span class=&#34;ascii&#34;&gt;(equirecursive types)&lt;/span&gt; と呼ばれる特別な型を型システムに導入することで，このような型を許容する理論は存在するが，この理論はとても複雑で型検査のアルゴリズムも難しくなりがちである．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;ただ，このような混乱が起こるかもしれないことを許容し，利便性のため型シノニムをインスタンス定義で使いたい場合，&lt;code&gt;TypeSynonymInstances&lt;/code&gt; という &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; 拡張を有効にすることで許容されるようになる．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;型上の計算によって，実際の型が特定される型シノニムとは異なり，代数的データ型の型コンストラクタはそれ自体がもう計算できないものになる．それは部分適用されても同様であり，部分適用を許容することで型シノニムと同様の問題は起こらない．これが，代数的データ型で部分適用が許容されている理由になる．&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;実際にはパラメータ &lt;code&gt;a&lt;/code&gt; の部分に具体的な型を当てはめないといけないが，当てはめればそれは完全に具体的な型になる．&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;なお，代数的データ型でも型シノニムと同様の利点を手に入れるための研究は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では盛んに行われている．例えば，&lt;code&gt;Generic&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;Data&lt;/code&gt; 型クラス，&lt;code&gt;lens&lt;/code&gt; パッケージなどを使うことで，構造が同じだが異なるデータ型で関数が流用できない問題を回避できる場合がある．&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; 拡張では，&lt;code&gt;deriving&lt;/code&gt; 構文の拡張として強力な機能がいくつか搭載されている．特に &lt;code&gt;newtype&lt;/code&gt; によるデータ型の場合は，&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; や &lt;code&gt;DerivingVia&lt;/code&gt; 拡張を使えば，インスタンスの自動導出の範囲を大幅に拡大できる．&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/strict-gotchas.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Strict拡張を使用する際の注意点&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html</id><title type="text">Hamler の Docker イメージを作る</title><updated>2020-06-13T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://www.hamler-lang.org/&#34;&gt;Hamler&lt;/a&gt; という ErlangVM 上で動作する Haskell に似た構文のプログラミング言語が公開された． 手元で遊ぶためにまず，Docker イメージを作ってみることにした（brew したくなかった）． &lt;a href=&#34;https://hub.docker.com/repository/docker/matsubara0507/hamler&#34;&gt;作成したイメージはココ&lt;/a&gt;で&lt;a href=&#34;https://github.com/matsubara0507/docker-hamler&#34;&gt;リポジトリはココ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;ちなみに，今回利用するバージョンは &lt;code&gt;0.1&lt;/code&gt; です．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/erlang/docker-erlang-otp/blob/ed3bd9400e1b72b2bdd08596990f8ed3350a75c0/22/Dockerfile#L1&#34;&gt;公式の Erlang の Docker イメージは Debian&lt;/a&gt; なので，Debian の Docker イメージを作る． 現状は Mac 用のバイナリしか提供されていないので自前でビルドする必要がある． 自前でビルドする方法は&lt;a href=&#34;https://github.com/hamler-lang/hamler/tree/2ed8e6088721471a4dd7993eb6a984fb7ce66a73#installation&#34;&gt;公式ドキュメント&lt;/a&gt;によると次の通り：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Erlang インストール&lt;/li&gt;
&lt;li&gt;Haskell Stack をインストール&lt;/li&gt;
&lt;li&gt;hamler-lang/hamler リポジトリをクローン&lt;/li&gt;
&lt;li&gt;リポジトリで &lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;幸いにも，Hamler は Haskell Stack でビルドできるので簡単だ．&lt;/p&gt;
&lt;h3 id=&#34;コンパイラをビルドする&#34;&gt;コンパイラをビルドする&lt;/h3&gt;
&lt;p&gt;まずは Stack をインストールしよう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マルチステージビルドをするので AS でタグづけしておく&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sSL https://get.haskellstack.org/ | sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にリポジトリを &lt;code&gt;git clone&lt;/code&gt; してビルドする：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，&lt;code&gt;make&lt;/code&gt; というか中身は &lt;code&gt;stack build&lt;/code&gt; のところで次のようなエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Package&lt;/span&gt; index cache populated&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Cloning&lt;/span&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f from git@github.com:hamler-lang/CoreErlang.git&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Received&lt;/span&gt; ExitFailure 128 when running&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Raw&lt;/span&gt; command: /usr/bin/git clone git@github.com:hamler-lang/CoreErlang.git /tmp/with-repo10/cloned&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Standard&lt;/span&gt; error:&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Cloning&lt;/span&gt; into &lt;span class=&#34;st&#34;&gt;&amp;#39;/tmp/with-repo10/cloned&amp;#39;&lt;/span&gt;...&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Host&lt;/span&gt; key verification failed.&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;fatal&lt;/span&gt;: Could not read from remote repository.&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Please&lt;/span&gt; make sure you have the correct access rights&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;and&lt;/span&gt; the repository exists.&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;make&lt;/span&gt;: *** [Makefile:9: build] Error 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは stack.yaml の &lt;code&gt;extra-deps&lt;/code&gt; で次のように指定していたからだ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git@github.com:hamler-lang/CoreErlang.git&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git@github.com:hamler-lang/purescript.git&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2c43709229b12e72dfc550ccf3efce6bfa60da72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git@github.com:owner/repo.git&lt;/code&gt; という形で指定すると SSH を利用した方法で &lt;code&gt;git clone&lt;/code&gt; をするのだが，この Docker 環境では SSH の設定をしていないのでエラーになる． なので，次のように書き換えてあげれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/CoreErlang&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/purescript&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2c43709229b12e72dfc550ccf3efce6bfa60da72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように修正した &lt;code&gt;stack.yaml&lt;/code&gt; を用意して上書きすることにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; stack.yaml hamler/stack.yaml&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;余談だが，これについては&lt;a href=&#34;https://github.com/hamler-lang/hamler/pull/157&#34;&gt;修正PRを出してマージされた&lt;/a&gt;ので次のバージョンからは必要ない． で，今度は次のようなエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; configure&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Configuring language-javascript-0.7.0.0...&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Preprocessing library for language-javascript-0.7.0.0..&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; happy: src/Language/JavaScript/Parser/Grammar7.y: hGetContents: invalid argument (invalid byte sequence)&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt;  While building package language-javascript-0.7.0.0 using:&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;/root/.stack/setup-exe-cache/x86_64-linux-tinfo6/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5&lt;/span&gt; --builddir=.stack-work/dist/x86_64-linux-tinfo6/Cabal-2.4.0.1 build --ghc-options &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;Process&lt;/span&gt; exited with code: ExitFailure 1&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;make&lt;/span&gt;: *** [Makefile:9: build] Error 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい，親の顔よりも見る &lt;code&gt;hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt; ですね． language-javascript パッケージは UTF-8 前提なので &lt;code&gt;LC_ALL&lt;/code&gt; 環境変数を UTF-8 にしてあげる必要がある：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; stack.yaml hamler/stack.yaml&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでコンパイラのビルドは成功した！&lt;/p&gt;
&lt;h3 id=&#34;replを試すまで&#34;&gt;REPLを試すまで&lt;/h3&gt;
&lt;p&gt;マルチステージビルドなのでビルドしたコンパイラを次のステージにコピーしよう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに &lt;code&gt;--help&lt;/code&gt; をしてみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run --rm matsubara0507/hamler --help&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Usage&lt;/span&gt;: hamler COMMAND&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;The&lt;/span&gt; hamler compiler based on purescript v0.13.6&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Available&lt;/span&gt; options:&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;--version&lt;/span&gt;                Show the version number&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-h&lt;/span&gt;,--help                Show this help text&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Available&lt;/span&gt; commands:&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;build&lt;/span&gt;                    Compile hamler source files&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;init&lt;/span&gt;                     init a hamler project&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;run&lt;/span&gt;                      run hamler project&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;repldev&lt;/span&gt;                  dev hamler lib&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;repl&lt;/span&gt;                     run hamler repl&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;For&lt;/span&gt; help using each individual command, run &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; COMMAND --help&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;. For&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;example&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; build --help&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; displays options specific to the &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; command.&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; 0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;動作確認するために REPL を試してみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run -it --rm matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt;: //src: getDirectoryContents:openDirStream: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;グローバルな環境で REPL は使えないっぽいのでプロジェクトを作成してみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run --rm -w /work -v &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;/example:/work matsubara0507/hamler init&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run -it --rm -w /work -v &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;/example:/work matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt;: /usr/local/lib/hamler/lib: getDirectoryContents:openDirStream: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/usr/local/lib/hamler/lib&lt;/code&gt; ？？？ いったいこれはどこで参照してるやつだ？？？と思ってリポジトリで色々調べてみたところ，どうやら標準ライブラリかなんかを参照してるっぽい． バグかな？って思ったけど &lt;a href=&#34;https://github.com/hamler-lang/homebrew-hamler/blob/0.1/Formula/hamler.rb#L38-L40&#34;&gt;&lt;code&gt;brew&lt;/code&gt; の設定&lt;/a&gt;をみてみたらリポジトリっぽいのを &lt;code&gt;/usr/local/lib/hamler&lt;/code&gt; にシンボリックリンクしてるようだった． なので，試しにそうしてみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /work/hamler /usr/local/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度はこういうエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;/work&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;hamler: /usr/local/lib/hamler/bin/replsrv: start replsrv error!! : runInteractiveProcess: exec: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bin/replsrv&lt;/code&gt; ？？？ &lt;code&gt;brew&lt;/code&gt; でインストールしてる tgz の中身をみてみたら &lt;code&gt;bin&lt;/code&gt; ディレクトリがあり，そこには &lt;code&gt;replsrv&lt;/code&gt; と &lt;code&gt;hamler&lt;/code&gt; というファイルがあった． &lt;code&gt;hamler&lt;/code&gt; はコンパイラのバイナリで，&lt;code&gt;replsrv&lt;/code&gt; は Erlang のスクリプトだった． 探してみたら &lt;code&gt;repl/replsrv&lt;/code&gt; という Erlang スクリプトがリポジトリにあり，&lt;code&gt;diff&lt;/code&gt; してみたら tgz のものと一緒だった． なのでこれをコピーするようにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /work/hamler /usr/local/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir /usr/local/lib/hamler/bin \&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/lib/hamler/repl/replsrv /usr/local/lib/hamler/bin&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんとこれで REPL が動作した：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl
&amp;quot;/work&amp;quot;
Compiling Data.Void
...
Compiling Main
Compiling Demo.GenServer
PSCi, version 0.13.6
Type :? for help

&amp;gt; :?
The following commands are available:

    :?                        Show this help menu
    :quit                     Quit PSCi
    :reload                   Reload all imported modules while discarding bindings
    :clear                    Discard all imported modules and declared bindings
    :browse      &amp;lt;module&amp;gt;     See all functions in &amp;lt;module&amp;gt;
    :type        &amp;lt;expr&amp;gt;       Show the type of &amp;lt;expr&amp;gt;
    :kind        &amp;lt;type&amp;gt;       Show the kind of &amp;lt;type&amp;gt;
    :show        import       Show all imported modules
    :show        loaded       Show all loaded modules
    :show        print        Show the repl&amp;#39;s current printing function
    :paste       paste        Enter multiple lines, terminated by ^D
    :complete    &amp;lt;prefix&amp;gt;     Show completions for &amp;lt;prefix&amp;gt; as if pressing tab
    :print       &amp;lt;fn&amp;gt;         Set the repl&amp;#39;s printing function to &amp;lt;fn&amp;gt; (which must be fully qualified)
    :set         pro val      Set the pro&amp;#39;s val

Further information is available on the PureScript documentation repository:
 --&amp;gt; https://github.com/purescript/documentation/blob/master/guides/PSCi.md
&amp;gt; 1 + 1
2
&amp;gt; :type 1
Integer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;やったね．&lt;/p&gt;
&lt;h2 id=&#34;おまけサンプルプログラム&#34;&gt;おまけ：サンプルプログラム&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hamler-lang/documentation/blob/60607565253a2b6fa3984067cf068c20ec971d69/guides/01_WhyHamler.md#erlang-and-concurrency&#34;&gt;ここにあるサンプルプログラム&lt;/a&gt;をビルドして実行してみた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- `hamler run` は Main.main 関数を実行するみたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- メインプロセスのプロセスIDを取得&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;  pid0 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; selfPid&lt;/span&gt;
&lt;span id=&#34;cb17-6&#34;&gt;&lt;a href=&#34;#cb17-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `spawn` は子プロセスの生成、`seqio` は IO 専用の `sequence`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-7&#34;&gt;&lt;a href=&#34;#cb17-7&#34;&gt;&lt;/a&gt;  pid100 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; seqio [spawn loop (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid0) &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb17-8&#34;&gt;&lt;a href=&#34;#cb17-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `last` はリストの最後の要素を、`init` はリストの最後以外の部分リストを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-9&#34;&gt;&lt;a href=&#34;#cb17-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `[x|xs]` は Haskell の `x:xs`、つまりリストの中身を1つずらしてる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-10&#34;&gt;&lt;a href=&#34;#cb17-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `send` は指定したプロセスにメッセージを送信する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-11&#34;&gt;&lt;a href=&#34;#cb17-11&#34;&gt;&lt;/a&gt;  seqio [send j (&lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; i) &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; (i,j) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;zip&lt;/span&gt; pid100 [&lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; pid100&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; pid100]) ]&lt;/span&gt;
&lt;span id=&#34;cb17-12&#34;&gt;&lt;a href=&#34;#cb17-12&#34;&gt;&lt;/a&gt;  send (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; pid100) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;great hamler! &amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-13&#34;&gt;&lt;a href=&#34;#cb17-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-14&#34;&gt;&lt;a href=&#34;#cb17-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-15&#34;&gt;&lt;a href=&#34;#cb17-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pid&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-16&#34;&gt;&lt;a href=&#34;#cb17-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-17&#34;&gt;&lt;a href=&#34;#cb17-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-18&#34;&gt;&lt;a href=&#34;#cb17-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;dealMessage ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-19&#34;&gt;&lt;a href=&#34;#cb17-19&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; p) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; p)&lt;/span&gt;
&lt;span id=&#34;cb17-20&#34;&gt;&lt;a href=&#34;#cb17-20&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str &lt;span class=&#34;dv&#34;&gt;11111&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid)&lt;/span&gt;
&lt;span id=&#34;cb17-21&#34;&gt;&lt;a href=&#34;#cb17-21&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-22&#34;&gt;&lt;a href=&#34;#cb17-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt; send pid (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str (i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb17-23&#34;&gt;&lt;a href=&#34;#cb17-23&#34;&gt;&lt;/a&gt;     pid0 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; selfPid&lt;/span&gt;
&lt;span id=&#34;cb17-24&#34;&gt;&lt;a href=&#34;#cb17-24&#34;&gt;&lt;/a&gt;     println (&lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; pid0 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; pid &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; str &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i)&lt;/span&gt;
&lt;span id=&#34;cb17-25&#34;&gt;&lt;a href=&#34;#cb17-25&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid)&lt;/span&gt;
&lt;span id=&#34;cb17-26&#34;&gt;&lt;a href=&#34;#cb17-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-27&#34;&gt;&lt;a href=&#34;#cb17-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;loop ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-28&#34;&gt;&lt;a href=&#34;#cb17-28&#34;&gt;&lt;/a&gt;loop s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-29&#34;&gt;&lt;a href=&#34;#cb17-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `receive` は送信されたメッセージを受信する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-30&#34;&gt;&lt;a href=&#34;#cb17-30&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; receive&lt;/span&gt;
&lt;span id=&#34;cb17-31&#34;&gt;&lt;a href=&#34;#cb17-31&#34;&gt;&lt;/a&gt;  s1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dealMessage s x&lt;/span&gt;
&lt;span id=&#34;cb17-32&#34;&gt;&lt;a href=&#34;#cb17-32&#34;&gt;&lt;/a&gt;  loop s1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Erlang についてはあんまり詳しくないんだが，確かいわゆるアクターモデル的な並行システムだった気がする． 各 Erlang プロセスはメッセージボックス的なのを持っていて，別プロセスから送信することができる． この型検査ってどれぐらいできるのだろうか． さすがに送信・受信の型があってるかまではチェックできなそう（調べてない）．&lt;/p&gt;
&lt;p&gt;で，これをビルドした結果がこちら：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler build
Compiling Data.Void
...
Compiling Demo.GenServer
Compiling Main

$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler run
&amp;lt;0.749.0&amp;gt; -&amp;gt; &amp;lt;0.750.0&amp;gt;: great hamler! 672
&amp;lt;0.80.0&amp;gt; -&amp;gt; &amp;lt;0.81.0&amp;gt;: great hamler! 3
&amp;lt;0.81.0&amp;gt; -&amp;gt; &amp;lt;0.82.0&amp;gt;: great hamler! 4
&amp;lt;0.82.0&amp;gt; -&amp;gt; &amp;lt;0.83.0&amp;gt;: great hamler! 5
...
&amp;lt;0.791.0&amp;gt; -&amp;gt; &amp;lt;0.792.0&amp;gt;: great hamler! 7714
&amp;lt;0.792.0&amp;gt; -&amp;gt; &amp;lt;0.793.0&amp;gt;: great hamler! 7715&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;会社単位で作ってるみたい． すごいなぁ，羨ましい．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/strict-gotchas.html</id><title type="text">Strict拡張を使用する際の注意点</title><updated>2020-06-11T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/strict-gotchas.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は他の多くのプログラミング言語と異なった特徴を備えており、しばしばそれらが議論を呼ぶことがあります。その中でも特によく俎上に上がるのが、遅延評価です。遅延評価は、適切に扱えば不要な計算を行わず、計算資源を節約してくれるステキな仕組みですが、一歩使い方を間違うと「サンク」という「これから実行する&lt;small&gt;（かも知れない）&lt;/small&gt;計算」を表すオブジェクトが無駄に作られてしまい、却ってメモリー消費量が増えてしまう、などといった問題を抱えています。この現象は「スペースリーク」と呼ばれ、かつて&lt;a href=&#34;https://qiita.com/advent-calendar/2015/haskell-space-leaks&#34;&gt;専門の&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;&lt;/a&gt;が作られたことがあるほど、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;達の関心を集めてきました。&lt;/p&gt;
&lt;p&gt;そんな&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;達の悩みの種を軽減しようと、&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;以降、&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-by-default-pattern-bindings&#34;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-data&#34;&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;/a&gt;という言語拡張が搭載されました。これらの拡張は、大雑把に言うと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 値コンストラクターにおいて、引数の値が弱頭正規形（&lt;span class=&#34;ascii&#34;&gt;Weak Head Normal Form&lt;/span&gt;。以降慣習に従い「&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;」と呼びます）まで評価されるようになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;StrictData&lt;/code&gt;の効果に加え、あらゆる関数の引数やローカル変数の定義において、パターンマッチで代入した変数の値が&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価されるようになる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というものです。&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;StrictData&lt;/code&gt;は比較的リスクが少なく大変有用&lt;small&gt;（もはや標準であって欲しいぐらい）&lt;/small&gt;という声をよく聞きますが&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;、&lt;code&gt;Strict&lt;/code&gt;については様々な問題点があることが知られています。今回はその各種問題点をまとめて共有することで、思い切って&lt;code&gt;Strict&lt;/code&gt;を有効にするときに参考になる情報を提供したいと思います！&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#前提知識とその参考資料&#34; title=&#34;前提知識とその参考資料&#34;&gt;前提知識とその参考資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#サンプルコードの試し方&#34; title=&#34;サンプルコードの試し方&#34;&gt;サンプルコードの試し方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-1-where句だろうとなんだろうと評価&#34; title=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 1:&lt;/span&gt; &lt;code&gt;where&lt;/code&gt;句だろうとなんだろうと評価&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34; title=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-3-内側のパターンはやっぱりダメ&#34; title=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 3:&lt;/span&gt; 内側のパターンはやっぱりダメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-4-foldrに渡す関数&#34; title=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 4:&lt;/span&gt; &lt;code&gt;foldr&lt;/code&gt;に渡す関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-5-undefinedを受け取るメソッド&#34; title=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 5:&lt;/span&gt; &lt;code&gt;undefined&lt;/code&gt;を受け取るメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに-やっぱりstrictは使う使わない&#34; title=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; やっぱり&lt;code&gt;Strict&lt;/code&gt;は使う？使わない？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;前提知識とその参考資料&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#前提知識とその参考資料&#34; title=&#34;前提知識とその参考資料&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;前提知識とその参考資料&lt;/h1&gt;
&lt;p&gt;以下の知識について、ざっくり理解しているものとして進めます。参考になりそうな日本語のページも付記したので、ご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の遅延評価について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itchyny.hatenablog.com/entry/20130209/1360417348&#34;&gt;実装して理解する遅延評価の仕組み 〜 &lt;span class=&#34;ascii&#34;&gt;thunk&lt;/span&gt;を絵に描いて理解しよう・&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を実装！？ &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; プログラムモグモグ&lt;/a&gt;が詳しくて分かりやすいでしょう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の正格評価、および&lt;code&gt;BangPatterns&lt;/code&gt;について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-all-about-strictness&#34;&gt;正格性のすべて &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;翻訳&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;と&lt;code&gt;StrictData&lt;/code&gt;について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Strict Haskell -&lt;/span&gt; あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他、&lt;a href=&#34;https://qiita.com/advent-calendar/2015/haskell-space-leaks&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;スペースリーク &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2015 - Qiita&lt;/span&gt;&lt;/a&gt;の記事にも有用なものがたくさんあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;サンプルコードの試し方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#サンプルコードの試し方&#34; title=&#34;サンプルコードの試し方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;サンプルコードの試し方&lt;/h1&gt;
&lt;p&gt;これから紹介するコードは、すべて&lt;a href=&#34;https://github.com/haskell-jp/blog/tree/master/examples/2020/strict-gotchas&#34;&gt;このブログのリポジトリーの、&lt;code&gt;examples&lt;/code&gt;ディレクトリー&lt;/a&gt;に置いておきました。下記のコマンドを実行すれば実際に試すことができます&lt;small&gt;（一部実行する際のコマンドが異なりますので、適宜例示します）&lt;/small&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/haskell-jp/blog.git
cd blog/examples/2020/strict-gotchas
stack exec runghc -- &amp;lt;これから紹介するコードのファイル&amp;gt;.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実際に試すときは&lt;code&gt;--ghc-arg=-XStrict&lt;/code&gt;というオプションを&lt;code&gt;runghc&lt;/code&gt;に付けた場合と付けなかった場合両方で実行して、違いを確かめてみてください。&lt;/p&gt;
&lt;p&gt;なお、使用した&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは&lt;span class=&#34;ascii&#34;&gt;8.10.1&lt;/span&gt;で、&lt;span class=&#34;ascii&#34;&gt;OS&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Windows 10 ver. 1909&lt;/span&gt;です。&lt;/p&gt;
&lt;h1 id=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-1-where句だろうとなんだろうと評価&#34; title=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 1:&lt;/span&gt; &lt;code&gt;where&lt;/code&gt;句だろうとなんだろうと評価&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/where.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;where.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最初のケースは、遅延評価で当たり前に享受できていたメリットが、&lt;code&gt;Strict&lt;/code&gt;を有効にしている状態では得られなくなってしまう、というものです。&lt;a href=&#34;https://qiita.com/pxfnc/items/a26bda6d11402daba675&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pxfnc&lt;/span&gt;さんの&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張でハマったお話&lt;/a&gt;という記事でも紹介されてはいますが、まとめ記事なのでここでも改めて取り上げます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; div10 &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;div10 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;div10 n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; result&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ご覧のとおり、本当にほとんど&lt;span class=&#34;ascii&#34;&gt;pxfnc&lt;/span&gt;さんの記事のサンプルそのままで恐縮ですが、このプログラム、👇のように&lt;code&gt;Strict&lt;/code&gt;拡張を有効にして実行するとエラーが起こります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict where.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;where.hs&lt;/span&gt;: divide by zero&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一方、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしなかった場合、エラーは起こりません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc where.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜこんなことが起こるのでしょう？&lt;/p&gt;
&lt;p&gt;これは、&lt;code&gt;Strict&lt;/code&gt;拡張がパターンマッチで代入したあらゆる変数の値を&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価するようになった結果、&lt;code&gt;where&lt;/code&gt;句で代入した変数まで必ず&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価してしまうために発生したエラーです。すなわち、&lt;code&gt;where&lt;/code&gt;における、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;までもが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と&lt;span class=&#34;ascii&#34;&gt;Bang&lt;/span&gt;パターンを付けた代入であるかのように解釈されたのです&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;こうなると、&lt;code&gt;result&lt;/code&gt;を使用しないケース、すなわち&lt;code&gt;n == 0&lt;/code&gt;の場合であっても&lt;code&gt;result&lt;/code&gt;に &lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価した）&lt;/small&gt;値を代入するのに必要な計算は実行され、結果&lt;code&gt;10 `div` 0&lt;/code&gt;が計算されようとして&lt;code&gt;divide by zero&lt;/code&gt;が発生するのです。&lt;/p&gt;
&lt;p&gt;⚠️&lt;code&gt;where&lt;/code&gt;句は関数定義の後ろの方に書くという性格上、見落としがちかも知れません。注意しましょう。&lt;/p&gt;
&lt;h1 id=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34; title=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/const.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;const.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;続いて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に慣れた方なら誰もが一度は試したくなる、ポイントフリースタイルに関する落とし穴です。まずは次の二つの関数をご覧ください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dontReferArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;dontReferArgs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;referArgs x _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数、どちらもやっていることは&lt;code&gt;const&lt;/code&gt;と変わりません。&lt;code&gt;dontReferArgs&lt;/code&gt;は&lt;code&gt;const&lt;/code&gt;をそのまま使うことでポイントフリースタイルにしていますが、&lt;code&gt;referArgs&lt;/code&gt;は自前で引数に言及することで&lt;code&gt;const&lt;/code&gt;と同等の定義となっています。ポイントフリースタイルに変えると言うことは原則として元の関数の挙動を変えないワケですから、&lt;code&gt;dontReferArgs&lt;/code&gt;と&lt;code&gt;referArgs&lt;/code&gt;の意味は変わらないはず、ですよね&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;？&lt;/p&gt;
&lt;p&gt;ところがこれらの関数を&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした上で定義すると、なんと挙動が異なってしまいます！&lt;/p&gt;
&lt;p&gt;使用例&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; dontReferArgs &lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; referArgs &lt;span class=&#34;st&#34;&gt;&amp;quot;referArgs&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にしなかった場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc const.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;referArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にした場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict const.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;const.hs&lt;/span&gt;: Prelude.undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ex&#34;&gt;CallStack&lt;/span&gt; (from HasCallStack)&lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;error&lt;/span&gt;, called at libraries\base\GHC\Err.hs:79:14 in base:GHC.Err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;undefined&lt;/span&gt;, called at const.hs:10:34 in main:Main&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、&lt;code&gt;where&lt;/code&gt;句のケースと同様、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合、例外が発生してしまいました❗️&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした結果、意図せず例外を発生させる値&lt;small&gt;（今回の場合&lt;code&gt;undefined&lt;/code&gt;）&lt;/small&gt;が評価されてしまったのです。&lt;/p&gt;
&lt;p&gt;例外を発生させた関数はそう、ポイントフリースタイルでない、&lt;code&gt;referArgs&lt;/code&gt;関数の方です！なぜ&lt;code&gt;referArgs&lt;/code&gt;でのみ例外が発生してしまったのかというと、&lt;code&gt;referArgs&lt;/code&gt;が&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールで、引数に言及&lt;small&gt;（パターンマッチ）&lt;/small&gt;しているからです。&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした結果「あらゆる関数やローカル変数の定義において、パターンマッチで代入した変数の値」が評価されるとおり、&lt;code&gt;referArgs&lt;/code&gt;の引数&lt;code&gt;x&lt;/code&gt;・&lt;code&gt;_&lt;/code&gt;も必ず評価されるようになり、このような例外が発生したのです。たとえ使用しない変数&lt;code&gt;_&lt;/code&gt;でも関係ありません！&lt;/p&gt;
&lt;p&gt;そのため、原因の本質は引数に言及&lt;small&gt;（パターンマッチ）&lt;/small&gt;しているか否かであり、&lt;code&gt;Prelude&lt;/code&gt;の&lt;code&gt;const&lt;/code&gt;を使用しているか否かではありません。こちら👇のように引数に言及した上で&lt;code&gt;const&lt;/code&gt;を使っても、結果は同じなのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgsByConst ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;referArgsByConst x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt; x y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; referArgsByConst &lt;span class=&#34;st&#34;&gt;&amp;quot;referArgsByConst&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一方、&lt;code&gt;dontReferArgs&lt;/code&gt;については、引数に言及せず、&lt;code&gt;Prelude&lt;/code&gt;にある&lt;code&gt;const&lt;/code&gt;をそのまま使っています。&lt;code&gt;Strict&lt;/code&gt;拡張はあくまでも「パターンマッチした変数」のみを&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価するものであり、あらゆる関数が正格に呼び出されるわけではありません。なので通常の&lt;code&gt;Prelude&lt;/code&gt;における&lt;code&gt;const&lt;/code&gt;と同様、&lt;code&gt;dontReferArgs&lt;/code&gt;も第&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;引数は評価しないため、&lt;code&gt;undefined&lt;/code&gt;を渡しても例外は起こらなかったのです。&lt;/p&gt;
&lt;p&gt;このことは、「&lt;strong&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールの中でも、&lt;code&gt;Strict&lt;/code&gt;を有効にしていないモジュール&lt;small&gt;（この場合は&lt;code&gt;Prelude&lt;/code&gt;）&lt;/small&gt;から&lt;code&gt;import&lt;/code&gt;した関数は、引数を正格に評価しない&lt;/strong&gt;」という忘れてはならないポイントも示しています。例えば&lt;code&gt;const&lt;/code&gt;よりももっと頻繁に使われるであろう、言及する引数を一つ削除する演算子の代表、関数合成&lt;code&gt;.&lt;/code&gt;を使ったケースを考えてみてください。&lt;/p&gt;
&lt;p&gt;ポイントフリースタイルに慣れた方なら、関数適用&lt;code&gt;$&lt;/code&gt;を次👇のように使って定義した&lt;code&gt;f&lt;/code&gt;を見ると、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;f xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- あるいは、`$`を使わないでこのように書いた場合も:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;f xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) xs)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちら👇のように書き換えたくなってうずうずするでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、&lt;code&gt;Strict&lt;/code&gt;を有効にしたモジュールでこのような書き換えを行うと、&lt;code&gt;f&lt;/code&gt;の挙動が変わってしまいます。引数&lt;code&gt;.&lt;/code&gt;を使って書き換える前は、引数&lt;code&gt;xs&lt;/code&gt;に言及していたところ&lt;code&gt;.&lt;/code&gt;を使って引数&lt;code&gt;xs&lt;/code&gt;に言及しなくなったからです。&lt;code&gt;filter&lt;/code&gt;も&lt;code&gt;map&lt;/code&gt;も&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールで定義されているわけではないので、引数を正格に評価しないんですね。結果、こうした書き換えによって、&lt;strong&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしていても意図せず遅延評価してしまう&lt;/strong&gt;、というリスクがあるので、リファクタリングの際はくれぐれも気をつけてください&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。ざっくりまとめると、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、「引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」、あるいは「引数や変数を宣言しなければ、評価されない」と意識しましょう。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;referArgs&lt;/code&gt;における&lt;code&gt;_&lt;/code&gt;のように「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合さえ、使用していない引数が評価されてしまうのは困る！」という場合は、引数名の前にチルダ&lt;code&gt;~&lt;/code&gt;を付けてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;referArgs x &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-3-内側のパターンはやっぱりダメ&#34; title=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 3:&lt;/span&gt; 内側のパターンはやっぱりダメ&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 今回は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;ですべて紹介するのでサンプルはありません。&lt;/p&gt;
&lt;p&gt;続いては、&lt;code&gt;Strict&lt;/code&gt;拡張のドキュメントでも触れられている、入れ子になったパターンマッチにおける問題を紹介します。一言で言うと、&lt;code&gt;let (a, b) = ...&lt;/code&gt;のような、データ構造&lt;small&gt;（この場合タプルですね）&lt;/small&gt;の「内側」に対するパターンマッチは、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしていても正格に評価しないよ、という話です。&lt;/p&gt;
&lt;p&gt;例えば、下記のコードを&lt;code&gt;Strict&lt;/code&gt;拡張付きで実行しても、パターンマッチしている&lt;code&gt;a&lt;/code&gt;・&lt;code&gt;b&lt;/code&gt;ともに代入した時点では正格評価されず、&lt;code&gt;error &#34;a&#34;&lt;/code&gt;・&lt;code&gt;error &#34;b&#34;&lt;/code&gt;による例外はいずれも発生しません。次のコードを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試してみてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; (a, b) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も起きない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先ほどの節における「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、『引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」』、あるいは『引数や変数を宣言しなければ、評価されない』と意識しましょう」という主張を真に受けてしまうと、意図せず遅延評価させてしまい、ハマりそうです😰。⚠️繰り返しますが「&lt;strong&gt;内側のパターンにおける変数は正格評価されない&lt;/strong&gt;」ということも意識してください。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;StrictData&lt;/code&gt;や正格性フラグを用いるなどして、各要素を正格評価するよう定義した値コンストラクターでは、ちゃんと評価して例外を発生させます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;CallStack&lt;/span&gt; (from &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;, called at &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; interactive&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Ghci7&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にすると&lt;code&gt;StrictData&lt;/code&gt;も自動的に有効になるので、👆における&lt;code&gt;MyTuple&lt;/code&gt;値コンストラクターは各要素を正格評価するようになったわけです。なので&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールにおいて、なおかつそこで定義した型で完結している限りは平和でしょう。&lt;/p&gt;
&lt;p&gt;ただし、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試す場合に特に注意していただきたいのですが、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で&lt;strong&gt;&lt;code&gt;let&lt;/code&gt;をつけないでパターンマッチした場合は正格評価されない&lt;/strong&gt;、という点に注意してください。&lt;code&gt;let&lt;/code&gt;をつけないとトップレベルでの定義と見なされるからです。&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-by-default-pattern-bindings&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張のドキュメント&lt;/a&gt;にも、「&lt;span class=&#34;ascii&#34;&gt;Top level bindings are unaffected by&lt;/span&gt; &lt;code&gt;Strict&lt;/code&gt;」とありますとおり、トップレベルでの定義は例外扱いされているのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も起きない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-4-foldrに渡す関数&#34; title=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 4:&lt;/span&gt; &lt;code&gt;foldr&lt;/code&gt;に渡す関数&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/stackoverflow-foldr.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stackoverflow-foldr.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここの話はちょっと難しいので、先に守るべきルールを述べておきます。&lt;/p&gt;
&lt;p&gt;「遅延評価する関数を受け取る前提の高階関数に、（&lt;code&gt;Strict&lt;/code&gt;拡張などで）引数を正格に評価するよう定義された関数を渡すのは止めましょう。」&lt;/p&gt;
&lt;p&gt;なんだかこう書くと半ばトートロジーのようにも聞こえますが、より具体的には、例えば&lt;code&gt;foldr&lt;/code&gt;に引数を正格に評価するよう定義された関数を渡すのは止めましょう、という話です。&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態では、ラムダ式にも注意しないといけないもポイントです。&lt;/p&gt;
&lt;p&gt;※あらかじめおことわり&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; この節のお話は、あくまでもリストに対する&lt;code&gt;foldr&lt;/code&gt;の場合のお話です。他の&lt;code&gt;Foldable&lt;/code&gt;な型では必ずしも当てはまらないのでご注意ください。&lt;/p&gt;
&lt;p&gt;論より証拠で、サンプルコードの中身（抜粋）とその実行結果を見てみましょう。&lt;/p&gt;
&lt;pre class=&#34;main&#34;&gt;&lt;code&gt;-- ...
evaluate . length $ foldr (:) [] [1 .. size]
putStrLn &amp;quot;DONE: foldr 1&amp;quot;

evaluate . length $ foldr (\x z -&amp;gt; x : z) [] [1 .. size]
putStrLn &amp;quot;DONE: foldr 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回のサンプルコードを実行する際は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムオプションを設定して、スタック領域のサイズを減らしてください。そうでなければ、処理するリストがあまり大きくないので&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしても問題の現象は再現されないでしょう&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;。&lt;a href=&#34;https://stackoverflow.com/questions/29339643/how-can-i-pass-rts-options-to-runghc&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;Stackoverflow&lt;/span&gt;の質問&lt;/a&gt;曰く、&lt;code&gt;runghc&lt;/code&gt;で実行する際にランタイムオプションを設定する場合は、&lt;code&gt;GHCRTS&lt;/code&gt;環境変数を使用するしかないそうです。&lt;/p&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にしなかった場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;GHCRTS=&lt;/span&gt;-K100k &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- ./stackoverflow-foldr.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にした場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;GHCRTS=&lt;/span&gt;-K100k &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- --ghc-arg=-XStrict ./stackoverflow-foldr.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stackoverflow-foldr.hs&lt;/span&gt;: stack overflow&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サンプルコードは整数のリストに対して特に何も変換せず&lt;code&gt;foldr&lt;/code&gt;する&lt;small&gt;（そして、&lt;code&gt;length&lt;/code&gt;関数でリスト全体を評価してから捨てる）&lt;/small&gt;だけのことを&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回繰り返したコードです。最初の&lt;code&gt;foldr&lt;/code&gt;は&lt;code&gt;Strict&lt;/code&gt;拡張があろうとなかろうと無事実行できたにもかかわらず、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした二つめの&lt;code&gt;foldr&lt;/code&gt;は、&lt;code&gt;stack overflow&lt;/code&gt;というエラーを起こしてしまいました💥！&lt;/p&gt;
&lt;p&gt;なぜこんなエラーが発生したのかを知るために、&lt;code&gt;foldr&lt;/code&gt;の定義を見直しましょう。こちら👇は&lt;a href=&#34;http://hackage.haskell.org/package/base-4.14.0.0/docs/src/GHC.Base.html#foldr&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.10.1&lt;/span&gt;における、リストに対する&lt;code&gt;foldr&lt;/code&gt;の定義&lt;/a&gt;です&lt;small&gt;（コメントは省略しています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;            ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; k z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;          &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;            go []     &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;            go (y&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ys) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;`k`&lt;/span&gt; go ys&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go&lt;/code&gt;という補助関数を再帰的に呼び出すことで、第一引数として渡した関数&lt;code&gt;k&lt;/code&gt;を用いてリストの要素&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;y&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を一つずつ変換しています。呼び出す度にリストの残りの要素をチェックして、最終的に空のリストを受け取ったときは&lt;code&gt;foldr&lt;/code&gt;の第二引数&lt;code&gt;z&lt;/code&gt;を返していますね。&lt;/p&gt;
&lt;p&gt;このとき&lt;code&gt;k&lt;/code&gt;が第二引数を遅延評価する関数であった場合、 — サンプルコードで言えば&lt;code&gt;(:)&lt;/code&gt;の場合 — 受け取った&lt;code&gt;go ys&lt;/code&gt;という式は直ちには評価されません。サンプルコードの&lt;code&gt;(:)&lt;/code&gt;に置き換えると、&lt;code&gt;(:)&lt;/code&gt;の第二引数、つまりリストの残りの要素を取り出す度に&lt;code&gt;go ys&lt;/code&gt;を一回計算して、一個ずつ要素を作り出すイメージです。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;k&lt;/code&gt;が第二引数を正格評価する関数であった場合、 — サンプルコードで言うところの、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした&lt;code&gt;(\x z -&amp;gt; x : z)&lt;/code&gt;の場合 — &lt;code&gt;k&lt;/code&gt;は受け取った&lt;code&gt;go ys&lt;/code&gt;をすぐに評価しようとします。このとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;code&gt;k&lt;/code&gt;や&lt;code&gt;go&lt;/code&gt;に渡されている引数をスタック領域に積みます&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;。そうして&lt;code&gt;go&lt;/code&gt;と、&lt;code&gt;go&lt;/code&gt;に呼ばれた&lt;code&gt;k&lt;/code&gt;が次々と引数をスタック領域に積んだ結果、スタックサイズの上限に達し、スタックオーバーフローが発生してしまうのです。&lt;/p&gt;
&lt;p&gt;これは他の多くのプログラミング言語で&lt;small&gt;（末尾再帰じゃない、普通の）&lt;/small&gt;再帰呼び出しを行った場合とよく似た振る舞いです。間違って無限再帰呼び出しをしてしまってスタック領域があふれる、なんて経験は多くのプログラマーがお持ちでしょう。つまり単純に、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合の&lt;code&gt;foldr (\x z -&amp;gt; x : z) []&lt;/code&gt;は、再帰呼び出しをしすぎてしまう関数となるのです。&lt;/p&gt;
&lt;p&gt;なお、今回は&lt;code&gt;length&lt;/code&gt;関数を使ってリスト全体を使用するコードにしましたが、遅延リストらしく&lt;code&gt;foldr&lt;/code&gt;の結果を一部しか使わない、という場合、&lt;code&gt;foldr&lt;/code&gt;に渡した関数がリストを都度正格評価してしまうので、無駄な評価が占める割合はもっと増えることになります。やはり&lt;code&gt;foldr&lt;/code&gt;は遅延評価を前提とした高階関数と言えるでしょう。&lt;/p&gt;
&lt;p&gt;以上のとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には&lt;code&gt;foldr&lt;/code&gt;のような、遅延評価を前提とした関数が&lt;code&gt;Strict&lt;/code&gt;拡張より遥か昔から存在しています。それらを&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で使うと、思わぬ衝突が起きてしまうので、くれぐれも気をつけましょう。&lt;/p&gt;
&lt;p&gt;こういう「使ってはいけない関数」を引いてしまわないための方法についても一点補足します。&lt;span class=&#34;ascii&#34;&gt;HLint&lt;/span&gt;を細かく設定したり、カスタム&lt;code&gt;Prelude&lt;/code&gt;を設定したりしてみるのは、一つの作戦です。なんとプロジェクト全体で、&lt;code&gt;foldr&lt;/code&gt;を禁止することができます&lt;small&gt;（一部のモジュールでは例外的に許可する、なんてこともできます）&lt;/small&gt;。詳しくは&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/01-29-awesome-hlint.html&#34;&gt;「素晴らしき &lt;span class=&#34;ascii&#34;&gt;HLint&lt;/span&gt; を使いこなす」&lt;/a&gt;や&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/05-23-extended-prelude.html&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt; を カスタム&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt; で置き換える」&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-5-undefinedを受け取るメソッド&#34; title=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 5:&lt;/span&gt; &lt;code&gt;undefined&lt;/code&gt;を受け取るメソッド&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/storable.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;storable.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後はちょっとレアケースではありますが、こちら👇の&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;で発覚した問題を解説しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues/16810&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#16810: Use explicit lazy binding around undefined in inlinable functions · Issues · Glasgow Haskell Compiler / GHC · GitLab&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;問題を簡単に再現するために、次のサンプルコードを用意しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- importなどは当然省略！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;  sizeOf _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sizeOf (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;  alignment _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;  peek &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This should not be called in this program&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;  poke &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This should not be called in this program&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-10&#34; title=&#34;10&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; alloca &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \(&lt;span class=&#34;ot&#34;&gt;_ ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ptr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This won&amp;#39;t be printed when Strict is enabled&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、適当な型を定義して&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Storable.html#t:Storable&#34;&gt;&lt;code&gt;Storable&lt;/code&gt;&lt;/a&gt;のインスタンスにして、それに対して&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Marshal-Alloc.html#v:alloca&#34;&gt;&lt;code&gt;alloca&lt;/code&gt;&lt;/a&gt;を呼ぶだけのコードです。インスタンス定義をはじめかなり手抜きな感じになっちゃってますが、まぁ今回の問題を再現するのにはこれで十分なので、ご了承ください🙏。&lt;/p&gt;
&lt;p&gt;このコード、残念ながら&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で実行すると、&lt;code&gt;undefined&lt;/code&gt;による例外が発生してしまいます💥。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict storable.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;storable.hs&lt;/span&gt;: Prelude.undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;CallStack&lt;/span&gt; (from HasCallStack)&lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;error&lt;/span&gt;, called at libraries\base\GHC\Err.hs:79:14 in base:GHC.Err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;undefined&lt;/span&gt;, called at libraries\base\Foreign\Marshal\Alloc.hs:117:31 in base:Foreign.Marshal.Alloc&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらは&lt;code&gt;Strict&lt;/code&gt;を有効にしなかった場合。やはり例外は起きてませんね😌。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc storable.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;This&lt;/span&gt; won&lt;span class=&#34;st&#34;&gt;&amp;#39;t be printed when Strict is enabled&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さてこの、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合に発生した、&lt;code&gt;undefined&lt;/code&gt;による例外はどこからやってきたのでしょう？上記のコードにはいくつか&lt;code&gt;error&lt;/code&gt;関数を使用している箇所がありますが、発生した例外はあくまでも&lt;code&gt;undefined&lt;/code&gt;です。見た限り上記のコードそのものから発生した例外ではなさそうですね…🤔。&lt;/p&gt;
&lt;p&gt;その答えはなんと、&lt;code&gt;main&lt;/code&gt;関数で呼んでいる&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/src/Foreign-Marshal-Alloc.html#alloca&#34;&gt;&lt;code&gt;alloca&lt;/code&gt;の定義&lt;/a&gt;にありました！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;alloca ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a b &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ptr&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;alloca  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-3&#34; title=&#34;3&#34;&gt;  allocaBytesAligned (sizeOf (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a)) (alignment (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに、&lt;code&gt;sizeOf&lt;/code&gt;メソッドや&lt;code&gt;alignment&lt;/code&gt;メソッドに&lt;code&gt;undefined&lt;/code&gt;を渡しています。これらはいずれも&lt;code&gt;Storable&lt;/code&gt;型クラスのメソッドなので、上記の&lt;code&gt;Test&lt;/code&gt;型でももちろん実装しています。そう、実はこの&lt;code&gt;sizeOf&lt;/code&gt;メソッドと&lt;code&gt;alignment&lt;/code&gt;メソッドの実装で、下👇のように引数&lt;code&gt;_&lt;/code&gt;を宣言しているのが問題なのです！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;  sizeOf _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sizeOf (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;  alignment _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！」の節&lt;/a&gt;で、「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、『引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」』、あるいは『引数や変数を宣言しなければ、評価されない』」と述べたことを再び思い出してください。こちらの&lt;code&gt;sizeOf&lt;/code&gt;・&lt;code&gt;alignment&lt;/code&gt;の定義でも同様に、引数&lt;code&gt;_&lt;/code&gt;を宣言しているため、引数を必ず&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価することになっています。結果、&lt;code&gt;alloca&lt;/code&gt;関数がそれぞれを呼ぶ際&lt;code&gt;undefined&lt;/code&gt;を渡しているため、&lt;code&gt;undefined&lt;/code&gt;を評価してしまい、&lt;code&gt;undefined&lt;/code&gt;による例外が発生してしまうのです💥。&lt;/p&gt;
&lt;p&gt;なぜこのように、&lt;code&gt;alloca&lt;/code&gt;関数では&lt;code&gt;sizeOf&lt;/code&gt;や&lt;code&gt;alignment&lt;/code&gt;に&lt;code&gt;undefined&lt;/code&gt;をわざわざ渡しているのでしょう？それは、これらのメソッドがそもそも&lt;code&gt;undefined&lt;/code&gt;を渡して使うことを前提に設計されているからです。&lt;code&gt;sizeOf&lt;/code&gt;・&lt;code&gt;alignment&lt;/code&gt;はともに&lt;code&gt;Storable a =&amp;gt; a -&amp;gt; Int&lt;/code&gt;という型の関数なので、第一引数に&lt;code&gt;Storable&lt;/code&gt;のインスタンスである型&lt;code&gt;a&lt;/code&gt;の値を受け取るのですが、このとき&lt;strong&gt;渡される&lt;code&gt;a&lt;/code&gt;型の値は、使わない&lt;/strong&gt;こととなっています。&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Storable.html#v:sizeOf&#34;&gt;それぞれのメソッドの説明&lt;/a&gt;にも「&lt;span class=&#34;ascii&#34;&gt;The value of the argument is not used.&lt;/span&gt;」と書かれていますね。これは、&lt;code&gt;sizeOf&lt;/code&gt;も&lt;code&gt;alignment&lt;/code&gt;も、型毎に一意な値として定まる&lt;small&gt;（引数の値によって&lt;code&gt;sizeOf&lt;/code&gt;や&lt;code&gt;alignment&lt;/code&gt;の結果が変わることがない）&lt;/small&gt;ので、第一引数の&lt;code&gt;a&lt;/code&gt;は、単に「この型の&lt;code&gt;sizeOf&lt;/code&gt;を呼んでくださいね」という&lt;strong&gt;型の&lt;/strong&gt;情報を渡すためのものでしかないからです。だから値には関心がないので&lt;code&gt;undefined&lt;/code&gt;を渡しているわけです。そもそも、&lt;code&gt;alloca&lt;/code&gt;関数のように引数として&lt;code&gt;Storable a =&amp;gt; a&lt;/code&gt;型の値をとらない関数では、&lt;code&gt;a&lt;/code&gt;型の値を用意することができませんし。&lt;/p&gt;
&lt;p&gt;現代では通常、このように「値に関心がなく、何の型であるかという情報だけを受け取りたい」という場合は、&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Data-Proxy.html#t:Proxy&#34;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;型を使うのが一般的です。&lt;code&gt;Storable&lt;/code&gt;は恐らく&lt;code&gt;Proxy&lt;/code&gt;が発明される前に生まれたため、&lt;code&gt;undefined&lt;/code&gt;を渡すことになってしまっているのでしょう。なので、&lt;code&gt;Storable&lt;/code&gt;型クラスのインスタンスを自前で定義したりしない限り、こうしたケースに出遭うことはまれだと思います。ただ、それでも&lt;code&gt;Proxy&lt;/code&gt;を&lt;code&gt;import&lt;/code&gt;するのを面倒くさがって&lt;code&gt;undefined&lt;/code&gt;を代わりに渡す、なんてケースはありえるので、&lt;code&gt;Proxy&lt;/code&gt;を使って定義した型クラスでも同じ問題にハマることはあるかも知れません…。&lt;/p&gt;
&lt;p&gt;⚠️結論として、&lt;code&gt;Storable&lt;/code&gt;型クラスや、&lt;code&gt;Proxy&lt;/code&gt;を受け取るメソッドを持つ型クラスのインスタンスを、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で定義する場合は、&lt;code&gt;Proxy&lt;/code&gt;にあたる引数を評価しないよう、&lt;code&gt;~_&lt;/code&gt;などを使って定義しましょう。&lt;/p&gt;
&lt;h1 id=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに-やっぱりstrictは使う使わない&#34; title=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; やっぱり&lt;code&gt;Strict&lt;/code&gt;は使う？使わない？&lt;/h1&gt;
&lt;p&gt;さて、ここまで&lt;code&gt;Strict&lt;/code&gt;拡張を有効にすることによって犯しうる、数々のミスを紹介してきました。ここまで書いた個人的な印象としては、「敢えて有効にする必要はないんじゃないか」といったところです&lt;small&gt;（まぁ、悪いところばかり調べた結果のため、とてもフェアな視点での判断とは言えないのですが…）&lt;/small&gt;。&lt;code&gt;foldr&lt;/code&gt;の例でも触れたとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には遅延評価を前提とした、遅延評価を存分に活かした機能が溢れています。当然それらは&lt;code&gt;Strict&lt;/code&gt;拡張ができるよりはるか昔からあり、&lt;code&gt;Strict&lt;/code&gt;拡張のことなど一切考えないで作られたものです。動的型付け言語に後から静的型検査を導入するのが大変なように、相対する機能を後付けすると衝突が起こるのは仕方のないことですが、こと&lt;code&gt;Strict&lt;/code&gt;拡張については想像以上に大きな衝突のようです😞。&lt;/p&gt;
&lt;p&gt;それでも使いたいという方に、今回の記事が助けになれば幸いです💪それでは&lt;code&gt;Strict&lt;/code&gt;な方も&lt;code&gt;NoStrict&lt;/code&gt;な方も&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking!!&lt;/span&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;例えば&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;さんによる&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2015/12/10/200630&#34;&gt;この記事&lt;/a&gt;より&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 「もっとも、日常ではここまで気にしなければいけない場面は少ないので、ほとんどの場合は気にせず感嘆符をつけて大丈夫だろう。&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;からは、全フィールドをデフォルトで正格にする&lt;code&gt;StrictData&lt;/code&gt;という拡張が入るため、こちらを使おう」&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;code&gt;BangPatterns&lt;/code&gt;言語拡張を有効にした上で上記のように書き換えてみると、&lt;code&gt;Strict&lt;/code&gt;拡張の有無に関わらずエラーが発生します。試してみましょう。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;実際のところ今回紹介するケース以外にも、ポイントフリースタイルにするかしないかで実行効率などが変わる場合があります。例えば、&lt;a href=&#34;https://treszkai.github.io/2019/07/13/haskell-eval&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Evaluation of function calls in Haskell&lt;/span&gt;&lt;/a&gt;をご覧ください。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;もっとも、この例では引数はリストでしょうから、&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;までのみ正格評価するメリットは少なそうですが。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;大きなリストにすると、今度はエラーが発生するまでに時間がかかってしまうので…。ちなみに、このようにスタック領域を小さくすることでスペースリークを検出する手法は、&lt;a href=&#34;https://github.com/ndmitchell/spaceleak&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ndmitchell/spaceleak: Notes on space leaks&lt;/span&gt;&lt;/a&gt;でも紹介されています。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がどのように評価し、スタック領域を消費するかは&lt;a href=&#34;https://takenobu-hs.github.io/downloads/haskell_ghc_illustrated.pdf&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC illustrated&lt;/span&gt;&lt;/a&gt;や、その参考文献をご覧ください。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/how-to-use-type-newtype-data.html&#34; lang=&#34;ja&#34;&gt;data / newtype / type の使い方&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/haskell-casually-at-work.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskellを業務で使う、カジュアルに&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/06/06/Haskell_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">Haskell 環境構築ツールフローチャートを作りました</title><updated>2020-06-06T12:24:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/06/06/Haskell_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">前に環境構築についての記事を書いたのですが、初学者向けにパッと見て分かるようにフローチャートにしました。kakkun61.hatenablog.comGoogle ドライブ 図形描画のファイルはこちらです。コメントを付けることができます。docs.google.com</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2020-05-31T02:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 www.youtube.com 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html</id><title type="text">自分の Haskell プロジェクトの依存パッケージの古さを可視化する（その１）</title><updated>2020-05-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;思いついたツールを自作続けるとこうなりますよね&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-deps-sensor/myprojects.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;時々思いつきで依存パッケージ，Stack プロジェクトであれば resolver をあげるんですけど，いい加減調べるのが大変． と言うことで，どれがどんだけ古くなってるかを可視化するツールを作りました． リポジトリはこちら：&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;iframe width=&#34;320&#34; height=&#34;163&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/repomoving&#34;&gt;&lt;/iframe&gt;&lt;/h1&gt;
&lt;h2 id=&#34;ゴール&#34;&gt;ゴール&lt;/h2&gt;
&lt;p&gt;今回は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集めるのは Haskell Stack プロジェクトのみ&lt;/li&gt;
&lt;li&gt;一覧化するのは stack.yaml に書いてる resolver のみ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけにする． 気が向いたときに少しずつパワーアップしていく．&lt;/p&gt;
&lt;h3 id=&#34;どうやるか&#34;&gt;どうやるか&lt;/h3&gt;
&lt;p&gt;可視化したいプロジェクトは設定ファイルで指定する形式にする． 自動で集めても良いが，まぁそれはおいおい．&lt;/p&gt;
&lt;p&gt;で，設定をもとにルートにある &lt;code&gt;stack.yaml&lt;/code&gt; ファイルを &lt;a href=&#34;https://developer.github.com/v3/repos/contents/#get-contents&#34;&gt;GitHub API の get-content&lt;/a&gt; を使って取得する． そのファイルを読み込んで YAML をパースして，&lt;code&gt;resolver&lt;/code&gt; あるいは &lt;code&gt;snapshot&lt;/code&gt; を出力する． それだけ．&lt;/p&gt;
&lt;p&gt;これを CLI ツールとして作る．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;まずは CLI から．&lt;/p&gt;
&lt;h3 id=&#34;cli-ツールの雛形&#34;&gt;CLI ツールの雛形&lt;/h3&gt;
&lt;p&gt;なんと，すでに stack template を用意してあるので簡単：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; new deps-sensor github:matsubara0507/mix-cli.hsfiles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このテンプレートは自作フレームワーク &lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;mix.hs&lt;/a&gt; を使った CLI ツールのもの． mix.hs は &lt;a href=&#34;https://github.com/fumieval/extensible&#34;&gt;extensible パッケージ&lt;/a&gt;と &lt;a href=&#34;https://github.com/commercialhaskell/rio&#34;&gt;rio パッケージ&lt;/a&gt;を混ぜたような簡単なフレームワークです． で，あとはよしなにモジュール名を整えたら&lt;a href=&#34;https://github.com/matsubara0507/deps-sensor/commit/f6e463f4cdd7a8488fef57364e5aedcd9ba3049b&#34;&gt;出来上がり&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor --help&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;deps-sensor&lt;/span&gt; [options] [input-file]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-h&lt;/span&gt;  --help     Show this help text&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;--version&lt;/span&gt;  Show version&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-v&lt;/span&gt;  --verbose  Enable verbose mode: verbosity level &lt;span class=&#34;st&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor --version&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Version&lt;/span&gt; 0.1.0, Git revision Sat May 23 14:58:54 2020 +0900 (2 commits)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;設定ファイルを読み取る&#34;&gt;設定ファイルを読み取る&lt;/h3&gt;
&lt;p&gt;まずは型を定義する． 色々考えた結果とりあえず今回はシンプルに：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- expect owner/name&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;readConfig ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;readConfig &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Y.decodeFileThrow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;readConfig&lt;/code&gt; を定義してるのは，&lt;code&gt;Y.decodeFileThrow&lt;/code&gt; を使うときに型注釈をしなくて良くするため． この設定型を RIO の &lt;code&gt;Env&lt;/code&gt; 型に追加する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;DepsSensor.Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは CLI 側に追加するだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- runCmd を呼び出す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- FilePath は CLI のコマンドライン引数で渡す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;runCmd opts path &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;./config.yaml&amp;quot;&lt;/span&gt; path   &lt;span class=&#34;co&#34;&gt;-- ココと&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin config  &lt;span class=&#34;co&#34;&gt;-- ココを追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;  Mix.run plugin cmd&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose)&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで次のような YAML 設定ファイルを読み込めるようになった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repositories&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/deps-sensor&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-plantation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell-jp/antenna&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;github-api-で取得&#34;&gt;GitHub API で取得&lt;/h3&gt;
&lt;p&gt;GitHub API も頻繁に使うので&lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github&#34;&gt;プラグイン化&lt;/a&gt;してる． 次のように &lt;code&gt;Env&lt;/code&gt; 型を拡張して CLI 経由で渡すことで，&lt;code&gt;RIO Env a&lt;/code&gt; 配下ですっごく簡単に GitHub API を呼び出すことができる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Env の拡張&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub.Token&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main の拡張&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;runCmd opts path &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;  gToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ココと&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;./config.yaml&amp;quot;&lt;/span&gt; path&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;github &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken  &lt;span class=&#34;co&#34;&gt;-- ココを追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin config&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;  Mix.run plugin cmd&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;呼び出し側はこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Cmd&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fetchStackFileContent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;fetchStackFileContent owner name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (owner&amp;#39;, name&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (GitHub.mkName &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; owner, GitHub.mkName &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- MixGitHub.fetch するだけ，簡単でしょ？&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  resp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; GitHub.contentsForR owner&amp;#39; name&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;stack.yaml&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; resp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; _        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- エラー握り潰すのはあれだけど&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; content &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (toFileContent content)&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- get-content API の返り値に含まれるファイルの中身だけを取り出す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toFileContent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.Content&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;toFileContent &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;GitHub.ContentFile&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; GitHub.contentFileContent c&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;  _                    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;yamlを取り込む&#34;&gt;YAMLを取り込む&lt;/h3&gt;
&lt;p&gt;yaml パッケージを使ってサクッと YAML のデコードをするために，必要な情報だけの簡単なデータ型を作っておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Cmd&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;resolver&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;snapshot&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toResolver ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;toResolver stackFile &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; stackFile &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;resolver &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; stackFile &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;snapshot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は1つ問題があって，get-content API で取得した中身は Base64 エンコードされているのだ． なので &lt;code&gt;fetchStackFileContent&lt;/code&gt; 関数で取得した &lt;code&gt;Text&lt;/code&gt; 型の値を Base64 デコードする関数を用意しておこう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Text&lt;/span&gt;                &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BA&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;               &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;decodeStackFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;decodeStackFile dat &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- 改行コードを含むので抜いて連結してから memory パッケージを使ってデコードしている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  dat&amp;#39; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; BA.convertFromBase &lt;span class=&#34;dt&#34;&gt;BA.Base64&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.encodeUtf8 (&lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.lines dat)&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;  mapLeft &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Y.decodeEither&amp;#39; dat&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://hackage.haskell.org/package/memory&#34;&gt;memory パッケージ&lt;/a&gt;を使っているのは &lt;a href=&#34;https://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite パッケージ&lt;/a&gt;でも利用されているから．&lt;/p&gt;
&lt;h3 id=&#34;組み合わせる&#34;&gt;組み合わせる&lt;/h3&gt;
&lt;p&gt;準備は整ったのでこれを連結した処理をループで回すだけだ． ただ，用意したほとんどの関数が &lt;code&gt;Maybe a&lt;/code&gt; 型か &lt;code&gt;Either e a&lt;/code&gt; 型を返すので，このままエラーハンドリングすると段々畑になってしまう． そこで重宝するのが &lt;a href=&#34;https://github.com/matsubara0507/fallible&#34;&gt;fallible パッケージ&lt;/a&gt;だ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Text&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Fallible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;cmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;cmd &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;  repositories &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;repositories &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  for_ repositories &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \repo &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; evalContT &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (owner, name) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.drop &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; T.break (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) repo&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    content   &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (fetchStackFileContent owner name) &lt;span class=&#34;op&#34;&gt;!??&lt;/span&gt; warn repo &lt;span class=&#34;st&#34;&gt;&amp;quot;stack.yaml is not found&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;    stackFile &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decodeStackFile content &lt;span class=&#34;op&#34;&gt;??=&lt;/span&gt; warn repo&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;    resolver  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; toResolver stackFile &lt;span class=&#34;op&#34;&gt;???&lt;/span&gt; warn repo &lt;span class=&#34;st&#34;&gt;&amp;quot;undefined resolver&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;    MixLogger.logInfo (display &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; repo &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; resolver)&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- とりあえず警告するだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;    warn r msg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixLogger.logWarn (display &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.pack msg &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; r)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演算子が3種類も出てきてわかりにくいが - 左が &lt;code&gt;!&lt;/code&gt; の場合は左辺が &lt;code&gt;RIO Env (f a)&lt;/code&gt; になっていて， &lt;code&gt;?&lt;/code&gt; の場合は &lt;code&gt;f a&lt;/code&gt; になっている（&lt;code&gt;f&lt;/code&gt; は &lt;code&gt;Maybe&lt;/code&gt; や &lt;code&gt;Either e&lt;/code&gt;） - 右が &lt;code&gt;=&lt;/code&gt; の場合は右辺で &lt;code&gt;Either e a&lt;/code&gt; の &lt;code&gt;e&lt;/code&gt; を受け取るハンドリングをし，&lt;code&gt;?&lt;/code&gt; の場合は無視する（&lt;code&gt;Maybe&lt;/code&gt; の場合は後者一択）&lt;/p&gt;
&lt;p&gt;で，これを実行するとこんな感じになった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;matsubara0507&lt;/span&gt;/deps-sensor: &lt;span class=&#34;ex&#34;&gt;lts-15.13&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;matsubara0507&lt;/span&gt;/git-plantation: &lt;span class=&#34;ex&#34;&gt;lts-15.5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;haskell-jp&lt;/span&gt;/antenna: &lt;span class=&#34;ex&#34;&gt;lts-14.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;追々，Webページの生成と http://packdeps.haskellers.com っぽい機能を足したりするつもりです。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2020-05-06T17:02:25.994+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック
修飾キー：ControlとOptionを</summary></entry><entry><id>https://kurokawh.blogspot.com/2020/05/linux-gnupg.html</id><title type="text">[linux] gnupgによる暗号化処理時の確認プロンプトを抑制する方法</title><updated>2020-05-06T16:37:57.790+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2020/05/linux-gnupg.html"/><summary type="text">gnupgを用いてファイルを暗号化する際、予めインポートした公開鍵に対してtrust設定をしておかないと、指定した公開鍵毎に以下のような警告が発せられます。


% gpg -e -r abc@test.org a.txt 
gpg: AAAA4C0DD6F2ZZZZ: この鍵が本当に本人のものである、という兆候が、ありません

sub  elg2048/AAAA4C0DD6F2ZZZZ 2020-05-06 Hiroyuki Kurokawa &lt;abc@test.org&gt;
  主鍵フィンガープリント: &lt;snip&gt;
  副鍵フィンガープリント: &lt;snip&gt;

この鍵は、このユーザIDをなのる本人のものかどうか確信でき
ません。今から行うことを＊本当に＊理解していない場合には、
次の質問にはnoと答えてください。

それでもこの鍵を使いますか? (y/N)

以下のオプションを指定する</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2020/04/29/170208</id><title type="text">家から出ない生活４週間</title><updated>2020-04-29T17:10:29+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2020/04/29/170208"/><summary type="html">出社非推奨になったのを機に家から出ない生活を始めて４週間が経った。今までやったことをまとめていく。 食料品 せっかくだから生活で縛りプレイをしてみようと思って Amazon と Yodobashi を禁止にしている。この２社は最近評判が良くないこともあるし。 業務スーパーの通販 いわゆるネットスーパーはサイトが激重になっていたり配達可能日がすべて☓になっていたりで機能不全を起こしているようだった。そこで飲食店がメインターゲットであろう業務スーパーなら今空いているだろうという読み。ここではピザ材料、冷凍野菜、割り箸などを入手している。 とにかく業務スーパーの通販を最大限利用するには冷凍室の容積が…</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/haskell-casually-at-work.html</id><title type="text">Haskellを業務で使う、カジュアルに</title><updated>2020-04-26T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/haskell-casually-at-work.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#作業の支援加速にhaskellを使う&#34; title=&#34;作業の支援加速にhaskellを使う&#34;&gt;🔧「作業」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#テストデータ生成&#34; title=&#34;テストデータ生成&#34;&gt;テストデータ生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パーサー&#34; title=&#34;パーサー&#34;&gt;パーサー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#階層データ処理&#34; title=&#34;階層データ処理&#34;&gt;階層データ処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#高機能電卓&#34; title=&#34;高機能電卓&#34;&gt;高機能電卓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他&#34; title=&#34;その他&#34;&gt;その他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#思考の支援加速にhaskellを使う&#34; title=&#34;思考の支援加速にhaskellを使う&#34;&gt;💡「思考」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#仕様理解&#34; title=&#34;仕様理解&#34;&gt;仕様理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#モデル確認&#34; title=&#34;モデル確認&#34;&gt;モデル確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#モデル探索&#34; title=&#34;モデル探索&#34;&gt;モデル探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他-1&#34; title=&#34;その他-1&#34;&gt;その他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h1&gt;
&lt;p&gt;この記事では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務でカジュアルに使う観点やヒントについて、簡単に紹介します。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務で使える局面は、以下のようにいくつか考えられます。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;「プロダクト」の開発用言語として、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;li&gt;「作業」の支援・加速用に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;li&gt;「思考」の支援・加速用に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;つまり、プロダクトの開発用言語として&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いない業務形態においても、上記&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;のケースとして、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使用できます。すなわち、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は幅広い局面でカジュアルに、つまり気軽に手軽に使用できます。&lt;/p&gt;
&lt;p&gt;本記事では、特に、上記の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;について、いくつかの観点やヒントや例を紹介します。&lt;/p&gt;
&lt;p&gt;なお、上記は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いる場合には限りません。&lt;span class=&#34;ascii&#34;&gt;Python, Perl, Ruby, Rust, Scala, OCaml, Clojure, Go, Elixir,&lt;/span&gt; … といった、様々なプログラミング言語に置き換えて本記事を解釈してもらって構いません。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;作業の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作業の支援加速にhaskellを使う&#34; title=&#34;作業の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔧「作業」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（を含むプログラミング言語）は、開発などの日常業務において、「作業」の支援・加速用に使うことが出来ます。&lt;/p&gt;
&lt;p&gt;つまり、電卓や&lt;span class=&#34;ascii&#34;&gt;Excel&lt;/span&gt;などのように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を日常ツールの一つとして使えます。&lt;/p&gt;
&lt;p&gt;特に、直近の業務作業を加速するために、書き捨てのツールを高品質で素早く欲しい場合や、ちょっとした対話ツールを欲しい場合などにも、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に活用できます。&lt;/p&gt;
&lt;p&gt;例えば具体的には、以下の場合に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストデータ生成&lt;/li&gt;
&lt;li&gt;パーサー&lt;/li&gt;
&lt;li&gt;階層データ処理&lt;/li&gt;
&lt;li&gt;高機能電卓&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下、それぞれについて簡単に紹介します。&lt;/p&gt;
&lt;h2 id=&#34;テストデータ生成&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#テストデータ生成&#34; title=&#34;テストデータ生成&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;テストデータ生成&lt;/h2&gt;
&lt;p&gt;例えば、解析事案が発生し、至急&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;分程度でテストデータを複数用意したい、というような場合に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でデータを生成させることは有効です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、関数合成や部分適用や高階関数や多相関数などの言語的な特徴により、小さな関数を組み合わせて、より大きな関数として作り上げることが容易です。&lt;/p&gt;
&lt;p&gt;対話環境（&lt;span class=&#34;ascii&#34;&gt;REPL&lt;/span&gt;）である&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いて、それら小さな関数を素早く高品質に確認した上で、徐々に大きな関数として組み合わせることにより、高品質な結果を素早く得ることがでできます。&lt;/p&gt;
&lt;p&gt;特にバイナリデータや複雑なデータを、一刻も早く高品質に生成することが重要な局面で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は威力を発揮します。&lt;/p&gt;
&lt;h2 id=&#34;パーサー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサー&#34; title=&#34;パーサー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサー&lt;/h2&gt;
&lt;p&gt;日常業務において、各種ログなどのデータを解析したい局面は頻繁に有ります。 単純なデータであれば、&lt;span class=&#34;ascii&#34;&gt;grep&lt;/span&gt;コマンドや&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;などの正規表現を用いて手早く仕事を済ませることも出来ます。&lt;/p&gt;
&lt;p&gt;しかし、データの構造が複雑であったり再帰的な構造である場合には、正規表現をデバッグするよりも、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で思い切ってパーサーを書いてしまう方が手早く済ませられることがあります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では、関数の組み立てが容易であることや&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;記法といった言語的な特徴を活かし、簡潔にパーサーを記述することができます。 言語的な特徴を活かした便利なパーサーコンビネータ関連のライブラリ（&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;&lt;code&gt;Parsec&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;code&gt;Megaparsec&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/replace-attoparsec&#34;&gt;&lt;code&gt;replace-attoparsec&lt;/code&gt;&lt;/a&gt;など）が豊富に存在します。&lt;/p&gt;
&lt;p&gt;一度パーサーの骨格を用意してしまえば、流用は容易であるため、強力な日常ツールとして&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使用できます。&lt;/p&gt;
&lt;h2 id=&#34;階層データ処理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#階層データ処理&#34; title=&#34;階層データ処理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;階層データ処理&lt;/h2&gt;
&lt;p&gt;例えばモジュールの構造に対応したデータのように、データが再帰的・階層的に表現されている場合は多くあります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、代数的データ型を用いて再帰的なデータ構造を簡潔に表現できます。また、簡潔なパターンマッチの記法と再帰的な関数により、これらの処理を容易に記述できる傾向にあります。&lt;/p&gt;
&lt;p&gt;もちろん、この再帰的なデータ構造も、コンパイル時の静的な型チェックの対象となるため、多くの不用意なミスを事前に抽出できます。&lt;/p&gt;
&lt;p&gt;素早く、非常に高品質にデータ処理を行うことが重要な局面で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は有効に機能します。&lt;/p&gt;
&lt;h2 id=&#34;高機能電卓&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#高機能電卓&#34; title=&#34;高機能電卓&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;高機能電卓&lt;/h2&gt;
&lt;p&gt;日常業務において、なんらかの変換テーブルや、計算式、定数値などの値を、散発的に直ちに得たい局面があります。 その都度、電卓で計算したり、&lt;span class=&#34;ascii&#34;&gt;Excel&lt;/span&gt;などの計算フォームを用意することで、手軽に業務を済ませられる場合もあります。&lt;/p&gt;
&lt;p&gt;しかし、繰り返し必要となる計算式や、ある程度複雑な計算であれば、これらの計算式などを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数群として定義しておき、対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;から用いることで、使い勝手良く素早く値を得ることができます。&lt;/p&gt;
&lt;p&gt;数値や対話操作などを補助する便利なライブラリ&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base/docs/Numeric.html&#34;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/base/docs/Data-Bits.html&#34;&gt;&lt;code&gt;Data.Bits&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/ghci-hexcalc/docs/Data-GHex.html&#34;&gt;&lt;code&gt;Data.GHex&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;や言語拡張&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#binary-integer-literals&#34;&gt;&lt;code&gt;BinaryLiterals&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#numeric-underscores&#34;&gt;&lt;code&gt;NumericUnderscores&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;などが豊富に存在します。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;における関数の組み立てが容易な特徴は、対話環境における対話的な操作との相性が良いため、試行錯誤的な計算作業にも有用です。&lt;/p&gt;
&lt;h2 id=&#34;その他&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他&#34; title=&#34;その他&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他&lt;/h2&gt;
&lt;p&gt;他にも、定型的なファイル処理や&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;コマンドや&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;の構築などを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いて便利に実現出来ます。 手元に各種雛形を蓄積していると、作業の素早さと正確さが求められる場合に、有益でしょう。&lt;/p&gt;
&lt;p&gt;もちろん、これらは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に限らず、多くのプログラミング言語にも言えます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、型システムに守られながら、関数を容易に組み立てられる特徴を持ちます。また、代数的データ型とパターンマッチの特徴により、直感的・シンプルで高品質なデータ表現・処理が可能です。さらに、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いる対話操作により、日常作業を高品質かつ手早く行えます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、（型システムの高度な機能などを使わない）基本的な機能のみにおいても、日常業務において有効に活用できるツールの一つです。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;思考の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#思考の支援加速にhaskellを使う&#34; title=&#34;思考の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;💡「思考」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（を含むプログラミング言語）は、開発などの日常業務において、「思考」の支援・加速用にも使うことが出来ます。&lt;/p&gt;
&lt;p&gt;つまり、紙と鉛筆などのように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を思考ツールの一つとして使えます。&lt;/p&gt;
&lt;p&gt;特に、試行錯誤的な思考フェーズや、探索フェーズにおいて、思考を整理・加速する場合などに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は便利です。&lt;/p&gt;
&lt;p&gt;例えば具体的には、以下の場合に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仕様理解&lt;/li&gt;
&lt;li&gt;モデル確認&lt;/li&gt;
&lt;li&gt;モデル探索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下、それぞれについて簡単に紹介します。&lt;/p&gt;
&lt;h2 id=&#34;仕様理解&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#仕様理解&#34; title=&#34;仕様理解&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;仕様理解&lt;/h2&gt;
&lt;p&gt;ハードウェアやソフトウェア開発過程などでは、例えば、自然言語と図表や式の組み合わせで表現された仕様書を理解する事が必要な局面が多くあります。&lt;/p&gt;
&lt;p&gt;設計の上流工程で思考を広く深く及ばせておくことにより、仕様に対する思わぬ考え漏れや勘違いを防ぐことは、開発全体の質や開発速度を上げる観点で非常に有効です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、代数的データ型やパターンマッチを簡潔に記述できる言語的な特徴を持つため、仕様を簡潔に表現することに向いています。さらに、対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いて、自分の考えを試行錯誤的に確認できます。&lt;/p&gt;
&lt;p&gt;自然言語等の仕様を、プログラミング言語を用いて表現・写経する過程は、単純ですが、対象への理解を深める上で、意外に大きな投資対効果があります。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、このような場合に強力なツールとなります。&lt;/p&gt;
&lt;h2 id=&#34;モデル確認&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#モデル確認&#34; title=&#34;モデル確認&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;モデル確認&lt;/h2&gt;
&lt;p&gt;設計の初期段階において、自分の考えミスを抽出するために、設計の中核部分を簡単なモデルで表現して確認することは、開発全体の質や開発速度を上げる観点で非常に有効です。&lt;/p&gt;
&lt;p&gt;前節の仕様理解の場合と同様に、設計の中核モデルを簡潔に記述する目的で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いることが出来る場合があります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチは、モデルの簡潔表現にもフィットする場合が多く、自分の考えを手早く確認することに有効に使用できます。&lt;/p&gt;
&lt;p&gt;さらに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で記述したモデルを、&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;&lt;code&gt;QuickCheck&lt;/code&gt;&lt;/a&gt;ライブラリなどによるランダムテストパターンを用いて簡易検査することにより、値の範囲や特性に対する考え不足を、容赦なく効率的に抽出できます。&lt;/p&gt;
&lt;h2 id=&#34;モデル探索&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#モデル探索&#34; title=&#34;モデル探索&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;モデル探索&lt;/h2&gt;
&lt;p&gt;設計の初期段階において、モデルのパラメータなどについての設計空間を、試行錯誤しながら探索したい局面があります。&lt;/p&gt;
&lt;p&gt;前節のモデル理解の場合と同様に、設計空間を探索する目的で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いることが出来る場合があります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチを用いてモデルを簡潔に記述できれば、系の大きさなどの多くのパラメータを振りながら、最適な設計値を探索することに活用できます。&lt;/p&gt;
&lt;h2 id=&#34;その他-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他-1&#34; title=&#34;その他-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他&lt;/h2&gt;
&lt;p&gt;思考フェーズでは、記述したプログラムの実行速度よりも、思考内容をコードで表現する速さや、試行錯誤的にコードの内容を確認・変更する速さの方が重要なことが有ります。&lt;/p&gt;
&lt;p&gt;各々の人の思考特性によりますが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチなどの言語的な特徴は、実行可能仕様書・実行可能思考表現として、思考を整理することに向いています。&lt;/p&gt;
&lt;p&gt;以下のように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いて、簡潔に、素早く、手軽に、思考作業を支援・加速できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モデルなどの思考を、代数的データ型で直感的・簡潔に記述する&lt;/li&gt;
&lt;li&gt;処理をパターンマッチを用いて簡潔に記述する&lt;/li&gt;
&lt;li&gt;対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で、挙動と思考を手早く試行錯誤的に確認する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;便利ですね。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;この記事では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務でカジュアルに使う観点やヒントについて紹介しました。 「作業」や「思考」が必要な、よりたくさんの局面で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使用できます。&lt;/p&gt;
&lt;p&gt;関数合成、部分適用、高階関数、多相関数などの言語的な特徴は、関数をボトムアップや対話的に、素早くかつ高品質に組み上げるのに便利です。代数的データ型などの言語的な特徴は、ある種の思考パターン（選択、非一様、入れ子など）をストレートに表現するのに便利です。対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;は、試行錯誤的に作業や思考を進めるのに便利です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に限らず、自分の思考特性にあったプログラミング言語を、業務を加速する日常的なツールとして備えておくことは有用です。&lt;/p&gt;
&lt;p&gt;しかし、そもそもプログラミング言語の可能性・適用範囲は非常に広いものです。その適用範囲を、「業務」に狭めてしまう必要もありません。&lt;/p&gt;
&lt;p&gt;プログラミング言語は、業務のみに限らず、日々の「思考」の支援・加速に広く使用できるものです。&lt;/p&gt;
&lt;p&gt;以上、 &lt;span class=&#34;ascii&#34;&gt;Enjoy programming&lt;/span&gt;！&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/strict-gotchas.html&#34; lang=&#34;ja&#34;&gt;Strict拡張を使用する際の注意点&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/io-monad-and-sideeffect.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;IO モナドと副作用&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html</id><title type="text">Haskell Servant で Slack からの署名付きリクエストを受ける</title><updated>2020-04-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Slack のスラッシュコマンドなどで利用される署名付きリクエストを Haskell Servant で受ける方法を考えて実装しました． 実装は slackell という Haskell の Slack API パッケージにしてあります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell&#34;&gt;matsubara0507/slackell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell/pull/1&#34;&gt;該当 PR はこれです&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;署名付きリクエスト&#34;&gt;署名付きリクエスト&lt;/h2&gt;
&lt;p&gt;スラッシュコマンドなどで Slack からのリクエストを受け取るときに，そのリクエストが本当に該当のスラッシュコマンドから送られてきた正しいリクエストかを検証するには，リクエストパラメーターとして送られてきた検証トークンを確認していた． しかし，この方法は現在では非推奨になっており，代わりにリクエストヘッダーに付いている署名を確認する． 公式ドキュメントは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.slack.com/authentication/verifying-requests-from-slack&#34;&gt;Verifying requests from Slack | Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;署名は &lt;code&gt;X-Slack-Signature&lt;/code&gt; というヘッダーに &lt;code&gt;v0=&lt;/code&gt; というプレフィックス付きで含まれている． このリクエストを受け取ったアプリケーション側は以下の方法で署名をエンコードして比較することで，そのリクエストの正当性を保証する：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;X-Slack-Request-Timestamp&lt;/code&gt; リクエストヘッダーに含まれているタイムスタンプを読む&lt;/li&gt;
&lt;li&gt;バージョン番号・1のタイムスタンプ・リクエストボディの3つを &lt;code&gt;:&lt;/code&gt; 区切りで連結する
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;v0:123456789:command=/weather&amp;amp;text=94070&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;バージョン番号は今のところ全て &lt;code&gt;v0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2の文字列を Slack Apps で取得できる &lt;code&gt;Signing Secret&lt;/code&gt; を使って HMAC SHA256 でエンコード&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;haskellでエンコードする&#34;&gt;Haskellでエンコードする&lt;/h3&gt;
&lt;p&gt;このアルゴリズムを Haskell プログラムで実装する． HMAC SHA256 エンコードには &lt;a href=&#34;https://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite&lt;/a&gt; パッケージを使った． 2と3の部分を行って署名をエンコードする関数は以下：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.MAC.HMAC&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HMAC&lt;/span&gt; (..), hmac)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IsString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestTimestamp&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | シークレット・タイムスタンプ・リクエストボディは引数でもらう&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;encodeSignature ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestTimestamp&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;encodeSignature (&lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; secret) ts body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  hmacGetDigest &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; hmac (Text.encodeUtf8 secret) basestr&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;    basestr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; BS.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; [Text.encodeUtf8 version, Text.encodeUtf8 ts, body]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最終的な型が &lt;code&gt;Digest SHA256&lt;/code&gt; なので，ヘッダーの方の署名と比較しやすいように文字列からの変換関数も用意しておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;, digestFromByteString)&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; (..), convertFromBase)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignatureHeader&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;convertSignatureHeader ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignatureHeader&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;convertSignatureHeader sign &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;either&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;) digestFromByteString bs&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    (_, sign&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Text.breakOnEnd (version &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;) sign&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    bs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; convertFromBase &lt;span class=&#34;dt&#34;&gt;Base16&lt;/span&gt; (Text.encodeUtf8 sign&amp;#39;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;version ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;version &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;v0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで注意しなければいけないのが &lt;code&gt;digestFromByteString&lt;/code&gt; 関数に食わせる &lt;code&gt;ByteString&lt;/code&gt; 型の値は， &lt;code&gt;memory&lt;/code&gt; パッケージの関数を利用して16進数表現から直す必要がある．&lt;/p&gt;
&lt;h2 id=&#34;slash-command-を受け取る&#34;&gt;Slash Command を受け取る&lt;/h2&gt;
&lt;p&gt;署名をエンコードする関数はできたので，あとは Servant でスラッシュコマンドを受け取る方法を考える． まずはスラッシュコマンドから送られてくるリクエストボディの型を宣言しておこう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;           &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;            &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;response_url&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;trigger_id&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;user_name&amp;quot;&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;team_id&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;team_domain&amp;quot;&lt;/span&gt;     &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;channel_id&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;channel_name&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;enterprise_id&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;enterprise_name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正直，これを調べるのも大変だった． 公式ドキュメントにはどんなパラメータがあるか割愛されてる部分があるからだ．&lt;/p&gt;
&lt;p&gt;で，API の型は雰囲気としてはこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Web.Slack は slackell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;slash&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;FormUrlEncoded&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Request-Timestamp&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.RequestTimestamp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Signature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SignatureHeader&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題が1つ． 署名をエンコードするのに必要なのはデータ型 &lt;code&gt;SlachCmd.RequestData&lt;/code&gt; に変換される前の文字列だ． &lt;code&gt;ToForm&lt;/code&gt; 型クラスを使って元の形（&lt;code&gt;=&lt;/code&gt; と &lt;code&gt;&amp;amp;&lt;/code&gt; で連結するやつ）に戻せば良いと思うかも知れないが，これだと key の順番が変わってしまう可能性があり，順番が変わると別のエンコード結果になってしまう． 逆に文字列のまんま受け取れば良いかと思うかも知れないが，Servant は正しい ContentType な型を指定しないと 400 を返してしまう（スラッシュコマンドは &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; でリクエストしてくる）． 困った． 色々調べたが，後から素のリクエストボディを取得する方法がわからなかった…&lt;/p&gt;
&lt;h3 id=&#34;contenttypeを自作する&#34;&gt;ContentTypeを自作する&lt;/h3&gt;
&lt;p&gt;まぁ無いなら自作するしかない． 素の文字列を返してくれて &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; メディアタイプを表している ContentType な型を作る． どのメディアタイプかは &lt;code&gt;Accept&lt;/code&gt; 型クラスで定義し，どの型で返してくれるかは &lt;code&gt;MimeUnrender&lt;/code&gt; 型クラスで定義する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accept&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  contentType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MediaType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;  contentType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;application&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;M.//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MimeUnrender&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  mimeUnrender ::&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy.ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;  mimeUnrender _ bs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Text.unpack &lt;span class=&#34;op&#34;&gt;+++&lt;/span&gt; (bs,) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; urlDecodeAsForm bs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どーせ後から &lt;code&gt;RequestData&lt;/code&gt; 型に変換するので両方を返すことにした． あとはこれを使うだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Web.Slack は slackell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;slash&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Request-Timestamp&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.RequestTimestamp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Signature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SignatureHeader&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;apiの実装&#34;&gt;APIの実装&lt;/h3&gt;
&lt;p&gt;残りは今までのを使うだけなので簡単：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;server secret &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; slashCommand&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    slashCommand (lbs, body) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ts) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; sign) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; digest &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Slack.encodeSignature secret ts (LBS.toStrict lbs) &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; digest &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; Slack.convertSignatureHeader sign &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; forkIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; action body &lt;span class=&#34;co&#34;&gt;-- タイムアウトがあるので処理自体は fork する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;        throwError err401&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;    slashCommand _ _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    action ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd.RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;    action body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おまけfromformインスタンス&#34;&gt;おまけ：FromFormインスタンス&lt;/h2&gt;
&lt;p&gt;実はこれだkではビルドが通らない． というのも，拡張可能データ型の &lt;code&gt;FromForm&lt;/code&gt; 型クラスインスタンスが無いからだ． しょうがないので自作した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.FormUrlEncoded&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FromForm&lt;/span&gt; (..))&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.HttpApiData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; (..), parseUnique)&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt;) xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromForm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; xs) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  fromForm form &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;    hgenerateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; parseUnique (stringKeyOf m) form&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Identity のインスタンスぐらい宣言しておいてよ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  parseUrlPiece &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; parseUrlPiece&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの欠点が1つ． &lt;code&gt;parseUnique&lt;/code&gt; 関数の &lt;code&gt;Maybe a&lt;/code&gt; 型に関する振る舞いだ． &lt;code&gt;Maybe a&lt;/code&gt; 型なら該当の key が含まれなければ &lt;code&gt;Nothing&lt;/code&gt; で key があれば &lt;code&gt;Just v&lt;/code&gt; になって欲しい． しかし実際はこうだ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; parseUnique &lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; [(&lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Just 25&amp;quot;&lt;/span&gt;)]&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現実のリクエストが &lt;code&gt;&amp;quot;Just hoge&amp;quot;&lt;/code&gt; なんて送ってくるわけが無い！ しょうがないので自作した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  parseUnique&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Form&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;   &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  parseUnique&amp;#39; key form &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    mv &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookupMaybe key form&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mv &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; v  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; parseQueryParam v&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，&lt;code&gt;parseUnique&lt;/code&gt; の代わりに &lt;code&gt;parseUnique&amp;#39;&lt;/code&gt; を使うように &lt;code&gt;FromForm&lt;/code&gt; 型クラスのインスタンスを書き換えるだけだ． これは汎用的なので&lt;a href=&#34;https://github.com/matsubara0507/extensible-ext/tree/master/extensible-http-api-data&#34;&gt;別のリポジトリに切り分けた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell/tree/master/example&#34;&gt;サンプルコード&lt;/a&gt;を作ってスラッシュコマンドのデバッグをしたが，間にちゃんとリクエスト・レスポンスをロギングする仕組みを省いたせいで超大変だった笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/25/224329</id><title type="text">barbies-thで気軽にHKDを堪能しよう [Haskell AdC 14]</title><updated>2020-04-19T22:45:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/25/224329"/><summary type="html">ミーハーな読者なら、barbiesというライブラリをご存知の方も多いと思う。そう、HKDを扱う定番ライブラリだ。HKDは、同アドベントカレンダーにも寄稿されている他、Haskell Dayでも紹介された(https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660)注目の技法だ。Higher-Kinded Data (HKD) について - Qiita HKDは、一番簡単な場合であるはずのIdentityを使うと着脱が面倒になるという問題がよく知られている。Data.Barbie.BareモジュールのWearという型族…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html</id><title type="text">Haskell Servant に GitHub Apps による認証を追加する</title><updated>2020-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;時々みる「GitHubでログイン」っぽいのを Servant 製サンプルアプリケーションに実装します．&lt;/p&gt;
&lt;p&gt;サンプルアプリケーションは2年前に書いた「&lt;a href=&#34;/posts/2017-09-17-create-haskell-and-elm.html&#34;&gt;Haskell × Elm のサンプルアプリケーションを書いてみた&lt;/a&gt;」という記事のものを，最近の GHC や Elm でリファクタリングして使います． これは簡単な ToDo アプリケーションです：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-haskell-and-elm/sample.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最終的な実装 PR は&lt;a href=&#34;https://github.com/matsubara0507/haskell-and-elm/pull/2&#34;&gt;これ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;github-apps-による認証&#34;&gt;GitHub Apps による認証&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps&#34;&gt;公式ドキュメント&lt;/a&gt;より&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;GitHub で Apps を登録する
&lt;ul&gt;
&lt;li&gt;Client ID・Client Secret を取得&lt;/li&gt;
&lt;li&gt;callback URL を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ログインする際に &lt;code&gt;https://github.com/login/oauth/authorize?cleint_id=[cleint_id]&lt;/code&gt; へリダイレクトさせる
&lt;ul&gt;
&lt;li&gt;(1)の App の使用を許可するかという画面へ飛ぶ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;許可すると(1)で設定した callback エンドポイントが叩かれる
&lt;ul&gt;
&lt;li&gt;code というリクエストパラメータがついてくる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Client ID・Client Secret と(3)の code を使うことで bearer token が手に入る
&lt;ul&gt;
&lt;li&gt;このトークンを利用することで GitHub ユーザーの情報を取得したりできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(4)を利用して取得した GitHub アカウント名などを Cookie に積んでおく&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとは (5) の Cookie の有無によってログイン済みかどうかを判断するだけ（まぁこれは GitHub App とか関係ないよくあるやり方）． つまり問題は Servant でどうやってログイン情報などを Cookie に載せるかということだ．&lt;/p&gt;
&lt;h2 id=&#34;servant-で認証機能&#34;&gt;Servant で認証機能&lt;/h2&gt;
&lt;p&gt;を作るには &lt;a href=&#34;https://hackage.haskell.org/package/servant-auth-server&#34;&gt;servant-auth-server&lt;/a&gt; という Servant 公式のパッケージを使えば良いようだ． 詳しくは以下の公式ドキュメントを読むと良い：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.servant.dev/en/stable/tutorial/Authentication.html&#34;&gt;Authentication in Servant — Servant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;servant-auth-server を利用することで，JWT エンコードした認証情報を Cookie として保存したり，その Cookie の有無によって認証済みかどうかチェックしたりなどができる． 公式ドキュメント以外に特に利用の仕方を解説した記事とか見当たらなくて，結局実装コード読んだり，servant-auth-server パッケージを使ってるリポジトリを GitHub で検索したりして手探りで実装していった．&lt;/p&gt;
&lt;h3 id=&#34;api-の型&#34;&gt;API の型&lt;/h3&gt;
&lt;p&gt;元々はこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Blaze.Html5&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;H&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.HTML.Blaze&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Get&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Raw&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Todo.CRUD&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これに認証機能を追加する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Auth&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Cookie&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;GitHub.User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Todo.CRUD&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Get&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Raw&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; &amp;#39;[]&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;callback&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QueryParam&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;JWTCookieHeaders&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; headers &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Verb&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;GET&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;308&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] (&lt;span class=&#34;dt&#34;&gt;Headers&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &amp;#39;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; headers) &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;JWTCookieHeaders&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SetCookie&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SetCookie&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Protected&lt;/code&gt; と &lt;code&gt;Unprotected&lt;/code&gt; 型のように，認証済みの場合だけ利用可能なエンドポイントとそうでないエンドポイントを分けると良いようだ． 今回は &lt;code&gt;/index.html&lt;/code&gt; を認証の外にしたが，別に中にしてもいいと思う． 認証側に &lt;code&gt;Auth &amp;#39;[Cookie] a&lt;/code&gt; を追加することで JWT エンコードされた Cookie の有無で認証済みかを判断し，Cookie があればそれを &lt;code&gt;a&lt;/code&gt; 型へデコードしてくれる． Cookie の付与自体は callback エンドポイントで行う． ちなみに，&lt;code&gt;Set-Cookie&lt;/code&gt; が2つあるのは，1つを CRSF Protection に使うためだ（CRSF Protection については後述）．&lt;/p&gt;
&lt;h3 id=&#34;cookie-と-jwt-の設定&#34;&gt;Cookie と JWT の設定&lt;/h3&gt;
&lt;p&gt;また，Cookie や JWT の設定は Servant の Context 機能で渡す必要がある：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  todoDB       &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; STM.atomically &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; STM.newTVar initTodoDB&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  clientId     &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GITHUB_CLIENT_ID&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  clientSecret &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GITHUB_CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  jwtSettings  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; defaultJWTSettings &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; generateKey&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; cfg   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cookieSettings &lt;span class=&#34;op&#34;&gt;:.&lt;/span&gt; jwtSettings &lt;span class=&#34;op&#34;&gt;:.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmptyContext&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;      oauth &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;client_id &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; clientId &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;client_secret &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; clientSecret &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;      env   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;index  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; indexHtml&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;cookie &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; cookieSettings&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;jwt    &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; jwtSettings&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;todos  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; todoDB&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; oauth&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;  Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; serveWithContext api cfg (server env)&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;  initTodoDB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; initTodos, IntMap.fromList initTodos)&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;  cookieSettings &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultCookieSettings&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;    { cookieIsSecure &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotSecure&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;    , cookieMaxAge &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Time.secondsToDiffTime (&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;    , cookieXsrfSetting &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;api ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Cookie&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;api &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれの設定は servant-auth-server の &lt;code&gt;defaultCookieSettings&lt;/code&gt; と &lt;code&gt;defaultJWTSettings&lt;/code&gt; を利用すれば良い．&lt;/p&gt;
&lt;p&gt;今回は localhost で利用するようにしてるので &lt;code&gt;cookieIsSecure&lt;/code&gt; に &lt;code&gt;NotSecure&lt;/code&gt; を設定してる（これで HttpOnly になる）が，普通は &lt;code&gt;Secure&lt;/code&gt; のままで良い． &lt;code&gt;cookieXsrfSetting&lt;/code&gt; は前述した CSRF Protection の設定で，デフォルトではオンになっている． オンの場合は Cookie に設定された CSRF Protection 用のトークンをヘッダーに設定してリクエストしないと，Protected な API は弾かれるようになる（Cookie 名は cookieXsrfSetting で設定する）． ちなみに，GET リクエストは CSRF Protection しないという設定も可能だ．&lt;/p&gt;
&lt;p&gt;JWT の設定にはエンコードするための鍵を渡す必要がある． 今回は servant-auth-server の &lt;code&gt;generateKey&lt;/code&gt; 関数を利用している． これは（少なくともバージョン0.4.5.1では）256長の対称鍵（HS256）をランダムに生成してくれる． ランダムに生成したものを利用してるので，起動するたびに Cookie の情報が変わってしまう点に注意． もし，JWTのアルゴリズムや鍵を別のものにしたい場合は &lt;a href=&#34;http://hackage.haskell.org/package/jose&#34;&gt;jose パッケージ&lt;/a&gt; を利用すれば良いはずだ．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;余談だが，Cookie にある JWT のデコードは Servant Context の設定を利用するが，Cookie に積むときはエンドポイントの最後でエンコードをするので，同一の設定をエンドポイントまで橋渡しをしないといけない（ぼくは他方がデフォルトのままになってるのに気付かず3時間溶かした…）．&lt;/p&gt;
&lt;h3 id=&#34;protected-なエンドポイント&#34;&gt;Protected なエンドポイント&lt;/h3&gt;
&lt;p&gt;こんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;protected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AuthResult&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;protected env (&lt;span class=&#34;dt&#34;&gt;Authenticated&lt;/span&gt; _) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; todoAPI (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;todos)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;protected _ _                   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; throwAll err401&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回はアカウントによってレスポンスの出しわけをしてないので，&lt;code&gt;Authenticated&lt;/code&gt; かどうかだけをみている．&lt;/p&gt;
&lt;h3 id=&#34;ログインエンドポイント&#34;&gt;ログインエンドポイント&lt;/h3&gt;
&lt;p&gt;ログインエンドポイントはただ GitHub の該当 URL へリダイレクトするだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unprotected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;unprotected env &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;index) &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; serveDirectoryFileServer &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; login &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; callback&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    login &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addHeader (GitHub.authorizeUrl &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth) &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    callback &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- GitHub module&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;authorizeUrl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OAuthSettings&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OAuthSettings&lt;/code&gt; は GitHub App の Client ID と Client Secret が保存されている．&lt;/p&gt;
&lt;h3 id=&#34;callback-エンドポイント&#34;&gt;callback エンドポイント&lt;/h3&gt;
&lt;p&gt;最後は callback で，JWT エンコードした認証情報を Cookie に保存すれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unprotected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;unprotected env &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;    login &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    callback (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; code) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; GitHub.fetchUser (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth) code &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; liftIO (acceptLogin (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;cookie) (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;jwt) user) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; applyCookies &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addHeader &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; (applyCookies &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- GitHub module&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fetchUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OAuthSettings&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;認証情報には GitHub のユーザー情報を利用しており，callback で渡された &lt;code&gt;code&lt;/code&gt; パラメーターを利用して（取得したトークンを利用して）取得する． 認証情報を JWT エンコードして Cookie に埋め込む処理は servant-auth-servar パッケージの &lt;code&gt;acceptLogin&lt;/code&gt; 関数を使うだけで良い．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;これで API 側の準備はできた． あとはフロントを少しいじって出来上がり．&lt;/p&gt;
&lt;h2 id=&#34;フロントにログインボタンを作る&#34;&gt;フロントにログインボタンを作る&lt;/h2&gt;
&lt;p&gt;認証状態を使ってイロイロと出し分けたほうがいいのだが，めんどくさいのでただ &lt;code&gt;/login&lt;/code&gt; へのリンクをおいた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-3 mx-auto col-10&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;h1&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ToDo List !!&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewToDos&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewPost&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;btn btn-sm btn-outline float-right mt-2&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;inherit&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;text-decoration-line&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Login by GitHub&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/servant-auth-with-github-apps/sample.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけreaderモナド&#34;&gt;おまけ：Readerモナド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Env&lt;/code&gt; は Cookie や JWT の設定を保持しているグローバル環境型だ． こういうのは引数としてリレーしても良いが，&lt;code&gt;Reader&lt;/code&gt; モナド使って渡すのがよくある手法だ． Servant の場合は &lt;a href=&#34;https://hackage.haskell.org/package/servant-server-0.17/docs/Servant-Server.html#v:hoistServerWithContext&#34;&gt;&lt;code&gt;hoistServerWithContext&lt;/code&gt;&lt;/a&gt; を使うことで &lt;code&gt;Handler&lt;/code&gt; の代わりに別のモナドを利用できる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;    serveWithContext api cfg (hoistServerWithContext api ctx (convert env) server)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;ctx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;CookieSettings&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;JWTSettings&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;ctx &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;convert ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;convert context app &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runReaderT app context&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;Env -&amp;gt; Server api&lt;/code&gt; みたいな型を &lt;code&gt;ServerT api App&lt;/code&gt; としていくだけ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう組み合わせに言及した記事がなくて調べるの大変だった． あと一応，実アプリケーションで使うときはちゃんと安全性について別途調べてくださいね（責任は持ちません）．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/io-monad-and-sideeffect.html</id><title type="text">IO モナドと副作用</title><updated>2020-04-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/io-monad-and-sideeffect.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は他のプログラミング言語には見られない特徴を多く持っている。その中の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つが純粋性だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語であることを、売りの&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つにしている。しかし、純粋性は多くの場合表現力の縮小を招く。ところが &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;モナドの導入により、通常のプログラミング言語と変わらぬ表現力を持てるようになっている。これは、とても驚くべきことだ。しかし、同時にこれは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 入門者にとって、大きな混乱を招いているようだ。&lt;/p&gt;
&lt;p&gt;今回は、そもそも純粋性とはなんなのか、なぜ他の言語は純粋性を担保できないのか、そして &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はどうやって &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドにより純粋性を担保しつつ他の言語と変わらない表現力を持てるようにしているのかについて、触れていきたいと思う。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#純粋性とは何か&#34; title=&#34;純粋性とは何か&#34;&gt;純粋性とは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#動作を扱う関数&#34; title=&#34;動作を扱う関数&#34;&gt;動作を扱う関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io-モナド&#34; title=&#34;io-モナド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#動作を第一級で取り扱う&#34; title=&#34;動作を第一級で取り扱う&#34;&gt;動作を第一級で取り扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おまけ-ioモナドの実装&#34; title=&#34;おまけ-ioモナドの実装&#34;&gt;おまけ&lt;span class=&#34;ascii&#34;&gt;: IO&lt;/span&gt;モナドの実装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;純粋性とは何か&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#純粋性とは何か&#34; title=&#34;純粋性とは何か&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;純粋性とは何か&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語 &lt;span class=&#34;ascii&#34;&gt;(purely functional programming language)&lt;/span&gt; を売りにしている。関数型 &lt;span class=&#34;ascii&#34;&gt;(functional)&lt;/span&gt; の部分は他に任せるとして、ここでは&lt;strong&gt;純粋 &lt;span class=&#34;ascii&#34;&gt;(purely)&lt;/span&gt;&lt;/strong&gt; の部分に着目しよう。純粋とはなんだろうか？ どういう条件を満たせば、プログラミング言語は純粋と言えるんだろうか？ &lt;a href=&#34;https://www.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の公式サイト&lt;/a&gt; ではこう述べられている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Every function in Haskell is a function in the mathematical sense (i.e.,&lt;/span&gt; “&lt;span class=&#34;ascii&#34;&gt;pure&lt;/span&gt;”&lt;span class=&#34;ascii&#34;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の全ての関数は、数学の意味での関数 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つまり「純粋」&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; です。&lt;/p&gt;
&lt;p&gt;– &lt;a href=&#34;https://www.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell.org&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;Features: Purely functional&lt;/span&gt; より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ふむ、どうやら全ての関数が、数学的な意味での関数であれば、そのプログラミング言語は純粋と言えるようだ。ところで、数学的な意味での関数とはなんだろうか？ 関数が純粋とはどういうことを指すんだろうか？ これは噛み砕くと、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;関数はどんな時も、同じ引数を与えられたら同じ結果を返す&lt;/p&gt;
&lt;p&gt;つまり、関数は毎回まっさらな状態で始まり、前にどんなことがあったのか、今巷でどういうことが起きてるのかを全く考慮に入れず、ただ受け取った引数から得られる情報だけを使って結果を計算する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;関数は、副作用を持たない&lt;/p&gt;
&lt;p&gt;つまり、関数は計算の結果を返す以外の役割を持たない。例えば、関数を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すのと、関数を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出してその結果を捨てまたもう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すので結果が変わることはない。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの性質にまとめられる &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。具体的には、関数 &lt;code&gt;f&lt;/code&gt; が、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回目の &lt;code&gt;f 1&lt;/code&gt; では &lt;code&gt;2&lt;/code&gt; を返し、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回目の &lt;code&gt;f 1&lt;/code&gt; では &lt;code&gt;3&lt;/code&gt; を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という動作をするなら、これは &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件にも &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; の条件にも違反することになる。では、関数 &lt;code&gt;printString&lt;/code&gt; が&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列をターミナルに出力し、&lt;code&gt;()&lt;/code&gt; を結果として返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことを考えよう。関数 &lt;code&gt;printString&lt;/code&gt; は常に &lt;code&gt;()&lt;/code&gt; を返すので &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件にはマッチする。しかし、この関数は、与えられた文字列をターミナルに出力するので、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すか&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回呼び出すかは重要な違いになる。よって、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件を満たさないため、純粋ではない。逆に、関数 &lt;code&gt;getNowYear&lt;/code&gt; が、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全に副作用を持たず、何回呼び出しても他には何の影響もないが、今の年数を返す関数で、年が変わるごとに結果が変わる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となると &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件に違反するため、やはり純粋ではない。関数が純粋になるためには、何の面白味もないかもしれないが、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; と &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; の条件を守らないといけない。決して夕日が沈むと突然結果を出さなくなったり、関数を呼ぶ度に近所の犬が吠えたり静かになったりしてはいけない。&lt;/p&gt;
&lt;p&gt;さて、このような定義なら、多くのプログラミング言語の関数が純粋性を持たないのは納得できるだろう。同じ引数でも呼ぶタイミングによって結果が変わる関数、関数を呼ぶと全く予期しなかったスイッチが作動し、別の関数の結果が突然変わるようなプログラムを思いつく人は少なくないはずだ。ただ、その人たちは同時にこうも思うだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;そのような関数はプログラミングでは必要不可欠だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はその必要不可欠な関数を、純粋性のためだけに書けないようにしてるのだろうか？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;その疑問は至極妥当で、当然のものだ。そして安心して欲しい。その質問に対する答えは &lt;span class=&#34;ascii&#34;&gt;NO&lt;/span&gt; だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋性を保ちながら、そのような必要不可欠な関数を表現する方法を持っている。&lt;/p&gt;
&lt;h2 id=&#34;動作を扱う関数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#動作を扱う関数&#34; title=&#34;動作を扱う関数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;動作を扱う関数&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; には、ターミナルに出力する動作を扱う関数や、ターミナルへの入力を受け取る動作を扱う関数が存在する。これは、どうも先ほどまでの純粋性の定義とは相容れないように見える。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の純粋関数型プログラミング言語という性質は、そのような関数を除いては純粋という意味なんだろうか？ それなら他のプログラミング言語でも事情は変わらない。ところが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はそのような関数まで純粋なのだ。そのカラクリについて、見ていこう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; でターミナルに文字列を &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;改行付きで&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; 出力する動作を扱う関数として、&lt;code&gt;putStrLn&lt;/code&gt; という関数がある。これを題材として扱っていこう。この関数はどういう型を持っているのだろう？ もし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型になっていたら、この場合は文字列を受け取り &lt;code&gt;()&lt;/code&gt; 型の値を返す関数になる。&lt;code&gt;()&lt;/code&gt; 型は次のように定義される &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、&lt;code&gt;()&lt;/code&gt; というたった一つの値を持つ型になる。なので、&lt;code&gt;putStrLn&lt;/code&gt; が &lt;code&gt;putStrLn :: String -&amp;gt; ()&lt;/code&gt; という型を持っていた場合は、常に &lt;code&gt;()&lt;/code&gt; という値を返す関数となり、純粋性の &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; 番目の条件を満たす。しかし、&lt;code&gt;putStrLn&lt;/code&gt; は呼び出し回数に応じて文字列をターミナルに出力していくので、副作用を持ち、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件には到底当てはまらない。では、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件に当てはまるようにするにはどうすればいいだろう？ そのような選択肢は到底ないように見える。&lt;/p&gt;
&lt;p&gt;実際には、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; は&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型を持つ。つまり、返る値は &lt;code&gt;IO ()&lt;/code&gt; という不思議な型を持つ。こうすると純粋に文字列をターミナルに出力できるんだろうか？ 答えは &lt;span class=&#34;ascii&#34;&gt;NO&lt;/span&gt; だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; 関数は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列をターミナルに出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数ではない。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、到底純粋性を持たないような操作をする関数を、そもそも関数の見方を変えて提供することで純粋性を保っている。この関数 &lt;code&gt;putStrLn&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列から、「ターミナルにその文字列を出力する動作」を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数だ。そして、「ターミナルにその文字列を出力する動作」は &lt;code&gt;IO ()&lt;/code&gt; という型を持つ。動作 &lt;span class=&#34;ascii&#34;&gt;(action)&lt;/span&gt; とは、文字通り「何をするか」 &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; を表す。&lt;code&gt;IO a&lt;/code&gt; は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;動作、つまり「何をするか」を表す値を持つ&lt;/li&gt;
&lt;li&gt;その動作をした結果、得られる値の型が &lt;code&gt;a&lt;/code&gt; であることを表す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型だ。抽象的すぎてあまりピンとこないかもしれない。もし、その動作が結果を返す以外に何もしないなら、それは純粋な操作であるから、次のように書ける&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、引数が何もない純粋関数だ。例えば、整数を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ受け取って、その和を計算する動作を返す関数は次のように書けるだろう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addAction ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;addAction x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;putStrLn&lt;/code&gt; も &lt;code&gt;addAction&lt;/code&gt; と同じように、値そのものではなくその値を計算する&lt;strong&gt;動作&lt;/strong&gt;それ自体を返す。ただ、&lt;code&gt;putStrLn&lt;/code&gt; が返す &lt;code&gt;IO&lt;/code&gt; の動作は、&lt;code&gt;PureAction&lt;/code&gt; の動作よりもっと一般的なものだ。つまり、純粋な動作ではないかもしれないということだ。もしかしたらそれは、今の時刻で結果を変えるかもしれないし、結果は常に変わらなくても何回呼び出すかでターミナルに表示する文字を変えるかもしれない。つまり、完全に純粋な関数では表せないかもしれない。でも、動作自体は不変的だ。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力する動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を表す。これが、&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;時にはこういう動作を返してきたのが、&lt;span class=&#34;ascii&#34;&gt;12&lt;/span&gt;時には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力し、お昼の鐘を鳴らす動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を返すようになるということはないし、この動作を返す以外に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勝手にターミナルに文字列を出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということもない。例えば、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; で以下のようなプログラムの出力を見てみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; を計算し、&lt;/li&gt;
&lt;li&gt;結果を捨て&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; を返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というプログラムだ。このプログラムを評価しても、&lt;code&gt;()&lt;/code&gt; だけしか目にしないはずで、何回実行しても同じ結果が得られるはずだ。つまり、&lt;code&gt;putStrLn&lt;/code&gt; は余計なことを何もしていないと言えるだろう。そう説明すると、ちょっと &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をかじった人は&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;この説明は間違っている。この式は &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; を全く評価していないので、実際に &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が余計なことを何もしていないかは分からない&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と言うだろう。その通りだ。この説明は間違っている。それを確認してみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;something happened!&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もし、さっきの &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; がちゃんと計算されていたなら、今回は &lt;code&gt;something happened!&lt;/code&gt; というエラーが見れるはずだ。ところが、全く何の問題もなく式の実行は終わり、&lt;code&gt;()&lt;/code&gt; が出力されてしまった。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は遅延評価により、最終結果に本当に必要な部分しか計算してくれないので、&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; の部分は計算されず無視されてしまっていただけのようだ。では、ちゃんと修正してみよう。修正は、&lt;code&gt;seq&lt;/code&gt; という魔法の関数を使うことで可能だ。&lt;code&gt;seq :: a -&amp;gt; b -&amp;gt; b&lt;/code&gt; は一番最初に渡された引数を &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;必要かどうかに関わらず、強制的に&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; 計算し、その後&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目の引数を返す関数だ。この関数を使うと、次のように修正が可能だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;something happened!&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; something happened&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度は大丈夫だろう。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; の部分をエラーに変えると、ちゃんとエラーが出力されている。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; は計算されているようだ。そう、&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が実行されて実際に行われるのは、その定義通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力する動作」を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということだけで、他には何もしない。常に同じ動作を返すし、副作用を起こしたりもしない。これは純粋関数の定義に当てはまっている。&lt;code&gt;putStrLn&lt;/code&gt; は純粋な関数なのだ。そして、その動作には、動作の結果の型によって型が決まっていて、それが &lt;code&gt;IO&lt;/code&gt; 型ということになる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;では、実際に &lt;code&gt;putStrLn&lt;/code&gt; はどういう定義になるんだろう？ その定義は純粋な枠組みで定義できるんだろうか？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と疑問を持つ人はいるかもしれない。その疑問はとても良いところをついている。そう、&lt;code&gt;putStrLn&lt;/code&gt; は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では定義できない。もしくは、定義するならば「文字列をターミナルに出力する動作」を表す値の作成方法を、何らかの仕組みで提供する必要がある。もし、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「文字列 &lt;code&gt;s&lt;/code&gt; をターミナルに出力する動作」を &lt;code&gt;PutStrLn s :: IO ()&lt;/code&gt; と書ける&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なら、その時は、&lt;code&gt;putStrLn&lt;/code&gt; を次のように定義できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PutStrLn&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただ、今度は &lt;code&gt;PutStrLn&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で定義するにはどうすればいいのだろう？ という話になり、この話は延々と続くことになるだろう。現実世界の純粋なエミュレータを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内部で実装すれば収束するかもしれない。しかし、私たちは、現実世界をコストなく扱いたいわけであり、純粋かどうかは重要なことではない。そして、別に &lt;code&gt;putStrLn&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内で純粋に定義したいのではなく、「文字列 &lt;code&gt;s&lt;/code&gt; をターミナルに出力する動作」を扱いたいだけなのだ。なので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋な部分だけは目に見える範囲で提供し、非純粋な部分は隠蔽し、純粋に扱うことだけをできるようにしている。&lt;/p&gt;
&lt;p&gt;では、実際にこの動作を実行したい時はどうすればいいんだろう？ &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が純粋に、「&lt;code&gt;&#34;str&#34;&lt;/code&gt; をターミナルに出力する動作」を返してきて、それを純粋に扱うことしかできないとなると、実際にターミナルに出力することはできないのではないだろうか？ それもその通りだ。では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ではその問題をどう解決するか。実は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;main&lt;/code&gt; プログラムは、&lt;code&gt;IO&lt;/code&gt; 型の値で定義するようになっている。つまり、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように、&lt;code&gt;main&lt;/code&gt; を何らかの &lt;code&gt;IO&lt;/code&gt; 動作で定義する。そして、実際にこのプログラムからコンパイルされた実行ファイルは、定義された動作をそのまま行うようになっている。こうすることで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋性を保ちながら、非純粋な動作を扱えるようになっている。&lt;/p&gt;
&lt;h2 id=&#34;io-モナド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#io-モナド&#34; title=&#34;io-モナド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナド&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; が純粋な理由は分かってもらえただろうか？ さて中には、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主張は分かったが、純粋に扱うだけに制限するということは、普通のプログラミング言語より非純粋な動作を上手く扱えないんじゃないか&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と疑問に思う人もいるだろう。これも当然の疑問だ。普通のプログラミング言語は、表現力豊かで、様々な制御構文を持ち、それぞれの構文が純粋性に拘らないため、とてもユニークな非純粋なプログラムを書くことができる。ただ、安心して欲しい。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; も、それに負けない表現力で、非純粋な動作を作成することができる。さて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、普通のプログラミング言語の機構の基盤は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作を上手く結合できること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ではないかと考えた。そして、このうまく結合する機構を、&lt;code&gt;IO&lt;/code&gt; 動作の上で実現する方法を考えた。結果、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの特殊な操作が組み込まれている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;純粋な計算を、&lt;code&gt;IO&lt;/code&gt; 動作に変換する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; IO a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの &lt;code&gt;IO&lt;/code&gt; 動作を繋げる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;gt;&amp;gt;=) :: IO a -&amp;gt; (a -&amp;gt; IO b) -&amp;gt; IO b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; については少し説明が必要だろう。&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの &lt;code&gt;IO&lt;/code&gt; 動作を繋げるというのは、&lt;code&gt;(&amp;gt;&amp;gt;=) :: IO a -&amp;gt; IO b -&amp;gt; IO b&lt;/code&gt; となった方が自然そうである。しかし、普通のプログラミング言語は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前の動作の結果により、次に行う動作を変える &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;while&lt;/code&gt; 文など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということが可能だ。そして、前の動作の結果は変数束縛などにより自由に参照できる。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、&lt;code&gt;IO&lt;/code&gt; 動作を純粋性により実際に実行することはできない。その代わり、上の動作の制御機構を、繋げる操作に組み入れることで代用しようとしたのだ。つまり、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の操作は、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;最初に受け取った &lt;code&gt;IO&lt;/code&gt; 動作を実行し、&lt;/li&gt;
&lt;li&gt;その結果から、次に行う &lt;code&gt;IO&lt;/code&gt; 動作を&lt;strong&gt;純粋に&lt;/strong&gt;生成し、&lt;/li&gt;
&lt;li&gt;生成された動作を行う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という動作全体を表す &lt;code&gt;IO&lt;/code&gt; 動作を生成する。この結果から次に行う &lt;code&gt;IO&lt;/code&gt; 動作を生成する部分をうまく定義すれば、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; によって様々な制御構文を模倣できるのではないかと考えたのだ。この仕組みはとても上手くいった。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では、非純粋な動作を&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;while&lt;/code&gt; 文で任意に実行することを、次のような純粋に動作を切り替える関数で代用する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;ifIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;whileIO ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;whileIO isEnd x0 act &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go x0 &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;  go x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ifIO (isEnd x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;    (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;        act x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \nx &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;        go nx&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;    )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらの関数を使えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \loopCmd &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;  ifIO (loopCmd &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;No loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;    (whileIO (\(b, _) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (\(_, i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;loop &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \loopEndCmd &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; title=&#34;9&#34;&gt;        ifIO (loopEndCmd &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; title=&#34;10&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-11&#34; title=&#34;11&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-12&#34; title=&#34;12&#34;&gt;    ))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようなプログラムが書ける。このプログラムは、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;最初にターミナルへの入力を待ち、&lt;code&gt;loop&lt;/code&gt; と打たれれば、ループに入る。それ以外の場合は &lt;code&gt;&#34;No loop&#34;&lt;/code&gt; と出力し、プログラムを終了する。&lt;/li&gt;
&lt;li&gt;今のループの回数を出力し、ターミナルへの入力を待つ。&lt;/li&gt;
&lt;li&gt;ターミナルに &lt;code&gt;end&lt;/code&gt; と打たれれば、プログラムを終了する。それ以外の場合、ループカウントを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;増加させて、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; に戻る。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということを行う。このように、純粋な範囲内で繋げる操作を工夫することで、普通のプログラミング言語の機構を &lt;code&gt;IO&lt;/code&gt; 動作内に組み込めるようになっている。ただ、このプログラムは大変見にくい。なので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はさらに、この繋げる操作を元に、次のような &lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt; を提供している&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;  loopCmd &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;  ifIO (loopCmd &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;No loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;    (whileIO (\(b, _) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (\(_, i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;loop &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;        loopEndCmd &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;        ifIO (loopEndCmd &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; title=&#34;10&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; title=&#34;11&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; title=&#34;12&#34;&gt;    ))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少しは見やすくなっただろうか？ この操作は、そこまで特別な操作をしてるわけではない。インデントを解析して、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;  x1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というのを、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に変形して、さらに&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;  e2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x2 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変形して、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;  e2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x2 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変形する、というように最初から&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行変形して、&lt;code&gt;do&lt;/code&gt; がなくなるまで変形を行うだけだ。つまり一行一行の動作を &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; で繋げていくのだ。なお、一番最後以外は &lt;code&gt;x &amp;lt;- e&lt;/code&gt; という形になっているのが基本で、もしそのような形になっていない &lt;code&gt;e&lt;/code&gt; は、&lt;code&gt;_ &amp;lt;- e&lt;/code&gt; と変換される &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; 。なので、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変換された後、先ほどの変換によって、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となる。このようにして、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は他のプログラミング言語の非純粋な動作を、純粋な枠組みでも同じように扱えるようになっている &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; 。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、この仕組みをモナディック&lt;code&gt;IO&lt;/code&gt;と名付け、&lt;code&gt;IO&lt;/code&gt; 型を &lt;code&gt;IO&lt;/code&gt; モナドと呼んでいる。モナドとは何か、どういう便利な側面があるのかについては、他の記事に譲る。&lt;/p&gt;
&lt;h2 id=&#34;動作を第一級で取り扱う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#動作を第一級で取り扱う&#34; title=&#34;動作を第一級で取り扱う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;動作を第一級で取り扱う&lt;/h2&gt;
&lt;p&gt;どうやら、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;IO&lt;/code&gt; 動作の仕組みが、純粋な枠組みでも他のプログラミング言語とそう劣るものではないということが分かってもらえただろうか？ ところで、先ほどの &lt;code&gt;ifIO&lt;/code&gt; や &lt;code&gt;whileIO&lt;/code&gt; は、&lt;code&gt;IO&lt;/code&gt; 動作を何事もなく引数にとって返したりしていた。&lt;code&gt;ifIO&lt;/code&gt; の定義をもう一度よく見てみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;ifIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプログラムは、条件を表す引数と、&lt;code&gt;IO&lt;/code&gt; 動作を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;個受け取り、条件によって&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作のうちのどちらかを返していた。これは考えてみれば、とても不思議で強力なことだと思わないだろうか？ 普通のプログラミング言語の &lt;code&gt;if&lt;/code&gt; 文は、条件から書かれたプログラムのどちらかを実行する。一方、&lt;code&gt;ifIO&lt;/code&gt; は実行を制御しているわけではない。単に、普通の関数と同じように、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作を受け取って、そのうちの片方を関数の返り値として返すだけだ。&lt;code&gt;ifIO&lt;/code&gt; を呼び出したプログラマは、返ってきた動作をゴミ箱に捨ててもいいし、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; で繋げて「&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回続けて同じ動作をする」&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの動作にしてもいい。もちろんその動作も &lt;code&gt;main&lt;/code&gt; に組み入れるかはプログラマ次第だ。なんなら、&lt;code&gt;main&lt;/code&gt; 以外にライブラリの一部としてグローバルに定義してもいい。ライブラリを使うユーザは、やっぱりそれを使うも使わないも自由だ。&lt;code&gt;main&lt;/code&gt; に組み入れない限り、その動作は単なるデータであり、実行もされない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt; 動作がデータであることは、プログラムをより豊かにする。さっきの &lt;code&gt;ifIO&lt;/code&gt; は、条件によって片方の動作を返していた。&lt;code&gt;IO&lt;/code&gt;動作はもっと多彩に制御できる。例えば、条件によって動作の順番を変えたかったら次のように書けばいい&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;chooseOrderIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;chooseOrderIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;    act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;    act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;    act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;    act1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;chooseOrderIO&lt;/code&gt; は条件によって、受け取った動作を実行する順番を変え、その順序で結合した動作を返す。順番が同じで結果だけ選ぶといったこともできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifResultIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;ifResultIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;  x1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ifIO&lt;/code&gt; は条件によって動作そのものを選んでいたが、&lt;code&gt;ifResultIO&lt;/code&gt; はどの条件でも &lt;code&gt;act1&lt;/code&gt; と &lt;code&gt;act2&lt;/code&gt; の順に動作をすること自体は変えない。代わりに、その動作の結果をどっちにするかだけを変える。このように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は &lt;code&gt;IO&lt;/code&gt; 動作を、多彩に、しかも純粋にコーディネートすることができる。これは、他の多くのプログラミング言語にはなく、しかも強力な機能だ。そう、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;IO&lt;/code&gt; 動作は、それが単なるデータであるがゆえに、通常のプログラミングの範囲で自由に加工できるのだ。&lt;/p&gt;
&lt;p&gt;これを、動作が第一級であるという。第一級とは、つまり他のデータと全く同じように扱えるということだ。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;この記事では、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;純粋とは何か&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、どうして純粋なのか&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、純粋な中で、他の言語の機構をどうやって実現しているのか&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; が、その中で獲得した強力な機能とは何か&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;について紹介した。どうだろう？ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドについて、少しでも理解の補助になっただろうか？&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドとは、動作そのものを値に持つ型だった。そして、その値は、特別な繋げる操作により他の言語と同じように加工でき、しかも通常のプログラミングの範囲で加工が可能になっている。しかも、加工自体は純粋にでき、動作の生成も純粋にできる。これが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; が純粋であると言われる所以だった。&lt;/p&gt;
&lt;p&gt;この &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の根幹をなす機能が、どういう点で魅力的なのか分かってもらえたら、この記事を書いた甲斐があるというものだ。もし、あなたもこの機能の魅力に取り憑かれたらなら、ぜひ &lt;code&gt;IO&lt;/code&gt; 動作をふんだんに加工してプログラミングをしていって欲しい。では、楽しい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ライフを。&lt;/p&gt;
&lt;h2 id=&#34;おまけ-ioモナドの実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おまけ-ioモナドの実装&#34; title=&#34;おまけ-ioモナドの実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おまけ&lt;span class=&#34;ascii&#34;&gt;: IO&lt;/span&gt;モナドの実装&lt;/h2&gt;
&lt;p&gt;ところで、もしかしたら、読者の中には、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドは、現実世界を状態にする &lt;span class=&#34;ascii&#34;&gt;State&lt;/span&gt; モナドだ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;という主張を、見たことがある人がいるかもしれない。最後におまけとしてこの話に触れておこうと思う。気になる人は、この後も呼んでみると、&lt;code&gt;IO&lt;/code&gt; モナドの理解の助けになるかもしれない &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;または、むしろ混乱するかもしれない。もし、混乱したなら、とりあえずこの話は忘れることをお勧めする。ここに書いてある話を理解しなくても、&lt;code&gt;IO&lt;/code&gt; モナドの利用に関して全く支障はない。そういう話もあるぐらいの事柄だ。なので、安心してまずは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングを楽しんでほしい。いつか楽しみ飽きたら戻ってきてもいいかもしれない&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;まず、この話は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非純粋な世界の話だということ&lt;/li&gt;
&lt;li&gt;単なる &lt;span class=&#34;ascii&#34;&gt;State&lt;/span&gt; モナドではないということ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を押さえておいて欲しい。さて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の代表的な処理系 &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は、標準の範囲では純粋関数型プログラミングを提供するが、全体としては非純粋な計算も許容している。そして、その計算を &lt;code&gt;IO&lt;/code&gt; モナドの内部に使っている。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; では &lt;code&gt;IO&lt;/code&gt; モナドは、通常の言語内の一部として定義されている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt;, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型は、詳細は省くが、本質的には、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; 型の値を受け取り、&lt;code&gt;State# RealWorld&lt;/code&gt; 型の値と &lt;code&gt;a&lt;/code&gt; 型の値のタプルを返す関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の &lt;code&gt;newtype&lt;/code&gt; になっている。&lt;code&gt;State&lt;/code&gt; モナドについて知ってる人は、これは &lt;code&gt;State (State# RealWorld) a&lt;/code&gt; と同じだと思うだろう。しかし、&lt;code&gt;IO a&lt;/code&gt; の値は、他に &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の型では表現できない契約を持つ。それは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; の型の値は、必ず&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回だけ使用される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という契約だ。なので、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, \() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;code&gt;s#&lt;/code&gt; を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;箇所で使ってるため &lt;code&gt;IO (() -&amp;gt; State# RealWorld)&lt;/code&gt; の値になれないし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, () &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は一番外側の &lt;code&gt;IO&lt;/code&gt; は &lt;code&gt;s#&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 箇所で使っているため契約違反で、内側の &lt;code&gt;IO&lt;/code&gt; は受け取った引数を一度も使っていないのでやはり契約違反ということになる。この定義を使って、例えば &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で可変参照を扱う &lt;code&gt;IORef&lt;/code&gt; のフレームワークは、次のように定義されている &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;newIORef ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; title=&#34;4&#34;&gt;newIORef &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; title=&#34;5&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, var &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readIORef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; title=&#34;8&#34;&gt;readIORef (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;writeIORef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-11&#34; title=&#34;11&#34;&gt;writeIORef (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) val &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; val s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-12&#34; title=&#34;12&#34;&gt;  s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, () &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この定義は、ちゃんと &lt;code&gt;IO&lt;/code&gt; 型の制約を守っている。なおここで出てくる、&lt;code&gt;#&lt;/code&gt; が付く関数やデータ型は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の中で特別扱いされ、プリミティブな関数やデータ型になっている。それぞれ、以下の型の関数として扱える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-5&#34; title=&#34;5&#34;&gt;writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意して欲しいのは、これらの関数は純粋ではないということだ。これは、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; 上で次のように確認できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XMagicHash&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XUnboxedTuples&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Prim&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Types&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-7&#34; title=&#34;7&#34;&gt;      r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; _, b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-10&#34; title=&#34;10&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; は両方とも &lt;code&gt;readMutVar# var# r1#&lt;/code&gt; から得た値になる。ところが、これらを比較してみると &lt;code&gt;False&lt;/code&gt; になる &lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; 。もし、&lt;code&gt;readMutVar#&lt;/code&gt; が純粋なら、&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; の結果は同じになるため、上の評価結果は &lt;code&gt;True&lt;/code&gt; になるはずだ。しかし、残念ながら &lt;code&gt;readMutVar#&lt;/code&gt; は純粋ではないので、&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; は異なる値になってしまう。なお、この式は、&lt;code&gt;IO&lt;/code&gt; 型で定義しているが、実際には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 回目の &lt;code&gt;readMutVar#&lt;/code&gt; の呼び出しで &lt;code&gt;r1#&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 回使用しているし、&lt;/li&gt;
&lt;li&gt;返ってきた &lt;code&gt;State# RealWorld&lt;/code&gt; の値を捨てている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ので契約違反であることに注意だ。&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; 上で、うまく評価結果を確認するために、&lt;code&gt;IO&lt;/code&gt; を使っている。&lt;/p&gt;
&lt;p&gt;さて、純粋性を守れないなら、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は一体全体何のためにこのような定義をしているんだろう？ 関数が純粋でなくてもいいなら、単に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義しても問題ないのではないだろうか？ この方が自然に動作を表しているように思える。ところが、このような定義は、ある問題を招くのだ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語という売りの他に、遅延評価という他の言語にはあまり見られない評価機構を採用している。もちろん、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; も遅延評価が基本だ。正確には、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価順序は、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;The order of evaluation of expressions in Haskell is constrained only by data dependencies; an implementation has a great deal of freedom in choosing this order.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の式の評価順序は、データ依存によってのみ縛られます。これは、実装がこの順序の選択において、大きな自由度を持つことを意味します。&lt;/p&gt;
&lt;p&gt;– &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch7.html#x14-1420007&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report - Chapter 7 Basic Input/Output&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とあるように、データ依存関係によってのみ制御できる。ところが、&lt;code&gt;IO&lt;/code&gt;動作は違う。例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式において、&lt;code&gt;putStrLn &#34;str1&#34;&lt;/code&gt; と &lt;code&gt;putStrLn &#34;str2&#34;&lt;/code&gt; の動作の間には、何らのデータ依存関係も存在しない。しかしながら、&lt;code&gt;main&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;str1&#34;&lt;/code&gt; をターミナルに出力した後、&lt;code&gt;&#34;str2&#34;&lt;/code&gt; をターミナルに出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という動作を表して欲しいはずだ。つまり、&lt;code&gt;IO&lt;/code&gt;動作はデータ依存関係によってのみ順序が決まるわけではなく、その繋げ方によって順序が決まって欲しいのだ。ところが、単純に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という定義を採用してしまうと、&lt;code&gt;IO&lt;/code&gt;の中身は繋げ方の順序を情報として持たないため、動作の実行順序を制御するのに、別途工夫が必要になる。そこで、元の定義の登場だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt;, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;State# RealWorld&lt;/code&gt; は、実際には &lt;code&gt;()&lt;/code&gt; 型と同じく単一の値を持つほぼ何の意味も持たない型になる。しかし、この型の値を計算度に付与することで、データ依存を作ることができる。具体的には、この &lt;code&gt;IO&lt;/code&gt; に対して次のように &lt;code&gt;pure&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; を定義するのだ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; g&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; g x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; g&amp;#39; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特に、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; の定義が重要になる。&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; が返してくる &lt;code&gt;IO&lt;/code&gt; の中身は、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;受け取った &lt;code&gt;State# RealWorld&lt;/code&gt; をまず最初の &lt;code&gt;IO&lt;/code&gt; 動作に渡す&lt;/li&gt;
&lt;li&gt;その結果を &lt;code&gt;g&lt;/code&gt; に渡して、次の &lt;code&gt;IO&lt;/code&gt; 動作を生成する&lt;/li&gt;
&lt;li&gt;生成した &lt;code&gt;IO&lt;/code&gt; 動作に、最初の &lt;code&gt;IO&lt;/code&gt; 動作が返してきた &lt;code&gt;State# RealWorld&lt;/code&gt; を渡す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということを行っている。これにより、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;受け取った &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; の結果の &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&#39;&lt;/code&gt; の結果の &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という順で &lt;code&gt;State# RealWorld&lt;/code&gt; のデータ依存関係が出来上がる。つまり、通常の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価の枠組みで、評価順序を保証できるようになるのだ。実際に、&lt;code&gt;IORef&lt;/code&gt; を例に考えてみよう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; title=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; title=&#34;4&#34;&gt;  b1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-5&#34; title=&#34;5&#34;&gt;  writeIORef &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-6&#34; title=&#34;6&#34;&gt;  b2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というプログラムにおいて、最終的な &lt;code&gt;pure $ b1 == b2&lt;/code&gt; からのデータ依存関係に、一見 &lt;code&gt;writeIORef True x&lt;/code&gt; は関与していないように見える。ところが、内部を見てみると、上のプログラムは、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-4&#34; title=&#34;4&#34;&gt;      (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-5&#34; title=&#34;5&#34;&gt;      r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-6&#34; title=&#34;6&#34;&gt;      (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r4&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r4&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と同じ意味を持ち、全て隠れた &lt;code&gt;State# RealWorld&lt;/code&gt; によってデータ依存で紐づいている。もちろん、&lt;code&gt;let&lt;/code&gt; 内の定義の順番を変えても何の問題もない。重要なのは &lt;code&gt;r0#&lt;/code&gt; から &lt;code&gt;r1#&lt;/code&gt; の結果が得られ、&lt;code&gt;r1#&lt;/code&gt; から &lt;code&gt;r2#&lt;/code&gt; の結果が得られ、というようなデータ依存だけだ。これにより、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価順序に特別な規則を設けない &lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; で、&lt;code&gt;IO&lt;/code&gt; を実装しているのだ。&lt;/p&gt;
&lt;p&gt;なお、こうなると &lt;code&gt;IO&lt;/code&gt; の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; の型の値は、必ず&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回だけ使用される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という契約も意義が見えてくる。もし、この契約が破られると、途中でデータ依存が分岐したり、または途中で途絶えたりすることになる。そうなると、動作がどういう挙動をするかは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内では規定されなくなってしまう。実際に、最適化によってどう動作するかが変わってきてしまう例も作れる。&lt;code&gt;IO&lt;/code&gt; の契約とは、データ依存が必ず一本の線で繋がり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価の枠できちんと順番が規定されるということを保証しているのだ。&lt;/p&gt;
&lt;p&gt;これが、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; がこのような定義を &lt;code&gt;IO&lt;/code&gt; で採用している理由になる。もちろん、アナロジーとして現実世界全体を表す架空の状態を &lt;code&gt;State# RealWorld&lt;/code&gt; と見立て、&lt;code&gt;IO&lt;/code&gt;動作の実行により新たな現実世界全体の状態が手に入るという見方は可能だ。名前の由来もそこから来ている。ただ、基本的には、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; において、特別な仕組みを入れずに &lt;code&gt;IO&lt;/code&gt; を実装するためのやり方であるということを押さえておいて欲しい。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;定義は、 &lt;a href=&#34;https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/3-pure-functions-laziness-io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;School of Haskell&lt;/span&gt; のチュートリアル&lt;/a&gt; から拝借している。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;この定義は、&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1220006.1.5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report 6.1.5 The Unit Datatype&lt;/span&gt;&lt;/a&gt; で述べられているが、実際には &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の構文規則に違反している特別な構文が使われている。なので、実際に &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; でこのように定義できるわけではなく、擬似的に書くとこうなるという意味になる。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;動作は、計算 &lt;span class=&#34;ascii&#34;&gt;(computation)&lt;/span&gt; とも呼ばれる。また、日本の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; コミュニティでは、英語そのままで「アクション」とも呼ばれている。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;厳密には、&lt;code&gt;(&amp;gt;&amp;gt;)&lt;/code&gt; という別の関数を使って定義されるんだが、意味的にはそのような変換と思ってもらって構わない。正式な変換方法は、&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-470003.14&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report 3.14 Do Expressions&lt;/span&gt;&lt;/a&gt; を参照するといいだろう。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;多くの言語では、&lt;code&gt;main&lt;/code&gt; プログラム以外の、例えばライブラリが勝手にスレッドを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ立てるなどの挙動をサポートしている。そのような挙動は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では残念ながらできない。なぜなら、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では &lt;code&gt;main&lt;/code&gt; に動作を組み入れない限りその動作は実行されないからだ。この点では、他の言語より表現力は劣っているということもできる。しかし、そのような機能は、多くの場合明示的に模倣できる。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;code&gt;(# x, y #)&lt;/code&gt; は &lt;code&gt;(# a, b #)&lt;/code&gt; 型の値を表す特別な構文だ。ここでは詳細は述べないので、&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; のタプルの特別な表記方法だと思ってもらって構わない。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;実際には &lt;code&gt;ST&lt;/code&gt; モナドとの兼ね合いで、直接こう定義はされていないが、分かりやすさのため簡略化している。&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;実際には、最適化次第で結果が変わることもある。&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;さらに、&lt;code&gt;State# RealWorld&lt;/code&gt; は &lt;span class=&#34;ascii&#34;&gt;unlifted&lt;/span&gt; なデータ型になっており、サンクを持たない。このため、強制的に正格評価になるようになっており、&lt;code&gt;IO&lt;/code&gt;動作が遅延され、最後に一気に評価されるということを防いでいる。これも、通常の &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の枠組みの中で提供されているのは、とても興味深い。&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;厳密には、残念ながら全てを特別扱いせずに済ませられているわけではない。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; では、&lt;code&gt;State# RealWorld&lt;/code&gt; に関して一部の最適化で特別な処理を施している。&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/haskell-casually-at-work.html&#34; lang=&#34;ja&#34;&gt;Haskellを業務で使う、カジュアルに&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/property-io.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HspecでQuickCheckするときもshouldBeなどが使えます&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html</id><title type="text">git-plantation の依存パッケージのバージョンアゲアゲ with LTS-15</title><updated>2020-04-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;自作している git-plantation という Haskell アプリケーションの依存パッケージのバージョンを、Stackage LTS-15 でビルドできるようにバージョンを色々とあげました． 本記事はそのメモ書きです（記事にするほどのことではないんだけど，思ったより色々したので忘れそうだから記事にした笑）．&lt;/p&gt;
&lt;p&gt;ちなみに git-plantation については，&lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;このスライド&lt;/a&gt;を参照してください． いくつかのパッケージをフォークしたり，ラッパーパッケージを作ったり，そもそも自作したりしてるのでタイミングによっては LTS のメジャーバージョンを一つ上げるだけでも結構大変なのです．&lt;/p&gt;
&lt;h2 id=&#34;ハイライト&#34;&gt;ハイライト&lt;/h2&gt;
&lt;p&gt;ちなみに，元々は LTS 14 だった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GHC のバージョンが 8.8.3 になる（影響はさほどない）&lt;/li&gt;
&lt;li&gt;extensible を 0.8 にする&lt;/li&gt;
&lt;li&gt;github を 0.25 にする&lt;/li&gt;
&lt;li&gt;servant-elm を 0.7.1 にする（これもさほど影響はない）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/pull/58&#34;&gt;最終的なPRはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;extensible-0.8&#34;&gt;extensible-0.8&lt;/h2&gt;
&lt;p&gt;0.8 ではもともと deprecated になっていた関数や型がついに消えたので，利用しっぱなしだったコードがビルドできなくなった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt; &lt;span class=&#34;ex&#34;&gt;/.../drone-1.0.1/src/Drone/Types&lt;/span&gt;/Cron.hs:&lt;span class=&#34;ex&#34;&gt;25&lt;/span&gt;:44: error:&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;ex&#34;&gt;Not&lt;/span&gt; in scope: type constructor or class ‘:*’&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;ex&#34;&gt;Perhaps&lt;/span&gt; you meant one of these:&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;       ‘:&lt;span class=&#34;kw&#34;&gt;&amp;amp;&lt;/span&gt;’ &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;imported&lt;/span&gt; from Data.Extensible&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;       ‘:/’ &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;imported&lt;/span&gt; from Data.Extensible&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;                  &lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt; &lt;span class=&#34;ex&#34;&gt;25&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;type&lt;/span&gt; CronPatch = Nullable (Field Identity) &lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;* CronPatchFields&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;                                            ^^&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;消えたのはこれら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Associate k v xs&lt;/code&gt; =&amp;gt; &lt;code&gt;Lookup xs k v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h :* xs&lt;/code&gt; =&amp;gt; &lt;code&gt;xs :&amp;amp; h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h :| xs&lt;/code&gt; =&amp;gt; &lt;code&gt;xs :/ h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssocKey kv&lt;/code&gt; =&amp;gt; &lt;code&gt;KeyOf kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssocValue kv&lt;/code&gt; =&amp;gt; &lt;code&gt;TargetOf kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValueIs&lt;/code&gt; =&amp;gt; &lt;code&gt;TargetIs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyValue&lt;/code&gt; =&amp;gt; &lt;code&gt;KeyTargetAre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxyAssocKey&lt;/code&gt; =&amp;gt; &lt;code&gt;proxyKeyOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxyAssocValue&lt;/code&gt; =&amp;gt; &lt;code&gt;proxyTargetOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringAssocKey&lt;/code&gt; =&amp;gt; &lt;code&gt;stringKeyOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;訊&lt;/code&gt; =&amp;gt; &lt;code&gt;xlb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上3つは演算子の順番が変わってる点に注意． 他はただ名前を変えただけ（&lt;code&gt;Associate&lt;/code&gt; の名前が変わったためかしら？）．&lt;/p&gt;
&lt;h2 id=&#34;github-0.25&#34;&gt;github-0.25&lt;/h2&gt;
&lt;p&gt;github パッケージは 0.24 でかなり大きなインターフェースの刷新をしており，その影響がデカかった． 今までは一つの API に対して最大3つの関数が用意されていた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- https://developer.github.com/v3/users/#get-a-single-user の関数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoFor ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoFor&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Auth&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoForR ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Request&lt;/span&gt; k &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ベースは &lt;code&gt;hogeR&lt;/code&gt; 関数で，他はこの関数のラッパー関数だ． 0.24 からは &lt;code&gt;hogeR&lt;/code&gt; 関数だけ残して他の関数は廃止し，&lt;code&gt;github&lt;/code&gt; と &lt;code&gt;github&amp;#39;&lt;/code&gt; の2つの関数を用意した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- だいたいこういう対応&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;userInfoFor name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; github&amp;#39; (userInfoForR name)&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;userInfoFor&amp;#39; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; auth) name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; github auth (userInfoForR name)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，github パッケージはフォークして足りない API 関数を足して利用していたため，それらの修正（というか &lt;code&gt;hogeR&lt;/code&gt; 以外の削除）をする必要があった． 追加してたけどフォーク元に PR を投げてなかったのはこれらの関数（完全にメモ）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;removeCollaborator&lt;/code&gt; : リポジトリのコラボレーターの削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teamInfoByName&lt;/code&gt; : Organization のチームをチーム名から引く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addOrUpdateMembership&lt;/code&gt; : Organization メンバーの権限の追加ないしは変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeMembership&lt;/code&gt; : Organization メンバーの権限の削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;servant-elm-0.7.1&#34;&gt;servant-elm-0.7.1&lt;/h2&gt;
&lt;p&gt;ビルドが通らないことはないが生成ファイルが変わったので，念のため差分をチェックした． 少なくとも僕の生成コードに影響があったのは&lt;a href=&#34;https://github.com/haskell-servant/servant-elm/pull/59&#34;&gt;この PR&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using the appropriate toString functions for different types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要するに，デフォルトで定義しているデータ型以外の型で文字列からJSONデコードするときの振る舞いを自分で定義したいって感じだと思う． たぶん．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;servant-elm は elmap.hs というのでラップしてるのでそっちのアップデートも行った． こっちには生成コードのテストも追加してあるので&lt;a href=&#34;https://github.com/matsubara0507/elmap.hs/pull/1/files#diff-3e612857d13f467c108121bba96a6232&#34;&gt;差分がわかりやすい&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;他にも CI/CD を GitHub Actions にしたりした．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/property-io.html</id><title type="text">HspecでQuickCheckするときもshouldBeなどが使えます</title><updated>2020-02-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/property-io.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;タイトルがほとんどすべてなんですが詳細を解説します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;😕なぜ使える？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/h1&gt;
&lt;p&gt;みなさんは&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;を使った&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書く際、どのように書いているでしょうか？&lt;br /&gt;
例えば&lt;a href=&#34;https://hspec.github.io/quickcheck.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のマニュアル&lt;/a&gt;のように、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;に&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を組み込む例として、次のような例を挙げています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/quickcheck.md&#34;&gt;こちらのコミット&lt;/a&gt;の時点での話です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;property&lt;/code&gt;関数に渡した関数&lt;small&gt;（以下、「&lt;code&gt;porperty&lt;/code&gt;ブロック」と呼びます）&lt;/small&gt;の中では&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でおなじみの&lt;code&gt;shouldBe&lt;/code&gt;などの&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;用関数を使わず、&lt;code&gt;==&lt;/code&gt;で結果を判定してますよね。&lt;br /&gt;
このサンプルに倣って、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で書いたテストに&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書くときは、&lt;code&gt;==&lt;/code&gt;を使ってる方が多いんじゃないでしょうか？&lt;/p&gt;
&lt;p&gt;ところが、この記事のタイトルに書いたとおり、実際のところ&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;は利用できます。&lt;br /&gt;
つまりは、こちら👇のようにも書ける、ということです！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;や&lt;code&gt;shouldSatisfy&lt;/code&gt;といった、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;固有の&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;関数を使うことの利点は、単に構文を他のテストと一貫させることができる、だけではありません。&lt;br /&gt;
&lt;strong&gt;テストが失敗したときのエラーが分かりやすくなる&lt;/strong&gt;、という遥かに重大なメリットがあるのです。&lt;/p&gt;
&lt;p&gt;試しにわざとテストを失敗させてみましょう。&lt;br /&gt;
先ほどの例&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;における&lt;code&gt;(x :: Int)&lt;/code&gt;という式を&lt;code&gt;(x + 1 :: Int)&lt;/code&gt;に変えれば、必ず失敗するはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※お手元で試す場合は&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/_includes/QuickCheck.hs&#34;&gt;こちら&lt;/a&gt;から元のコードを持ってきて、&lt;code&gt;stack build hspec&lt;/code&gt;なりを実行した上で修正・実行するのが簡単でしょう。&lt;/p&gt;
&lt;p&gt;結果、下記のようなエラーメッセージとなるでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このエラーでは「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」までしか教えてくれず、わかりづらいですよね。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;shouldBe&lt;/code&gt;を使用して以下のように書き換えると…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージはこう👇なります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0
       expected: 1
        but got: 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」に加えて、&lt;code&gt;shouldBe&lt;/code&gt;に与えた両辺の式がどのような値を返したか、まで教えてくれました！&lt;br /&gt;
今回の例は極めて単純なのであまり役に立たないかも知れませんが、あなたが書いた関数をテストするときはやっぱり「期待される結果」と「実際の結果」両方がわかる方がデバッグしやすいですよね！&lt;/p&gt;
&lt;p&gt;と、いうわけで今後は&lt;code&gt;property&lt;/code&gt;関数&lt;small&gt;（あるいはその省略版の&lt;code&gt;prop&lt;/code&gt;関数）&lt;/small&gt;に渡した関数の中でも&lt;code&gt;shouldBe&lt;/code&gt;などを必ず使ってください！&lt;br /&gt;
&lt;small&gt;（せっかくなんで、今回紹介したドキュメントを&lt;a href=&#34;https://github.com/hspec/hspec/pull/429&#34;&gt;修正するための&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;&lt;/a&gt;を送っておきました。これがマージされればこの記事の情報の大半は時代遅れになります）&lt;/small&gt;&lt;/p&gt;
&lt;h1 id=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;😕なぜ使える？&lt;/h1&gt;
&lt;p&gt;しかしここで、一つ疑問が残ります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のドキュメントをつぶさに読んだことがある方はお気づきでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck-2.13.2/docs/Test-QuickCheck.html#t:Testable&#34;&gt;&lt;code&gt;property&lt;/code&gt;関数は、&lt;code&gt;Testable&lt;/code&gt;という型クラスのメソッド&lt;/a&gt;であるため、&lt;code&gt;Testable&lt;/code&gt;のインスタンスでなければ使えないはずです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;の&lt;code&gt;shouldBe&lt;/code&gt;などが返す値は型シノニムのたらい回しをたどればわかるとおり、結局のところ&lt;code&gt;IO ()&lt;/code&gt;型の値です。&lt;br /&gt;
ところが&lt;code&gt;Testable&lt;/code&gt;のインスタンス一覧を見る限り、&lt;code&gt;IO a&lt;/code&gt;は&lt;code&gt;Testable&lt;/code&gt;のインスタンスではありません。&lt;br /&gt;
先ほどの例のように&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いた場合における、関数型&lt;code&gt;(a -&amp;gt; prop)&lt;/code&gt;のインスタンスは、&lt;code&gt;(Arbitrary a, Show a, Testable prop) =&amp;gt; Testable (a -&amp;gt; prop)&lt;/code&gt;という定義のとおり、関数の戻り値の型が&lt;code&gt;Testable&lt;/code&gt;のインスタンスでないと、型チェックを通らないはずです。&lt;br /&gt;
&lt;code&gt;Testable&lt;/code&gt;のインスタンスでない、&lt;code&gt;IO ()&lt;/code&gt;を返しているにも関わらず型エラーが起きなかったのは、一体なぜでしょうか？&lt;/p&gt;
&lt;p&gt;その秘密を探るべく、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を立ち上げましょう。&lt;br /&gt;
先ほどの例のソースコードを&lt;code&gt;ghci&lt;/code&gt;コマンドに読ませれば、まとめて&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のモジュールも&lt;code&gt;import&lt;/code&gt;できるので簡単です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci .\QuickCheck.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動したら、&lt;code&gt;:i Testable&lt;/code&gt;と入力して、&lt;code&gt;Testable&lt;/code&gt;型クラスのインスタンス一覧を出力しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;i &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  property ::&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;{-# MINIMAL property #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;        &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Discard&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] (&lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit.Lang.Assertion&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ありました！💡 最後の方にある&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行に注目してください。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;は、&lt;code&gt;IO ()&lt;/code&gt;の型シノニムであり、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でも間接的に型シノニムとして参照されています&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
要するに&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行は&lt;code&gt;instance [safe] Testable (IO ())&lt;/code&gt;と読み替えることができます&lt;small&gt;（&lt;code&gt;[safe]&lt;/code&gt;という表記が指しているものについてはここでは省略します！すみません！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;紹介したとおり&lt;code&gt;Testable&lt;/code&gt;のドキュメントには&lt;code&gt;Testable Assertion&lt;/code&gt;なんて記載はありませんし、じゃあ一体どこで定義したのか、というとそう、続く行に&lt;code&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/code&gt;と書かれているとおり、&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-io-0.2.0/docs/Test-QuickCheck-IO.html&#34;&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;&lt;/a&gt;というモジュールで定義されています！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;は、名前のとおり&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;code&gt;Testable&lt;/code&gt;について、&lt;code&gt;IO&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;を定義するためのモジュールです。&lt;br /&gt;
これを&lt;a href=&#34;https://github.com/hspec/hspec/blob/226510631f24b674827e99d17d10f9f92440c5a9/hspec-core/src/Test/Hspec/Core/QuickCheckUtil.hs#L18&#34;&gt;&lt;code&gt;import&lt;/code&gt;している&lt;/a&gt;が故に、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;では&lt;code&gt;property&lt;/code&gt;ブロックの中で&lt;code&gt;shouldBe&lt;/code&gt;などが利用できるんですね！&lt;/p&gt;
&lt;p&gt;結論&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;わかりづらい😥&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;:i&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;であろうとインスタンスを定義した箇所を見つけてくれるから便利！&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この節の冒頭で「型シノニムのたらい回し」と呼んだものを追いかけてみましょう。&lt;br /&gt;
おなじみ&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#v:shouldBe&#34;&gt;&lt;code&gt;shouldBe&lt;/code&gt;&lt;/a&gt;は&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#t:Expectation&#34;&gt;&lt;code&gt;Expectation&lt;/code&gt;&lt;/a&gt;という型の値を返します。&lt;br /&gt;
そして&lt;code&gt;Expectation&lt;/code&gt;は&lt;code&gt;Assertion&lt;/code&gt;の型シノニムであり、クリックすると&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;であることがわかります。&lt;br /&gt;
そして&lt;code&gt;Assertion&lt;/code&gt;はそう、&lt;code&gt;type Assertion = IO ()&lt;/code&gt;とあるとおり&lt;code&gt;IO ()&lt;/code&gt;なのです。やっと知ってる型にたどり着きました😌。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/io-monad-and-sideeffect.html&#34; lang=&#34;ja&#34;&gt;IO モナドと副作用&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/revenge-of-hourly-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;リベンジ・オブ・毎時更新 Haskell Antenna&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html</id><title type="text">Elm + GitHub OAuth 2.0 (Firebase) のサンプルプログラムを書いてみた</title><updated>2020-02-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とあるアプリケーションに Elm + GitHub OAuth 2.0 を使ってみたいなと思い，その練習用のアプリケーションを作ってみました：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elm-github-oauth2-sample&#34;&gt;matsubara0507/elm-github-oauth2-sample - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルのために認可用のサーバーを用意するのがめんどくさかったので，近年話題の Firebase の Authorization 機能を利用することにしました．&lt;/p&gt;
&lt;h2 id=&#34;作ったアプリケーション&#34;&gt;作ったアプリケーション&lt;/h2&gt;
&lt;p&gt;作成した SPA は &lt;a href=&#34;https://matsubara0507.github.io/elm-github-oauth2-sample&#34;&gt;GitHub Pages&lt;/a&gt; に置いてある． ログインっぽいボタンを押すと Firebase Authorization を介して，GitHub OAuth 2.0 での認可がされる． もちろん，もともと試したかったことはここまでだが，認可しておしまいだと味気がない． なので：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;認可時に GitHub OAuth トークンを取得&lt;/li&gt;
&lt;li&gt;トークンを使ってログインしたユーザーの公開リポジトリの情報を取得&lt;/li&gt;
&lt;li&gt;リポジトリのスター数を使ってユーザーのステータスをリッチに描写する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;色々試して最終的にこんな感じ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/page.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;ちょっとやりすぎた．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;やったことは3ステップ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Elm と Firebase を繋ぐ&lt;/li&gt;
&lt;li&gt;リポジトリを取得（GraphQL）&lt;/li&gt;
&lt;li&gt;円グラフを描写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2と3は完全におまけですね．&lt;/p&gt;
&lt;h3 id=&#34;elm-と-firebase&#34;&gt;Elm と Firebase&lt;/h3&gt;
&lt;p&gt;まずは Firebase を準備する． &lt;a href=&#34;https://firebase.google.com/docs/auth/web/github-auth?hl=ja&#34;&gt;公式サイトの手順&lt;/a&gt;がしっかりしてるので，それに習って準備する（GitHub App の設定とか）． プロバイダ（今回は GitHub）の設定と JavaScript のアプリの設定をすると「コレをコピペしてね」っていう設定とかが出てくる． コレを index.html と index.js に書いておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;&amp;lt;!doctype &lt;/span&gt;html&lt;span class=&#34;dt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; http-equiv=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; charset=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; rel=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; href=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://unpkg.com/@primer/css@14.2.0/dist/primer.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; id=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;elm-node&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- firebase-app と firebase-auth が必要 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-app.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-auth.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/main.js は Elm からあとで生成する --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/main.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/index.js は下記 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/index.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// コレらの設定は公開してもいいらしいけど&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; firebaseConfig &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;apiKey&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;authDomain&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;databaseURL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;storageBucket&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;messagingSenderId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;}&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;initializeApp&lt;/span&gt;(firebaseConfig)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; provider &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;GithubAuthProvider&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは Elm から Firebase のメソッドを呼び出す． 基本的にコレを参考にした：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ababup1192/items/f27f9af282d9fa642eb5&#34;&gt;Elm portsでFirebase Firestoreを触ろう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm 用の Firebase パッケージ的なのはないので，Elm のポート機能を使って繋ぎ込む：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Elm&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;// popup の方はモバイル系でうまく動作しなかったのでこっちを使う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signInWithRedirect&lt;/span&gt;(provider)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;getSignInResult&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getRedirectResult&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(result) {&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (result&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;credential&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;      app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signedIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(result)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(error) {&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;    app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;failSignIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(error)&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;繋ぎ込みはできた． サクッとトークンだけもらって，GitHub API v3 からユーザー名を取得する部分を実装する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;credential&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;accessToken&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;decodeValue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは適当に &lt;code&gt;Main&lt;/code&gt; から呼び出すだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;application&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlRequest&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlChange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;UrlRequest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-35&#34;&gt;&lt;a href=&#34;#cb7-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- URL 系は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-36&#34;&gt;&lt;a href=&#34;#cb7-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-37&#34;&gt;&lt;a href=&#34;#cb7-37&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-38&#34;&gt;&lt;a href=&#34;#cb7-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-39&#34;&gt;&lt;a href=&#34;#cb7-39&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-40&#34;&gt;&lt;a href=&#34;#cb7-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-41&#34;&gt;&lt;a href=&#34;#cb7-41&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-42&#34;&gt;&lt;a href=&#34;#cb7-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-43&#34;&gt;&lt;a href=&#34;#cb7-43&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-44&#34;&gt;&lt;a href=&#34;#cb7-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-45&#34;&gt;&lt;a href=&#34;#cb7-45&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch github user error&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-46&#34;&gt;&lt;a href=&#34;#cb7-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-47&#34;&gt;&lt;a href=&#34;#cb7-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Document&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-48&#34;&gt;&lt;a href=&#34;#cb7-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Elm GitHub OAuth 2.0 Sample&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&#34;cb7-49&#34;&gt;&lt;a href=&#34;#cb7-49&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-50&#34;&gt;&lt;a href=&#34;#cb7-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-51&#34;&gt;&lt;a href=&#34;#cb7-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-52&#34;&gt;&lt;a href=&#34;#cb7-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative text-center&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-53&#34;&gt;&lt;a href=&#34;#cb7-53&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-54&#34;&gt;&lt;a href=&#34;#cb7-54&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-55&#34;&gt;&lt;a href=&#34;#cb7-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-56&#34;&gt;&lt;a href=&#34;#cb7-56&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-57&#34;&gt;&lt;a href=&#34;#cb7-57&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-58&#34;&gt;&lt;a href=&#34;#cb7-58&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-59&#34;&gt;&lt;a href=&#34;#cb7-59&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-60&#34;&gt;&lt;a href=&#34;#cb7-60&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-61&#34;&gt;&lt;a href=&#34;#cb7-61&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-62&#34;&gt;&lt;a href=&#34;#cb7-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-63&#34;&gt;&lt;a href=&#34;#cb7-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-64&#34;&gt;&lt;a href=&#34;#cb7-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3 mt-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-65&#34;&gt;&lt;a href=&#34;#cb7-65&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-66&#34;&gt;&lt;a href=&#34;#cb7-66&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;dt&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-67&#34;&gt;&lt;a href=&#34;#cb7-67&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-68&#34;&gt;&lt;a href=&#34;#cb7-68&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb7-69&#34;&gt;&lt;a href=&#34;#cb7-69&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Sign in with GitHub&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-70&#34;&gt;&lt;a href=&#34;#cb7-70&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-71&#34;&gt;&lt;a href=&#34;#cb7-71&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-72&#34;&gt;&lt;a href=&#34;#cb7-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-73&#34;&gt;&lt;a href=&#34;#cb7-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コレを&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make --output=docs/static/main.js src/Main.elm --optimize&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とビルドして &lt;code&gt;elm reactor&lt;/code&gt; で &lt;code&gt;docs/index.html&lt;/code&gt; にアクセスすると、サインインボタンがあってサインインすると &lt;code&gt;Hi matsubara0507!&lt;/code&gt; って感じのメッセージが出るだけの SPA ができた．&lt;/p&gt;
&lt;h3 id=&#34;リポジトリを取得&#34;&gt;リポジトリを取得&lt;/h3&gt;
&lt;p&gt;こっからは完全におまけ． リポジトリのスターをなんかステータスっぽく表示するようにしたい．&lt;/p&gt;
&lt;p&gt;リポジトリ一覧は GitHub の個別ユーザーページをモバイル版でみたときの感じにすることにした：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/mobile.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;必要なリポジトリの情報は名前とリンクと総スター数． GitHub API v3 は無駄な情報が多いので，GraphQL を使って一気に取得してみる． GraphQL のクエリの動作確認は&lt;a href=&#34;https://developer.github.com/v4/explorer/&#34;&gt;ココ&lt;/a&gt;で行える：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/graphql.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最終的に出来上がったクエリはこんな感じ：&lt;/p&gt;
&lt;pre class=&#34;graphql&#34;&gt;&lt;code&gt;query {
  viewer {
    login
    name
    repositories(first: 100, orderBy: {field: STARGAZERS, direction: DESC}, ownerAffiliations: [OWNER], isFork: false) {
      nodes {
        name
        url
        stargazers { totalCount }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クエリの &lt;code&gt;viewer {..}&lt;/code&gt; は渡したトークンのユーザー情報を指す． &lt;code&gt;viewer&lt;/code&gt; 内で &lt;code&gt;login&lt;/code&gt; や &lt;code&gt;name&lt;/code&gt; を指定することで，さっきまで v3 で取得していたユーザー情報も取得できる． &lt;code&gt;repositories&lt;/code&gt; で一気に所得できるリポジトリ数は100件が上限（&lt;code&gt;first:300&lt;/code&gt; は怒られる）． &lt;code&gt;orderBy:{..}&lt;/code&gt; でスターの多い順に並び替えて，&lt;code&gt;ownerAffiliations:[OWNER]&lt;/code&gt; と &lt;code&gt;isFork:false&lt;/code&gt; を指定することで自身のリポジトリだけを返してる． リポジトリのスター数は &lt;code&gt;stargazers { totalCount }&lt;/code&gt; で取得できる．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;あとはクエリを叩くだけ． Elm の GraphQL パッケージに良さげのものがなかったのでそのまま &lt;code&gt;elm/http&lt;/code&gt; を使うことにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;nodes&amp;quot;&lt;/span&gt; ] (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;stargazers&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;totalCount&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- さっきのクエリをヒアドキュメントとかで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-33&#34;&gt;&lt;a href=&#34;#cb10-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;viewer&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-34&#34;&gt;&lt;a href=&#34;#cb10-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-35&#34;&gt;&lt;a href=&#34;#cb10-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;request&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-36&#34;&gt;&lt;a href=&#34;#cb10-36&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-37&#34;&gt;&lt;a href=&#34;#cb10-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;token &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb10-38&#34;&gt;&lt;a href=&#34;#cb10-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://api.github.com/graphql&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-39&#34;&gt;&lt;a href=&#34;#cb10-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;jsonBody&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;object&lt;/span&gt; [ ( &lt;span class=&#34;st&#34;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; ) ])&lt;/span&gt;
&lt;span id=&#34;cb10-40&#34;&gt;&lt;a href=&#34;#cb10-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;expect&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;expectJson&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-41&#34;&gt;&lt;a href=&#34;#cb10-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-42&#34;&gt;&lt;a href=&#34;#cb10-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tracker&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-43&#34;&gt;&lt;a href=&#34;#cb10-43&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インターフェースは全く変えてないので &lt;code&gt;Main&lt;/code&gt; でいじるのは &lt;code&gt;view&lt;/code&gt; だけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;container-sm my-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;h3&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-2&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;s points: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;li&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box-row mb-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-left&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ml-1&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;                        [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-right&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;ul&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;elm-で円グラフ&#34;&gt;Elm で円グラフ&lt;/h3&gt;
&lt;p&gt;なんかこう，リポジトリのプライマリ言語ごとに円グラフにしたら面白いなっていう欲がでてきたのでそうしてみることにした． まずはリポジトリのプライマリ言語を返すようにクエリをいじる：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query {
  viewer {
    ...
    repositories(...) {
      nodes {
        ...
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;データ構造も書き足す：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map4&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;primaryLanguage&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-18&#34;&gt;&lt;a href=&#34;#cb13-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-19&#34;&gt;&lt;a href=&#34;#cb13-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-20&#34;&gt;&lt;a href=&#34;#cb13-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-21&#34;&gt;&lt;a href=&#34;#cb13-21&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-22&#34;&gt;&lt;a href=&#34;#cb13-22&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プライマリ言語の情報は &lt;code&gt;null&lt;/code&gt; が返ってくる可能性があるので、&lt;code&gt;Maybe&lt;/code&gt; でラップしている．&lt;/p&gt;
&lt;p&gt;データは揃ったので，あとは円グラフを描くだけ． 円グラフの描写には &lt;a href=&#34;https://package.elm-lang.org/packages/gampleman/elm-visualization/2.1.1&#34;&gt;&lt;code&gt;gampleman/elm-visualization&lt;/code&gt;&lt;/a&gt; を使うことにする． example 集にある「&lt;a href=&#34;https://elm-visualization.netlify.com/custompiechart&#34;&gt;Custom Pie Chart&lt;/a&gt;」をベースにすることにした． コピペしてよしなに書き換える：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 言語名&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;   &lt;span class=&#34;co&#34;&gt;-- 総スター数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- GitHub 側で設定されてる言語の色&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;990&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;504&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Svg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;pie&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;                    { &lt;span class=&#34;fu&#34;&gt;defaultPieConfig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-37&#34;&gt;&lt;a href=&#34;#cb14-37&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-38&#34;&gt;&lt;a href=&#34;#cb14-38&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sortingFn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-39&#34;&gt;&lt;a href=&#34;#cb14-39&#34;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&#34;cb14-40&#34;&gt;&lt;a href=&#34;#cb14-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-41&#34;&gt;&lt;a href=&#34;#cb14-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-42&#34;&gt;&lt;a href=&#34;#cb14-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;arc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;) [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fill&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Paint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-43&#34;&gt;&lt;a href=&#34;#cb14-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-44&#34;&gt;&lt;a href=&#34;#cb14-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-45&#34;&gt;&lt;a href=&#34;#cb14-45&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-46&#34;&gt;&lt;a href=&#34;#cb14-46&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-47&#34;&gt;&lt;a href=&#34;#cb14-47&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;centroid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-48&#34;&gt;&lt;a href=&#34;#cb14-48&#34;&gt;&lt;/a&gt;                        { &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-49&#34;&gt;&lt;a href=&#34;#cb14-49&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-50&#34;&gt;&lt;a href=&#34;#cb14-50&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-51&#34;&gt;&lt;a href=&#34;#cb14-51&#34;&gt;&lt;/a&gt;                        }&lt;/span&gt;
&lt;span id=&#34;cb14-52&#34;&gt;&lt;a href=&#34;#cb14-52&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-53&#34;&gt;&lt;a href=&#34;#cb14-53&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;text_&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-54&#34;&gt;&lt;a href=&#34;#cb14-54&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-55&#34;&gt;&lt;a href=&#34;#cb14-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;dy&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;em&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;35&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-56&#34;&gt;&lt;a href=&#34;#cb14-56&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;textAnchor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AnchorMiddle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-57&#34;&gt;&lt;a href=&#34;#cb14-57&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb14-58&#34;&gt;&lt;a href=&#34;#cb14-58&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-59&#34;&gt;&lt;a href=&#34;#cb14-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-60&#34;&gt;&lt;a href=&#34;#cb14-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;svg&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-61&#34;&gt;&lt;a href=&#34;#cb14-61&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb14-62&#34;&gt;&lt;a href=&#34;#cb14-62&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-63&#34;&gt;&lt;a href=&#34;#cb14-63&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-64&#34;&gt;&lt;a href=&#34;#cb14-64&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb14-65&#34;&gt;&lt;a href=&#34;#cb14-65&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主に書き換えたのは色の部分． example では &lt;code&gt;colors&lt;/code&gt; 的な色リストを利用してたが，リポジトリのプログラミング言語には GitHub 側で色が設定してあるので，それをモデルに持たせて引用することにした． あとは &lt;code&gt;Repository&lt;/code&gt; 型から &lt;code&gt;Data&lt;/code&gt; 型を組み立てる部分を書くだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-10&#34;&gt;&lt;a href=&#34;#cb15-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-11&#34;&gt;&lt;a href=&#34;#cb15-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;hexToColor&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-12&#34;&gt;&lt;a href=&#34;#cb15-12&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-13&#34;&gt;&lt;a href=&#34;#cb15-13&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-14&#34;&gt;&lt;a href=&#34;#cb15-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-15&#34;&gt;&lt;a href=&#34;#cb15-15&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-16&#34;&gt;&lt;a href=&#34;#cb15-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-17&#34;&gt;&lt;a href=&#34;#cb15-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-18&#34;&gt;&lt;a href=&#34;#cb15-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-19&#34;&gt;&lt;a href=&#34;#cb15-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-20&#34;&gt;&lt;a href=&#34;#cb15-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-21&#34;&gt;&lt;a href=&#34;#cb15-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-22&#34;&gt;&lt;a href=&#34;#cb15-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-23&#34;&gt;&lt;a href=&#34;#cb15-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-24&#34;&gt;&lt;a href=&#34;#cb15-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-25&#34;&gt;&lt;a href=&#34;#cb15-25&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-26&#34;&gt;&lt;a href=&#34;#cb15-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-27&#34;&gt;&lt;a href=&#34;#cb15-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-28&#34;&gt;&lt;a href=&#34;#cb15-28&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb15-29&#34;&gt;&lt;a href=&#34;#cb15-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-30&#34;&gt;&lt;a href=&#34;#cb15-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-31&#34;&gt;&lt;a href=&#34;#cb15-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-32&#34;&gt;&lt;a href=&#34;#cb15-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)) &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-33&#34;&gt;&lt;a href=&#34;#cb15-33&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-34&#34;&gt;&lt;a href=&#34;#cb15-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-35&#34;&gt;&lt;a href=&#34;#cb15-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb15-36&#34;&gt;&lt;a href=&#34;#cb15-36&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-37&#34;&gt;&lt;a href=&#34;#cb15-37&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々考えた結果，いったん各 &lt;code&gt;Repository&lt;/code&gt; を &lt;code&gt;Data&lt;/code&gt; に変換して，そのあと言語名をキーにした &lt;code&gt;Dict&lt;/code&gt; へと畳み込んでいる（&lt;code&gt;.data&lt;/code&gt; の部分だけ足し合わせてる）． あとは &lt;code&gt;Pie.view user&lt;/code&gt; を &lt;code&gt;Main.view&lt;/code&gt; で呼び出すだけ．&lt;/p&gt;
&lt;p&gt;あ、ちなみに真ん中にアバター画像出したしてるのは割愛（ただ単にアバター画像を GraphQL で取ってきて，&lt;code&gt;Pie.view&lt;/code&gt; で重ねてるだけ）．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Firebase 便利ですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell</id><title type="text">GHC 環境構築 概観 と PowerShell</title><updated>2020-01-27T09:06:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell"/><summary type="html">Haskell の開発環境を構築する方法は何通りかあり、新しいツールが出ると「今はこれだ」とほめるブログも公開されますがそれが初学者を混乱させることがよくあります。 本記事ではビルドツールのインストールにしぼり、開発支援、例えば ghc-mod・haskell-ide-engine・hhp には言及しません。 いくつか典型的な構築方法を確認した後、新たに私が作成したツールを紹介しより初学者を混乱に落とし入れます。 重鎮 Haskell Platform www.haskell.org Haskell 解説書史1の第1波から第3波までのデファクトスタンダードであった重鎮 Haskell Plat…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/revenge-of-hourly-antenna.html</id><title type="text">リベンジ・オブ・毎時更新 Haskell Antenna</title><updated>2020-01-19T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/revenge-of-hourly-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/hourly-antenna.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年の今頃、これを自動毎時更新しようと &lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;による毎時更新を設定しました&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;しかし。。。なんと去年の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;月ぐらいからこれが止まっています（どうやら、&lt;a href=&#34;https://discourse.drone.io/t/cron-on-cloud-drone-io/3899/2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;のこの機能を利用してマイニングをした人がいたらしく止めてしまった&lt;/a&gt;ようです）。 現在は&lt;strong&gt;僕がだいたい毎朝&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回、手動で&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;を回しています&lt;/strong&gt;。。。&lt;/p&gt;
&lt;p&gt;ずっとなんとかしなきゃなぁと思い続けてはや&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;ヶ月。 やっと重い腰をあげてなんとかしました！ というよりは、なんとかする方法を思い付いたので実装してみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#どうするか&#34; title=&#34;どうするか&#34;&gt;どうするか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実装する&#34; title=&#34;実装する&#34;&gt;実装する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#オプションの整理&#34; title=&#34;オプションの整理&#34;&gt;オプションの整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-コマンドを呼ぶ&#34; title=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt; コマンドを呼ぶ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#毎時実行&#34; title=&#34;毎時実行&#34;&gt;毎時実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#インスタンスで起動する&#34; title=&#34;インスタンスで起動する&#34;&gt;インスタンスで起動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;どうするか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうするか&#34; title=&#34;どうするか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうするか？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/free/docs/gcp-free-tier?hl=ja#always-free&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GCP&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;always free&lt;/span&gt;プランというのがあり&lt;/a&gt;、&lt;span class=&#34;ascii&#34;&gt;GCE&lt;/span&gt;インスタンスの場合は&lt;span class=&#34;ascii&#34;&gt;f1-micro&lt;/span&gt;であれば一台だけ無料です（&lt;span class=&#34;ascii&#34;&gt;2020/1&lt;/span&gt;現在）。 これに、毎時実行して更新をプッシュする&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを仕込んでおけば良いではないかということに気づきました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;自体は&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;であり、&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;などは&lt;a href=&#34;https://github.com/haskell-jp/antenna&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-jp/antenna&lt;/span&gt;&lt;/a&gt;という &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;アプリケーションで生成しています。 これを&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;か何かで毎時実行すればいいんですけど&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;の組み合わせが割とめんどくさい（&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Docker Image&lt;/span&gt;として提供している）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;にした場合更新を&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;にどうやってプッシュしようかなどを考えるのがめんどくさい&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という問題があります。&lt;/p&gt;
&lt;p&gt;そこで、&lt;span class=&#34;ascii&#34;&gt;(2)&lt;/span&gt; のプッシュの部分も含めて毎時実行の処理を&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;アプリケーションに閉じ込めてしまえば、&lt;code&gt;docker run&lt;/code&gt; しておくだけで良いのではないか？というのを思い付きました！ ということで、そういう風に&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;を改良します。&lt;/p&gt;
&lt;h1 id=&#34;実装する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実装する&#34; title=&#34;実装する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実装する&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムに「&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドを使って&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリに更新をプッシュする機能」と「全てを毎時実行する機能」の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つを組み込む必要があります。 ここで後方互換性を維持するために、これらはオプションでオンする機能にしましょう。 なのでまずは、&lt;span class=&#34;ascii&#34;&gt;antenna CLI&lt;/span&gt;アプリケーションのオプションを整理するところから始めます。&lt;/p&gt;
&lt;h2 id=&#34;オプションの整理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#オプションの整理&#34; title=&#34;オプションの整理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;オプションの整理&lt;/h2&gt;
&lt;p&gt;改修前の&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;はオプションを持っていません。 &lt;code&gt;getArgs&lt;/code&gt; で引数（設定ファイルのパス）を受け取るだけです&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- generate 関数が設定から HTML ファイル群を生成する IO アクション&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (listToMaybe &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getArgs) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;please input config file path.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; generate path &lt;span class=&#34;op&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; readConfig path&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.7/docs/Data-Extensible-GetOpt.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt; の &lt;code&gt;GetOpt&lt;/code&gt;&lt;/a&gt; を使ってオプションを貰えるように拡張します&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- withGetOpt&amp;#39; は usage を独自で扱えるように拡張した Data.Extensible.withGetOpt です&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; withGetOpt&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;[options] [input-file]&amp;quot;&lt;/span&gt; opts &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r args usage &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (fromString usage)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (Version.build version)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; listToMaybe args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    opts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help    &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; helpOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; versionOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; verboseOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;verbose&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;helpOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;helpOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [&lt;span class=&#34;ch&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;] [&lt;span class=&#34;st&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Show this help text&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;versionOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;versionOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [] [&lt;span class=&#34;st&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Show version&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;verboseOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;verboseOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [&lt;span class=&#34;ch&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;] [&lt;span class=&#34;st&#34;&gt;&amp;quot;verbose&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable verbose mode: verbosity level \&amp;quot;debug\&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;差分全体はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/20&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;で確認することができます。 興味のある人はみてみてください。 &lt;code&gt;generate&lt;/code&gt; 関数は以下の &lt;code&gt;runCmd&lt;/code&gt; 関数から呼ばれています&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;runCmd _ &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;please input config file path.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;runCmd&lt;/code&gt; 関数は&lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;&lt;/a&gt;を使って &lt;code&gt;RIO env ()&lt;/code&gt; のボイラーテンプレートを減らしています。&lt;/p&gt;
&lt;h2 id=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#git-コマンドを呼ぶ&#34; title=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt; コマンドを呼ぶ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーションから&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドを実行するには&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;&lt;/a&gt;を使うことにします。 &lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;shell&lt;/span&gt;プラグインを使うことで簡単に使用することができます。 まずはコミットを作る部分を実装しましょう&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 自作Shelly製gitコマンド関数群&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Shell&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixShell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;work   &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixShell.exec (Git.pull [])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;    generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; commitGeneratedFiles&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;commitGeneratedFiles ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;commitGeneratedFiles &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;  files &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;files &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; asks (gitConfig &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  MixShell.exec &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    Git.add files&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;    changes &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; Git.diffFileNames [&lt;span class=&#34;st&#34;&gt;&amp;quot;--staged&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;    when (&lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; changes) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Git.commit [&lt;span class=&#34;st&#34;&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;, message]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    message &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全ての差分はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/21&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;から確認できます。 &lt;code&gt;runCmd&lt;/code&gt; 関数に追記したのは &lt;code&gt;when (opts ^. #withCommit)&lt;/code&gt; から始まる&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行です（&lt;code&gt;Options&lt;/code&gt; に &lt;code&gt;#withCommit&lt;/code&gt; を追加しています）。 &lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;shell&lt;/span&gt;プラグインを使うことで&lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;のログをだいたいそれっぽく&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;のロガーに流してくれます。&lt;/p&gt;
&lt;p&gt;次に、&lt;code&gt;git push&lt;/code&gt;も実装します&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixShell.exec (Git.pull [])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;    generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; commitGeneratedFiles&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withPush)   &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; pushCommit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pushCommit ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;pushCommit &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  branch &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;branch &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; asks (gitConfig &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  MixShell.exec (Git.push [&lt;span class=&#34;st&#34;&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;, branch])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前から使っている &lt;code&gt;gitConfig&lt;/code&gt; は設定ファイルから&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドに関する設定を取ってきています（例えば、どのファイルをコミットするかやどのブランチにプッシュするかなど）。&lt;/p&gt;
&lt;p&gt;これで、差分があった場合は&lt;code&gt;git commit&lt;/code&gt;を実行し、最後に&lt;code&gt;git push&lt;/code&gt;するようなオプション、&lt;code&gt;--with-commit&lt;/code&gt;と&lt;code&gt;--with-push&lt;/code&gt;を実装できました（他にも実装していますが割愛）。&lt;/p&gt;
&lt;h2 id=&#34;毎時実行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#毎時実行&#34; title=&#34;毎時実行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;毎時実行&lt;/h2&gt;
&lt;p&gt;メインディッシュである毎時実行です。 &lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で、スケジューリング実行を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション内で行うのにちょうど良いパッケージはありますか？と尋ねたところ&lt;a href=&#34;https://hackage.haskell.org/package/cron&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;&lt;/a&gt;というパッケージを紹介してもらいました（名前がややこしい笑）。 調べてみたところ、ちょうど良さそうなのでこれを使うことにします&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Cron&lt;/span&gt; (addJob, execSchedule)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; withGetOpt&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;[options] [input-file]&amp;quot;&lt;/span&gt; opts &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r args usage &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (fromString usage)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (Version.build version)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;hourly   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r (listToMaybe args) &lt;span class=&#34;ot&#34;&gt;`withCron`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;      &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r (listToMaybe args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;    opts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withCron ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;withCron act t &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execSchedule &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addJob act t&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;  forever &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; threadDelay &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 無限ループ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全ての差分はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/22&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;から確認できます。 すっごい簡単ですね。 ついでに、毎日実行と毎分実行するオプションも追加しています。&lt;/p&gt;
&lt;p&gt;これでアプリケーションの方は出来上がったので、こいつを&lt;span class=&#34;ascii&#34;&gt;GCE&lt;/span&gt;インスタンスで動作させてみましょう。&lt;/p&gt;
&lt;h1 id=&#34;インスタンスで起動する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#インスタンスで起動する&#34; title=&#34;インスタンスで起動する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;インスタンスで起動する&lt;/h1&gt;
&lt;p&gt;まずは&lt;span class=&#34;ascii&#34;&gt;GCP Console&lt;/span&gt;からインスタンス作成します。 構成は次の通りです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;f1-micro&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;オレゴンリージョン&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;30GB&lt;/span&gt;の標準ストレージ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;OS&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Ubuntu 18.04&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GCP Console&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;SSH&lt;/span&gt;して、&lt;span class=&#34;ascii&#34;&gt;docker&lt;/span&gt; コマンドをインストールします（やり方は&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;公式サイト&lt;/a&gt;のをそのまま）。 ここまでできたら試しに &lt;code&gt;sudo docker pull haskelljp/antenna&lt;/code&gt; して最新のイメージを取得してみましょう。&lt;/p&gt;
&lt;p&gt;次に、&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;にプッシュするために&lt;span class=&#34;ascii&#34;&gt;SSH Key&lt;/span&gt;を生成してデプロイキーを &lt;span class=&#34;ascii&#34;&gt;haskell-jp/antenna&lt;/span&gt; リポジトリに設定します。 できたら適当に &lt;code&gt;git clone git@github.com:haskell-jp/antenna.git&lt;/code&gt; してブランチを &lt;code&gt;gh-pages&lt;/code&gt; に切り替えます。&lt;/p&gt;
&lt;p&gt;あとは次のコマンドで&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを実行するだけです&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -d \
  -v `pwd`:/work
  -v `echo $HOME`/.ssh:/root/.ssh \
  haskelljp/antenna antenna --verbose --with-commit --with-push --with-copy --hourly sites.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker logs&lt;/code&gt; を使って様子をみてましたが、うまくいってるようです！&lt;/p&gt;
&lt;h1 id=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後やりたいこと&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;igrep&lt;/span&gt;氏が&lt;a href=&#34;https://github.com/haskell-jp/antenna/issues/16&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;にしてくれてるように、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の正しい差分を&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;に通知する仕組みを整備しようと考えてます。&lt;/p&gt;
&lt;p&gt;実はコミットを&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション内で組み立てるようになった結果、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション側でいい感じに差分を調べ上げ、その結果をコミットメッセージに組み込むことができるようになりました。 さすがに&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;やフィードの &lt;code&gt;git diff&lt;/code&gt; を解析するのは大変なので、いい感じに各サイトの最終更新ログを残すようにしてみようかなって考えてます。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/property-io.html&#34; lang=&#34;ja&#34;&gt;HspecでQuickCheckするときもshouldBeなどが使えます&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/regex-applicative.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;regex-applicative: 内部DSLとしての正規表現（ブログ記事版）&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id><title type="text">Haskell で SSH Public Key の FingerPrint を計算する</title><updated>2020-01-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;GitHub に登録している Public Key から &lt;code&gt;~/.ssh/authorized_key&lt;/code&gt; を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために &lt;code&gt;https://github.com/settings/keys&lt;/code&gt; で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．&lt;/p&gt;
&lt;p&gt;もちろん，&lt;code&gt;ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub&lt;/code&gt; なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．&lt;/p&gt;
&lt;h2 id=&#34;fingerprint&#34;&gt;FingerPrint&lt;/h2&gt;
&lt;p&gt;そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6&#34;&gt;RSA公開鍵のファイル形式とfingerprint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた &lt;a href=&#34;https://www.ietf.org/rfc/rfc4253.txt&#34;&gt;RFC4253&lt;/a&gt; の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．&lt;/p&gt;
&lt;p&gt;単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で計算する&#34;&gt;Haskell で計算する&lt;/h2&gt;
&lt;p&gt;上述の通りやることは2つ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Base64 デコード&lt;/li&gt;
&lt;li&gt;MD5 ハッシュ化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとその前に header と body を切り分ける．&lt;/p&gt;
&lt;p&gt;ちなみに，最終的なコードは &lt;a href=&#34;https://github.com/haskell-jp/playground/pull/1&#34;&gt;haskell-jp/playground&lt;/a&gt; においた．&lt;/p&gt;
&lt;h3 id=&#34;header-と-body-を切り分ける&#34;&gt;header と body を切り分ける&lt;/h3&gt;
&lt;p&gt;RSA の Public Key は &lt;code&gt;ssh-rsa AAAAXXX...&lt;/code&gt; となっている（&lt;code&gt;X&lt;/code&gt; 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 &lt;code&gt;ByteString&lt;/code&gt; を使うことにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pubkeyBody ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;pubkeyBody content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; B.split &lt;span class=&#34;dv&#34;&gt;32&lt;/span&gt; content &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    [header, body] &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; header &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;AAAA&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; body &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; body&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Word8&lt;/code&gt; 型の &lt;code&gt;32&lt;/code&gt; は空白．&lt;/p&gt;
&lt;h3 id=&#34;base64-デコード&#34;&gt;Base64 デコード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/memory&#34;&gt;memory&lt;/a&gt; というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ &lt;a href=&#34;http://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite&lt;/a&gt; というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これが memory パッケージのモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt;), convertFromBase)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;decode ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;decode body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; convertFromBase &lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt; body &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; bin &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; prefix &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; bin &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; bin&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    prefix &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\NUL\NUL\NUL\assh-rsa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;md5-ハッシュ化&#34;&gt;MD5 ハッシュ化&lt;/h3&gt;
&lt;p&gt;上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては &lt;a href=&#34;https://www.fpcomplete.com/blog/2017/09/cryptographic-hashing-haskell/&#34;&gt;Cryptographic Hashing in Haskell - FPComplete&lt;/a&gt; で紹介されてる(&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html&#34;&gt;邦訳記事&lt;/a&gt;)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(&lt;a href=&#34;https://github.com/haskell-crypto&#34;&gt;Haskell Crypto&lt;/a&gt;)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．&lt;/p&gt;
&lt;p&gt;このパッケージで何らかのハッシュ関数を利用するには &lt;code&gt;Crypto.Hash.hash&lt;/code&gt; 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は &lt;code&gt;Digest MD5&lt;/code&gt; 型とすれば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fingerprint ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;fingerprint content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  body &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pubkeyBody content&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  bin  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decode body&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Crypto.hash bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;p&gt;GHCi で適当に:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.SSH.PubKey&lt;/span&gt;      &lt;span class=&#34;co&#34;&gt;-- 今まで定義してた関数のモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fingerprint &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa AAAA...&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 適当に public key の中身を貼り付ける&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3b17672020e4e8ad25516034facc12d&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub では8ビットごとに &lt;code&gt;:&lt;/code&gt; で区切られてるが，まぁそれはいいでしょ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/01/01/083723</id><title type="text">2019 年のスライド一挙公開、あるいは 2020 年の方針</title><updated>2020-01-01T08:54:55+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/01/01/083723"/><summary type="html">あけましておめでとうございます。2019 年は大変お世話になりました。2020 年も張り切っていきましょう。 さて、2019 年には結構な回数の外部発表を行いました。これらの発表内容のうち一部は単独のブログ記事としてまとめてありますが、機を逸してしまって記事化されていないものも相当数あります。そこで本記事では、2019 年中に行った発表を一覧としてまとめてみました。 2019 年の活動実績 2019 年の登壇は全部で 19 件でした。うち（先着や抽選ではなく）CFP に応募して採択されたものは 4 件です。 チェシャ猫が普段活動している領域は、Twitter の Bio にも書いてある通り、大…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/regex-applicative.html</id><title type="text">regex-applicative: 内部DSLとしての正規表現（ブログ記事版）</title><updated>2019-12-30T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/regex-applicative.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、といっても&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日のことなんでもう&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;ヶ月以上も経ってしまいましたが、私は&lt;a href=&#34;https://opt.connpass.com/event/140566/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Regex Festa&lt;/span&gt;&lt;/a&gt;というイベントで、「&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;&lt;/a&gt;」というパッケージの紹介を致しました。&lt;br /&gt;
今回は&lt;a href=&#34;https://the.igreque.info/slides/2019-10-18-regex-applicative.html&#34;&gt;その際使用したスライド&lt;/a&gt;を、ブログ記事として詳しく共有させていただきたいと思います！&lt;br /&gt;
発表時のスライドと比べて、より&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知っている人向けになってしまいますが、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の魅力を明確に伝えるために必要なのでご了承ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルを前提知識とします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめにまとめ&#34; title=&#34;はじめにまとめ&#34;&gt;はじめにまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeって&#34; title=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;って？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのapi概要&#34; title=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの使用例&#34; title=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の使用例&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ただの文字-sym-eq-s-s---re-s-s&#34; title=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;ただの文字&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#空文字ε-pure-a---re-s-a&#34; title=&#34;空文字ε-pure-a---re-s-a&#34;&gt;空文字（ε）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; RE s a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34; title=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;連接&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(*&amp;gt;) :: RE s a -&amp;gt; RE s b -&amp;gt; RE s b&lt;/code&gt;・&lt;code&gt;string :: Eq a =&amp;gt; [a] -&amp;gt; RE a [a]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#選択-re-s-a---re-s-a---re-s-a&#34; title=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;選択&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;lt;|&amp;gt;) :: RE s a -&amp;gt; RE s a -&amp;gt; RE s a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34; title=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;繰り返し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;many :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;・&lt;code&gt;some :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34; title=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;オプショナルなマッチ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;optional :: RE s a -&amp;gt; RE s (Maybe a)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#マッチした結果をhaskellの値に割り当て&#34; title=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;マッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当て&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#組み込みの正規表現を使う&#34; title=&#34;組み込みの正規表現を使う&#34;&gt;組み込みの正規表現を使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34; title=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;code&gt;(&amp;lt;$&amp;gt;) :: (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の（一引数の）関数を適用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34; title=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;code&gt;(&amp;lt;*&amp;gt;) :: RE s (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の関数を適用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#もうちょっと複雑な例&#34; title=&#34;もうちょっと複雑な例&#34;&gt;もうちょっと複雑な例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのメリット&#34; title=&#34;regex-applicativeのメリット&#34;&gt;👍&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のメリット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのデメリット&#34; title=&#34;regex-applicativeのデメリット&#34;&gt;👎&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のデメリット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの仕組み&#34; title=&#34;regex-applicativeの仕組み&#34;&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の仕組み&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#正規表現エンジンの分類&#34; title=&#34;正規表現エンジンの分類&#34;&gt;📑正規表現エンジンの分類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの実際の実装&#34; title=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実際の実装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#類似のライブラリーとの比較を軽く&#34; title=&#34;類似のライブラリーとの比較を軽く&#34;&gt;類似のライブラリーとの比較を軽く&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#各種パーサーコンビネーター&#34; title=&#34;各種パーサーコンビネーター&#34;&gt;各種パーサーコンビネーター&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#番外編-replace-attoparsecreplace-megaparsec&#34; title=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: replace-attoparsec&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verbalexpressions&#34; title=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VerbalExpressions&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめにまとめ&#34; title=&#34;はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめにまとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の式で正規表現を書ける内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーターっぽく使えて、かつ正規表現の良さ — 中間マッチが簡単にできる点など — を持ち合わせている&lt;/li&gt;
&lt;li&gt;内部は「文字を受け取って続きの状態のリストを返す関数」として表現された&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;で実装されている&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeって&#34; title=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;って？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;&lt;/a&gt;は、正規表現を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として表現したライブラリーです。&lt;br /&gt;
名前のとおり、いわゆる「&lt;code&gt;Applicative&lt;/code&gt;スタイル」で正規表現を書くことができます。&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのapi概要&#34; title=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;概要&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;には、正規表現オブジェクト&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative.html#t:RE&#34;&gt;&lt;code&gt;RE&lt;/code&gt;型&lt;/a&gt;の値とマッチさせる文字列を受け取って、その結果を返す関数がいくつかあります。&lt;br /&gt;
今回はそのうち最も単純な&lt;code&gt;match&lt;/code&gt;関数を使用します。👇のような型定義となっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;match ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RE&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [s] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義のとおり、&lt;code&gt;RE&lt;/code&gt;型は型引数としてマッチさせる文字の型&lt;code&gt;s&lt;/code&gt;と、マッチした結果にも使われる「正規表現の結果」を表す型&lt;code&gt;a&lt;/code&gt;を受け取ります。&lt;br /&gt;
&lt;code&gt;RE&lt;/code&gt;型を&lt;code&gt;Applicative&lt;/code&gt;のインスタンスにするためには、その結果を表す型が必須なのです。この後出す例でこの「正規表現の結果」を好きな値に変える方法を示しましょう。&lt;/p&gt;
&lt;p&gt;そして第&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;引数がマッチさせる文字列に当たります。&lt;code&gt;[s]&lt;/code&gt;と&lt;code&gt;RE&lt;/code&gt;型の第&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;型引数&lt;code&gt;s&lt;/code&gt;のリストになっているとおり、&lt;code&gt;match&lt;/code&gt;関数&lt;small&gt;（と、その他の&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;において文字列をマッチさせる&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;）&lt;/small&gt;は任意のリストに対して使用することができます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の標準の文字列&lt;code&gt;String&lt;/code&gt;の実態は&lt;code&gt;[Char]&lt;/code&gt;、すなわち&lt;code&gt;Char&lt;/code&gt;のリストなので、通常&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;を使用する場合&lt;code&gt;s&lt;/code&gt;には&lt;code&gt;Char&lt;/code&gt;が割り当てられます。&lt;br /&gt;
型変数なので、当然他の型のリストに対しても使用できます。これは他の正規表現ライブラリーではあまりない特性でしょう。&lt;/p&gt;
&lt;p&gt;戻り値はおなじみの&lt;code&gt;Maybe&lt;/code&gt;型です。マッチが成功すれば、引数に渡した正規表現&lt;code&gt;RE s a&lt;/code&gt;型の「結果」、&lt;code&gt;a&lt;/code&gt;型の値を&lt;code&gt;Just&lt;/code&gt;にくるんで返します。そして失敗すればもちろん&lt;code&gt;Nothing&lt;/code&gt;を返します。&lt;/p&gt;
&lt;p&gt;⚠️&lt;code&gt;match&lt;/code&gt;関数について特筆すべきことをもう一つ。他のよくある正規表現ライブラリーと異なり、&lt;code&gt;match&lt;/code&gt;関数は完全一致じゃないとマッチしないのでご注意ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;には完全一致じゃないといけない関数と完全一致じゃなくてもよい関数両方があるので、少し混乱します😰&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの使用例&#34; title=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の使用例&lt;/h1&gt;
&lt;p&gt;それではいよいよ&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージを使ってみましょう。&lt;br /&gt;
👇のコマンドでインストールして、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build regex-applicative&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;small&gt;（最近の）&lt;/small&gt;&lt;code&gt;cabal&lt;/code&gt;の場合は👇を実行すればできるはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-install --lib regex-applicative&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-repl -b regex-applicative&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動したら、こちらの&lt;code&gt;import&lt;/code&gt;文を張って、本記事のサンプルを実行する準備をしてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative.Common&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ただの文字-sym-eq-s-s---re-s-s&#34; title=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ただの文字&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;ここからは、正規表現の基本的な機能を利用するための&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を紹介します。&lt;br /&gt;
まずはただの文字一つにマッチする&lt;code&gt;sym&lt;/code&gt;から&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;という型定義のとおり、引数として受け取った文字と文字列における文字が等しいかチェックして、等しければマッチした文字をそのまま返す正規表現を作ります。&lt;/p&gt;
&lt;p&gt;また、より一般化したバージョンとして、&lt;code&gt;psym&lt;/code&gt;という関数もあります。&lt;br /&gt;
こちらは&lt;code&gt;psym :: (s -&amp;gt; Bool) -&amp;gt; RE s s&lt;/code&gt;という型定義のとおり、「文字を受け取ってブール値を返す関数」を受け取って、受け取った関数が文字に対して&lt;code&gt;True&lt;/code&gt;を返したらマッチする、という正規表現を作ります。&lt;/p&gt;
&lt;p&gt;なので例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書けば&lt;code&gt;sym&lt;/code&gt;関数と全く同じことができますし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdef&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdef&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書けば、文字クラスっぽいことができます。&lt;/p&gt;
&lt;h2 id=&#34;空文字ε-pure-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#空文字ε-pure-a---re-s-a&#34; title=&#34;空文字ε-pure-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;空文字（ε）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; RE s a&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現に欠かせない、空文字（ε）を表す正規表現も作れます。&lt;br /&gt;
&lt;code&gt;Applicative&lt;/code&gt;型クラスの&lt;code&gt;pure&lt;/code&gt;で表現します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん、&lt;code&gt;pure&lt;/code&gt;は任意の値を受け取って「受け取った値をそのまま返すもの」を作ることができるので、結果として文字（列）以外の値を返す正規表現も、簡単に作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;42&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;42&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34; title=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;連接&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(*&amp;gt;) :: RE s a -&amp;gt; RE s b -&amp;gt; RE s b&lt;/code&gt;・&lt;code&gt;string :: Eq a =&amp;gt; [a] -&amp;gt; RE a [a]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;続いて連接、つまり「二つ以上の正規表現を続けてマッチさせる正規表現を作る」処理です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では、&lt;code&gt;Applicative&lt;/code&gt;型クラスの&lt;code&gt;*&amp;gt;&lt;/code&gt;がそのまま連接として使えるようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然、単なる文字の正規表現を並べることはありふれたことなので、&lt;code&gt;string&lt;/code&gt;関数という文字列を渡すだけのバージョンも用意されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- マッチする文字列は同じ、より分かりやすいバージョン&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の正規表現オブジェクトは&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-String.html#t:IsString&#34;&gt;&lt;code&gt;IsString&lt;/code&gt;&lt;/a&gt;型クラスのインスタンスでもあるので、&lt;code&gt;OverloadedStrings&lt;/code&gt;言語拡張を使えば文字列リテラルだけで正規表現オブジェクトを作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#選択-re-s-a---re-s-a---re-s-a&#34; title=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;選択&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;lt;|&amp;gt;) :: RE s a -&amp;gt; RE s a -&amp;gt; RE s a&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現の「選択」、すなわち「二つの正規表現のうちどちらか一方にマッチする正規表現を作る」処理は、&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Applicative.html#t:Alternative&#34;&gt;&lt;code&gt;Alternative&lt;/code&gt;&lt;/a&gt;型クラスでおなじみの&lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;を使います&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34; title=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;繰り返し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;many :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;・&lt;code&gt;some :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現の「繰り返し」、指定した正規表現を繰り返しマッチさせる正規表現を作る処理は、これまた&lt;code&gt;Alternative&lt;/code&gt;の&lt;code&gt;many&lt;/code&gt;メソッド・&lt;code&gt;some&lt;/code&gt;メソッドによって実装されています。&lt;br /&gt;
&lt;code&gt;Alternative&lt;/code&gt;型クラスのデフォルトの定義どおり、&lt;code&gt;many&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上の繰り返し、&lt;code&gt;some&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回以上の繰り返しを表しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (some (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (some (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34; title=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;オプショナルなマッチ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;optional :: RE s a -&amp;gt; RE s (Maybe a)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;それから、いわゆる「正規表現の基本三演算」には含まれてませんが&lt;small&gt;（選択と&lt;code&gt;pure&lt;/code&gt;で実装できるので）&lt;/small&gt;、この後の例で使用するので「オプショナルなマッチ」を実現する方法を紹介しておきます。&lt;br /&gt;
名前のとおり&lt;code&gt;optional&lt;/code&gt;という関数を使います。これも&lt;code&gt;Alternative&lt;/code&gt;型クラスに対して使える関数ですね！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; optional (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; optional (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#マッチした結果をhaskellの値に割り当て&#34; title=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;マッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当て&lt;/h2&gt;
&lt;p&gt;ここからは、他の正規表現ライブラリーでは珍しい、「正規表現でマッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てる方法」をより詳しく紹介します。&lt;/p&gt;
&lt;h3 id=&#34;組み込みの正規表現を使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#組み込みの正規表現を使う&#34; title=&#34;組み込みの正規表現を使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;組み込みの正規表現を使う&lt;/h3&gt;
&lt;p&gt;例えば、&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative-Common.html#v:digit&#34;&gt;&lt;code&gt;Text.Regex.Applicative.Common&lt;/code&gt;モジュールにある&lt;code&gt;digit&lt;/code&gt;&lt;/a&gt;は、一桁の数字&lt;small&gt;（つまり&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;9&lt;/code&gt;）&lt;/small&gt;にマッチした上で、結果としてマッチした値を&lt;strong&gt;文字ではなく、整数として&lt;/strong&gt;返す正規表現を提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match digit &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加えて、先ほど紹介した&lt;code&gt;many&lt;/code&gt;関数と組み合わせると、マッチした結果を整数のリストとして取得することもできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34; title=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;(&amp;lt;$&amp;gt;) :: (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の（一引数の）関数を適用する&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、名前のとおり正規表現を&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルで利用できるようにするためのライブラリーです。&lt;br /&gt;
当然ながら&lt;code&gt;Applicative&lt;/code&gt;スタイルに必須の&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;関数も使用できます。&lt;br /&gt;
正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;型の返す「マッチした結果」に、あなたの好きな関数を適用して変換した正規表現を作れるのです。&lt;/p&gt;
&lt;p&gt;先ほどの&lt;code&gt;many digit&lt;/code&gt;の例を再利用して、マッチした整数の合計値を求めてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34; title=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;(&amp;lt;*&amp;gt;) :: RE s (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の関数を適用する&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルのもう一つの重要な関数といえば、やっぱり&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;でしょう。&lt;br /&gt;
&lt;code&gt;many digit&lt;/code&gt;を再利用して、「先頭に書かれた桁数だけ数字を取得する」という例を書いてみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; digit &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;312345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;もうちょっと複雑な例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#もうちょっと複雑な例&#34; title=&#34;もうちょっと複雑な例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;もうちょっと複雑な例&lt;/h2&gt;
&lt;p&gt;ここまで紹介した例を使用してもうちょっと複雑な例を書いてみましょう。&lt;br /&gt;
小さな正規表現を組み合わせて、&lt;span class=&#34;ascii&#34;&gt;http&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;https&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;における、オリジンにマッチする正規表現を簡単に書いてみます。&lt;/p&gt;
&lt;p&gt;まずは部品作りです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のスキームにマッチさせるために、「&lt;code&gt;http&lt;/code&gt;の後にオプショナルな&lt;code&gt;s&lt;/code&gt;、続けて&lt;code&gt;://&lt;/code&gt;」という文字列にマッチする正規表現を作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; schemeRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;    ((&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (string &lt;span class=&#34;st&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;://&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;*&lt;/code&gt;を使うことで、&lt;code&gt;://&lt;/code&gt;の部分にはマッチしてもマッチした結果は無視している点にご注意ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;はこのように、「マッチしたら関数に渡す文字列」と「マッチしても関数に渡さない文字列」をユーザーが書き分けられるようになっているので、他の正規表現ライブラリーにあるようなキャプチャー&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;や、先読み言明・後読み言明などの機能が必要ないのです。&lt;/p&gt;
&lt;p&gt;続けて、ホスト名にマッチする正規表現を作ります。&lt;br /&gt;
ここでは単純化して、「アルファベットの小文字かピリオド&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;文字以上」という文字列にしておきます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; hostRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; [&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後はポート番号です。&lt;br /&gt;
&lt;code&gt;:&lt;/code&gt;という文字の後に&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative-Common.html#v:decimal&#34;&gt;&lt;code&gt;Text.Regex.Applicative.Common&lt;/code&gt;に入った&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt;、すなわち一桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数にマッチする正規表現を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; portRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上で正規表現のパーツができました。&lt;br /&gt;
早速使ってみる… 前に、マッチした結果を割り当てるレコード型を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; scheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; host ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; port ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;や&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;を使って組み合わせて、&lt;code&gt;Origin&lt;/code&gt;値コンストラクターに食わせるだけです！&lt;br /&gt;
ポート番号はオリジンにおいてはなくても良いので、省略した場合は仮に&lt;code&gt;80&lt;/code&gt;としておきましょう&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;originRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;           schemeRe &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;           hostRe   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;           (portRe &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;80&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度こそ使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match originRe &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:8080&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {scheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, port &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt;})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match originRe &lt;span class=&#34;st&#34;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {scheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, port &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;80&lt;/span&gt;})&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;を使うことで、&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のオリジンにマッチさせるだけでなく、マッチした結果を&lt;code&gt;Origin&lt;/code&gt;型の値として割り当てる正規表現が作れました！🎉&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeのメリット&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのメリット&#34; title=&#34;regex-applicativeのメリット&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のメリット&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージには、他の正規表現ライブラリーと比べて、以下のメリットがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列以外の扱いにも強い
&lt;ul&gt;
&lt;li&gt;マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てるのが簡単！
&lt;ul&gt;
&lt;li&gt;「生のデータ」からアプリケーションにおける「コアの処理が欲しいデータ」への変換がワンストップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字列だけでなく、任意のリストに対してマッチできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として書けるので、コンパイラーによる型チェックの恩恵を受けやすい
&lt;ul&gt;
&lt;li&gt;前述の「マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てる」処理も、すべて型チェックされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeのデメリット&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのデメリット&#34; title=&#34;regex-applicativeのデメリット&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のデメリット&lt;/h1&gt;
&lt;p&gt;一方&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージには、他の正規表現ライブラリーに対する以下のデメリットがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードは長い
&lt;ul&gt;
&lt;li&gt;内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;なのでやむなし&lt;/li&gt;
&lt;li&gt;専用のメタキャラクターより分かりやすい、とも言える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ユーザーからの入力として、正規表現を受け取ることは難しい
&lt;ul&gt;
&lt;li&gt;これも内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;なのでやむなし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;おそらく&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;とかで書いたものほど速くはない
&lt;ul&gt;
&lt;li&gt;そんなに細かい最適化をしているわけではないし、&lt;span class=&#34;ascii&#34;&gt;Pure Haskell&lt;/span&gt;なので…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;以外の文字列にはマッチできない…
&lt;ul&gt;
&lt;li&gt;これが&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;にとって一番痛い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;や&lt;code&gt;ByteString&lt;/code&gt;向けのものも、原理的に実装できないというわけではないはず&lt;/li&gt;
&lt;li&gt;参考&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;http://bicycle1885.hatenablog.com/entry/2012/12/24/234707&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Tips (&lt;/span&gt;文字列編&lt;span class=&#34;ascii&#34;&gt;) -&lt;/span&gt; りんごがでている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの仕組み&#34; title=&#34;regex-applicativeの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の仕組み&lt;/h1&gt;
&lt;p&gt;ここからは、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における正規表現エンジンがどのように作られているか、『&lt;a href=&#34;https://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;正規表現技術入門&lt;/a&gt;』における正規表現エンジンの分類を参考に説明しましょう。&lt;/p&gt;
&lt;h2 id=&#34;正規表現エンジンの分類&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正規表現エンジンの分類&#34; title=&#34;正規表現エンジンの分類&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;📑正規表現エンジンの分類&lt;/h2&gt;
&lt;p&gt;『正規表現技術入門』の&lt;span class=&#34;ascii&#34;&gt;p.56&lt;/span&gt;では、正規表現エンジンを次の二つに分類しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;型
&lt;ul&gt;
&lt;li&gt;正規表現を決定性有限オートマトン（&lt;span class=&#34;ascii&#34;&gt;deterministic finite automaton&lt;/span&gt;）と呼ばれるものに変換して正規表現マッチングを行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;VM&lt;/span&gt;型
&lt;ul&gt;
&lt;li&gt;正規表現をバイトコード（&lt;span class=&#34;ascii&#34;&gt;bytecode&lt;/span&gt;）と呼ばれるものに変換して正規表現マッチングを行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さて、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の場合はどちらなのでしょうか？&lt;br /&gt;
&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/&#34;&gt;ソースコード&lt;/a&gt;を読んでみると、どうやらどちらでもなさそうなことがわかります。&lt;br /&gt;
というのも、正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;に&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Object.hs#L110-L111&#34;&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/a&gt;という関数で変換した後、&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;に変換しないでそのまま使っているからです。&lt;br /&gt;
一般的に、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;に変換可能で、変換してからマッチさせた方がしばしば高速にマッチできることが知られています。&lt;br /&gt;
ところが&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;ではその変換を行わず、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;として使用しているのです。&lt;/p&gt;
&lt;p&gt;なぜそうした仕様になっているかについて、私の推測を述べましょう&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では先ほど紹介した&lt;code&gt;psym&lt;/code&gt;関数のように、「任意の文字を受け取る関数」を正規表現オブジェクトに含められなければなりません。&lt;br /&gt;
結果、関数がどんな文字の時にどんな値を返すのか&lt;small&gt;（マッチが成功するのかしないのか）&lt;/small&gt;、正規表現オブジェクトをコンパイルする関数にはわからなくなってしまうのです。&lt;br /&gt;
一方、効率の良い&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の実装では、&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の一つ一つの状態ごとに「どの文字を受け取ったら次はどの状態に遷移するか」という情報を、連想配列として持っておかなければなりません&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
そのため、どの文字を受け取ったらマッチが成功するのかわからない箇所が正規表現オブジェクトに混ざっている限り、効率の良い&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の実装にはできないのです。&lt;/p&gt;
&lt;p&gt;その分、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では任意の文字を受け取る関数が使えるので、普通の正規表現ライブラリーよりも柔軟に書くことができるようになっています。&lt;br /&gt;
その点を考慮したトレードオフなんでしょう。&lt;/p&gt;
&lt;h2 id=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの実際の実装&#34; title=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実際の実装&lt;/h2&gt;
&lt;p&gt;さらに&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実装を掘ってみましょう。&lt;br /&gt;
先ほど紹介した&lt;code&gt;compile&lt;/code&gt;関数は、正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;を&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Object.hs#L38-L43&#34;&gt;&lt;code&gt;ReObject s r&lt;/code&gt;&lt;/a&gt;という型の、&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Types.hs#L9-L16&#34;&gt;&lt;code&gt;Thread s r&lt;/code&gt;&lt;/a&gt;型の値のキューに変換します。&lt;br /&gt;
これが&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;と呼べそうですね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReObject&lt;/span&gt; s r &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReObject&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;SQ.StateQueue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Thread s r&lt;/code&gt;型の値は、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;における状態遷移を表します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;        {&lt;span class=&#34;ot&#34;&gt; threadId_ ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ThreadId&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;        ,&lt;span class=&#34;ot&#34;&gt; _threadCont ::&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-5&#34; title=&#34;5&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accept&lt;/span&gt; r&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型定義のとおり、&lt;code&gt;Thread&lt;/code&gt;と&lt;code&gt;Accept&lt;/code&gt;という二通りの値をとります&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⏩&lt;code&gt;Thread&lt;/code&gt;はその用途からして、事実上&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;という関数と同等の型です。&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;code&gt;ReObject&lt;/code&gt;によって文字列&lt;code&gt;[s]&lt;/code&gt;の値をマッチさせる際、この&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;に文字を渡します。
&lt;ul&gt;
&lt;li&gt;➡️そして、関数が結果として返した、&lt;code&gt;Thread s r&lt;/code&gt;型の値を&lt;small&gt;（そのリストから）&lt;/small&gt;一つずつキューに追加して、また次の文字にマッチさせます。&lt;/li&gt;
&lt;li&gt;↩️一方、関数が空リストを返した場合は — そう、マッチが失敗した、ということなのです。その場合は、キューからさらに&lt;code&gt;Thread s r&lt;/code&gt;の値を取り出して&lt;small&gt;（値コンストラクターが&lt;code&gt;Thread&lt;/code&gt;であれば）&lt;/small&gt;マッチしなかった文字をまた&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;に渡します。&lt;/li&gt;
&lt;li&gt;なお、&lt;code&gt;threadId_&lt;/code&gt;はキューに追加する際同じ&lt;code&gt;threadId_&lt;/code&gt;の&lt;code&gt;Thread&lt;/code&gt;を追加してしまうのを防ぐためのキーです。詳細は割愛します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;✅&lt;code&gt;Accept r&lt;/code&gt;は名前のとおり&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;の受理状態を表しています。&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;を繰り返し適用して最終的に&lt;code&gt;Accept r&lt;/code&gt;を返した&lt;code&gt;Thread&lt;/code&gt;のみが「マッチした」と解釈されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;は&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;を返す関数、すなわち「文字を受け取って次の状態のリストを返す継続」として作られています。&lt;/p&gt;
&lt;p&gt;ただ実際に実行する際の流れを見てみると、&lt;code&gt;ReObject&lt;/code&gt;に含まれる&lt;code&gt;Thread&lt;/code&gt;を一つずつ実行してみて、結果が条件に合うものを選ぶ、といった方が近いです。&lt;br /&gt;
例えば&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Interface.hs#L81-L85&#34;&gt;&lt;code&gt;match&lt;/code&gt;関数&lt;/a&gt;では、&lt;code&gt;ReObject&lt;/code&gt;に文字を一文字ずつ与えた結果の中から、&lt;code&gt;listToMaybe&lt;/code&gt;を使って最初に&lt;code&gt;Accept&lt;/code&gt;にたどり着く&lt;code&gt;Thread&lt;/code&gt;を取得しています。&lt;br /&gt;
それから、最長マッチする部分文字列を検索する&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Interface.hs#L141-L149&#34;&gt;&lt;code&gt;findLongestPrefix&lt;/code&gt;関数&lt;/a&gt;は、マッチが失敗するか残りの文字列が空になるまで繰り返し文字を&lt;code&gt;ReObject&lt;/code&gt;に与えることで、できるだけ長いマッチが返るように調整しています。&lt;br /&gt;
このように&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;code&gt;ReObject&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;(NFA)&lt;/span&gt;に文字を一つずつ与えてマッチ結果を生成する処理と、そのマッチ結果を選び取る処理とを分離することで、様々な方針でマッチできるようになっているのです。&lt;/p&gt;
&lt;h1 id=&#34;類似のライブラリーとの比較を軽く&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#類似のライブラリーとの比較を軽く&#34; title=&#34;類似のライブラリーとの比較を軽く&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;類似のライブラリーとの比較を軽く&lt;/h1&gt;
&lt;h2 id=&#34;各種パーサーコンビネーター&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#各種パーサーコンビネーター&#34; title=&#34;各種パーサーコンビネーター&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;各種パーサーコンビネーター&lt;/h2&gt;
&lt;p&gt;さて、ここまでこの文章を読んでいただけた方の中には、「これって&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;とか&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;とかのパーサーコンビネーターライブラリーと何が違うんだ？」という疑問をお持ちの方も多いでしょう。&lt;br /&gt;
そう、大抵の場合、パーサーコンビネーターライブラリーも下記のような特徴を持ち合わせています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として実装されている
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt;や&lt;code&gt;Alternative&lt;/code&gt;型クラスのメソッドを利用した&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てるのが簡単&lt;/li&gt;
&lt;li&gt;「文字&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Char&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;」の列以外にもマッチできる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に「&lt;code&gt;Applicative&lt;/code&gt;や&lt;code&gt;Alternative&lt;/code&gt;型クラスのメソッドを利用した&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;」である点は興味深く、場合によっては、使うライブラリーだけ換えて式をコピペしてもコンパイルは通る、なんてことが普通にあり得るくらい似ています。&lt;br /&gt;
ただし、当然コンパイルが通るだけでは意図通りに動くとは限りません。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;と一般的なパーサーコンビネーターライブラリーには、「&lt;strong&gt;自動的にバックトラックをするかしないか&lt;/strong&gt;」という違いがあるためです。&lt;/p&gt;
&lt;p&gt;例えば、次の式は&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;でも&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;でも有効な式ですが、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;code&gt;match&lt;/code&gt;関数では、「&lt;code&gt;ab&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回以上繰り返される文字列」にマッチして最後の&lt;code&gt;ab&lt;/code&gt;を返すことができるのに、&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;の&lt;code&gt;parse&lt;/code&gt;関数ではパースに失敗してしまいます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack build regex-applicative attoparsec&lt;/code&gt;した上で以下のように書いて試してみましょう。&lt;br /&gt;
まずは&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;で試す場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;abab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ababab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いずれの文字列でも&lt;code&gt;Just &#34;ab&#34;&lt;/code&gt;が返ってきてますね😌。&lt;/p&gt;
&lt;p&gt;続いて&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;で試す場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- attoparsecは`String`をサポートしてないのでOverloadedStringsでTextとして扱う&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Attoparsec.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 文字列の終端であることを明確にするために、空文字列をfeedしておく&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;abab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ababab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いずれの文字列でも失敗になってしまいました。なぜうまくいかないのでしょう？&lt;br /&gt;
それは文字列&lt;code&gt;&#34;ababab&#34;&lt;/code&gt;における&lt;code&gt;ab&lt;/code&gt;を、&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が消費してしまい、&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;が処理できなくなってしまうためです。&lt;br /&gt;
対する&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;code&gt;many (string &#34;ab&#34;) *&amp;gt; string &#34;ab&#34;&lt;/code&gt;では、正規表現全体がマッチするよう、自動でバックトラックしてくれます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;でも最初に&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が&lt;code&gt;&#34;ababab&#34;&lt;/code&gt;全体を消費した直後では、&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;のマッチは当然失敗してしまいます。&lt;br /&gt;
しかし、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;はそれではあきらめません。&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;が成功するまで、失敗する度に&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が消費した文字を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;文字ずつ返却してくれるのです。これがバックトラックです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;に限らず、大抵の正規表現エンジンがこのように自動的なバックトラックを行います。&lt;/p&gt;
&lt;p&gt;こうした性質の違いにより、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;strong&gt;文字列の中間に指定したパターンをマッチさせる&lt;/strong&gt;のが、パーサーコンビネーターライブラリーよりも得意です。&lt;/p&gt;
&lt;p&gt;例えば「文字列の中間にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数」にマッチさせる場合、&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;では次のように書きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative.Common&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (few anySym &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; few anySym) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12345&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;few&lt;/code&gt;は「控えめな繰り返し」を実現するための関数です。引数で指定した正規表現を&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上マッチさせる、という点では&lt;code&gt;many&lt;/code&gt;と同じですが、前後にある正規表現がなるべく長くマッチするよう、優先してマッチさせてくれます。&lt;br /&gt;
&lt;code&gt;few anySym&lt;/code&gt;は普通の正規表現ライブラリーでいうところの&lt;code&gt;.*?&lt;/code&gt;に相当します。&lt;/p&gt;
&lt;p&gt;同じことを&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;で実現するために&lt;code&gt;many anyChar *&amp;gt; decimal &amp;lt;* many anyChar&lt;/code&gt;と書いてみても、やはりうまくいきません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Attoparsec.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many anyChar &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; many anyChar) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理由は先ほどと同様で、最初に書いた&lt;code&gt;many anyChar&lt;/code&gt;がすべての文字列を消費してしまい、それ以降の&lt;code&gt;decimal&lt;/code&gt;などがマッチできないためです。&lt;br /&gt;
正しく処理するには、「&lt;code&gt;decimal&lt;/code&gt;の先頭以外の文字列」、すなわち「数字以外の文字列」が&lt;code&gt;many&lt;/code&gt;であることを明示する方法をとるしかありません&lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; nonDigits &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy (&lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isDigit&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed ((parse (nonDigits &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; nonDigits)) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Done&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12345&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんなわけで、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によくあるパーサーコンビネーターのように&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルで書けて、なおかつ他の正規表現ライブラリーのように中間マッチがしやすい&lt;/strong&gt;という、両方の良さを持ち合わせていると言えます。&lt;/p&gt;
&lt;h3 id=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編-replace-attoparsecreplace-megaparsec&#34; title=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: replace-attoparsec&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;…と、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のよさを語ったところで舌の根も乾かぬうちに恐縮ですが、実は&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;をはじめパーサーコンビネーターライブラリーの「中間マッチがやりにくい」という弱点を改善するためのパッケージがあります。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/replace-attoparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/replace-megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/a&gt;といいます&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
名前のとおり&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;を改善するパッケージで、&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;を改善するパッケージです。&lt;br /&gt;
名前も&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;もお互いそっくりなんで&lt;small&gt;（作者も同じですしね）&lt;/small&gt;、今回は&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;の方を紹介しましょう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;を使えば、次のように書くだけで「文字列の中間にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数」を取り出すことができます。&lt;/p&gt;
&lt;pre class=&#34;hakell&#34;&gt;&lt;code&gt;import Replace.Attoparsec.Text

&amp;gt; feed (parse (sepCap decimal) &amp;quot;abc12345def&amp;quot;) &amp;quot;&amp;quot;
Done &amp;quot;&amp;quot; [Left &amp;quot;abc&amp;quot;,Right 12345,Left &amp;quot;def&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&#34;abc12345def&#34;&lt;/code&gt;の中間にある&lt;code&gt;12345&lt;/code&gt;だけでなく、パースできなかった&lt;code&gt;abc&lt;/code&gt;、&lt;code&gt;def&lt;/code&gt;という文字列もおまけで取得できました！&lt;br /&gt;
&lt;code&gt;decimal&lt;/code&gt;がパースできた箇所が&lt;code&gt;Right&lt;/code&gt;として、パースできなかった箇所が&lt;code&gt;Left&lt;/code&gt;として返却されていることに注意してください。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;の&lt;code&gt;sepCap&lt;/code&gt;&lt;small&gt;（「&lt;span class=&#34;ascii&#34;&gt;Separate and Capture&lt;/span&gt;」の略だそうです）&lt;/small&gt;は、引数として受け取ったパーサーを、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;とりあえず先頭からマッチさせてみて、&lt;/li&gt;
&lt;li&gt;失敗したら先頭の一文字をスキップして、次の文字からまたマッチさせてみる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を繰り返しています。&lt;br /&gt;
結果的にパースできない文字列はすべてスキップして、文字列の中間にある、パースできる文字列のみにパーサーを適用できるのです。&lt;/p&gt;
&lt;h2 id=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#verbalexpressions&#34; title=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;VerbalExpressions&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;そろそろ力尽きてきたのでここからはスライドのコピペで失礼します…🙏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;詳細わかりませんが作りはよく似てる
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VerbalExpressions/JSVerbalExpressions#examples&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の例がこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変な記号の演算子ではなく英語でつけられた関数なので、こちらの方が分かりやすいという人は多そう&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VerbalExpressions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を含むいろんな言語で提供されてるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;さっと&lt;a href=&#34;http://hackage.haskell.org/package/verbalexpressions-1.0.0.0/docs/Text-Regex-VerbalExpressions.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;版のドキュメント&lt;/a&gt;読んだ感じ、文字列のマッチに特化してるっぽい？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;p&gt;以上です！👋&lt;br /&gt;
まとめもスライドからのコピペで！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の式で正規表現を書ける内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーターっぽく使えて、かつ正規表現の良さを持ち合わせている&lt;/li&gt;
&lt;li&gt;内部は「文字を受け取って続きの状態のリストを返す関数」として表現された&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;で実装されている&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;Alternative&lt;/code&gt;は、&lt;code&gt;Applicative&lt;/code&gt;より強力な（できることが多い）型クラスです。そういう意味で、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は本当は「&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;」と呼んだ方が適切なのかも知れません。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;正確には、キャプチャーした文字列を正規表現の中で再利用することができないので、他の正規表現ライブラリーのキャプチャー機能と完全に同等のことができるわけではありません。これは現状の&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の制限です。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;もちろん、実際のところ&lt;span class=&#34;ascii&#34;&gt;https&lt;/span&gt;の場合デフォルトのポート番号は&lt;span class=&#34;ascii&#34;&gt;443&lt;/span&gt;であるべきですが、ちゃんと実装しようとすると結構複雑になるのでご容赦を！&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;この記事の最後の方を書いていて思い出しました。&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;ベースの正規表現エンジンでは不可能な「控えめな繰り返し」をサポートしているから、という理由もあるようです。なぜ&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;ベースでは「控えめな繰り返し」ができないかは私もうまく説明できません…。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;『正規表現技術入門』の&lt;span class=&#34;ascii&#34;&gt;p. 132&lt;/span&gt;における実装例では、これを状態と文字による二次元配列として実装しています。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;並行並列プログラミングで出てくるあの「スレッド」とは違うのでご注意ください。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;ただし、一般に、正規表現ライブラリーであってもこのような書き方をした方が効率よくマッチさせやすいでしょう。&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/substring-parser.html&#34;&gt;こちらの記事&lt;/a&gt;でも触れているとおり、かつて私も同じ目的のパッケージを作成しました。しかし、これらのパッケージの方が明らかにドキュメントが充実していて、機能も豊富なので今回はこれらを紹介します。将来的には&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;deprecated&lt;/span&gt;にするかも知れません。&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/revenge-of-hourly-antenna.html&#34; lang=&#34;ja&#34;&gt;リベンジ・オブ・毎時更新 Haskell Antenna&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/unicode-show.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;日本語をshowしてうまく表示されなかったら&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/unicode-show.html</id><title type="text">日本語をshowしてうまく表示されなかったら</title><updated>2019-12-22T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/unicode-show.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ℹ️この記事は&#34; title=&#34;ℹ️この記事は&#34;&gt;ℹ️この記事は🎄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#日本語などの話者がhaskellを始めるとあるある&#34; title=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;日本語（などの）話者が&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めるとあるある&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-showを使おう&#34; title=&#34;unicode-showを使おう&#34;&gt;🌐&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;を使おう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-showの最近の修正&#34; title=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の最近の修正&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#番外編pretty-simpleも使おう&#34; title=&#34;番外編pretty-simpleも使おう&#34;&gt;（番外編）&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;も使おう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ℹ️この記事は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ℹ️この記事は&#34; title=&#34;ℹ️この記事は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ℹ️この記事は🎄&lt;/h1&gt;
&lt;p&gt;この記事は、&lt;a href=&#34;https://qiita.com/advent-calendar/2019/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2019&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;22&lt;/span&gt;日目の記事です。&lt;br /&gt;
例年どおりタイプセーフプリキュア！の話をするつもりでしたが、ネタが実装できなかったので&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;の話をします&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
まぁ、こちらの方がみなさんにとっては有益でしょうし🙃&lt;/p&gt;
&lt;h1 id=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#日本語などの話者がhaskellを始めるとあるある&#34; title=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;日本語（などの）話者が&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めるとあるある&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に日本語を入力したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12415\12435\12394\12391\24184\12379\12466\12483\12488\12384\12424\65281&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日本語を&lt;code&gt;print&lt;/code&gt;したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\31169\12289\22570\24525\34955\12398\32210\12364\20999\12428\12414\12375\12383\65281&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日本語を&lt;code&gt;show&lt;/code&gt;したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; iimashita x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;今、&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;って言いました！？&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (iimashita &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;今、&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;って言いました！？&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すると、日本語の大半が変な文字列に変わってしまいました😥。&lt;/p&gt;
&lt;p&gt;へ… 変な文字列じゃないし！エスケープシーケンスに変換しただけだから！&lt;/p&gt;
&lt;p&gt;これは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準における&lt;code&gt;show&lt;/code&gt;関数の残念な仕様です。&lt;br /&gt;
&lt;code&gt;show&lt;/code&gt;関数に文字列を渡すと、ダブルクォートで囲った上で、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字列や、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;の非表示文字などをエスケープシーケンスに変換して返します。&lt;br /&gt;
これは、&lt;code&gt;show&lt;/code&gt;関数をデバッグで使用した際、指定した文字列にどんな文字が含まれているか、簡単にわかるようにするための仕様です。&lt;br /&gt;
文字の文字コードを表示すれば、&lt;span class=&#34;ascii&#34;&gt;NULL&lt;/span&gt;文字や制御文字、ゼロ幅文字、特殊なスペースなど、視認しにくいおかしな文字が含まれていても、一目でわかるのです。&lt;/p&gt;
&lt;p&gt;しかしこれは日本語話者である我々にとって、少なくとも日本語の文字に関しては「余計なお世話」です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;NULL&lt;/span&gt;文字や&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;の制御文字といった本来画面に表示することがない文字列ならともかく、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字列すべてをエスケープしてしまうのはやり過ぎでしょう。&lt;br /&gt;
現代は&lt;span class=&#34;ascii&#34;&gt;Unicode&lt;/span&gt;があるおかげで、日本語に限らずとも&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字を扱うのは当たり前になりましたから。&lt;/p&gt;
&lt;h1 id=&#34;unicode-showを使おう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#unicode-showを使おう&#34; title=&#34;unicode-showを使おう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🌐&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;を使おう&lt;/h1&gt;
&lt;p&gt;そこで便利なのが&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の&lt;code&gt;ushow&lt;/code&gt;関数は、&lt;code&gt;show&lt;/code&gt;がエスケープシーケンスに変換した日本語などの文字列を、元の文字列に戻してくれます。&lt;br /&gt;
なので、新しい型クラスを定義する必要もなく、そのまま&lt;code&gt;Show&lt;/code&gt;型クラスのインスタンスを再利用できるのです。&lt;/p&gt;
&lt;p&gt;早速先ほどの&lt;code&gt;show&lt;/code&gt;を使った例に適用してみましょう。&lt;/p&gt;
&lt;p&gt;まずは👇のコマンドでインストールして、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を起動します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;# あるいは、最近のcabalを使っている場合は...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-install --lib unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-repl -b unicode-show&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Text.Show.Unicode&lt;/code&gt;モジュールを&lt;code&gt;import&lt;/code&gt;して&lt;code&gt;show&lt;/code&gt;を使っている箇所を&lt;code&gt;ushow&lt;/code&gt;に変えれば、お望みどおりの挙動になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; iimashita x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;今、&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; ushow x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;って言いました！？&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (iimashita &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;今、&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;って言いました！？&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わくわくもんですね！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;の例も、&lt;code&gt;uprint&lt;/code&gt;に変えれば🆗です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint &lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ウルトラハッピーですね！！&lt;/p&gt;
&lt;p&gt;さらに、次のコマンドを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に入力すれば、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に直接入力した日本語文字列もそのまま表示されるようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;uprint&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カンペキ✨&lt;/p&gt;
&lt;p&gt;えっ、常に&lt;code&gt;uprint&lt;/code&gt;したいからいちいち&lt;code&gt;:set -interactive-print=uprint&lt;/code&gt;するのが面倒くさい？&lt;br /&gt;
そんなあなたは👇を&lt;code&gt;~/.ghci&lt;/code&gt;に書くことけって～いでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;Text.Show.Unicode.uprint&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#unicode-showの最近の修正&#34; title=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の最近の修正&lt;/h1&gt;
&lt;p&gt;そんな&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;ですが、残念ながら一昨年、作者である村主崇行さんが亡くなってしまいました&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
日本に住む&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;をサポートする日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループとしては、このパッケージをメンテナンスし続けることに大きな意義があると判断し、私はこのパッケージを&lt;a href=&#34;https://github.com/haskell-jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリーでメンテナンスすることにしました。&lt;br /&gt;
以下がそのリポジトリーです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/unicode-show&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/unicode-show&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;といっても、メンテナーの名前や&lt;code&gt;LICENSE&lt;/code&gt;ファイルを書き換えて最新版をアップロードして以降特に何もしていなかったのですが&lt;small&gt;（&lt;a href=&#34;https://github.com/nushio3/unicode-show/issues/2&#34;&gt;バグはあるけど直すのも難しそう&lt;/a&gt;だし、概ね使えるし）&lt;/small&gt;、なんと先日、&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;が来ました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/unicode-show/pull/4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Do not show values eagerly by Kaiepi · Pull Request #4 · haskell-jp/unicode-show&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この修正を適用する前の&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;は、文字列全体を評価してからエスケープシーケンスを元に戻す、という挙動だったため、長い文字列を与えた場合や無限の長さの文字列を与えた場合に、なかなか&lt;small&gt;（あるいは永遠に）&lt;/small&gt;結果が返ってこないという問題がありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint (&lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も表示されず、Ctrl + C を押すまで処理が返らない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正後はちゃんと遅延評価を利用することで、無限の長さの文字列でも少しずつ変換することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint (&lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;[&lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;, &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;ああInterrupted.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;-- Ctrl + Cを押すまで出力し続ける&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今日記事にした一番の理由はこの話をするためです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/Kaiepi&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Kaiepi&lt;/span&gt;&lt;/a&gt;さんありがとうございます！&lt;br /&gt;
先ほどリリースしました！🎉&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show-0.1.0.4&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://hackage.haskell.org/package/unicode-show-0.1.0.4&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;番外編pretty-simpleも使おう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編pretty-simpleも使おう&#34; title=&#34;番外編pretty-simpleも使おう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;（番外編）&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;も使おう&lt;/h1&gt;
&lt;p&gt;時間がないので詳しくは省略しますが、実は&lt;a href=&#34;http://hackage.haskell.org/package/pretty-simple&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;&lt;/a&gt;というパッケージを使えば、日本語をそのまま出力するのに加えて、プリティープリントできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Pretty.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pPrint [&lt;span class=&#34;st&#34;&gt;&amp;quot;きーらーめーくー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ほーしーの力でー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;あこがーれのー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;わーたーし描くよー♪&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;きーらーめーくー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ほーしーの力でー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;あこがーれのー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;わーたーし描くよー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例ではわかりづらいですが、ちゃんと色も着けてくれます！&lt;br /&gt;
それでは&lt;span class=&#34;ascii&#34;&gt;2020&lt;/span&gt;年も、&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking&lt;/span&gt;🎁&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;例年どおりですとプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;と同時投稿をしている予定でしたが、例年参加者が減っていたこともあり、今年はプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;はなくなってしまいました😞&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;村主崇行さんは「&lt;a href=&#34;https://shop.ohmsha.co.jp/shopdetail/000000001926/&#34;&gt;すごい&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;たのしく学ぼう！&lt;/a&gt;」の翻訳を担当されるなど、&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;以外にも日本の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に多大な功績をもたらした方でした。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/regex-applicative.html&#34; lang=&#34;ja&#34;&gt;regex-applicative: 内部DSLとしての正規表現（ブログ記事版）&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-in-vrchat.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;VRのためにHaskellを使った話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id><title type="text">Elixir による JSON Parser</title><updated>2019-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html&#34;&gt;久しぶりに thank_you_stars をビルドする&lt;/a&gt;」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．&lt;/p&gt;
&lt;h3 id=&#34;result-型&#34;&gt;Result 型&lt;/h3&gt;
&lt;p&gt;その前に便利モジュールを作っておく． いわゆる &lt;code&gt;Either&lt;/code&gt; 型だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Result e a = {:error, e} | {:ok, a} のような型を扱う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a}, {:error, e} をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; success(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; failure(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: success(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v))&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に f(a) を返す (f は a -&amp;gt; Result e b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:error, e} だった場合に {:error, f(e)} を返す (f は e -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error({&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, e}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: failure(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(e))&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error(r &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: r&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを作っておくと &lt;code&gt;{:ok, a} | {:error, e}&lt;/code&gt; なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．&lt;/p&gt;
&lt;h3 id=&#34;状態のデータ構造&#34;&gt;状態のデータ構造&lt;/h3&gt;
&lt;p&gt;シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; decode(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    init_stat(str)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_element() &lt;span class=&#34;co&#34;&gt;# これがパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# パースが成功した場合 {:ok} かつ残り文字列が空になる想定&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; result}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;      {_, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# rest が残り文字列で result がパース結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; init_stat(str), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; str, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; %{}}&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 &lt;code&gt;%{}&lt;/code&gt; を渡している．&lt;/p&gt;
&lt;h3 id=&#34;json.org&#34;&gt;JSON.org&lt;/h3&gt;
&lt;p&gt;JSON の(基本的な)構文定義は &lt;a href=&#34;https://json.org&#34;&gt;JSON.org&lt;/a&gt; に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;json&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;element&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  := ws value ws&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;value&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  := object&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   | array&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;   | string&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;   | number&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;   | &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;   | &amp;quot;false&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;   | &amp;quot;null&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;ws&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;  := ... // 空白除去&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをパターンマッチを駆使して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_element(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  trim_leading(stat) &lt;span class=&#34;co&#34;&gt;# rest の前方の空白を除去します&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_value()&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_string や match_array はあとで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_string(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_array(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_object(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_number(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;match_xxx&lt;/code&gt; 系の関数は全て前述した &lt;code&gt;Result e a&lt;/code&gt; 型を返すイメージ(&lt;code&gt;e&lt;/code&gt; も &lt;code&gt;a&lt;/code&gt; も前述した状態の連想配列だが)．&lt;/p&gt;
&lt;h3 id=&#34;オブジェクトのパース&#34;&gt;オブジェクトのパース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; で囲まれた連想配列のようなもの，例えば &lt;code&gt;{ &amp;quot;key&amp;quot; : true }&lt;/code&gt; がオブジェクトだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;object&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  := &amp;#39;{&amp;#39; ws &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;   | &amp;#39;{&amp;#39; members &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;members&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;  := member&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;   | member &amp;#39;,&amp;#39; members&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;member&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  := ws string ws &amp;#39;:&amp;#39; element&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;string&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  := ... // 文字列&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# parse_when_unmatch_by(stat, char, parser) は&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# char の文字列にマッチしなければ parser を実行し&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチした場合は parser を実行せずに stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_object(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  match_left_par(stat)                               &lt;span class=&#34;co&#34;&gt;# `{` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                   &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, %{})) &lt;span class=&#34;co&#34;&gt;# 状態の result を空オブジェクト %{} に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_members(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_par(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))           &lt;span class=&#34;co&#34;&gt;# `}` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;  match_member(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_members_tail は members の再帰処理をする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 先頭が `,` にマッチした時には再帰処理を行い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチしない場合は stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_member(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 空白を除去してから文字列にマッチさせてみる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; match_string(trim_leading(stat)) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, stat} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; key}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;      trim_leading(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_colon() &lt;span class=&#34;co&#34;&gt;# &amp;#39;:&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_element(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;#match_element は前のと同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(prev, key, v) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;update_stat(stat, key, value)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; で置き換える関数で，&lt;code&gt;modify_stat(stat, key, func)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;func&lt;/code&gt; で更新する関数だ．&lt;/p&gt;
&lt;p&gt;余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; は第一級のようだ． &lt;code&gt;&amp;amp;any_function(&amp;amp;1, &amp;amp;2)&lt;/code&gt; などとすることで &lt;code&gt;fn arg1 arg2 -&amp;gt; any_function(arg1, arg2) end&lt;/code&gt; の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，&lt;code&gt;modify_stat&lt;/code&gt; や &lt;code&gt;parse_when_unmatch_by&lt;/code&gt; では内部の方の関数を &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; で直接囲っている(&lt;a href=&#34;https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir&#34;&gt;参照&lt;/a&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;配列のパース&#34;&gt;配列のパース&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;array&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  := &amp;#39;[&amp;#39; ws &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;   | &amp;#39;[&amp;#39; elements &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;elements&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   | element &amp;#39;,&amp;#39; elements&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;{}&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; になっただけで，だいたいオブジェクトと同じだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_array(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;  match_left_square(stat)                           &lt;span class=&#34;co&#34;&gt;# &amp;#39;[&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                  &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, [])) &lt;span class=&#34;co&#34;&gt;# 状態の result を空配列 [] に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_elements(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_square(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;]&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  match_element(stat)&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# ここで状態(配列)の更新をしてる点だけが違う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; [v] &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文字列のパース&#34;&gt;文字列のパース&lt;/h3&gt;
&lt;p&gt;さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_string(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  match_double_quote(stat)                          &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 状態の result を空文字列 &amp;quot;&amp;quot; に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_double_quote(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# どう見ても成功じゃ無いがどーせ後々エラーになるので...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチしたら終わり&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# &amp;quot;\&amp;quot; はエスケープ文字として処理する必要があるのでまずはそれ以外&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;  parse_when_unmatch_by(stat, &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;, &lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_noescape_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_escape(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))     &lt;span class=&#34;co&#34;&gt;# 次にエスケープ文字の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 再帰する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数名の通り，&lt;code&gt;match_noescape_characters&lt;/code&gt; がエスケープ文字以外のパーサーで，&lt;code&gt;match_escape&lt;/code&gt; がエスケープ文字のパーサーだ． &lt;code&gt;match_noescape_characters&lt;/code&gt; ではまず &lt;code&gt;\&lt;/code&gt; や &lt;code&gt;&amp;quot;&lt;/code&gt; を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# エスケープされてない文字はダメっぽい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\u0000&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;\\\&lt;span class=&#34;st&#34;&gt;&amp;quot;\n\x00\t]*)(?&amp;lt;rest&amp;gt;.*)/s, stat[:rest])&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;  update_stat(%{result: prev &amp;lt;&amp;gt; body}, :rest, rest)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エスケープ文字は，もうパターンマッチで頑張る:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\/&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\b&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\f&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\f&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# \u1234 とかいうやつ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# /.{n,m}/ で n 個以上 m 個以下にマッチする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[\dA&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Fa&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;f]{&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;})(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s, rest) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;    %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 4桁の16進数をエスケープされた文字列として変換する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 変換できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; hex_to_string(body) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;        hex &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; hex}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-42&#34;&gt;&lt;a href=&#34;#cb11-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; hex_to_string(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-43&#34;&gt;&lt;a href=&#34;#cb11-43&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-44&#34;&gt;&lt;a href=&#34;#cb11-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# 文字列を16進数として int 型に変換&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-45&#34;&gt;&lt;a href=&#34;#cb11-45&#34;&gt;&lt;/a&gt;    {hex, _} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(str, &lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-46&#34;&gt;&lt;a href=&#34;#cb11-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;hex::utf8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# こういう記法で int を16進数でエスケープされた文字列に変換できる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-47&#34;&gt;&lt;a href=&#34;#cb11-47&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;rescue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-48&#34;&gt;&lt;a href=&#34;#cb11-48&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-49&#34;&gt;&lt;a href=&#34;#cb11-49&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-50&#34;&gt;&lt;a href=&#34;#cb11-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．&lt;/p&gt;
&lt;h3 id=&#34;数値のパース&#34;&gt;数値のパース&lt;/h3&gt;
&lt;p&gt;数値は，マイナス符号・整数・浮動小数点数・&lt;code&gt;e&lt;/code&gt;記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_number(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;  {value, rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; compile_number(stat[&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 文字列から数値を取得できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; value &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(stat, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, value)&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; compile_number(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，超便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;minus&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; minus, &lt;span class=&#34;st&#34;&gt;&amp;quot;digit&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; digit, &lt;span class=&#34;st&#34;&gt;&amp;quot;frac&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; frac, &lt;span class=&#34;st&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; exp, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;minus&lt;span class=&#34;op&#34;&gt;&amp;gt;-&lt;/span&gt;?)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;digit&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;frac&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;\&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;exp&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[eE]?[&lt;span class=&#34;op&#34;&gt;-+&lt;/span&gt;]?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s,&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;      str&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;  value &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; {digit, frac, exp} &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, _, _} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 整数部が無い場合はダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num&lt;span class=&#34;op&#34;&gt; !=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-31&#34;&gt;&lt;a href=&#34;#cb12-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 0 から始まる整数もダメ(小数はOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-32&#34;&gt;&lt;a href=&#34;#cb12-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-33&#34;&gt;&lt;a href=&#34;#cb12-33&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, _} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-34&#34;&gt;&lt;a href=&#34;#cb12-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 小数点だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-35&#34;&gt;&lt;a href=&#34;#cb12-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-36&#34;&gt;&lt;a href=&#34;#cb12-36&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-37&#34;&gt;&lt;a href=&#34;#cb12-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# e だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-38&#34;&gt;&lt;a href=&#34;#cb12-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-39&#34;&gt;&lt;a href=&#34;#cb12-39&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;E&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-40&#34;&gt;&lt;a href=&#34;#cb12-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# E だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-41&#34;&gt;&lt;a href=&#34;#cb12-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-42&#34;&gt;&lt;a href=&#34;#cb12-42&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは整数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-43&#34;&gt;&lt;a href=&#34;#cb12-43&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-44&#34;&gt;&lt;a href=&#34;#cb12-44&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-45&#34;&gt;&lt;a href=&#34;#cb12-45&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-46&#34;&gt;&lt;a href=&#34;#cb12-46&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-47&#34;&gt;&lt;a href=&#34;#cb12-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-48&#34;&gt;&lt;a href=&#34;#cb12-48&#34;&gt;&lt;/a&gt;      _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは浮動小数点数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-49&#34;&gt;&lt;a href=&#34;#cb12-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; frac &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; exp) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-50&#34;&gt;&lt;a href=&#34;#cb12-50&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-51&#34;&gt;&lt;a href=&#34;#cb12-51&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-52&#34;&gt;&lt;a href=&#34;#cb12-52&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-53&#34;&gt;&lt;a href=&#34;#cb12-53&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-54&#34;&gt;&lt;a href=&#34;#cb12-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-55&#34;&gt;&lt;a href=&#34;#cb12-55&#34;&gt;&lt;/a&gt;  {value, rest}&lt;/span&gt;
&lt;span id=&#34;cb12-56&#34;&gt;&lt;a href=&#34;#cb12-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでとりあえず完成．&lt;/p&gt;
&lt;h2 id=&#34;テストする&#34;&gt;テストする&lt;/h2&gt;
&lt;p&gt;JSON のテストスイートとして &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;nst/JSONTestSuite&lt;/a&gt; と言うのがあるので使わせてもらう． こんな感じに配置する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;\&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;|- lib // elixir のコード置き場&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;|- test&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;|  |- fixture&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;|  \- json_spec.exs&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;\- mix.exs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストには espec を使ってこんな感じに記述した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# json_spec.exs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; test_suite &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    [&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# エラーケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_1_true_without_comma.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_a_invalid_utf8.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 成功ケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_arraysWithSpaces.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [[]]}},&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_empty-string.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;]}},&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# JSONSuite を先に宣言しないと使えなかった&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSpec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ESpec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;JSON.decode&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Enum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;test_suite(), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; {path, result} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;      context path &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 変数を利用するには unquote する必要がある(マクロのせい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;        let(&lt;span class=&#34;va&#34;&gt;:json&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;read!(&lt;span class=&#34;st&#34;&gt;&amp;quot;test/fixture/test_parsing/&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(path)&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;        it(&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map_error(&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;decode(json()), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; to(eq(&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(&lt;span class=&#34;cn&#34;&gt;Macro&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;escape(result))))&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;unquote&lt;/code&gt; やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/12/21/212423</id><title type="text">OpenShift.run 2019 で Kubernetes のスケジューリングについて話してきました</title><updated>2019-12-21T21:24:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/12/21/212423"/><summary type="html">先日行われた OpenShift コミュニティのイベント OpenShift.run 2019 にて、Kubernetes Scheduler とその関連ツールについて講演してきました。公募 CFP 枠です。 OpenShift のイベントでありながら、OpenShift についてはまったく触れずひたすら Kubernetes の内部実装を解説する異色の登壇でした。実際、40 分枠の講演の中で（RedHat 社以外も含め）ベンダニュートラルな立場で登壇したのは自分だけだったようです。これは私見ですが、逆に言えばそういう内容でも CFP 採択されているというのは、運営側も「単なるマーケティングイ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">postgresql-pure を開発しました</title><updated>2019-12-06T00:03:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">この記事は Haskell Advent Calendar 2019 の6日目の記事です。 hackage.haskell.org postgresql-pure は Haskell の PostgreSQL ドライバー（クライアントライブラリー）で次のような目標で開発しました。 マルチコア環境でのパフォーマンス向上 暗黙のロックを回避する マルチプラットフォーム対応 C ライブラリーの libpq への依存をなくして特に Windows でのビルドを容易にする 既存ライブラリーとしては postgres-wire が高速だがそれは Windows をサポートしていない pure Haskel…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/05/191010</id><title type="text">最強にして最速のビルダー、mason</title><updated>2019-12-05T19:33:25+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/05/191010"/><summary type="html">Haskell Advent Calendar 2019 5日目 この冬、神速のサンタクロースがやってくる—— Haskellにおいて、バイト列の表現はByteStringが定番である。ByteStringはPinned領域に直接格納され、空間効率はリストに比べればはるかに良い。しかし、Pinned領域にあるとヒープフラグメンテーションが起こりやすくなるということでもあり、細かい文字列をつなぎ合わせるような使い方はパフォーマンスに悪影響が及ぶ。そのような問題を避けるため、ビルダーと呼ばれる構造が用意されている。 Data.ByteString.Builderは、word8 42 &lt;&gt; byte…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html</id><title type="text">VRのためにHaskellを使った話</title><updated>2019-12-03T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;デプロイ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;実際に開催してみて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;リポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h1&gt;
&lt;p&gt;はじめまして。趣味で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;しているはる&lt;span class=&#34;ascii&#34;&gt;(haru2036)&lt;/span&gt;と申します。まったり進行で開発しているので&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンアップの速さについていけてない感があります…… さて、今回はあんまり深い話はありません。どちらかと言うとこんなニッチなところに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;使ったよというネタで書きます。&lt;/p&gt;
&lt;h1 id=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/h1&gt;
&lt;p&gt;突然ですが、私は&lt;a href=&#34;https://vrchat.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;&lt;/a&gt;（以下&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;）というソーシャル&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;サービス（&lt;span class=&#34;ascii&#34;&gt;Second Life&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;版みたいなものです）にハマっています。&lt;br /&gt;
友人との雑談の中で&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;の中で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会ができればプログラミングなどの話題で盛り上がれる人が集まってワイワイ楽しくできるのではないかと話して、その場のノリでとりあえず実装してみることにしました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-room.png&#34; title=&#34;完成したワールド&#34; alt=&#34;完成したワールド&#34; /&gt;&lt;figcaption&gt;完成したワールド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今回作りたかったのはスライドを表示するためのスクリーンと、ページ送りに使うボタンを実装したワールドです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-control-panel.png&#34; title=&#34;発表者用コントロールパネル&#34; alt=&#34;発表者用コントロールパネル&#34; /&gt;&lt;figcaption&gt;発表者用コントロールパネル&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;ではアバターやワールドを自由に作ることができるのですが、&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;が提供するコンポーネント以外のスクリプトは利用できません。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザとしては得意なことを活用しづらい土壌です。&lt;br /&gt;
幸いスライドを表示する手段はゲーム内で&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;から画像を取得し表示する&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;というコンポーネントを利用することにより確保できましたが、&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;が取得できる画像はワールド作成時に決め打ちで指定された&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストに含まれるもののみです。&lt;br /&gt;
そのため、スライド画像への&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストを直接&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;に渡していると、イベントを開催する際よくある飛び入り参加やスライドの用意が遅れた参加者に対応できなくなってしまいます。&lt;/p&gt;
&lt;p&gt;その問題を解決するために、イベント開始時からのページ数とスライドの画像&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;をマップする&lt;span class=&#34;ascii&#34;&gt;WebAPI&lt;/span&gt;を用意しました。&lt;br /&gt;
具体的には、&lt;code&gt;/slides/{pageCount}&lt;/code&gt; のような形のエンドポイントを持った&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を用意し、そこから実際の画像へリダイレクトをかけるという方法を取りました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-image.png&#34; title=&#34;実装イメージ図&#34; alt=&#34;実装イメージ図&#34; /&gt;&lt;figcaption&gt;実装イメージ図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけだしということでさらっとやってみたかったので&lt;span class=&#34;ascii&#34;&gt;Spock&lt;/span&gt;を利用しました。もう少し誰でも使えるサービスにしたいと考えているので&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;に載せ替えてかっちり作り直そうかと思い移植しているところです。&lt;/p&gt;
&lt;h1 id=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/h1&gt;
&lt;p&gt;じつは&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会をやろうと思いついた友人の&lt;a href=&#34;https://twitter.com/b0xp2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BOXP&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Clojure&lt;/span&gt;ユーザで、せっかくだからと&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の開発を手伝ってくれました。&lt;br /&gt;
あまり&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に馴染みはなかったものの、いわゆる関数型プログラミング的な概念はバッチリなのでスススっと書いてくれました。&lt;br /&gt;
書いてくれる上での障壁になったのは、型関連の要素&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;data&lt;/code&gt;や&lt;code&gt;type&lt;/code&gt;や&lt;code&gt;newtype&lt;/code&gt;がぱっと見わからなかった、型コンストラクタ、値コンストラクタの概念）に馴染みが薄かったことでした。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながら説明を行ったのですが、やはり同じ画面を見ながら説明するのはとてもやりやすいと感じました。&lt;br /&gt;
本人からのメッセージはこちら。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラミング&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を昔読んでかじったことがある程度で素人もいいところでしたが、当人のサポートもあり思いついた数日後には実装が終わっていました。 はるくんの話にもある通り&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながらペアプロし、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのテストコードの書き方も一から教えてもらいながら書きました。これは願ってもない体験だったので根気よく教えてくれたことに非常に感謝しています。&lt;/p&gt;
&lt;p&gt;また、個人的には実装以外でのブレストや実際の会場でのデバッグを&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;上でできた事もとてもよかったなと思っています。 単純に実装を確認するためには二人以上で&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;に入る必要があるというのもありましたが、完全リモートでも身振り手振りありでブレストができたことや、アバターのおかげで環境に囚われないコミュニケーションができていたことも&lt;span class=&#34;ascii&#34;&gt;Good&lt;/span&gt;でした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;デプロイ&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけな上に常時稼働している必要もなく、コストを最小限に抑えたかったので&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;にデプロイしました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Dockerfile&lt;/span&gt;を書き、スタティックリンク周りで悩みながらもイメージを生成して&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;のレジストリに&lt;span class=&#34;ascii&#34;&gt;Push&lt;/span&gt;し、後はいつもの&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;という感じでうまくいきました。&lt;/p&gt;
&lt;p&gt;余談ですが、最近参加した&lt;span class=&#34;ascii&#34;&gt;Gotanda.hs&lt;/span&gt;というイベントで&lt;code&gt;cabal build --enable-executable-static&lt;/code&gt;でいい感じにシングルバイナリが生成できるというお話を聞いたので、最近&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;ばっかり使ってたのを改めて適材適所で使い分けていきたいなーと思っています。&lt;/p&gt;
&lt;h1 id=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実際に開催してみて&lt;/h1&gt;
&lt;p&gt;ここは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ほぼ全く関係ないですが……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt.png&#34; /&gt; &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;という名前で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回ほど開催しているのですが、場所の制約を受けずに勉強会ができ、その後の懇親会も会場の撤収時刻や終電を気にせず話したい人はとことん話し続ける事ができるというところが非常に良かったです。&lt;br /&gt;
ホワイトボードはまだ未実装ですが、空間に書けるペンも配布されているのでその手のアイテムも取り入れれば懇親会での話も更にはずむのではないでしょうか。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;PC&lt;/span&gt;のみでも利用することができます。 &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;はほぼ月イチペースで不定期開催ですので、もしよろしければ参加していただけると嬉しいです。 開催時のアーカイブ等も以下の&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;サイトにて公開中です。合わせてご覧ください。 &lt;a href=&#34;https://vrc-lt.github.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://vrc-lt.github.io&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;リポジトリ&lt;/h1&gt;
&lt;p&gt;そんなこんなで開発中のリポジトリはこちらになります。&lt;br /&gt;
拙いところもいっぱいですが&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;などで気になった点を教えていただければ幸いです！&lt;br /&gt;
&lt;a href=&#34;https://github.com/vrc-lt/VRC-Slide-Server&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/vrc-lt/VRC-Slide-Server&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/unicode-show.html&#34; lang=&#34;ja&#34;&gt;日本語をshowしてうまく表示されなかったら&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-day-2019.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2019を開催しました！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/11/30/215950</id><title type="text">状態機械を合成してデッドロックを検出できる Go 言語パッケージを作ってみました</title><updated>2019-11-30T21:59:50+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/11/30/215950"/><summary type="html">はじめに マルチスレッドで動作するプログラムの設計は難しい問題です。個々のスレッドの動作は単純に見えても、複数が並行して動作する場合の動作は組み合わせ論的に複雑になります。また、タイミングに依存する不具合は狙って再現することが難しく、通常の単体テストによる検出にも限界があります。 そんなとき、有効な手法がモデル検査です。システムの取りうる状態をあらかじめ網羅的に探索することで、「実際に動作させた際にごく低い確率で踏むバグ」であっても、動作させることなく設計段階で発見することが可能になります。 ところでちょうど先日、デッドロック発見器を自作するハンズオンに参加する機会がありました。内容は非常にシ…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-day-2019.html</id><title type="text">Haskell Day 2019を開催しました！</title><updated>2019-11-29T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-day-2019.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日、&lt;a href=&#34;https://techplay.jp/space&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TECH PLAY SHIBUYA&lt;/span&gt;&lt;/a&gt;にて&lt;a href=&#34;https://techplay.jp/event/727059&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;&lt;/a&gt;を開催しました。&lt;br /&gt;
今回は、各発表の概要や、アンケートの結果をお伝えしたいと思います。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;発表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;関数と型で理解する自動微分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;アンケート結果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;エンジニアの経験年数はどれくらいですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;得意なプログラミング言語はなんですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;得意・好きな技術領域はどれですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;最近注目している技術があれば記述してください&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;あわせて読みたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;発表&lt;/h1&gt;
&lt;p&gt;まずは各種発表の紹介から。&lt;/p&gt;
&lt;h2 id=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/h2&gt;
&lt;p&gt;「関数型」 — すなわち&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でいうところの&lt;code&gt;a -&amp;gt; b&lt;/code&gt;で表される、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数について、ちょっと見方を変えた新しい発見を教えてくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/nobsun.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Higher Kinded Datatype (HKD)&lt;/span&gt;という、昨今&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界で流行りの型定義方法を解説しています。&lt;br /&gt;
レコード型を定義する際&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;にすることで、より柔軟に扱うことができるようになります。&lt;br /&gt;
さらに、&lt;a href=&#34;http://hackage.haskell.org/package/barbies&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;barbies&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;といった、&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;の利用を飛躍的に促進するパッケージも紹介されました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/fumieval.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;deriving&lt;/code&gt;機能 — 型を定義したとき、型クラスのインスタンスまで自動で定義してくれるあの機能ですね — の、適用範囲を広げる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張をいろいろ紹介してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/aiya000.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/h2&gt;
&lt;p&gt;プログラミング言語&lt;a href=&#34;https://www.egison.org/ja/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;&lt;/a&gt;の核となる機能である強力なパターンマッチを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の各種拡張を駆使することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードに自然に埋め込めるような形で実装した、という話です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.egison.org/download/20191109HaskellDay.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/egison/egison-haskell&#34;&gt;紹介しているライブラリーのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/egison.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数と型で理解する自動微分&lt;/h2&gt;
&lt;p&gt;関数の自動微分を行うパッケージ&lt;a href=&#34;http://hackage.haskell.org/package/ad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ad&lt;/span&gt;&lt;/a&gt;の仕組みを自力で実装してみることで解説してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/lotz.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/miso&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;&lt;/a&gt;というおいしそうな名前のアプリケーションフレームワークと、&lt;span class=&#34;ascii&#34;&gt;Firebase&lt;/span&gt;と連携する&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;のサンプルを、ライブコーディングを通して紹介してくれました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;を使えば、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;Elm Architecture&lt;/span&gt;風の設計に基づいてアプリケーションを作ったり、さらにそのコードを利用してサーバーサイドレンダリングをしたりできます。&lt;/p&gt;
&lt;p&gt;ℹ️資料はまだ公開されていません！当日はライブコーディングが大半の時間を占めていたため、同等の解説を文章にして公開したいというチェシャ猫さんの意向によるものです。&lt;br /&gt;
現在執筆中のためお待ちください。🙇&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/y-taka-23/miso-firebase-tutorial&#34;&gt;発表中に使用したソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/y_taka_23.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/h2&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;mixi git challenge&lt;/span&gt;」というイベントにおいてユーザーが投稿した解答を採点するサーバーを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Elm&lt;/span&gt;で一から書き直した、という事例を発表してくれました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/servant&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;servant&lt;/span&gt;&lt;/a&gt;といった著名なパッケージを使うだけでなく、足りないところを自力で補って新しいパッケージとして公開したり、さらに作成したアプリケーション自体を&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;として公開したりすることで、大きな資産を残していただけました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/matsubara0507.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.deepflow.co.jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;DeepFlow&lt;/span&gt;株式会社&lt;/a&gt;における&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の事例の紹介です。&lt;br /&gt;
超高速で大規模な数値計算システムを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の多様な言語拡張を駆使して作っているそうです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Tagless Final&lt;/span&gt;を活用することで知っているべき領域を区分して仕事を分けることに成功しているという点が印象的でした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/mr_konn.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ekmett.github.io/cadenza/cadenza/index.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cadenza&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;（&lt;span class=&#34;ascii&#34;&gt;GraalVM&lt;/span&gt;に含まれている、高速なインタープリター作成フレームワーク）製の関数型言語の紹介です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;がもたらす強力な&lt;span class=&#34;ascii&#34;&gt;JIT&lt;/span&gt;と「&lt;span class=&#34;ascii&#34;&gt;Normalization by Evaluation&lt;/span&gt;」という技術を応用することで、型検査と実行時両方における高いスピードを得ることが狙いだそうです。 将来的には依存型言語における型チェックや、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムの高速化に寄与したいとのことです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1bwYO66xUKeHyR4YCNm_1C82JlDNQLUXv/view&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ekmett/cadenza&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/ekmett.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;今回は&lt;span class=&#34;ascii&#34;&gt;Hakell Day&lt;/span&gt;史上初めての試みとして、&lt;span class=&#34;ascii&#34;&gt;Lightning Talk&lt;/span&gt;を当日公募しました。&lt;br /&gt;
残念ながら&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;分間という短い制限時間に収められない発表が大半でしたので、ぜひ👇の資料を読んでみてください！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;順番が間違っていたら済みません！ご指摘を！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0/edit#slide=id.gc6f73a04f_0_0&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;3D Model in Haskell - Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;3D&lt;/span&gt;モデルに触れる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cyclone_t/iot-cases-with-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;IoT&lt;/span&gt;やってます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/jabaraster/haskell-day-2019-lt-tomoyuki-kawano&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Quora&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;への愛を語る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitpitch.com/coord-e/slide-type-class-impl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作ってわかる型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Abstract Typeclasses - How To Design a Future-Proof Typeclass&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mew.org/~kazu/material/2019-gc.pdf&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート結果&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt; の各セッションや、参加者のバックグランドなどについてアンケートをとりました。 なので、後者の方の集計結果を載せたいと思います（前者はセッション発表者へのフィードバック）。&lt;/p&gt;
&lt;h2 id=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/h2&gt;
&lt;p&gt;大きく分けて &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問とそうでない質問がありました。 まずは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外に関する質問の方を集計結果を紹介します。&lt;/p&gt;
&lt;h3 id=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;エンジニアの経験年数はどれくらいですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question1.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意なプログラミング言語はなんですか？&lt;/h3&gt;
&lt;p&gt;ちなみに、言語のリストは &lt;a href=&#34;https://haskellweekly.news/survey/2019.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Survey 2019&lt;/span&gt;&lt;/a&gt; を参考にしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question2.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意・好きな技術領域はどれですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question3.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;最近注目している技術があれば記述してください&lt;/h3&gt;
&lt;p&gt;自由記述形式にしたところ、ほとんど重複が無かったので箇条書きにします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;FP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;匿名暗号通貨&lt;span class=&#34;ascii&#34;&gt;(Monero,Zcash,Dash,Koto)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Cardano ADA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GraphQL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Enigma&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;worker&lt;/span&gt;ベースの非同期プログラミング&lt;/li&gt;
&lt;li&gt;フロント界隈&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Next.js&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;自然言語処理&lt;/li&gt;
&lt;li&gt;型レベルプログラミング&lt;/li&gt;
&lt;li&gt;自動微分&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AWS&lt;/span&gt;によるサーバーレスアーキテクチャでのフルスタック&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション開発&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Rust&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Kubernetes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TLA+&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;algebraic effects and handlers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;深層学習コンパイラ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;定理証明支援系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/h2&gt;
&lt;p&gt;ちなみに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt; でもアンケートしました。&lt;/p&gt;
&lt;h3 id=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question4.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question5.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/h3&gt;
&lt;p&gt;参照&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://wiki.haskell.jp/Links#書籍&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://wiki.haskell.jp/Links#&lt;/span&gt;書籍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question6.jpg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;以上の発表に加えて今回は、下記のスポンサー企業の皆様や&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;くんのおかげで、大変満足度の高い懇親会ができました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mvrck.co.jp/&#34;&gt;マーベリック株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://herp.co.jp/&#34;&gt;株式会社&lt;span class=&#34;ascii&#34;&gt;HERP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iij.ad.jp/&#34;&gt;株式会社インターネットイニシアティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cryptact.com/&#34;&gt;株式会社クリプタクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-day-2019/after-party.jpg&#34; alt=&#34;懇親会で振る舞われた料理&#34; /&gt;&lt;figcaption&gt;懇親会で振る舞われた料理&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;発表について。&lt;br /&gt;
昨年は「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで&lt;/a&gt;」というテーマを意識して、発表の難易度別に時間帯が分かれるよう調整しましたが、残念ながらうまくいきませんでした。&lt;br /&gt;
そこで難易度調整の難しさを痛感したため、今回は敢えて難易度調整を行わなかったのです。&lt;br /&gt;
結果、全体として難しい発表に偏ってしまった点は少し反省です。&lt;a href=&#34;https://eng-blog.iij.ad.jp/archives/3467&#34;&gt;私が会社で開いている&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;勉強会&lt;/a&gt;に毎回参加いただいている同僚も、総じて難しくて追いつくのが大変だった、と仰ってました。&lt;br /&gt;
次回は特別に難易度を下げた発表枠をいくつか作り、内容を事前に精査する、なんてプランを考えています。&lt;/p&gt;
&lt;p&gt;会場について。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TECHPLAY SHIBUYA&lt;/span&gt;は素晴らしいですね！&lt;br /&gt;
我々のようなお金がないコミュニティーが今回の規模のイベントを行うのにうってつけでした。&lt;br /&gt;
元々イベントを開催する前提で作られており、受付と演壇が近いため受付しながら発表を聞くことができるのも、持ち回りで受付をしている我々にとって好都合でした。&lt;br /&gt;
来年も是非使わせていただきたいです🙏&lt;/p&gt;
&lt;p&gt;最後に。&lt;br /&gt;
発表者のみなさんはもちろん、支えていただいたスタッフ、スポンサー企業、会場まで足を運んでいただいた参加者の皆様、その他この会の実現に関わったすべての方々に、この場を借りて感謝の意を示したいと思います。&lt;br /&gt;
みなさんのご協力おかげで、大きなトラブルもなく、楽しいイベントが開催できました。ありがとうございます。&lt;br /&gt;
今後も日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ（&lt;span class=&#34;ascii&#34;&gt;a.k.a. Haskell-jp&lt;/span&gt;）をよろしくお願いします！&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;hask(_ _)eller&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;あわせて読みたい&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;参加者による参加レポート&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2019/11/09/110030&#34;&gt;今日は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; の日です &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 北海道苫小牧市出身の初老&lt;span class=&#34;ascii&#34;&gt;PG&lt;/span&gt;が書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncaq.net/2019/11/09/20/56/00/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;に参加しました &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; に参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/haskell-day-2018.html&#34;&gt;去年の開催レポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-in-vrchat.html&#34; lang=&#34;ja&#34;&gt;VRのためにHaskellを使った話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-copilot.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Copilotという内部DSLについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B</id><title type="text">FFI で Haskell から Rust を利用する</title><updated>2019-11-22T13:28:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B"/><summary type="html">Rust で作ったライブラリーを静的リンクして Haskell（GHC）から使う例と説明を書いた。 github.com</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89</id><title type="text">最近の自分の Haskell 開発環境（Windows）</title><updated>2019-11-21T09:09:44+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89"/><summary type="html">id:syocy のブログを見たので Windows で自分がどうしているかをメモしておく。 syocy.hatenablog.com Stack 最近は ghcup があるがシェルスクリプト製で自分は PowerShell ユーザーなので stack を使っている。（ghcup はなんで Haskell 製じゃないんだ1？） GHC 8.8 を使うには resolver は ghc-8.8 や nightly を指定する。まだ LTS にはなっていない。 エディター エディターは Spacemacs を使っている。前は IntelliJ IDEA に HaskForce プラグインを入れて使…</summary></entry><entry><id>https://blog.miz-ar.info/2019/10/scanl-and-scanr/</id><title type="text">Haskellのscan系関数を使いこなす</title><updated>2019-10-12T10:14:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/10/scanl-and-scanr/"/><summary type="html">&lt;img width=&#34;619&#34; height=&#34;146&#34; src=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png&#34; class=&#34;attachment-large size-large wp-post-image&#34; alt=&#34;&#34; loading=&#34;lazy&#34; style=&#34;float:left; margin:0 15px 15px 0;&#34; srcset=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png 619w, https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl-300x71.png 300w&#34; sizes=&#34;(max-width: 619px) 100vw, 619px&#34; /&gt;Haskellはリストを操作する関数を多数提供しています。map, filter, foldあたりが代表的で、これらは他の言語でもおなじみかと思います。 一方で、scan系関数（scanl, scanr）は他の言語ではあ [&amp;#8230;]</summary></entry><entry><id>http://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-20T21:45:08+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>https://blog.miz-ar.info/2019/09/techbookfest7-announce/</id><title type="text">技術書典7に、Haskellで競技プログラミングをやる本を出します</title><updated>2019-09-19T13:55:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/09/techbookfest7-announce/"/><summary type="html">今週末の9月22日（日）に池袋で開催される技術書典7に、新刊「Haskellで戦う競技プログラミング」を出します。既刊「LaTeX処理自動化ツールClutTeX 使い方とその仕組み」も改訂して紙の本を頒布します。 技術書 [&amp;#8230;]</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 &#34;Village and Pillage&#34;は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/</id><title type="text">Haskellでの浮動小数点数の方向付き丸めを考える</title><updated>2019-06-30T13:43:59Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/"/><summary type="html">「週刊 代数的実数を作る」の #5 で、区間演算と方向付き丸めの話を書いた。浮動小数点数の計算は不正確だと思われがちだが、方向付き丸め等をうまく使えばある種の「正しい結果」（この数は確実に1.0より大きい、等）を得ること [&amp;#8230;]</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://blog.miz-ar.info/2019/05/atcoder-with-haskell/</id><title type="text">HaskellでAtCoderに参戦して水色になった</title><updated>2019-05-27T12:17:37Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/05/atcoder-with-haskell/"/><summary type="html">3月下旬からAtCoderのRatedコンテストに参加しています（AtCoderプロフィール）。この度、5月26日のABC128でようやく水色になりました（AtCoder社長の記事によると、これは上位15%に相当するらし [&amp;#8230;]</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/monoid-for-haskellers/</id><title type="text">Haskellerのためのモノイド完全ガイド</title><updated>2019-02-12T07:02:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/"/><summary type="html">Haskellにおけるモノイドについて解説記事を書いてみた。他の言語でも通用する話があるかもしれないし、ないかもしれない。 モノイドとは モノイドとは、ざっくり言うと「くっつける」演算ができる対象のことである。例えば、文 [&amp;#8230;]</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/typical-dp-contest-t/</id><title type="text">フィボナッチ数絡みの競プロの問題を解いてみた（Typical DP Contest T）</title><updated>2019-02-03T13:17:32Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/typical-dp-contest-t/"/><summary type="html">この間、フィボナッチ数を計算する記事を書いていたら、@fetburner氏にこういう問題を教えて頂いた： T: フィボナッチ &amp;#8211; Typical DP Contest &amp;#124; AtCoder フィボナッチ数列の各 [&amp;#8230;]</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>https://blog.miz-ar.info/2019/01/fast-fibonacci/</id><title type="text">最速のフィボナッチ数計算を考える</title><updated>2019-01-20T15:17:01Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/01/fast-fibonacci/"/><summary type="html">Qiitaにこういう記事を書いた： Haskellでフィボナッチ数列 〜Haskellで非実用的なコードを書いて悦に入るのはやめろ〜 ↑の記事ではメモ化しない計算法が遅いこと、Haskellには遅延評価の罠があって正格に [&amp;#8230;]</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://blog.miz-ar.info/2018/12/applicative-functor/</id><title type="text">アプリカティブ関手ってなに？モノイド圏との関係は？調べてみました！</title><updated>2018-12-07T12:56:09Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2018/12/applicative-functor/"/><summary type="html">この記事は Category Theory Advent Calendar 2018 7日目 かつ Haskell (その2) Advent Calendar 2018 7日目の記事です。 Category Theory [&amp;#8230;]</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html</id><title type="text">Haskell Language Server のインストール</title><updated></updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html"/><summary type="html">&lt;p&gt;HLS(Haskell Language Server) を &lt;strong&gt;手動で&lt;/strong&gt; インストールする方法を説明します。&lt;/p&gt;
&lt;p&gt;HLSを &lt;strong&gt;自動で&lt;/strong&gt; インストールする方法は以下のPRで開発中です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/pull/165&#34;&gt;GitHub Action static binaries and runtime libdir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alanz/vscode-hie-server/pull/236&#34;&gt;Automatic installation of haskell-language-server binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;実行環境&#34;&gt;実行環境&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 66%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;環境&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;OS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Ubuntu 18.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Stack&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;HLS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: ~/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;導入手順&#34;&gt;導入手順&lt;/h2&gt;
&lt;h3 id=&#34;hls-のインストール&#34;&gt;1. HLS のインストール&lt;/h3&gt;
&lt;p&gt;インストールには以下のものが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; (バージョン2.1.1以上)
&lt;ul&gt;
&lt;li&gt;または、&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/&#34;&gt;cabal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icu&lt;/code&gt; のライブラリなど&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要に応じてインストールしておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
$ sudo apt update
$ sudo apt install libicu-dev libncurses-dev libgmp-dev zlib1g-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;準備ができたらHLSを&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;リポジトリ&lt;/a&gt;からクローンしてインストールしましょう。(以下の例では &lt;strong&gt;GHC-8.8.3&lt;/strong&gt; を対象としています。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/haskell/haskell-language-server --recurse-submodules
$ cd haskell-language-server
$ stack ./install.hs hls&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールができました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ haskell-language-server --version
ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: /home/yamada/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;エディタの設定&#34;&gt;エディタの設定&lt;/h2&gt;
&lt;h3 id=&#34;vscode&#34;&gt;VSCode&lt;/h3&gt;
&lt;p&gt;拡張機能 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server&#34;&gt;Haskell Language Server&lt;/a&gt; をインストールし、 設定から &lt;code&gt;haskell-language-server&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2020/07-12/hls-vscode.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;VSCodeの設定&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;emacs&#34;&gt;Emacs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;こちら&lt;/a&gt;の記事を参考に、 &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-haskell&#34;&gt;lsp-haskell&lt;/a&gt; をEmacsにインストールします。&lt;/p&gt;
&lt;p&gt;設定ファイルで以下のように &lt;code&gt;haskell-language-server-wrapper&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package lsp-haskell
 :ensure t
 :config
 (setq lsp-haskell-process-path-hie &amp;quot;haskell-language-server-wrapper&amp;quot;)
 ;; Comment/uncomment this line to see interactions between lsp client/server.
 ;;(setq lsp-log-io t)
)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;Emacs で Haskell IDE Engine を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html</id><title type="text">cabal repl コマンドについて</title><updated></updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html"/><summary type="html">&lt;p&gt;&lt;code&gt;cabal repl&lt;/code&gt; コマンドは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghci&lt;/code&gt;, &lt;code&gt;ghc --interactive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack repl&lt;/code&gt;, &lt;code&gt;stack ghci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などと同じように &lt;strong&gt;cabal&lt;/strong&gt; で &lt;strong&gt;REPL&lt;/strong&gt; 環境を実行するためのコマンドです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行する場合と、&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行する場合で挙動が少し異なります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.2.0.0
compiled using version 3.2.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;cabal-プロジェクト外で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行した場合&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; は自動的に &lt;strong&gt;fake-package&lt;/strong&gt; という環境を用意します。これは使い捨てのダミー &lt;strong&gt;cabal&lt;/strong&gt; プロジェクトです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl
Resolving dependencies...
Build profile: -w ghc-8.10.1 -O1
In order, the following will be built (use -v for more details):
 - fake-package-0 (lib) (first run)
Configuring library for fake-package-0..
Preprocessing library for fake-package-0..
Warning: No exposed modules
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-3302/setcwd.ghci
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成される内容は &lt;a href=&#34;https://github.com/haskell/cabal/blob/cabal-install-v3.2.0.0/cabal-install/Distribution/Client/CmdRepl.hs#L392&#34;&gt;withoutProject&lt;/a&gt; の中で定義されています。また、ログメッセージの最後に表示されている &lt;code&gt;/tmp/cabal-repl.-3302/&lt;/code&gt; ディレクトリに、実際に生成された &lt;strong&gt;cabal&lt;/strong&gt; ファイルなどが保存されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ls /tmp/cabal-repl.-3302/
dist-newstyle  fake-package.cabal  setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal-install-3.2&lt;/code&gt; で生成される &lt;code&gt;fake-package.cabal&lt;/code&gt; の内容は以下のようになっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cabal-version: 2.2
name:          fake-package
version:       0

library
    default-language: Haskell2010
    build-depends:    base -any&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;build-depends&lt;/strong&gt; に &lt;code&gt;base -any&lt;/code&gt; が指定されているため、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンに対応した &lt;strong&gt;base&lt;/strong&gt; パッケージがデフォルトで利用可能です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; の使い方は &lt;strong&gt;ghci&lt;/strong&gt; などと同じなので大丈夫でしょう。&lt;/p&gt;
&lt;h3 id=&#34;repl-起動時のメッセージを省略する&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略する&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略するためには &lt;code&gt;-v0&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-で利用する-ghc-を切り替える&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; で利用する GHC を切り替える&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal build&lt;/code&gt; などでもおなじみの &lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;--with-compiler&lt;/code&gt;) オプションを指定するだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -w ghc-8.8.3
...
GHCi, version 8.8.3: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20727/setcwd.ghci
Prelude&amp;gt;

$ cabal repl -w ghc-8.10.1
...
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20914/setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ファイルを指定して-repl-を起動&#34;&gt;ファイルを指定して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;ghci A.hs&lt;/code&gt; のように &lt;strong&gt;REPL&lt;/strong&gt; 起動時にファイル (モジュール) を読み込みたい時があります。&lt;/p&gt;
&lt;p&gt;しかし、これを &lt;strong&gt;cabal&lt;/strong&gt; で同じように実行するとエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 A.hs
cabal: &amp;#39;repl&amp;#39; doesn&amp;#39;t take any extra arguments when outside a project: A.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのため、一度 &lt;code&gt;cabal repl&lt;/code&gt; を実行してから &lt;code&gt;:l&lt;/code&gt; コマンドでファイルを読み込む必要があります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :l A.hs
*A&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-にオプションを渡す&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; にオプションを渡す&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;stack repl&lt;/code&gt; の &lt;code&gt;--ghci-options&lt;/code&gt; に相当するオプションは &lt;code&gt;--repl-options&lt;/code&gt; です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot;
&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数指定する場合は &lt;code&gt;--repl-options&lt;/code&gt; を何度も指定する必要があります。たぶんこれは&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;仕様&lt;/a&gt;っぽいです&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot; --repl-options=&amp;quot;-XNoStarIsType&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-に依存関係を追加&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; に依存関係を追加&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; を動かす際、少し複雑なファイルの場合は &lt;strong&gt;base&lt;/strong&gt; 以外のパッケージを利用していることがほとんどです。&lt;/p&gt;
&lt;p&gt;そういう時には &lt;code&gt;-b&lt;/code&gt; (&lt;code&gt;--build-depends&lt;/code&gt;) オプションを利用します。このオプションは &lt;code&gt;stack repl --package&lt;/code&gt; と同じような感じでパッケージを追加できます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vector&lt;/strong&gt; パッケージを追加で読み込む例です。(パッケージのビルドが走る場合があります。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数のパッケージ &lt;strong&gt;vector&lt;/strong&gt;, &lt;strong&gt;aeson&lt;/strong&gt; を読み込む例は以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector -b aeson
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; import Data.Aeson
Prelude Data.Vector Data.Aeson&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、カンマ区切りで続けてパッケージを指定することも可能です。(&lt;code&gt;-b&lt;/code&gt; ではエラーになります)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --build-depends=&amp;quot;vector, aeson&amp;quot;
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パッケージのバージョンを指定することも可能です。バージョンの指定には &lt;strong&gt;build-depends&lt;/strong&gt; と同じ記法が使えます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b aeson==1.4.7.1
...
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;ここで、パッケージを追加した際は追加したパッケージが依存しているパッケージも含めて読み込まれる点に注意してください。(つまり、推移的に依存関係が追加されます)&lt;/p&gt;
&lt;p&gt;例えば &lt;a href=&#34;https://hackage.haskell.org/package/deepseq&#34;&gt;deepseq&lt;/a&gt; パッケージで定義されている &lt;code&gt;Control.DeepSeq&lt;/code&gt; は本当なら &lt;strong&gt;import&lt;/strong&gt; できないはずです。しかし、&lt;a href=&#34;https://hackage.haskell.org/package/vector&#34;&gt;vector&lt;/a&gt; パッケージは &lt;strong&gt;deepseq&lt;/strong&gt; パッケージに依存しているため &lt;strong&gt;import&lt;/strong&gt; できてしまいます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector
Prelude&amp;gt; import Control.DeepSeq 
Prelude Control.DeepSeq&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この挙動を変更したい場合は &lt;code&gt;--no-transitive-deps&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; import Control.DeepSeq 

&amp;lt;no location info&amp;gt;: error:
    Could not load module ‘Control.DeepSeq’
    It is a member of the hidden package ‘deepseq-1.4.4.0’.
    Perhaps you need to add ‘deepseq’ to the build-depends in your .cabal file.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;読み込まれるパッケージがどのように変化しているか確認しておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :show packages 
active package flags:
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector
Prelude&amp;gt; :show packages 
active package flags:
  -package-id transformers-0.5.6.2
  -package-id primitive-0.7.0.1-26f169240ac34903846f3a33e2517e97382af71bd7fe7cb7262fd6ca4381f53e
  -package-id array-0.5.4.0
  -package-id deepseq-1.4.4.0
  -package-id integer-gmp-1.0.3.0
  -package-id rts
  -package-id ghc-prim-0.6.1
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; :show packages 
active package flags:
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-プロジェクト内で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行した場合&lt;/h2&gt;
&lt;p&gt;基本的にはプロジェクト内で &lt;code&gt;cabal repl&lt;/code&gt; と実行するとプロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; ファイルに従い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依存関係の追加&lt;/li&gt;
&lt;li&gt;モジュールの追加&lt;/li&gt;
&lt;li&gt;オプションの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などを自動的に行い、&lt;strong&gt;REPL&lt;/strong&gt; を起動します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
*MyLib&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この時、&lt;strong&gt;import&lt;/strong&gt; されるモジュールは1つのみです。(これは仕様みたいです)&lt;/p&gt;
&lt;p&gt;そのため、必要なモジュールは自分で &lt;strong&gt;import&lt;/strong&gt; する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;プロジェクトを無視して-repl-を起動&#34;&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動するためには &lt;code&gt;-z&lt;/code&gt; (&lt;code&gt;--ignore-project&lt;/code&gt;) オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -z
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;今回紹介したオプション一覧&#34;&gt;今回紹介したオプション一覧&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;short&lt;/th&gt;
&lt;th&gt;long&lt;/th&gt;
&lt;th&gt;オプションの意味&lt;/th&gt;
&lt;th&gt;stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--repl-options&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ghci&lt;/strong&gt; に渡すオプション指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ghci-options&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--build-depends&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;依存関係の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ignore-project&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; を無視する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-load&lt;/code&gt; が近いけど&lt;br&gt;プロジェクトの依存関係は読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-transitive-deps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;推移的な依存関係を追加しない&lt;/td&gt;
&lt;td&gt;デフォルトの動作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--with-compiler&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;利用するコンパイラの指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-with-ghc&lt;/code&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-v0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--verbose=0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;起動時のメッセージを省略&lt;/td&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-repl&#34;&gt;5.4.4. cabal v2-repl - Cabal User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5454&#34;&gt;Add –build-depends flag, associated support to new-repl #5454&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/3565&#34;&gt;Cabal repl and cabal build/run conflict over .o object files if ghci has -fobject-code set #3565&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/2592&#34;&gt;cabal repl load single module #2592&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;–repl-options doesn’t split on whitespace #6190&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5845&#34;&gt;Allow list for &lt;code&gt;repl --build-depends&lt;/code&gt; #5845&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5374&#34;&gt;&lt;code&gt;cabal new-repl&lt;/code&gt; only brings one module into scope #5374&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html</id><title type="text">cabal-plan license-report 機能の紹介</title><updated></updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html"/><summary type="html">&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/cabal-plan&#34;&gt;cabal-plan&lt;/a&gt; を使って、プロジェクトが依存するパッケージのライセンスを列挙する方法について紹介します。&lt;/p&gt;
&lt;p&gt;本記事は &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/8vhkwv/is_there_a_tool_to_collect_all_license_files_of/&#34;&gt;Is there a tool to collect all LICENSE files of used dependencies?&lt;/a&gt; を参考にしています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal update
$ cabal install cabal-plan -f license-report
$ cabal-plan --version
cabal-plan 0.6.2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回の機能を使うためには &lt;strong&gt;license-report&lt;/strong&gt; フラグを有効にする必要があります。デフォルトでは無効になっています。&lt;/p&gt;
&lt;h2 id=&#34;ライセンスの列挙&#34;&gt;ライセンスの列挙&lt;/h2&gt;
&lt;p&gt;具体例として、このブログで試してみましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog&#34;&gt;e-bigmoon/haskell-blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ライセンスファイルを抽出する場合は &lt;code&gt;--licensedir&lt;/code&gt; オプションで出力先ディレクトリを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal-plan license-report --licensedir=licenses exe:site &amp;gt; blog.md
WARNING: couldn&amp;#39;t find metadata for base-4.13.0.0
WARNING: couldn&amp;#39;t find metadata for hakyll-sass-0.3
WARNING: license files for array-0.5.4.0 (global/GHC bundled) not copied
WARNING: license files for binary-0.8.7.0 (global/GHC bundled) not copied
WARNING: license files for bytestring-0.10.10.0 (global/GHC bundled) not copied
WARNING: license files for containers-0.6.2.1 (global/GHC bundled) not copied
WARNING: license files for deepseq-1.4.4.0 (global/GHC bundled) not copied
WARNING: license files for directory-1.3.6.0 (global/GHC bundled) not copied
WARNING: license files for filepath-1.4.2.1 (global/GHC bundled) not copied
WARNING: couldn&amp;#39;t find metadata for ghc-boot-th-8.8.3
WARNING: license files for ghc-prim-0.5.3 (global/GHC bundled) not copied
WARNING: license files for integer-gmp-1.0.2.0 (global/GHC bundled) not copied
WARNING: license files for mtl-2.2.2 (global/GHC bundled) not copied
WARNING: license files for parsec-3.1.14.0 (global/GHC bundled) not copied
WARNING: license files for pretty-1.1.3.6 (global/GHC bundled) not copied
WARNING: license files for process-1.6.8.0 (global/GHC bundled) not copied
WARNING: license files for stm-2.5.0.0 (global/GHC bundled) not copied
WARNING: license files for template-haskell-2.15.0.0 (global/GHC bundled) not copied
WARNING: license files for text-1.2.4.0 (global/GHC bundled) not copied
WARNING: license files for time-1.9.3 (global/GHC bundled) not copied
WARNING: license files for transformers-0.5.6.2 (global/GHC bundled) not copied
WARNING: license files for unix-2.7.2.2 (global/GHC bundled) not copied&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;出力結果&#34;&gt;出力結果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;licenses&lt;/code&gt; ディレクトリはだいたいこんな感じでライセンスファイルが格納されています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree licenses | head -n 20
licenses
├── Glob-0.10.0
│   └── LICENSE.txt
├── HTTP-4000.3.14
│   └── LICENSE
├── HsYAML-0.2.1.0
│   ├── LICENSE.GPLv2
│   └── LICENSE.GPLv3
├── HsYAML-aeson-0.2.0.0
│   └── LICENSE.GPLv2
├── JuicyPixels-3.3.5
│   └── LICENSE
├── Only-0.1
│   └── LICENSE
├── QuickCheck-2.13.2
│   └── LICENSE
├── SHA-1.6.4.4
│   └── LICENSE
├── StateVar-1.2
│   └── LICENSE&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;blog.md&lt;/code&gt; の内容を一部を以下に貼り付けます。完全なコードは&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/sample-code/2020/03-30/blog.md&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;dependency-license-report&#34;&gt;Dependency License Report&lt;/h1&gt;
&lt;p&gt;Bold-faced &lt;strong&gt;&lt;code&gt;package-name&lt;/code&gt;&lt;/strong&gt;s denote standard libraries bundled with &lt;code&gt;ghc-8.8.3&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;direct-dependencies-of-bigmoon-haskellers-blogexesite&#34;&gt;Direct dependencies of &lt;code&gt;bigmoon-haskellers-blog:exe:site&lt;/code&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Also depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;base&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/base-4.13.0.0&#34;&gt;&lt;code&gt;4.13.0.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(core library)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.8&#34;&gt;&lt;code&gt;0.8&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/extensible-0.8/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Extensible, efficient, optics-friendly data types and effects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-4.13.2.0&#34;&gt;&lt;code&gt;4.13.2.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/hakyll-4.13.2.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A static website compiler library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-sass-0.3&#34;&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;html-entities&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/html-entities-1.1.4.3&#34;&gt;&lt;code&gt;1.1.4.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/html-entities-1.1.4.3/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A codec library for HTML-escaped text and HTML-entities&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;rio&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/rio-0.1.14.1&#34;&gt;&lt;code&gt;0.1.14.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/rio-0.1.14.1/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A standard library for Haskell&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/yaml-0.11.3.0&#34;&gt;&lt;code&gt;0.11.3.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/yaml-0.11.3.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Support for parsing and rendering YAML documents.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;, &lt;code&gt;pandoc-citeproc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;indirect-transitive-dependencies&#34;&gt;Indirect transitive dependencies&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Glob&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Glob-0.10.0&#34;&gt;&lt;code&gt;0.10.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/Glob-0.10.0/LICENSE.txt&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Globbing library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/HTTP-4000.3.14&#34;&gt;&lt;code&gt;4000.3.14&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/HTTP-4000.3.14/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A library for client-side HTTP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回は &lt;strong&gt;cabal-plan&lt;/strong&gt; を使ってみましたが、同様のツールとして &lt;a href=&#34;https://github.com/fossas/fossa-cli/blob/master/docs/integrations/haskell.md#haskell&#34;&gt;fossas/fossa-cli&lt;/a&gt; や &lt;a href=&#34;https://github.com/github/licensed/blob/master/docs/sources/cabal.md&#34;&gt;github/licensed&lt;/a&gt; なども利用できるようです。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html</id><title type="text">Haskell 関連書籍の紹介ページを作りました</title><updated></updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html"/><summary type="html">&lt;p&gt;&lt;strong&gt;Qiita&lt;/strong&gt; で管理していた記事を移動しました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;haskell-関連の書籍紹介ページ&#34;&gt;Haskell 関連の書籍紹介ページ&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;/books/&#34;&gt;これから Haskell を学ぶ人のための書籍・論文紹介&lt;/a&gt;」というページを作りました。&lt;/p&gt;
&lt;p&gt;基本的には Qiita で管理していた内容ですが、いくつか書籍を追加し、「サポートページ」「正誤表」「レビュー」へのリンク等を追加しました。内容に不備がある場合は &lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/issues&#34;&gt;issue&lt;/a&gt; などで教えていただけると助かります。&lt;/p&gt;
&lt;p&gt;現在は主に自分が持っている物理書籍メインに紹介していますが、今後は電子書籍なども含めて充実させていけたらと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、今から入門するなら「&lt;a href=&#34;https://www.lambdanote.com/collections/frontpage/products/haskell&#34;&gt;プログラミング Haskell 第2版&lt;/a&gt;」をオススメします。&lt;/p&gt;</summary></entry></feed>
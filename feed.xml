<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>September  9, 2019</updated><link href="https://haskell.jp/antenna"/><entry><id>https://haskell.e-bigmoon.com/posts/2019/09-09-extensible-ast.html</id><title type="text">AST を拡張しよう</title><updated>September  9, 2019</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/09-09-extensible-ast.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;実験的な内容です。(&lt;span class=&#34;citation&#34; data-cites=&#34;fumievalさん&#34;&gt;@fumievalさん&lt;/span&gt;, &lt;span class=&#34;citation&#34; data-cites=&#34;matsubara0507さん&#34;&gt;@matsubara0507さん&lt;/span&gt;、アドバイスありがとうございました)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;まずは、以下のような型 &lt;code&gt;Expr&lt;/code&gt; と関数 &lt;code&gt;pretty&lt;/code&gt; が定義されているとします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回、この &lt;code&gt;Expr&lt;/code&gt; をベースとして新しい型 &lt;code&gt;ExprM&lt;/code&gt;, &lt;code&gt;ExprS&lt;/code&gt; をそれぞれ定義したい場合、どのように書けば良いのでしょうか？&lt;/p&gt;
&lt;p&gt;素朴に定義するとなると、以下のようになりそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprS&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、同じようなコードが含まれていて冗長なので何とかしたいです・・・。&lt;/p&gt;
&lt;h2 id=&#34;方針&#34;&gt;方針&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;各コンストラクタ &lt;code&gt;Constant&lt;/code&gt;, &lt;code&gt;Add&lt;/code&gt; 等を &lt;code&gt;extensible&lt;/code&gt; のフィールドとして定義&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expr&lt;/code&gt;, &lt;code&gt;ExprS&lt;/code&gt;, &lt;code&gt;ExprM&lt;/code&gt; は、それぞれのフィールドを集めて作った拡張可能和として定義&lt;/li&gt;
&lt;li&gt;スマートコンストラクタは再利用できるようにしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;コンストラクタの定義&lt;/li&gt;
&lt;li&gt;型の定義&lt;/li&gt;
&lt;li&gt;スマートコンストラクタの定義&lt;/li&gt;
&lt;li&gt;pretty 関数の定義&lt;/li&gt;
&lt;li&gt;新しい型を定義&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;コンストラクタの定義&#34;&gt;コンストラクタの定義&lt;/h3&gt;
&lt;p&gt;まずはそれぞれのフィールドを定義しましょう。それぞれの型は &lt;code&gt;Assoc Symbol Type&lt;/code&gt; のカインドを持ちます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Constant.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;constant&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらのフィールドは以下のような型のコンストラクタを1つずつ切り出したような感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型の定義&#34;&gt;型の定義&lt;/h3&gt;
&lt;p&gt;フィールドの定義は完了したので、次にそれらのフィールドを集めて型にしましょう。&lt;/p&gt;
&lt;p&gt;拡張性を得るために型クラスを定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Kind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; expr ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Assoc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  liftExpr ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; expr) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FieldList expr&lt;/code&gt; によって型に応じてフィールドが変化します。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;Expr&lt;/code&gt; 型を定義してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Base.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprB ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type ExprBFields&lt;/code&gt; は型に含まれるフィールドを表します。&lt;/li&gt;
&lt;li&gt;再帰的に定義するために &lt;code&gt;newtype ExprB&lt;/code&gt; を宣言しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Variant ExprBFields&lt;/code&gt; によって &lt;code&gt;Constant&lt;/code&gt;, &lt;code&gt;Add ExprB&lt;/code&gt; の直和型っぽい感じになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;liftExpr&lt;/code&gt; は再利用可能なスマートコンストラクタを作るためにあります。次で説明します。&lt;/p&gt;
&lt;h3 id=&#34;スマートコンストラクタの定義&#34;&gt;スマートコンストラクタの定義&lt;/h3&gt;
&lt;p&gt;ここまでで型の定義は終わりました。次は値を作りましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;add e1 e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;add &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; (e1, e2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;liftExpr&lt;/code&gt; は文脈に応じて適切なタグに変化します。例えば &lt;code&gt;ExprB&lt;/code&gt; 型であれば &lt;code&gt;ExprB&lt;/code&gt; コンストラクタになります。&lt;/p&gt;
&lt;p&gt;同様に &lt;code&gt;Constant&lt;/code&gt; の値を作る関数も定義しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;constant&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;c i &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;constant &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; i)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に使ってみるとこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (add &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (constant &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;)},&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (constant &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)}))}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extensible の形式で表示されていますが、問題無く値が作れています。型注釈が無い場合はコンパイルエラーになってしまいますが、ここでは気にしないことにします。&lt;/p&gt;
&lt;h3 id=&#34;pretty-関数の定義&#34;&gt;pretty 関数の定義&lt;/h3&gt;
&lt;p&gt;値が作れるようになったら、次は &lt;code&gt;pretty&lt;/code&gt; 関数を作ります。&lt;/p&gt;
&lt;p&gt;ここが一番面白いポイントだと思っているのですが、&lt;code&gt;pretty&lt;/code&gt; のような関数を各フィールドに対して動作する型クラスのメソッドとして定義します。&lt;/p&gt;
&lt;p&gt;まずは、パターンマッチのための補助関数 &lt;code&gt;matchVariant&lt;/code&gt; を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ConstraintKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds           #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds           #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RankNTypes          #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Functor.Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;matchVariant ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; c xs r&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; c xs&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; c x &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Membership&lt;/span&gt; xs x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;matchVariant _ f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchField &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;c) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; f m &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; runIdentity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に &lt;code&gt;pretty&lt;/code&gt; 関数を定義するための型クラスを作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;pretty&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchVariant (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt;) prettyField&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  pretty ::&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  prettyField ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にインスタンスを定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;  prettyField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty l &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Constant.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;  prettyField _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ExprB&lt;/code&gt; に対する定義はボイラープレートのようなものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Base.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e1&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;10 + 20&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;期待通り、ちゃんと動いています。&lt;/p&gt;
&lt;h3 id=&#34;新しい型を定義&#34;&gt;新しい型を定義&lt;/h3&gt;
&lt;p&gt;最後に既存の型を拡張して &lt;code&gt;ExprM&lt;/code&gt; を作ります。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;Mul&lt;/code&gt; フィールドの &lt;code&gt;pretty&lt;/code&gt; とコンストラクタの定義を追加しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Mul.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds         #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels  #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-6&#34;&gt;&lt;a href=&#34;#cb18-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-7&#34;&gt;&lt;a href=&#34;#cb18-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-8&#34;&gt;&lt;a href=&#34;#cb18-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-9&#34;&gt;&lt;a href=&#34;#cb18-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-10&#34;&gt;&lt;a href=&#34;#cb18-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-11&#34;&gt;&lt;a href=&#34;#cb18-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-12&#34;&gt;&lt;a href=&#34;#cb18-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb18-13&#34;&gt;&lt;a href=&#34;#cb18-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-14&#34;&gt;&lt;a href=&#34;#cb18-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-15&#34;&gt;&lt;a href=&#34;#cb18-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;
&lt;span id=&#34;cb18-16&#34;&gt;&lt;a href=&#34;#cb18-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-17&#34;&gt;&lt;a href=&#34;#cb18-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-18&#34;&gt;&lt;a href=&#34;#cb18-18&#34;&gt;&lt;/a&gt;  prettyField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty l &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty r&lt;/span&gt;
&lt;span id=&#34;cb18-19&#34;&gt;&lt;a href=&#34;#cb18-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-20&#34;&gt;&lt;a href=&#34;#cb18-20&#34;&gt;&lt;/a&gt;mul e1 e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;mul &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; (e1, e2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に &lt;code&gt;ExprM&lt;/code&gt; 型を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Mul.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-5&#34;&gt;&lt;a href=&#34;#cb19-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-6&#34;&gt;&lt;a href=&#34;#cb19-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-7&#34;&gt;&lt;a href=&#34;#cb19-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-8&#34;&gt;&lt;a href=&#34;#cb19-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-9&#34;&gt;&lt;a href=&#34;#cb19-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-10&#34;&gt;&lt;a href=&#34;#cb19-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-11&#34;&gt;&lt;a href=&#34;#cb19-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-12&#34;&gt;&lt;a href=&#34;#cb19-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-13&#34;&gt;&lt;a href=&#34;#cb19-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-14&#34;&gt;&lt;a href=&#34;#cb19-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-15&#34;&gt;&lt;a href=&#34;#cb19-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-16&#34;&gt;&lt;a href=&#34;#cb19-16&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-17&#34;&gt;&lt;a href=&#34;#cb19-17&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb19-18&#34;&gt;&lt;a href=&#34;#cb19-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-19&#34;&gt;&lt;a href=&#34;#cb19-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb19-20&#34;&gt;&lt;a href=&#34;#cb19-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-21&#34;&gt;&lt;a href=&#34;#cb19-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-22&#34;&gt;&lt;a href=&#34;#cb19-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-23&#34;&gt;&lt;a href=&#34;#cb19-23&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-24&#34;&gt;&lt;a href=&#34;#cb19-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-25&#34;&gt;&lt;a href=&#34;#cb19-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-26&#34;&gt;&lt;a href=&#34;#cb19-26&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ほとんど同じですが、&lt;code&gt;type ExprMFields&lt;/code&gt; の部分で &lt;code&gt;Mul ExprM&lt;/code&gt; を追加しています。(&lt;code&gt;ExprB&lt;/code&gt; のフィールドに単純に追加する方法も一応可能です。)&lt;/p&gt;
&lt;p&gt;実際に使ってみると、ちゃんと異なる型と認識してコンパイルエラーになってくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb20-1&#34;&gt;&lt;a href=&#34;#cb20-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-2&#34;&gt;&lt;a href=&#34;#cb20-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;50&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-3&#34;&gt;&lt;a href=&#34;#cb20-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-4&#34;&gt;&lt;a href=&#34;#cb20-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; add e1 e2&lt;/span&gt;
&lt;span id=&#34;cb20-5&#34;&gt;&lt;a href=&#34;#cb20-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型が異なるためコンパイルエラー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-6&#34;&gt;&lt;a href=&#34;#cb20-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-7&#34;&gt;&lt;a href=&#34;#cb20-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e1&lt;/span&gt;
&lt;span id=&#34;cb20-8&#34;&gt;&lt;a href=&#34;#cb20-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;10 + 20&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-9&#34;&gt;&lt;a href=&#34;#cb20-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb20-10&#34;&gt;&lt;a href=&#34;#cb20-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;40 + 50&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-11&#34;&gt;&lt;a href=&#34;#cb20-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-12&#34;&gt;&lt;a href=&#34;#cb20-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-13&#34;&gt;&lt;a href=&#34;#cb20-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ExprB 型には Mul フィールドが存在していないため、コンパイルエラー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-14&#34;&gt;&lt;a href=&#34;#cb20-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-15&#34;&gt;&lt;a href=&#34;#cb20-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-16&#34;&gt;&lt;a href=&#34;#cb20-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e3&lt;/span&gt;
&lt;span id=&#34;cb20-17&#34;&gt;&lt;a href=&#34;#cb20-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;60 * 70&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;既存のフィールドを拡張する&#34;&gt;既存のフィールドを拡張する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt; 拡張を使っても良ければ、以下のように &lt;code&gt;ExprBFields ++ &#39;[ Mul ExprM ]&lt;/code&gt; と書くこともできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE UndecidableInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- type ExprMFields = &amp;#39;[ Constant, Add ExprM, Mul ExprM ]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-25&#34;&gt;&lt;a href=&#34;#cb21-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-26&#34;&gt;&lt;a href=&#34;#cb21-26&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;操作を追加しよう&#34;&gt;操作を追加しよう&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; を追加してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Operation/Eval.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Eval&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;eval&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;eval&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchVariant (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt;) evalField&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  eval ::&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  evalField ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、インスタンス定義もこのファイルに定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Operation/Eval.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-9&#34;&gt;&lt;a href=&#34;#cb23-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-10&#34;&gt;&lt;a href=&#34;#cb23-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-11&#34;&gt;&lt;a href=&#34;#cb23-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-12&#34;&gt;&lt;a href=&#34;#cb23-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-13&#34;&gt;&lt;a href=&#34;#cb23-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-14&#34;&gt;&lt;a href=&#34;#cb23-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-15&#34;&gt;&lt;a href=&#34;#cb23-15&#34;&gt;&lt;/a&gt;  eval &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprB&lt;/span&gt;
&lt;span id=&#34;cb23-16&#34;&gt;&lt;a href=&#34;#cb23-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-17&#34;&gt;&lt;a href=&#34;#cb23-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-18&#34;&gt;&lt;a href=&#34;#cb23-18&#34;&gt;&lt;/a&gt;  eval &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;
&lt;span id=&#34;cb23-19&#34;&gt;&lt;a href=&#34;#cb23-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-20&#34;&gt;&lt;a href=&#34;#cb23-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-21&#34;&gt;&lt;a href=&#34;#cb23-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-22&#34;&gt;&lt;a href=&#34;#cb23-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-23&#34;&gt;&lt;a href=&#34;#cb23-23&#34;&gt;&lt;/a&gt;  evalField _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-24&#34;&gt;&lt;a href=&#34;#cb23-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-25&#34;&gt;&lt;a href=&#34;#cb23-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-26&#34;&gt;&lt;a href=&#34;#cb23-26&#34;&gt;&lt;/a&gt;  evalField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval l &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; eval r&lt;/span&gt;
&lt;span id=&#34;cb23-27&#34;&gt;&lt;a href=&#34;#cb23-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-28&#34;&gt;&lt;a href=&#34;#cb23-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-29&#34;&gt;&lt;a href=&#34;#cb23-29&#34;&gt;&lt;/a&gt;  evalField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval l &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; eval r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで使えるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb24-1&#34;&gt;&lt;a href=&#34;#cb24-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-2&#34;&gt;&lt;a href=&#34;#cb24-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;50&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-3&#34;&gt;&lt;a href=&#34;#cb24-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-4&#34;&gt;&lt;a href=&#34;#cb24-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; eval e1&lt;/span&gt;
&lt;span id=&#34;cb24-5&#34;&gt;&lt;a href=&#34;#cb24-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-6&#34;&gt;&lt;a href=&#34;#cb24-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; eval e2&lt;/span&gt;
&lt;span id=&#34;cb24-7&#34;&gt;&lt;a href=&#34;#cb24-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;何かに使えないかなー。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/10-04-NoStarIsType.html</id><title type="text">NoStarIsType 言語拡張が必要になるとき</title><updated>October 13, 2019</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/10-04-NoStarIsType.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;λ ghc &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Glorious&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Glasgow&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Haskell&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Compilation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System&lt;/span&gt;, version &lt;span class=&#34;fl&#34;&gt;8.8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;Expected&lt;/span&gt; kind ‘&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k0’, but ‘10’ has kind ‘&lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;’&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; 10’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoStarIsType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;型レベル四則演算&#34;&gt;型レベル四則演算&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/GHC-TypeLits.html&#34;&gt;GHC.TypeLits&lt;/a&gt; に用意されている関数を使って型レベル自然数の四則演算を行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XDataKinds&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XTypeOperators&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;Expected&lt;/span&gt; kind ‘&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k0’, but ‘10’ has kind ‘&lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;’&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; 10’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;掛け算だけエラーになりましたね・・・。それぞれの演算子のカインドを確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(+) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(-) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Mod&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(*) ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1つだけ変ですね。これは &lt;code&gt;*&lt;/code&gt; が &lt;strong&gt;Bool&lt;/strong&gt; や &lt;strong&gt;Maybe&lt;/strong&gt; などのよくある基本的な型 (lifted boxed types) のカインドの記号として割り当てられているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1つ前の &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/migration/8.6&#34;&gt;GHC 8.6&lt;/a&gt; から &lt;strong&gt;StarIsType&lt;/strong&gt; 言語拡張がデフォルトで有効になり、&lt;code&gt;*&lt;/code&gt; カインドは &lt;code&gt;Type&lt;/code&gt; カインドのシノニムとして定義されるようになりました。なので明示的に &lt;strong&gt;StarIsType&lt;/strong&gt; を無効にすると直ります。(この辺りの話題については既に &lt;a href=&#34;https://www.reddit.com/r/haskell_jp/comments/8t8p4j/typeoperators_nostaristype%E3%81%AE%E5%BB%B6%E6%9C%9F%E3%81%AE%E6%8F%90%E6%A1%88/&#34;&gt;“TypeOperators =&amp;gt; NoStarIsType”の延期の提案&lt;/a&gt; などにまとまっているため、気になる方はご参照ください)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoStarIsType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(*) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということでこれで無事に型レベルの掛け算ができるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kind!&lt;/code&gt; のエイリアスとして &lt;code&gt;k!&lt;/code&gt; コマンド欲しい。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;k!&lt;/code&gt; コマンドのマージリクエストが作られました &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/1934&#34;&gt;Allow completion for GHCi commands with option &lt;code&gt;!&lt;/code&gt; (#17345)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ありがとうございます :)&lt;/p&gt;
&lt;p&gt;GHC に組み込まれるまでは、&lt;code&gt;~/.ghci&lt;/code&gt; や &lt;code&gt;&amp;lt;proj&amp;gt;/.ghci&lt;/code&gt; に以下の内容を記述しておけば &lt;code&gt;:kind!&lt;/code&gt; のエイリアスとして &lt;code&gt;:k!&lt;/code&gt; が使えるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:def! k! (\e -&amp;gt; return (&amp;quot;:kind! &amp;quot; ++ e))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; :k! 1+1
1+1 :: Nat
= 2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.8.1/docs/html/users_guide/glasgow_exts.html?highlight=nostaristype#extension-StarIsType&#34;&gt;StarIsType - Glasgow Haskell Compiler User’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/migration/8.6&#34;&gt;GHC 8.6.x Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/haskell_jp/comments/8t8p4j/typeoperators_nostaristype%E3%81%AE%E5%BB%B6%E6%9C%9F%E3%81%AE%E6%8F%90%E6%A1%88/&#34;&gt;“TypeOperators =&amp;gt; NoStarIsType”の延期の提案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html</id><title type="text">Ap Monoid</title><updated>March  3, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html"/><summary type="html">&lt;p&gt;まずは以下の関数 &lt;code&gt;f&lt;/code&gt; を考えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、この &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; をもっと短くカッコよく書けないかな？と考えます。&lt;/p&gt;
&lt;p&gt;何となく &lt;code&gt;mconcat&lt;/code&gt; で置き換えれそうな気がしたんですよ・・・。 だけど、動作が変わってしまうんです・・・。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題です。なぜ &lt;code&gt;mconcat&lt;/code&gt; にすると結果が異なるのでしょうか？ また、&lt;code&gt;f = fmap concat . sequence&lt;/code&gt; という定義を畳み込みを使って書き直すことはできるのでしょうか？&lt;/p&gt;
&lt;p&gt;このことを考えていたら &lt;code&gt;Ap&lt;/code&gt; モノイドにたどり着きました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;関数-f-は何を行っているのか&#34;&gt;関数 f は何を行っているのか？&lt;/h2&gt;
&lt;p&gt;まずは &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; がどのように動作するか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;f e2&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは簡単ですね。では &lt;code&gt;f = mconcat&lt;/code&gt; の場合も確認します。(ここでの定義はデフォルト実装の &lt;code&gt;mconcat = foldr (&amp;lt;&amp;gt;) mempty&lt;/code&gt; を使います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ココ!!!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうやら &lt;code&gt;mconcat&lt;/code&gt; に変更すると &lt;code&gt;Just [3,4] &amp;lt;&amp;gt; Nothing&lt;/code&gt; の計算で結果が変わってくるということがわかります。 つまり、求めている計算は &lt;code&gt;Monoid&lt;/code&gt; の演算ではなく &lt;code&gt;Monad (Applicative)&lt;/code&gt; の &lt;code&gt;Effect&lt;/code&gt; なのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 雰囲気でいえば、こんな感じになれば良いかも？&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- mconcat で行われる演算&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 期待しているのは Maybe モナドの Effect&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;畳み込んでみる&#34;&gt;畳み込んでみる&lt;/h2&gt;
&lt;p&gt;何となく方向性は掴めました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算の途中で出てきたこの形を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (とりあえず) こうしたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;形だけ見れば &lt;code&gt;foldr (&amp;gt;&amp;gt;) mempty&lt;/code&gt; とすれば良さげです。試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;f e2&lt;/code&gt; は良い感じですが、今度は &lt;code&gt;f e1&lt;/code&gt; の結果がおかしくなりました・・・。 それはそうですよね。&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; で畳み込んでいるため、どこかで &lt;code&gt;Nothing&lt;/code&gt; が出てきたら計算全体は &lt;code&gt;Nothing&lt;/code&gt; になりますよね。&lt;/p&gt;
&lt;p&gt;これってつまり、&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; と &lt;code&gt;リスト&lt;/code&gt; モノイドの演算の両方が必要ってことになりますね・・・。 オリジナルの &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; の定義も確かにそんな感じです。&lt;/p&gt;
&lt;h2 id=&#34;自分で定義しよう&#34;&gt;自分で定義しよう！&lt;/h2&gt;
&lt;p&gt;もう一度整理しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算対象のリスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;[ m_a1, m_a2, m_a3, me ]&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- まずは Effect を実行したい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;m_a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; me&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- m_a1, m_a2, m_a3, me の結果をそれぞれ a1, a2, a3, e として&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Monoid の演算を行いたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 具体的に、値が全部 Just でラップされていると考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どこか一箇所に Nothing がある (この場合 m_a2 が Nothing) と考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 以下のようになってはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- こんな感じで計算が進むモノイドが欲しい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e)&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-32&#34;&gt;&lt;a href=&#34;#cb8-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-33&#34;&gt;&lt;a href=&#34;#cb8-33&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-34&#34;&gt;&lt;a href=&#34;#cb8-34&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-35&#34;&gt;&lt;a href=&#34;#cb8-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような挙動を行う &lt;code&gt;Monoid&lt;/code&gt; を新しく定義してみます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSequence ::&lt;/span&gt; m a }&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  ma &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; mb &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;      a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence ma&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;      b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence mb&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に確かめてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (&amp;lt;&amp;gt;) に変更した。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1)&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2)&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;期待通りに動いていますね。&lt;code&gt;foldMap&lt;/code&gt; を使うともう少し短くかけます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ap-モノイド&#34;&gt;Ap モノイド&lt;/h2&gt;
&lt;p&gt;ここまでで定義した &lt;code&gt;Sequence&lt;/code&gt; モノイドは &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Ap&#34;&gt;Ap&lt;/a&gt; という名前で定義されています。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;Monad&lt;/code&gt; で話を進めましたが、実際は &lt;code&gt;Applicative&lt;/code&gt; でも成り立ちます。 最初の例を &lt;code&gt;Ap&lt;/code&gt; モノイドで置き換えれば以下のようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ap&lt;/code&gt; モノイドの使い道がわかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2019/02/monoid-for-haskellers/&#34;&gt;Haskellerのためのモノイド完全ガイド&lt;/a&gt; でも解説されているので、気になった方はこちらもどうぞ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmap fold . sequenceA&lt;/code&gt; と &lt;code&gt;getAp . foldMap Ap&lt;/code&gt; を比較すると型クラス制約が若干違う&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequenceA&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; sequenceA ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Traversable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/08-24-let-where-letin.html</id><title type="text">let, where, let...in の使い分け</title><updated>March  2, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/08-24-let-where-letin.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;アルバイトの学生に良く質問される内容の1つに「&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;let...in&lt;/code&gt; はどういう風に使い分ければ良いですか？」というものがあります。ちょっと前に &lt;strong&gt;twitter&lt;/strong&gt; でも同じような話題を見かけたので、少しまとめてみました。&lt;/p&gt;
&lt;p&gt;また、様々な Haskell 書籍で同様の内容について触れられていますが、明確な指針は無く個人の好みという感じがします。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;let-を使うタイミング-do-の中&#34;&gt;let を使うタイミング (do の中)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;上記のコードのように &lt;code&gt;do&lt;/code&gt; の中で束縛された変数 &lt;code&gt;x&lt;/code&gt; を使って新しい変数 &lt;code&gt;y&lt;/code&gt; を宣言する時に良く使います&lt;/li&gt;
&lt;li&gt;他の変数に依存していない &lt;code&gt;z&lt;/code&gt; はどの書き方でも書けますが、通常は &lt;code&gt;let&lt;/code&gt; で続けて書くことが多いと思います&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; は &lt;code&gt;do&lt;/code&gt; (またはリスト内包表記) 以外では使えません&lt;/li&gt;
&lt;li&gt;内部的には &lt;code&gt;do { let decls; stmts } = let decls in do { stmts }&lt;/code&gt; という変換が行われます。(リスト内包表記は &lt;code&gt;[ e | let decls, Q ] = let decls in [ e | Q ]&lt;/code&gt; という変換です。)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where-で書いた場合&#34;&gt;where で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- where version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ((x&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; を使って &lt;code&gt;x&lt;/code&gt; を宣言することはできません。(&lt;code&gt;do&lt;/code&gt; を脱糖した形を見ると、できない感じが伝わりやすいかもしれません)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- do を使わない形&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ((x&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z))&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;    z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;何百行も続く巨大な &lt;code&gt;do&lt;/code&gt; だと &lt;code&gt;where&lt;/code&gt; で宣言されている変数までの距離が遠いため、可読性が落ちます。&lt;code&gt;z&lt;/code&gt; を &lt;code&gt;where&lt;/code&gt; で書くか &lt;code&gt;let&lt;/code&gt; で書くかはケースバイケースかもしれません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;letin-で書いた場合&#34;&gt;let…in で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let...in version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let...in&lt;/code&gt; を使うとインデントに気配りする必要があるので面倒です
&lt;ul&gt;
&lt;li&gt;例えば &lt;code&gt;do&lt;/code&gt; の中で &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;in&lt;/code&gt; の先頭を合わせるとコンパイルエラーになります&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let...in version (compile error)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;where-を使うタイミング-ガード&#34;&gt;where を使うタイミング (ガード)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;calcBmi ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;calcBmi cm kg&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.5&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;痩せてるね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;25.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;普通だね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;30.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ぽっちゃりだね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;太っているね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    bmi &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; kg &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; (m&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;    m   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cm &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- *Main&amp;gt; putStrLn $ calcBmi 170 60&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 普通だね&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;このように、ガードで共通する変数を宣言する場合に &lt;code&gt;where&lt;/code&gt; を使うと見通しが良くなります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; の中ではないため、当然 &lt;code&gt;let&lt;/code&gt; は使えません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;letin-で書いた場合-1&#34;&gt;let…in で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiWayIf #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;calcBmi ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;calcBmi cm kg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; m   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cm &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;      bmi &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; kg &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; (m&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.5&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;痩せてるね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;25.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;普通だね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;30.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ぽっちゃりだね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;太っているね&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;もし &lt;code&gt;let...in&lt;/code&gt; を使って同じように書く場合は、上記のように &lt;code&gt;MultiWayIf&lt;/code&gt; を使うことになるでしょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;letin-を使うタイミング&#34;&gt;let…in を使うタイミング&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Programming in Haskell 2nd Edition より引用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;app (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; st) x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; st x&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g st &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (\s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (g x, s&amp;#39;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;こんな感じの関数を書くときにはとても便利です&lt;/li&gt;
&lt;li&gt;ただ、このようなケースというのはあまり遭遇しないので、個人的には使わないようにしています。無くてもほぼ困らないです
&lt;ul&gt;
&lt;li&gt;理由1: レイアウトルールを気にしなければならない点がとても面倒なので&lt;/li&gt;
&lt;li&gt;理由2: ポイントフリースタイルで書くのが好きなので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where-で書いた場合-1&#34;&gt;where で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Programming in Haskell 2nd Edition より引用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;app (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; st) x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; st x&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f g&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;f g st s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (g x, s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;    (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- もしくは&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g st &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;      f s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (g x, s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;          (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let...in&lt;/code&gt; で書いたときよりも可読性が落ちてしまったように思います&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;where-と-letin-の違い&#34;&gt;where と let…in の違い&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;let...in&lt;/code&gt; と &lt;code&gt;where&lt;/code&gt; の明確な違いは &lt;code&gt;let...in&lt;/code&gt; が式なのに対して &lt;code&gt;where&lt;/code&gt; が節だという点です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- OK&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- NG&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; (x &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;構文上のどこに式が出現できるかという規則については &lt;code&gt;Haskell 2010 Language Report&lt;/code&gt; に詳しく記載されています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;このように、&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;let...in&lt;/code&gt; はどちらでも書けることが多いので、適材適所で自分の感性を信じて使いこなすと良いのではないかと思います。&lt;/p&gt;
&lt;p&gt;そういえばラムダノートさんから&lt;a href=&#34;https://www.lambdanote.com/collections/haskell&#34;&gt;プログラミングHaskellの第2版&lt;/a&gt;が発売されましたね。書籍の内容が個人的にとても好きなので、弊社のアルバイトの人には推薦図書として英語版を読んでもらっていました。&lt;/p&gt;
&lt;p&gt;これからは日本語で読めるようになったので、これを機に Haskell に入門してみるのも良いかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;Haskell 2010 Language Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;すごいHaskellたのしく学ぼう！&lt;/li&gt;
&lt;li&gt;Programming in Haskell 2nd Edition&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html</id><title type="text">stack で管理されたプロジェクトを cabal でビルドするために</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html"/><summary type="html">&lt;p&gt;Haskell のビルドツールといえば &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; です。ちょっと前までは &lt;strong&gt;cabal&lt;/strong&gt; より &lt;strong&gt;stack&lt;/strong&gt; の方が流行っていたのですが、最近は開発も落ち着いているようであまり動きがありません。それよりも &lt;strong&gt;cabal&lt;/strong&gt; の &lt;strong&gt;nix-style local build&lt;/strong&gt; が非常に使いやすく、近頃では &lt;strong&gt;stack&lt;/strong&gt; から &lt;strong&gt;cabal&lt;/strong&gt; に移行しているプロジェクトも多くあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; を使っていて改善したら良いなぁと思う部分としては、新しい &lt;strong&gt;GHC&lt;/strong&gt; やライブラリをすぐに使おうと思っても &lt;strong&gt;LTS&lt;/strong&gt; や &lt;strong&gt;nightly&lt;/strong&gt; に入っていないため使えなかったり、&lt;strong&gt;Backpack&lt;/strong&gt; が未だに使えなかったりするところでしょうか。&lt;/p&gt;
&lt;p&gt;ただ、ビルドの再現性という点においては &lt;strong&gt;stack&lt;/strong&gt; の方が優秀だと思っているので今は両方使っています。(&lt;strong&gt;index-state&lt;/strong&gt; と &lt;strong&gt;freeze&lt;/strong&gt; ファイルを組み合わせれば &lt;strong&gt;cabal&lt;/strong&gt; でも再現性が保証されそうな気がしますが、どうなんだろう)&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;stack&lt;/strong&gt; で管理されたプロジェクトを確実に &lt;strong&gt;cabal&lt;/strong&gt; でビルドするための方法についてまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt; に載ってた &lt;strong&gt;Stackage&lt;/strong&gt; の使い方の紹介でもあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;ここでは &lt;code&gt;stack&lt;/code&gt; で管理されていて、&lt;code&gt;cabal&lt;/code&gt; ファイルにバージョン制約が明記されていないという、良くあるシチュエーションを考えます。&lt;/p&gt;
&lt;p&gt;どんなプロジェクトでも良いのですが、具体的には &lt;a href=&#34;https://github.com/arcticmatt/dino-brick&#34;&gt;arcticmatt/dino-brick&lt;/a&gt; のようなプロジェクトです。&lt;code&gt;stack.yaml&lt;/code&gt; は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-8.23&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dino.cabal&lt;/code&gt; の &lt;code&gt;dependencies&lt;/code&gt; には、ほとんどバージョンが明記されていません。(stack の場合はスナップショットが決まると自動的にパッケージのバージョンが決まるため、明示する必要はあまり無いのです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプロジェクトを &lt;code&gt;cabal&lt;/code&gt; でビルドするためにはどうしたら良いんだろうか？というお話です。何もしなくてもビルドできるプロジェクトも結構あるんですが、ハマる時もあります・・・。&lt;/p&gt;
&lt;h2 id=&#34;package.yaml-から-cabal-ファイルを生成する&#34;&gt;package.yaml から cabal ファイルを生成する&lt;/h2&gt;
&lt;p&gt;リポジトリに &lt;code&gt;package.yaml&lt;/code&gt; しか含まれていない場合は、&lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;cabal&lt;/code&gt; ファイルを生成しましょう。&lt;/p&gt;
&lt;p&gt;以下のコマンドでビルドすることなくすぐに生成できます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --dry-run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回は &lt;code&gt;dino.cabal&lt;/code&gt; が最初からリポジトリに含まれているため何もしなくても良さそうですね。&lt;/p&gt;
&lt;h2 id=&#34;cabal-でビルドしてみよう&#34;&gt;cabal でビルドしてみよう&lt;/h2&gt;
&lt;p&gt;とりあえずビルドしてみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update
Downloading the latest package list from hackage.haskell.org
To revert to previous state run:
    cabal v2-update &amp;#39;hackage.haskell.org,2020-01-19T06:12:36Z&amp;#39;

$ cabal build
...

src/UI.hs:142:56: error:
    • Couldn&amp;#39;t match expected type ‘App s0 e0 n0’
                  with actual type ‘Game’
    • In the fourth argument of ‘customMain’, namely ‘g’
      In a stmt of a &amp;#39;do&amp;#39; block:
        customMain (V.mkVty V.defaultConfig) (Just chan) app g
      In the expression:
        do chan &amp;lt;- newBChan 10
           forkIO
             $ forever
                 $ do modifyIORef counter (+ 1)
                      c&amp;#39; &amp;lt;- readIORef counter
                      ....
           g &amp;lt;- initGame 0
           customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |
142 |   customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |                                                        ^
cabal: Failed to build dino-0.1.0.0 (which is required by exe:dino from
dino-0.1.0.0).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーがいくつも出てしまいました。上記の結果はそのうちの最後の1つだけを表示しています。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;stack build&lt;/code&gt; だとビルドできます。&lt;/p&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; だとビルドできて、&lt;code&gt;cabal&lt;/code&gt; だと失敗してしまう原因はビルド時にパッケージのバージョンにあります。どのパッケージが原因かと言うと、今回は &lt;a href=&#34;https://hackage.haskell.org/package/brick&#34;&gt;brick&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の場合は &lt;a href=&#34;https://www.stackage.org/lts-8.23&#34;&gt;LTS-8.23&lt;/a&gt; に含まれるバージョンを利用することになるので &lt;a href=&#34;https://www.stackage.org/lts-8.23/package/brick-0.17.2&#34;&gt;brick-0.17.2&lt;/a&gt; を利用します。&lt;/p&gt;
&lt;p&gt;一方で &lt;code&gt;cabal&lt;/code&gt; の場合は &lt;code&gt;cabal update&lt;/code&gt; を最後に実行した時の &lt;code&gt;Hackage&lt;/code&gt; の最新バージョンが利用されます。これは明示的なバージョン制約が &lt;code&gt;cabal&lt;/code&gt; ファイルに記述されていないためです。そのため &lt;a href=&#34;https://hackage.haskell.org/package/brick-0.50.1&#34;&gt;brick-0.50.1&lt;/a&gt; などが利用されます。&lt;/p&gt;
&lt;p&gt;バージョンアップによって後方互換性が保たれている場合は何も考えずにビルドが通るのですが、GHC のバージョンが変わるタイミングなどでは破壊的変更が含まれている場合も多いため、どこかでビルドが壊れます。&lt;/p&gt;
&lt;p&gt;今回のプロジェクトでは &lt;a href=&#34;https://github.com/jtdaugherty/brick/blob/master/CHANGELOG.md#047&#34;&gt;brick-0.47&lt;/a&gt; の変更によって &lt;code&gt;Brick.Main.customMain&lt;/code&gt; の型が変わり、その結果ビルドエラーになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.46&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;        &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.47&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、原因が特定できれば、修正は簡単です。&lt;code&gt;brick&lt;/code&gt; にバージョン制約を付けるだけです。(0.47 でビルドできるようにコードを修正する方法ももちろん考えられます)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick == 0.46       -- 破壊的変更が起きる前のバージョンを指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトはこれで上手く動きました。&lt;/p&gt;
&lt;p&gt;しかし、どのバージョンで壊れたかどうかを毎回調べるのはかなりつらいです。そのため、もっと良い方法として &lt;code&gt;LTS-8.23&lt;/code&gt; のバージョン制約を使ってみましょう。&lt;/p&gt;
&lt;h2 id=&#34;cabal-freeze-コマンド&#34;&gt;cabal freeze コマンド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; には &lt;code&gt;cabal freeze&lt;/code&gt; というコマンドがあります。アプリケーション開発で便利な機能です。&lt;/p&gt;
&lt;p&gt;コマンドを実行すると &lt;code&gt;cabal.project.freeze&lt;/code&gt; というファイルが作られます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal freeze
Wrote freeze file: dino-brick/cabal.project.freeze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルは一言でいえば &lt;code&gt;npm&lt;/code&gt; の &lt;code&gt;package-lock.json&lt;/code&gt; ファイルと同じです。ビルドの再現性を保証するためのものです。&lt;/p&gt;
&lt;p&gt;例えば、先ほどの &lt;code&gt;dino.cabal&lt;/code&gt; ファイルで &lt;code&gt;brick&lt;/code&gt; のバージョンを &lt;code&gt;^&amp;gt;= 0.46&lt;/code&gt; のように指定した場合を考えてみましょう。この指定方法は &lt;code&gt;brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47&lt;/code&gt; と同じ意味になります。(cabal 2.0 から使えます)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.46      -- brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47 と同じ意味
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば、会社のデスクトップPCでビルドしたときに &lt;code&gt;brick-0.46&lt;/code&gt; がインストールされたとしましょう。&lt;/p&gt;
&lt;p&gt;次の日の朝、バグフィックスされた &lt;code&gt;brick-0.46.1&lt;/code&gt; が Hackage にアップロードされました。&lt;/p&gt;
&lt;p&gt;その日の午後、自宅のノートPCで &lt;code&gt;cabal update &amp;amp;&amp;amp; cabal build&lt;/code&gt; を行った場合、インストールされるのは &lt;code&gt;brick-0.46.1&lt;/code&gt; になります。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;brick ^&amp;gt;= 0.46&lt;/code&gt; という指定方法では環境ごとに同じバージョンが使われていることを保証できません。そのため、&lt;code&gt;cabal freeze&lt;/code&gt; コマンドで &lt;code&gt;cabal.project.freeze&lt;/code&gt; を生成し、コマンドを実行した環境で実際に利用されている具体的なバージョンを記録しておきます。これは &lt;code&gt;stack&lt;/code&gt; のスナップショットと同じようなものです。&lt;/p&gt;
&lt;p&gt;実際に生成されたファイルの中身はこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;constraints: any.Cabal ==2.4.0.1,
             any.MonadRandom ==0.5.1.2,
             any.QuickCheck ==2.13.2,
             QuickCheck +templatehaskell,
             any.StateVar ==1.2,
             any.adjunctions ==4.4,
             any.ansi-terminal ==0.10.2,
             ansi-terminal -example,
             any.ansi-wl-pprint ==0.6.9,
             ansi-wl-pprint -example,
             any.array ==0.5.3.0,
             any.base ==4.12.0.0,
             any.base-orphans ==0.8.1,
             any.bifunctors ==5.5.6,
             bifunctors +semigroups +tagged,
             any.binary ==0.8.6.0,
             any.binary-orphans ==1.0.1,
             any.blaze-builder ==0.4.1.0,
             any.brick ==0.46,
             brick -demos,
             any.bytes ==0.16,
             bytes +test-doctests,
             any.bytestring ==0.10.8.2,
             any.cabal-doctest ==1.0.8,
             any.call-stack ==0.2.0,
             any.case-insensitive ==1.2.1.0,
             any.cereal ==0.5.8.1,
             cereal -bytestring-builder,
             any.colour ==2.3.5,
             any.comonad ==5.0.6,
             comonad +containers +distributive +test-doctests,
             any.config-ini ==0.2.4.0,
             config-ini -enable-doctests,
             any.containers ==0.6.0.1,
             any.contravariant ==1.5.2,
             contravariant +semigroups +statevar +tagged,
             any.data-clist ==0.1.2.3,
             any.deepseq ==1.4.4.0,
             any.directory ==1.3.3.0,
             any.distributive ==0.6.1,
             distributive +semigroups +tagged,
             any.dlist ==0.8.0.7,
             any.exceptions ==0.10.4,
             exceptions +transformers-0-4,
             any.filepath ==1.4.2.1,
             any.free ==5.1.3,
             any.ghc-boot-th ==8.6.5,
             any.ghc-prim ==0.5.3,
             any.hashable ==1.3.0.0,
             hashable -examples +integer-gmp +sse2 -sse41,
             any.integer-gmp ==1.0.2.0,
             any.integer-logarithms ==1.0.3,
             integer-logarithms -check-bounds +integer-gmp,
             any.invariant ==0.5.3,
             any.kan-extensions ==5.2,
             any.lens ==4.18.1,
             lens -benchmark-uniplate -dump-splices +inlining -j -old-inline-pragmas -safe +test-doctests +test-hunit +test-properties +test-templates +trustworthy,
             any.linear ==1.20.9,
             linear -herbie +template-haskell,
             any.megaparsec ==7.0.5,
             megaparsec -dev,
             any.microlens ==0.4.11.2,
             any.microlens-mtl ==0.2.0.1,
             any.microlens-th ==0.4.3.2,
             any.mtl ==2.2.2,
             any.optparse-applicative ==0.15.1.0,
             any.parallel ==3.2.2.0,
             any.parsec ==3.1.13.0,
             any.parser-combinators ==1.2.1,
             parser-combinators -dev,
             any.pretty ==1.1.3.6,
             any.primitive ==0.7.0.0,
             any.process ==1.6.5.0,
             any.profunctors ==5.5.1,
             any.random ==1.1,
             any.reflection ==2.1.5,
             reflection -slow +template-haskell,
             any.rts ==1.0,
             any.scientific ==0.3.6.2,
             scientific -bytestring-builder -integer-simple,
             any.semigroupoids ==5.3.4,
             semigroupoids +comonad +containers +contravariant +distributive +doctests +tagged +unordered-containers,
             any.semigroups ==0.19.1,
             semigroups +binary +bytestring -bytestring-builder +containers +deepseq +hashable +tagged +template-haskell +text +transformers +unordered-containers,
             any.splitmix ==0.0.3,
             splitmix -optimised-mixer +random,
             any.stm ==2.5.0.0,
             any.tagged ==0.8.6,
             tagged +deepseq +transformers,
             any.template-haskell ==2.14.0.0,
             any.terminfo ==0.4.1.2,
             any.text ==1.2.3.1,
             any.text-zipper ==0.10.1,
             any.th-abstraction ==0.3.1.0,
             any.time ==1.8.0.2,
             any.transformers ==0.5.6.2,
             any.transformers-base ==0.4.5.2,
             transformers-base +orphaninstances,
             any.transformers-compat ==0.6.5,
             transformers-compat -five +five-three -four +generic-deriving +mtl -three -two,
             any.type-equality ==1,
             any.unix ==2.7.2.2,
             any.unordered-containers ==0.2.10.0,
             unordered-containers -debug,
             any.utf8-string ==1.0.1.1,
             any.vector ==0.12.0.3,
             vector +boundschecks -internalchecks -unsafechecks -wall,
             any.void ==0.7.3,
             void -safe,
             any.vty ==5.26,
             any.word-wrap ==0.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルと &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; ファイルでバージョンが異なる場合は &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; のバージョンが優先されるようです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.47      -- ビルドが失敗するバージョン制約を指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ls cabal.project.freeze 
cabal.project.freeze
$ cabal build
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino

$ cabal freeze
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そもそも制約を満たさない場合は &lt;code&gt;cabal freeze&lt;/code&gt; が失敗するみたいです。&lt;/p&gt;
&lt;h2 id=&#34;スナップショットに対応した-freeze-ファイルを使おう&#34;&gt;スナップショットに対応した freeze ファイルを使おう&lt;/h2&gt;
&lt;p&gt;さて、それではリポジトリを &lt;code&gt;clone&lt;/code&gt; した直後に戻しましょう。こんな状態です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Stackage&lt;/code&gt; のスナップショットの &lt;code&gt;URL&lt;/code&gt; の後ろに &lt;code&gt;cabal.config&lt;/code&gt; を付けた &lt;a href=&#34;https://www.stackage.org/lts-8.23/cabal.config&#34;&gt;https://www.stackage.org/lts-8.23/cabal.config&lt;/a&gt; にアクセスすると &lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルとして利用可能なテキストファイルが表示されます。&lt;/p&gt;
&lt;p&gt;これをそのまま保存してビルドするだけで全てが上手くいきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl https://www.stackage.org/lts-8.23/cabal.config &amp;gt; cabal.project.freeze
$ cabal build
[__2] fail (backjumping, conflict set: base, dino, optparse-applicative)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: optparse-applicative, base, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おっと忘れていました。&lt;code&gt;LTS-8.23&lt;/code&gt; は &lt;code&gt;GHC-8.0.2&lt;/code&gt; でしたね。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;with-compiler&lt;/code&gt; の頭文字) オプションで利用する &lt;code&gt;GHC&lt;/code&gt; を切り替えてビルドしましょう！&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build -w ghc-8.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; でビルドが通っていれば、&lt;code&gt;cabal&lt;/code&gt; でも通る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cabal freeze&lt;/code&gt; を使うとスナップショットのようにバージョンを記録できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stackage&lt;/code&gt; のスナップショットの URL の最後に &lt;code&gt;cabal.config&lt;/code&gt; を付けると &lt;code&gt;freeze&lt;/code&gt; ファイルを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-freeze&#34;&gt;5.4.6. cabal v2-freeze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html</id><title type="text">cabal の build-tool-depends フィールド</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html"/><summary type="html">&lt;p&gt;cabal の &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;build-tool-depends&lt;/a&gt; というフィールドが便利だったので紹介します。&lt;/p&gt;
&lt;p&gt;テストを書くときに &lt;a href=&#34;https://hackage.haskell.org/package/hspec-discover&#34;&gt;hspec-discover&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/tasty-discover&#34;&gt;tasty-discover&lt;/a&gt; などを使う場合、このフィールドを設定しておくことで依存している実行ファイルを自動的にダウンロードして使ってくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal --version
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library &lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;サンプルプロジェクトの構成&#34;&gt;サンプルプロジェクトの構成&lt;/h2&gt;
&lt;p&gt;全体のディレクトリ構成は以下のようになっているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── example.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    ├── LibSpec.hs
    └── Spec.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それぞれのファイルの内容は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- src/Lib.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; (someFunc) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;someFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;someFunc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/LibSpec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LibSpec&lt;/span&gt; (spec) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;spec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Spec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/Spec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;-- example.cabal
cabal-version: 2.4
name:          example
version:       0.1.0.0

library
  exposed-modules:  Lib
  hs-source-dirs:   src
  build-depends:    base &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
  default-language: Haskell2010

test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような状況で &lt;code&gt;cabal&lt;/code&gt; や &lt;code&gt;stack&lt;/code&gt; がどのように振舞うか見ていきましょう。&lt;/p&gt;
&lt;p&gt;現時点では &lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルは存在していません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ hspec-discover
bash: hspec-discover: コマンドが見つかりません&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stack&#34;&gt;stack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルが無い状態で &lt;code&gt;stack test&lt;/code&gt; を実行すると以下のようにエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のようにインストールした場合は、問題無く動作します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; がファイルを自動的に見つけてくれたので、コンパイルエラーになりました。&lt;/p&gt;
&lt;p&gt;次に進む前に実行ファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.local/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-depends-に追加した場合&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルの &lt;code&gt;build-depends&lt;/code&gt; に追加した場合はどうなるのでしょうか？&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example
    , hspec-discover  -- 新しく追加した

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では &lt;code&gt;stack test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルがローカル環境に存在しなくても自動的に &lt;code&gt;hspec-discover&lt;/code&gt; が動作しています。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; プロジェクトでは &lt;code&gt;hspec-discover&lt;/code&gt; を依存関係 (&lt;code&gt;build-depends&lt;/code&gt;) に追加するだけで良い感じにテストが進みます。&lt;/p&gt;
&lt;h2 id=&#34;cabal&#34;&gt;cabal&lt;/h2&gt;
&lt;p&gt;同様に &lt;code&gt;cabal&lt;/code&gt; の場合も確かめてみましょう。(&lt;code&gt;example.cabal&lt;/code&gt; ファイルから &lt;code&gt;hspec-discover&lt;/code&gt; を削除しておきます)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と同様のエラーになりました。&lt;/p&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合-1&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に &lt;code&gt;cabal test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の場合と同じように、ちゃんと動いていますね。&lt;/p&gt;
&lt;h3 id=&#34;build-depends-に追加した場合-1&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;まずはバイナリファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.cabal/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルは先ほどと同じように &lt;code&gt;build-depends&lt;/code&gt; に &lt;code&gt;hspec-discover&lt;/code&gt; を追加した状態です。&lt;/p&gt;
&lt;p&gt;テストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と異なる結果になりましたね・・・。僕は今までこの結果への対処法は &lt;code&gt;hspec-discover&lt;/code&gt; をインストールしておくしかないと思っていました。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;build-tool-depends&lt;/code&gt; をフィールドを利用することで &lt;code&gt;stack&lt;/code&gt; と同じ挙動になるということがわかりました。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;build-tool-depends-に追加した場合&#34;&gt;build-tool-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; に追加するとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  build-tool-depends:                 -- 新たに追加した行
    , hspec-discover:hspec-discover   -- 新たに追加した行

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-depends&lt;/code&gt; が &lt;code&gt;&amp;lt;package_name&amp;gt;&lt;/code&gt; という指定方法でしたが、&lt;code&gt;build-tool-depends&lt;/code&gt; では &lt;code&gt;&amp;lt;package_name&amp;gt;:&amp;lt;exe_name&amp;gt;&lt;/code&gt; という指定方法になっている点に注意です。&lt;/p&gt;
&lt;p&gt;バージョン制約が必要な場合は &lt;code&gt;build-depends&lt;/code&gt; と同じように指定できます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;hspec-discover:hspec-discover ^&amp;gt;=2.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでテストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;stack&lt;/code&gt; と同じような挙動になりました！happy!&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな便利なフィールドがあるなんて全然知りませんでした・・・。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; を指定しておけば、実行ファイルが無くても大丈夫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; は初心者に優しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/ghc/blog/20200116-ghc-8.8.2-released.html&#34;&gt;GHC-8.8.2 がリリース&lt;/a&gt;されましたね。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;cabal user guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html</id><title type="text">Memo - unexpected At most 9 numbers are allowed per version number part</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html"/><summary type="html">&lt;p&gt;GHC-8.8 への移行中に GitHub Actions で以下のようなエラーが発生しました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;proj/dist-newstyle/src/barbies-6f24224e2c384e2f/barbies.cabal:2:31: error:
unexpected At most 9 numbers are allowed per version number part

    1 | name:           barbies
    2 | version:        1.999999999999
      |                               ^

##[error]Process completed with exit code 1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初めて見るエラーだったのでメモとして残しておきます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;エラーが発生した理由&#34;&gt;エラーが発生した理由&lt;/h2&gt;
&lt;p&gt;エラー発生の原因はたぶんこれです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6386&#34;&gt;Limit version number parts to be 9 digits #6386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; に含まれるはずなので &lt;code&gt;cabal-3.0.0.0&lt;/code&gt; では関係ないと思っていたのですが、&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/commit/73a7adcb8bf8204dd81de35d014c967b76040526/checks?check_suite_id=384131716&#34;&gt;GitHub Actions のログ&lt;/a&gt;を見るとわかるとおり、GitHub Actions では &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; がインストールされていました。(何故?&lt;a href=&#34;https://github.com/haskell/cabal/issues/6328&#34;&gt;cabal-install 3.0.1.0 release planning #6328&lt;/a&gt; はまだ閉じられてない)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
The Glorious Glasgow Haskell Compilation System, version 8.6.5
cabal-install version 3.0.1.0
compiled using version 3.0.1.0 of the Cabal library 
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また &lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell&lt;/a&gt; の README を見る限り &lt;code&gt;cabal&lt;/code&gt; のバージョン指定方法は &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;2.4&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt; しか無いので &lt;code&gt;3.0.0.0&lt;/code&gt; を使う方法がありません・・・。&lt;/p&gt;
&lt;h2 id=&#34;とりあえずの解決策&#34;&gt;とりあえずの解決策&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jcpetruzza/barbies/blob/0b09a4235cd719aa3df9f9467f3e8fee81446bc8/barbies.cabal&#34;&gt;barbies.cabal&lt;/a&gt; のバージョン番号が長すぎるために起きているエラーなので、fork して一時的にバージョンを短くして対応しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name:           barbies
version:        1.999999999999  -- 変更前
version:        1.999999999     -- 変更後&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;もうすぐ GHC-8.10.1 がリリースされそうですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/status/ghc-8.10.1&#34;&gt;GHC plans for 8.10.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/10-07-cabal-fmt.html</id><title type="text">cabal-fmt の紹介</title><updated>January 22, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/10-07-cabal-fmt.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/cabal-fmt&#34;&gt;cabal-fmt&lt;/a&gt; でできること。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cabal&lt;/strong&gt; ファイルの整形&lt;/li&gt;
&lt;li&gt;フォルダを指定して自動でモジュールを expand できる&lt;/li&gt;
&lt;li&gt;以下のフィールドをアルファベット順で自動的に並べ替え&amp;amp;重複を削除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exposed-modules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other-modules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default-extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other-extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build-depends&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal-fmt --version
0.1.1.1

λ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library

# 使い方
λ cabal-fmt &amp;lt;proj&amp;gt;.cabal -i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者の記事: &lt;a href=&#34;http://oleg.fi/gists/posts/2019-08-11-cabal-fmt.html&#34;&gt;ANN: cabal-fmt&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;h3 id=&#34;適用前&#34;&gt;適用前&lt;/h3&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;cabal-version: 2.4
name:test
version:0.1.0.0
tested-with:
  GHC ==8.8.1 || ==8.6.5 || ==8.4.4 || ==8.2.2 || ==8.0.2 || ==7.10.3
  GHCJS ==8.4

executable site
  main-is:          site.hs
  other-modules:
    Config
    Hakyll.Ext
  hs-source-dirs:   app
  ghc-options:
    -Wcompat -Wall
    -Wnoncanonical-monad-instances
    -Wincomplete-uni-patterns -Wincomplete-record-updates -Wredundant-constraints -Wtabs -threaded
  build-depends:
      base, lens
    , blaze-html, conduit-combinators
    , containers      , filepath
          , bytestring
    , extensible
    
    
    , yaml, time

  if !os(windows)
    build-depends: hakyll-sass

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;適用後&#34;&gt;適用後&lt;/h3&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;cabal-version: 2.4
name:          test
version:       0.1.0.0
tested-with:
    GHC ==7.10.3
     || ==8.0.2
     || ==8.2.2
     || ==8.4.4
     || ==8.6.5
     || ==8.8.1
  , GHCJS ==8.4

executable site
  main-is:          site.hs
  other-modules:
    Config
    Hakyll.Ext

  hs-source-dirs:   app
  ghc-options:
    -Wcompat -Wall -Wnoncanonical-monad-instances
    -Wincomplete-uni-patterns -Wincomplete-record-updates
    -Wredundant-constraints -Wtabs -threaded

  build-depends:
    , base
    , blaze-html
    , bytestring
    , conduit-combinators
    , containers
    , extensible
    , filepath
    , lens
    , time
    , yaml

  if !os(windows)
    build-depends: hakyll-sass

  default-language: Haskell2010
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal v2-update
λ cabal v2-install cabal-fmt

λ cabal-fmt --help
λ cabal-fmt - .cabal file reformatter

Usage: cabal-fmt [-i|--inplace] [--Werror | --Wno-error | --indent N | --tabular
                 | --no-tabular] [FILE...] [--version]
  Reformat .cabal files

Available options:
  -i,--inplace             process files in-place
  --Werror                 Treat warnings as errors
  --indent N               Indentation
  --tabular                Tabular formatting
  FILE...                  input files
  -h,--help                Show this help text
  --version                Show version&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;基本的には以下のコマンドで終わりです。(&lt;code&gt;&amp;lt;proj&amp;gt;&lt;/code&gt; は各自のファイル名に置き換えてください)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal-fmt &amp;lt;proj&amp;gt;.cabal -i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; オプション (&lt;code&gt;--inplace&lt;/code&gt;) で既存ファイルを上書きするので、結果だけ見たい場合は外しましょう。&lt;/p&gt;
&lt;h3 id=&#34;モジュールの自動展開&#34;&gt;モジュールの自動展開&lt;/h3&gt;
&lt;p&gt;僕が &lt;code&gt;cabal-fmt&lt;/code&gt; を使う理由の最大のポイントはモジュールの自動展開機能です。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library
  -- cabal-fmt: expand src
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記法としては、上記のようにしてモジュールを探索するディレクトリ (今回の場合は &lt;strong&gt;src&lt;/strong&gt;) を指定します。&lt;/p&gt;
&lt;p&gt;実際に使ってみましょう。ここでは例として &lt;strong&gt;test-dir&lt;/strong&gt; を作りますが、実際には &lt;strong&gt;src&lt;/strong&gt;, &lt;strong&gt;app&lt;/strong&gt;, &lt;strong&gt;test&lt;/strong&gt; などが展開の対象となることが多いと思います。&lt;/p&gt;
&lt;p&gt;また、意図的に &lt;strong&gt;C.md&lt;/strong&gt; としている点にも注意してください。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ mkdir test-dir
λ touch test-dir/A.hs test-dir/B.hs test-dir/C.md
λ tree test-dir
test-dir
├── A.hs
├── B.hs
└── C.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適用する &lt;strong&gt;cabal&lt;/strong&gt; ファイル (&lt;strong&gt;test.cabal&lt;/strong&gt;) の中身は以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で &lt;code&gt;cabal-fmt test.cabal -i&lt;/code&gt; を実行すると結果は以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir
  exposed-modules:
    A
    B
    C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.hs&lt;/code&gt; ファイルだけ列挙して欲しいところですが、指定したディレクトリ以下の全てを列挙します。そのため、公開したいモジュールと非公開のモジュールはディレクトリを分けて運用するなど、少しだけ工夫する必要があります。&lt;/p&gt;
&lt;p&gt;一応、除外したいモジュールを &lt;code&gt;-Module&lt;/code&gt; の形式で指定することもできます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir -C
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適用後&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir -C
  exposed-modules:
    A
    B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この方法を使えば &lt;strong&gt;hspec-discover&lt;/strong&gt; や &lt;strong&gt;tasty-discover&lt;/strong&gt; のためのファイルなどを除外することができます。&lt;/p&gt;
&lt;h2 id=&#34;cabal-format-コマンド&#34;&gt;cabal format コマンド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; についてあまり詳しく無いので良くわかりませんが、一応 &lt;strong&gt;cabal format&lt;/strong&gt; というコマンドが存在します。(&lt;a href=&#34;https://github.com/haskell/cabal/issues/2460&#34;&gt;&lt;code&gt;cabal format&lt;/code&gt; is not listed in –help message #2460&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal format --help
Reformat the .cabal file using the standard style.

Usage: cabal format [FILE]

Flags for format:
 -h --help Show this help text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実際にこのコマンドでも整形だけなら可能みたいです。ただし、&lt;a href=&#34;https://github.com/haskell/cabal/issues/5734&#34;&gt;&lt;code&gt;cabal format&lt;/code&gt; inlines and removes &lt;code&gt;common&lt;/code&gt; stanzas #5734&lt;/a&gt; にもある通り &lt;code&gt;common&lt;/code&gt; stanza が削除されたりします。&lt;/p&gt;
&lt;p&gt;そのため、&lt;strong&gt;cabal format&lt;/strong&gt; コマンドよりも &lt;strong&gt;cabal-fmt&lt;/strong&gt; を利用した方が良いと思います。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;便利なので最近良く使ってます。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oleg.fi/gists/posts/2019-08-11-cabal-fmt.html&#34;&gt;ANN: cabal-fmt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html</id><title type="text">HUnit で日本語が文字化けする問題</title><updated>February 19, 2020</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html"/><summary type="html">&lt;p&gt;&lt;code&gt;HUnit&lt;/code&gt; で日本語を扱おうとすると、以下のように文字化けしますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は簡単に回避できるので、その方法を紹介します。やり方は &lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt; の方法そのまんまです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;問題が発生している原因&#34;&gt;問題が発生している原因&lt;/h2&gt;
&lt;p&gt;今回使うコードはとてもシンプルです。依存しているパッケージは &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードを実行すると、以下のような結果になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; bad&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:                              &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は何故発生するかと言うと、&lt;code&gt;HUnit&lt;/code&gt; 内部で &lt;code&gt;show&lt;/code&gt; 関数を利用しているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような文字化けに対応するには &lt;a href=&#34;https://hackage.haskell.org/package/unicode-show&#34;&gt;unicode-show&lt;/a&gt; パッケージの &lt;strong&gt;ushow&lt;/strong&gt; 関数が便利です。より詳しい紹介は「&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit --package unicode-show ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; ushow &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということで、&lt;strong&gt;HUnit&lt;/strong&gt; を &lt;strong&gt;ushow&lt;/strong&gt; を使うようにしてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策&lt;/h2&gt;
&lt;p&gt;やり方はとても簡単です。&lt;strong&gt;(@?=)&lt;/strong&gt; を以下のように再定義するだけです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit.Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード全体は以下の通りです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;good ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;good &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみましょう！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; good&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで他の関数も同様に定義してしまえば良い感じです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;日本語の文字化けで困っている人向け情報でした。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iwamototakashi.hatenadiary.jp/entry/20100722/p1&#34;&gt;HUnitで日本語を出力してみる→成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html</id><title type="text">Megaparsec 8 (翻訳)</title><updated>December 24, 2019</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html"/><summary type="html">&lt;p&gt;Great original post: &lt;a href=&#34;https://markkarpov.com/post/megaparsec-8.html&#34;&gt;Megaparsec 8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一年が経ち、Megaparsecの新しいメジャーバージョンが再び登場する時がきました。 今回の変更は、これまでのメジャーリリースの中で最も破壊的ではない変更です。 実際、ほとんどのユーザはアップグレードのために何もする必要はないと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;これには次の理由があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;それほど多くのissue が開かれておらず、バグも報告されていません。それはMegaparsecが最近、そしてほとんど満足のいく方法で「うまくいく」という事実と関係があると思います。&lt;/li&gt;
&lt;li&gt;ライブラリは現在幅広く使用されています。この記事の執筆時点で、Megaparsecに直接依存する&lt;a href=&#34;https://packdeps.haskellers.com/reverse/megaparsec&#34;&gt;Hackageのパッケージは146個&lt;/a&gt;あります。Megaparsecの上に構築することを選択した&lt;a href=&#34;https://hackage.haskell.org/package/replace-megaparsec&#34;&gt;新しい刺激的なライブラリ&lt;/a&gt;も現れました。&lt;a href=&#34;https://github.com/idris-lang/Idris-dev&#34;&gt;Idris&lt;/a&gt;や&lt;a href=&#34;https://github.com/dhall-lang/dhall-haskell&#34;&gt;Dhall&lt;/a&gt;などのプロジェクトでは、Megaparsecを使用してパースの問題を解決しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらはライブラリが枯れ、成熟したことを示しているので、動作しているものを壊さないようにしましょう。 とはいえ、常に改善の余地があります。&lt;/p&gt;
&lt;h2 id=&#34;nixによる品質保証&#34;&gt;Nixによる品質保証&lt;/h2&gt;
&lt;p&gt;バージョン8の作業を開始する前に、Nixを使用して品質保証を強化することにしました。 現在のMegaparsecに依存するプロジェクトの数を把握し、Nixを使用して&lt;a href=&#34;https://github.com/tweag/ormolu&#34;&gt;Ormolu&lt;/a&gt;のバグを発見したという成功体験から、依存パッケージによって引き起こされる破壊的変更、パフォーマンスの変更、およびバグのチェックにNixを用いることにしました。&lt;/p&gt;
&lt;p&gt;結果をMegaparsecのリポジトリにある&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/blob/master/HACKING.md&#34;&gt;HACKING.md&lt;/a&gt;に文書化しました。 開発時のshellとは別に、Nix expressionは以下のターゲットグループを提供します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt; は &lt;code&gt;parser-combinators&lt;/code&gt; や &lt;code&gt;hspec-megaparsec&lt;/code&gt; などの密接に関連したパッケージとそのテストです。&lt;code&gt;nix-build -A base --no-out-link&lt;/code&gt; を実行することにより、開発者はこれらすべてをビルドし、テストすることができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deps&lt;/code&gt; は選択された依存関係のもとでビルドの破壊とテストスイートの失敗が起きないことを確認します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benches&lt;/code&gt; はベンチマークのコレクションです。これには、Megaparsecのマイクロベンチマークと、ライブラリが実際のタスクでどのように実行されるかを示すいくつかのパッケージが含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらコマンドのそれぞれで、特定のパッケージまたはベンチマークに「ズームイン」できます。 たとえば、&lt;code&gt;nix-build -A benches.parsers-bench&lt;/code&gt; を実行して、&lt;code&gt;parsers-bench&lt;/code&gt; のベンチマークを確認できます。 要するに、ほとんどのパッケージは新しい変更でも引き続き動作し、修正が容易ではないものでも動作します。 実際、システムを使い続けるためには不備のあるパッケージにパッチを適用する必要があり、そのための&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/tree/31b917b1297950c22925f9ee7f7a588834293103/nix/patches&#34;&gt;アップグレード用のパッチ&lt;/a&gt;も利用可能です。&lt;/p&gt;
&lt;p&gt;ロジックやパフォーマンスの低下は見つかりませんでした。&lt;/p&gt;
&lt;h2 id=&#34;パースエラー位置の制御&#34;&gt;パースエラー位置の制御&lt;/h2&gt;
&lt;p&gt;新機能について話しましょう。 プリミティブ &lt;code&gt;failure&lt;/code&gt; と &lt;code&gt;fancyFailure&lt;/code&gt; は &lt;code&gt;parseError&lt;/code&gt; に置き換わりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 現在の &amp;#39;failure&amp;#39; と &amp;#39;fancyFailure&amp;#39; は普通の関数:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;failure&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待しないアイテム (あれば)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;failure us ps &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; o us ps)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;fancyFailure&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;fancyFailure xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; o xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これはプリミティブの数を減らすという話ではありません (減らすことも良いことですが)。 &lt;code&gt;parseError&lt;/code&gt; の主な特徴は、パーサの状態から現在のオフセットを必要とすることなく、任意のオフセットでパースエラーを報告できることです。 これは、パースエラーにしたい位置を既に超えてしまっている場合でも、入力のその位置でパースエラーを作成したい場合に重要です。 これまでは、まず &lt;code&gt;getOffset&lt;/code&gt; を介して正しいオフセットを取得し、次にパースエラーを報告する直前に &lt;code&gt;setOffset&lt;/code&gt; でオフセットを設定することでしか達成できませんでした。 これは見苦しいだけでなく、エラーが発生しやすくなり、正しいオフセットの復元を忘れることがあります。 &lt;code&gt;mmark&lt;/code&gt;の&lt;a href=&#34;https://github.com/mmark-md/mmark/blob/8f5534d8068c2b7a139b893639ee5920bcaedd84/Text/MMark/Parser.hs#L787-L790&#34;&gt;実例&lt;/a&gt;を次に示します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;  o&amp;#39; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  setOffset o&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  (void &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; hidden &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; string) &lt;span class=&#34;st&#34;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- ↑ これが失敗した場合、これをオフセット「o」で報告する必要があります&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  setOffset (o&amp;#39; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは完全な状況を説明しませんが、&lt;code&gt;&#34;[]&#34;&lt;/code&gt;(&lt;code&gt;+ 2&lt;/code&gt;の部分)のパース後にオフセットの増分を考慮するのを忘れたため、このコードにはしばらくバグがあったと言えば十分でしょう。 次のように書けば、同じことをよりうまく表現できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  region (setErrorOffset o) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;    (void &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; hidden &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; string) &lt;span class=&#34;st&#34;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 備考&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;region ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;ParseError&amp;#39; の処理方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ 処理を適用する「region」&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;region&lt;/code&gt;は&lt;code&gt;getOffset&lt;/code&gt; / &lt;code&gt;setOffset&lt;/code&gt; ハックと同じ目的で使用されます。 副作用として、エラーが起きた場合にはパースエラーを更新する関数によって現在のオフセットが変更されます。 &lt;code&gt;region&lt;/code&gt; は &lt;code&gt;parseError&lt;/code&gt; を使用して、古いハックを廃止できます。&lt;/p&gt;
&lt;pre class=&#34;haskel&#34;&gt;&lt;code&gt;region f m = do
  r &amp;lt;- observing m
  case r of
    Left err -&amp;gt; parseError (f err)
    Right x -&amp;gt; return x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いいね.&lt;/p&gt;
&lt;h2 id=&#34;マルチエラーパーサのより良いストーリー&#34;&gt;マルチエラーパーサのより良いストーリー&lt;/h2&gt;
&lt;p&gt;プロジェクトの最初期から、マルチエラーパーサをサポートする方向にゆっくりと動いていました。 バージョン7では、&lt;code&gt;ParseError&lt;/code&gt;の代わりに&lt;code&gt;ParseErrorBundle&lt;/code&gt;を返すようになりました。 マルチエラーをサポートするための準備はすべてが整っていましたが、複数のパースエラーを報告するための方法がまだ提供されていませんでした。&lt;/p&gt;
&lt;p&gt;マルチエラーパーサに求められる事前条件は、入力に問題のある部分をスキップして、正常であることがわかっている位置からパースを再開できることです。 この部分は、&lt;code&gt;withRecovery&lt;/code&gt;プリミティブ（Megaparsec 4.4.0以降で使用可能）を使用して実現されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | @&amp;#39;withRecovery&amp;#39; r p@ は、パーサー @p@ が失敗した場合でも解析を続行できます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- この場合、実際の &amp;#39;ParseError&amp;#39; を引数とする @r@ が呼び出されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- よくある使い方として、特定のオブジェクトのパースの失敗を意味する値を返すことで、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- その入力の一部を消費し次のオブジェクトの開始位置に移動します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- @r@ が失敗すると、元のエラーメッセージが &amp;#39;withRecovery&amp;#39; なしで報告されることに注意してください。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサ @r@ を回復してもエラーメッセージに影響することはありません。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;withRecovery&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;co&#34;&gt;-- ^ 失敗の回復方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ オリジナルのパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ 失敗から回復できるパーサ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Megaparsec 8 までのユーザーは、成功と失敗の可能性を含む直和型になるように型&lt;code&gt;a&lt;/code&gt;を選択する必要がありました。 たとえば、&lt;code&gt;Either (ParseError s e) Result&lt;/code&gt; です。 パースエラーを収集し、後で表示する前に手動で&lt;code&gt;ParseErrorBundle&lt;/code&gt;に追加する必要がありました。 言うまでもなく、これらはすべて、ユーザーフレンドリーではない高度な使用例です。&lt;/p&gt;
&lt;p&gt;Megaparsec 8 は、遅延パースエラーのサポートを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | 後で報告するために &amp;#39;ParseError&amp;#39;を登録します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- このアクションはパースを終了せず、パースの最後に考慮される&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 「遅延」&amp;#39;ParseError&amp;#39;のコレクションに特定の「ParseError」を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 追加する以外は効果がありません。 このコレクションが空の場合のみ、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサは成功します。 これは、複数のパースエラーを一度に報告する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 主な方法です。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;registerParseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;failure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;registerFailure&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待しないアイテム (あれば)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;fancyFailure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;registerFancyFailure&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらのエラーは &lt;code&gt;withRecovery&lt;/code&gt; のエラー処理コールバックに登録でき、結果の型は &lt;code&gt;Maybe Result&lt;/code&gt; になります。 これにより、遅延エラーが最終的な &lt;code&gt;ParseErrorBundle&lt;/code&gt; に含まれるようになり、遅延エラーのコレクションが空でない場合に パーサが最終的に失敗するようになります。&lt;/p&gt;
&lt;p&gt;以上のことから、マルチエラーパーサを書く習慣がユーザ間でより一般的になることを願っています。&lt;/p&gt;
&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いつものように、変更の完全なリストについては、&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/blob/master/CHANGELOG.md&#34;&gt;chagelog&lt;/a&gt; を参照してください。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://markkarpov.com/megaparsec/megaparsec.html&#34;&gt;公式チュートリアル&lt;/a&gt;を含むすべてのテキストをバージョン8と互換性があるように更新しました。新しい機能の使用方法を説明するセクションを含めるように拡張しました。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; などのサテライトパッケージが更新され、バージョン8で動作するようになりました。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://qiita.com/norkron/items/681aed1323ac95431ea3</id><title type="text">もう諦めない圏論基礎―極限からカン拡張へ―</title><updated>2020-03-12T15:10:12+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/norkron/items/681aed1323ac95431ea3"/></entry><entry><id>https://qiita.com/TTsurutani/items/811814ebf548332ede8a</id><title type="text">HaskellでData.Csv(cassava)を使ってcsvファイルを処理する</title><updated>2020-03-12T14:49:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/TTsurutani/items/811814ebf548332ede8a"/></entry><entry><id>https://qiita.com/acple@github/items/089ee5707e78fecb5615</id><title type="text">たのしい Foldable</title><updated>2020-03-11T21:46:14+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/acple@github/items/089ee5707e78fecb5615"/></entry><entry><id>https://qiita.com/rinse_/items/878a962f92e675f21695</id><title type="text">おじいさん、今日のご飯はCatamorphismですよ</title><updated>2020-03-11T19:10:50+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/rinse_/items/878a962f92e675f21695"/></entry><entry><id>https://qiita.com/sand/items/a0e7758da7274a119849</id><title type="text">【Servant】(11) Servant-Client</title><updated>2020-03-08T08:15:11+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/a0e7758da7274a119849"/></entry><entry><id>https://qiita.com/sand/items/ae649f14f1b598d636c3</id><title type="text">【Servant】(9) Handlerモナド</title><updated>2020-03-07T21:43:15+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/ae649f14f1b598d636c3"/></entry><entry><id>https://qiita.com/sand/items/fd2ea8acdc56998d5c5e</id><title type="text">【Servant】(5) JSON</title><updated>2020-03-07T20:40:06+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/fd2ea8acdc56998d5c5e"/></entry><entry><id>https://qiita.com/sand/items/0e9f3c80b5103b966be4</id><title type="text">【Servant】(6) HTML</title><updated>2020-03-07T20:39:51+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/0e9f3c80b5103b966be4"/></entry><entry><id>https://qiita.com/sand/items/d21aed7c24521e20f1cb</id><title type="text">【Servant】(7) Post Data</title><updated>2020-03-07T20:39:36+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/d21aed7c24521e20f1cb"/></entry><entry><id>https://qiita.com/sand/items/9c8fa50815b00daead24</id><title type="text">【Servant】(8) Another Monad</title><updated>2020-03-07T20:39:20+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/9c8fa50815b00daead24"/></entry><entry><id>https://qiita.com/sand/items/091b0ea981152ad7d744</id><title type="text">【Servant】(10) SQLite</title><updated>2020-03-07T20:37:13+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sand/items/091b0ea981152ad7d744"/></entry><entry><id>https://qiita.com/CUteNeuron/items/ed27b6874faa3d954b59</id><title type="text">正則連分数を用いたモジュラ逆数の計算</title><updated>2020-03-06T21:12:45+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/CUteNeuron/items/ed27b6874faa3d954b59"/></entry><entry><id>https://qiita.com/HirotoShioi/items/eda8859443f9b55fee28</id><title type="text">unliftioをなるべくわかりやすく紹介してみます</title><updated>2020-03-06T18:19:51+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/HirotoShioi/items/eda8859443f9b55fee28"/></entry><entry><id>https://qiita.com/oskats1987/items/fa82f462904e2cfdc957</id><title type="text">HaskellでCを計算するプログラムをF#に置き換える</title><updated>2020-03-05T10:29:23+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/oskats1987/items/fa82f462904e2cfdc957"/></entry><entry><id>https://qiita.com/Cj-bc/items/3afecf148f3fa37cbb72</id><title type="text">System.FSNotifyでファイルイベントが一切検出されない時</title><updated>2020-03-04T13:18:01+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Cj-bc/items/3afecf148f3fa37cbb72"/></entry><entry><id>https://qiita.com/oskats1987/items/8ae1f36ee6121a73d3b7</id><title type="text">Haskellでリストを使って、コンビネーション（C）の計算プログラムを作って遊ぶ</title><updated>2020-03-02T17:17:17+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/oskats1987/items/8ae1f36ee6121a73d3b7"/></entry><entry><id>https://qiita.com/aycs1633/items/428bb270a2e78916c396</id><title type="text">冪乗の計算と二項係数の計算 Try and Error</title><updated>2020-03-02T03:50:35+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/aycs1633/items/428bb270a2e78916c396"/></entry><entry><id>https://haskell.jp/blog/posts/2020/property-io.html</id><title type="text">HspecでQuickCheckするときもshouldBeなどが使えます</title><updated>2020-02-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/property-io.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;タイトルがほとんどすべてなんですが詳細を解説します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;😕なぜ使える？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/h1&gt;
&lt;p&gt;みなさんは&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;を使った&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書く際、どのように書いているでしょうか？&lt;br /&gt;
例えば&lt;a href=&#34;https://hspec.github.io/quickcheck.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のマニュアル&lt;/a&gt;のように、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;に&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を組み込む例として、次のような例を挙げています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/quickcheck.md&#34;&gt;こちらのコミット&lt;/a&gt;の時点での話です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;property&lt;/code&gt;関数に渡した関数&lt;small&gt;（以下、「&lt;code&gt;porperty&lt;/code&gt;ブロック」と呼びます）&lt;/small&gt;の中では&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でおなじみの&lt;code&gt;shouldBe&lt;/code&gt;などの&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;用関数を使わず、&lt;code&gt;==&lt;/code&gt;で結果を判定してますよね。&lt;br /&gt;
このサンプルに倣って、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で書いたテストに&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書くときは、&lt;code&gt;==&lt;/code&gt;を使ってる方が多いんじゃないでしょうか？&lt;/p&gt;
&lt;p&gt;ところが、この記事のタイトルに書いたとおり、実際のところ&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;は利用できます。&lt;br /&gt;
つまりは、こちら👇のようにも書ける、ということです！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;や&lt;code&gt;shouldSatisfy&lt;/code&gt;といった、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;固有の&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;関数を使うことの利点は、単に構文を他のテストと一貫させることができる、だけではありません。&lt;br /&gt;
&lt;strong&gt;テストが失敗したときのエラーが分かりやすくなる&lt;/strong&gt;、という遥かに重大なメリットがあるのです。&lt;/p&gt;
&lt;p&gt;試しにわざとテストを失敗させてみましょう。&lt;br /&gt;
先ほどの例&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;における&lt;code&gt;(x :: Int)&lt;/code&gt;という式を&lt;code&gt;(x + 1 :: Int)&lt;/code&gt;に変えれば、必ず失敗するはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※お手元で試す場合は&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/_includes/QuickCheck.hs&#34;&gt;こちら&lt;/a&gt;から元のコードを持ってきて、&lt;code&gt;stack build hspec&lt;/code&gt;なりを実行した上で修正・実行するのが簡単でしょう。&lt;/p&gt;
&lt;p&gt;結果、下記のようなエラーメッセージとなるでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このエラーでは「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」までしか教えてくれず、わかりづらいですよね。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;shouldBe&lt;/code&gt;を使用して以下のように書き換えると…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージはこう👇なります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0
       expected: 1
        but got: 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」に加えて、&lt;code&gt;shouldBe&lt;/code&gt;に与えた両辺の式がどのような値を返したか、まで教えてくれました！&lt;br /&gt;
今回の例は極めて単純なのであまり役に立たないかも知れませんが、あなたが書いた関数をテストするときはやっぱり「期待される結果」と「実際の結果」両方がわかる方がデバッグしやすいですよね！&lt;/p&gt;
&lt;p&gt;と、いうわけで今後は&lt;code&gt;property&lt;/code&gt;関数&lt;small&gt;（あるいはその省略版の&lt;code&gt;prop&lt;/code&gt;関数）&lt;/small&gt;に渡した関数の中でも&lt;code&gt;shouldBe&lt;/code&gt;などを必ず使ってください！&lt;br /&gt;
&lt;small&gt;（せっかくなんで、今回紹介したドキュメントを&lt;a href=&#34;https://github.com/hspec/hspec/pull/429&#34;&gt;修正するための&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;&lt;/a&gt;を送っておきました。これがマージされればこの記事の情報の大半は時代遅れになります）&lt;/small&gt;&lt;/p&gt;
&lt;h1 id=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;😕なぜ使える？&lt;/h1&gt;
&lt;p&gt;しかしここで、一つ疑問が残ります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のドキュメントをつぶさに読んだことがある方はお気づきでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck-2.13.2/docs/Test-QuickCheck.html#t:Testable&#34;&gt;&lt;code&gt;property&lt;/code&gt;関数は、&lt;code&gt;Testable&lt;/code&gt;という型クラスのメソッド&lt;/a&gt;であるため、&lt;code&gt;Testable&lt;/code&gt;のインスタンスでなければ使えないはずです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;の&lt;code&gt;shouldBe&lt;/code&gt;などが返す値は型シノニムのたらい回しをたどればわかるとおり、結局のところ&lt;code&gt;IO ()&lt;/code&gt;型の値です。&lt;br /&gt;
ところが&lt;code&gt;Testable&lt;/code&gt;のインスタンス一覧を見る限り、&lt;code&gt;IO a&lt;/code&gt;は&lt;code&gt;Testable&lt;/code&gt;のインスタンスではありません。&lt;br /&gt;
先ほどの例のように&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いた場合における、関数型&lt;code&gt;(a -&amp;gt; prop)&lt;/code&gt;のインスタンスは、&lt;code&gt;(Arbitrary a, Show a, Testable prop) =&amp;gt; Testable (a -&amp;gt; prop)&lt;/code&gt;という定義のとおり、関数の戻り値の型が&lt;code&gt;Testable&lt;/code&gt;のインスタンスでないと、型チェックを通らないはずです。&lt;br /&gt;
&lt;code&gt;Testable&lt;/code&gt;のインスタンスでない、&lt;code&gt;IO ()&lt;/code&gt;を返しているにも関わらず型エラーが起きなかったのは、一体なぜでしょうか？&lt;/p&gt;
&lt;p&gt;その秘密を探るべく、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を立ち上げましょう。&lt;br /&gt;
先ほどの例のソースコードを&lt;code&gt;ghci&lt;/code&gt;コマンドに読ませれば、まとめて&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のモジュールも&lt;code&gt;import&lt;/code&gt;できるので簡単です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci .\QuickCheck.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動したら、&lt;code&gt;:i Testable&lt;/code&gt;と入力して、&lt;code&gt;Testable&lt;/code&gt;型クラスのインスタンス一覧を出力しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;i &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  property ::&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;{-# MINIMAL property #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;        &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Discard&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] (&lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit.Lang.Assertion&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ありました！💡 最後の方にある&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行に注目してください。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;は、&lt;code&gt;IO ()&lt;/code&gt;の型シノニムであり、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でも間接的に型シノニムとして参照されています&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
要するに&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行は&lt;code&gt;instance [safe] Testable (IO ())&lt;/code&gt;と読み替えることができます&lt;small&gt;（&lt;code&gt;[safe]&lt;/code&gt;という表記が指しているものについてはここでは省略します！すみません！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;紹介したとおり&lt;code&gt;Testable&lt;/code&gt;のドキュメントには&lt;code&gt;Testable Assertion&lt;/code&gt;なんて記載はありませんし、じゃあ一体どこで定義したのか、というとそう、続く行に&lt;code&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/code&gt;と書かれているとおり、&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-io-0.2.0/docs/Test-QuickCheck-IO.html&#34;&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;&lt;/a&gt;というモジュールで定義されています！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;は、名前のとおり&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;code&gt;Testable&lt;/code&gt;について、&lt;code&gt;IO&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;を定義するためのモジュールです。&lt;br /&gt;
これを&lt;a href=&#34;https://github.com/hspec/hspec/blob/226510631f24b674827e99d17d10f9f92440c5a9/hspec-core/src/Test/Hspec/Core/QuickCheckUtil.hs#L18&#34;&gt;&lt;code&gt;import&lt;/code&gt;している&lt;/a&gt;が故に、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;では&lt;code&gt;property&lt;/code&gt;ブロックの中で&lt;code&gt;shouldBe&lt;/code&gt;などが利用できるんですね！&lt;/p&gt;
&lt;p&gt;結論&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;わかりづらい😥&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;:i&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;であろうとインスタンスを定義した箇所を見つけてくれるから便利！&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この節の冒頭で「型シノニムのたらい回し」と呼んだものを追いかけてみましょう。&lt;br /&gt;
おなじみ&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#v:shouldBe&#34;&gt;&lt;code&gt;shouldBe&lt;/code&gt;&lt;/a&gt;は&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#t:Expectation&#34;&gt;&lt;code&gt;Expectation&lt;/code&gt;&lt;/a&gt;という型の値を返します。&lt;br /&gt;
そして&lt;code&gt;Expectation&lt;/code&gt;は&lt;code&gt;Assertion&lt;/code&gt;の型シノニムであり、クリックすると&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;であることがわかります。&lt;br /&gt;
そして&lt;code&gt;Assertion&lt;/code&gt;はそう、&lt;code&gt;type Assertion = IO ()&lt;/code&gt;とあるとおり&lt;code&gt;IO ()&lt;/code&gt;なのです。やっと知ってる型にたどり着きました😌。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/revenge-of-hourly-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;リベンジ・オブ・毎時更新 Haskell Antenna&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://qiita.com/dd0125/items/a141000ead36b3823fde</id><title type="text">Docker + Haskell の Hello Worldビルド</title><updated>2020-02-24T17:04:04+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/dd0125/items/a141000ead36b3823fde"/></entry><entry><id>https://qiita.com/MachiaWorx/items/3f3f00e924c797e7213a</id><title type="text">TidalCyclesをエディタ経由のみで動かす準備。</title><updated>2020-02-24T04:31:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/MachiaWorx/items/3f3f00e924c797e7213a"/></entry><entry><id>https://qiita.com/minarai/items/7b42bf39c2c631fc6b98</id><title type="text">Haskell Monad(モナド）とは？</title><updated>2020-02-24T01:38:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/minarai/items/7b42bf39c2c631fc6b98"/></entry><entry><id>https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html</id><title type="text">Elm + GitHub OAuth 2.0 (Firebase) のサンプルプログラムを書いてみた</title><updated>2020-02-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とあるアプリケーションに Elm + GitHub OAuth 2.0 を使ってみたいなと思い，その練習用のアプリケーションを作ってみました：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elm-github-oauth2-sample&#34;&gt;matsubara0507/elm-github-oauth2-sample - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルのために認可用のサーバーを用意するのがめんどくさかったので，近年話題の Firebase の Authorization 機能を利用することにしました．&lt;/p&gt;
&lt;h2 id=&#34;作ったアプリケーション&#34;&gt;作ったアプリケーション&lt;/h2&gt;
&lt;p&gt;作成した SPA は &lt;a href=&#34;https://matsubara0507.github.io/elm-github-oauth2-sample&#34;&gt;GitHub Pages&lt;/a&gt; に置いてある． ログインっぽいボタンを押すと Firebase Authorization を介して，GitHub OAuth 2.0 での認可がされる． もちろん，もともと試したかったことはここまでだが，認可しておしまいだと味気がない． なので：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;認可時に GitHub OAuth トークンを取得&lt;/li&gt;
&lt;li&gt;トークンを使ってログインしたユーザーの公開リポジトリの情報を取得&lt;/li&gt;
&lt;li&gt;リポジトリのスター数を使ってユーザーのステータスをリッチに描写する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;色々試して最終的にこんな感じ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/page.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;ちょっとやりすぎた．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;やったことは3ステップ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Elm と Firebase を繋ぐ&lt;/li&gt;
&lt;li&gt;リポジトリを取得（GraphQL）&lt;/li&gt;
&lt;li&gt;円グラフを描写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2と3は完全におまけですね．&lt;/p&gt;
&lt;h3 id=&#34;elm-と-firebase&#34;&gt;Elm と Firebase&lt;/h3&gt;
&lt;p&gt;まずは Firebase を準備する． &lt;a href=&#34;https://firebase.google.com/docs/auth/web/github-auth?hl=ja&#34;&gt;公式サイトの手順&lt;/a&gt;がしっかりしてるので，それに習って準備する（GitHub App の設定とか）． プロバイダ（今回は GitHub）の設定と JavaScript のアプリの設定をすると「コレをコピペしてね」っていう設定とかが出てくる． コレを index.html と index.js に書いておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;&amp;lt;!doctype &lt;/span&gt;html&lt;span class=&#34;dt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; http-equiv=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; charset=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; rel=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; href=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://unpkg.com/@primer/css@14.2.0/dist/primer.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; id=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;elm-node&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- firebase-app と firebase-auth が必要 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-app.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-auth.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/main.js は Elm からあとで生成する --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/main.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/index.js は下記 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/index.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// コレらの設定は公開してもいいらしいけど&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; firebaseConfig &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;apiKey&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;authDomain&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;databaseURL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;storageBucket&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;messagingSenderId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;}&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;initializeApp&lt;/span&gt;(firebaseConfig)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; provider &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;GithubAuthProvider&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは Elm から Firebase のメソッドを呼び出す． 基本的にコレを参考にした：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ababup1192/items/f27f9af282d9fa642eb5&#34;&gt;Elm portsでFirebase Firestoreを触ろう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm 用の Firebase パッケージ的なのはないので，Elm のポート機能を使って繋ぎ込む：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Elm&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;// popup の方はモバイル系でうまく動作しなかったのでこっちを使う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signInWithRedirect&lt;/span&gt;(provider)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;getSignInResult&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getRedirectResult&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(result) {&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (result&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;credential&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;      app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signedIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(result)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(error) {&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;    app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;failSignIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(error)&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;繋ぎ込みはできた． サクッとトークンだけもらって，GitHub API v3 からユーザー名を取得する部分を実装する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;credential&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;accessToken&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;decodeValue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは適当に &lt;code&gt;Main&lt;/code&gt; から呼び出すだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;application&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlRequest&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlChange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;UrlRequest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-35&#34;&gt;&lt;a href=&#34;#cb7-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- URL 系は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-36&#34;&gt;&lt;a href=&#34;#cb7-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-37&#34;&gt;&lt;a href=&#34;#cb7-37&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-38&#34;&gt;&lt;a href=&#34;#cb7-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-39&#34;&gt;&lt;a href=&#34;#cb7-39&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-40&#34;&gt;&lt;a href=&#34;#cb7-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-41&#34;&gt;&lt;a href=&#34;#cb7-41&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-42&#34;&gt;&lt;a href=&#34;#cb7-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-43&#34;&gt;&lt;a href=&#34;#cb7-43&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-44&#34;&gt;&lt;a href=&#34;#cb7-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-45&#34;&gt;&lt;a href=&#34;#cb7-45&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch github user error&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-46&#34;&gt;&lt;a href=&#34;#cb7-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-47&#34;&gt;&lt;a href=&#34;#cb7-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Document&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-48&#34;&gt;&lt;a href=&#34;#cb7-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Elm GitHub OAuth 2.0 Sample&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&#34;cb7-49&#34;&gt;&lt;a href=&#34;#cb7-49&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-50&#34;&gt;&lt;a href=&#34;#cb7-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-51&#34;&gt;&lt;a href=&#34;#cb7-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-52&#34;&gt;&lt;a href=&#34;#cb7-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative text-center&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-53&#34;&gt;&lt;a href=&#34;#cb7-53&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-54&#34;&gt;&lt;a href=&#34;#cb7-54&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-55&#34;&gt;&lt;a href=&#34;#cb7-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-56&#34;&gt;&lt;a href=&#34;#cb7-56&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-57&#34;&gt;&lt;a href=&#34;#cb7-57&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-58&#34;&gt;&lt;a href=&#34;#cb7-58&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-59&#34;&gt;&lt;a href=&#34;#cb7-59&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-60&#34;&gt;&lt;a href=&#34;#cb7-60&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-61&#34;&gt;&lt;a href=&#34;#cb7-61&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-62&#34;&gt;&lt;a href=&#34;#cb7-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-63&#34;&gt;&lt;a href=&#34;#cb7-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-64&#34;&gt;&lt;a href=&#34;#cb7-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3 mt-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-65&#34;&gt;&lt;a href=&#34;#cb7-65&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-66&#34;&gt;&lt;a href=&#34;#cb7-66&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;dt&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-67&#34;&gt;&lt;a href=&#34;#cb7-67&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-68&#34;&gt;&lt;a href=&#34;#cb7-68&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb7-69&#34;&gt;&lt;a href=&#34;#cb7-69&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Sign in with GitHub&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-70&#34;&gt;&lt;a href=&#34;#cb7-70&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-71&#34;&gt;&lt;a href=&#34;#cb7-71&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-72&#34;&gt;&lt;a href=&#34;#cb7-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-73&#34;&gt;&lt;a href=&#34;#cb7-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コレを&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make --output=docs/static/main.js src/Main.elm --optimize&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とビルドして &lt;code&gt;elm reactor&lt;/code&gt; で &lt;code&gt;docs/index.html&lt;/code&gt; にアクセスすると、サインインボタンがあってサインインすると &lt;code&gt;Hi matsubara0507!&lt;/code&gt; って感じのメッセージが出るだけの SPA ができた．&lt;/p&gt;
&lt;h3 id=&#34;リポジトリを取得&#34;&gt;リポジトリを取得&lt;/h3&gt;
&lt;p&gt;こっからは完全におまけ． リポジトリのスターをなんかステータスっぽく表示するようにしたい．&lt;/p&gt;
&lt;p&gt;リポジトリ一覧は GitHub の個別ユーザーページをモバイル版でみたときの感じにすることにした：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/mobile.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;必要なリポジトリの情報は名前とリンクと総スター数． GitHub API v3 は無駄な情報が多いので，GraphQL を使って一気に取得してみる． GraphQL のクエリの動作確認は&lt;a href=&#34;https://developer.github.com/v4/explorer/&#34;&gt;ココ&lt;/a&gt;で行える：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/graphql.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最終的に出来上がったクエリはこんな感じ：&lt;/p&gt;
&lt;pre class=&#34;graphql&#34;&gt;&lt;code&gt;query {
  viewer {
    login
    name
    repositories(first: 100, orderBy: {field: STARGAZERS, direction: DESC}, ownerAffiliations: [OWNER], isFork: false) {
      nodes {
        name
        url
        stargazers { totalCount }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クエリの &lt;code&gt;viewer {..}&lt;/code&gt; は渡したトークンのユーザー情報を指す． &lt;code&gt;viewer&lt;/code&gt; 内で &lt;code&gt;login&lt;/code&gt; や &lt;code&gt;name&lt;/code&gt; を指定することで，さっきまで v3 で取得していたユーザー情報も取得できる． &lt;code&gt;repositories&lt;/code&gt; で一気に所得できるリポジトリ数は100件が上限（&lt;code&gt;first:300&lt;/code&gt; は怒られる）． &lt;code&gt;orderBy:{..}&lt;/code&gt; でスターの多い順に並び替えて，&lt;code&gt;ownerAffiliations:[OWNER]&lt;/code&gt; と &lt;code&gt;isFork:false&lt;/code&gt; を指定することで自身のリポジトリだけを返してる． リポジトリのスター数は &lt;code&gt;stargazers { totalCount }&lt;/code&gt; で取得できる．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;あとはクエリを叩くだけ． Elm の GraphQL パッケージに良さげのものがなかったのでそのまま &lt;code&gt;elm/http&lt;/code&gt; を使うことにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;nodes&amp;quot;&lt;/span&gt; ] (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;stargazers&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;totalCount&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- さっきのクエリをヒアドキュメントとかで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-33&#34;&gt;&lt;a href=&#34;#cb10-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;viewer&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-34&#34;&gt;&lt;a href=&#34;#cb10-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-35&#34;&gt;&lt;a href=&#34;#cb10-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;request&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-36&#34;&gt;&lt;a href=&#34;#cb10-36&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-37&#34;&gt;&lt;a href=&#34;#cb10-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;token &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb10-38&#34;&gt;&lt;a href=&#34;#cb10-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://api.github.com/graphql&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-39&#34;&gt;&lt;a href=&#34;#cb10-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;jsonBody&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;object&lt;/span&gt; [ ( &lt;span class=&#34;st&#34;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; ) ])&lt;/span&gt;
&lt;span id=&#34;cb10-40&#34;&gt;&lt;a href=&#34;#cb10-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;expect&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;expectJson&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-41&#34;&gt;&lt;a href=&#34;#cb10-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-42&#34;&gt;&lt;a href=&#34;#cb10-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tracker&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-43&#34;&gt;&lt;a href=&#34;#cb10-43&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インターフェースは全く変えてないので &lt;code&gt;Main&lt;/code&gt; でいじるのは &lt;code&gt;view&lt;/code&gt; だけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;container-sm my-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;h3&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-2&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;s points: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;li&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box-row mb-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-left&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ml-1&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;                        [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-right&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;ul&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;elm-で円グラフ&#34;&gt;Elm で円グラフ&lt;/h3&gt;
&lt;p&gt;なんかこう，リポジトリのプライマリ言語ごとに円グラフにしたら面白いなっていう欲がでてきたのでそうしてみることにした． まずはリポジトリのプライマリ言語を返すようにクエリをいじる：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query {
  viewer {
    ...
    repositories(...) {
      nodes {
        ...
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;データ構造も書き足す：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map4&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;primaryLanguage&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-18&#34;&gt;&lt;a href=&#34;#cb13-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-19&#34;&gt;&lt;a href=&#34;#cb13-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-20&#34;&gt;&lt;a href=&#34;#cb13-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-21&#34;&gt;&lt;a href=&#34;#cb13-21&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-22&#34;&gt;&lt;a href=&#34;#cb13-22&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プライマリ言語の情報は &lt;code&gt;null&lt;/code&gt; が返ってくる可能性があるので、&lt;code&gt;Maybe&lt;/code&gt; でラップしている．&lt;/p&gt;
&lt;p&gt;データは揃ったので，あとは円グラフを描くだけ． 円グラフの描写には &lt;a href=&#34;https://package.elm-lang.org/packages/gampleman/elm-visualization/2.1.1&#34;&gt;&lt;code&gt;gampleman/elm-visualization&lt;/code&gt;&lt;/a&gt; を使うことにする． example 集にある「&lt;a href=&#34;https://elm-visualization.netlify.com/custompiechart&#34;&gt;Custom Pie Chart&lt;/a&gt;」をベースにすることにした． コピペしてよしなに書き換える：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 言語名&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;   &lt;span class=&#34;co&#34;&gt;-- 総スター数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- GitHub 側で設定されてる言語の色&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;990&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;504&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Svg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;pie&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;                    { &lt;span class=&#34;fu&#34;&gt;defaultPieConfig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-37&#34;&gt;&lt;a href=&#34;#cb14-37&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-38&#34;&gt;&lt;a href=&#34;#cb14-38&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sortingFn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-39&#34;&gt;&lt;a href=&#34;#cb14-39&#34;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&#34;cb14-40&#34;&gt;&lt;a href=&#34;#cb14-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-41&#34;&gt;&lt;a href=&#34;#cb14-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-42&#34;&gt;&lt;a href=&#34;#cb14-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;arc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;) [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fill&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Paint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-43&#34;&gt;&lt;a href=&#34;#cb14-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-44&#34;&gt;&lt;a href=&#34;#cb14-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-45&#34;&gt;&lt;a href=&#34;#cb14-45&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-46&#34;&gt;&lt;a href=&#34;#cb14-46&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-47&#34;&gt;&lt;a href=&#34;#cb14-47&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;centroid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-48&#34;&gt;&lt;a href=&#34;#cb14-48&#34;&gt;&lt;/a&gt;                        { &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-49&#34;&gt;&lt;a href=&#34;#cb14-49&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-50&#34;&gt;&lt;a href=&#34;#cb14-50&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-51&#34;&gt;&lt;a href=&#34;#cb14-51&#34;&gt;&lt;/a&gt;                        }&lt;/span&gt;
&lt;span id=&#34;cb14-52&#34;&gt;&lt;a href=&#34;#cb14-52&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-53&#34;&gt;&lt;a href=&#34;#cb14-53&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;text_&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-54&#34;&gt;&lt;a href=&#34;#cb14-54&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-55&#34;&gt;&lt;a href=&#34;#cb14-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;dy&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;em&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;35&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-56&#34;&gt;&lt;a href=&#34;#cb14-56&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;textAnchor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AnchorMiddle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-57&#34;&gt;&lt;a href=&#34;#cb14-57&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb14-58&#34;&gt;&lt;a href=&#34;#cb14-58&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-59&#34;&gt;&lt;a href=&#34;#cb14-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-60&#34;&gt;&lt;a href=&#34;#cb14-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;svg&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-61&#34;&gt;&lt;a href=&#34;#cb14-61&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb14-62&#34;&gt;&lt;a href=&#34;#cb14-62&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-63&#34;&gt;&lt;a href=&#34;#cb14-63&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-64&#34;&gt;&lt;a href=&#34;#cb14-64&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb14-65&#34;&gt;&lt;a href=&#34;#cb14-65&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主に書き換えたのは色の部分． example では &lt;code&gt;colors&lt;/code&gt; 的な色リストを利用してたが，リポジトリのプログラミング言語には GitHub 側で色が設定してあるので，それをモデルに持たせて引用することにした． あとは &lt;code&gt;Repository&lt;/code&gt; 型から &lt;code&gt;Data&lt;/code&gt; 型を組み立てる部分を書くだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-10&#34;&gt;&lt;a href=&#34;#cb15-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-11&#34;&gt;&lt;a href=&#34;#cb15-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;hexToColor&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-12&#34;&gt;&lt;a href=&#34;#cb15-12&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-13&#34;&gt;&lt;a href=&#34;#cb15-13&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-14&#34;&gt;&lt;a href=&#34;#cb15-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-15&#34;&gt;&lt;a href=&#34;#cb15-15&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-16&#34;&gt;&lt;a href=&#34;#cb15-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-17&#34;&gt;&lt;a href=&#34;#cb15-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-18&#34;&gt;&lt;a href=&#34;#cb15-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-19&#34;&gt;&lt;a href=&#34;#cb15-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-20&#34;&gt;&lt;a href=&#34;#cb15-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-21&#34;&gt;&lt;a href=&#34;#cb15-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-22&#34;&gt;&lt;a href=&#34;#cb15-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-23&#34;&gt;&lt;a href=&#34;#cb15-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-24&#34;&gt;&lt;a href=&#34;#cb15-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-25&#34;&gt;&lt;a href=&#34;#cb15-25&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-26&#34;&gt;&lt;a href=&#34;#cb15-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-27&#34;&gt;&lt;a href=&#34;#cb15-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-28&#34;&gt;&lt;a href=&#34;#cb15-28&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb15-29&#34;&gt;&lt;a href=&#34;#cb15-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-30&#34;&gt;&lt;a href=&#34;#cb15-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-31&#34;&gt;&lt;a href=&#34;#cb15-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-32&#34;&gt;&lt;a href=&#34;#cb15-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)) &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-33&#34;&gt;&lt;a href=&#34;#cb15-33&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-34&#34;&gt;&lt;a href=&#34;#cb15-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-35&#34;&gt;&lt;a href=&#34;#cb15-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb15-36&#34;&gt;&lt;a href=&#34;#cb15-36&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-37&#34;&gt;&lt;a href=&#34;#cb15-37&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々考えた結果，いったん各 &lt;code&gt;Repository&lt;/code&gt; を &lt;code&gt;Data&lt;/code&gt; に変換して，そのあと言語名をキーにした &lt;code&gt;Dict&lt;/code&gt; へと畳み込んでいる（&lt;code&gt;.data&lt;/code&gt; の部分だけ足し合わせてる）． あとは &lt;code&gt;Pie.view user&lt;/code&gt; を &lt;code&gt;Main.view&lt;/code&gt; で呼び出すだけ．&lt;/p&gt;
&lt;p&gt;あ、ちなみに真ん中にアバター画像出したしてるのは割愛（ただ単にアバター画像を GraphQL で取ってきて，&lt;code&gt;Pie.view&lt;/code&gt; で重ねてるだけ）．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Firebase 便利ですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell</id><title type="text">GHC 環境構築 概観 と PowerShell</title><updated>2020-01-27T09:06:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell"/><summary type="html">Haskell の開発環境を構築する方法は何通りかあり、新しいツールが出ると「今はこれだ」とほめるブログも公開されますがそれが初学者を混乱させることがよくあります。 本記事ではビルドツールのインストールにしぼり、開発支援、例えば ghc-mod・haskell-ide-engine・hhp には言及しません。 いくつか典型的な構築方法を確認した後、新たに私が作成したツールを紹介しより初学者を混乱に落とし入れます。 重鎮 Haskell Platform www.haskell.org Haskell 解説書史1の第1波から第3波までのデファクトスタンダードであった重鎮 Haskell Plat…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/revenge-of-hourly-antenna.html</id><title type="text">リベンジ・オブ・毎時更新 Haskell Antenna</title><updated>2020-01-19T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/revenge-of-hourly-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/hourly-antenna.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年の今頃、これを自動毎時更新しようと &lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;による毎時更新を設定しました&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;しかし。。。なんと去年の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;月ぐらいからこれが止まっています（どうやら、&lt;a href=&#34;https://discourse.drone.io/t/cron-on-cloud-drone-io/3899/2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;のこの機能を利用してマイニングをした人がいたらしく止めてしまった&lt;/a&gt;ようです）。 現在は&lt;strong&gt;僕がだいたい毎朝&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回、手動で&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;を回しています&lt;/strong&gt;。。。&lt;/p&gt;
&lt;p&gt;ずっとなんとかしなきゃなぁと思い続けてはや&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;ヶ月。 やっと重い腰をあげてなんとかしました！ というよりは、なんとかする方法を思い付いたので実装してみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#どうするか&#34; title=&#34;どうするか&#34;&gt;どうするか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実装する&#34; title=&#34;実装する&#34;&gt;実装する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#オプションの整理&#34; title=&#34;オプションの整理&#34;&gt;オプションの整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-コマンドを呼ぶ&#34; title=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt; コマンドを呼ぶ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#毎時実行&#34; title=&#34;毎時実行&#34;&gt;毎時実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#インスタンスで起動する&#34; title=&#34;インスタンスで起動する&#34;&gt;インスタンスで起動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;どうするか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうするか&#34; title=&#34;どうするか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうするか？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/free/docs/gcp-free-tier?hl=ja#always-free&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GCP&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;always free&lt;/span&gt;プランというのがあり&lt;/a&gt;、&lt;span class=&#34;ascii&#34;&gt;GCE&lt;/span&gt;インスタンスの場合は&lt;span class=&#34;ascii&#34;&gt;f1-micro&lt;/span&gt;であれば一台だけ無料です（&lt;span class=&#34;ascii&#34;&gt;2020/1&lt;/span&gt;現在）。 これに、毎時実行して更新をプッシュする&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを仕込んでおけば良いではないかということに気づきました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;自体は&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;であり、&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;などは&lt;a href=&#34;https://github.com/haskell-jp/antenna&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-jp/antenna&lt;/span&gt;&lt;/a&gt;という &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;アプリケーションで生成しています。 これを&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;か何かで毎時実行すればいいんですけど&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;の組み合わせが割とめんどくさい（&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Docker Image&lt;/span&gt;として提供している）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;にした場合更新を&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;にどうやってプッシュしようかなどを考えるのがめんどくさい&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という問題があります。&lt;/p&gt;
&lt;p&gt;そこで、&lt;span class=&#34;ascii&#34;&gt;(2)&lt;/span&gt; のプッシュの部分も含めて毎時実行の処理を&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;アプリケーションに閉じ込めてしまえば、&lt;code&gt;docker run&lt;/code&gt; しておくだけで良いのではないか？というのを思い付きました！ ということで、そういう風に&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;を改良します。&lt;/p&gt;
&lt;h1 id=&#34;実装する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実装する&#34; title=&#34;実装する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実装する&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムに「&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドを使って&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリに更新をプッシュする機能」と「全てを毎時実行する機能」の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つを組み込む必要があります。 ここで後方互換性を維持するために、これらはオプションでオンする機能にしましょう。 なのでまずは、&lt;span class=&#34;ascii&#34;&gt;antenna CLI&lt;/span&gt;アプリケーションのオプションを整理するところから始めます。&lt;/p&gt;
&lt;h2 id=&#34;オプションの整理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#オプションの整理&#34; title=&#34;オプションの整理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;オプションの整理&lt;/h2&gt;
&lt;p&gt;改修前の&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;はオプションを持っていません。 &lt;code&gt;getArgs&lt;/code&gt; で引数（設定ファイルのパス）を受け取るだけです&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- generate 関数が設定から HTML ファイル群を生成する IO アクション&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (listToMaybe &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getArgs) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;please input config file path.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; generate path &lt;span class=&#34;op&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; readConfig path&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.7/docs/Data-Extensible-GetOpt.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt; の &lt;code&gt;GetOpt&lt;/code&gt;&lt;/a&gt; を使ってオプションを貰えるように拡張します&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- withGetOpt&amp;#39; は usage を独自で扱えるように拡張した Data.Extensible.withGetOpt です&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; withGetOpt&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;[options] [input-file]&amp;quot;&lt;/span&gt; opts &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r args usage &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (fromString usage)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (Version.build version)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; listToMaybe args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    opts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help    &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; helpOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; versionOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; verboseOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;verbose&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;helpOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;helpOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [&lt;span class=&#34;ch&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;] [&lt;span class=&#34;st&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Show this help text&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;versionOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;versionOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [] [&lt;span class=&#34;st&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Show version&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;verboseOpt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OptDescr&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;verboseOpt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; optFlag [&lt;span class=&#34;ch&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;] [&lt;span class=&#34;st&#34;&gt;&amp;quot;verbose&amp;quot;&lt;/span&gt;] &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable verbose mode: verbosity level \&amp;quot;debug\&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;差分全体はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/20&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;で確認することができます。 興味のある人はみてみてください。 &lt;code&gt;generate&lt;/code&gt; 関数は以下の &lt;code&gt;runCmd&lt;/code&gt; 関数から呼ばれています&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;runCmd _ &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;please input config file path.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;runCmd&lt;/code&gt; 関数は&lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;&lt;/a&gt;を使って &lt;code&gt;RIO env ()&lt;/code&gt; のボイラーテンプレートを減らしています。&lt;/p&gt;
&lt;h2 id=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#git-コマンドを呼ぶ&#34; title=&#34;git-コマンドを呼ぶ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt; コマンドを呼ぶ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーションから&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドを実行するには&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;&lt;/a&gt;を使うことにします。 &lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;shell&lt;/span&gt;プラグインを使うことで簡単に使用することができます。 まずはコミットを作る部分を実装しましょう&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 自作Shelly製gitコマンド関数群&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Shell&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixShell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;work   &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixShell.exec (Git.pull [])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;    generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; commitGeneratedFiles&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;commitGeneratedFiles ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;commitGeneratedFiles &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;  files &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;files &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; asks (gitConfig &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  MixShell.exec &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    Git.add files&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;    changes &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; Git.diffFileNames [&lt;span class=&#34;st&#34;&gt;&amp;quot;--staged&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;    when (&lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; changes) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Git.commit [&lt;span class=&#34;st&#34;&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;, message]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    message &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全ての差分はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/21&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;から確認できます。 &lt;code&gt;runCmd&lt;/code&gt; 関数に追記したのは &lt;code&gt;when (opts ^. #withCommit)&lt;/code&gt; から始まる&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行です（&lt;code&gt;Options&lt;/code&gt; に &lt;code&gt;#withCommit&lt;/code&gt; を追加しています）。 &lt;span class=&#34;ascii&#34;&gt;mix.hs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;shell&lt;/span&gt;プラグインを使うことで&lt;span class=&#34;ascii&#34;&gt;Shelly&lt;/span&gt;のログをだいたいそれっぽく&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;のロガーに流してくれます。&lt;/p&gt;
&lt;p&gt;次に、&lt;code&gt;git push&lt;/code&gt;も実装します&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;runCmd opts (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; path) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixShell.exec (Git.pull [])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;    generate path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withCommit) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; commitGeneratedFiles&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;    when (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;withPush)   &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; pushCommit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pushCommit ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;pushCommit &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  branch &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;branch &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; asks (gitConfig &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  MixShell.exec (Git.push [&lt;span class=&#34;st&#34;&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;, branch])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前から使っている &lt;code&gt;gitConfig&lt;/code&gt; は設定ファイルから&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;コマンドに関する設定を取ってきています（例えば、どのファイルをコミットするかやどのブランチにプッシュするかなど）。&lt;/p&gt;
&lt;p&gt;これで、差分があった場合は&lt;code&gt;git commit&lt;/code&gt;を実行し、最後に&lt;code&gt;git push&lt;/code&gt;するようなオプション、&lt;code&gt;--with-commit&lt;/code&gt;と&lt;code&gt;--with-push&lt;/code&gt;を実装できました（他にも実装していますが割愛）。&lt;/p&gt;
&lt;h2 id=&#34;毎時実行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#毎時実行&#34; title=&#34;毎時実行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;毎時実行&lt;/h2&gt;
&lt;p&gt;メインディッシュである毎時実行です。 &lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で、スケジューリング実行を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション内で行うのにちょうど良いパッケージはありますか？と尋ねたところ&lt;a href=&#34;https://hackage.haskell.org/package/cron&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cron&lt;/span&gt;&lt;/a&gt;というパッケージを紹介してもらいました（名前がややこしい笑）。 調べてみたところ、ちょうど良さそうなのでこれを使うことにします&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Cron&lt;/span&gt; (addJob, execSchedule)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; withGetOpt&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;[options] [input-file]&amp;quot;&lt;/span&gt; opts &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r args usage &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;help     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (fromString usage)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;version  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; hPutBuilder stdout (Version.build version)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;hourly   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r (listToMaybe args) &lt;span class=&#34;ot&#34;&gt;`withCron`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;     &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;      &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCmd r (listToMaybe args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;    opts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withCron ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;withCron act t &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execSchedule &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addJob act t&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;  forever &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; threadDelay &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 無限ループ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全ての差分はこの&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/22&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;&lt;/a&gt;から確認できます。 すっごい簡単ですね。 ついでに、毎日実行と毎分実行するオプションも追加しています。&lt;/p&gt;
&lt;p&gt;これでアプリケーションの方は出来上がったので、こいつを&lt;span class=&#34;ascii&#34;&gt;GCE&lt;/span&gt;インスタンスで動作させてみましょう。&lt;/p&gt;
&lt;h1 id=&#34;インスタンスで起動する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#インスタンスで起動する&#34; title=&#34;インスタンスで起動する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;インスタンスで起動する&lt;/h1&gt;
&lt;p&gt;まずは&lt;span class=&#34;ascii&#34;&gt;GCP Console&lt;/span&gt;からインスタンス作成します。 構成は次の通りです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;f1-micro&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;オレゴンリージョン&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;30GB&lt;/span&gt;の標準ストレージ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;OS&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Ubuntu 18.04&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GCP Console&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;SSH&lt;/span&gt;して、&lt;span class=&#34;ascii&#34;&gt;docker&lt;/span&gt; コマンドをインストールします（やり方は&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;公式サイト&lt;/a&gt;のをそのまま）。 ここまでできたら試しに &lt;code&gt;sudo docker pull haskelljp/antenna&lt;/code&gt; して最新のイメージを取得してみましょう。&lt;/p&gt;
&lt;p&gt;次に、&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;にプッシュするために&lt;span class=&#34;ascii&#34;&gt;SSH Key&lt;/span&gt;を生成してデプロイキーを &lt;span class=&#34;ascii&#34;&gt;haskell-jp/antenna&lt;/span&gt; リポジトリに設定します。 できたら適当に &lt;code&gt;git clone git@github.com:haskell-jp/antenna.git&lt;/code&gt; してブランチを &lt;code&gt;gh-pages&lt;/code&gt; に切り替えます。&lt;/p&gt;
&lt;p&gt;あとは次のコマンドで&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを実行するだけです&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -d \
  -v `pwd`:/work
  -v `echo $HOME`/.ssh:/root/.ssh \
  haskelljp/antenna antenna --verbose --with-commit --with-push --with-copy --hourly sites.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker logs&lt;/code&gt; を使って様子をみてましたが、うまくいってるようです！&lt;/p&gt;
&lt;h1 id=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後やりたいこと&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;igrep&lt;/span&gt;氏が&lt;a href=&#34;https://github.com/haskell-jp/antenna/issues/16&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;にしてくれてるように、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の正しい差分を&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;に通知する仕組みを整備しようと考えてます。&lt;/p&gt;
&lt;p&gt;実はコミットを&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション内で組み立てるようになった結果、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーション側でいい感じに差分を調べ上げ、その結果をコミットメッセージに組み込むことができるようになりました。 さすがに&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;やフィードの &lt;code&gt;git diff&lt;/code&gt; を解析するのは大変なので、いい感じに各サイトの最終更新ログを残すようにしてみようかなって考えてます。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/property-io.html&#34; lang=&#34;ja&#34;&gt;HspecでQuickCheckするときもshouldBeなどが使えます&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/regex-applicative.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;regex-applicative: 内部DSLとしての正規表現（ブログ記事版）&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id><title type="text">Haskell で SSH Public Key の FingerPrint を計算する</title><updated>2020-01-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;GitHub に登録している Public Key から &lt;code&gt;~/.ssh/authorized_key&lt;/code&gt; を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために &lt;code&gt;https://github.com/settings/keys&lt;/code&gt; で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．&lt;/p&gt;
&lt;p&gt;もちろん，&lt;code&gt;ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub&lt;/code&gt; なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．&lt;/p&gt;
&lt;h2 id=&#34;fingerprint&#34;&gt;FingerPrint&lt;/h2&gt;
&lt;p&gt;そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6&#34;&gt;RSA公開鍵のファイル形式とfingerprint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた &lt;a href=&#34;https://www.ietf.org/rfc/rfc4253.txt&#34;&gt;RFC4253&lt;/a&gt; の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．&lt;/p&gt;
&lt;p&gt;単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で計算する&#34;&gt;Haskell で計算する&lt;/h2&gt;
&lt;p&gt;上述の通りやることは2つ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Base64 デコード&lt;/li&gt;
&lt;li&gt;MD5 ハッシュ化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとその前に header と body を切り分ける．&lt;/p&gt;
&lt;p&gt;ちなみに，最終的なコードは &lt;a href=&#34;https://github.com/haskell-jp/playground/pull/1&#34;&gt;haskell-jp/playground&lt;/a&gt; においた．&lt;/p&gt;
&lt;h3 id=&#34;header-と-body-を切り分ける&#34;&gt;header と body を切り分ける&lt;/h3&gt;
&lt;p&gt;RSA の Public Key は &lt;code&gt;ssh-rsa AAAAXXX...&lt;/code&gt; となっている（&lt;code&gt;X&lt;/code&gt; 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 &lt;code&gt;ByteString&lt;/code&gt; を使うことにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pubkeyBody ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;pubkeyBody content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; B.split &lt;span class=&#34;dv&#34;&gt;32&lt;/span&gt; content &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    [header, body] &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; header &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;AAAA&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; body &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; body&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Word8&lt;/code&gt; 型の &lt;code&gt;32&lt;/code&gt; は空白．&lt;/p&gt;
&lt;h3 id=&#34;base64-デコード&#34;&gt;Base64 デコード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/memory&#34;&gt;memory&lt;/a&gt; というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ &lt;a href=&#34;http://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite&lt;/a&gt; というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これが memory パッケージのモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt;), convertFromBase)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;decode ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;decode body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; convertFromBase &lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt; body &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; bin &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; prefix &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; bin &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; bin&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    prefix &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\NUL\NUL\NUL\assh-rsa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;md5-ハッシュ化&#34;&gt;MD5 ハッシュ化&lt;/h3&gt;
&lt;p&gt;上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては &lt;a href=&#34;https://www.fpcomplete.com/blog/2017/09/cryptographic-hashing-haskell&#34;&gt;Cryptographic Hashing in Haskell - FPComplete&lt;/a&gt; で紹介されてる(&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html&#34;&gt;邦訳記事&lt;/a&gt;)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(&lt;a href=&#34;https://github.com/haskell-crypto&#34;&gt;Haskell Crypto&lt;/a&gt;)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．&lt;/p&gt;
&lt;p&gt;このパッケージで何らかのハッシュ関数を利用するには &lt;code&gt;Crypto.Hash.hash&lt;/code&gt; 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は &lt;code&gt;Digest MD5&lt;/code&gt; 型とすれば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fingerprint ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;fingerprint content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  body &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pubkeyBody content&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  bin  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decode body&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Crypto.hash bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;p&gt;GHCi で適当に:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.SSH.PubKey&lt;/span&gt;      &lt;span class=&#34;co&#34;&gt;-- 今まで定義してた関数のモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fingerprint &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa AAAA...&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 適当に public key の中身を貼り付ける&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3b17672020e4e8ad25516034facc12d&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub では8ビットごとに &lt;code&gt;:&lt;/code&gt; で区切られてるが，まぁそれはいいでしょ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/01/01/083723</id><title type="text">2019 年のスライド一挙公開、あるいは 2020 年の方針</title><updated>2020-01-01T08:54:55+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/01/01/083723"/><summary type="html">あけましておめでとうございます。2019 年は大変お世話になりました。2020 年も張り切っていきましょう。 さて、2019 年には結構な回数の外部発表を行いました。これらの発表内容のうち一部は単独のブログ記事としてまとめてありますが、機を逸してしまって記事化されていないものも相当数あります。そこで本記事では、2019 年中に行った発表を一覧としてまとめてみました。 2019 年の活動実績 2019 年の登壇は全部で 19 件でした。うち（先着や抽選ではなく）CFP に応募して採択されたものは 4 件です。 チェシャ猫が普段活動している領域は、Twitter の Bio にも書いてある通り、大…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/regex-applicative.html</id><title type="text">regex-applicative: 内部DSLとしての正規表現（ブログ記事版）</title><updated>2019-12-30T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/regex-applicative.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、といっても&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日のことなんでもう&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;ヶ月以上も経ってしまいましたが、私は&lt;a href=&#34;https://opt.connpass.com/event/140566/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Regex Festa&lt;/span&gt;&lt;/a&gt;というイベントで、「&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;&lt;/a&gt;」というパッケージの紹介を致しました。&lt;br /&gt;
今回は&lt;a href=&#34;https://the.igreque.info/slides/2019-10-18-regex-applicative.html&#34;&gt;その際使用したスライド&lt;/a&gt;を、ブログ記事として詳しく共有させていただきたいと思います！&lt;br /&gt;
発表時のスライドと比べて、より&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知っている人向けになってしまいますが、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の魅力を明確に伝えるために必要なのでご了承ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルを前提知識とします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめにまとめ&#34; title=&#34;はじめにまとめ&#34;&gt;はじめにまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeって&#34; title=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;って？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのapi概要&#34; title=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの使用例&#34; title=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の使用例&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ただの文字-sym-eq-s-s---re-s-s&#34; title=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;ただの文字&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#空文字ε-pure-a---re-s-a&#34; title=&#34;空文字ε-pure-a---re-s-a&#34;&gt;空文字（ε）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; RE s a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34; title=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;連接&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(*&amp;gt;) :: RE s a -&amp;gt; RE s b -&amp;gt; RE s b&lt;/code&gt;・&lt;code&gt;string :: Eq a =&amp;gt; [a] -&amp;gt; RE a [a]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#選択-re-s-a---re-s-a---re-s-a&#34; title=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;選択&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;lt;|&amp;gt;) :: RE s a -&amp;gt; RE s a -&amp;gt; RE s a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34; title=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;繰り返し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;many :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;・&lt;code&gt;some :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34; title=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;オプショナルなマッチ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;optional :: RE s a -&amp;gt; RE s (Maybe a)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#マッチした結果をhaskellの値に割り当て&#34; title=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;マッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当て&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#組み込みの正規表現を使う&#34; title=&#34;組み込みの正規表現を使う&#34;&gt;組み込みの正規表現を使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34; title=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;code&gt;(&amp;lt;$&amp;gt;) :: (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の（一引数の）関数を適用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34; title=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;code&gt;(&amp;lt;*&amp;gt;) :: RE s (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の関数を適用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#もうちょっと複雑な例&#34; title=&#34;もうちょっと複雑な例&#34;&gt;もうちょっと複雑な例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのメリット&#34; title=&#34;regex-applicativeのメリット&#34;&gt;👍&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のメリット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeのデメリット&#34; title=&#34;regex-applicativeのデメリット&#34;&gt;👎&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のデメリット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの仕組み&#34; title=&#34;regex-applicativeの仕組み&#34;&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の仕組み&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#正規表現エンジンの分類&#34; title=&#34;正規表現エンジンの分類&#34;&gt;📑正規表現エンジンの分類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regex-applicativeの実際の実装&#34; title=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実際の実装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#類似のライブラリーとの比較を軽く&#34; title=&#34;類似のライブラリーとの比較を軽く&#34;&gt;類似のライブラリーとの比較を軽く&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#各種パーサーコンビネーター&#34; title=&#34;各種パーサーコンビネーター&#34;&gt;各種パーサーコンビネーター&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#番外編-replace-attoparsecreplace-megaparsec&#34; title=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: replace-attoparsec&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verbalexpressions&#34; title=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VerbalExpressions&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめにまとめ&#34; title=&#34;はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめにまとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の式で正規表現を書ける内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーターっぽく使えて、かつ正規表現の良さ — 中間マッチが簡単にできる点など — を持ち合わせている&lt;/li&gt;
&lt;li&gt;内部は「文字を受け取って続きの状態のリストを返す関数」として表現された&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;で実装されている&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeって&#34; title=&#34;regex-applicativeって&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;って？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;&lt;/a&gt;は、正規表現を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として表現したライブラリーです。&lt;br /&gt;
名前のとおり、いわゆる「&lt;code&gt;Applicative&lt;/code&gt;スタイル」で正規表現を書くことができます。&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのapi概要&#34; title=&#34;regex-applicativeのapi概要&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;概要&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;には、正規表現オブジェクト&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative.html#t:RE&#34;&gt;&lt;code&gt;RE&lt;/code&gt;型&lt;/a&gt;の値とマッチさせる文字列を受け取って、その結果を返す関数がいくつかあります。&lt;br /&gt;
今回はそのうち最も単純な&lt;code&gt;match&lt;/code&gt;関数を使用します。👇のような型定義となっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;match ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RE&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [s] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義のとおり、&lt;code&gt;RE&lt;/code&gt;型は型引数としてマッチさせる文字の型&lt;code&gt;s&lt;/code&gt;と、マッチした結果にも使われる「正規表現の結果」を表す型&lt;code&gt;a&lt;/code&gt;を受け取ります。&lt;br /&gt;
&lt;code&gt;RE&lt;/code&gt;型を&lt;code&gt;Applicative&lt;/code&gt;のインスタンスにするためには、その結果を表す型が必須なのです。この後出す例でこの「正規表現の結果」を好きな値に変える方法を示しましょう。&lt;/p&gt;
&lt;p&gt;そして第&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;引数がマッチさせる文字列に当たります。&lt;code&gt;[s]&lt;/code&gt;と&lt;code&gt;RE&lt;/code&gt;型の第&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;型引数&lt;code&gt;s&lt;/code&gt;のリストになっているとおり、&lt;code&gt;match&lt;/code&gt;関数&lt;small&gt;（と、その他の&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;において文字列をマッチさせる&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;）&lt;/small&gt;は任意のリストに対して使用することができます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の標準の文字列&lt;code&gt;String&lt;/code&gt;の実態は&lt;code&gt;[Char]&lt;/code&gt;、すなわち&lt;code&gt;Char&lt;/code&gt;のリストなので、通常&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;を使用する場合&lt;code&gt;s&lt;/code&gt;には&lt;code&gt;Char&lt;/code&gt;が割り当てられます。&lt;br /&gt;
型変数なので、当然他の型のリストに対しても使用できます。これは他の正規表現ライブラリーではあまりない特性でしょう。&lt;/p&gt;
&lt;p&gt;戻り値はおなじみの&lt;code&gt;Maybe&lt;/code&gt;型です。マッチが成功すれば、引数に渡した正規表現&lt;code&gt;RE s a&lt;/code&gt;型の「結果」、&lt;code&gt;a&lt;/code&gt;型の値を&lt;code&gt;Just&lt;/code&gt;にくるんで返します。そして失敗すればもちろん&lt;code&gt;Nothing&lt;/code&gt;を返します。&lt;/p&gt;
&lt;p&gt;⚠️&lt;code&gt;match&lt;/code&gt;関数について特筆すべきことをもう一つ。他のよくある正規表現ライブラリーと異なり、&lt;code&gt;match&lt;/code&gt;関数は完全一致じゃないとマッチしないのでご注意ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;には完全一致じゃないといけない関数と完全一致じゃなくてもよい関数両方があるので、少し混乱します😰&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの使用例&#34; title=&#34;regex-applicativeの使用例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の使用例&lt;/h1&gt;
&lt;p&gt;それではいよいよ&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージを使ってみましょう。&lt;br /&gt;
👇のコマンドでインストールして、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build regex-applicative&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;small&gt;（最近の）&lt;/small&gt;&lt;code&gt;cabal&lt;/code&gt;の場合は👇を実行すればできるはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-install --lib regex-applicative&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-repl -b regex-applicative&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動したら、こちらの&lt;code&gt;import&lt;/code&gt;文を張って、本記事のサンプルを実行する準備をしてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative.Common&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ただの文字-sym-eq-s-s---re-s-s&#34; title=&#34;ただの文字-sym-eq-s-s---re-s-s&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ただの文字&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;ここからは、正規表現の基本的な機能を利用するための&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を紹介します。&lt;br /&gt;
まずはただの文字一つにマッチする&lt;code&gt;sym&lt;/code&gt;から&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sym :: Eq s =&amp;gt; s -&amp;gt; RE s s&lt;/code&gt;という型定義のとおり、引数として受け取った文字と文字列における文字が等しいかチェックして、等しければマッチした文字をそのまま返す正規表現を作ります。&lt;/p&gt;
&lt;p&gt;また、より一般化したバージョンとして、&lt;code&gt;psym&lt;/code&gt;という関数もあります。&lt;br /&gt;
こちらは&lt;code&gt;psym :: (s -&amp;gt; Bool) -&amp;gt; RE s s&lt;/code&gt;という型定義のとおり、「文字を受け取ってブール値を返す関数」を受け取って、受け取った関数が文字に対して&lt;code&gt;True&lt;/code&gt;を返したらマッチする、という正規表現を作ります。&lt;/p&gt;
&lt;p&gt;なので例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書けば&lt;code&gt;sym&lt;/code&gt;関数と全く同じことができますし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdef&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdef&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書けば、文字クラスっぽいことができます。&lt;/p&gt;
&lt;h2 id=&#34;空文字ε-pure-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#空文字ε-pure-a---re-s-a&#34; title=&#34;空文字ε-pure-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;空文字（ε）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; RE s a&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現に欠かせない、空文字（ε）を表す正規表現も作れます。&lt;br /&gt;
&lt;code&gt;Applicative&lt;/code&gt;型クラスの&lt;code&gt;pure&lt;/code&gt;で表現します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん、&lt;code&gt;pure&lt;/code&gt;は任意の値を受け取って「受け取った値をそのまま返すもの」を作ることができるので、結果として文字（列）以外の値を返す正規表現も、簡単に作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;42&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;42&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34; title=&#34;連接-re-s-a---re-s-b---re-s-bstring-eq-a-a---re-a-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;連接&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(*&amp;gt;) :: RE s a -&amp;gt; RE s b -&amp;gt; RE s b&lt;/code&gt;・&lt;code&gt;string :: Eq a =&amp;gt; [a] -&amp;gt; RE a [a]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;続いて連接、つまり「二つ以上の正規表現を続けてマッチさせる正規表現を作る」処理です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では、&lt;code&gt;Applicative&lt;/code&gt;型クラスの&lt;code&gt;*&amp;gt;&lt;/code&gt;がそのまま連接として使えるようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然、単なる文字の正規表現を並べることはありふれたことなので、&lt;code&gt;string&lt;/code&gt;関数という文字列を渡すだけのバージョンも用意されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- マッチする文字列は同じ、より分かりやすいバージョン&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の正規表現オブジェクトは&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-String.html#t:IsString&#34;&gt;&lt;code&gt;IsString&lt;/code&gt;&lt;/a&gt;型クラスのインスタンスでもあるので、&lt;code&gt;OverloadedStrings&lt;/code&gt;言語拡張を使えば文字列リテラルだけで正規表現オブジェクトを作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#選択-re-s-a---re-s-a---re-s-a&#34; title=&#34;選択-re-s-a---re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;選択&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;lt;|&amp;gt;) :: RE s a -&amp;gt; RE s a -&amp;gt; RE s a&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現の「選択」、すなわち「二つの正規表現のうちどちらか一方にマッチする正規表現を作る」処理は、&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Applicative.html#t:Alternative&#34;&gt;&lt;code&gt;Alternative&lt;/code&gt;&lt;/a&gt;型クラスでおなじみの&lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;を使います&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34; title=&#34;繰り返し-many-re-s-a---re-s-asome-re-s-a---re-s-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;繰り返し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;many :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;・&lt;code&gt;some :: RE s a -&amp;gt; RE s [a]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;正規表現の「繰り返し」、指定した正規表現を繰り返しマッチさせる正規表現を作る処理は、これまた&lt;code&gt;Alternative&lt;/code&gt;の&lt;code&gt;many&lt;/code&gt;メソッド・&lt;code&gt;some&lt;/code&gt;メソッドによって実装されています。&lt;br /&gt;
&lt;code&gt;Alternative&lt;/code&gt;型クラスのデフォルトの定義どおり、&lt;code&gt;many&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上の繰り返し、&lt;code&gt;some&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回以上の繰り返しを表しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (some (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (some (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34; title=&#34;オプショナルなマッチ-optional-re-s-a---re-s-maybe-a&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;オプショナルなマッチ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;optional :: RE s a -&amp;gt; RE s (Maybe a)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;それから、いわゆる「正規表現の基本三演算」には含まれてませんが&lt;small&gt;（選択と&lt;code&gt;pure&lt;/code&gt;で実装できるので）&lt;/small&gt;、この後の例で使用するので「オプショナルなマッチ」を実現する方法を紹介しておきます。&lt;br /&gt;
名前のとおり&lt;code&gt;optional&lt;/code&gt;という関数を使います。これも&lt;code&gt;Alternative&lt;/code&gt;型クラスに対して使える関数ですね！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; optional (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; optional (sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#マッチした結果をhaskellの値に割り当て&#34; title=&#34;マッチした結果をhaskellの値に割り当て&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;マッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当て&lt;/h2&gt;
&lt;p&gt;ここからは、他の正規表現ライブラリーでは珍しい、「正規表現でマッチした結果を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てる方法」をより詳しく紹介します。&lt;/p&gt;
&lt;h3 id=&#34;組み込みの正規表現を使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#組み込みの正規表現を使う&#34; title=&#34;組み込みの正規表現を使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;組み込みの正規表現を使う&lt;/h3&gt;
&lt;p&gt;例えば、&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative-Common.html#v:digit&#34;&gt;&lt;code&gt;Text.Regex.Applicative.Common&lt;/code&gt;モジュールにある&lt;code&gt;digit&lt;/code&gt;&lt;/a&gt;は、一桁の数字&lt;small&gt;（つまり&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;9&lt;/code&gt;）&lt;/small&gt;にマッチした上で、結果としてマッチした値を&lt;strong&gt;文字ではなく、整数として&lt;/strong&gt;返す正規表現を提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match digit &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加えて、先ほど紹介した&lt;code&gt;many&lt;/code&gt;関数と組み合わせると、マッチした結果を整数のリストとして取得することもできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34; title=&#34;a---b---re-s-a---re-s-b-任意の一引数の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;(&amp;lt;$&amp;gt;) :: (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の（一引数の）関数を適用する&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、名前のとおり正規表現を&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルで利用できるようにするためのライブラリーです。&lt;br /&gt;
当然ながら&lt;code&gt;Applicative&lt;/code&gt;スタイルに必須の&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;関数も使用できます。&lt;br /&gt;
正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;型の返す「マッチした結果」に、あなたの好きな関数を適用して変換した正規表現を作れるのです。&lt;/p&gt;
&lt;p&gt;先ほどの&lt;code&gt;many digit&lt;/code&gt;の例を再利用して、マッチした整数の合計値を求めてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34; title=&#34;re-s-a---b---re-s-a---re-s-b-任意の関数を適用する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;(&amp;lt;*&amp;gt;) :: RE s (a -&amp;gt; b) -&amp;gt; RE s a -&amp;gt; RE s b&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 任意の関数を適用する&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルのもう一つの重要な関数といえば、やっぱり&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;でしょう。&lt;br /&gt;
&lt;code&gt;many digit&lt;/code&gt;を再利用して、「先頭に書かれた桁数だけ数字を取得する」という例を書いてみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (&lt;span class=&#34;fu&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; digit &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many digit) &lt;span class=&#34;st&#34;&gt;&amp;quot;312345&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;もうちょっと複雑な例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#もうちょっと複雑な例&#34; title=&#34;もうちょっと複雑な例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;もうちょっと複雑な例&lt;/h2&gt;
&lt;p&gt;ここまで紹介した例を使用してもうちょっと複雑な例を書いてみましょう。&lt;br /&gt;
小さな正規表現を組み合わせて、&lt;span class=&#34;ascii&#34;&gt;http&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;https&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;における、オリジンにマッチする正規表現を簡単に書いてみます。&lt;/p&gt;
&lt;p&gt;まずは部品作りです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のスキームにマッチさせるために、「&lt;code&gt;http&lt;/code&gt;の後にオプショナルな&lt;code&gt;s&lt;/code&gt;、続けて&lt;code&gt;://&lt;/code&gt;」という文字列にマッチする正規表現を作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; schemeRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;    ((&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (string &lt;span class=&#34;st&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;://&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;*&lt;/code&gt;を使うことで、&lt;code&gt;://&lt;/code&gt;の部分にはマッチしてもマッチした結果は無視している点にご注意ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;はこのように、「マッチしたら関数に渡す文字列」と「マッチしても関数に渡さない文字列」をユーザーが書き分けられるようになっているので、他の正規表現ライブラリーにあるようなキャプチャー&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;や、先読み言明・後読み言明などの機能が必要ないのです。&lt;/p&gt;
&lt;p&gt;続けて、ホスト名にマッチする正規表現を作ります。&lt;br /&gt;
ここでは単純化して、「アルファベットの小文字かピリオド&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;文字以上」という文字列にしておきます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; hostRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (psym (&lt;span class=&#34;ot&#34;&gt;`elem`&lt;/span&gt; [&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後はポート番号です。&lt;br /&gt;
&lt;code&gt;:&lt;/code&gt;という文字の後に&lt;a href=&#34;http://hackage.haskell.org/package/regex-applicative-0.3.3.1/docs/Text-Regex-Applicative-Common.html#v:decimal&#34;&gt;&lt;code&gt;Text.Regex.Applicative.Common&lt;/code&gt;に入った&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt;、すなわち一桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数にマッチする正規表現を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; portRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sym &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上で正規表現のパーツができました。&lt;br /&gt;
早速使ってみる… 前に、マッチした結果を割り当てるレコード型を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; scheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; host ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; port ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;や&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;を使って組み合わせて、&lt;code&gt;Origin&lt;/code&gt;値コンストラクターに食わせるだけです！&lt;br /&gt;
ポート番号はオリジンにおいてはなくても良いので、省略した場合は仮に&lt;code&gt;80&lt;/code&gt;としておきましょう&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;originRe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;           schemeRe &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;           hostRe   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;           (portRe &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;80&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度こそ使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match originRe &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:8080&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {scheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, port &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt;})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match originRe &lt;span class=&#34;st&#34;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Origin&lt;/span&gt; {scheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, port &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;80&lt;/span&gt;})&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;を使うことで、&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のオリジンにマッチさせるだけでなく、マッチした結果を&lt;code&gt;Origin&lt;/code&gt;型の値として割り当てる正規表現が作れました！🎉&lt;/p&gt;
&lt;h1 id=&#34;regex-applicativeのメリット&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのメリット&#34; title=&#34;regex-applicativeのメリット&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のメリット&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージには、他の正規表現ライブラリーと比べて、以下のメリットがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列以外の扱いにも強い
&lt;ul&gt;
&lt;li&gt;マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てるのが簡単！
&lt;ul&gt;
&lt;li&gt;「生のデータ」からアプリケーションにおける「コアの処理が欲しいデータ」への変換がワンストップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字列だけでなく、任意のリストに対してマッチできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として書けるので、コンパイラーによる型チェックの恩恵を受けやすい
&lt;ul&gt;
&lt;li&gt;前述の「マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てる」処理も、すべて型チェックされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeのデメリット&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeのデメリット&#34; title=&#34;regex-applicativeのデメリット&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のデメリット&lt;/h1&gt;
&lt;p&gt;一方&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;パッケージには、他の正規表現ライブラリーに対する以下のデメリットがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードは長い
&lt;ul&gt;
&lt;li&gt;内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;なのでやむなし&lt;/li&gt;
&lt;li&gt;専用のメタキャラクターより分かりやすい、とも言える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ユーザーからの入力として、正規表現を受け取ることは難しい
&lt;ul&gt;
&lt;li&gt;これも内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;なのでやむなし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;おそらく&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;とかで書いたものほど速くはない
&lt;ul&gt;
&lt;li&gt;そんなに細かい最適化をしているわけではないし、&lt;span class=&#34;ascii&#34;&gt;Pure Haskell&lt;/span&gt;なので…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;以外の文字列にはマッチできない…
&lt;ul&gt;
&lt;li&gt;これが&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;にとって一番痛い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;や&lt;code&gt;ByteString&lt;/code&gt;向けのものも、原理的に実装できないというわけではないはず&lt;/li&gt;
&lt;li&gt;参考&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;http://bicycle1885.hatenablog.com/entry/2012/12/24/234707&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Tips (&lt;/span&gt;文字列編&lt;span class=&#34;ascii&#34;&gt;) -&lt;/span&gt; りんごがでている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;regex-applicativeの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの仕組み&#34; title=&#34;regex-applicativeの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の仕組み&lt;/h1&gt;
&lt;p&gt;ここからは、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における正規表現エンジンがどのように作られているか、『&lt;a href=&#34;https://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;正規表現技術入門&lt;/a&gt;』における正規表現エンジンの分類を参考に説明しましょう。&lt;/p&gt;
&lt;h2 id=&#34;正規表現エンジンの分類&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正規表現エンジンの分類&#34; title=&#34;正規表現エンジンの分類&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;📑正規表現エンジンの分類&lt;/h2&gt;
&lt;p&gt;『正規表現技術入門』の&lt;span class=&#34;ascii&#34;&gt;p.56&lt;/span&gt;では、正規表現エンジンを次の二つに分類しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;型
&lt;ul&gt;
&lt;li&gt;正規表現を決定性有限オートマトン（&lt;span class=&#34;ascii&#34;&gt;deterministic finite automaton&lt;/span&gt;）と呼ばれるものに変換して正規表現マッチングを行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;VM&lt;/span&gt;型
&lt;ul&gt;
&lt;li&gt;正規表現をバイトコード（&lt;span class=&#34;ascii&#34;&gt;bytecode&lt;/span&gt;）と呼ばれるものに変換して正規表現マッチングを行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さて、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の場合はどちらなのでしょうか？&lt;br /&gt;
&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/&#34;&gt;ソースコード&lt;/a&gt;を読んでみると、どうやらどちらでもなさそうなことがわかります。&lt;br /&gt;
というのも、正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;に&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Object.hs#L110-L111&#34;&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/a&gt;という関数で変換した後、&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;に変換しないでそのまま使っているからです。&lt;br /&gt;
一般的に、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;に変換可能で、変換してからマッチさせた方がしばしば高速にマッチできることが知られています。&lt;br /&gt;
ところが&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;ではその変換を行わず、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;として使用しているのです。&lt;/p&gt;
&lt;p&gt;なぜそうした仕様になっているかについて、私の推測を述べましょう&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では先ほど紹介した&lt;code&gt;psym&lt;/code&gt;関数のように、「任意の文字を受け取る関数」を正規表現オブジェクトに含められなければなりません。&lt;br /&gt;
結果、関数がどんな文字の時にどんな値を返すのか&lt;small&gt;（マッチが成功するのかしないのか）&lt;/small&gt;、正規表現オブジェクトをコンパイルする関数にはわからなくなってしまうのです。&lt;br /&gt;
一方、効率の良い&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の実装では、&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の一つ一つの状態ごとに「どの文字を受け取ったら次はどの状態に遷移するか」という情報を、連想配列として持っておかなければなりません&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
そのため、どの文字を受け取ったらマッチが成功するのかわからない箇所が正規表現オブジェクトに混ざっている限り、効率の良い&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;の実装にはできないのです。&lt;/p&gt;
&lt;p&gt;その分、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;では任意の文字を受け取る関数が使えるので、普通の正規表現ライブラリーよりも柔軟に書くことができるようになっています。&lt;br /&gt;
その点を考慮したトレードオフなんでしょう。&lt;/p&gt;
&lt;h2 id=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#regex-applicativeの実際の実装&#34; title=&#34;regex-applicativeの実際の実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実際の実装&lt;/h2&gt;
&lt;p&gt;さらに&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の実装を掘ってみましょう。&lt;br /&gt;
先ほど紹介した&lt;code&gt;compile&lt;/code&gt;関数は、正規表現オブジェクト&lt;code&gt;RE s a&lt;/code&gt;を&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Object.hs#L38-L43&#34;&gt;&lt;code&gt;ReObject s r&lt;/code&gt;&lt;/a&gt;という型の、&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Types.hs#L9-L16&#34;&gt;&lt;code&gt;Thread s r&lt;/code&gt;&lt;/a&gt;型の値のキューに変換します。&lt;br /&gt;
これが&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;と呼べそうですね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReObject&lt;/span&gt; s r &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReObject&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;SQ.StateQueue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Thread s r&lt;/code&gt;型の値は、&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;における状態遷移を表します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;        {&lt;span class=&#34;ot&#34;&gt; threadId_ ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ThreadId&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;        ,&lt;span class=&#34;ot&#34;&gt; _threadCont ::&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Thread&lt;/span&gt; s r]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-5&#34; title=&#34;5&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accept&lt;/span&gt; r&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型定義のとおり、&lt;code&gt;Thread&lt;/code&gt;と&lt;code&gt;Accept&lt;/code&gt;という二通りの値をとります&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⏩&lt;code&gt;Thread&lt;/code&gt;はその用途からして、事実上&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;という関数と同等の型です。&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;code&gt;ReObject&lt;/code&gt;によって文字列&lt;code&gt;[s]&lt;/code&gt;の値をマッチさせる際、この&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;に文字を渡します。
&lt;ul&gt;
&lt;li&gt;➡️そして、関数が結果として返した、&lt;code&gt;Thread s r&lt;/code&gt;型の値を&lt;small&gt;（そのリストから）&lt;/small&gt;一つずつキューに追加して、また次の文字にマッチさせます。&lt;/li&gt;
&lt;li&gt;↩️一方、関数が空リストを返した場合は — そう、マッチが失敗した、ということなのです。その場合は、キューからさらに&lt;code&gt;Thread s r&lt;/code&gt;の値を取り出して&lt;small&gt;（値コンストラクターが&lt;code&gt;Thread&lt;/code&gt;であれば）&lt;/small&gt;マッチしなかった文字をまた&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;に渡します。&lt;/li&gt;
&lt;li&gt;なお、&lt;code&gt;threadId_&lt;/code&gt;はキューに追加する際同じ&lt;code&gt;threadId_&lt;/code&gt;の&lt;code&gt;Thread&lt;/code&gt;を追加してしまうのを防ぐためのキーです。詳細は割愛します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;✅&lt;code&gt;Accept r&lt;/code&gt;は名前のとおり&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;の受理状態を表しています。&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;を繰り返し適用して最終的に&lt;code&gt;Accept r&lt;/code&gt;を返した&lt;code&gt;Thread&lt;/code&gt;のみが「マッチした」と解釈されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;は&lt;code&gt;s -&amp;gt; [Thread s r]&lt;/code&gt;を返す関数、すなわち「文字を受け取って次の状態のリストを返す継続」として作られています。&lt;/p&gt;
&lt;p&gt;ただ実際に実行する際の流れを見てみると、&lt;code&gt;ReObject&lt;/code&gt;に含まれる&lt;code&gt;Thread&lt;/code&gt;を一つずつ実行してみて、結果が条件に合うものを選ぶ、といった方が近いです。&lt;br /&gt;
例えば&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Interface.hs#L81-L85&#34;&gt;&lt;code&gt;match&lt;/code&gt;関数&lt;/a&gt;では、&lt;code&gt;ReObject&lt;/code&gt;に文字を一文字ずつ与えた結果の中から、&lt;code&gt;listToMaybe&lt;/code&gt;を使って最初に&lt;code&gt;Accept&lt;/code&gt;にたどり着く&lt;code&gt;Thread&lt;/code&gt;を取得しています。&lt;br /&gt;
それから、最長マッチする部分文字列を検索する&lt;a href=&#34;https://github.com/feuerbach/regex-applicative/blob/5e9a06622d33c7657353ddaccfe101b96946027a/Text/Regex/Applicative/Interface.hs#L141-L149&#34;&gt;&lt;code&gt;findLongestPrefix&lt;/code&gt;関数&lt;/a&gt;は、マッチが失敗するか残りの文字列が空になるまで繰り返し文字を&lt;code&gt;ReObject&lt;/code&gt;に与えることで、できるだけ長いマッチが返るように調整しています。&lt;br /&gt;
このように&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;code&gt;ReObject&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;(NFA)&lt;/span&gt;に文字を一つずつ与えてマッチ結果を生成する処理と、そのマッチ結果を選び取る処理とを分離することで、様々な方針でマッチできるようになっているのです。&lt;/p&gt;
&lt;h1 id=&#34;類似のライブラリーとの比較を軽く&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#類似のライブラリーとの比較を軽く&#34; title=&#34;類似のライブラリーとの比較を軽く&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;類似のライブラリーとの比較を軽く&lt;/h1&gt;
&lt;h2 id=&#34;各種パーサーコンビネーター&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#各種パーサーコンビネーター&#34; title=&#34;各種パーサーコンビネーター&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;各種パーサーコンビネーター&lt;/h2&gt;
&lt;p&gt;さて、ここまでこの文章を読んでいただけた方の中には、「これって&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;とか&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;とかのパーサーコンビネーターライブラリーと何が違うんだ？」という疑問をお持ちの方も多いでしょう。&lt;br /&gt;
そう、大抵の場合、パーサーコンビネーターライブラリーも下記のような特徴を持ち合わせています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として実装されている
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt;や&lt;code&gt;Alternative&lt;/code&gt;型クラスのメソッドを利用した&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マッチした結果から（文字列以外の）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の値に割り当てるのが簡単&lt;/li&gt;
&lt;li&gt;「文字&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Char&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;」の列以外にもマッチできる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に「&lt;code&gt;Applicative&lt;/code&gt;や&lt;code&gt;Alternative&lt;/code&gt;型クラスのメソッドを利用した&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;」である点は興味深く、場合によっては、使うライブラリーだけ換えて式をコピペしてもコンパイルは通る、なんてことが普通にあり得るくらい似ています。&lt;br /&gt;
ただし、当然コンパイルが通るだけでは意図通りに動くとは限りません。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;と一般的なパーサーコンビネーターライブラリーには、「&lt;strong&gt;自動的にバックトラックをするかしないか&lt;/strong&gt;」という違いがあるためです。&lt;/p&gt;
&lt;p&gt;例えば、次の式は&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;でも&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;でも有効な式ですが、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の&lt;code&gt;match&lt;/code&gt;関数では、「&lt;code&gt;ab&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回以上繰り返される文字列」にマッチして最後の&lt;code&gt;ab&lt;/code&gt;を返すことができるのに、&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;の&lt;code&gt;parse&lt;/code&gt;関数ではパースに失敗してしまいます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack build regex-applicative attoparsec&lt;/code&gt;した上で以下のように書いて試してみましょう。&lt;br /&gt;
まずは&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;で試す場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;abab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ababab&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いずれの文字列でも&lt;code&gt;Just &#34;ab&#34;&lt;/code&gt;が返ってきてますね😌。&lt;/p&gt;
&lt;p&gt;続いて&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;で試す場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- attoparsecは`String`をサポートしてないのでOverloadedStringsでTextとして扱う&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Attoparsec.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 文字列の終端であることを明確にするために、空文字列をfeedしておく&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;abab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many (string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;ababab&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いずれの文字列でも失敗になってしまいました。なぜうまくいかないのでしょう？&lt;br /&gt;
それは文字列&lt;code&gt;&#34;ababab&#34;&lt;/code&gt;における&lt;code&gt;ab&lt;/code&gt;を、&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が消費してしまい、&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;が処理できなくなってしまうためです。&lt;br /&gt;
対する&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;における&lt;code&gt;many (string &#34;ab&#34;) *&amp;gt; string &#34;ab&#34;&lt;/code&gt;では、正規表現全体がマッチするよう、自動でバックトラックしてくれます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;でも最初に&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が&lt;code&gt;&#34;ababab&#34;&lt;/code&gt;全体を消費した直後では、&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;のマッチは当然失敗してしまいます。&lt;br /&gt;
しかし、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;はそれではあきらめません。&lt;code&gt;*&amp;gt;&lt;/code&gt;の右辺に書いた&lt;code&gt;string &#34;ab&#34;&lt;/code&gt;が成功するまで、失敗する度に&lt;code&gt;many (string &#34;ab&#34;)&lt;/code&gt;が消費した文字を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;文字ずつ返却してくれるのです。これがバックトラックです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;に限らず、大抵の正規表現エンジンがこのように自動的なバックトラックを行います。&lt;/p&gt;
&lt;p&gt;こうした性質の違いにより、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;strong&gt;文字列の中間に指定したパターンをマッチさせる&lt;/strong&gt;のが、パーサーコンビネーターライブラリーよりも得意です。&lt;/p&gt;
&lt;p&gt;例えば「文字列の中間にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数」にマッチさせる場合、&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;では次のように書きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Regex.Applicative.Common&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; match (few anySym &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; few anySym) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12345&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;few&lt;/code&gt;は「控えめな繰り返し」を実現するための関数です。引数で指定した正規表現を&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上マッチさせる、という点では&lt;code&gt;many&lt;/code&gt;と同じですが、前後にある正規表現がなるべく長くマッチするよう、優先してマッチさせてくれます。&lt;br /&gt;
&lt;code&gt;few anySym&lt;/code&gt;は普通の正規表現ライブラリーでいうところの&lt;code&gt;.*?&lt;/code&gt;に相当します。&lt;/p&gt;
&lt;p&gt;同じことを&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;で実現するために&lt;code&gt;many anyChar *&amp;gt; decimal &amp;lt;* many anyChar&lt;/code&gt;と書いてみても、やはりうまくいきません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Attoparsec.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed (parse (many anyChar &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; many anyChar) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;not enough input&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理由は先ほどと同様で、最初に書いた&lt;code&gt;many anyChar&lt;/code&gt;がすべての文字列を消費してしまい、それ以降の&lt;code&gt;decimal&lt;/code&gt;などがマッチできないためです。&lt;br /&gt;
正しく処理するには、「&lt;code&gt;decimal&lt;/code&gt;の先頭以外の文字列」、すなわち「数字以外の文字列」が&lt;code&gt;many&lt;/code&gt;であることを明示する方法をとるしかありません&lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; nonDigits &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy (&lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isDigit&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; feed ((parse (nonDigits &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; nonDigits)) &lt;span class=&#34;st&#34;&gt;&amp;quot;abc12345def&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Done&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12345&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんなわけで、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によくあるパーサーコンビネーターのように&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルで書けて、なおかつ他の正規表現ライブラリーのように中間マッチがしやすい&lt;/strong&gt;という、両方の良さを持ち合わせていると言えます。&lt;/p&gt;
&lt;h3 id=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編-replace-attoparsecreplace-megaparsec&#34; title=&#34;番外編-replace-attoparsecreplace-megaparsec&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: replace-attoparsec&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;…と、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;のよさを語ったところで舌の根も乾かぬうちに恐縮ですが、実は&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;をはじめパーサーコンビネーターライブラリーの「中間マッチがやりにくい」という弱点を改善するためのパッケージがあります。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/replace-attoparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/replace-megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;&lt;/a&gt;といいます&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
名前のとおり&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;を改善するパッケージで、&lt;span class=&#34;ascii&#34;&gt;replace-megaparsec&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;を改善するパッケージです。&lt;br /&gt;
名前も&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;もお互いそっくりなんで&lt;small&gt;（作者も同じですしね）&lt;/small&gt;、今回は&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;の方を紹介しましょう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;を使えば、次のように書くだけで「文字列の中間にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;桁以上の&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数」を取り出すことができます。&lt;/p&gt;
&lt;pre class=&#34;hakell&#34;&gt;&lt;code&gt;import Replace.Attoparsec.Text

&amp;gt; feed (parse (sepCap decimal) &amp;quot;abc12345def&amp;quot;) &amp;quot;&amp;quot;
Done &amp;quot;&amp;quot; [Left &amp;quot;abc&amp;quot;,Right 12345,Left &amp;quot;def&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&#34;abc12345def&#34;&lt;/code&gt;の中間にある&lt;code&gt;12345&lt;/code&gt;だけでなく、パースできなかった&lt;code&gt;abc&lt;/code&gt;、&lt;code&gt;def&lt;/code&gt;という文字列もおまけで取得できました！&lt;br /&gt;
&lt;code&gt;decimal&lt;/code&gt;がパースできた箇所が&lt;code&gt;Right&lt;/code&gt;として、パースできなかった箇所が&lt;code&gt;Left&lt;/code&gt;として返却されていることに注意してください。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;replace-attoparsec&lt;/span&gt;の&lt;code&gt;sepCap&lt;/code&gt;&lt;small&gt;（「&lt;span class=&#34;ascii&#34;&gt;Separate and Capture&lt;/span&gt;」の略だそうです）&lt;/small&gt;は、引数として受け取ったパーサーを、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;とりあえず先頭からマッチさせてみて、&lt;/li&gt;
&lt;li&gt;失敗したら先頭の一文字をスキップして、次の文字からまたマッチさせてみる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を繰り返しています。&lt;br /&gt;
結果的にパースできない文字列はすべてスキップして、文字列の中間にある、パースできる文字列のみにパーサーを適用できるのです。&lt;/p&gt;
&lt;h2 id=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#verbalexpressions&#34; title=&#34;verbalexpressions&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;VerbalExpressions&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;そろそろ力尽きてきたのでここからはスライドのコピペで失礼します…🙏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;詳細わかりませんが作りはよく似てる
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VerbalExpressions/JSVerbalExpressions#examples&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の例がこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変な記号の演算子ではなく英語でつけられた関数なので、こちらの方が分かりやすいという人は多そう&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VerbalExpressions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を含むいろんな言語で提供されてるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;さっと&lt;a href=&#34;http://hackage.haskell.org/package/verbalexpressions-1.0.0.0/docs/Text-Regex-VerbalExpressions.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;版のドキュメント&lt;/a&gt;読んだ感じ、文字列のマッチに特化してるっぽい？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;p&gt;以上です！👋&lt;br /&gt;
まとめもスライドからのコピペで！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の式で正規表現を書ける内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーターっぽく使えて、かつ正規表現の良さを持ち合わせている&lt;/li&gt;
&lt;li&gt;内部は「文字を受け取って続きの状態のリストを返す関数」として表現された&lt;span class=&#34;ascii&#34;&gt;NFA&lt;/span&gt;で実装されている&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;Alternative&lt;/code&gt;は、&lt;code&gt;Applicative&lt;/code&gt;より強力な（できることが多い）型クラスです。そういう意味で、&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は本当は「&lt;span class=&#34;ascii&#34;&gt;regex-alternative&lt;/span&gt;」と呼んだ方が適切なのかも知れません。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;正確には、キャプチャーした文字列を正規表現の中で再利用することができないので、他の正規表現ライブラリーのキャプチャー機能と完全に同等のことができるわけではありません。これは現状の&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;の制限です。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;もちろん、実際のところ&lt;span class=&#34;ascii&#34;&gt;https&lt;/span&gt;の場合デフォルトのポート番号は&lt;span class=&#34;ascii&#34;&gt;443&lt;/span&gt;であるべきですが、ちゃんと実装しようとすると結構複雑になるのでご容赦を！&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;この記事の最後の方を書いていて思い出しました。&lt;span class=&#34;ascii&#34;&gt;regex-applicative&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;ベースの正規表現エンジンでは不可能な「控えめな繰り返し」をサポートしているから、という理由もあるようです。なぜ&lt;span class=&#34;ascii&#34;&gt;DFA&lt;/span&gt;ベースでは「控えめな繰り返し」ができないかは私もうまく説明できません…。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;『正規表現技術入門』の&lt;span class=&#34;ascii&#34;&gt;p. 132&lt;/span&gt;における実装例では、これを状態と文字による二次元配列として実装しています。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;並行並列プログラミングで出てくるあの「スレッド」とは違うのでご注意ください。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;ただし、一般に、正規表現ライブラリーであってもこのような書き方をした方が効率よくマッチさせやすいでしょう。&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/substring-parser.html&#34;&gt;こちらの記事&lt;/a&gt;でも触れているとおり、かつて私も同じ目的のパッケージを作成しました。しかし、これらのパッケージの方が明らかにドキュメントが充実していて、機能も豊富なので今回はこれらを紹介します。将来的には&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;deprecated&lt;/span&gt;にするかも知れません。&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/revenge-of-hourly-antenna.html&#34; lang=&#34;ja&#34;&gt;リベンジ・オブ・毎時更新 Haskell Antenna&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/unicode-show.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;日本語をshowしてうまく表示されなかったら&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/25/224329</id><title type="text">barbies-thで気軽にHKDを堪能しよう [Haskell AdC 14]</title><updated>2019-12-25T23:31:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/25/224329"/><summary type="html">ミーハーな読者なら、barbiesというライブラリをご存知の方も多いと思う。そう、HKDを扱う定番ライブラリだ。HKDは、同アドベントカレンダーにも寄稿されている他、Haskell Dayでも紹介された(https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660)注目の技法だ。Higher-Kinded Data (HKD) について - Qiita HKDは、一番簡単な場合であるはずのIdentityを使うと着脱が面倒になるという問題がよく知られている。Data.Barbie.BareモジュールのWearという型族…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/unicode-show.html</id><title type="text">日本語をshowしてうまく表示されなかったら</title><updated>2019-12-22T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/unicode-show.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ℹ️この記事は&#34; title=&#34;ℹ️この記事は&#34;&gt;ℹ️この記事は🎄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#日本語などの話者がhaskellを始めるとあるある&#34; title=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;日本語（などの）話者が&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めるとあるある&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-showを使おう&#34; title=&#34;unicode-showを使おう&#34;&gt;🌐&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;を使おう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-showの最近の修正&#34; title=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の最近の修正&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#番外編pretty-simpleも使おう&#34; title=&#34;番外編pretty-simpleも使おう&#34;&gt;（番外編）&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;も使おう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ℹ️この記事は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ℹ️この記事は&#34; title=&#34;ℹ️この記事は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ℹ️この記事は🎄&lt;/h1&gt;
&lt;p&gt;この記事は、&lt;a href=&#34;https://qiita.com/advent-calendar/2019/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2019&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;22&lt;/span&gt;日目の記事です。&lt;br /&gt;
例年どおりタイプセーフプリキュア！の話をするつもりでしたが、ネタが実装できなかったので&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;の話をします&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
まぁ、こちらの方がみなさんにとっては有益でしょうし🙃&lt;/p&gt;
&lt;h1 id=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#日本語などの話者がhaskellを始めるとあるある&#34; title=&#34;日本語などの話者がhaskellを始めるとあるある&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;日本語（などの）話者が&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めるとあるある&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に日本語を入力したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12415\12435\12394\12391\24184\12379\12466\12483\12488\12384\12424\65281&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日本語を&lt;code&gt;print&lt;/code&gt;したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\31169\12289\22570\24525\34955\12398\32210\12364\20999\12428\12414\12375\12383\65281&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日本語を&lt;code&gt;show&lt;/code&gt;したり…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; iimashita x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;今、&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;って言いました！？&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (iimashita &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;今、&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;って言いました！？&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すると、日本語の大半が変な文字列に変わってしまいました😥。&lt;/p&gt;
&lt;p&gt;へ… 変な文字列じゃないし！エスケープシーケンスに変換しただけだから！&lt;/p&gt;
&lt;p&gt;これは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準における&lt;code&gt;show&lt;/code&gt;関数の残念な仕様です。&lt;br /&gt;
&lt;code&gt;show&lt;/code&gt;関数に文字列を渡すと、ダブルクォートで囲った上で、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字列や、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;の非表示文字などをエスケープシーケンスに変換して返します。&lt;br /&gt;
これは、&lt;code&gt;show&lt;/code&gt;関数をデバッグで使用した際、指定した文字列にどんな文字が含まれているか、簡単にわかるようにするための仕様です。&lt;br /&gt;
文字の文字コードを表示すれば、&lt;span class=&#34;ascii&#34;&gt;NULL&lt;/span&gt;文字や制御文字、ゼロ幅文字、特殊なスペースなど、視認しにくいおかしな文字が含まれていても、一目でわかるのです。&lt;/p&gt;
&lt;p&gt;しかしこれは日本語話者である我々にとって、少なくとも日本語の文字に関しては「余計なお世話」です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;NULL&lt;/span&gt;文字や&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;の制御文字といった本来画面に表示することがない文字列ならともかく、&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字列すべてをエスケープしてしまうのはやり過ぎでしょう。&lt;br /&gt;
現代は&lt;span class=&#34;ascii&#34;&gt;Unicode&lt;/span&gt;があるおかげで、日本語に限らずとも&lt;span class=&#34;ascii&#34;&gt;ASCII&lt;/span&gt;範囲外の文字を扱うのは当たり前になりましたから。&lt;/p&gt;
&lt;h1 id=&#34;unicode-showを使おう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#unicode-showを使おう&#34; title=&#34;unicode-showを使おう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🌐&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;を使おう&lt;/h1&gt;
&lt;p&gt;そこで便利なのが&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の&lt;code&gt;ushow&lt;/code&gt;関数は、&lt;code&gt;show&lt;/code&gt;がエスケープシーケンスに変換した日本語などの文字列を、元の文字列に戻してくれます。&lt;br /&gt;
なので、新しい型クラスを定義する必要もなく、そのまま&lt;code&gt;Show&lt;/code&gt;型クラスのインスタンスを再利用できるのです。&lt;/p&gt;
&lt;p&gt;早速先ほどの&lt;code&gt;show&lt;/code&gt;を使った例に適用してみましょう。&lt;/p&gt;
&lt;p&gt;まずは👇のコマンドでインストールして、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を起動します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;# あるいは、最近のcabalを使っている場合は...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-install --lib unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ex&#34;&gt;cabal&lt;/span&gt; v2-repl -b unicode-show&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Text.Show.Unicode&lt;/code&gt;モジュールを&lt;code&gt;import&lt;/code&gt;して&lt;code&gt;show&lt;/code&gt;を使っている箇所を&lt;code&gt;ushow&lt;/code&gt;に変えれば、お望みどおりの挙動になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; iimashita x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;今、&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; ushow x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;って言いました！？&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (iimashita &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;今、&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;って言いました！？&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わくわくもんですね！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;の例も、&lt;code&gt;uprint&lt;/code&gt;に変えれば🆗です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint &lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;私、堪忍袋の緒が切れました！&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ウルトラハッピーですね！！&lt;/p&gt;
&lt;p&gt;さらに、次のコマンドを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に入力すれば、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に直接入力した日本語文字列もそのまま表示されるようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;uprint&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;みんなで幸せゲットだよ！&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カンペキ✨&lt;/p&gt;
&lt;p&gt;えっ、常に&lt;code&gt;uprint&lt;/code&gt;したいからいちいち&lt;code&gt;:set -interactive-print=uprint&lt;/code&gt;するのが面倒くさい？&lt;br /&gt;
そんなあなたは👇を&lt;code&gt;~/.ghci&lt;/code&gt;に書くことけって～いでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;Text.Show.Unicode.uprint&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#unicode-showの最近の修正&#34; title=&#34;unicode-showの最近の修正&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;の最近の修正&lt;/h1&gt;
&lt;p&gt;そんな&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;ですが、残念ながら一昨年、作者である村主崇行さんが亡くなってしまいました&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
日本に住む&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;をサポートする日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループとしては、このパッケージをメンテナンスし続けることに大きな意義があると判断し、私はこのパッケージを&lt;a href=&#34;https://github.com/haskell-jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリーでメンテナンスすることにしました。&lt;br /&gt;
以下がそのリポジトリーです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/unicode-show&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/unicode-show&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;といっても、メンテナーの名前や&lt;code&gt;LICENSE&lt;/code&gt;ファイルを書き換えて最新版をアップロードして以降特に何もしていなかったのですが&lt;small&gt;（&lt;a href=&#34;https://github.com/nushio3/unicode-show/issues/2&#34;&gt;バグはあるけど直すのも難しそう&lt;/a&gt;だし、概ね使えるし）&lt;/small&gt;、なんと先日、&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;が来ました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/unicode-show/pull/4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Do not show values eagerly by Kaiepi · Pull Request #4 · haskell-jp/unicode-show&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この修正を適用する前の&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;は、文字列全体を評価してからエスケープシーケンスを元に戻す、という挙動だったため、長い文字列を与えた場合や無限の長さの文字列を与えた場合に、なかなか&lt;small&gt;（あるいは永遠に）&lt;/small&gt;結果が返ってこないという問題がありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint (&lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も表示されず、Ctrl + C を押すまで処理が返らない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正後はちゃんと遅延評価を利用することで、無限の長さの文字列でも少しずつ変換することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; uprint (&lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;[&lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;, &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ああああ！&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;ああInterrupted.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;-- Ctrl + Cを押すまで出力し続ける&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今日記事にした一番の理由はこの話をするためです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/Kaiepi&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Kaiepi&lt;/span&gt;&lt;/a&gt;さんありがとうございます！&lt;br /&gt;
先ほどリリースしました！🎉&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/unicode-show-0.1.0.4&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://hackage.haskell.org/package/unicode-show-0.1.0.4&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;番外編pretty-simpleも使おう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編pretty-simpleも使おう&#34; title=&#34;番外編pretty-simpleも使おう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;（番外編）&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;も使おう&lt;/h1&gt;
&lt;p&gt;時間がないので詳しくは省略しますが、実は&lt;a href=&#34;http://hackage.haskell.org/package/pretty-simple&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pretty-simple&lt;/span&gt;&lt;/a&gt;というパッケージを使えば、日本語をそのまま出力するのに加えて、プリティープリントできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Pretty.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pPrint [&lt;span class=&#34;st&#34;&gt;&amp;quot;きーらーめーくー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ほーしーの力でー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;あこがーれのー♪&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;わーたーし描くよー♪&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;きーらーめーくー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ほーしーの力でー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;あこがーれのー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;わーたーし描くよー♪&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例ではわかりづらいですが、ちゃんと色も着けてくれます！&lt;br /&gt;
それでは&lt;span class=&#34;ascii&#34;&gt;2020&lt;/span&gt;年も、&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking&lt;/span&gt;🎁&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;例年どおりですとプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;と同時投稿をしている予定でしたが、例年参加者が減っていたこともあり、今年はプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;はなくなってしまいました😞&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;村主崇行さんは「&lt;a href=&#34;https://shop.ohmsha.co.jp/shopdetail/000000001926/&#34;&gt;すごい&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;たのしく学ぼう！&lt;/a&gt;」の翻訳を担当されるなど、&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;以外にも日本の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に多大な功績をもたらした方でした。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/regex-applicative.html&#34; lang=&#34;ja&#34;&gt;regex-applicative: 内部DSLとしての正規表現（ブログ記事版）&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-in-vrchat.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;VRのためにHaskellを使った話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id><title type="text">Elixir による JSON Parser</title><updated>2019-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html&#34;&gt;久しぶりに thank_you_stars をビルドする&lt;/a&gt;」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．&lt;/p&gt;
&lt;h3 id=&#34;result-型&#34;&gt;Result 型&lt;/h3&gt;
&lt;p&gt;その前に便利モジュールを作っておく． いわゆる &lt;code&gt;Either&lt;/code&gt; 型だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Result e a = {:error, e} | {:ok, a} のような型を扱う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a}, {:error, e} をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; success(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; failure(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: success(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v))&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に f(a) を返す (f は a -&amp;gt; Result e b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:error, e} だった場合に {:error, f(e)} を返す (f は e -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error({&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, e}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: failure(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(e))&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error(r &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: r&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを作っておくと &lt;code&gt;{:ok, a} | {:error, e}&lt;/code&gt; なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．&lt;/p&gt;
&lt;h3 id=&#34;状態のデータ構造&#34;&gt;状態のデータ構造&lt;/h3&gt;
&lt;p&gt;シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; decode(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    init_stat(str)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_element() &lt;span class=&#34;co&#34;&gt;# これがパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# パースが成功した場合 {:ok} かつ残り文字列が空になる想定&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; result}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;      {_, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# rest が残り文字列で result がパース結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; init_stat(str), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; str, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; %{}}&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 &lt;code&gt;%{}&lt;/code&gt; を渡している．&lt;/p&gt;
&lt;h3 id=&#34;json.org&#34;&gt;JSON.org&lt;/h3&gt;
&lt;p&gt;JSON の(基本的な)構文定義は &lt;a href=&#34;https://json.org&#34;&gt;JSON.org&lt;/a&gt; に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;json&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;element&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  := ws value ws&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;value&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  := object&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   | array&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;   | string&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;   | number&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;   | &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;   | &amp;quot;false&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;   | &amp;quot;null&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;ws&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;  := ... // 空白除去&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをパターンマッチを駆使して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_element(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  trim_leading(stat) &lt;span class=&#34;co&#34;&gt;# rest の前方の空白を除去します&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_value()&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_string や match_array はあとで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_string(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_array(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_object(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_number(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;match_xxx&lt;/code&gt; 系の関数は全て前述した &lt;code&gt;Result e a&lt;/code&gt; 型を返すイメージ(&lt;code&gt;e&lt;/code&gt; も &lt;code&gt;a&lt;/code&gt; も前述した状態の連想配列だが)．&lt;/p&gt;
&lt;h3 id=&#34;オブジェクトのパース&#34;&gt;オブジェクトのパース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; で囲まれた連想配列のようなもの，例えば &lt;code&gt;{ &amp;quot;key&amp;quot; : true }&lt;/code&gt; がオブジェクトだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;object&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  := &amp;#39;{&amp;#39; ws &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;   | &amp;#39;{&amp;#39; members &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;members&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;  := member&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;   | member &amp;#39;,&amp;#39; members&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;member&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  := ws string ws &amp;#39;:&amp;#39; element&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;string&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  := ... // 文字列&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# parse_when_unmatch_by(stat, char, parser) は&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# char の文字列にマッチしなければ parser を実行し&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチした場合は parser を実行せずに stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_object(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  match_left_par(stat)                               &lt;span class=&#34;co&#34;&gt;# `{` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                   &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, %{})) &lt;span class=&#34;co&#34;&gt;# 状態の result を空オブジェクト %{} に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_members(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_par(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))           &lt;span class=&#34;co&#34;&gt;# `}` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;  match_member(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_members_tail は members の再帰処理をする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 先頭が `,` にマッチした時には再帰処理を行い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチしない場合は stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_member(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 空白を除去してから文字列にマッチさせてみる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; match_string(trim_leading(stat)) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, stat} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; key}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;      trim_leading(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_colon() &lt;span class=&#34;co&#34;&gt;# &amp;#39;:&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_element(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;#match_element は前のと同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(prev, key, v) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;update_stat(stat, key, value)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; で置き換える関数で，&lt;code&gt;modify_stat(stat, key, func)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;func&lt;/code&gt; で更新する関数だ．&lt;/p&gt;
&lt;p&gt;余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; は第一級のようだ． &lt;code&gt;&amp;amp;any_function(&amp;amp;1, &amp;amp;2)&lt;/code&gt; などとすることで &lt;code&gt;fn arg1 arg2 -&amp;gt; any_function(arg1, arg2) end&lt;/code&gt; の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，&lt;code&gt;modify_stat&lt;/code&gt; や &lt;code&gt;parse_when_unmatch_by&lt;/code&gt; では内部の方の関数を &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; で直接囲っている(&lt;a href=&#34;https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir&#34;&gt;参照&lt;/a&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;配列のパース&#34;&gt;配列のパース&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;array&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  := &amp;#39;[&amp;#39; ws &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;   | &amp;#39;[&amp;#39; elements &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;elements&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   | element &amp;#39;,&amp;#39; elements&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;{}&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; になっただけで，だいたいオブジェクトと同じだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_array(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;  match_left_square(stat)                           &lt;span class=&#34;co&#34;&gt;# &amp;#39;[&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                  &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, [])) &lt;span class=&#34;co&#34;&gt;# 状態の result を空配列 [] に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_elements(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_square(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;]&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  match_element(stat)&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# ここで状態(配列)の更新をしてる点だけが違う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; [v] &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文字列のパース&#34;&gt;文字列のパース&lt;/h3&gt;
&lt;p&gt;さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_string(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  match_double_quote(stat)                          &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 状態の result を空文字列 &amp;quot;&amp;quot; に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_double_quote(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# どう見ても成功じゃ無いがどーせ後々エラーになるので...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチしたら終わり&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# &amp;quot;\&amp;quot; はエスケープ文字として処理する必要があるのでまずはそれ以外&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;  parse_when_unmatch_by(stat, &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;, &lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_noescape_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_escape(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))     &lt;span class=&#34;co&#34;&gt;# 次にエスケープ文字の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 再帰する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数名の通り，&lt;code&gt;match_noescape_characters&lt;/code&gt; がエスケープ文字以外のパーサーで，&lt;code&gt;match_escape&lt;/code&gt; がエスケープ文字のパーサーだ． &lt;code&gt;match_noescape_characters&lt;/code&gt; ではまず &lt;code&gt;\&lt;/code&gt; や &lt;code&gt;&amp;quot;&lt;/code&gt; を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# エスケープされてない文字はダメっぽい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\u0000&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;\\\&lt;span class=&#34;st&#34;&gt;&amp;quot;\n\x00\t]*)(?&amp;lt;rest&amp;gt;.*)/s, stat[:rest])&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;  update_stat(%{result: prev &amp;lt;&amp;gt; body}, :rest, rest)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エスケープ文字は，もうパターンマッチで頑張る:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\/&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\b&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\f&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\f&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# \u1234 とかいうやつ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# /.{n,m}/ で n 個以上 m 個以下にマッチする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[\dA&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Fa&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;f]{&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;})(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s, rest) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;    %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 4桁の16進数をエスケープされた文字列として変換する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 変換できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; hex_to_string(body) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;        hex &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; hex}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-42&#34;&gt;&lt;a href=&#34;#cb11-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; hex_to_string(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-43&#34;&gt;&lt;a href=&#34;#cb11-43&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-44&#34;&gt;&lt;a href=&#34;#cb11-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# 文字列を16進数として int 型に変換&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-45&#34;&gt;&lt;a href=&#34;#cb11-45&#34;&gt;&lt;/a&gt;    {hex, _} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(str, &lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-46&#34;&gt;&lt;a href=&#34;#cb11-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;hex::utf8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# こういう記法で int を16進数でエスケープされた文字列に変換できる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-47&#34;&gt;&lt;a href=&#34;#cb11-47&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;rescue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-48&#34;&gt;&lt;a href=&#34;#cb11-48&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-49&#34;&gt;&lt;a href=&#34;#cb11-49&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-50&#34;&gt;&lt;a href=&#34;#cb11-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．&lt;/p&gt;
&lt;h3 id=&#34;数値のパース&#34;&gt;数値のパース&lt;/h3&gt;
&lt;p&gt;数値は，マイナス符号・整数・浮動小数点数・&lt;code&gt;e&lt;/code&gt;記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_number(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;  {value, rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; compile_number(stat[&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 文字列から数値を取得できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; value &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(stat, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, value)&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; compile_number(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，超便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;minus&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; minus, &lt;span class=&#34;st&#34;&gt;&amp;quot;digit&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; digit, &lt;span class=&#34;st&#34;&gt;&amp;quot;frac&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; frac, &lt;span class=&#34;st&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; exp, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;minus&lt;span class=&#34;op&#34;&gt;&amp;gt;-&lt;/span&gt;?)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;digit&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;frac&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;\&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;exp&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[eE]?[&lt;span class=&#34;op&#34;&gt;-+&lt;/span&gt;]?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s,&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;      str&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;  value &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; {digit, frac, exp} &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, _, _} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 整数部が無い場合はダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num&lt;span class=&#34;op&#34;&gt; !=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-31&#34;&gt;&lt;a href=&#34;#cb12-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 0 から始まる整数もダメ(小数はOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-32&#34;&gt;&lt;a href=&#34;#cb12-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-33&#34;&gt;&lt;a href=&#34;#cb12-33&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, _} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-34&#34;&gt;&lt;a href=&#34;#cb12-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 小数点だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-35&#34;&gt;&lt;a href=&#34;#cb12-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-36&#34;&gt;&lt;a href=&#34;#cb12-36&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-37&#34;&gt;&lt;a href=&#34;#cb12-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# e だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-38&#34;&gt;&lt;a href=&#34;#cb12-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-39&#34;&gt;&lt;a href=&#34;#cb12-39&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;E&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-40&#34;&gt;&lt;a href=&#34;#cb12-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# E だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-41&#34;&gt;&lt;a href=&#34;#cb12-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-42&#34;&gt;&lt;a href=&#34;#cb12-42&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは整数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-43&#34;&gt;&lt;a href=&#34;#cb12-43&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-44&#34;&gt;&lt;a href=&#34;#cb12-44&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-45&#34;&gt;&lt;a href=&#34;#cb12-45&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-46&#34;&gt;&lt;a href=&#34;#cb12-46&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-47&#34;&gt;&lt;a href=&#34;#cb12-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-48&#34;&gt;&lt;a href=&#34;#cb12-48&#34;&gt;&lt;/a&gt;      _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは浮動小数点数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-49&#34;&gt;&lt;a href=&#34;#cb12-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; frac &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; exp) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-50&#34;&gt;&lt;a href=&#34;#cb12-50&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-51&#34;&gt;&lt;a href=&#34;#cb12-51&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-52&#34;&gt;&lt;a href=&#34;#cb12-52&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-53&#34;&gt;&lt;a href=&#34;#cb12-53&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-54&#34;&gt;&lt;a href=&#34;#cb12-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-55&#34;&gt;&lt;a href=&#34;#cb12-55&#34;&gt;&lt;/a&gt;  {value, rest}&lt;/span&gt;
&lt;span id=&#34;cb12-56&#34;&gt;&lt;a href=&#34;#cb12-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでとりあえず完成．&lt;/p&gt;
&lt;h2 id=&#34;テストする&#34;&gt;テストする&lt;/h2&gt;
&lt;p&gt;JSON のテストスイートとして &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;nst/JSONTestSuite&lt;/a&gt; と言うのがあるので使わせてもらう． こんな感じに配置する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;\&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;|- lib // elixir のコード置き場&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;|- test&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;|  |- fixture&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;|  \- json_spec.exs&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;\- mix.exs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストには espec を使ってこんな感じに記述した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# json_spec.exs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; test_suite &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    [&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# エラーケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_1_true_without_comma.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_a_invalid_utf8.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 成功ケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_arraysWithSpaces.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [[]]}},&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_empty-string.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;]}},&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# JSONSuite を先に宣言しないと使えなかった&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSpec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ESpec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;JSON.decode&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Enum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;test_suite(), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; {path, result} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;      context path &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 変数を利用するには unquote する必要がある(マクロのせい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;        let(&lt;span class=&#34;va&#34;&gt;:json&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;read!(&lt;span class=&#34;st&#34;&gt;&amp;quot;test/fixture/test_parsing/&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(path)&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;        it(&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map_error(&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;decode(json()), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; to(eq(&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(&lt;span class=&#34;cn&#34;&gt;Macro&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;escape(result))))&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;unquote&lt;/code&gt; やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/12/21/212423</id><title type="text">OpenShift.run 2019 で Kubernetes のスケジューリングについて話してきました</title><updated>2019-12-21T21:24:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/12/21/212423"/><summary type="html">先日行われた OpenShift コミュニティのイベント OpenShift.run 2019 にて、Kubernetes Scheduler とその関連ツールについて講演してきました。公募 CFP 枠です。 OpenShift のイベントでありながら、OpenShift についてはまったく触れずひたすら Kubernetes の内部実装を解説する異色の登壇でした。実際、40 分枠の講演の中で（RedHat 社以外も含め）ベンダニュートラルな立場で登壇したのは自分だけだったようです。これは私見ですが、逆に言えばそういう内容でも CFP 採択されているというのは、運営側も「単なるマーケティングイ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html</id><title type="text">Elm で作る TaPL のラムダ計算（その３）</title><updated>2019-12-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://adventar.org/calendars/4212&#34;&gt;IGGG Advent Calendar 2019&lt;/a&gt;」の10日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その３）． &lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html&#34;&gt;その１&lt;/a&gt;と&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html&#34;&gt;その２&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，今まで同様に&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap10&#34;&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap10&amp;amp;exp=(\x%20:%20Bool%20.%20if%20x%20then%20x%20else%20(\f%20:%20Bool%20-%3E%20Bool%20-%3E%20Bool%20.%20f%20x%20x)%20(\x%20:%20Bool%20.%20\y%20:%20Bool%20.%20y))%20(if%20true%20then%20false%20else%20true)&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap10.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第10章-単純型の-ml-実装&#34;&gt;第10章 単純型の ML 実装&lt;/h2&gt;
&lt;p&gt;さて，いよいよみんな大好き「型」の登場だ． 10章は少し面白くて，4章で実装した算術式の真偽値に関する部分と7章の型なしラムダ計算を組み合わせて，更にそれに型をのせるプログラミング言語を実装する． つまり，今までの実装をちゃんとやっていれば割とサクッとできています．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;なお，同期各位は全然やらなかったせいか10章を5週ぐらいやっている笑．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;   | \x:T.t  [ラムダ抽象]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;v := \x:T.t&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;T := Bool    [真偽値型]&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;   | T -&amp;gt; T  [関数型]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ラムダ抽象には型注釈(&lt;code&gt;:T&lt;/code&gt; の部分)がある． なんで付けるのかとかは9章に書いてあるのでぜひ TaPL を買って読んでください(おい)． これを Elm の型として実装する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- Arrow の Arr ね&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型の型 &lt;code&gt;Ty&lt;/code&gt; 以外は，4章と7章の &lt;code&gt;Term&lt;/code&gt; や &lt;code&gt;isval&lt;/code&gt; を合体させているだけだ．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;// 7章の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt; (\x:T.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;// 4章の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;評価規則も同様に型注釈の構文が追加されただけでほとんど変わらない． 変わらないということはすなわち，実行時(評価)には型の有無は影響しないということだ． 構文規則同様，4章と7章の実装を組み合わせることで実装が終わる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- あらゆる TmAbs のパターンマッチに Ty のパラメーターを追加する必要はある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- t に s を代入する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型付け規則&#34;&gt;型付け規則&lt;/h3&gt;
&lt;p&gt;ここからが新しい． いわゆる型検査のことだ． TaPL では「正しく型付けされた項はおかしくならない」という性質(安全性・健全性ともいう)について議論されている(8章で)． 例えば，これから定義する型検査が通った項(&lt;code&gt;Term&lt;/code&gt;)は &lt;code&gt;eval&lt;/code&gt; 関数を適用しても無限ループなどにはならない． さて，そのための型付け規則は次のようになっている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;// 真偽値の型付け規則&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt; true : Bool&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt; false : Bool&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt; t1 : Bool    t2 : T    t3 : T&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;-------------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 : T&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;// 単純ラムダ計算の型付け規則&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt; x : T ∈ Γ&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;-----------&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt; Γ ⊢ x : T&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt; Γ, x : T1 ⊢ t2 : T2&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;-----------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt; Γ ⊢ \x : T1 . t2 : T1 -&amp;gt; T2&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt; Γ ⊢ t1 : T11 -&amp;gt; T12    Γ ⊢ t2 : T11&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;-------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt; Γ ⊢ t1 t2 : T12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで新しく出てくる &lt;code&gt;Γ&lt;/code&gt; は型環境と言い，変数と型の対応関係を線形リストのような感じに保持している． &lt;code&gt;Γ ⊢ t : T&lt;/code&gt; というのは「型環境 &lt;code&gt;Γ&lt;/code&gt; のもと項 &lt;code&gt;t&lt;/code&gt; は型 &lt;code&gt;T&lt;/code&gt; に型付け可能」という風に読める(たぶん)． まぁ実装してみればわかる(ほんとか？):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型環境には Context を再利用する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数の型を保持&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 t の型が最終的に導出できれば型付け可能ということになる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- Context から型情報を引っ張ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- Context に 変数と型の対応を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象は中の項 t2 が型付け可能である必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty11&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty12&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- 関数適用の場合は引数の型 ty11 と適用する項の型 ty2 が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty11&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty12&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-40&#34;&gt;&lt;a href=&#34;#cb6-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-41&#34;&gt;&lt;a href=&#34;#cb6-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-42&#34;&gt;&lt;a href=&#34;#cb6-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-43&#34;&gt;&lt;a href=&#34;#cb6-43&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty3&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-44&#34;&gt;&lt;a href=&#34;#cb6-44&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- if-then-else の場合は t2 と t3 の型が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-45&#34;&gt;&lt;a href=&#34;#cb6-45&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty3&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-46&#34;&gt;&lt;a href=&#34;#cb6-46&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-47&#34;&gt;&lt;a href=&#34;#cb6-47&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-48&#34;&gt;&lt;a href=&#34;#cb6-48&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-49&#34;&gt;&lt;a href=&#34;#cb6-49&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-50&#34;&gt;&lt;a href=&#34;#cb6-50&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-51&#34;&gt;&lt;a href=&#34;#cb6-51&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-52&#34;&gt;&lt;a href=&#34;#cb6-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-53&#34;&gt;&lt;a href=&#34;#cb6-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-54&#34;&gt;&lt;a href=&#34;#cb6-54&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-55&#34;&gt;&lt;a href=&#34;#cb6-55&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-56&#34;&gt;&lt;a href=&#34;#cb6-56&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-57&#34;&gt;&lt;a href=&#34;#cb6-57&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-58&#34;&gt;&lt;a href=&#34;#cb6-58&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-59&#34;&gt;&lt;a href=&#34;#cb6-59&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-60&#34;&gt;&lt;a href=&#34;#cb6-60&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-61&#34;&gt;&lt;a href=&#34;#cb6-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-62&#34;&gt;&lt;a href=&#34;#cb6-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-63&#34;&gt;&lt;a href=&#34;#cb6-63&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-64&#34;&gt;&lt;a href=&#34;#cb6-64&#34;&gt;&lt;/a&gt;        ( []&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-65&#34;&gt;&lt;a href=&#34;#cb6-65&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-66&#34;&gt;&lt;a href=&#34;#cb6-66&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-67&#34;&gt;&lt;a href=&#34;#cb6-67&#34;&gt;&lt;/a&gt;        ( ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-68&#34;&gt;&lt;a href=&#34;#cb6-68&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-69&#34;&gt;&lt;a href=&#34;#cb6-69&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-70&#34;&gt;&lt;a href=&#34;#cb6-70&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-71&#34;&gt;&lt;a href=&#34;#cb6-71&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;next&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-72&#34;&gt;&lt;a href=&#34;#cb6-72&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-73&#34;&gt;&lt;a href=&#34;#cb6-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-74&#34;&gt;&lt;a href=&#34;#cb6-74&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-75&#34;&gt;&lt;a href=&#34;#cb6-75&#34;&gt;&lt;/a&gt;    ( &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (\x : (Bool -&amp;gt; Bool) . (\f : (Bool -&amp;gt; Bool -&amp;gt; Bool) . f x)) (\x : Bool . x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (\x . x x) (\x . x x) はうまく型付けできない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))))&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文字列に変換&#34;&gt;文字列に変換&lt;/h3&gt;
&lt;p&gt;基本的に4・7章の定義を利用すれば良いのだが，型注釈ができるようになったので型も変換できるようにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 重複しない変数名を生成して Context に積む&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- あとは同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Context から重複する変数名を探し &amp;#39; を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x : (Bool -&amp;gt; Bool). (\\f : ((Bool -&amp;gt; Bool) -&amp;gt; Bool). (f x))) (\\x : Bool. x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;パーサー&#34;&gt;パーサー&lt;/h3&gt;
&lt;p&gt;これも同様に4・7章の実装を合わせるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 括弧のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ture/false のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- if-then-else のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;        ] &lt;span class=&#34;co&#34;&gt;-- 関数適用のパーサーだけ分けてるのは左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言わずもがな，型注釈のパースをする必要があるので，&lt;code&gt;absParser&lt;/code&gt; はその２のと若干異なる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;pair&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ここから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- ここまでが追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- これも左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数型 T-&amp;gt;T は右結合(T-&amp;gt;T-&amp;gt;T は T-&amp;gt;(T-&amp;gt;T) となる)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x : Bool . if x then x else (\\f : Bool -&amp;gt; Bool -&amp;gt; Bool . f x x) (\\x : Bool . \\y : Bool . y)) (if true then false else true)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;-- 型検査&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa&#34;&gt;おまけ: SPA&lt;/h2&gt;
&lt;p&gt;前回整理したので基本的に足していくだけだ． ただし，型検査を &lt;code&gt;Calculus&lt;/code&gt; に加える必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typecheck&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;chap10&lt;/code&gt; の定義も追加するだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap10&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;syntax&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typecheck&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれらを &lt;code&gt;Main&lt;/code&gt; でいい感じに呼び出すだけ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次回はいつになることやら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html</id><title type="text">久しぶりに thank_you_stars をビルドする</title><updated>2019-12-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elixir&#34;&gt;Elixir Advent Calendar 2019&lt;/a&gt;」の8日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;学生の頃アルバイトした時(2年前)に初めて Elixir を触って，その集大成として作った(嘘) OSS をヒッサビッサにビルドチャレンジしてみたという話です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSS: &lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars&#34;&gt;matsubara0507/thank-you-stars&lt;/a&gt; (elixir バージョン)&lt;/li&gt;
&lt;li&gt;当時書いたブログ記事: &lt;a href=&#34;https://matsubara0507.github.io/posts/2017-10-01-create-thank-you-stars-ver-elixir.html&#34;&gt;Elixir ライブラリにスターを送るツール thank-you-stars を作ってみました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思い出す&#34;&gt;思い出す&lt;/h2&gt;
&lt;p&gt;そもそもどういうプログラムだったかってのは覚えてる． 当時何故か流行ってた，自身のプロジェクトの依存ライブラリに GitHub Star を送る CLI ツールの Elixir 版だ．&lt;/p&gt;
&lt;p&gt;で，こいつはどの環境でビルドしていたのか:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elixir のバージョンは多分 1.4 (ref. &lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/blob/v0.1.0/mix.exs&#34;&gt;mix.ex&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Erlang/OTP のバージョン: 多分 19.x？ (手元にあったのがそれ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依存パッケージのバージョンを見比べてみてもめっちゃ古いのがわかる． 2年ってすごいんだなぁ．&lt;/p&gt;
&lt;h2 id=&#34;最新バージョンに対応する&#34;&gt;最新バージョンに対応する&lt;/h2&gt;
&lt;p&gt;まずはここから．&lt;/p&gt;
&lt;h3 id=&#34;最新-elixir-erlangotp-のインストール&#34;&gt;最新 Elixir &amp;amp; Erlang/OTP のインストール&lt;/h3&gt;
&lt;p&gt;Elixir は長いこと触ってないので，そもそも手元に最新の環境がない． 昔はどうやってたかな，と遠い記憶を辿って見たがおそらく &lt;code&gt;exenv&lt;/code&gt; と &lt;code&gt;erlenv&lt;/code&gt; を使っていたはず:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/exenv/exenv&#34;&gt;exenv/exenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talentdeficit/erlenv&#34;&gt;talentdeficit/erlenv&lt;/a&gt; (いつのまにかアーカイブになってるのね)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれ別の Elixir や Erlang/OTP を取ってくるには &lt;a href=&#34;https://github.com/mururu/elixir-build&#34;&gt;elixir-build&lt;/a&gt; や &lt;a href=&#34;https://github.com/matsubara0507/erlang-build&#34;&gt;erlang-build&lt;/a&gt; を使う． 試しに手元でやってみたら，どうやら v20.x 以降の Erlang/OTP をビルドするには OpenSSL 1.1 を使わないといけないのだが，手元の OS が古くてできない（このためだけに更新したくない）． そして，最新の Elixir を使うには Erlang/OTP の v20.x 以降が必要っぽい． 詰んだ（？）．&lt;/p&gt;
&lt;p&gt;もちろん，今ならもっと他の方法でいろんなバージョンの Elixir や Erlang/OTP をイストールする方法はあるだろう． しかし，できれば手元の環境を汚したくない． ということで Docker に甘えた（ぇ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm -v `pwd`:/work -it elixir:1.9.4 /bin/bash -c &amp;quot;cd /work &amp;amp;&amp;amp; mix test&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;依存パケッケージの更新&#34;&gt;依存パケッケージの更新&lt;/h3&gt;
&lt;p&gt;とりあえず，Hex で最新のバージョンを取ってきて &lt;code&gt;mix.exs&lt;/code&gt; を書き換えた． もちろん，すんなりビルドはできない． しかし，珍しくちゃんとテストを書いていたので，テストしつつ最新のバージョンに&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/commit/1574a16dec5ea5c7e8a4e39dbae4bf4729e8cfb6&#34;&gt;合わせていく&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CrowdHailer/OK/pull/57&#34;&gt;&lt;code&gt;OK.with&lt;/code&gt; は使えなくなっているので利用しない書き方に変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edgurgel/tentacat/pull/132&#34;&gt;&lt;code&gt;Tentacat.put&lt;/code&gt; の返り値のタプルサイズが変わっていた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/devinus/poison/commit/a4208a6252f4e58fbcc8d9fd2f4f64c99e974cc8&#34;&gt;&lt;code&gt;Poison.decode&lt;/code&gt; のエラーの返り値のタプルサイズが変わった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elixir-lang/elixir/pull/7838&#34;&gt;&lt;code&gt;[ &amp;quot;hoge&amp;quot;: 123 ]&lt;/code&gt; こういう形式のキーワードハッシュは警告が出るようになった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パターンマッチしてたタプルのサイズが変わるのはきつい．&lt;/p&gt;
&lt;h3 id=&#34;mix-format&#34;&gt;mix format&lt;/h3&gt;
&lt;p&gt;Elixir 1.6 からフォーマッターがエコシステムに入った． なので &lt;code&gt;mix format&lt;/code&gt; をかけてみる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix format&lt;/code&gt; をかけるには設定ファイル &lt;code&gt;.formatter.exs&lt;/code&gt; を置かないと動作しないようだ（珍しい）． なので，公式ドキュメントにあったものをそのまま&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/commit/700910b927ff1abbd5701a177c83e0671ddffe29&#34;&gt;コピペして &lt;code&gt;mix format&lt;/code&gt; をかけた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;github-actions&#34;&gt;GitHub Actions&lt;/h2&gt;
&lt;p&gt;最近流行りだからね．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/1&#34;&gt;Add GitHub Actions config by matsubara0507 · Pull Request #1 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elixir や Erlang/OTP のセットアップには &lt;a href=&#34;https://github.com/actions/setup-elixir&#34;&gt;&lt;code&gt;actions/setup-elixir&lt;/code&gt;&lt;/a&gt; を使う． 色々と試して，最終的なジョブの設定はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ほんとんど actions/elixir-setup の例のまんま&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;otp&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;21.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 22.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;      # 20.x は ubuntu 16,18 には無い様子&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elixir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;1.8.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 1.9.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fail-fast&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;         # マトリックスのどれかのジョブが落ちても他のジョブは実行をやめない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-elixir@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;otp-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{matrix.otp}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elixir-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mix deps.get&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mix test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mix.exs&lt;/code&gt; でどうやって複数の Elixir のバージョンを許容するんだ？と結構調べたけど，単純にボトムのバージョンを &lt;code&gt;elixir: ~&amp;gt; ...&lt;/code&gt; で指定すればいいだけだった（普通 &lt;code&gt;&amp;gt;=&lt;/code&gt; じゃ無いの．．．）．&lt;/p&gt;
&lt;p&gt;キャッシュの導入も考えたが，たかが数分に入れてもしょうがないなってなってやめた．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-依存パケージを減らす大作戦&#34;&gt;おまけ: 依存パケージを減らす大作戦&lt;/h2&gt;
&lt;p&gt;依存パッケージがなくなると &lt;code&gt;mix archive.install&lt;/code&gt; で入れることができるはず． なので，もともと依存パッケージを無くしてみたかった． 今回，バージョンアップを追うのも大変だったし，せっかくのなので可能な限り減らしてみた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/2&#34;&gt;Remove OK library by matsubara0507 · Pull Request #2 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/3&#34;&gt;Remove tentacat library by matsubara0507 · Pull Request #3 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/4&#34;&gt;Remove poison library by matsubara0507 · Pull Request #4 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3/4 減らせました． 残るは鬼門 &lt;code&gt;httpoison&lt;/code&gt; だけ． 果たしてできるのか．&lt;/p&gt;
&lt;h3 id=&#34;vs.-ok&#34;&gt;vs. &lt;code&gt;ok&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ok&lt;/code&gt; パッケージはいわゆる &lt;code&gt;Either&lt;/code&gt; モナドだ． &lt;code&gt;{:ok, hoge} | {:error, fuga}&lt;/code&gt; のような型を簡単に扱うためのマクロを提供している．&lt;/p&gt;
&lt;p&gt;これらの型の場合，Elixir の特徴であるパイプ演算子をうまく連結できない． なので，Elm 流に &lt;code&gt;and_then&lt;/code&gt; 関数を用意して，それで賄うようにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# Result a -&amp;gt; (a -&amp;gt; Result b) -&amp;gt; Result b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# ただし Result a = {:ok, a} | {:error, e}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; and_then({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; and_then(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 使用例&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; star_package(package_name, client) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;    fetch_package_github_url(package_name)&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;star_github_package(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, client)) &lt;span class=&#34;co&#34;&gt;# ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, url} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Starred! &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;url&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, url} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Error    &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;url&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vs.-tentacat&#34;&gt;vs. &lt;code&gt;tentacat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;単純に HTTP リクエストの PUT を認証付きでしているだけなので，&lt;code&gt;httpoison&lt;/code&gt; に書き直した． まぁ面倒を後に丸投げてるだけだが笑&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; star_github_package(url, token) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(url)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;get(&lt;span class=&#34;va&#34;&gt;:path&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;put_github_api(&lt;span class=&#34;st&#34;&gt;&amp;quot;user/starred&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, token))&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;()&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;map_get_with_ok(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:status_code&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;204&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, url} &lt;span class=&#34;co&#34;&gt;# もちろん返り値も変わる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;      _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, url}&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; put_github_api(path, token) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;    headers &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [{&lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;token &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;token&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;}]&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;HTTPoison&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;st&#34;&gt;&amp;quot;https://api.github.com/&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;path&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, headers)&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vs.-poison&#34;&gt;vs. &lt;code&gt;poison&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;poison&lt;/code&gt; は JSON デコーダー・エンコーダーだ． GitHub トークンを設定(JSON)から取得したり，Hex から取得したライブラリの設定(JSON)をパースするのに使う．&lt;/p&gt;
&lt;p&gt;これを無くすにはどうするか．簡単ですね． &lt;strong&gt;JSON パーサーを自作すればいいのです&lt;/strong&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# String をもらって JSON として Map や Bool，List などを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; decode(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;trim(str), &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; %{}})&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; result}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;      {_, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    trim_leading(stat)&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_value_body()&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 無駄にパターンマッチとパイプを使ってみることにした(Elixir っぽい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value_body(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(stat, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON パーサーは比較的簡単だ(細かいところに目をつぶれば)． なんせ構文の定義が &lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;json.org&lt;/a&gt; というサイトに書いてあるから． また，テストスイートも &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;nst/JSONTestSuite&lt;/a&gt; というところに置いてある．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;今回はガッっと一晩で雑に作ったので浮動小数点の &lt;code&gt;e&lt;/code&gt; 記法やユニコードのエスケープ記法 &lt;code&gt;\u&lt;/code&gt; なんかの実装は無視した（まぁ多分すぐできるけど）． また，Elixir ということで積極的にパターンマッチングとパイプを利用して実装している． 興味がある人は PR を見てください（汚いのでリファクタリングしたい）．&lt;/p&gt;
&lt;p&gt;もう少し細かい紹介は気が向いたらするやもしれない．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;httpoison&lt;/code&gt; も無くしたいなぁ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html</id><title type="text">Elm で作る TaPL のラムダ計算（その２）</title><updated>2019-12-07T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/lang_dev&#34;&gt;言語実装 Advent Calendar 2019&lt;/a&gt;」の7日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その２）． &lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html&#34;&gt;その１&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，前回同様に&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap7&#34;&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap7&amp;amp;exp=(\x%20.%20x%20x)%20(\x%20.%20x%20x)&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap7.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第7章-ラムタ計算の-ml-実装&#34;&gt;第7章 ラムダ計算の ML 実装&lt;/h2&gt;
&lt;p&gt;さぁいよいよみんな大好き(型なし)ラムダ計算です． ちなみに，ラムダ計算の数理論理学的な議論は5章でしている．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;p&gt;構文規則はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;   | \x . t  [ラムダ抽象]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;v := \x . t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと前回の算術式より構文規則がシンプル． ラムダ計算というのは「関数」しかないプログラミング言語で，ラムダ抽象というのが最近の多くの言語で導入されている無名関数や関数オブジェクトと言われるものだ（たぶん）．&lt;/p&gt;
&lt;p&gt;まずはこれを Elm 上の型として定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値はラムダ抽象だけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名を保持している（表示用）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Binding の意味は現状まだない（次回以降ちゃんと使う）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;　&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;　&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TmVar&lt;/code&gt; が少しキモ． 2つの &lt;code&gt;Int&lt;/code&gt; は変数が関数全体の中でどの位置にいるかを表している:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1つ目の Int は&lt;a href=&#34;https://en.wikipedia.org/wiki/De_Bruijn_index&#34;&gt;ドブラウン・インデックス&lt;/a&gt; (束縛されたラムダ抽象までの距離)&lt;/li&gt;
&lt;li&gt;2つ目の Int は一番外のラムダ抽象までの距離(深さ)&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;(\x. \f. f x) (\x. x)&lt;/code&gt; の場合は &lt;code&gt;TmApp (TmAbs &amp;quot;x&amp;quot; (TmAbs &amp;quot;f&amp;quot; (TmApp (TmVar 0 2) (TmVar 1 2)))) (TmAbs &amp;quot;x&amp;quot; (TmVar 0 1))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，&lt;code&gt;TmAbs String Term&lt;/code&gt; の文字列型は変数名で基本的に表示用．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;p&gt;評価規則も同様にシンプル:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;(\x.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3つ目のが関数適用で，&lt;code&gt;[x|-&amp;gt; v2]t12&lt;/code&gt; 記法は &lt;code&gt;t12&lt;/code&gt; 内の変数 &lt;code&gt;x&lt;/code&gt; を全て &lt;code&gt;v2&lt;/code&gt; に置き換えるという意味である． ここで，&lt;code&gt;v2&lt;/code&gt; が値というのがキモだ． すなわち正格評価される．&lt;/p&gt;
&lt;p&gt;これをパターンマッチを使って実装すると次の通り:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 止まらない可能性があるから注意&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;termSubstTop&lt;/code&gt; という新しい関数が出てきた． 変数を置き換える(代入する)上で重要なのは同じ変数名の変数が出てきたときに，それらを区別して〜〜ってのがあり，それをいい感じにやるための工夫が &lt;code&gt;TmVar&lt;/code&gt; の2つの &lt;code&gt;Int&lt;/code&gt; だ． この実装上の工夫は第6章で説明されているので，買って読んでください(おい)．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;で，&lt;code&gt;termSubstTop&lt;/code&gt; の実装はこんな感じ(本書にも全部書いてある):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- v2 と t12 を渡して [x|-&amp;gt;v2]t12 が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- termSubst 0 なので一番外の変数を置き換える&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 置き換えた後 -1 シフトしないといけない(一番外のラムダ抽象が剥がれるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 先に 1 だけシフトしてるのは代入後の s は -1 シフトして欲しくないから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 tt 中の j 番の変数へ項 s を代入 [j|-&amp;gt;s]t する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;co&#34;&gt;-- 潜ったぶんだけドブラウン・インデックスをシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 tt の自由変数のドブラウン・インデックスを d だけシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-35&#34;&gt;&lt;a href=&#34;#cb5-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-36&#34;&gt;&lt;a href=&#34;#cb5-36&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-37&#34;&gt;&lt;a href=&#34;#cb5-37&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- c はラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-38&#34;&gt;&lt;a href=&#34;#cb5-38&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- x は変数が束縛されたのラムダ抽象までの距離&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-39&#34;&gt;&lt;a href=&#34;#cb5-39&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- したがって x &amp;gt;= c は自由変数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-40&#34;&gt;&lt;a href=&#34;#cb5-40&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-41&#34;&gt;&lt;a href=&#34;#cb5-41&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-42&#34;&gt;&lt;a href=&#34;#cb5-42&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-43&#34;&gt;&lt;a href=&#34;#cb5-43&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-44&#34;&gt;&lt;a href=&#34;#cb5-44&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-45&#34;&gt;&lt;a href=&#34;#cb5-45&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-46&#34;&gt;&lt;a href=&#34;#cb5-46&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-47&#34;&gt;&lt;a href=&#34;#cb5-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-48&#34;&gt;&lt;a href=&#34;#cb5-48&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-49&#34;&gt;&lt;a href=&#34;#cb5-49&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-50&#34;&gt;&lt;a href=&#34;#cb5-50&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-51&#34;&gt;&lt;a href=&#34;#cb5-51&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確かめてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Say&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;More&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;https&lt;/span&gt;:&lt;span class=&#34;op&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;))))&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(\x . (\f . f x)) (\x . x)&lt;/code&gt; を評価して &lt;code&gt;\f . f (\x . x)&lt;/code&gt; という結果を得た．&lt;/p&gt;
&lt;h3 id=&#34;文字列へ変換&#34;&gt;文字列へ変換&lt;/h3&gt;
&lt;p&gt;変数がインデックス表記になっているため読みにくい． なので文字列への変換関数とパーサーを記述しよう．&lt;/p&gt;
&lt;p&gt;まずは文字列の変換から． こっちは TaPL にも(ほとんど)書いてある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これは TaPL にはない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- インデックスが間違っている場合は Nothing になる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;　&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前回と異なり，今回は文字列に変換できない場合がある． インデックスが間違っている場合だ． その場合は &lt;code&gt;Notihng&lt;/code&gt; が返るようにしている(TaPL の場合は例外)． &lt;code&gt;printtm&lt;/code&gt; は &lt;code&gt;Term&lt;/code&gt; 型に対するパターンマッチで記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- 被らない変数名を生成&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ctx には変数がどんどん保存される&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- そのため ctx の長さと n の長さが等しくないといけない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- ctx から変数名をドブラウン・インデックスで引いてくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pickfreshname&lt;/code&gt; や &lt;code&gt;ctxlength&lt;/code&gt; や &lt;code&gt;index2name&lt;/code&gt; の実装は本書にはない． 振る舞いの説明が書いてあるので，それを読んで実装する必要がある． なので，僕は次のように実装したがもう少しエレガントな実装があるかもしれない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名が重複しないように後ろに &amp;#39; を足して Context の先頭に追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;first&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;startsWith&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;maximum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;    ( ( &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ドブラウン・インデックスは束縛されたラムダ抽象への距離&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Context はラムダ抽象のたびに先頭に対応する変数を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので，そのままリストへのインデックスアクセスで良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getAt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;str&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x. (\\f. (f x))) (\\x. x)&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;\\f. (f (\\x. x))&amp;quot;&lt;/span&gt;) : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いい感じ．&lt;/p&gt;
&lt;h3 id=&#34;パーサー&#34;&gt;パーサー&lt;/h3&gt;
&lt;p&gt;前回同様 &lt;a href=&#34;https://package.elm-lang.org/packages/elm/parser&#34;&gt;elm/parser&lt;/a&gt; を使う． ドブラウン・インデックスなどを構築していく必要があるので，それらを保持した &lt;code&gt;Context&lt;/code&gt; という型を用意する(紛らわしいが，モジュールが違い外に出さない型なので大丈夫):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数名とドブラウンインデックスの対応&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まずは関数適用を無視してパーサーを定義する(難しいので):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- oneOf は最初にマッチしたパース結果を採用する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- カッコのパーサー(割愛)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象(`\x. t`)のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名のパーサー (小文字始まりで [A-z0-9_&amp;#39;] だけ許容する)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isLower&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isAlphaNum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;reserved&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromList&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-31&#34;&gt;&lt;a href=&#34;#cb12-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象が深くなるのでコンテキストを更新して再度 Term をパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-32&#34;&gt;&lt;a href=&#34;#cb12-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-33&#34;&gt;&lt;a href=&#34;#cb12-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-34&#34;&gt;&lt;a href=&#34;#cb12-34&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-35&#34;&gt;&lt;a href=&#34;#cb12-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-36&#34;&gt;&lt;a href=&#34;#cb12-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-37&#34;&gt;&lt;a href=&#34;#cb12-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象が1つ深くなる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-38&#34;&gt;&lt;a href=&#34;#cb12-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので深さと全てのドブラウン・インデックスを +1 する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-39&#34;&gt;&lt;a href=&#34;#cb12-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-40&#34;&gt;&lt;a href=&#34;#cb12-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-41&#34;&gt;&lt;a href=&#34;#cb12-41&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb12-42&#34;&gt;&lt;a href=&#34;#cb12-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-43&#34;&gt;&lt;a href=&#34;#cb12-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 新しい変数名を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-44&#34;&gt;&lt;a href=&#34;#cb12-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 同じ変数名は上書きしてしまって良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-45&#34;&gt;&lt;a href=&#34;#cb12-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-46&#34;&gt;&lt;a href=&#34;#cb12-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-47&#34;&gt;&lt;a href=&#34;#cb12-47&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb12-48&#34;&gt;&lt;a href=&#34;#cb12-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-49&#34;&gt;&lt;a href=&#34;#cb12-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-50&#34;&gt;&lt;a href=&#34;#cb12-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-51&#34;&gt;&lt;a href=&#34;#cb12-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-52&#34;&gt;&lt;a href=&#34;#cb12-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-53&#34;&gt;&lt;a href=&#34;#cb12-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-54&#34;&gt;&lt;a href=&#34;#cb12-54&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-55&#34;&gt;&lt;a href=&#34;#cb12-55&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-56&#34;&gt;&lt;a href=&#34;#cb12-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- コンテキストには変数名とドブラウン・インデックスの連想配列がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-57&#34;&gt;&lt;a href=&#34;#cb12-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので，変数名で引っ張ってくるだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-58&#34;&gt;&lt;a href=&#34;#cb12-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-59&#34;&gt;&lt;a href=&#34;#cb12-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-60&#34;&gt;&lt;a href=&#34;#cb12-60&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-61&#34;&gt;&lt;a href=&#34;#cb12-61&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-62&#34;&gt;&lt;a href=&#34;#cb12-62&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problem&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;undefined variable: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. (\\y . x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. (\\y . z)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; [{ &lt;span class=&#34;fu&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;problem&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Problem&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;undefined variable: z&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; }]&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自由変数が出てくるとちゃんとエラーになる．&lt;/p&gt;
&lt;p&gt;残るは関数適用だ． 実はこいつが難しい． というのも，雑に実装をするといわゆる左再帰が出てくるからだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20110127/1296098875&#34;&gt;chainl と左再帰 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，一工夫する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 関数適用は t1 t2 なのでまずは t1 にマッチさせ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;        ]  &lt;span class=&#34;co&#34;&gt;-- 後から t2 を探す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数適用 t1 t2 のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- backtrackable や commit は一旦無視して良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- termWithoutAppParser が先に出てくるのは関数適用が左結合のため&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- 例: t1 t2 t3 は (t1 t2) t3 つまり (TmApp (TmApp t1 t2) t3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;backtrackable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- t2 がなければ t1 のまんま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数適用を抜いた termParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;backtrackable&lt;/code&gt; と &lt;code&gt;commit&lt;/code&gt; はパーサーが文字列を消費してしまう問題の解決方法だ． パーサーの処理が進むと対象の文字列をどんどん消費していく． &lt;code&gt;oneOf&lt;/code&gt; で複数のパーサーを許容するとき，1文字目の結果で分岐できることが保証されているなら問題ないが，途中まで進み文字列を消費して失敗すると，その文字列を消費した状態で &lt;code&gt;oneOf&lt;/code&gt; 内の次のパーサーへ進んでしまう． そこで，elm/parser の場合は消費を戻して欲しい場合はし &lt;code&gt;backtrackable&lt;/code&gt; を使い，もう戻らなくて良くなった時点で &lt;code&gt;commit&lt;/code&gt; を使う，という感じ（たぶん）． まぁ今回は必要ではない気がするが，後々必要になってくる．&lt;/p&gt;
&lt;h1 id=&#34;section-2&#34;&gt;&lt;/h1&gt;
&lt;p&gt;さぁ REPL で確認してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x . \\f . f x) (\\x . x) (\\x . (\\x . x))&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;) : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa-にする&#34;&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;今回も同様に SPA にする． 章ごとにページ分けても良かったが，試しに一つにまとめてみた． つまり，4章の言語と7章の言語を同じように扱う． どちらも:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列をパースする(&lt;code&gt;parse&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を1ステップ評価する(&lt;code&gt;eval1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を文字列に変換する(&lt;code&gt;display&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をしたい． こういった場合，多くの言語ではインターフェースや型クラスのようなアドホック多相を利用する． しかし，Elm にはアドホック多相はない． そのため，パラメトリック多相で模倣する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 各章の言語の Context と Term 型を受け取る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- Context の初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- Term の履歴(表示用)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Calculus&lt;/code&gt; には章ごとに型が異なるものを全部突っ込む必要がある． そのため &lt;code&gt;logs&lt;/code&gt; のようなフィールドもある(前回 &lt;code&gt;Model&lt;/code&gt; 型の &lt;code&gt;exps&lt;/code&gt; にあったやつ)． この型の値を各章ごとに定義しよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-6&#34;&gt;&lt;a href=&#34;#cb17-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-7&#34;&gt;&lt;a href=&#34;#cb17-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-8&#34;&gt;&lt;a href=&#34;#cb17-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-9&#34;&gt;&lt;a href=&#34;#cb17-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-10&#34;&gt;&lt;a href=&#34;#cb17-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-11&#34;&gt;&lt;a href=&#34;#cb17-11&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-12&#34;&gt;&lt;a href=&#34;#cb17-12&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-13&#34;&gt;&lt;a href=&#34;#cb17-13&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-14&#34;&gt;&lt;a href=&#34;#cb17-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-15&#34;&gt;&lt;a href=&#34;#cb17-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-16&#34;&gt;&lt;a href=&#34;#cb17-16&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb17-17&#34;&gt;&lt;a href=&#34;#cb17-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-18&#34;&gt;&lt;a href=&#34;#cb17-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-19&#34;&gt;&lt;a href=&#34;#cb17-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-20&#34;&gt;&lt;a href=&#34;#cb17-20&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-21&#34;&gt;&lt;a href=&#34;#cb17-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-22&#34;&gt;&lt;a href=&#34;#cb17-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-23&#34;&gt;&lt;a href=&#34;#cb17-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-24&#34;&gt;&lt;a href=&#34;#cb17-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-25&#34;&gt;&lt;a href=&#34;#cb17-25&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb17-26&#34;&gt;&lt;a href=&#34;#cb17-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-27&#34;&gt;&lt;a href=&#34;#cb17-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-28&#34;&gt;&lt;a href=&#34;#cb17-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-29&#34;&gt;&lt;a href=&#34;#cb17-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;Chapter&lt;/code&gt; 型を &lt;code&gt;main&lt;/code&gt; の &lt;code&gt;Model&lt;/code&gt; に持たせて，それぞれの関数を &lt;code&gt;Chapter&lt;/code&gt; のものへと置き換えるだけ． これが良い方法かどうか，正直なんとも言えないが面白いモノができたの個人的には満足．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ところで，型なしラムダ計算は停止しない場合がある(例えば &lt;code&gt;(\x . x x) (\x . x x)&lt;/code&gt; とか)． このような式を SPA に突っ込むと無限に eval ボタンを押せてしまう． そこで，同期からは「eval ボタンが下にずれていくから無限プチプチみたいなのができない」と言われた笑． 検討した結果，ボタン固定にすると式の結果を追うのに上下スクロールを何回もしないとなので却下した(ごめんね)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">postgresql-pure を開発しました</title><updated>2019-12-06T00:03:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">この記事は Haskell Advent Calendar 2019 の6日目の記事です。 hackage.haskell.org postgresql-pure は Haskell の PostgreSQL ドライバー（クライアントライブラリー）で次のような目標で開発しました。 マルチコア環境でのパフォーマンス向上 暗黙のロックを回避する マルチプラットフォーム対応 C ライブラリーの libpq への依存をなくして特に Windows でのビルドを容易にする 既存ライブラリーとしては postgres-wire が高速だがそれは Windows をサポートしていない pure Haskel…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html</id><title type="text">Elm で作る TaPL のラムダ計算（その１）</title><updated>2019-12-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elm&#34;&gt;Elm Advent Calendar 2019&lt;/a&gt;」の6日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その１）．&lt;/p&gt;
&lt;h2 id=&#34;tapl-とプログラミング言語の実装&#34;&gt;TaPL とプログラミング言語の実装&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;https://www.cis.upenn.edu/~bcpierce/tapl/&#34;&gt;Type and Programming Language&lt;/a&gt;」(翻訳本は「型システム入門 -プログラミング言語と型の理論-」というもの，以下 TaPL)という書籍を知ってますか？ この書籍はプログラミング言語の型システムの理論体系に関するとても有名な書籍だ（学術的なその分野における入門書）． TaPL の多くは数理論理学的な議論や証明で構成されているのだが，いくつかの章では簡易的なプログラミング言語の実装がある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;自然数と真偽値と if-then-else&lt;/li&gt;
&lt;li&gt;変数などもない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算のML実装
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けのML実装&lt;/li&gt;
&lt;li&gt;第25章 System F のML実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本記事では4章の実装を行う．&lt;/p&gt;
&lt;h3 id=&#34;何で実装するか&#34;&gt;何で実装するか&lt;/h3&gt;
&lt;p&gt;TaPL では実装にあたり，以下のようなプログラミング言語で行うことをオススメしている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動メモリ管理 (GC)&lt;/li&gt;
&lt;li&gt;代数的データ型 (を容易に記述できる)&lt;/li&gt;
&lt;li&gt;パターンマッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ML系や Haskell，Scala であれば上記の条件にマッチするだろう． タイトルの通り私は Elm でやってみることにした(きっと事例が少ない)．&lt;/p&gt;
&lt;p&gt;なお実装は全て下記のリポジトリにあげている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm は Web フロントに特化した DSL だ． ということで，最終的にはパーサーも実装し，&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap4&#34;&gt;Web ブラウザから遊べるようにした&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap4&amp;amp;exp=if%20if%20true%20then%20false%20else%20true%20then%200%20else%20if%20false%20then%202%20else%203&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap4.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第4章-算術式のml実装&#34;&gt;第4章 算術式のML実装&lt;/h2&gt;
&lt;p&gt;4章で実装する言語の数理論理学的な議論は3章でやり，4章ではそれを ML で実装している． 以降の章では結構実装が省かれてたりするのだが，4章のは全部書いてあるので ML をお手元の言語に翻訳していくだけど簡単な作業です．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;p&gt;プログラミング言語の基本的な構成要素は「構文」と「評価」だ(たぶん)． まずは構文から:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;// 値&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;v := true&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;   | nv&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;// 自然数&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;nv := 0 | succ nv&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;// 項&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;t := v&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;   | succ t&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;   | pred t&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;   | iszero t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自然数と真偽値だけの極めてシンプルなものだ． 項は型で表現し，値や自然数かどうかの判定はそう言う関数を用意する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 構文&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 数値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-35&#34;&gt;&lt;a href=&#34;#cb2-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL では項に &lt;code&gt;Info&lt;/code&gt; と言う型を持たせて，もともと何行何列目だったかのような情報を持たせているが，今回はそこまでリッチにする予定はないし煩わしいので省いた．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;p&gt;構文が定義できたので，次は評価規則を定義し実装する． 評価規則とは，プログラムコード(項)の実行の仕方そのもので，今回は次のように定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;// if-then-else の評価規則(3つ)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;// 自然数の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt; succ t1 =&amp;gt; succ t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt; pred 0 =&amp;gt; 0&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt; pred (succ nv1) =&amp;gt; nv1&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt; pred t1 =&amp;gt; pred t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt; iszero 0 =&amp;gt; true&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-26&#34;&gt;&lt;a href=&#34;#cb3-26&#34;&gt;&lt;/a&gt; iszero (succ nv1) =&amp;gt; false&lt;/span&gt;
&lt;span id=&#34;cb3-27&#34;&gt;&lt;a href=&#34;#cb3-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-28&#34;&gt;&lt;a href=&#34;#cb3-28&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-29&#34;&gt;&lt;a href=&#34;#cb3-29&#34;&gt;&lt;/a&gt;-------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-30&#34;&gt;&lt;a href=&#34;#cb3-30&#34;&gt;&lt;/a&gt; iszero t1 =&amp;gt; iszero t1&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分数のような記述は上が成り立つならば下も成り立つと言うニュアンス(雑)． 次の &lt;code&gt;eval1&lt;/code&gt; というのが評価規則を実装したものだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値になるまで評価する (これは TaPL にはない)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 評価規則を関数にする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-44&#34;&gt;&lt;a href=&#34;#cb4-44&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-45&#34;&gt;&lt;a href=&#34;#cb4-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-46&#34;&gt;&lt;a href=&#34;#cb4-46&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-47&#34;&gt;&lt;a href=&#34;#cb4-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-48&#34;&gt;&lt;a href=&#34;#cb4-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-49&#34;&gt;&lt;a href=&#34;#cb4-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-50&#34;&gt;&lt;a href=&#34;#cb4-50&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL と違い，僕は返り値にいわゆる Optional 型を利用している(TaPL では例外を投げてる)． あと，TaPL で利用している ML やパターンマッチのある多くの言語ではパターンマッチの中に条件式を記述できるが Elm にはない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- こういうのが書きたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが出来ないため分岐が多くなって冗長になってしまう．辛い． そのうち実装されると良いなぁ．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;実はこれで完成． Elm には REPL があるので試しに動かしてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Say&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;More&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;https&lt;/span&gt;:&lt;span class=&#34;op&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))) &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう．&lt;/p&gt;
&lt;h3 id=&#34;パーサーを実装する&#34;&gt;パーサーを実装する&lt;/h3&gt;
&lt;p&gt;ここからは TaPL にはない話． 毎回 &lt;code&gt;Term&lt;/code&gt; を手書きするのは大変なのでパーサーを実装しちゃおう．&lt;/p&gt;
&lt;p&gt;Elm には &lt;a href=&#34;https://package.elm-lang.org/packages/elm/parser&#34;&gt;elm/parser&lt;/a&gt; という(なぜか)公式が提供しているパーサーコンビネーターライブラリがある． もちろんこれを使う． パーサーコンビネーターの極意はトップダウンに考えること(ほんまか？)． まずは頭のインターフェースから:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser Term&lt;/code&gt; という型は「パースした結果が &lt;code&gt;Term&lt;/code&gt; 型になる」と言う意味(型なんてこう言うふわっとした理解で十分)． &lt;code&gt;parser&lt;/code&gt; の &lt;code&gt;|. Parser.end&lt;/code&gt; というのは，パースしきった文字列が空文字に達したという関数(達してないとエラーになる)．&lt;/p&gt;
&lt;p&gt;で，&lt;code&gt;termParser&lt;/code&gt; が項自体のパーサー． elm/parser には &lt;code&gt;oneOf&lt;/code&gt; という便利パーサーコンビネーターがあるのでこれを使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 与えたパーサーのリストで最初に成功したものをパース結果にする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで重要なのは一つ一つ実装することができる点だ． まずは簡単な値から:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;      [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;kw&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;kw&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))))))))))&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう． 次は if-then-else を書いてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;      [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm は普通に正格評価なので &lt;code&gt;Parser.lazy&lt;/code&gt; などで遅延させてあげないと先に &lt;code&gt;termParser&lt;/code&gt; を実行してしまう． REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if true then 1 else 0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どう見ても評価できないけどパースはできる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if 1 then true else false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 入れ子もOK&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if if true then 0 else 1 then true else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)) &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)) (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)))))&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい． あとは同じようーに書くだけなので割愛:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;succParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;predParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isZeroParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt;    &lt;span class=&#34;co&#34;&gt;-- カッコ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに &lt;code&gt;Term&lt;/code&gt; から文字列に変換する関数も書いておこう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- かっこ悪いので最後のカッコを消す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;   &lt;span class=&#34;co&#34;&gt;-- カッコだけに&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 分岐するのが面倒なので toInt も同時に&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(if &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; then &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; else &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- あとは割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-37&#34;&gt;&lt;a href=&#34;#cb14-37&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-38&#34;&gt;&lt;a href=&#34;#cb14-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-39&#34;&gt;&lt;a href=&#34;#cb14-39&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-40&#34;&gt;&lt;a href=&#34;#cb14-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-41&#34;&gt;&lt;a href=&#34;#cb14-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-42&#34;&gt;&lt;a href=&#34;#cb14-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-43&#34;&gt;&lt;a href=&#34;#cb14-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-44&#34;&gt;&lt;a href=&#34;#cb14-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-45&#34;&gt;&lt;a href=&#34;#cb14-45&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if if true then false else true then 0 else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧！&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa-にする&#34;&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;せっかく Elm 使ってるので:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列を入力してもらって&lt;/li&gt;
&lt;li&gt;「パースボタン」を押したらパースして&lt;/li&gt;
&lt;li&gt;さらに「評価ボタン」を押したら１ステップだけ評価する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という簡単なものを作る． まぁこれぐらいならググれば出てくるサンプルコードを組み合わせるだけでできますね:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- 入力文字列を保存&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- 1ステップごとの評価結果を全部&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 文字列の入力&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-19&#34;&gt;&lt;a href=&#34;#cb16-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- パースボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-20&#34;&gt;&lt;a href=&#34;#cb16-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-21&#34;&gt;&lt;a href=&#34;#cb16-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 評価ボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-22&#34;&gt;&lt;a href=&#34;#cb16-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-23&#34;&gt;&lt;a href=&#34;#cb16-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-24&#34;&gt;&lt;a href=&#34;#cb16-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-25&#34;&gt;&lt;a href=&#34;#cb16-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-26&#34;&gt;&lt;a href=&#34;#cb16-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-27&#34;&gt;&lt;a href=&#34;#cb16-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;txt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-28&#34;&gt;&lt;a href=&#34;#cb16-28&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;txt&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-29&#34;&gt;&lt;a href=&#34;#cb16-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-30&#34;&gt;&lt;a href=&#34;#cb16-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-31&#34;&gt;&lt;a href=&#34;#cb16-31&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; ]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-32&#34;&gt;&lt;a href=&#34;#cb16-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-33&#34;&gt;&lt;a href=&#34;#cb16-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-34&#34;&gt;&lt;a href=&#34;#cb16-34&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Can not parse&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-35&#34;&gt;&lt;a href=&#34;#cb16-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-36&#34;&gt;&lt;a href=&#34;#cb16-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-37&#34;&gt;&lt;a href=&#34;#cb16-37&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-38&#34;&gt;&lt;a href=&#34;#cb16-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-39&#34;&gt;&lt;a href=&#34;#cb16-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-40&#34;&gt;&lt;a href=&#34;#cb16-40&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Can not eval&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-41&#34;&gt;&lt;a href=&#34;#cb16-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-42&#34;&gt;&lt;a href=&#34;#cb16-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- いくつかの見た目の実装は割愛してます(class とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-43&#34;&gt;&lt;a href=&#34;#cb16-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-44&#34;&gt;&lt;a href=&#34;#cb16-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-45&#34;&gt;&lt;a href=&#34;#cb16-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb16-46&#34;&gt;&lt;a href=&#34;#cb16-46&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-47&#34;&gt;&lt;a href=&#34;#cb16-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ここでボタンの前にパースしてるのはナンセンスな気もするけど...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-48&#34;&gt;&lt;a href=&#34;#cb16-48&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-49&#34;&gt;&lt;a href=&#34;#cb16-49&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Parse!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-50&#34;&gt;&lt;a href=&#34;#cb16-50&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-51&#34;&gt;&lt;a href=&#34;#cb16-51&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;onInput&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-52&#34;&gt;&lt;a href=&#34;#cb16-52&#34;&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id=&#34;cb16-53&#34;&gt;&lt;a href=&#34;#cb16-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [] (&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-54&#34;&gt;&lt;a href=&#34;#cb16-54&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-55&#34;&gt;&lt;a href=&#34;#cb16-55&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [] []&lt;/span&gt;
&lt;span id=&#34;cb16-56&#34;&gt;&lt;a href=&#34;#cb16-56&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-57&#34;&gt;&lt;a href=&#34;#cb16-57&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flash flash-error&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-58&#34;&gt;&lt;a href=&#34;#cb16-58&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb16-59&#34;&gt;&lt;a href=&#34;#cb16-59&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-60&#34;&gt;&lt;a href=&#34;#cb16-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-61&#34;&gt;&lt;a href=&#34;#cb16-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-62&#34;&gt;&lt;a href=&#34;#cb16-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-63&#34;&gt;&lt;a href=&#34;#cb16-63&#34;&gt;&lt;/a&gt;        [] &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-64&#34;&gt;&lt;a href=&#34;#cb16-64&#34;&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id=&#34;cb16-65&#34;&gt;&lt;a href=&#34;#cb16-65&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-66&#34;&gt;&lt;a href=&#34;#cb16-66&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-67&#34;&gt;&lt;a href=&#34;#cb16-67&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-68&#34;&gt;&lt;a href=&#34;#cb16-68&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-69&#34;&gt;&lt;a href=&#34;#cb16-69&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;intersperse&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;↓&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb16-70&#34;&gt;&lt;a href=&#34;#cb16-70&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb16-71&#34;&gt;&lt;a href=&#34;#cb16-71&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-72&#34;&gt;&lt;a href=&#34;#cb16-72&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- ここもボタンの前に評価してるのは(ry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-73&#34;&gt;&lt;a href=&#34;#cb16-73&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;　]&lt;/span&gt;
&lt;span id=&#34;cb16-74&#34;&gt;&lt;a href=&#34;#cb16-74&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Eval!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-75&#34;&gt;&lt;a href=&#34;#cb16-75&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb16-76&#34;&gt;&lt;a href=&#34;#cb16-76&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-77&#34;&gt;&lt;a href=&#34;#cb16-77&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-78&#34;&gt;&lt;a href=&#34;#cb16-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-79&#34;&gt;&lt;a href=&#34;#cb16-79&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々ととりあえずで作ったので雑だ（現在のは改良したあとなのでこのコードとは少し違う）．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，会社で同期と TaPL (雑な)読書会をしており，このシリーズはその成果です． すでに半年ぐらいやってるが未だに10章です笑&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/05/191010</id><title type="text">最強にして最速のビルダー、mason</title><updated>2019-12-05T19:33:25+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/05/191010"/><summary type="html">Haskell Advent Calendar 2019 5日目 この冬、神速のサンタクロースがやってくる—— Haskellにおいて、バイト列の表現はByteStringが定番である。ByteStringはPinned領域に直接格納され、空間効率はリストに比べればはるかに良い。しかし、Pinned領域にあるとヒープフラグメンテーションが起こりやすくなるということでもあり、細かい文字列をつなぎ合わせるような使い方はパフォーマンスに悪影響が及ぶ。そのような問題を避けるため、ビルダーと呼ばれる構造が用意されている。 Data.ByteString.Builderは、word8 42 &lt;&gt; byte…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html</id><title type="text">VRのためにHaskellを使った話</title><updated>2019-12-03T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;デプロイ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;実際に開催してみて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;リポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h1&gt;
&lt;p&gt;はじめまして。趣味で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;しているはる&lt;span class=&#34;ascii&#34;&gt;(haru2036)&lt;/span&gt;と申します。まったり進行で開発しているので&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンアップの速さについていけてない感があります…… さて、今回はあんまり深い話はありません。どちらかと言うとこんなニッチなところに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;使ったよというネタで書きます。&lt;/p&gt;
&lt;h1 id=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/h1&gt;
&lt;p&gt;突然ですが、私は&lt;a href=&#34;https://vrchat.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;&lt;/a&gt;（以下&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;）というソーシャル&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;サービス（&lt;span class=&#34;ascii&#34;&gt;Second Life&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;版みたいなものです）にハマっています。&lt;br /&gt;
友人との雑談の中で&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;の中で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会ができればプログラミングなどの話題で盛り上がれる人が集まってワイワイ楽しくできるのではないかと話して、その場のノリでとりあえず実装してみることにしました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-room.png&#34; title=&#34;完成したワールド&#34; alt=&#34;完成したワールド&#34; /&gt;&lt;figcaption&gt;完成したワールド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今回作りたかったのはスライドを表示するためのスクリーンと、ページ送りに使うボタンを実装したワールドです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-control-panel.png&#34; title=&#34;発表者用コントロールパネル&#34; alt=&#34;発表者用コントロールパネル&#34; /&gt;&lt;figcaption&gt;発表者用コントロールパネル&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;ではアバターやワールドを自由に作ることができるのですが、&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;が提供するコンポーネント以外のスクリプトは利用できません。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザとしては得意なことを活用しづらい土壌です。&lt;br /&gt;
幸いスライドを表示する手段はゲーム内で&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;から画像を取得し表示する&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;というコンポーネントを利用することにより確保できましたが、&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;が取得できる画像はワールド作成時に決め打ちで指定された&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストに含まれるもののみです。&lt;br /&gt;
そのため、スライド画像への&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストを直接&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;に渡していると、イベントを開催する際よくある飛び入り参加やスライドの用意が遅れた参加者に対応できなくなってしまいます。&lt;/p&gt;
&lt;p&gt;その問題を解決するために、イベント開始時からのページ数とスライドの画像&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;をマップする&lt;span class=&#34;ascii&#34;&gt;WebAPI&lt;/span&gt;を用意しました。&lt;br /&gt;
具体的には、&lt;code&gt;/slides/{pageCount}&lt;/code&gt; のような形のエンドポイントを持った&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を用意し、そこから実際の画像へリダイレクトをかけるという方法を取りました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-image.png&#34; title=&#34;実装イメージ図&#34; alt=&#34;実装イメージ図&#34; /&gt;&lt;figcaption&gt;実装イメージ図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけだしということでさらっとやってみたかったので&lt;span class=&#34;ascii&#34;&gt;Spock&lt;/span&gt;を利用しました。もう少し誰でも使えるサービスにしたいと考えているので&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;に載せ替えてかっちり作り直そうかと思い移植しているところです。&lt;/p&gt;
&lt;h1 id=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/h1&gt;
&lt;p&gt;じつは&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会をやろうと思いついた友人の&lt;a href=&#34;https://twitter.com/b0xp2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BOXP&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Clojure&lt;/span&gt;ユーザで、せっかくだからと&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の開発を手伝ってくれました。&lt;br /&gt;
あまり&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に馴染みはなかったものの、いわゆる関数型プログラミング的な概念はバッチリなのでスススっと書いてくれました。&lt;br /&gt;
書いてくれる上での障壁になったのは、型関連の要素&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;data&lt;/code&gt;や&lt;code&gt;type&lt;/code&gt;や&lt;code&gt;newtype&lt;/code&gt;がぱっと見わからなかった、型コンストラクタ、値コンストラクタの概念）に馴染みが薄かったことでした。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながら説明を行ったのですが、やはり同じ画面を見ながら説明するのはとてもやりやすいと感じました。&lt;br /&gt;
本人からのメッセージはこちら。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラミング&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を昔読んでかじったことがある程度で素人もいいところでしたが、当人のサポートもあり思いついた数日後には実装が終わっていました。 はるくんの話にもある通り&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながらペアプロし、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのテストコードの書き方も一から教えてもらいながら書きました。これは願ってもない体験だったので根気よく教えてくれたことに非常に感謝しています。&lt;/p&gt;
&lt;p&gt;また、個人的には実装以外でのブレストや実際の会場でのデバッグを&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;上でできた事もとてもよかったなと思っています。 単純に実装を確認するためには二人以上で&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;に入る必要があるというのもありましたが、完全リモートでも身振り手振りありでブレストができたことや、アバターのおかげで環境に囚われないコミュニケーションができていたことも&lt;span class=&#34;ascii&#34;&gt;Good&lt;/span&gt;でした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;デプロイ&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけな上に常時稼働している必要もなく、コストを最小限に抑えたかったので&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;にデプロイしました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Dockerfile&lt;/span&gt;を書き、スタティックリンク周りで悩みながらもイメージを生成して&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;のレジストリに&lt;span class=&#34;ascii&#34;&gt;Push&lt;/span&gt;し、後はいつもの&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;という感じでうまくいきました。&lt;/p&gt;
&lt;p&gt;余談ですが、最近参加した&lt;span class=&#34;ascii&#34;&gt;Gotanda.hs&lt;/span&gt;というイベントで&lt;code&gt;cabal build --enable-executable-static&lt;/code&gt;でいい感じにシングルバイナリが生成できるというお話を聞いたので、最近&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;ばっかり使ってたのを改めて適材適所で使い分けていきたいなーと思っています。&lt;/p&gt;
&lt;h1 id=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実際に開催してみて&lt;/h1&gt;
&lt;p&gt;ここは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ほぼ全く関係ないですが……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt.png&#34; /&gt; &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;という名前で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回ほど開催しているのですが、場所の制約を受けずに勉強会ができ、その後の懇親会も会場の撤収時刻や終電を気にせず話したい人はとことん話し続ける事ができるというところが非常に良かったです。&lt;br /&gt;
ホワイトボードはまだ未実装ですが、空間に書けるペンも配布されているのでその手のアイテムも取り入れれば懇親会での話も更にはずむのではないでしょうか。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;PC&lt;/span&gt;のみでも利用することができます。 &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;はほぼ月イチペースで不定期開催ですので、もしよろしければ参加していただけると嬉しいです。 開催時のアーカイブ等も以下の&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;サイトにて公開中です。合わせてご覧ください。 &lt;a href=&#34;https://vrc-lt.github.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://vrc-lt.github.io&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;リポジトリ&lt;/h1&gt;
&lt;p&gt;そんなこんなで開発中のリポジトリはこちらになります。&lt;br /&gt;
拙いところもいっぱいですが&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;などで気になった点を教えていただければ幸いです！&lt;br /&gt;
&lt;a href=&#34;https://github.com/vrc-lt/VRC-Slide-Server&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/vrc-lt/VRC-Slide-Server&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/unicode-show.html&#34; lang=&#34;ja&#34;&gt;日本語をshowしてうまく表示されなかったら&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-day-2019.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2019を開催しました！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html</id><title type="text">Haskell で GitHub Actions する</title><updated>2019-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/haskell&#34;&gt;Haskell Advent Calendar 2019&lt;/a&gt;」の2日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;2019/11/13 に GA された GitHub Actions を使って，Haskell プロジェクト，とりわけ Haskell Stack を使ったプロジェクトを CI/CD します．&lt;/p&gt;
&lt;p&gt;ちなみに，試すために導入した PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/octbook/pull/1&#34;&gt;自動ビルドを追加 by matsubara0507 · Pull Request #1 · matsubara0507/octbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは適当な設定ファイルから GitHub の Organization や Organization の Team 機能にユーザーを招待したりキックしたりするための CLI ツールです．&lt;/p&gt;
&lt;h2 id=&#34;cabal-の場合&#34;&gt;Cabal の場合&lt;/h2&gt;
&lt;p&gt;はわりかし簡単． Haskell のセットアップは公式がすでに用意してくれてるのでこれを使えば良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell: Set up your GitHub Actions workflow with a specific version of Haskell (GHC and Cabal)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ghc ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.2.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.4.4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.8.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haskell パッケージ系のリポジトリなら，こんな感じに matrix の設定をすると良い． で，キャッシュする場合は，この matrix ごとに &lt;code&gt;~/.cabal/store&lt;/code&gt; だけをキャッシュすれば十分らしい（教えてもらった）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;   ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .cabal&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@preview&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.cabal/store&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}-cabal-${{ hashFiles(&amp;#39;**/fallible.cabal&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;          ${{ matrix.ghc }}-cabal-&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;        cabal v2-update&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;        cabal v2-build --only-dependencies&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build &amp;amp; test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;        cabal v2-build&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;        cabal v2-test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cabal の方はちゃんと調査してないのでこんでお終い（すいません）．&lt;/p&gt;
&lt;h2 id=&#34;stack-の場合&#34;&gt;Stack の場合&lt;/h2&gt;
&lt;p&gt;こっからが本題．&lt;/p&gt;
&lt;p&gt;Stack はキャッシュすべきディレクトリ &lt;code&gt;~/.stack&lt;/code&gt; がでかすぎる． 下記は試しに GitHub Actions 上で &lt;code&gt;du&lt;/code&gt; して見た結果だ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ du -sh ~/.stack/*
4.0K    /home/runner/.stack/config.yaml
1.3G    /home/runner/.stack/pantry
553M    /home/runner/.stack/pantry.sqlite3
0       /home/runner/.stack/pantry.sqlite3.pantry-write-lock
1.8G    /home/runner/.stack/programs
16M     /home/runner/.stack/setup-exe-cache
64K     /home/runner/.stack/setup-exe-src
462M    /home/runner/.stack/snapshots
192K    /home/runner/.stack/stack.sqlite3
0       /home/runner/.stack/stack.sqlite3.pantry-write-lock&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在，&lt;code&gt;actions/cache@v1&lt;/code&gt; では一度にキャッシュできるディレクトリの最大サイズは400MBしかない（&lt;del&gt;今後緩和される可能性はあるが&lt;/del&gt; &lt;a href=&#34;https://github.com/actions/cache/issues/6#issuecomment-571290282&#34;&gt;2020年1月7日ごろにリリースされた v1.1.0 より上限が2GBに緩和された&lt;/a&gt;ので、以降の涙ぐましい努力をする必要はなくなった笑）． &lt;code&gt;actions/cache&lt;/code&gt; は内部で gzip かなんかで圧縮しているので，この数字まんまではない． 試しに，このまんまキャッシュしてみたら次のような警告が出た:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Post job cleanup.
/bin/tar -cz -f /home/runner/work/_temp/2706cc23-8789-4ed4-b4ec-4e7143b1cc98/cache.tgz -C /home/runner/.stack .
##[warning]Cache size of 814014541 bytes is over the 400MB limit, not saving cache.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;800MB強，意外と少ない！&lt;/p&gt;
&lt;p&gt;余談だが，&lt;del&gt;そのうち&lt;/del&gt; v1.0.2 から&lt;a href=&#34;https://github.com/actions/cache/pull/85&#34;&gt;毎回キャッシュサイズが見れるようになる&lt;/a&gt;はず（今でも &lt;code&gt;ACTIONS_STEP_DEBUG&lt;/code&gt; を Secret に設定すると見れる）．&lt;/p&gt;
&lt;h3 id=&#34;system-ghc-を使う&#34;&gt;system-ghc を使う&lt;/h3&gt;
&lt;p&gt;stack は &lt;code&gt;--system-ghc&lt;/code&gt; オプションを使うことで stack がインストールした GHC の代わりに，ホストマシンの GHC を直接使ってくれる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cache-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mstksg/setup-stack@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc build --only-dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと system-ghc を使うことで &lt;code&gt;~/.stack/programs&lt;/code&gt; が保存されなくなった（ここには stack がインストールした GHC が保存されてた）． これで，半分弱の削減に成功．残り約500MB．&lt;/p&gt;
&lt;h3 id=&#34;必殺奥義-分割キャッシュ&#34;&gt;必殺奥義: 分割キャッシュ&lt;/h3&gt;
&lt;p&gt;実は，キャッシュの最大サイズ 400MB は &lt;strong&gt;一つのディレクトリ毎の最大サイズ&lt;/strong&gt; だ． なので，別々のディレクトリを別々にキャッシュすれば，最大 2GB までキャッシュできる（これがリポジトリ単位での最大サイズ）．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.stack/pantry&lt;/code&gt; というのが単体で 1.3GB ある． なので，これだけとそれ以外をキャッシュするようにしてみる． ちなみに，&lt;a href=&#34;https://docs.haskellstack.org/en/stable/pantry&#34;&gt;Pantry というのが Stack の依存パッケージのキャッシュシステム&lt;/a&gt;だ．&lt;/p&gt;
&lt;p&gt;ここで問題が1つ． actions/cache はディレクトリを1つ指定して，それを圧縮しキャッシュしする． 複数のディレクトリを指定したり，中の一部のファイルだけを除外したりなどはできない（少なくとも現在のバージョンでは）． もちろん，一旦 &lt;code&gt;mv&lt;/code&gt; してキャッシュし，restore したら &lt;code&gt;mv&lt;/code&gt; し直せば良い． が，めんどいね． 単純なことはソフトウェアで解決しよう． ソフトウェアエンジニアの精神です（？）．&lt;/p&gt;
&lt;p&gt;ということで，それをやってくれるアクションがこちら:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/actions/tree/master/move-files&#34;&gt;actions/move-files at master · matsubara0507/actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ついに TypeScript デビューした． はい，actions/cache を参考にしてきていい感じに書き直しただけです． &lt;code&gt;mkdir&lt;/code&gt; や &lt;code&gt;mv&lt;/code&gt; は &lt;a href=&#34;https://github.com/actions/toolkit/tree/master/packages/io&#34;&gt;actions/toolkit&lt;/a&gt; にあるので簡単に実装できた:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode typescript&#34;&gt;&lt;code class=&#34;sourceCode typescript&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; core from &lt;span class=&#34;st&#34;&gt;&amp;quot;@actions/core&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; io from &lt;span class=&#34;st&#34;&gt;&amp;quot;@actions/io&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; utils from &lt;span class=&#34;st&#34;&gt;&amp;quot;./utils/actionUtils&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;async &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;    try {&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;        const source &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; utils&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;            core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;source_dir&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; { required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; true })&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;        )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;// 残念ながら inputs は文字列しか渡せないので改行で分割してる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;        const files &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; core&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;source_files&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; { required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; true })&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\r?\n&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt;(pat &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; pat)&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;(pat &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; pat&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;trim&lt;/span&gt;())&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;        const target &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; utils&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;            core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;target_dir&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; { required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; true })&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;        )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;        await io&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;mkdirP&lt;/span&gt;(target)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;        core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;debug&lt;/span&gt;(&lt;span class=&#34;vs&#34;&gt;`mkdir -p &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;target&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt;`&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;        files&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;forEach&lt;/span&gt;(async &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(file) {&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;            try {&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;                const path &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; source&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; file)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;                await io&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;mv&lt;/span&gt;(path&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; target)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;                core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;debug&lt;/span&gt;(&lt;span class=&#34;vs&#34;&gt;`mv &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;path&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;target&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt;`&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;            } catch (error) {&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;                core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;warning&lt;/span&gt;(error&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;message&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;        })&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;    } catch (error) {&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;        core&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;warning&lt;/span&gt;(error&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;message&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;run()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;export default run&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときはこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は，GitHub Actions には隠し機能（現状ドキュメントには書いてない）として &lt;code&gt;post&lt;/code&gt; と &lt;code&gt;post-if&lt;/code&gt; というのがある（&lt;code&gt;actions.yml&lt;/code&gt; に設定できる）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;Move Files&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;move files to other direcotory&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;runs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;node12&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;dist/move/index.js&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;dist/restore/index.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # move.ts とは全く逆のことをするだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;post-if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;success()&amp;#39;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;          # move が成功したときにだけ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;a href=&#34;https://github.com/actions/cache&#34;&gt;actions/cache&lt;/a&gt; や &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;actions/checkout&lt;/a&gt; がやっているやつで，ジョブステップの最後にデストラクタのように指定したアクションを実行してくれる機能だ． ちなみに，実行したステップとは逆順にポストステップは実行する．&lt;/p&gt;
&lt;p&gt;これと actions/cache を組み合わせることで，自由にキャッシュしたいディレクトリを分割してキャッシュすることができるようになった！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-pantry-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-pantry-&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっとわかりにくいですが，別々にキャッシュしたディレクトリを &lt;code&gt;move-files&lt;/code&gt; で合体させるイメージ．&lt;/p&gt;
&lt;h3 id=&#34;キャッシュバージョンを付ける&#34;&gt;キャッシュバージョンを付ける&lt;/h3&gt;
&lt;p&gt;今回の PR のコミット履歴を見るとわかるのだが迷走してる． なぜかというと，actions/cache の「cache save は cache key が &lt;strong&gt;ヒットしなかったときにだけ&lt;/strong&gt; 行う」という性質に気づくのに時間がかかったから． &lt;code&gt;key&lt;/code&gt; にはヒットせず &lt;code&gt;restore-keys&lt;/code&gt; でヒットしたときには restore をして更にキャッシュを更新する． しかし，key に変更が無いとズーーーット古いキャッシュを使い続けてしまった． 変だと思った．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/actions/cache/issues/2&#34;&gt;現状キャッシュを手動でクリアする方法が無い&lt;/a&gt;． まぁなんでも良かったので cache-version というサフィックスを付けることにした笑:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cache-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}-${{ matrix.cache-version }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，キャッシュを試行錯誤してるときには便利だ．&lt;/p&gt;
&lt;h3 id=&#34;ビフォーアフター&#34;&gt;ビフォーアフター&lt;/h3&gt;
&lt;p&gt;もともと25分以上かかかっていたビルドが:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/before.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;なんと2分まで減った！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/after.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ-github-packages&#34;&gt;おまけ: GitHub Packages&lt;/h2&gt;
&lt;p&gt;Haskell プログラムのバイナリを配布するために，僕は普段 Docker Image にして Docker Hub に置いてた． しかし，先日 GitHub の 2019年のもう一つの目玉機能「GitHub Packages」も GA されたので，こっちに置いてみることにした（なんと Docker レジストリにもなる）．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/octbook/packages&#34;&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/image.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみに，現状パブリックリポジトリのパッケージであっても &lt;code&gt;docker pull&lt;/code&gt; するのに認証が必要である． その点がとても残念(改善されることを祈る)．&lt;/p&gt;
&lt;h3 id=&#34;ログイン&#34;&gt;ログイン&lt;/h3&gt;
&lt;p&gt;意外と手間取った． どうやら MFA 設定してるとトークンを使う他ないらしい． しかも，新しく（？）追加された &lt;code&gt;write:packages&lt;/code&gt; というスコープをオンしないとダメっぽい．&lt;/p&gt;
&lt;h3 id=&#34;github-actions-からプッシュ&#34;&gt;GitHub Actions からプッシュ&lt;/h3&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker build -t octbook . --build-arg local_bin_path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Push Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:latest&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Push Docker Image (tag)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;if: github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/code&gt; とすることで master ブランチのときだけ，&lt;code&gt;if: startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/code&gt; とすることで tag のときだけ，それぞれのステップを評価させることができる．&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; という Secret はデフォルトで用意されてる． &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#permissions-for-the-github_token&#34;&gt;スコープについてはここに書いてある&lt;/a&gt;． packages の read/write があるのでそのまま利用できるね．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;まぁきっと数ヶ月後ぐらいにはキャッシュ容量の制限が緩和されてこんなことしなくても良くなると思うけど．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/11/30/215950</id><title type="text">状態機械を合成してデッドロックを検出できる Go 言語パッケージを作ってみました</title><updated>2019-11-30T21:59:50+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/11/30/215950"/><summary type="html">はじめに マルチスレッドで動作するプログラムの設計は難しい問題です。個々のスレッドの動作は単純に見えても、複数が並行して動作する場合の動作は組み合わせ論的に複雑になります。また、タイミングに依存する不具合は狙って再現することが難しく、通常の単体テストによる検出にも限界があります。 そんなとき、有効な手法がモデル検査です。システムの取りうる状態をあらかじめ網羅的に探索することで、「実際に動作させた際にごく低い確率で踏むバグ」であっても、動作させることなく設計段階で発見することが可能になります。 ところでちょうど先日、デッドロック発見器を自作するハンズオンに参加する機会がありました。内容は非常にシ…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-day-2019.html</id><title type="text">Haskell Day 2019を開催しました！</title><updated>2019-11-29T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-day-2019.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日、&lt;a href=&#34;https://techplay.jp/space&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TECH PLAY SHIBUYA&lt;/span&gt;&lt;/a&gt;にて&lt;a href=&#34;https://techplay.jp/event/727059&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;&lt;/a&gt;を開催しました。&lt;br /&gt;
今回は、各発表の概要や、アンケートの結果をお伝えしたいと思います。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;発表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;関数と型で理解する自動微分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;アンケート結果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;エンジニアの経験年数はどれくらいですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;得意なプログラミング言語はなんですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;得意・好きな技術領域はどれですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;最近注目している技術があれば記述してください&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;あわせて読みたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;発表&lt;/h1&gt;
&lt;p&gt;まずは各種発表の紹介から。&lt;/p&gt;
&lt;h2 id=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/h2&gt;
&lt;p&gt;「関数型」 — すなわち&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でいうところの&lt;code&gt;a -&amp;gt; b&lt;/code&gt;で表される、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数について、ちょっと見方を変えた新しい発見を教えてくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/nobsun.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Higher Kinded Datatype (HKD)&lt;/span&gt;という、昨今&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界で流行りの型定義方法を解説しています。&lt;br /&gt;
レコード型を定義する際&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;にすることで、より柔軟に扱うことができるようになります。&lt;br /&gt;
さらに、&lt;a href=&#34;http://hackage.haskell.org/package/barbies&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;barbies&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;といった、&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;の利用を飛躍的に促進するパッケージも紹介されました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/fumieval.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;deriving&lt;/code&gt;機能 — 型を定義したとき、型クラスのインスタンスまで自動で定義してくれるあの機能ですね — の、適用範囲を広げる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張をいろいろ紹介してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/aiya000.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/h2&gt;
&lt;p&gt;プログラミング言語&lt;a href=&#34;https://www.egison.org/ja/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;&lt;/a&gt;の核となる機能である強力なパターンマッチを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の各種拡張を駆使することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードに自然に埋め込めるような形で実装した、という話です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.egison.org/download/20191109HaskellDay.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/egison/egison-haskell&#34;&gt;紹介しているライブラリーのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/egison.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数と型で理解する自動微分&lt;/h2&gt;
&lt;p&gt;関数の自動微分を行うパッケージ&lt;a href=&#34;http://hackage.haskell.org/package/ad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ad&lt;/span&gt;&lt;/a&gt;の仕組みを自力で実装してみることで解説してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/lotz.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/miso&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;&lt;/a&gt;というおいしそうな名前のアプリケーションフレームワークと、&lt;span class=&#34;ascii&#34;&gt;Firebase&lt;/span&gt;と連携する&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;のサンプルを、ライブコーディングを通して紹介してくれました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;を使えば、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;Elm Architecture&lt;/span&gt;風の設計に基づいてアプリケーションを作ったり、さらにそのコードを利用してサーバーサイドレンダリングをしたりできます。&lt;/p&gt;
&lt;p&gt;ℹ️資料はまだ公開されていません！当日はライブコーディングが大半の時間を占めていたため、同等の解説を文章にして公開したいというチェシャ猫さんの意向によるものです。&lt;br /&gt;
現在執筆中のためお待ちください。🙇&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/y-taka-23/miso-firebase-tutorial&#34;&gt;発表中に使用したソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/y_taka_23.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/h2&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;mixi git challenge&lt;/span&gt;」というイベントにおいてユーザーが投稿した解答を採点するサーバーを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Elm&lt;/span&gt;で一から書き直した、という事例を発表してくれました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/servant&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;servant&lt;/span&gt;&lt;/a&gt;といった著名なパッケージを使うだけでなく、足りないところを自力で補って新しいパッケージとして公開したり、さらに作成したアプリケーション自体を&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;として公開したりすることで、大きな資産を残していただけました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/matsubara0507.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.deepflow.co.jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;DeepFlow&lt;/span&gt;株式会社&lt;/a&gt;における&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の事例の紹介です。&lt;br /&gt;
超高速で大規模な数値計算システムを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の多様な言語拡張を駆使して作っているそうです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Tagless Final&lt;/span&gt;を活用することで知っているべき領域を区分して仕事を分けることに成功しているという点が印象的でした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/mr_konn.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ekmett.github.io/cadenza/cadenza/index.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cadenza&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;（&lt;span class=&#34;ascii&#34;&gt;GraalVM&lt;/span&gt;に含まれている、高速なインタープリター作成フレームワーク）製の関数型言語の紹介です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;がもたらす強力な&lt;span class=&#34;ascii&#34;&gt;JIT&lt;/span&gt;と「&lt;span class=&#34;ascii&#34;&gt;Normalization by Evaluation&lt;/span&gt;」という技術を応用することで、型検査と実行時両方における高いスピードを得ることが狙いだそうです。 将来的には依存型言語における型チェックや、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムの高速化に寄与したいとのことです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1bwYO66xUKeHyR4YCNm_1C82JlDNQLUXv/view&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ekmett/cadenza&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/ekmett.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;今回は&lt;span class=&#34;ascii&#34;&gt;Hakell Day&lt;/span&gt;史上初めての試みとして、&lt;span class=&#34;ascii&#34;&gt;Lightning Talk&lt;/span&gt;を当日公募しました。&lt;br /&gt;
残念ながら&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;分間という短い制限時間に収められない発表が大半でしたので、ぜひ👇の資料を読んでみてください！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;順番が間違っていたら済みません！ご指摘を！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0/edit#slide=id.gc6f73a04f_0_0&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;3D Model in Haskell - Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;3D&lt;/span&gt;モデルに触れる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cyclone_t/iot-cases-with-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;IoT&lt;/span&gt;やってます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/jabaraster/haskell-day-2019-lt-tomoyuki-kawano&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Quora&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;への愛を語る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitpitch.com/coord-e/slide-type-class-impl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作ってわかる型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Abstract Typeclasses - How To Design a Future-Proof Typeclass&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mew.org/~kazu/material/2019-gc.pdf&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート結果&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt; の各セッションや、参加者のバックグランドなどについてアンケートをとりました。 なので、後者の方の集計結果を載せたいと思います（前者はセッション発表者へのフィードバック）。&lt;/p&gt;
&lt;h2 id=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/h2&gt;
&lt;p&gt;大きく分けて &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問とそうでない質問がありました。 まずは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外に関する質問の方を集計結果を紹介します。&lt;/p&gt;
&lt;h3 id=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;エンジニアの経験年数はどれくらいですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question1.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意なプログラミング言語はなんですか？&lt;/h3&gt;
&lt;p&gt;ちなみに、言語のリストは &lt;a href=&#34;https://haskellweekly.news/survey/2019.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Survey 2019&lt;/span&gt;&lt;/a&gt; を参考にしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question2.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意・好きな技術領域はどれですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question3.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;最近注目している技術があれば記述してください&lt;/h3&gt;
&lt;p&gt;自由記述形式にしたところ、ほとんど重複が無かったので箇条書きにします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;FP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;匿名暗号通貨&lt;span class=&#34;ascii&#34;&gt;(Monero,Zcash,Dash,Koto)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Cardano ADA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GraphQL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Enigma&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;worker&lt;/span&gt;ベースの非同期プログラミング&lt;/li&gt;
&lt;li&gt;フロント界隈&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Next.js&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;自然言語処理&lt;/li&gt;
&lt;li&gt;型レベルプログラミング&lt;/li&gt;
&lt;li&gt;自動微分&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AWS&lt;/span&gt;によるサーバーレスアーキテクチャでのフルスタック&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション開発&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Rust&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Kubernetes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TLA+&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;algebraic effects and handlers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;深層学習コンパイラ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;定理証明支援系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/h2&gt;
&lt;p&gt;ちなみに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt; でもアンケートしました。&lt;/p&gt;
&lt;h3 id=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question4.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question5.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/h3&gt;
&lt;p&gt;参照&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://wiki.haskell.jp/Links#書籍&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://wiki.haskell.jp/Links#&lt;/span&gt;書籍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question6.jpg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;以上の発表に加えて今回は、下記のスポンサー企業の皆様や&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;くんのおかげで、大変満足度の高い懇親会ができました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mvrck.co.jp/&#34;&gt;マーベリック株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://herp.co.jp/&#34;&gt;株式会社&lt;span class=&#34;ascii&#34;&gt;HERP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iij.ad.jp/&#34;&gt;株式会社インターネットイニシアティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cryptact.com/&#34;&gt;株式会社クリプタクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-day-2019/after-party.jpg&#34; alt=&#34;懇親会で振る舞われた料理&#34; /&gt;&lt;figcaption&gt;懇親会で振る舞われた料理&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;発表について。&lt;br /&gt;
昨年は「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで&lt;/a&gt;」というテーマを意識して、発表の難易度別に時間帯が分かれるよう調整しましたが、残念ながらうまくいきませんでした。&lt;br /&gt;
そこで難易度調整の難しさを痛感したため、今回は敢えて難易度調整を行わなかったのです。&lt;br /&gt;
結果、全体として難しい発表に偏ってしまった点は少し反省です。&lt;a href=&#34;https://eng-blog.iij.ad.jp/archives/3467&#34;&gt;私が会社で開いている&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;勉強会&lt;/a&gt;に毎回参加いただいている同僚も、総じて難しくて追いつくのが大変だった、と仰ってました。&lt;br /&gt;
次回は特別に難易度を下げた発表枠をいくつか作り、内容を事前に精査する、なんてプランを考えています。&lt;/p&gt;
&lt;p&gt;会場について。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TECHPLAY SHIBUYA&lt;/span&gt;は素晴らしいですね！&lt;br /&gt;
我々のようなお金がないコミュニティーが今回の規模のイベントを行うのにうってつけでした。&lt;br /&gt;
元々イベントを開催する前提で作られており、受付と演壇が近いため受付しながら発表を聞くことができるのも、持ち回りで受付をしている我々にとって好都合でした。&lt;br /&gt;
来年も是非使わせていただきたいです🙏&lt;/p&gt;
&lt;p&gt;最後に。&lt;br /&gt;
発表者のみなさんはもちろん、支えていただいたスタッフ、スポンサー企業、会場まで足を運んでいただいた参加者の皆様、その他この会の実現に関わったすべての方々に、この場を借りて感謝の意を示したいと思います。&lt;br /&gt;
みなさんのご協力おかげで、大きなトラブルもなく、楽しいイベントが開催できました。ありがとうございます。&lt;br /&gt;
今後も日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ（&lt;span class=&#34;ascii&#34;&gt;a.k.a. Haskell-jp&lt;/span&gt;）をよろしくお願いします！&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;hask(_ _)eller&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;あわせて読みたい&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;参加者による参加レポート&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2019/11/09/110030&#34;&gt;今日は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; の日です &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 北海道苫小牧市出身の初老&lt;span class=&#34;ascii&#34;&gt;PG&lt;/span&gt;が書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncaq.net/2019/11/09/20/56/00/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;に参加しました &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; に参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/haskell-day-2018.html&#34;&gt;去年の開催レポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-in-vrchat.html&#34; lang=&#34;ja&#34;&gt;VRのためにHaskellを使った話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-copilot.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Copilotという内部DSLについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B</id><title type="text">FFI で Haskell から Rust を利用する</title><updated>2019-11-22T13:28:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B"/><summary type="html">Rust で作ったライブラリーを静的リンクして Haskell（GHC）から使う例と説明を書いた。 github.com</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89</id><title type="text">最近の自分の Haskell 開発環境（Windows）</title><updated>2019-11-21T09:09:44+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89"/><summary type="html">id:syocy のブログを見たので Windows で自分がどうしているかをメモしておく。 syocy.hatenablog.com Stack 最近は ghcup があるがシェルスクリプト製で自分は PowerShell ユーザーなので stack を使っている。（ghcup はなんで Haskell 製じゃないんだ1？） GHC 8.8 を使うには resolver は ghc-8.8 や nightly を指定する。まだ LTS にはなっていない。 エディター エディターは Spacemacs を使っている。前は IntelliJ IDEA に HaskForce プラグインを入れて使…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2019-11-16T09:38:23.124+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック

Dock

 最近使ったアプリケーションをDock に追加</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html</id><title type="text">Elm で line charts する</title><updated>2019-11-15T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Elm で作っているスコアボードにスコアの線グラフを追加したかったので &lt;a href=&#34;https://package.elm-lang.org/packages/terezka/line-charts/&#34;&gt;&lt;code&gt;terezka/line-charts&lt;/code&gt;&lt;/a&gt; というパッケージを使って追加した． っていうメモ書き。 追加の PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/pull/49&#34;&gt;スコアボードにグラフを描写するページを追加 by matsubara0507 · Pull Request #49 · matsubara0507/git-plantation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最終的に出来上がったグラフがこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/line-charts-with-elm/graph.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;実は色をランダムに生成している部分がキモ(?)です． ちなみに，本記事で扱う &lt;code&gt;terezka/line-charts&lt;/code&gt; パッケージのバージョンは 2.0 です．&lt;/p&gt;
&lt;h2 id=&#34;terezkaline-charts&#34;&gt;terezka/line-charts&lt;/h2&gt;
&lt;p&gt;どんなグラフが書けるかは作者が用意してる&lt;a href=&#34;https://terezka.github.io/line-charts&#34;&gt;サンプルページ&lt;/a&gt;を見ると良い． ただし，&lt;code&gt;see source&lt;/code&gt; ボタンで右からニュッっと出てくるソースコードは Elm 0.19 では動かない点に注意． サンプルページのコードはおそらく&lt;a href=&#34;https://github.com/terezka/line-charts/blob/2.0.0/docs/src&#34;&gt;ココ&lt;/a&gt;にある．&lt;/p&gt;
&lt;p&gt;今回は競技プログラミングのスコア変遷をグラフ化したかったので &lt;a href=&#34;https://github.com/terezka/line-charts/blob/2.0.0/docs/src/Stepped.elm&#34;&gt;&lt;code&gt;Steeped&lt;/code&gt;&lt;/a&gt; というグラフを使うことにする(段々になっているやつ)．&lt;/p&gt;
&lt;h3 id=&#34;linechart.viewcustom-を使ってみる&#34;&gt;&lt;code&gt;LineChart.viewCustom&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;グラフを描写するには &lt;code&gt;LineChart.viewCustom&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;  : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Svg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1引数めがどうのように描写するかの設定で，2引数目は描写する(プロットする)データのリストをである． &lt;code&gt;Config data msg&lt;/code&gt; 型は次のようになっている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;container&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;intersection&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Intersection&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;interpolation&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Interpolation&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;legends&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Legends&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;events&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Events&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;area&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;grid&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Grid&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dots&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dots&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;junk&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Junk&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれサブモジュールの設定をしている(例えば &lt;code&gt;container&lt;/code&gt; フィールドは &lt;code&gt;LineChart.Container&lt;/code&gt; モジュール):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; はX軸とY軸の設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt; はグラフを描写する外枠の設定(たぶん)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection&lt;/code&gt; は両軸の交点の設定(真ん中にするとか左下にするとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interpolation&lt;/code&gt; は点と点を結ぶ線の引き方を設定(直線か曲線かなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;legends&lt;/code&gt; はグラフの凡例のを設定(どの線が何のグラフかなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt; はグラフ上でのイベント(&lt;code&gt;Msg&lt;/code&gt;)を設定(クリックとかマウスホバーとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;area&lt;/code&gt; は線の下の部分の描写の仕方を設定
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; だと何も描写しないのでただの線グラフになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt; だと同じ色で塗りつぶしてくれる(引数は &lt;code&gt;opacity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt; はグラフのグリッドを設定(そのまんま)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt; は線の幅やホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dots&lt;/code&gt; は点の大きさやホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;junk&lt;/code&gt; は点や線にホバーした時にモーダル(?)かなんかを表示する設定(たぶん)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は基本的にサンプルコードのまんまで，軸や &lt;code&gt;junk&lt;/code&gt; の設定を少しだけいじった．&lt;/p&gt;
&lt;h3 id=&#34;プロットデータを用意する&#34;&gt;プロットデータを用意する&lt;/h3&gt;
&lt;p&gt;2引数目の &lt;code&gt;Series data&lt;/code&gt; はプロットしたいデータ型(&lt;code&gt;data&lt;/code&gt;)に描写するための情報を付与したデータ型だ． 次の関数などで変換する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;dash&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;line&lt;/code&gt; は直線で &lt;code&gt;dash&lt;/code&gt; はたぶん破線． &lt;code&gt;Color&lt;/code&gt; は色を，&lt;code&gt;Shape&lt;/code&gt; は &lt;code&gt;LineChart.Dots&lt;/code&gt; にある関数で点の形を，&lt;code&gt;String&lt;/code&gt; は線の凡例名を与える． で，実際のプロットデータは &lt;code&gt;List data&lt;/code&gt; だ． &lt;code&gt;data&lt;/code&gt; から何をX軸にして，何をY軸にするかは &lt;code&gt;Config&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt;・&lt;code&gt;y&lt;/code&gt; で指定する(&lt;code&gt;variable&lt;/code&gt;)．&lt;/p&gt;
&lt;p&gt;今回は，各チームのスコアデータの時間毎での遷移を描写したいので，X軸に正解時間をY軸に総ポイントを割り当てる． そのためのデータ型を用意した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;                &lt;span class=&#34;co&#34;&gt;-- 総ポイント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- 最後にクリアステータス&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;problem_id&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;correct&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- クリアしてると True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- まだクリアしてないと Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; はもともとある型で，サーバーサイドからスコア(&lt;code&gt;Score&lt;/code&gt;)を取得する際に用いる． このサーバーからのスコアから &lt;code&gt;Series ScoreHistory&lt;/code&gt; を構築する関数を用意した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;team&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistories&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;correct&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sortBy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;scanl&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;::&lt;/span&gt;) []&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dots&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;team&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どの問題が何点かは `Model.problems` にしか書いてない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problems&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;find&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problem_id&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;difficulty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scanl&lt;/code&gt; で綺麗になってるのが気持ちいい． また，&lt;code&gt;variable&lt;/code&gt; は次のように設定した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;chart&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pixels&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;380&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padded&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;axisLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AxisLine&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ticks&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ticks&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- これは軸に表示する数字の間隔&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 確かデフォルト millisec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pixels&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1270&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padded&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;axisLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AxisLine&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ticks&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ticks&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;zone&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，ここまではいい感じにできた． 問題は &lt;code&gt;buildScoreHistories&lt;/code&gt; の &lt;code&gt;Color&lt;/code&gt; にどうやってチームごとに違う色を渡すか． &lt;code&gt;LineChart.Colors&lt;/code&gt; には事前に色が用意されていたが全部で22色ぐらいしかない． できればチーム数に応じて可変にしたい．&lt;/p&gt;
&lt;h2 id=&#34;color-を付け変える&#34;&gt;Color を付け変える&lt;/h2&gt;
&lt;p&gt;グラフ描写に使うグラフの色はチーム数によって可変にしたい． 色を任意個数だけ生成する方法はないか調べてみたところ，&lt;a href=&#34;https://package.elm-lang.org/packages/tesk9/palette&#34;&gt;&lt;code&gt;tesk9/palette&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;Palette.Cubehelix.generate&lt;/code&gt; を使えば実現できそうだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; ただし &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;256&lt;/span&gt; の間だけ有効&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;generate&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題が一つ． line-charts は別の &lt;code&gt;Color&lt;/code&gt; パッケージに依存しており，&lt;code&gt;Color&lt;/code&gt; モジュールが衝突して使うことができない！&lt;/p&gt;
&lt;p&gt;困った． とりあえず，フォークして差し替えるしかない． 差し替えたものがコチラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/line-charts/tree/color-palette&#34;&gt;matsubara0507/line-charts at color-palette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm のビルドツールにはパッケージをいい感じにフォーク先などに変更する方法がない． ざっくり調べてみたところ，フォークしたもの elm-packages にあげて使うか，プロジェクト内にフォークしたリポジトリを直接置いて参照するか． Elm-jp でも相談してみたところ，後者の方が良さそうなのでそうすることにした．&lt;/p&gt;
&lt;h3 id=&#34;elm-のパッケージをフォークしたのにa差し替える&#34;&gt;Elm のパッケージをフォークしたのにa差し替える&lt;/h3&gt;
&lt;p&gt;まずは普通に &lt;code&gt;git submodule&lt;/code&gt; をします:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir elm-lib
$ git submodule add git@github.com:matsubara0507/line-charts.git elm-lib/line-charts
$ elm-lib/line-charts
$ git checkout color-palette&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そしてこのディレクトリも見るように &lt;code&gt;elm.json&lt;/code&gt; を書き換えます:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode diff&#34;&gt;&lt;code class=&#34;sourceCode diff&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;@@ -1,30 +1,40 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  {&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;      &amp;quot;type&amp;quot;: &amp;quot;application&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;      &amp;quot;source-directories&amp;quot;: [&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-         &amp;quot;elm-src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+         &amp;quot;elm-src&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+         &amp;quot;elm-lib/line-charts/src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;      ],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，適当に &lt;code&gt;import LineChart&lt;/code&gt; を追記して &lt;code&gt;elm make&lt;/code&gt; するとどうなるでしょうか？ 残念ながらうまくいきません:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make elm-src/Main.elm --output=static/main.js
-- UNKNOWN IMPORT -------- elm-lib/line-charts/src/Internal/Axis/Values/Time.elm

The Internal.Axis.Values.Time module has a bad import:

    import Time.Extra

I cannot find that module! Is there a typo in the module name?

The &amp;quot;source-directories&amp;quot; field of your elm.json tells me to look in directories
like elm-src, but it is not in any of them. Maybe it is in a package that is not
installed yet?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Time.Extra&lt;/code&gt; は line-charts が依存しているパッケージで，それが &lt;code&gt;elm.json&lt;/code&gt; に書かれてないというエラーメッセージです． サブモジュール側の依存パッケージは自動で解決してくれない(単純にローカルのソースコードが増えてるだけなので，そりゃそうって感じだ)． なので，自分で書き足す必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode diff&#34;&gt;&lt;code class=&#34;sourceCode diff&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;diff --git a/elm.json b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;index 30d0662..7c32604 100644&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;--- a/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;+++ b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;@@ -1,36 +1,36 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;     &amp;quot;dependencies&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;         &amp;quot;direct&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;             &amp;quot;avh4/elm-color&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;             &amp;quot;bartavelle/json-helpers&amp;quot;: &amp;quot;2.0.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;             &amp;quot;elm/browser&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;             &amp;quot;elm/core&amp;quot;: &amp;quot;1.0.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;             &amp;quot;elm/html&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;             &amp;quot;elm/http&amp;quot;: &amp;quot;2.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;             &amp;quot;elm/json&amp;quot;: &amp;quot;1.1.3&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;             &amp;quot;elm/time&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;             &amp;quot;elm/url&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;             &amp;quot;elm-community/list-extra&amp;quot;: &amp;quot;8.2.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;             &amp;quot;justinmimbs/timezone-data&amp;quot;: &amp;quot;2.1.4&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;             &amp;quot;krisajenkins/remotedata&amp;quot;: &amp;quot;6.0.1&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;terezka/line-charts&amp;quot;: &amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;         },&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;         &amp;quot;indirect&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;             &amp;quot;elm/bytes&amp;quot;: &amp;quot;1.0.8&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;             &amp;quot;elm/file&amp;quot;: &amp;quot;1.0.5&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;             &amp;quot;elm/parser&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;             &amp;quot;elm/virtual-dom&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;         }&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;     },&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;     &amp;quot;test-dependencies&amp;quot;: {&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで無事 &lt;code&gt;elm make&lt;/code&gt; をすることができるようになった．&lt;/p&gt;
&lt;h3 id=&#34;palette.cubehelix-を使ってみる&#34;&gt;&lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;いよいよ &lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる． そもそも Cubehelix とはなんなのか．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/&#34;&gt;ググった感じこれっぽい&lt;/a&gt;． 宇宙を撮影した画像を描写するときのためのカラースキーマーっぽい(なにが課題なのかはよくわからなんだw)． &lt;code&gt;Palette.Cubehelix.generate :: Int -&amp;gt; List Color&lt;/code&gt; を使うことで最大で256色を返してくれる． 更にどんな感じの色を返してくれるかは &lt;code&gt;generateAdvanced&lt;/code&gt; の方を使い，&lt;code&gt;AdvancedConfig&lt;/code&gt; 型の値を自作することでコントロールできる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AdvancedConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotationDirection&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;RotationDirection&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotations&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;gamma&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々試したところ各引数はこんな感じだった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; は HSL の Hue + Saturation を元に起点を決める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotationDirection&lt;/code&gt; は回転方向 (RGB or BGR)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotation&lt;/code&gt; は回転角を 0-1.5 で指定（小さいほど似た色になる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma&lt;/code&gt; は明暗な色のバランスを 0-2 で指定（0は明るい、2は暗い色が長くなる）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HSLとは RGB とは違う色の表現のし方で，色相（Hue）・彩度（Saturation）・輝度（Lightness）を指定する． 直感的なイメートして，黒から白へこうぐるっと指定した螺旋でカラーパレットを表現する感じ．&lt;/p&gt;
&lt;p&gt;物は試し，repl で色々と試すと良い(色だけに):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toHex&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Palette&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;generateAdvanced&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromHSL&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotationDirection&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Palette&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;RGB&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotations&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;gamma&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;[&lt;span class=&#34;st&#34;&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#311410&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#3C3F0D&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#2B6F39&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#3E8590&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#8984CC&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#D490C6&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#EAB8B1&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#E5E6CA&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#FFFFFF&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;   : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんとこれを Slack に貼ると色を確認できる(賢い)． で，最終的には最初と最後の黒白を抜いて適当に使った．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;submodule のやつしんどいし，なんか自動で &lt;code&gt;elm.json&lt;/code&gt; を書き換えてくれる CLI ツールでも作ろうかしら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html</id><title type="text">Haskell Day 2019 に参加してきた</title><updated>2019-11-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;11月9日にあった「&lt;a href=&#34;https://techplay.jp/event/727059&#34;&gt;Haskell Day 2019&lt;/a&gt;」に参加してきたのでメモ書きです． 裏方もほんの少しだけ手伝ったけど，裏方については公式のブログで(誰かが)書くと思うので割愛． ただ，全部オープンな場でやりとりしてるの気になる方は Haskell-jp slack を見に行くか Haskell-jp の GitHub を漁るといいと思う．&lt;/p&gt;
&lt;h3 id=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;関数型(function type)を見つめるプログラミング&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nobsun&#34;&gt;山下&lt;/a&gt;氏の発表． &lt;a href=&#34;https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;関数型(プログラミング)の話かとずっと思ってたら関数「型」の話だった(よく読め)． 今回で唯一の Basics なセッション． 特別動くコードは出てこないとのこと． 話の中で &lt;code&gt;A -&amp;gt; B&lt;/code&gt; という関数型があるときに，ドメイン(&lt;code&gt;A&lt;/code&gt; 側)がさらに関数型なのは多くの人たちも慣れて来てる(他の言語の人たちも含め)が，コドメイン(&lt;code&gt;B&lt;/code&gt; 側)が関数型になるのはしっくりこない人が多いらしい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f :: (X -&amp;gt; Y) -&amp;gt; Z -- は平気
g :: X -&amp;gt; (Y -&amp;gt; Z) -- はダメらしい(もちろん Haskell はカッコいらない)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まぁ確かに，他の言語ではあんまり使わないですね． 自分は学生の頃に，なんかのプログラミング言語に慣れる前に C/C++/Java/Ruby/Haskell を学んだから困った記憶ないけど． ちなみに「拡張適用演算子」っていう用語は山下氏の造語らしい．&lt;/p&gt;
&lt;h3 id=&#34;hkdhigher-kinded-datatype&#34;&gt;HKD(Higher Kinded Datatype)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fumieval&#34;&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;Haskell のレコードの各フィールドに共通の性質を付加したいことはしばしばある． 多相な型パラメータ &lt;code&gt;h :: Type -&amp;gt; Type&lt;/code&gt; を付けてあげれば実現可能． &lt;a href=&#34;https://hackage.haskell.org/package/barbies&#34;&gt;barbies&lt;/a&gt;パッケージを使うと自動でやってくれるし，fumieval 氏が作った &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; パッケージはその機能もサポートしてる(2014~)． 僕は2017年ぐらいから愛用していますありがとうございます．&lt;/p&gt;
&lt;p&gt;他にも &lt;code&gt;TangleT&lt;/code&gt; という機能を紹介してましたが，なんとこのサイトを生成してる Hakyll プログラムにも &lt;code&gt;TangleT&lt;/code&gt; を使ってます笑． &lt;code&gt;TangleT&lt;/code&gt; はレコードのフィールド間に依存関係がある場合に有用で，フィールドの評価順を制御できるようになる． これと，静的サイトのレンダリング順を組み合わせたらいいんじゃね？ってなってやってみた(別段効果があったわけじゃないけど)．&lt;/p&gt;
&lt;h3 id=&#34;しんさんきぼうghcのderivingテクノロジー&#34;&gt;「しんさんきぼう」GHCのderivingテクノロジー&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aiya000&#34;&gt;aiya000&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/&#34;&gt;発表資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表題の通り，型クラスのインスタンス宣言を容易にしてくれる &lt;code&gt;deriving&lt;/code&gt; 機能の最近の話． 標準のを含め，現在 GHC には &lt;code&gt;deriving&lt;/code&gt; は4種類もあり，特に &lt;code&gt;DerivingVia&lt;/code&gt; GHC 拡張はすごいぞ！って感じです． で，さらに4種類の &lt;code&gt;deriving&lt;/code&gt; を整理して綺麗に記述するために &lt;code&gt;DerivingStrategies&lt;/code&gt; という GHC 拡張があるとのこと．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DerivingStrategies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeBody&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeBody&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt;          (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)                &lt;span class=&#34;co&#34;&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; stock    (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)                  &lt;span class=&#34;co&#34;&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; anyclass (&lt;span class=&#34;dt&#34;&gt;Visible&lt;/span&gt;)             &lt;span class=&#34;co&#34;&gt;-- DeriveAnyClass&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt;)                &lt;span class=&#34;co&#34;&gt;-- GeneralizedNewtypeDeriving&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt;          (&lt;span class=&#34;dt&#34;&gt;Bounded&lt;/span&gt;) via &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- DerivingVia&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(発表資料より引用)ここまでのコードは書いたことも見たこともないけど笑&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;DerivingVia&lt;/code&gt; は僕も前に「&lt;a href=&#34;https://speakerdeck.com/konn/ben-dang-hasugoi-newtype&#34;&gt;本当はすごい newtype&lt;/a&gt;」っていう資料を読んでびっくりした記憶． 今回紹介した git-plantation では CLI の「なんらかの型の ID を列挙する」引数から「なんらかの型」を探す部分の ID 側に &lt;code&gt;DerivingVia&lt;/code&gt; を使った． 思うにただの &lt;code&gt;Int&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; になりやすい ID 系の型は &lt;code&gt;DerivingVia&lt;/code&gt; との相性がいい気がする．&lt;/p&gt;
&lt;h3 id=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;HaskellメタプログラミングによるEgisonのパターンマッチの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/egisatoshi&#34;&gt;江木&lt;/a&gt;氏の発表． &lt;a href=&#34;https://www.egison.org/download/20191109HaskellDay.pdf&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;egisatoshi 氏が学生時代(?)から作成し続けてるプログラミング言語 &lt;a href=&#34;https://www.egison.org&#34;&gt;Egison&lt;/a&gt; の強力なパターンマッチング機能を Haskell に導入した話． &lt;a href=&#34;https://github.com/egison/egison-haskell&#34;&gt;リポジトリは多分これ&lt;/a&gt;． Egison の機能を他の言語に突っ込むというのは Scheme ですでにやっていたが，Haskell の場合は型付けをしなくちゃいけないらしく苦労したとのこと． もう，すっごい GHC の型拡張機能をふんだんに使ってました(多くの人に手伝ってもらったらしい)．&lt;/p&gt;
&lt;p&gt;なお，スライドはめっちゃ長く，時間が足りなかったので全部のページを丁寧に説明してはなかった笑． あとで読んでだって．&lt;/p&gt;
&lt;p&gt;僕は Egison を学生の頃から知ってて，ずーっと何かに使えないかなぁって考えてるけど思いつかない． Egison パターンマッチングは，再帰の「全探索する部分」と「条件付けて絞り込む部分」の前者をサボることができるようになるらしい． つまり，順番を無視するために似たようなパターンを記述しなくて済むようになる． 順番を無視したい場合，うーん，CLI の引数とか？ 今度試してみるか(なんか違う気もする)．&lt;/p&gt;
&lt;p&gt;あ，ちなみに，最後にステマ(?)してた Egison Jornal は全部買ってます． 面白いです．&lt;/p&gt;
&lt;h3 id=&#34;関数と型で理解する自動微分&#34;&gt;関数と型で理解する自動微分&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lotz84&#34;&gt;lotz&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;ぱっと見，一番好評だった気がする． 急に導関数が欲しくなる時がありますよね？ってことで自動で導関数を導出する方法を紹介します，って感じの話です(?)． Haskell で自動微分するためには &lt;a href=&#34;https://github.com/ekmett/ad&#34;&gt;ad&lt;/a&gt; パッケージを使うといいらしい． ちなみにこのパッケージは，今回の Haskell Day のスペシャルゲストとしていらしゃった ekmett 氏が作ったものだ． で，動作を理解するために &lt;code&gt;diff&lt;/code&gt; 関数を自作してみたっていう流れでした．&lt;/p&gt;
&lt;p&gt;本来，型エラーになって欲しい部分が型エラーにならないので，幽霊型や存在型を使って実現している． といった Haskell 型機能のアドバンスドな話から，自動微分というアカデミックな話まで，盛りだくさんでした． というか話が上手．&lt;/p&gt;
&lt;h3 id=&#34;ghcjs-による-web-フロントエンド開発&#34;&gt;GHCJS による Web フロントエンド開発&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/y-taka-23&#34;&gt;チャシャ猫&lt;/a&gt;氏の発表． &lt;a href=&#34;https://guide.elm-lang.jp/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt; を表現した GHCJS の &lt;a href=&#34;https://github.com/dmjio/miso&#34;&gt;Miso&lt;/a&gt; パッケージをライブコーデイング形式で紹介． 基本ライブコーディングだった結果，スライドはないのかな．&lt;/p&gt;
&lt;h3 id=&#34;haskell-で作る競技型イベントの裏側&#34;&gt;Haskell で作る競技型イベントの裏側&lt;/h3&gt;
&lt;p&gt;僕の発表． &lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;去年の6月ぐらいから少しずーつ作ってた &lt;a href=&#34;https://github.com/matsubara0507/git-plantation&#34;&gt;git-plantation&lt;/a&gt; の紹介． 話題が逸れるから言わなかったけど「作り直すか〜」ってやり始めたのは技術書典5のネタ用でした笑． もちろん，作り直す意義は発表した通りですよ．&lt;/p&gt;
&lt;p&gt;extensible・Servant・Elm・STM・Dhall など前回・今回の Haskell Day で出たような話題をふんだんに使ってるので「詳しくは〜」って形で引用させてもらった． この発表以外の多くは，Haskell の強力な「型」でいろんな問題を解決したよって感じの話でしたが，僕はその解決した機能をふんだんに使ってリアルアプリケーションをサクッと作ったって感じなのです． 巨人の肩に乗ろう．&lt;/p&gt;
&lt;h3 id=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;大規模数値計算を支える Haskell ── Pragmatic Haskell in Large-Scale Numerical Computation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/konn&#34;&gt;石井&lt;/a&gt;氏の発表． &lt;del&gt;内容があれなので写真は最初のスライドだけで，的なこと言ってたのでスライドは公開されないんじゃないかな&lt;/del&gt;&lt;a href=&#34;https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil&#34;&gt;公開されました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;GoS2014(?)で ekmett 氏にメンターをしてもらったとのこと．すごい． で，発表の内容は社長(?)が前に言っていた「&lt;a href=&#34;https://twitter.com/hiroki_f/status/1135160082373652480&#34;&gt;弊社のプロダクトはモナドで各々知っているべき領域を区分して仕事を分けています。ですので、全部知ってなくても、仕事ができます。&lt;/a&gt;」というツイートの詳しい話(代弁)． どうやら，物理系ソルバを(Haskellで)記述してる人たちが，それに注力できるように本質的な部分以外は Haskell の魔法(モナド)で隠蔽しているという感じの話らしい． 今回はその魔法についてたくさん紹介してくれた． 例えば，前にも出てきた依存型や拡張可能レコード，他にも Tagless final など． 高度な Haskell (というか GHC)の機能を Real World に消化しておりすごかった(小並感)．&lt;/p&gt;
&lt;h3 id=&#34;special-talk-cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;Special Talk: Cadenza: Building fast functional languages on the JVM&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ekmett/&#34;&gt;ekmett&lt;/a&gt; 氏の特別講演． これまたライブコーデイングでした(まさかの被り)． タイトルでも言及してる &lt;a href=&#34;https://github.com/ekmett/cadenza&#34;&gt;Cadenza ってのはこれっぽい&lt;/a&gt;． JVM の方は最近よく耳にする(?) &lt;a href=&#34;https://www.graalvm.org/&#34;&gt;GraalVM&lt;/a&gt; のことだった． ライブコーデイングの内容は単純型付きラムダ計算をささっと作ってるみたいだった．&lt;/p&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT&lt;/h3&gt;
&lt;p&gt;だいたい間に合ってない笑 特にメモも何も取ってなかったのでリンクの列挙だけ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/as-capabl&#34;&gt;アズなんとかさん&lt;/a&gt;氏の「&lt;a href=&#34;https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0&#34;&gt;3D Model in Haskell&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cyclone-t&#34;&gt;CycloneT&lt;/a&gt;氏の「HaskellでIoTやってます」
&lt;ul&gt;
&lt;li&gt;業務の紹介なのでスライドは公開されてないかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jabaraster&#34;&gt;河野&lt;/a&gt;氏の「&lt;a href=&#34;https://docs.google.com/presentation/d/1xcdZ42lF64b_S0wZfi1Er-3YTs8H_Ob15BO3kpuRSMU&#34;&gt;QuoraでHaskellへの愛を語る&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coord-e&#34;&gt;coord_e&lt;/a&gt; 氏の「&lt;a href=&#34;https://gitpitch.com/coord-e/slide-type-class-impl&#34;&gt;Haskellで作ってわかる型クラス&lt;/a&gt;」
&lt;ul&gt;
&lt;li&gt;型クラス機能自体を作る方の話だった笑(間に合ってはない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minoki&#34;&gt;mod_poppo&lt;/a&gt; 氏の「&lt;a href=&#34;https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view&#34;&gt;Abstract Typeclasses&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto&#34;&gt;kazu_yamamoto&lt;/a&gt; 氏の「&lt;a href=&#34;http://www.mew.org/~kazu/material/2019-gc.pdf&#34;&gt;GHCのGC&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;さて，来年のネタ仕込みを始めるか(発表するかはさておき)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://blog.miz-ar.info/2019/10/scanl-and-scanr/</id><title type="text">Haskellのscan系関数を使いこなす</title><updated>2019-10-12T10:14:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/10/scanl-and-scanr/"/><summary type="html">&lt;img width=&#34;619&#34; height=&#34;146&#34; src=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png&#34; class=&#34;attachment-large size-large wp-post-image&#34; alt=&#34;&#34; style=&#34;float:left; margin:0 15px 15px 0;&#34; srcset=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png 619w, https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl-300x71.png 300w&#34; sizes=&#34;(max-width: 619px) 100vw, 619px&#34; /&gt;Haskellはリストを操作する関数を多数提供しています。map, filter, foldあたりが代表的で、これらは他の言語でもおなじみかと思います。 一方で、scan系関数（scanl, scanr）は他の言語ではあ [&amp;#8230;]</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-copilot.html</id><title type="text">HIW 2019で発表された、Copilotという内部DSLについて</title><updated>2019-10-01T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-copilot.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表を紹介します。&lt;br /&gt;
今回は、&lt;a href=&#34;https://copilot-language.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成する&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;についての発表です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34; title=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot 3.0: a Haskell runtime verification framework for UAVs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copilotを試してみる&#34; title=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34; title=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot 3.0: a Haskell runtime verification framework for UAVs&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Frank Dedden&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Royal Netherlands Aerospace Center&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Alwyn Goodloe&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;NASA Langley Research Center&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Ivan Perez&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;NIA / NASA Formal Methods&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のソースコードを生成する、&lt;a href=&#34;https://copilot-language.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;&lt;/a&gt;の紹介です。&lt;br /&gt;
似た謳い文句の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として&lt;a href=&#34;http://hackage.haskell.org/package/ivory&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ivory&lt;/span&gt;&lt;/a&gt;がありますが、&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;は、ハードウェアの実行時検証を行う&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成することに、より特化しています。&lt;br /&gt;
「センサーから信号を受け取って、一定の条件を満たした場合に何らかの処理を実行する」という処理を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で宣言的に記述すると、メモリの消費量・実行時間において常に一定な&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成することが出来ます。&lt;/p&gt;
&lt;p&gt;メモリが限られていて、リアルタイムな処理が必要なハードウェアにとって「邪魔にならない監視」を実現するための必須条件なのでしょう。&lt;br /&gt;
現状&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;GC&lt;/span&gt;が必要であるといった制約もあり、リアルタイムな処理や厳格なメモリー管理が必要な機器での採用は難しいですが、&lt;span class=&#34;ascii&#34;&gt;Ivory&lt;/span&gt;や今回発表された&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;はあくまでも「&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成するだけ」なので、生成する&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではメモリー管理をする必要がありません。&lt;br /&gt;
にっくきスペースリークに悩まされる心配もないのです。&lt;br /&gt;
こういった&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の持つ強い型付けによるメリットを享受しながら、変換した言語の実行時におけるパフォーマンスを出しやすい、といういいとこ取りなメリットがあるので、もっと広まってほしいユースケースですね。&lt;/p&gt;
&lt;h1 id=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#copilotを試してみる&#34; title=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみる&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ℹ️ 実際に使用したコードは&lt;a href=&#34;https://github.com/haskell-jp/blog/tree/master/examples/2019/hiw-copilot&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;のリポジトリー&lt;/a&gt;にあります。&lt;/li&gt;
&lt;li&gt;ℹ️ 使用した&lt;span class=&#34;ascii&#34;&gt;copilot&lt;/span&gt;パッケージのバージョンは、&lt;span class=&#34;ascii&#34;&gt;3.0.1&lt;/span&gt;です。&lt;/li&gt;
&lt;li&gt;ℹ️ サンプルコードの解説については、&lt;span class=&#34;ascii&#34;&gt;notogawa&lt;/span&gt;さんのアドバイスも参考になりました&lt;small&gt;（&lt;a href=&#34;https://haskell.jp/slack-log/html/C4M4TT8JJ/46.html#message-1554858057.072700&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;slack-log&lt;/span&gt;ではこのあたり&lt;/a&gt;。執筆時点で&lt;span class=&#34;ascii&#34;&gt;CSS&lt;/span&gt;が当たってないため読みづらいですが一応）&lt;/small&gt;。ありがとうございます！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;せっかくなんで&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみましょう。&lt;br /&gt;
公式サイトにあったサンプルコードそのまんまですが、生成される&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;のコードを眺めてみます。&lt;/p&gt;
&lt;p&gt;👇のコマンドでサンプルコードが入ったリポジトリーを&lt;span class=&#34;ascii&#34;&gt;git clone&lt;/span&gt;した後、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; clone https://github.com/haskell-jp/blog&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;bu&#34;&gt;cd&lt;/span&gt; blog/examples/2019/hiw-copilot&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👇のコマンドでビルド・&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語によるコードの生成できるはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build copilot&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc heater.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらが生成元の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell:heater.hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language.Copilot&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Copilot.Compile.C99&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((&amp;gt;), (&amp;lt;), div)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;temp ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Word8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;temp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; extern &lt;span class=&#34;st&#34;&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ctemp ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;ctemp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (unsafeCast temp) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;  trigger &lt;span class=&#34;st&#34;&gt;&amp;quot;heaton&amp;quot;&lt;/span&gt;  (ctemp &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.0&lt;/span&gt;) [arg ctemp]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;  trigger &lt;span class=&#34;st&#34;&gt;&amp;quot;heatoff&amp;quot;&lt;/span&gt; (ctemp &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;21.0&lt;/span&gt;) [arg ctemp]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; reify spec &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; compile &lt;span class=&#34;st&#34;&gt;&amp;quot;heater&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まず、&lt;code&gt;temp&lt;/code&gt;と&lt;code&gt;ctemp&lt;/code&gt;という識別子に定義した式が、センサーが発信する、連続的に変化する値を表しています。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;の言葉はこれを&lt;code&gt;Stream&lt;/code&gt;と呼んでいます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;という識別子で定義している式が、「どのセンサーから信号を受け取って、どんな条件を満たした場合にどの処理を実行するか」規定しているようです。&lt;br /&gt;
👆の場合、&lt;code&gt;ctemp&lt;/code&gt;という&lt;code&gt;Stream&lt;/code&gt;が&lt;code&gt;18.0&lt;/code&gt;を下回ったら&lt;code&gt;heaton&lt;/code&gt;というイベントを発火し、&lt;code&gt;21.0&lt;/code&gt;を超えたら&lt;code&gt;heatoff&lt;/code&gt;というイベントを発火する、と定めているわけですね。&lt;br /&gt;
そして&lt;code&gt;main&lt;/code&gt;関数で実行している&lt;code&gt;reify spec &amp;gt;&amp;gt;= compile &#34;heater&#34;&lt;/code&gt;という箇所で、&lt;code&gt;.h&lt;/code&gt;ファイルと&lt;code&gt;.c&lt;/code&gt;ファイルを書き込んでいます。&lt;/p&gt;
&lt;p&gt;そして、生成されたヘッダーファイル&lt;code&gt;heater.h&lt;/code&gt;がこう👇&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode c:heater.h&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;uint8_t&lt;/span&gt; temperature;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; heatoff(&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heatoff_arg0);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; heaton(&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heaton_arg0);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; step(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;);&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で、肝心の&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;のコード本体&lt;code&gt;heater.c&lt;/code&gt;がこちらです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode c:heater.c&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;quot;heater.h&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;uint8_t&lt;/span&gt; temperature_cpy;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; heatoff_guard(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ((((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;)) &amp;gt; (&lt;span class=&#34;fl&#34;&gt;21.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heatoff_arg0(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; (((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; heaton_guard(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ((((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;)) &amp;lt; (&lt;span class=&#34;fl&#34;&gt;18.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heaton_arg0(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; (((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; step(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-26&#34; title=&#34;26&#34;&gt;  (temperature_cpy) = (temperature);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((heatoff_guard)()) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-28&#34; title=&#34;28&#34;&gt;    (heatoff)(((heatoff_arg0)()));&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-29&#34; title=&#34;29&#34;&gt;  };&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((heaton_guard)()) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-31&#34; title=&#34;31&#34;&gt;    (heaton)(((heaton_arg0)()));&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-32&#34; title=&#34;32&#34;&gt;  };&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-33&#34; title=&#34;33&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先ほど&lt;code&gt;Stream&lt;/code&gt;として定義した値のうち、&lt;code&gt;temp&lt;/code&gt;は、&lt;code&gt;temperature&lt;/code&gt;というグローバル変数と、それを一時的に保存する&lt;code&gt;temperature_cpy&lt;/code&gt;という二つの変数に翻訳されました。&lt;br /&gt;
&lt;code&gt;spec&lt;/code&gt;において&lt;code&gt;trigger&lt;/code&gt;という関数で列挙した「どのセンサーから信号を受け取って、どんな条件を満たした場合にどの処理を実行するか」というルールは、&lt;code&gt;step&lt;/code&gt;という関数に現れたようです。&lt;br /&gt;
この関数を利用する側では、&lt;code&gt;heaton&lt;/code&gt;関数と&lt;code&gt;heatoff&lt;/code&gt;関数を別途定義した上で、&lt;code&gt;temperature&lt;/code&gt;にセンサーから受け取った値を代入して&lt;code&gt;step&lt;/code&gt;を呼ぶことによって、&lt;code&gt;temperature&lt;/code&gt;の値が条件に一致したとき、&lt;code&gt;heaton&lt;/code&gt;関数と&lt;code&gt;heatoff&lt;/code&gt;関数を実行してハードウェアの制御ができるのでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;側で定義したもう一つの&lt;code&gt;Stream&lt;/code&gt;、&lt;code&gt;ctemp&lt;/code&gt;は、&lt;code&gt;heaton_guard&lt;/code&gt;、&lt;code&gt;heaton_arg0&lt;/code&gt;、&lt;code&gt;heatoff_guard&lt;/code&gt;、&lt;code&gt;heatoff_arg0&lt;/code&gt;、それぞれの関数に書かれた、&lt;code&gt;temperature_cpy&lt;/code&gt;の値を変換する式に現れているようです。&lt;/p&gt;
&lt;p&gt;正直なところこの程度であれば、直接&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;で書いた方が余計なカッコもないし読みやすそうではあります。&lt;br /&gt;
&lt;code&gt;temp&lt;/code&gt;を&lt;code&gt;ctemp&lt;/code&gt;に変換する式&lt;code&gt;(150.0 / 255.0) - 50.0&lt;/code&gt;が変換後のソースコードでは冗長に適用されていることから、もっと最適化できそうですし。&lt;br /&gt;
とはいえ、わざわざ&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;を作ったからには、より複雑で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でなければ書いてられないようなケースが、&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;の開発者の現場ではあるのでしょう&lt;small&gt;（なんせ&lt;span class=&#34;ascii&#34;&gt;NASA&lt;/span&gt;の方も関わっているぐらいですから！）&lt;/small&gt;。&lt;br /&gt;
詳しいユースケースや、ビルド時のフローといった運用方法を聞きたいところですね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-day-2019.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2019を開催しました！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-symposium.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Symposium 2019 レポート&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-symposium.html</id><title type="text">Haskell Symposium 2019 レポート</title><updated>2019-10-01T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-symposium.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;&lt;a href=&#34;https://icfp19.sigplan.org/home/haskellsymp-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium 2019&lt;/span&gt;&lt;/a&gt;に&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;として参加してきました。&lt;/p&gt;
&lt;p&gt;聴講した発表についての概要をまとめましたので、どの論文を読んでみるか決めるなどの際にご活用ください。内容については私の聞きまちがい・読みまちがいなどあると思いますのでご了承ください。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-symposiumとは&#34; title=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bidirectional-type-class-instances&#34; title=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Bidirectional Type Class Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34; title=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Generic and Flexible Defaults for Verified, Law-Abiding Type-Class Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34; title=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Modular effects in Haskell through effect polymorphism and explicit dictionary applications - A new approach and the&lt;/span&gt; μ&lt;span class=&#34;ascii&#34;&gt;VeriFast verifier as a case study&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verifying-effectful-haskell-programs-in-coq&#34; title=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Verifying Effectful Haskell Programs in Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving-haskell-equality-constraints-using-coq&#34; title=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Solving Haskell equality constraints using Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formal-verification-of-spacecraft-control-programs-an-experience-report&#34; title=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Formal Verification of Spacecraft Control Programs: An Experience Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#g2q-haskell-constraint-solving&#34; title=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q: Haskell Constraint Solving&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-a-faster-curry-with-extensional-types&#34; title=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Making a Faster Curry with Extensional Types&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multi-stage-programs-in-context&#34; title=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Multi-Stage Programs in Context&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-with-source-plugins&#34; title=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Working with Source Plugins&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34; title=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;STCLang: State Thread Composition as a Foundation for Monadic Dataflow Parallelism&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#synthesizing-functional-reactive-programs&#34; title=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Synthesizing Functional Reactive Programs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-essence-of-live-coding-change-the-program-keep-the-state&#34; title=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;The essence of live coding: Change the program, keep the state!&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34; title=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Monad Transformers and Modular Algebraic Effects: What Binds Them Together&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scoping-monadic-relational-database-queries&#34; title=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Scoping Monadic Relational Database Queries&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-symposiumとは&#34; title=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://icfp19.sigplan.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;International Conference on Functional Programming&lt;/span&gt;&lt;/a&gt;（&lt;span class=&#34;ascii&#34;&gt;ICFP&lt;/span&gt;）に合わせて開催される&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する国際会議です。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する研究を発表したり、実践的な経験や将来の言語の開発について議論したり、その他の宣言的プログラミングを促進したりします。&lt;/p&gt;
&lt;h1 id=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#bidirectional-type-class-instances&#34; title=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Bidirectional Type Class Instances&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Koen Pauwels (KU Leuven), Georgios Karachalias (KU Leuven), Michiel Derhaeg (Guardsquare), Tom Schrijvers (KU Leuven)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/8/Bidirectional-Type-Class-Instances&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/8/Bidirectional-Type-Class-Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://arxiv.org/abs/1906.12242&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://arxiv.org/abs/1906.12242&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GADT&lt;/span&gt;と型クラスはそれぞれ便利だが混ぜると問題が起きる場合がある。&lt;/p&gt;
&lt;p&gt;次のような&lt;code&gt;Term&lt;/code&gt;があるとき、その&lt;code&gt;Show&lt;/code&gt;インスタンスを考える。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Con&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Tup&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (b, c)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のように&lt;code&gt;Show&lt;/code&gt;インスタンスを定義すると型エラーになる。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Con&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tup&lt;/span&gt; x y) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x, &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; y, &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Could not deduce (Show b) arising from a use of `show&amp;#39;
from the context (Show a) or from (a ~ (b, c))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは&lt;code&gt;Show (b, c)&lt;/code&gt;ならば&lt;code&gt;Show b&lt;/code&gt;という関係がないために起こる。&lt;/p&gt;
&lt;p&gt;一方タプルについての&lt;code&gt;Show&lt;/code&gt;は、&lt;code&gt;Show a&lt;/code&gt;かつ&lt;code&gt;Show b&lt;/code&gt;ならば&lt;code&gt;Show (a, b)&lt;/code&gt;という関係である。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (a, b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  …&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この「ならば」を両方向にすれば問題は解決できるのではないかというのが、この論文の主張である。&lt;/p&gt;
&lt;h1 id=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34; title=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Generic and Flexible Defaults for Verified, Law-Abiding Type-Class Instances&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Ryan Scott (Indiana University), Ryan R. Newton (Indiana University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/3/Generic-and-Flexible-Defaults-for-Verified-Law-Abiding-Type-Class-Instances&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/3/Generic-and-Flexible-Defaults-for-Verified-Law-Abiding-Type-Class-Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://ryanglscott.github.io/papers/verified-classes.pdf&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://ryanglscott.github.io/papers/verified-classes.pdf&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型クラスの法則は依存型を使えば証明できるが、インスタンスごとに書くのはめんどうなので&lt;code&gt;Generics&lt;/code&gt;で出来るようにしようという話である。&lt;/p&gt;
&lt;h1 id=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34; title=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Modular effects in Haskell through effect polymorphism and explicit dictionary applications - A new approach and the&lt;/span&gt; μ&lt;span class=&#34;ascii&#34;&gt;VeriFast verifier as a case study&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Dominique Devriese (Vrije Universiteit Brussel)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/1/Modular-effects-in-Haskell-through-effect-polymorphism-and-explicit-dictionary-applic&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/1/Modular-effects-in-Haskell-through-effect-polymorphism-and-explicit-dictionary-applic&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;様々な種類の効果が複雑に絡み合うアプリケーションを整理するために、「効果を伴う処理を持った辞書」を明示的に渡す方式の提案である。&lt;/p&gt;
&lt;p&gt;提案した方式によって&lt;span class=&#34;ascii&#34;&gt;VeriFast&lt;/span&gt;を再実装してみることで、実際に発生した問題と解決方法を解説している。&lt;/p&gt;
&lt;h1 id=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#verifying-effectful-haskell-programs-in-coq&#34; title=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Verifying Effectful Haskell Programs in Coq&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Jan Christiansen (Flensburg University of Applied Sciences), Sandra Dylus (University of Kiel), Niels Bunkenburg (University of Kiel)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/4/Verifying-Effectful-Haskell-Programs-in-Coq&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/4/Verifying-Effectful-Haskell-Programs-in-Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342592&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342592&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;による、効果を伴うプログラムの証明に関する話。&lt;/p&gt;
&lt;p&gt;効果について直接証明することはせず、&lt;span class=&#34;ascii&#34;&gt;Free&lt;/span&gt;モナドを用いての証明を試みても、そのまま&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;に翻訳すると停止性チェックによってエラーになってしまう。&lt;/p&gt;
&lt;p&gt;そのために行った工夫に加え、具体例として、&lt;code&gt;trace&lt;/code&gt;や（部分関数による）エラーなど、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;において暗黙に発生する効果を考慮したモデル化について検討した。&lt;/p&gt;
&lt;h1 id=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#solving-haskell-equality-constraints-using-coq&#34; title=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Solving Haskell equality constraints using Coq&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Zubin Duggal&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/15/Solving-Haskell-equality-constraints-using-Coq&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/15/Solving-Haskell-equality-constraints-using-Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;data kinds&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;type families&lt;/span&gt;といった&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張によって厳格なデータ型を定義できるが、それに対する操作を定義すると&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には解けない型レベルの等式が生成されることがある。&lt;/p&gt;
&lt;p&gt;制約カインドの型に対する型クラスとして&lt;code&gt;Proven&lt;/code&gt;を提供し、この制約がある箇所を&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;型検査プラグインが検出して対応する&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;コードのテンプレートを生成する。&lt;/p&gt;
&lt;p&gt;その&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;コードに証明がなければ警告を表示する。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ProofName&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proven&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;prf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ProofName&lt;/span&gt;) (&lt;span class=&#34;ot&#34;&gt;c ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constraint&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;applyProof ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; prf c a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proven&lt;/span&gt; prf c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;applyProof x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;lemma3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; applyProof &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;nonzero_pop&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;NNonZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Popcount&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Refl&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いくつか制約があるが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型を&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;に自動的に変換している。&lt;/p&gt;
&lt;h1 id=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#formal-verification-of-spacecraft-control-programs-an-experience-report&#34; title=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Formal Verification of Spacecraft Control Programs: An Experience Report&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Andrey Mokhov (Newcastle University), Georgy Lukyanov (Newcastle University), Jakob Lechner (RUAG Space Austria GmbH)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/5/Formal-Verification-of-Spacecraft-Control-Programs-An-Experience-Report&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/5/Formal-Verification-of-Spacecraft-Control-Programs-An-Experience-Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342593&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342593&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;REDFIN&lt;/span&gt;という固定小数演算と整数演算のための処理系があるのだが、そのアセンブリーコードに対して形式検証をしたという報告である。&lt;/p&gt;
&lt;h1 id=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#g2q-haskell-constraint-solving&#34; title=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q: Haskell Constraint Solving&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;William T. Hallahan (Yale University), Anton Xue (Yale University), Ruzica Piskac (Yale University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/2/G2Q-Haskell-Constraint-Solving&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/2/G2Q-Haskell-Constraint-Solving&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342590&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342590&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースに&lt;span class=&#34;ascii&#34;&gt;quasi quote&lt;/span&gt;で埋め込む&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;である。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書いた条件式を&lt;span class=&#34;ascii&#34;&gt;symbolic execution&lt;/span&gt;して、&lt;span class=&#34;ascii&#34;&gt;SMT solver&lt;/span&gt;に渡す式に変換して、&lt;span class=&#34;ascii&#34;&gt;SMT solver&lt;/span&gt;に条件を満たす関数を導出させる。&lt;/p&gt;
&lt;h1 id=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#making-a-faster-curry-with-extensional-types&#34; title=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Making a Faster Curry with Extensional Types&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Paul Downen (University of Oregon), Zachary Sullivan, Zena M. Ariola (University of Oregon), Simon Peyton Jones (Microsoft)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/6/Making-a-Faster-Curry-with-Extensional-Types&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/6/Making-a-Faster-Curry-with-Extensional-Types&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://ix.cs.uoregon.edu/~pdownen/publications/eta.pdf&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://ix.cs.uoregon.edu/~pdownen/publications/eta.pdf&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パフォーマンスのためにη変換してほしいところを明示したいことがある。&lt;/p&gt;
&lt;p&gt;例えば、次のような意味論上は等価な関数&lt;code&gt;f1&lt;/code&gt;と&lt;code&gt;f2&lt;/code&gt;があるとする。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;f1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h x x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; \y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e y z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;f2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h x x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; e y z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際は&lt;code&gt;f1&lt;/code&gt;は引数&lt;code&gt;x&lt;/code&gt;を取った後クロージャー生成のためにヒープ確保するのに対して、&lt;code&gt;f2&lt;/code&gt;はアリティが&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;の関数と解釈されて中間のクロージャーが必要なくなる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&amp;gt;&lt;/code&gt;というアリティの情報を持った関数型を新たに導入して&lt;code&gt;-&amp;gt;&lt;/code&gt;の代わりに使えるようにする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TYPE (a :: RuntimeRep (FunRep 2))&lt;/code&gt;というような新たなポリモーフィズムを導入する。ここでの&lt;code&gt;2&lt;/code&gt;がアリティ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Int&lt;/code&gt;に対して&lt;code&gt;Int#&lt;/code&gt;があるように基本的にはパフォーマンスが必要なライブラリーなど内部的に使用する想定。&lt;/p&gt;
&lt;h1 id=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#multi-stage-programs-in-context&#34; title=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Multi-Stage Programs in Context&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Matthew Pickering (University of Bristol), Nicolas Wu (Imperial College London), Csongor Kiss (Imperial College London)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/9/Multi-Stage-Programs-in-Context&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/9/Multi-Stage-Programs-in-Context&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342597&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342597&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次のような準引用があったときに、組み合わせると元々あったはずの情報が欠落する場合がある。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;qshow ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;qshow &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| show |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;qread ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;qread &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| read |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;trim ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;trim &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| $(qshow) . $(qread) |]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;qshow&lt;/code&gt;と&lt;code&gt;qread&lt;/code&gt;にあった&lt;code&gt;Int&lt;/code&gt;という情報が、組み合わせて&lt;code&gt;trim&lt;/code&gt;とすると欠落してコンパイルエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;splice&lt;/span&gt;するときに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ソースコードの構文木ではなく&lt;span class=&#34;ascii&#34;&gt;Core&lt;/span&gt;に対するものを出力すればそれは型が明示されているし問題がない。&lt;/p&gt;
&lt;p&gt;しかも、&lt;span class=&#34;ascii&#34;&gt;splice&lt;/span&gt;後の型検査を省略できるのでコンパイルの高速化にも寄与する。&lt;/p&gt;
&lt;h1 id=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#working-with-source-plugins&#34; title=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Working with Source Plugins&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Matthew Pickering (University of Bristol), Nicolas Wu (Imperial College London), Boldizsár Németh (Eötvös Loránd University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/11/Working-with-Source-Plugins&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/11/Working-with-Source-Plugins&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342599&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342599&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;souce plugins&lt;/span&gt;のしくみや、書き方、実装時のテクニックの紹介である。&lt;/p&gt;
&lt;h1 id=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34; title=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;STCLang: State Thread Composition as a Foundation for Monadic Dataflow Parallelism&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Sebastian Ertel, Justus Adam (Technische Universität Dresden), Norman A. Rink (TU Dresden), Andrés Goens, Jeronimo Castrillon (TU Dresden)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/12/STCLang-State-Thread-Composition-as-a-Foundation-for-Monadic-Dataflow-Parallelism&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/12/STCLang-State-Thread-Composition-as-a-Foundation-for-Monadic-Dataflow-Parallelism&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342600&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342600&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#synthesizing-functional-reactive-programs&#34; title=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Synthesizing Functional Reactive Programs&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Bernd Finkbeiner, Felix Klein (Saarland University), Ruzica Piskac (Yale University, Mark Santolucito (Yale University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/13/Synthesizing-Functional-Reactive-Programs&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/13/Synthesizing-Functional-Reactive-Programs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342601&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342601&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#the-essence-of-live-coding-change-the-program-keep-the-state&#34; title=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;The essence of live coding: Change the program, keep the state!&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Manuel Bärenz (sonnen eServices GmbH)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/14/The-essence-of-live-coding-Change-the-program-keep-the-state-&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/14/The-essence-of-live-coding-Change-the-program-keep-the-state-&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34; title=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Monad Transformers and Modular Algebraic Effects: What Binds Them Together&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Tom Schrijvers (KU Leuven), Maciej Piróg (University of Wroc&lt;/span&gt;ł&lt;span class=&#34;ascii&#34;&gt;aw), Nicolas Wu (Imperial College London), Mauro Jaskelioff (CONICET)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/7/Monad-Transformers-and-Modular-Algebraic-Effects-What-Binds-Them-Together&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/7/Monad-Transformers-and-Modular-Algebraic-Effects-What-Binds-Them-Together&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342595&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342595&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;モナドトランスフォーマーと代数的効果との対比である。&lt;/p&gt;
&lt;p&gt;モナドトランスフォーマーから代数的効果への変換またその逆のときにどういう手法があって、それぞれを構成する要素がどう対応しているかを説明している。&lt;/p&gt;
&lt;p&gt;モナドトランスフォーマーと代数的効果だとモナドトランスフォーマーの方が表現できるものが大きいのでモナドトランスフォーマーから代数的効果へはどんなものでも変換できるわけではない。&lt;/p&gt;
&lt;p&gt;例えば&lt;code&gt;catch&lt;/code&gt;や&lt;code&gt;local&lt;/code&gt;は代数的効果にできない。&lt;/p&gt;
&lt;h1 id=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#scoping-monadic-relational-database-queries&#34; title=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Scoping Monadic Relational Database Queries&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Anton Ekblad (Chalmers University of Technology)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/10/Scoping-Monadic-Relational-Database-Queries&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/10/Scoping-Monadic-Relational-Database-Queries&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342598&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342598&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;モナドは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界隈で非常に普及しているので&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;に対する&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてモナドの構造を採用したい。&lt;/p&gt;
&lt;p&gt;このとき&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;の結合を表現すると、&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;としてはスコープ外にもかかわらず&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてはスコープ内となって使える変数ができてしまう。&lt;/p&gt;
&lt;p&gt;これを&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてもエラーとしたい。&lt;/p&gt;
&lt;p&gt;例えば、次のような例で実行時エラーとなってしまう。ここで&lt;code&gt;a0&lt;/code&gt;は&lt;code&gt;tableA&lt;/code&gt;の列とする。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;SELECT&lt;/span&gt; a0, b0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  tableA&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;LEFT&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;JOIN&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;      (&lt;span class=&#34;kw&#34;&gt;SELECT&lt;/span&gt; b0 &lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; tableB &lt;span class=&#34;kw&#34;&gt;WHERE&lt;/span&gt; a0 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b1)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;ON&lt;/span&gt; tableA.a2 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; tableb.b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;SELECT b0 FROM tableB WHERE a0 == b1&lt;/code&gt;の部分でスコープ外の&lt;code&gt;a0&lt;/code&gt;を参照しているためエラーとなる。&lt;/p&gt;
&lt;p&gt;単純なモナド&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;だと次のようになりコンパイルが通る。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;  a0 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; a2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; from table0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;  leftJoin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;    b0 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; b1 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; b2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; from table1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;    ristrict &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; a0 &lt;span class=&#34;op&#34;&gt;.==&lt;/span&gt; b1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;  on &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;.==&lt;/span&gt; b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ristrict $ a0 .== b1&lt;/code&gt;の部分において&lt;code&gt;a0&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;としてはスコープ内にある。&lt;/p&gt;
&lt;p&gt;この問題を次のような型レベル関数を駆使することで&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;においてもコンパイル時エラーとすることができた。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cols&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Outer&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UnAggr&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromRow&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-copilot.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Copilotという内部DSLについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Gibbonコンパイラーについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-gibbon.html</id><title type="text">HIW 2019で発表された、Gibbonコンパイラーについて</title><updated>2019-09-28T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-gibbon.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-ghc-future.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表を紹介します。&lt;br /&gt;
今回は、&lt;a href=&#34;http://iu-parfunc.github.io/gibbon/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;以外の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;small&gt;（の、サブセット）&lt;/small&gt;の処理系についての発表です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34; title=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;The Gibbon Compiler: Accelerating a small subset of Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34; title=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;The Gibbon Compiler: Accelerating a small subset of Haskell&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Ryan R. Newton&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Michael Vollmer&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University, USA&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Chaitanya Koparkar&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;は最適化の手法を研究するために作られたコンパイラーです。&lt;br /&gt;
具体的には、我々&lt;small&gt;（特に&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;）&lt;/small&gt;がよく使う、木構造全体に対する処理の最適化です。&lt;/p&gt;
&lt;p&gt;こうした木構造のデータは、通常ポインターを使ってメモリー内にバラバラに格納されますが、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;による最適化を行うと、実際にプログラムがどのような順番で木を処理しているのか解析して、（元のデータ構造を配列に変換した上で）その順番に並べられた配列として処理するコードに変換する、という大胆な変換を行います。 図にするとこんなイメージでしょうか？&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array1.svg&#34; alt=&#34;変換前の木構造。各ノードがそれぞれ（レベル順で）A, B, … , Gという値を持っている&#34; /&gt;&lt;figcaption&gt;変換前の木構造。各ノードがそれぞれ（レベル順で）&lt;span class=&#34;ascii&#34;&gt;A, B,&lt;/span&gt; … &lt;span class=&#34;ascii&#34;&gt;, G&lt;/span&gt;という値を持っている&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆のような木構造があったとして、&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array2.svg&#34; alt=&#34;行きがけ順（A, B, D, E, C, F, Gの順）でアクセスする&#34; /&gt;&lt;figcaption&gt;行きがけ順（&lt;span class=&#34;ascii&#34;&gt;A, B, D, E, C, F, G&lt;/span&gt;の順）でアクセスする&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆における、赤い線の順番&lt;small&gt;（行きがけ順）&lt;/small&gt;にアクセスする関数があったとします。&lt;br /&gt;
適当に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の再帰関数として書くと、👇こういうコードです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tree ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;tree &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;      ( &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;      )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;      ( &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;      )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;preOrder ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;preOrder access (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; char mLeft mRight) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  access char&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mLeft &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; left &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; preOrder access left&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mRight &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; right &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; preOrder access right&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;はこの関数と、それが処理する木構造を解析して、&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array3.svg&#34; alt=&#34;変換された配列。A, B, D, E, C, F, Gの順に要素が並んだただの配列&#34; /&gt;&lt;figcaption&gt;変換された配列。&lt;span class=&#34;ascii&#34;&gt;A, B, D, E, C, F, G&lt;/span&gt;の順に要素が並んだただの配列&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆のような、ただの配列（とそれに対する関数）にまとめて変換してしまう、というのです！&lt;/p&gt;
&lt;p&gt;現代のコンピューターは、このような配列の要素にまとめてアクセス処理する方が、ポインターをたどって各要素を処理するより、たいてい遙かに速いです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;はこの特性を活かすべく、我々&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;が好んで使うような、ポインターだらけの木構造を可能な限り配列に変換することで、要素をまとめて処理する（&lt;span class=&#34;ascii&#34;&gt;traverse&lt;/span&gt;する）演算の最適化を図るコンパイラーです。&lt;/p&gt;
&lt;p&gt;ちなみに、元の木に対するノードの追加に相当する処理は、新しいノードに対するポインターを書き込む処理に変換するそうです。&lt;br /&gt;
なので何度も追加を繰り返すと、あまり恩恵が受けられなくなってしまいそうです。&lt;/p&gt;
&lt;p&gt;なかなか興味深いアイディアですが、個人的に聞きそびれた疑問が&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つあります。&lt;br /&gt;
一つは、そもそも木構造を定義するような状況というのは、いろいろな順番でアクセスしたいし、新しい要素の追加も繰り返し行いたいケースではないでしょうか？&lt;br /&gt;
例えば&lt;a href=&#34;http://hackage.haskell.org/package/unordered-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;&lt;/a&gt;にある&lt;code&gt;HashMap&lt;/code&gt;型は探索木を使った頻繁に使われるデータ構造ですが、&lt;code&gt;HashMap&lt;/code&gt;を使う場合に行う処理の多くは、ランダムアクセスや要素の追加・削除でしょう。&lt;/p&gt;
&lt;p&gt;なので、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;が最適化したい「木構造」というのは、どちらかというと探索木のような木ではなく、構文木のような、要素をまとめて処理することを前提とした木のことなのかもしれません。&lt;br /&gt;
確かに人間が書く言語の構文木程度であれば、すべてメモリー上で処理できる程度のサイズに収まる&lt;small&gt;（という想定でなければコンパイラー作りがものすごく難しくなる）&lt;/small&gt;でしょうし、構文木の処理を高速化できれば、遅い遅いと言われる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のコンパイル速度も高められるはずです。それはそれでありがたい。&lt;/p&gt;
&lt;p&gt;もう一つは、これまた例えば&lt;code&gt;HashMap&lt;/code&gt;型のような木をベースにした連想配列も、配列ベースのハッシュテーブルに変換することができるのでしょうか？&lt;br /&gt;
もしそうだとすると、ランダムアクセスに対する計算量のオーダーも&lt;span class=&#34;ascii&#34;&gt;O(log n)&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;O(1)&lt;/span&gt;に変わるわけですし、要素をまとめて処理する以外の演算についても劇的な改善が見込めるかもしれません。&lt;br /&gt;
もちろんこれも先ほどの推測が正しければ無意味な想像ですが、夢のある話ですね。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;は将来的には、&lt;code&gt;Packed&lt;/code&gt;という型クラスを提供することで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;本体への統合も視野に入れているそうです。&lt;br /&gt;
&lt;code&gt;Packed&lt;/code&gt;を実装した型は、値をどのように配列に変換するのか定義することで、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;による最適化のためのヒントを与えることができます。&lt;/p&gt;
&lt;p&gt;参考&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://ja.wikipedia.org/w/index.php?title=%E6%9C%A8%E6%A7%8B%E9%80%A0_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)&amp;amp;oldid=72655479&#34;&gt;木構造 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;データ構造&lt;span class=&#34;ascii&#34;&gt;) - Wikipedia&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-symposium.html&#34; lang=&#34;ja&#34;&gt;Haskell Symposium 2019 レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-ghc-future.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.10に導入されるであろう機能&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-20T21:45:08+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>https://blog.miz-ar.info/2019/09/techbookfest7-announce/</id><title type="text">技術書典7に、Haskellで競技プログラミングをやる本を出します</title><updated>2019-09-19T13:55:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/09/techbookfest7-announce/"/><summary type="html">今週末の9月22日（日）に池袋で開催される技術書典7に、新刊「Haskellで戦う競技プログラミング」を出します。既刊「LaTeX処理自動化ツールClutTeX 使い方とその仕組み」も改訂して紙の本を頒布します。 技術書 [&amp;#8230;]</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-ghc-future.html</id><title type="text">HIW 2019で発表された、GHC 8.10に導入されるであろう機能</title><updated>2019-09-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-ghc-future.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-ghc8.8.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表をいくつか紹介します。&lt;br /&gt;
今回は、「&lt;span class=&#34;ascii&#34;&gt;GHC 8.10&lt;/span&gt;に導入されるであろう機能」です。&lt;br /&gt;
いずれも該当する&lt;span class=&#34;ascii&#34;&gt;Merge Request&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチにマージ済みなので、おそらく&lt;span class=&#34;ascii&#34;&gt;GHC 8.10&lt;/span&gt;で提供されるでしょう。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#holefitplugins-and-the-future-of-interactive-development-in-ghc&#34; title=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins and the future of interactive development in GHC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visible-dependent-quantification&#34; title=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#holefitplugins-and-the-future-of-interactive-development-in-ghc&#34; title=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins and the future of interactive development in GHC&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Matthías Páll Gissurarson&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Chalmers University of Technology, Sweden&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;Merge Request:&lt;/span&gt; &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/153&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;!153&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;GHC Proposal:&lt;/span&gt; なし&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://icfp18.sigplan.org/details/haskellsymp-2018-papers/10/Suggesting-Valid-Hole-Fits-for-Typed-Holes-Experience-Report-&#34;&gt;昨年の&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;でも発表&lt;/a&gt;されて&lt;span class=&#34;ascii&#34;&gt;GHC 8.6&lt;/span&gt;で導入された、「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能のさらなる拡張について。&lt;/p&gt;
&lt;p&gt;まず、「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能について軽く紹介します&lt;small&gt;（詳しくは&lt;a href=&#34;https://wataru86.github.io/slides/vhs/&#34;&gt;こちらのスライド&lt;/a&gt;が参考になるかと思います）&lt;/small&gt;。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」はアンダースコア &lt;code&gt;_&lt;/code&gt;で始まる識別子を書いたとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が推論した型にマッチする関数をエラーメッセージに付記することで、ユーザーがどんな式を書けばよいか、ヒントを与えてくれるものです。&lt;/p&gt;
&lt;p&gt;例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; _someFunc) [&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のように、アンダースコア &lt;code&gt;_&lt;/code&gt;で始まる識別子を書いたとき、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Valid&lt;/span&gt; hole fits include&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        enumFrom ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;enumFrom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Enum&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        show ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Show&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        repeat ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.List&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        return ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;m ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;) a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;[] &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        pure ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;) a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;[] &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        mempty ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a0])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった具合に、アンダースコアで始まる識別子&lt;code&gt;_someFunc&lt;/code&gt;の型を&lt;code&gt;Bool -&amp;gt; [a0]&lt;/code&gt;と推論した上で&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;、実際にその型に該当する関数を、当該のスコープにおいてアクセスできる関数の中から探して教えてくれる、それが「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能です。&lt;/p&gt;
&lt;p&gt;今回発表された「&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins&lt;/span&gt;」という機能は、名前のとおりこの「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」に対するプラグイン機構です。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」が表示する「型にマッチした関数」を探す処理を、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードで書き換えられるようにしてくれます！&lt;/p&gt;
&lt;p&gt;「そこまでする必要あるの？」という気もしてきますが、発表者曰く&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Hoogle&lt;/span&gt;をはじめ、&lt;span class=&#34;ascii&#34;&gt;TensorFlow&lt;/span&gt;など&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の外部にあるものを利用して「型にマッチした関数」を探せるようにするために必要&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;とこの機構を組み合わせることで、もっとインタラクティブな開発を促進したい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という意図があるそうです。&lt;/p&gt;
&lt;p&gt;最新安定版の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では利用できませんが、&lt;a href=&#34;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/extending_ghc.html#hole-fit-plugins&#34;&gt;ドキュメントがこちら&lt;/a&gt;にあるので、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチで開発中のバージョン）&lt;/small&gt;をコンパイルすれば使用できるようです。&lt;/p&gt;
&lt;p&gt;加えて発表では、&lt;code&gt;_&lt;/code&gt;で始まる識別子を書く際の構文を拡張することで、どのように&lt;span class=&#34;ascii&#34;&gt;candidate&lt;/span&gt;を探すか指定できるようにする、なんて機能も紹介されました&lt;small&gt;（ドキュメントを読む限りこの機能はまだ&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;に入ってない？）&lt;/small&gt;。&lt;br /&gt;
例えば、&lt;span class=&#34;ascii&#34;&gt;Hoogle&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;を探したいとき、次のように書くことで検索対象を&lt;code&gt;Control.Applicative&lt;/code&gt;に限定する、といったことをできるようしてくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [[a]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; _{hoogleLookup &lt;span class=&#34;st&#34;&gt;&amp;quot;+Control.Applicative&amp;quot;&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;の検索方法をその場で微調整したい、というときに使うものですね。&lt;/p&gt;
&lt;h2 id=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#visible-dependent-quantification&#34; title=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Ryan Scott&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University at Bloomington, USA&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;Merge Request:&lt;/span&gt; &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/378&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;!378&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;GHC Proposal:&lt;/span&gt; &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0081-forall-arrow.rst&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;0081-forall-arrow&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タイトルのとおり、「&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;」という機能の紹介です。&lt;/p&gt;
&lt;p&gt;最近のバージョンの&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;における&lt;code&gt;:kind&lt;/code&gt;コマンドは、次のような、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がサポートしていない構文の型注釈を出力することがあります。&lt;br /&gt;
例えば&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XKindSignatures&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XPolyKinds&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt; k (&lt;span class=&#34;ot&#34;&gt;a ::&lt;/span&gt; k)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind &lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;における、&lt;code&gt;SomeType :: forall k -&amp;gt; k -&amp;gt; *&lt;/code&gt;の&lt;code&gt;forall k -&amp;gt;&lt;/code&gt;という部分です。&lt;br /&gt;
現在の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;code&gt;forall k&lt;/code&gt;などと書くときは、必ず&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; k&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった具合に、ピリオドで区切った構文になります。&lt;br /&gt;
ところが先ほどの&lt;code&gt;:kind&lt;/code&gt;の出力では、&lt;code&gt;forall k -&amp;gt;&lt;/code&gt;とあるとおり、&lt;code&gt;forall k&lt;/code&gt;に&lt;small&gt;（型ではなく、カインドとしての）&lt;/small&gt;関数を表す&lt;code&gt;-&amp;gt;&lt;/code&gt;が使われています。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;」はまさにこれを、&lt;code&gt;:kind&lt;/code&gt;コマンドによって出力される構文だけではなく、ユーザーが直接書ける構文にしよう、というものです。 &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に「依存型」という機能を加える「&lt;span class=&#34;ascii&#34;&gt;Dependent Haskell&lt;/span&gt;」にも必要な機能だそうです。&lt;br /&gt;
私自身はこの機能を使う機会がちょっと思い浮かばなかったので省略しますが、より詳しい解説は発表者である&lt;a href=&#34;https://ryanglscott.github.io/2019/03/15/visible-dependent-quantification-in-haskell/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Ryan&lt;/span&gt;自身による記事（英語）&lt;/a&gt;をご覧ください。何が「&lt;span class=&#34;ascii&#34;&gt;Visible&lt;/span&gt;」でどう「&lt;span class=&#34;ascii&#34;&gt;Dependent&lt;/span&gt;」なのかわかるはずです。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;復習&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; この、「アンダースコアで始まる識別子&lt;code&gt;_someFunc&lt;/code&gt;の型を&lt;code&gt;Bool -&amp;gt; [a0]&lt;/code&gt;と推論した上で」エラーメッセージにおいて&lt;code&gt;Found hole: _someFunc :: Bool -&amp;gt; [a0]&lt;/code&gt;と教えてくれるのが「&lt;span class=&#34;ascii&#34;&gt;Type Hole&lt;/span&gt;」という機能なのでした。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Gibbonコンパイラーについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-ghc8.8.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.8で導入された機能&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2019-08-22T13:32:52.909+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 &#34;Village and Pillage&#34;は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2019-07-30T11:26:34+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました。 当日の Twitter でも…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/</id><title type="text">Haskellでの浮動小数点数の方向付き丸めを考える</title><updated>2019-06-30T13:43:59Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/"/><summary type="html">「週刊 代数的実数を作る」の #5 で、区間演算と方向付き丸めの話を書いた。浮動小数点数の計算は不正確だと思われがちだが、方向付き丸め等をうまく使えばある種の「正しい結果」（この数は確実に1.0より大きい、等）を得ること [&amp;#8230;]</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://blog.miz-ar.info/2019/05/atcoder-with-haskell/</id><title type="text">HaskellでAtCoderに参戦して水色になった</title><updated>2019-05-27T12:17:37Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/05/atcoder-with-haskell/"/><summary type="html">3月下旬からAtCoderのRatedコンテストに参加しています（AtCoderプロフィール）。この度、5月26日のABC128でようやく水色になりました（AtCoder社長の記事によると、これは上位15%に相当するらし [&amp;#8230;]</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/monoid-for-haskellers/</id><title type="text">Haskellerのためのモノイド完全ガイド</title><updated>2019-02-12T07:02:03Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/"/><summary type="html">Haskellにおけるモノイドについて解説記事を書いてみた。他の言語でも通用する話があるかもしれないし、ないかもしれない。 モノイドとは モノイドとは、ざっくり言うと「くっつける」演算ができる対象のことである。例えば、文 [&amp;#8230;]</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/typical-dp-contest-t/</id><title type="text">フィボナッチ数絡みの競プロの問題を解いてみた（Typical DP Contest T）</title><updated>2019-02-03T13:17:32Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/typical-dp-contest-t/"/><summary type="html">この間、フィボナッチ数を計算する記事を書いていたら、@fetburner氏にこういう問題を教えて頂いた： T: フィボナッチ &amp;#8211; Typical DP Contest &amp;#124; AtCoder フィボナッチ数列の各 [&amp;#8230;]</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>https://blog.miz-ar.info/2019/01/fast-fibonacci/</id><title type="text">最速のフィボナッチ数計算を考える</title><updated>2019-01-20T15:17:01Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/01/fast-fibonacci/"/><summary type="html">Qiitaにこういう記事を書いた： Haskellでフィボナッチ数列 〜Haskellで非実用的なコードを書いて悦に入るのはやめろ〜 ↑の記事ではメモ化しない計算法が遅いこと、Haskellには遅延評価の罠があって正格に [&amp;#8230;]</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://blog.miz-ar.info/2018/12/applicative-functor/</id><title type="text">アプリカティブ関手ってなに？モノイド圏との関係は？調べてみました！</title><updated>2018-12-07T12:56:09Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2018/12/applicative-functor/"/><summary type="html">この記事は Category Theory Advent Calendar 2018 7日目 かつ Haskell (その2) Advent Calendar 2018 7日目の記事です。 Category Theory [&amp;#8230;]</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>https://blog.miz-ar.info/2018/01/debugging-haskell-program/</id><title type="text">Haskell でのデバッグ手法あれこれ</title><updated>2018-01-24T14:45:14Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2018/01/debugging-haskell-program/"/><summary type="html">プログラムにバグはつきものです。強力な型システムを備えている Haskell でもそれは同じです。この記事では、 Haskell プログラムのデバッグ手法をいくつか挙げてみます。 なお、使用している GHC は 8.2. [&amp;#8230;]</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>https://blog.miz-ar.info/2017/06/haskell-cgi/</id><title type="text">Haskell で CGI を書く：Network.CGI（cgiパッケージ）</title><updated>2017-06-15T14:59:04Z</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2017/06/haskell-cgi/"/><summary type="html">Haskell で CGI を書いてみよう。 CGI の基本 CGI とは Common Gateway Interface の略で、動的な Web ページをプログラムで実装するための枠組みである。HTTP ヘッダや内容 [&amp;#8230;]</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
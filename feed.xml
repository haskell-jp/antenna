<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2021-10-22T18:51:30+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/electronics_diy721/items/05777f2a575e5c303263</id><title type="text">MacBookにliquidhaskellをインストール</title><updated>2021-10-22T18:51:30+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/electronics_diy721/items/05777f2a575e5c303263"/></entry><entry><id>https://qiita.com/hiroyuki-nagata/items/150cf3a1ad5ef25732b9</id><title type="text">Emacsでhasktagsを使って関数へジャンプ</title><updated>2021-10-16T23:59:20+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/hiroyuki-nagata/items/150cf3a1ad5ef25732b9"/></entry><entry><id>https://qiita.com/nekonibox/items/fd57bc9ad861642efbd6</id><title type="text">形式検証の視点から再確認したいMaybe型/Option型からnull許容データベースへのデータ変換</title><updated>2021-10-16T07:57:38+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/nekonibox/items/fd57bc9ad861642efbd6"/></entry><entry><id>https://qiita.com/satosystems/items/de978c3758a1e6dc7642</id><title type="text">Haskell import いろいろ</title><updated>2021-10-15T17:13:49+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/satosystems/items/de978c3758a1e6dc7642"/></entry><entry><id>https://qiita.com/yyukawa/items/2c77ad8a6dacff637069</id><title type="text">Haskellを学ばないのは遠回りをしているような気がしてきた</title><updated>2021-10-13T00:56:57+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yyukawa/items/2c77ad8a6dacff637069"/></entry><entry><id>https://qiita.com/merliborn/items/63467fab96c44ed03443</id><title type="text">[haskell] stackとHaskell Language Server双方のご機嫌を取り続けた記録</title><updated>2021-10-08T10:57:31+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/merliborn/items/63467fab96c44ed03443"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2021-10-07T12:10:14+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>https://zenn.dev/hiki_neet_p/articles/tana-gh_fpsample</id><title type="text">再利用性を高めるコーディング方法メモ【C#, Haskell, Scalaを比較】</title><updated>2021-10-05T12:47:44+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/hiki_neet_p/articles/tana-gh_fpsample"/><summary type="html">
 はじめに
本記事では、再利用性に焦点を絞ってコーディング方法を考察します。
以下の3つの言語で簡単なプログラムを作成し、比較します。

C#
Haskell
Scala


 本記事が対象とするアプリの仕様

HTTPサーバーから以下の形式のJSONを取得する。


      
        
        {
  &#34;name&#34;: &#34;John Smith&#34;,
  &#34;age&#34;: 20
}


      
      
取得したデータを標準出力に書き出す。


      
        
        name=John Smith
age=20


      
    ...</summary></entry><entry><id>https://qiita.com/s2hap/items/620082b82a4bbe475823</id><title type="text">【TidalCycles】ライブコーディングによる作曲のすすめ</title><updated>2021-10-01T14:47:56+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/620082b82a4bbe475823"/></entry><entry><id>https://qiita.com/s2hap/items/5fdc270e45427031fd65</id><title type="text">【TidalCycles】ピンポンディレイの実装</title><updated>2021-10-01T14:44:46+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/5fdc270e45427031fd65"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2021/09/30/213008</id><title type="text">VPC Reachability Analyzer と形式手法</title><updated>2021-09-30T21:30:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2021/09/30/213008"/><summary type="html">こんにちは、チェシャ猫です。 先日開催された AWS Dev Day Online Japan 2021 で、AWS の VPC Reachability Analyzer とそのバックエンドである Tiros について発表してきました。公募 CFP 枠です。 講演概要 このプレゼンの大きな目標は、VPC Reachability Analyzer のバックエンドである検査エンジン Tiros の論文 [Bac19] を解説することです。そのための道筋として、Section 1 で VPC Reachability Analyzer の機能を簡単に紹介した後、Section 2 でその要素技術…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-09-30-rules_elm-elm_test.html</id><title type="text">rules_elm に elm-test するルールを追加する</title><updated>2021-09-30T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-09-30-rules_elm-elm_test.html"/></entry><entry><id>https://qiita.com/s2hap/items/10c32ff7cac1ed8a636d</id><title type="text">【TidalCycles】自作関数を別ファイルから呼び出す</title><updated>2021-09-22T22:24:19+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/10c32ff7cac1ed8a636d"/></entry><entry><id>https://qiita.com/wataru86/items/00e923593786219814f3</id><title type="text">Haskell の GraphQL ライブラリ Morpheus を使ってみた</title><updated>2021-09-15T11:01:44+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/wataru86/items/00e923593786219814f3"/></entry><entry><id>https://qiita.com/yu_fujita/items/37b3b598a6b4d1e895c1</id><title type="text">Haskellを使ってHello World（Mac向け）</title><updated>2021-09-06T10:21:48+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yu_fujita/items/37b3b598a6b4d1e895c1"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2021/09/04/055934</id><title type="text">CI/CD Conference 2021 で Zelkova の論文について話してきました</title><updated>2021-09-04T05:59:34+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2021/09/04/055934"/><summary type="html">こんにちは、チェシャ猫です。 先日開催された CI/CD Conference 2021 で、AWS の IAM Access Anazlyer のバックエンドとして使用されている検査エンジン Zelkova、およびその元となった論文について発表してきました。公募 CFP 枠です。 発表の大筋は、少し前に July Tech Festa 2021 で登壇した際のものと共通です。関連リンク集などは以下の記事にまとめてあるので、よかったらこちらも合わせてお読みください。 ccvanishing.hateblo.jp 内容面では、前回の発表時間 20 分に対して今回は 40 分の枠をもらっていたので…</summary></entry><entry><id>https://zenn.dev/lotz/articles/b0188c41d56786290897</id><title type="text">Levelsモナドを使った幅優先探索の仕組み</title><updated>2021-09-03T04:53:28+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/lotz/articles/b0188c41d56786290897"/><summary type="html">Haskellは関数型プログラミング言語と呼ばれますが、関数だけでなく型も重要な役割を担っています。アルゴリズムを考える時、手続きの最適化だけでなく、正しいデータ型を選択することがシンプルなアルゴリズムを導き、実装をコンパクトにできるというのはよくある話です。今回は非常に単純な型でありながら幅優先探索というアルゴリズムのエッセンスを詰め込んだ Levelsというデータ型 について紹介したいと思います。

 ピタゴラス数を列挙する
ピタゴラス数とはピタゴラスの定理における関係式

a^2 + b^2 = c^2

を満たす自然数の三つ組です。
Haskellのリストは遅延評価なので

全て...</summary></entry><entry><id>https://blog.miz-ar.info/2021/08/working-with-ghc-on-aarch64/</id><title type="text">GHCいじくり日誌・AArch64編</title><updated>2021-08-29T05:26:21+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2021/08/working-with-ghc-on-aarch64/"/><summary type="html">ここ数日またGHCをいじっている。少し前にAArch64 NCGがマージされたのでその確認という意味が大きい。 前回の記事（3月）：GHCに初めてコントリビュートした／最近のGHC動向 同ジャンルの記事（2020年10月 [&amp;#8230;]</summary></entry><entry><id>https://qiita.com/hiroyuki-nagata/items/70609cb0974388dd332e</id><title type="text">BNFCチュートリアル</title><updated>2021-08-23T22:54:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/hiroyuki-nagata/items/70609cb0974388dd332e"/></entry><entry><id>https://qiita.com/s2hap/items/a77c0a1feaab1696e18c</id><title type="text">【TidalCycles】指定したサイクル数のときのみの処理を実行</title><updated>2021-08-22T01:35:38+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/a77c0a1feaab1696e18c"/></entry><entry><id>https://qiita.com/s2hap/items/ad23595151d069f5b463</id><title type="text">【TidalCycles】when関数の使い方</title><updated>2021-08-21T23:58:36+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/ad23595151d069f5b463"/></entry><entry><id>https://qiita.com/mod_poppo/items/894e3b43febb3a909eed</id><title type="text">Apple Silicon MacにGHC/cabalを入れるメモ</title><updated>2021-08-21T13:47:51+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/894e3b43febb3a909eed"/></entry><entry><id>https://qiita.com/nekonibox/items/297c1d2d44b273be2571</id><title type="text">Haskell Persistentで直和型を含むデータをそのままデータベースに保存する</title><updated>2021-08-19T08:10:01+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/nekonibox/items/297c1d2d44b273be2571"/></entry><entry><id>https://matsubara0507.github.io/posts/2021-08-19-haskell-use-generated-file-by-bazel.html</id><title type="text">Bazel で生成したファイルを Haskell から参照する</title><updated>2021-08-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-08-19-haskell-use-generated-file-by-bazel.html"/></entry><entry><id>https://qiita.com/s2hap/items/e83780c35881eadad84a</id><title type="text">【TidalCycles】オリジナルエフェクトの追加方法</title><updated>2021-08-17T23:59:24+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/s2hap/items/e83780c35881eadad84a"/></entry><entry><id>https://qiita.com/i05tream/items/6201e0f33588edc062d2</id><title type="text">『Haskell 教養としての関数型プログラミング』 5-13 やってみよう でコンパイルエラーを起こしてしまった</title><updated>2021-08-10T21:42:31+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/i05tream/items/6201e0f33588edc062d2"/></entry><entry><id>https://matsubara0507.github.io/posts/2021-07-31-rules_elm-elm_dependencies.html</id><title type="text">rules_elm で依存パッケージのインストールをキャッシュする</title><updated>2021-07-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-07-31-rules_elm-elm_dependencies.html"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2021/07/18/211619</id><title type="text">July Tech Festa 2021 で IAM Access Analyzer と Zelkova について話してきました</title><updated>2021-07-30T17:18:27+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2021/07/18/211619"/><summary type="html">こんにちは、チェシャ猫です。 先日開催された July Tech Festa 2021 で、AWS のアクセス制御検査ツール Zelkova について発表してきました。公募 CFP 枠です。 techfesta.connpass.com 講演概要 www.youtube.com 一般に、AWS 上のリソース設定を変更したときに何が起こるのかを事前に検査するのは難しい作業です。特に、複数の設定がマージされた結果として最終的なアクセス許可が決まるような場合、単独の項目をルールベースでチェックするだけでは限界があります。 今回の発表中では、インフラに対する検査の水準を以下の 3 つのレベルに分けて定…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-07-30-rules_haskell-with-setup_deps.html</id><title type="text">Bazel で Haskell の Custom Setup をする</title><updated>2021-07-30T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-07-30-rules_haskell-with-setup_deps.html"/></entry><entry><id>https://qiita.com/nakaakist/items/3974d518a0303f0f1fd8</id><title type="text">HaskellのHSpecで複数ファイルのテストを同時に走らせる</title><updated>2021-07-23T15:29:45+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/nakaakist/items/3974d518a0303f0f1fd8"/></entry><entry><id>https://zenn.dev/nakaakist/articles/6deeb888da2224</id><title type="text">HaskellのHSpecで複数ファイルのテストを同時に走らせる</title><updated>2021-07-23T06:26:08+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/nakaakist/articles/6deeb888da2224"/><summary type="html">
 概要
Haskellのstackのプロジェクトで、HSpecでテストを書く時、複数テストファイルを同時に走らせたかったら、Automatic spec discoveryを使う。senseiを使うとなお便利。

 背景
stackを使ってwebアプリっぽいものを作る過程で、複数のHSpecテストファイルができたのだが、それらをまとめて走らせる良い方法がわからず詰まったのでメモする。

 環境

MacOS Big Sur 11.4
MacBook Air M1
stack 2.7.1


 やり方

 I. HSpecのAutomatic spec discoveryを使って、複数フ...</summary></entry><entry><id>https://qiita.com/tim-semba/items/05ae005755625dcad336</id><title type="text">タプルはモナド</title><updated>2021-07-09T20:22:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tim-semba/items/05ae005755625dcad336"/></entry><entry><id>https://zenn.dev/tak_uchida/articles/4a2ba32ec485ae</id><title type="text">Haskellの畳込関数に関して</title><updated>2021-06-27T07:32:20+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tak_uchida/articles/4a2ba32ec485ae"/><summary type="html">Haskellを学んでいるとよく出てくる畳込関数についてまとめたいと思います。
畳込関数に関して参考の「プログラミングHaskell 第2版」には下記の記述があります。

引数にリストを取る関数の多くは、リストに対する再帰を使って、以下のような簡単な様式で定義できます。


      
        
        f [] = v
f (x:xs) = x # f xs


      
      これは下記のことを表しています。

引数のリストが空のときは値vを返す
引数のリストが空ではない場合は[先頭の要素]と[残りの要素に対して再帰的に呼び出した結果]に対して演算子#を適...</summary></entry><entry><id>https://haskell.jp/blog/posts/2021/haskell-day-2021.html</id><title type="text">Haskell Day 2021を開催します</title><updated>2021-06-14T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2021/haskell-day-2021.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;&lt;a href=&#34;https://haskell.jp/haskell-day-2021/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2021&lt;/span&gt;&lt;/a&gt;を開催します！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell.jp/haskell-day-2021/&#34;&gt;&lt;img src=&#34;../../img/2021/haskell-day-2021/ogp.png&#34; alt=&#34;Haskell Day 2021&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;この記事では&lt;a href=&#34;https://haskell.jp/haskell-day-2021/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2021&lt;/span&gt;&lt;/a&gt;の紹介と開催の経緯などを記載します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#経緯&#34; title=&#34;経緯&#34;&gt;経緯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#発表者募集&#34; title=&#34;発表者募集&#34;&gt;発表者募集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参加登録&#34; title=&#34;参加登録&#34;&gt;参加登録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;経緯&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#経緯&#34; title=&#34;経緯&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;経緯&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt;は日本語で開催される&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関するイベントとしては最多の参加者を誇るイベントです。これまで&lt;span class=&#34;ascii&#34;&gt;2012&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;と開催してきました。新型コロナウイルスの影響により、残念ながら&lt;span class=&#34;ascii&#34;&gt;2020&lt;/span&gt;は開催しませんでしたが、&lt;span class=&#34;ascii&#34;&gt;2021&lt;/span&gt;は&lt;em&gt;オンライン&lt;/em&gt;イベントとして開催します。&lt;/p&gt;
&lt;p&gt;このようなオンラインイベントの開催は未経験だったため、さまざまなイベント形式を検討した結果、今回は事前録画動画の予約公開という形式を採用しました。生放送ももちろん検討しましたが、ノウハウ不足の中で一発勝負という生放送はリスクが大きいという判断をしました。録画公開における臨場感の不足をおぎなうことを期待し、&lt;span class=&#34;ascii&#34;&gt;YouTube&lt;/span&gt;の&lt;a href=&#34;https://creatoracademy.youtube.com/page/course/hype-with-premieres&#34;&gt;プレミア公開&lt;/a&gt;を使用しリアルタイムチャットによる発表者と視聴者・視聴者同士の交流をできるように予定しています。&lt;/p&gt;
&lt;h1 id=&#34;発表者募集&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#発表者募集&#34; title=&#34;発表者募集&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;発表者募集&lt;/h1&gt;
&lt;p&gt;現在&lt;a href=&#34;https://haskell.jp/haskell-day-2021/#call-for-papers&#34;&gt;発表者募集&lt;/a&gt;中です！&lt;/p&gt;
&lt;p&gt;今回はオンライン開催ということで、お手数ですが発表者にもオンサイトのイベントと異なった準備をお願いすることになります。運営としてできるかぎりのサポートをしますので安心して応募いただければと思います。&lt;/p&gt;
&lt;h1 id=&#34;参加登録&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参加登録&#34; title=&#34;参加登録&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参加登録&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell-jp.connpass.com/event/215363/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Connpass&lt;/span&gt;&lt;/a&gt;にて参加登録の受け付けもしていますので視聴者の方も登録をお願いします。&lt;/p&gt;
&lt;p&gt;その他のくわしい情報は&lt;a href=&#34;https://haskell.jp/haskell-day-2021/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2021&lt;/span&gt;イベントページ&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;みなさまのご応募をお待ちしています。またお体にお気をつけください。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/grc.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;「相互を尊重したコミュニケーションのためのガイドライン」制定のお知らせ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://zenn.dev/lotz/articles/fd7cdb6c539d56ac595c</id><title type="text">「Haskellのモナド完全に理解した」試験問題</title><updated>2021-06-13T02:20:28+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/lotz/articles/fd7cdb6c539d56ac595c"/><summary type="html">Haskellは勉強したけどモナドを本当に理解したって言えるのか自信がない…
＼そんな人向けの試験問題を作りました！／
これから実施する試験問題を、10問中8問正解すればあなたはHaskellのモナドを完全に理解しています。私が保証します！
それではさっそく〜〜


 第一問
まずは緊張をほぐしましょう。

Haskellの Monad は○○○○である

○○○○に当てはまるのは以下の選択肢のうちどれでしょう？

型
関数
型クラス
型シノニム

答え
3. 型クラス
これは簡単ですね！
Haskellのモナドは単なる型クラスです。


 第二問

      
        
  ...</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-06-13-my-site-use-slick.html</id><title type="text">ここを Hakyll から Slick に移行してみた</title><updated>2021-06-13T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-06-13-my-site-use-slick.html"/></entry><entry><id>https://haskell.jp/blog/posts/grc.html</id><title type="text">「相互を尊重したコミュニケーションのためのガイドライン」制定のお知らせ</title><updated>2021-05-30T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/grc.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;about_admins.html&#34;&gt;先日の&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Admins&lt;/span&gt;&lt;/a&gt;と同様に事務的な連絡で恐縮ですが、当ブログや&lt;a href=&#34;https://haskell.jp/signin-slack.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;&lt;/a&gt;、&lt;a href=&#34;https://github.com/haskell-jp&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Organization&lt;/span&gt;&lt;/a&gt;などにおけるコミュニケーションに適用される、&lt;a href=&#34;https://github.com/haskell-jp/community/blob/master/GRC.md&#34;&gt;「相互を尊重したコミュニケーションのためのガイドライン」&lt;/a&gt;を制定致しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/community/blob/master/GRC.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt; 相互を尊重したコミュニケーションのためのガイドライン&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらは&lt;a href=&#34;https://haskell.foundation/guidelines-for-respectful-communication/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Foundation&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;Guidelines for Respectful Communication (GRC)&lt;/span&gt;&lt;/a&gt;を日本語に翻訳し、運用主体などを&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;における実態に合わせて書き換えたものです。いわゆる「行動規範&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Code Of Conduct&lt;/span&gt;。しばしば「&lt;span class=&#34;ascii&#34;&gt;COC&lt;/span&gt;」と略されます）&lt;/small&gt;」と同じ役割を果たすものですが、行動規範と異なり、禁止事項よりも推奨事項を数多く挙げているのが特徴です。&lt;a href=&#34;https://github.com/haskell-jp/community/pull/29&#34;&gt;この&lt;span class=&#34;ascii&#34;&gt;GRC&lt;/span&gt;を翻訳する前に、&lt;span class=&#34;ascii&#34;&gt;COC&lt;/span&gt;を提案した際の議論&lt;/a&gt;において&lt;span class=&#34;ascii&#34;&gt;GRC&lt;/span&gt;のこうした特徴が好まれ、採用に至りました。&lt;/p&gt;
&lt;p&gt;この&lt;span class=&#34;ascii&#34;&gt;GRC&lt;/span&gt;は、今後&lt;a href=&#34;https://haskell.jp/signin-slack.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;https://github.com/haskell-jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;における&lt;span class=&#34;ascii&#34;&gt;Organization&lt;/span&gt;が管理するリポジトリー&lt;/a&gt;、それから&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;として開催するイベントなど、様々な場面で適用されます。参加されるみなさんはご理解の上、快適なコミュニティー活動をお楽しみください。&lt;/p&gt;
&lt;p&gt;加えて、もちろん今秋開催予定の&lt;a href=&#34;https://haskell.jp/haskell-day-2021/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2021&lt;/span&gt;&lt;/a&gt;においても、こちらの&lt;span class=&#34;ascii&#34;&gt;GRC&lt;/span&gt;を採用します。参加者、発表者、運営者の方々はご理解とご協力をよろしくお願いします。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2021/haskell-day-2021.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2021を開催します&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/about_admins.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;日本Haskellユーザーグループ管理委員会（Haskell-jp Admins）設立のお知らせ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://zenn.dev/wado/articles/5666e54a9334e0</id><title type="text">getArity</title><updated>2021-05-09T09:21:58+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/wado/articles/5666e54a9334e0"/><summary type="html">
      
        
        {-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE IncoherentInstances #-}
class Arity a where
  getArity :: a -&amp;gt; Int 
  
instance {-# OVERLAPPABLE #-} Arity a where
  getArity = const 0
  
instance Arity b =&amp;gt; Arity (a -&amp;gt; b) where
  getArity f = 1 + getArity (f unde...</summary></entry><entry><id>https://zenn.dev/autotaker/articles/hierarchical-env-tutorial</id><title type="text">hierarchical-env: 拡張可能なDIコンテナライブラリ</title><updated>2021-04-29T12:26:54+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/autotaker/articles/hierarchical-env-tutorial"/><summary type="html">
 はじめに
この記事では拙作のhierarchical-envというライブラリの紹介記事です。
https://hackage.haskell.org/package/hierarchical-env
https://github.com/autotaker/hierarchical-env

 RIOモナドとHasパターン
RIOモナドはReader + IOの機能を持ったモナドのことです。

      
        
        newtype RIO env a = RIO { unRIO :: ReaderT env IO a }


      
      Rea...</summary></entry><entry><id>https://zenn.dev/taketo1024/books/850b20937af93b</id><title type="text">プログラマのための圏論 (執筆中)</title><updated>2021-04-24T12:18:12+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/taketo1024/books/850b20937af93b"/><summary type="html">Bartosz Milewski &#34;Category Theory for Programmers&#34;
 
 原文: https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
 pdf: https://github.com/hmemcpy/milewski-ctfp-pdf 
 
 原文は pdf, TeX ソース, 画像など全て CC BY-SA 4.0 ライセンスで無料公開されています．当和訳文も同ライセンスで無料公開します． https://creativecommons.org/licenses/by-sa/4.0/ 
 
 この和訳プロジェクトは現在進行中です．和訳に協力してくださる方は是非ご連絡下さい．ガイドライン： https://zenn.dev/taketo1024/articles/4e27d5dfa14eb1
 
 イイネ❤️やサポート💰を頂けるとやる気が上がり，作業スピードが上がることが期待されます．続きを早く読みたい方は是非ご支援よろしくお願いします🙏
 
 和訳担当者： @taketo1024, @unaoya, @dshin, @ashiato45 </summary></entry><entry><id>https://zenn.dev/tak_uchida/articles/2f2402a9f03cbe</id><title type="text">Haskellのconst関数って何に使うんだろ...。</title><updated>2021-04-20T13:31:59+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tak_uchida/articles/2f2402a9f03cbe"/><summary type="html">Haskellの学習を進めて中でconst関数が出てきた際の疑問
「Haskellのconst関数って何に使うんだろ...」
を解消すべく調査しました。

 const関数とは
ひとまずconst関数の式の型を見てると下記となります。

      
        
        Prelude&amp;gt; :t const
const :: a -&amp;gt; b -&amp;gt; a


      
      処理内容としては引数を2つ受け取り1つ目を返す処理となっています。
const関数に数値と文字列、関数を渡してみると下記のようになります。（flip関数を用いても同様のことが可能です...</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/05/emacscygwin-visual-studioemacs.html</id><title type="text">[emacs][cygwin] Visual Studioのemacs / emacsclient 連携設定</title><updated>2021-04-18T11:56:12.128+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/05/emacscygwin-visual-studioemacs.html"/><summary type="text">Visual Studioの外部ツール機能を利用して、Visual Studioで開いているファイルをショートカットキー一発で（orメニューから）emacs/emacsclientで開くことができる設定を紹介します。カーソル位置がemacsに引き継がれるのが地味に便利です。職場の都合などでビルド環境がVisual Studioだが、ビルド以外の作業は使い慣れたemacsを利用したい、という方にお勧めです。今の時代になぜWSLでなくcygwinなのか？という疑問をもたれる方がいると思いますが、このエントリはWSLがリリース前にメモを作って、ずっと公開しないまま眠っていたものです。せっかくの情報なので時代遅れを承知の上公開します。 

前提：
&#34;C:\cygwin64&#34;以下にcygwinをインストールし、cygwin上でemacs/emacsclientを利用している、自分の環境を前提に設定</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2021/04/17/091533</id><title type="text">DevOpsDays Tokyo 2021 で Infrastructure as Code のテストについて話してきました</title><updated>2021-04-17T09:28:56+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2021/04/17/091533"/><summary type="html">こんにちは、チェシャ猫です。 先日開催された DevOpsDays Tokyo 2021 で Infrastructure as Code のテストについて発表してきました。公募 CFP 枠です。 今回の発表は、昨年の CloudOperatorDays Tokyo 2020 での講演をほぼそのまま再現しています。内容については前回登壇時に詳細な解説記事を書いたので、こちらもご参照ください。 ccvanishing.hateblo.jp オンサイト登壇 ここしばらく、どのカンファレンスもリモート開催がデフォルトになっていましたが、今回は久しぶりに会場まで行って登壇してきました。最後にオンサイト…</summary></entry><entry><id>https://zenn.dev/tak_uchida/articles/45f5a0f18c3c9e</id><title type="text">Haskellのid関数って何に使うんだろ…。</title><updated>2021-04-07T14:38:47+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tak_uchida/articles/45f5a0f18c3c9e"/><summary type="html">Haskellの学習を進めて中でid関数が出てきた際の疑問
「Haskellのid関数って何に使うんだろ...。」
を解消すべく調査しました。

 id関数とは
ひとまずid関数の式の型を見てると下記となります。

      
        
        Prelude&amp;gt; :t id
id :: a -&amp;gt; a


      
      型変数aが使用されているため多相型で、idは多相関数であることがわります。
しかし、処理内容は引数を一つ受け取り、そのまま引数を返す処理になってます。
id関数に数値と文字列を渡してみると下記のようになります。

      
  ...</summary></entry><entry><id>https://zenn.dev/tak_uchida/articles/2cf5431c5094d9</id><title type="text">ghcupに関して</title><updated>2021-04-01T04:31:17+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tak_uchida/articles/2cf5431c5094d9"/><summary type="html">
 ghcupとは
ghcupはHaskellを利用するにあたり下記3点のインストールとアンインストール、バージョン管理を行えるツールです。

GHC（Glasgow Haskell Compilerの略でHaskellのコンパイラ及び、インタラクティブ環境の提供）
HLS（Haskell Language Serverの略でHaskell用のLSP）
Cabal（Haskell用のパッケージ管理ツール）


 インストール方法
インストールガイドを参考にインストールしてください。&amp;lt;/br&amp;gt;
ghcupのリポジトリには手動でインストールする方法も記載されてます。

 各種コマ...</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-04-01-create-homelyapp-part1.html</id><title type="text">家計簿アプリを作る：HaskellでSQL編</title><updated>2021-04-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-04-01-create-homelyapp-part1.html"/></entry><entry><id>https://zenn.dev/k16/articles/cd2d9bfb84ac19</id><title type="text">XMLの親の属性を子に移動する（HXTで）</title><updated>2021-03-29T08:50:19+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/k16/articles/cd2d9bfb84ac19"/><summary type="html">XMLで、親についている属性を、子の要素に付け替えたいとする。つまり、たとえば以下のようなHTMLがあったとき…

      
        
        &amp;lt;body&amp;gt;
&amp;lt;table id=&#34;1&#34;&amp;gt;
  &amp;lt;caption&amp;gt;title&amp;lt;/caption&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;


      
      以下のように修正したいとする。 id=&#34;1&#34; が &amp;lt;table&amp;gt; から &amp;lt;chapter&amp;gt; に移動しているのがわかると思う。

      
        
      ...</summary></entry><entry><id>https://haskell.jp/blog/posts/about_admins.html</id><title type="text">日本Haskellユーザーグループ管理委員会（Haskell-jp Admins）設立のお知らせ</title><updated>2021-03-29T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/about_admins.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;去る&lt;span class=&#34;ascii&#34;&gt;2021&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日、任意団体であり明確な会員資格を持たない、&lt;a href=&#34;https://haskell.jp/blog/posts/about_us.html&#34;&gt;日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ（&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;）&lt;/a&gt;における共有財産やコミュニケーションの場の管理・運営を担う法人として、一般社団法人日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ管理委員会（通称 &lt;span class=&#34;ascii&#34;&gt;Haskell-jp Admins&lt;/span&gt;。&lt;a href=&#34;https://www.houjin-bangou.nta.go.jp/henkorireki-johoto.html?selHouzinNo=5020005014971&#34;&gt;法人番号 &lt;span class=&#34;ascii&#34;&gt;5020005014971&lt;/span&gt;&lt;/a&gt;）を設立しました。法人格を持つことを活かして、&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Admins&lt;/span&gt;は次の事業に取り組みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プログラミング言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関するイベントの企画・開催・運営
&lt;ul&gt;
&lt;li&gt;イベントの会場を借りたり、ノベルティーを作成したりする際の名義として使用する予定です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;haskell.jp&lt;/span&gt; ドメインの維持・管理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/signin-slack.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;&lt;/a&gt;を始めとする、交流や情報共有を行う場の提供・管理・運営&lt;/li&gt;
&lt;li&gt;そのほか、上記に関連して必要なこと&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後の活動と連絡先&#34; title=&#34;今後の活動と連絡先&#34;&gt;今後の活動と連絡先&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#現在の理事社員&#34; title=&#34;現在の理事社員&#34;&gt;現在の理事・社員&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#所在地&#34; title=&#34;所在地&#34;&gt;所在地&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#定款&#34; title=&#34;定款&#34;&gt;定款&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;背景&lt;/h1&gt;
&lt;p&gt;そもそもの設立の動機は、山下さん（&lt;a href=&#34;https://twitter.com/nobsun&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@nobsun&lt;/span&gt;&lt;/a&gt;）の好意によって個人名義で保有していた&lt;span class=&#34;ascii&#34;&gt;haskell.jp&lt;/span&gt; ドメインを共同で管理出来るようにするためでした。ドメインを団体として保有するには、法人格と、法人名義の銀行口座が必要なのです。これ以外にも、&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;として共有する価値のあるアカウントを管理する際の名義として、随時「日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ管理委員会」を使用します。&lt;/p&gt;
&lt;h1 id=&#34;今後の活動と連絡先&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後の活動と連絡先&#34; title=&#34;今後の活動と連絡先&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後の活動と連絡先&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Admins&lt;/span&gt;が出来たからといって、&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のあり方が大きく変わることはありません。今後も&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;で質問したり議論したり&lt;a href=&#34;https://haskell.jp/blog/&#34;&gt;ブログ&lt;/a&gt;記事を書いたりしましょう！&lt;a href=&#34;https://haskell.jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell.jp&lt;/span&gt;&lt;/a&gt;というドメインを活かし、「公式面して」自由に活動する方をいつでも待っています！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公の場で提案・相談したい場合は&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;前述の&lt;a href=&#34;https://haskell.jp/signin-slack.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;#random&lt;/span&gt;チャンネルなどで投稿いただくか、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/community/issues&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-jp/community&lt;/span&gt;に&lt;span class=&#34;ascii&#34;&gt;issue&lt;/span&gt;&lt;/a&gt;として登録したり、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/haskell_jp&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Twitter&lt;/span&gt;アカウント &lt;span class=&#34;ascii&#34;&gt;@haskell_jp&lt;/span&gt;&lt;/a&gt;にメンションをください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プライベートに提案・相談したい場合は&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-jp-admins@googlegroups.com&lt;/span&gt; にメールを送ってください&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我々&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Admins&lt;/span&gt;は、そうした活動をバックアップするために種々の問題に取り組んでいきます。&lt;/p&gt;
&lt;h1 id=&#34;現在の理事社員&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#現在の理事社員&#34; title=&#34;現在の理事社員&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;現在の理事・社員&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代表理事&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 山本悠滋（&lt;a href=&#34;https://twitter.com/igrep&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@igrep&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;社員&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;中嶋大嗣（&lt;a href=&#34;https://twitter.com/nakaji_dayo/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@nakaji_dayo&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;山下伸夫（&lt;a href=&#34;https://twitter.com/nobsun&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@nobsun&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;岡本和樹（&lt;a href=&#34;https://twitter.com/kakkun61&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@kakkun61&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;木下郁章（&lt;a href=&#34;https://twitter.com/fumieval&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;廣瀬達也（&lt;a href=&#34;https://twitter.com/lotz84_&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@lotz84_&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;所在地&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#所在地&#34; title=&#34;所在地&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;所在地&lt;/h1&gt;
&lt;p&gt;〒&lt;span class=&#34;ascii&#34;&gt;220-0004&lt;/span&gt; 神奈川県横浜市西区北幸 &lt;span class=&#34;ascii&#34;&gt;1-11-1&lt;/span&gt; 水信ビル&lt;span class=&#34;ascii&#34;&gt;7&lt;/span&gt;階&lt;/p&gt;
&lt;h1 id=&#34;定款&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#定款&#34; title=&#34;定款&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;定款&lt;/h1&gt;
&lt;p&gt;こちらに一部個人情報を削除した上で掲載しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/community/blob/master/admins/article.md&#34;&gt;一般社団法人 日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ管理委員会 定款&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/grc.html&#34; lang=&#34;ja&#34;&gt;「相互を尊重したコミュニケーションのためのガイドライン」制定のお知らせ&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/break-monad-law-with-writer.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Writer Monadで気軽にMonad則を破る&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://zenn.dev/mod_poppo/books/haskell-forest</id><title type="text">Haskellの森</title><updated>2021-03-26T10:55:25+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/mod_poppo/books/haskell-forest"/><summary type="html">筆者がこれまで書いてきたHaskellお役立ち記事をまとめたものです。内容は随時追加・変更されます。</summary></entry><entry><id>https://blog.miz-ar.info/2021/03/my-first-contribution-to-ghc/</id><title type="text">GHCに初めてコントリビュートした／最近のGHC動向</title><updated>2021-03-19T02:13:32+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2021/03/my-first-contribution-to-ghc/"/><summary type="html">事実上の標準デファクトスタンダードなHaskell処理系であるGHCに貢献するというのが去年掲げた目標だったが、それがようやく実現したので報告する。ついでに、最近のGHC開発状況についても簡単にまとめてみる。 「貢献」と [&amp;#8230;]</summary></entry><entry><id>https://zenn.dev/tobi462/articles/8190584e7ddc31</id><title type="text">順を追って理解する Reader モナドの使い方</title><updated>2021-03-16T09:23:48+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tobi462/articles/8190584e7ddc31"/><summary type="html">
 前提読者

モナドや bind 記法について基本的なことは理解している。
Reader モナドの使い方や仕組みを理解したい。


 アプリケーション全体から参照したい設定値
アプリケーションを開発する際に、アプリケーション全体から参照したい設定値のようなものがあるケースがあります。
例えば、以下のような設定値を考えてみます。

      
        
        data Config = Config { verbose :: Bool } -- 冗長なログ出力が有効か


      
      これはアプリケーション起動時に引数として与えられたり、起動時に設定ファ...</summary></entry><entry><id>https://zenn.dev/autotaker/articles/monad-olympic-1-pure</id><title type="text">モナドオリンピック1-トラック競技-</title><updated>2021-03-15T12:07:42+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/autotaker/articles/monad-olympic-1-pure"/><summary type="html">
 はじめに
最速のモナドを決めるモナドオリンピックを開催することになりました。
この大会では、各ライブラリの提供するモナドたちが
様々な競技（ベンチマーク）に挑戦します。

 競技説明
今回は副作用のないシンプルなベンチマークで計算速度を測ります。

 ベンチマーク
おなじみのfibをつかいます。普通のfibは返り値が整数型ですが、次の理由から偶奇を表すブール値にしています。


Int型にするとReaderモナドやIdentityモナドで返り値がUnboxingされて有利になりすぎる。

Integer型にすると演算にかかる時間が無視できない


      
        Fib...</summary></entry><entry><id>https://zenn.dev/tobi462/articles/9010e7d9c4f759</id><title type="text">[Haskell] asTypeOf の使い方と仕組み</title><updated>2021-03-13T09:02:11+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tobi462/articles/9010e7d9c4f759"/><summary type="html">
 想定読者


asTypeOf の使い方や仕組みが知りたい。

asTypeOf の代わりに ScopedTypeVariables 拡張を使う方法を知りたい。


 基本的な動作の確認
Haskell は型推論によって、型を明示しないで済むケースが殆どですが、read関数のように返り値の型を明示する必要のあるケースもあります。

      
        
        main = do
    print (read &#34;123&#34;) -- 変換先の型が特定できないためコンパイルエラー


      
      これを解決する通常の方法は型注釈を利用することです。

  ...</summary></entry><entry><id>https://zenn.dev/tobi462/articles/4ae7658d126054</id><title type="text">順を追って理解する MaybeT モナドの使い方</title><updated>2021-03-10T11:26:07+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/tobi462/articles/4ae7658d126054"/><summary type="html">モナド変換子の1つである MaybeT について、順を追って説明してみたいと思います。

 想定読者

モナドや Applicative スタイルを理解している。
モナド変換子について学び始めたので具体例を知りたい。


 Maybeモナドの復習
2つの文字列を受け取り、両方とも数値の場合はそれらを足した数、そうでない場合はNothingを返す関数 add は以下のように実装できます。

      
        
        import Text.Read (readMaybe)

readInt :: String -&amp;gt; Maybe Int 
readInt = re...</summary></entry><entry><id>https://zenn.dev/e99h2121/articles/0ece8217c6c091</id><title type="text">5大難解プログラミング言語 (とHaskell)</title><updated>2021-03-01T21:18:02+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/e99h2121/articles/0ece8217c6c091"/><summary type="html">5 Most Difficult Programming Languages of the World
という記事があり

Brainf**k
Cow
Intercal
Malbolge
Whitespace

という5つの難解プログラミング言語について書かれている。
記事ではそれぞれHello worldの仕方が解説されていまして
Whitespaceなんかは
https://tio.run/##VY1RCsAwCEO/4ylytVEK299ghR7fxVWhQ9RAnnGe1@jPfbTuTtJIQK36JKDFNVIXhJ1G0j8o7vKy0CAtTBUqdwUgH8kJRJyZ...</summary></entry><entry><id>https://zenn.dev/yoshii0110/articles/4cab958c065294</id><title type="text">Haskell開発環境構築 for Mac</title><updated>2021-03-01T13:04:30+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/yoshii0110/articles/4cab958c065294"/><summary type="html">
 Haskellの環境構築

 はじめに
以前、途中で挫折したHaskellを真剣にやってみようということで、初歩的なところから始めまする

 開発環境
・ MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports)
・ プロセッサ : 2GHz クアッドコアIntel Core i5
・ メモリ : 16GB
・ MacOS Catalina (10.15.4)

 環境構築
Haskellの環境構築するなら、stackを利用するのが良さそう。
公式ドキュメンント

 stackとは
下記のような機能を兼ね備えたツール
・ Haskel...</summary></entry><entry><id>https://zenn.dev/autotaker/articles/method-0-3-release</id><title type="text">method-0.3でHaskellでのTDDをもっと楽しくする</title><updated>2021-02-28T12:04:39+00:00</updated><author><name>Zenn</name></author><link href="https://zenn.dev/autotaker/articles/method-0-3-release"/><summary type="html">
 はじめに
先日リリースしたHaskellのモックライブラリmethodの新バージョンをリリースしました。
https://hackage.haskell.org/package/method-0.3.0.0
前回の記事は こちらです。
この記事では今回追加した次の二つの新機能を紹介します。

複数のメソッドの使われ方を同時にテストする機能
多相メソッドをモックする機能


 新機能1: Protocol
モックメソッドが呼び出されたかどうかをテストするにはMonitorをつかうことができました。
しかし、Monitorは一つのメソッドの呼ばれ方をテストするのには適していますが、
複数...</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-02-21-replace-haskell-docker-images-to-ghcr.html</id><title type="text">Haskell のための自作 Docker イメージを GitHub Container Registry に移行する</title><updated>2021-02-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-02-21-replace-haskell-docker-images-to-ghcr.html"/></entry><entry><id>https://fumieval.hatenablog.com/entry/2020/12/29/190347</id><title type="text">新しいGHC拡張、NoFieldSelectorsについて</title><updated>2021-02-17T13:49:55+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2020/12/29/190347"/><summary type="html">今まで不満の多かったHaskellのレコードの扱いを改善するための一歩として、NoFieldSelectorsというGHC拡張の実装を進めている。 動機 Haskellにはレコードを定義するための構文がある。 data User = User { userId :: Int , userName :: Text } こう定義すると、各フィールドごとにuserId :: User -&gt; IntとuserName :: User -&gt; Textというゲッターに相当する関数が生成される。これらの関数は特別な意味合いを持っており、以下のレコード操作の構文にも利用できる。 構築 User { userI…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-02-15-create-hazell.html</id><title type="text">hpack の設定から Bazel の設定を自動生成するツール Hazell を作った</title><updated>2021-02-15T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-02-15-create-hazell.html"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2021-01-28T03:31:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2021/01/24/185819</id><title type="text">July Tech Festa 2021 winter で CockroachDB と TLA+ について話してきました</title><updated>2021-01-27T22:38:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2021/01/24/185819"/><summary type="html">こんにちは、チェシャ猫です。 インフラ技術のカンファレンス July Tech Festa 2021 winter で、形式手法ツール TLA+ が CockroachDB の設計に使用された事例について発表してきました。公募 CFP 枠です。 www.youtube.com 今回の登壇は、昨年の CloudNative Days Tokyo 2020 と同じ題材を扱っています。ただ、前回より持ち時間が長くなった分、前回のスライドで説明不足だった部分を拡充してあります。特に、CockroachDB 以外の TLA+ 採用事例や、分散システムにおける Chaos Engineering の位置付…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2021-01-20T11:27:05.435+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフシステムアイコンのオン／オフの切り替え
入力インジケーター： オフ


 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-01-18-create-rules_elm.html</id><title type="text">rules_elm を作る</title><updated>2021-01-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-01-18-create-rules_elm.html"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/12/13/%E3%81%A8%E3%82%8A%E3%81%A8%E3%82%81%E3%81%AE%E3%81%AA%E3%81%84_GHC_%E7%B7%9A%E5%BD%A2%E5%9E%8B%E3%83%A1%E3%83%A2</id><title type="text">とりとめのない GHC 線形型メモ</title><updated>2021-01-09T20:09:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/12/13/%E3%81%A8%E3%82%8A%E3%81%A8%E3%82%81%E3%81%AE%E3%81%AA%E3%81%84_GHC_%E7%B7%9A%E5%BD%A2%E5%9E%8B%E3%83%A1%E3%83%A2"/><summary type="html">GHC 9.0.1 alpha 1 がリリースされたときに線形型をいじってみていたことをメモしていなかったので思い出しながらメモしていく。 mail.haskell.org 使用バージョン GHC 9.0.0.20200925 上記リンクのもの ghcup ならそれ経由でインストールできる。 ghcups の場合は手動インストール後、下記のような設定ファイルで切り替えができるようになる1。 ghc: 9.0.1-alpha1: H:\programs\ghc-9.0.0.20200925-x86_64-unknown-mingw32\bin 線形型とは GHC では引数が1回しか使えない（1回…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/12/25/%E5%88%B9%E9%82%A3%E7%9A%84%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E7%B7%9A%E5%BD%A2%E5%9E%8B</id><title type="text">刹那的純粋関数的データ構造と線形型</title><updated>2021-01-09T20:03:02+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/12/25/%E5%88%B9%E9%82%A3%E7%9A%84%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E7%B7%9A%E5%BD%A2%E5%9E%8B"/><summary type="html">The English version is at Dev. 『純粋関数型データ構造』（以降 PFDS）の5.2章に刹那的純粋関数的キューというものが出てきます。 https://asciidwango.jp/post/160831986220/%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0asciidwango.jp このキューは計算量の関係から1つの値に対して1回しか操作をしてはいけません。例えば下記操作列なら大丈夫ですが、その次の操作列では計算量が大きくな…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2021/01/06/GHC_%E6%BC%94%E7%AE%97%E5%AD%90%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D%E3%83%88%E3%83%AA%E3%83%93%E3%82%A2</id><title type="text">GHC 演算子優先順位トリビア</title><updated>2021-01-06T07:13:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2021/01/06/GHC_%E6%BC%94%E7%AE%97%E5%AD%90%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D%E3%83%88%E3%83%AA%E3%83%93%E3%82%A2"/><summary type="html">GHC の演算子の優先順位には -1 がある（たぶん組込でしか使えない #Haskell pic.twitter.com/Xa0OIjvw5i— o̞͑kä̝mo̞͑to̞͑ kä̝zʊ̠kɪ̟ (@kakkun61) January 3, 2021</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2021/01/06/Case_Analysis_%E9%96%A2%E6%95%B0</id><title type="text">Case Analysis 関数</title><updated>2021-01-06T07:10:46+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2021/01/06/Case_Analysis_%E9%96%A2%E6%95%B0"/><summary type="html">今回は case analysis と呼ばれる関数の話です1。 data D a b c = C0 a b | C1 c 例えば上記のようなデータ型があった場合 case analysis 関数は次のようになります。 d :: (a -&gt; b -&gt; d) -&gt; (c -&gt; d) -&gt; D a b c -&gt; d d f _ (C0 a b) = f a b d _ f (C1 c) = f c 値構築子の数だけ関数を引数とし、対象のデータを最後の引数とします。それぞれの関数の型は値構築子の型に似ます。 C0 :: a -&gt; b -&gt; D a b c C1 :: c -&gt; D a b c d ::…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2021/01-04-ormolu-action.html</id><title type="text">ormolu-action</title><updated>2021-01-04T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2021/01-04-ormolu-action.html"/><summary type="html">&lt;p&gt;へいしゃでは、ソースコードのフォーマッターに &lt;a href=&#34;https://hackage.haskell.org/package/ormolu&#34;&gt;Ormolu&lt;/a&gt; を利用しています。&lt;/p&gt;
&lt;p&gt;インデント時のスペース数すらカスタマイズ不可なので好き嫌いが分かれるところですが、プロジェクト全体のコードを統一しておくとコードレビューの際にも有用なので入れています。&lt;/p&gt;
&lt;p&gt;ちなみにスペース幅を4にしたくてフォークされた &lt;a href=&#34;https://github.com/parsonsmatt/fourmolu&#34;&gt;fourmolu&lt;/a&gt; というフォーマッターもあります。現在ではスペース数以外の設定もできるみたいです。&lt;/p&gt;
&lt;p&gt;どちらも &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt; から利用可能なので、興味がある人は試してみると良いと思います。&lt;/p&gt;
&lt;p&gt;また、&lt;strong&gt;ormolu&lt;/strong&gt; のフォーマット結果で末尾カンマが気に入らない場合は &lt;a href=&#34;https://github.com/google/ormolu&#34;&gt;google/ormolu&lt;/a&gt; の &lt;strong&gt;gfork&lt;/strong&gt; ブランチを使ってみると良いかもしれません (&lt;a href=&#34;https://github.com/google/ormolu/commit/5a36b8b6ef85b587bbf6e8cd5ecb7754fed7461d&#34;&gt;フォーマット結果&lt;/a&gt;)。&lt;strong&gt;fourmolu&lt;/strong&gt; も &lt;a href=&#34;https://github.com/parsonsmatt/fourmolu/pull/17&#34;&gt;Add option for leading commas (and expand test suite) #17&lt;/a&gt; で設定できるようになってました。&lt;/p&gt;
&lt;p&gt;今回はプロジェクトのコードがフォーマットされていることを CI (Github Action) でチェックする簡単な方法を紹介します。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;ormolu-action&#34;&gt;ormolu-action&lt;/h2&gt;
&lt;p&gt;既に &lt;a href=&#34;https://github.com/mrkkrp/ormolu-action&#34;&gt;ormolu-action&lt;/a&gt; というアクションが提供されているので、これを利用すると簡単です。&lt;/p&gt;
&lt;p&gt;オプションを指定しなければ以下の内容を &lt;code&gt;.github/workflows/format.yml&lt;/code&gt; のような名前で保存すれば完了です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; format&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ormolu&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mrkkrp/ormolu-action@v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フォーマットされていない場合は CI のログにフォーマット前後の diff が表示されます。&lt;/p&gt;
&lt;h2 id=&#34;実例&#34;&gt;実例&lt;/h2&gt;
&lt;p&gt;このブログでも導入しており、オプションもいくつか利用しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; format&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ormolu&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mrkkrp/ormolu-action@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        pattern&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;          **/app/**/*.hs&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;          !quiz&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;          !sample-code&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;extra-args&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;-o -XTypeApplications&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pattern&lt;/code&gt; を使うと &lt;strong&gt;含めたい/除外したい&lt;/strong&gt; ディレクトリやファイルを指定できるため、より細かい制御が可能です&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra-args&lt;/code&gt; は &lt;strong&gt;ormolu&lt;/strong&gt; にそのまま渡されるオプションになります&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2021/01/01/%E7%B6%9A%E3%83%BB%E5%88%B9%E9%82%A3%E7%9A%84%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E7%B7%9A%E5%BD%A2%E5%9E%8B</id><title type="text">続・刹那的純粋関数的データ構造と線形型</title><updated>2021-01-02T13:23:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2021/01/01/%E7%B6%9A%E3%83%BB%E5%88%B9%E9%82%A3%E7%9A%84%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E7%B7%9A%E5%BD%A2%E5%9E%8B"/><summary type="html">The English version is at Dev. 前回の記事の追加情報です。 kakkun61.hatenablog.com pure 抜け道はなかった まあ、こういうインターフェースでありがちな pure で外に出す抜け道が存在するのですが。 最後にこういうことを無思慮に書いたわけですが、Dev に書いた英語版を Reddit に載せたところ有益な情報を教えてもらえました。 www.reddit.com I think the solution to the problem with empty might be to use the Ur (for &#34;unrestricted&#34;…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2021-01-01-missing-dependencies-with-rules_haskell.html</id><title type="text">rules_haskell でパッケージの依存関係がうまく解決できない時</title><updated>2021-01-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2021-01-01-missing-dependencies-with-rules_haskell.html"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/09/02/%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA_MonadFail_%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9</id><title type="text">一番簡単な MonadFail インスタンス</title><updated>2020-12-29T01:32:46+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/09/02/%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA_MonadFail_%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9"/><summary type="html">The English version is at Dev. 導入 fail が Monad から剥がされて早や幾年、私は失敗する可能性のある計算は MonadFail を使って型を付けるのが好きです。 foo :: MonadFail m =&gt; m a こうすると IO の文脈であればその中で、純粋な文脈であれば Maybe などで具体化して呼ぶことができます。 -- IO の文脈では foo :: IO a -- 純粋な文脈では foo :: Maybe a さて、純粋な文脈として Maybe を使うと失敗のメッセージを失ってしまうことが嬉しくありません。では、Either を使えばいいの…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2020/12/18/214626</id><title type="text">動的配列の無難なHaskell実装</title><updated>2020-12-25T14:17:57+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2020/12/18/214626"/><summary type="html">qiita.com C++、Rust、Pythonなど、他の言語では当たり前のように多用される動的配列だが、Haskell実装は(開発を始めた時点では)見当たらなかったので作ってみたお話*1。 動的配列とはミュータブルな配列の一種で、通常の配列操作だけでなく、末尾への要素の追加・削除が定数時間で行える構造である。確保しておいた領域がいっぱいになったら、その2倍の大きさの領域を確保するという方法によって、漸近的には要素の追加は定数時間となる。 内部の配列には、デファクトスタンダードであるvectorパッケージを用いる。Vectorには無印(boxed)、Unboxed、Storableの三種類の…</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/break-monad-law-with-writer.html</id><title type="text">Writer Monadで気軽にMonad則を破る</title><updated>2020-12-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/break-monad-law-with-writer.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;🎅この記事は、&lt;a href=&#34;https://qiita.com/advent-calendar/2020/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2020&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;25&lt;/span&gt;日目の記事です。&lt;br /&gt;
🎄&lt;span class=&#34;ascii&#34;&gt;Happy Christmas!!&lt;/span&gt;🎄&lt;/p&gt;
&lt;p&gt;今回は先日&lt;small&gt;（といっても元の質問の投稿からもう何ヶ月も経ってしまいましたが…）&lt;/small&gt;&lt;span class=&#34;ascii&#34;&gt;StackOverflow&lt;/span&gt;に上がったこちら👇の質問に対する回答の、続きっぽい話を書こうと思います。長いし、質問の回答からスコープが大きく外れてしまうので記事にしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ja.stackoverflow.com/questions/70079/%E3%83%A2%E3%83%8A%E3%83%89%E5%89%87%E3%82%92%E5%B4%A9%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E4%BE%8B%E3%81%8C%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell -&lt;/span&gt; モナド則を崩してしまう例が知りたい &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; スタック・オーバーフロー&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;にある重要な繋がりを説明した後、それを応用した&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;がどう&lt;code&gt;Monoid&lt;/code&gt;を使って&lt;code&gt;Monad&lt;/code&gt;則を満たしているのか証明します。そして、&lt;code&gt;Writer&lt;/code&gt;のそうした性質を用いて簡単に&lt;code&gt;Monad&lt;/code&gt;則を破る例を紹介することで、読者のみなさんが&lt;code&gt;Monad&lt;/code&gt;則のみならず&lt;code&gt;do&lt;/code&gt;記法や&lt;code&gt;Monad&lt;/code&gt;そのものの性質について、よりはっきりとした理解が得られることを目指します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#サンプルコードについて&#34; title=&#34;サンプルコードについて&#34;&gt;サンプルコードについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monadとmonoidの切っても切り離せない関係&#34; title=&#34;monadとmonoidの切っても切り離せない関係&#34;&gt;&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の切っても切り離せない関係&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#monoidの例&#34; title=&#34;monoidの例&#34;&gt;&lt;code&gt;Monoid&lt;/code&gt;の例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monoidとwriterの切っても切り離せない関係&#34; title=&#34;monoidとwriterの切っても切り離せない関係&#34;&gt;&lt;code&gt;Monoid&lt;/code&gt;と&lt;code&gt;Writer&lt;/code&gt;の切っても切り離せない関係&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#doと&#34; title=&#34;doと&#34;&gt;&lt;code&gt;do&lt;/code&gt;と&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writer-monadの結合則とmonoidの結合則&#34; title=&#34;writer-monadの結合則とmonoidの結合則&#34;&gt;&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;の結合則と&lt;code&gt;Monoid&lt;/code&gt;の結合則&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#関係を壊してみる&#34; title=&#34;関係を壊してみる&#34;&gt;関係を壊してみる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#とmonoidの結合則&#34; title=&#34;とmonoidの結合則&#34;&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の結合則&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#とmonadの結合則&#34; title=&#34;とmonadの結合則&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;と&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#do記法とmonadの結合則&#34; title=&#34;do記法とmonadの結合則&#34;&gt;&lt;code&gt;do&lt;/code&gt;記法と&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;サンプルコードについて&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#サンプルコードについて&#34; title=&#34;サンプルコードについて&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;サンプルコードについて&lt;/h1&gt;
&lt;p&gt;本記事のサンプルコードは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の構文に準拠していないものを除いて、すべて&lt;a href=&#34;https://github.com/igrep/readme-test&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;readme-test&lt;/span&gt;&lt;/a&gt;というツールの&lt;a href=&#34;https://github.com/igrep/readme-test/tree/f6ce7a6f5ce5f5f8031cd5dfedc8c6e47c13b1f3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2020&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;12&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;13&lt;/span&gt;日時点の開発版&lt;/a&gt;でテストしました。こちらのツールはまだ開発中で、今後も仕様が大きく変わる可能性がありますが、この記事のサンプルコードをテストするのに必要な機能は十分にそろっています。この&lt;span class=&#34;ascii&#34;&gt;readme-test&lt;/span&gt;自体についてはいつか改めて共有します。&lt;/p&gt;
&lt;p&gt;また、テストの際に用いた環境は以下の通りです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10 Pro 20H2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.10.1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/nightly-2020-08-15&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage nightly-2020-08-15&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;monadとmonoidの切っても切り離せない関係&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#monadとmonoidの切っても切り離せない関係&#34; title=&#34;monadとmonoidの切っても切り離せない関係&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の切っても切り離せない関係&lt;/h1&gt;
&lt;p&gt;「&lt;a href=&#34;http://www.aoky.net/articles/james_iry/brief-incomplete-and-mostly-wrong.htm&#34;&gt;モナドは単なる自己関手の圏におけるモノイド対象だよ。何か問題でも？&lt;/a&gt;」というフレーズ（原文「&lt;a href=&#34;http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;A monad is a monoid in the category of endofunctors, what&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s the problem?&lt;/span&gt;&lt;/a&gt;」が示すとおり、モナドとモノイド、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の識別子で言うところの&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;には密接な関係があります。ぶっちゃけ、このフレーズの正確な意味を私は理解していないのですが、少なくとも&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;には重要な共通点があることは知っています。それは、どちらも&lt;strong&gt;単位元と結合則&lt;/strong&gt;がある、ということです！&lt;/p&gt;
&lt;p&gt;具体的に&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の単位元・結合則を見てみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: Ignore --&gt;
&lt;p&gt;&lt;code&gt;Monoid&lt;/code&gt;の単位元&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 単位元である&lt;code&gt;mempty&lt;/code&gt;は、どんな値&lt;code&gt;x&lt;/code&gt;に&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;で足しても結果が変わらない！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Monad&lt;/code&gt;の単位元&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;return&lt;/code&gt;は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の前に使っても後ろに使っても、&lt;code&gt;m&lt;/code&gt;や&lt;code&gt;k a&lt;/code&gt;の結果を変えない！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k a) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Monoid&lt;/code&gt;の結合則&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;x &amp;lt;&amp;gt; y &amp;lt;&amp;gt; z&lt;/code&gt;の結果は、&lt;code&gt;y &amp;lt;&amp;gt; z&lt;/code&gt;を先に計算しようと&lt;code&gt;x &amp;lt;&amp;gt; y&lt;/code&gt;を先に計算しようと変わらない！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (y &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;m &amp;gt;&amp;gt;= \x -&amp;gt; k x &amp;gt;&amp;gt;= h&lt;/code&gt; の結果は、&lt;code&gt;\x -&amp;gt; k x &amp;gt;&amp;gt;= h&lt;/code&gt;を先に計算しようと、&lt;code&gt;m &amp;gt;&amp;gt;= (\x -&amp;gt; k x)&lt;/code&gt;を先に計算しようと変わらない！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※&lt;code&gt;Monad&lt;/code&gt;の単位元・結合則の式についてはわかりやすさのために&lt;a href=&#34;http://hackage.haskell.org/package/base-4.14.0.0/docs/Control-Monad.html#t:Monad&#34;&gt;引用元&lt;/a&gt;から少し形を変えています。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;における&lt;code&gt;Monad&lt;/code&gt;・&lt;code&gt;Monoid&lt;/code&gt;とは、値がそれぞれの単位元・結合則をを満たす型です&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。それ以上でも、それ以下でもありません。&lt;/p&gt;
&lt;p&gt;それぞれの単位元・結合則を表す式は、一見して異なるものに見えるかも知れませんが、表す性質自体はよく似ています。なので、式を読んでもよく分からないという方は、上記に書いた日本語の説明をざっと眺めて覚えておいてください。特に、結合則における&lt;strong&gt;「～を先に計算しようと、～を先に計算しようと変わらない！」&lt;/strong&gt;の部分がこの後とても重要になります。&lt;/p&gt;
&lt;div id=&#34;monoid-examples&#34;&gt;

&lt;/div&gt;
&lt;h2 id=&#34;monoidの例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#monoidの例&#34; title=&#34;monoidの例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;Monoid&lt;/code&gt;の例&lt;/h2&gt;
&lt;p&gt;ここまで読んで、&lt;code&gt;Monad&lt;/code&gt;はなんか聞いたことがあるけど&lt;code&gt;Monoid&lt;/code&gt;は初めて聞くよ、という方向けに補足すると、&lt;code&gt;Monoid&lt;/code&gt;とは例えば次のような型の値（と、それに対する処理）です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sum&lt;/code&gt;型&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 数値&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Num&lt;/span&gt;型クラスのインスタンス）&lt;/small&gt;に対する、足し算を表す&lt;code&gt;Monoid&lt;/code&gt;のインスタンス&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- これから紹介する処理に必要なモジュールのimport&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Sum aに対する &amp;lt;&amp;gt; は + と同等なので、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- と同じ。&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mempty&lt;/code&gt;が各&lt;code&gt;Monoid&lt;/code&gt;のインスタンスにおける単位元を返す、という点に注意してください。上記のとおり足し算の場合は&lt;code&gt;0&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;型&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 数値&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Num&lt;/span&gt;型クラスのインスタンス）&lt;/small&gt;に対する、かけ算を表す&lt;code&gt;Monoid&lt;/code&gt;のインスタンス&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Product aに対する &amp;lt;&amp;gt; は * と同等なので、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getProduct (&lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- と同じ。&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;リスト型&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; リスト型の値に対する、結合 &lt;code&gt;(++)&lt;/code&gt;を表す&lt;code&gt;Monoid&lt;/code&gt;のインスタンス&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- [a] に対する &amp;lt;&amp;gt; は ++ と同等なので、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- と同じ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;All&lt;/code&gt;型&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;Bool&lt;/code&gt;型の値に対する論理積&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;を表す&lt;code&gt;Monoid&lt;/code&gt;のインスタンス&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getAll (&lt;span class=&#34;dt&#34;&gt;All&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;All&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- と同じ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ReadmeTest: ValidateAsExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- これが何を返すかは、想像してみてください！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;getAll &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Any&lt;/code&gt;型&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;Bool&lt;/code&gt;型の値に対する論理和&lt;code&gt;||&lt;/code&gt;を表す&lt;code&gt;Monoid&lt;/code&gt;のインスタンス&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getAny (&lt;span class=&#34;dt&#34;&gt;Any&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Any&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- と同じ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ReadmeTest: ValidateAsExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- これも何を返すかは、想像してみてください！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;getAny &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、&lt;code&gt;Monoid&lt;/code&gt;は他のプログラミング言語でもおなじみの、多くの二項演算を表しています。これらのインスタンスはすべて、先ほど紹介した「単位元」や「結合則」のルールを守っているので、気になった方はぜひチェックしてみてください&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;monoidとwriterの切っても切り離せない関係&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#monoidとwriterの切っても切り離せない関係&#34; title=&#34;monoidとwriterの切っても切り離せない関係&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;Monoid&lt;/code&gt;と&lt;code&gt;Writer&lt;/code&gt;の切っても切り離せない関係&lt;/h1&gt;
&lt;p&gt;実はそんな&lt;code&gt;Monad&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の固い絆を象徴するような&lt;code&gt;Monad&lt;/code&gt;が、この世にはあります。そう、&lt;code&gt;Writer&lt;/code&gt;です！&lt;code&gt;Writer&lt;/code&gt;は&lt;code&gt;Monoid&lt;/code&gt;の単位元・結合則をそのまま活かすことによって&lt;code&gt;Monad&lt;/code&gt;の単位元・結合則を満たした&lt;code&gt;Monad&lt;/code&gt;であり、&lt;code&gt;Writer&lt;/code&gt;がどうやって&lt;code&gt;Monad&lt;/code&gt;則を満たしているのか知れば、&lt;code&gt;Monad&lt;/code&gt;則がどうやって成立するものなのかが、すっきりクリアになることでしょう。&lt;/p&gt;
&lt;p&gt;手始めに&lt;code&gt;Writer&lt;/code&gt;の定義と、&lt;code&gt;Writer&lt;/code&gt;が&lt;code&gt;Monad&lt;/code&gt;の各メソッドをどのように実装しているか見てみましょう。&lt;a href=&#34;https://www.sampou.org/haskell/a-a-monads/html/writermonad.html&#34;&gt;「モナドのすべて」における&lt;code&gt;Writer&lt;/code&gt;の紹介ページ&lt;/a&gt;から、少しリファクタリングしつつ引用します&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Writer型の定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; w a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runWriter ::&lt;/span&gt; (a, w) }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;タプルに対して&lt;code&gt;newtype&lt;/code&gt;していることから分かるとおり、&lt;code&gt;Writer&lt;/code&gt;の実態はただのタプルです。ただのタプルがどうやって&lt;code&gt;Monad&lt;/code&gt;になるのでしょう？その答えがこちら👇&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!--
```haskell
instance Functor (Writer w) where
  fmap f (Writer (x, w)) = Writer (f x, w)

instance Monoid w =&gt; Applicative (Writer w) where
  pure a = Writer (a, mempty)
  Writer (f, w1) &lt;*&gt; Writer (x, w2) = Writer (f x, w1 &lt;&gt; w2)
```
--&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- WriterのMonad型クラスの実装&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 実際のところFunctor, Applicativeのインスタンス定義も必要だけどここでは省略&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; w &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; w) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;     &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt;の定義は比較的シンプルですね。&lt;code&gt;mempty&lt;/code&gt;を受け取った値&lt;code&gt;a&lt;/code&gt;と一緒にタプルに入れて返すだけです。&lt;code&gt;Monad&lt;/code&gt;の単位元である&lt;code&gt;return&lt;/code&gt;では、&lt;code&gt;Monoid&lt;/code&gt;の単位元である&lt;code&gt;mempty&lt;/code&gt;を使うのです。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;はどう読めばいいでしょう？&lt;code&gt;let ... in ...&lt;/code&gt;の結果にあたる&lt;code&gt;Writer (b, w1 &amp;lt;&amp;gt; w2)&lt;/code&gt;に注目してください。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;b&lt;/code&gt;は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の右辺である&lt;code&gt;f&lt;/code&gt;が返した結果です。&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;が返す、&lt;code&gt;Writer&lt;/code&gt;がラップしたタプルの一つ目の要素は、ここで&lt;code&gt;f&lt;/code&gt;が返した値の型と一致していなければなりません。&lt;code&gt;Writer&lt;/code&gt;において&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型は&lt;code&gt;Writer w a -&amp;gt; (a -&amp;gt; Writer w b) -&amp;gt; Writer w b&lt;/code&gt;であり、右辺にあたる&lt;code&gt;f&lt;/code&gt;は&lt;code&gt;(a -&amp;gt; Writer w b)&lt;/code&gt;という型なので、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;全体の戻り値&lt;code&gt;Writer w b&lt;/code&gt;と&lt;code&gt;f&lt;/code&gt;の戻り値が一致している必要があることがわかりますよね？&lt;/p&gt;
&lt;p&gt;さらに重要なのが&lt;code&gt;w1 &amp;lt;&amp;gt; w2&lt;/code&gt;です。ここであの&lt;code&gt;Monoid&lt;/code&gt;の演算子&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;が出てきました！&lt;code&gt;Writer&lt;/code&gt;は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の中で&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;を使う&lt;code&gt;Monad&lt;/code&gt;なんですね！一体何と何を&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;しているのでしょう？まず、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;の左辺である&lt;code&gt;w1&lt;/code&gt;は、左辺にあたる&lt;code&gt;Writer&lt;/code&gt;がタプルに保持していた&lt;code&gt;Monoid&lt;/code&gt;型クラスのインスタンスの値です。そして右辺の&lt;code&gt;w2&lt;/code&gt;は、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の右辺に渡した関数&lt;code&gt;f&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;と一緒に返した&lt;code&gt;w2&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;以上のことをまとめると、&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;は、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;左辺の&lt;code&gt;(a, w1)&lt;/code&gt;における&lt;code&gt;a&lt;/code&gt;を&lt;code&gt;f&lt;/code&gt;に渡して、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt;が返した&lt;code&gt;(b, w2)&lt;/code&gt;における&lt;code&gt;b&lt;/code&gt;を、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w1&lt;/code&gt;と&lt;code&gt;w2&lt;/code&gt;と一緒に&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;でくっつけつつ返す、&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を行っています。&lt;code&gt;Writer&lt;/code&gt;は、「&lt;code&gt;b&lt;/code&gt;を返すついでに&lt;code&gt;w1&lt;/code&gt;と&lt;code&gt;w2&lt;/code&gt;を&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;でくっつける」と覚えてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Writer&lt;/code&gt;は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;の単位元&lt;code&gt;return&lt;/code&gt;で&lt;code&gt;Monoid&lt;/code&gt;の単位元&lt;code&gt;mempty&lt;/code&gt;を使って、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;の結合則を満たす&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;で、これまた&lt;code&gt;Monoid&lt;/code&gt;の結合則を満たす&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;を使っているのです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;やっぱり&lt;code&gt;Writer&lt;/code&gt;は&lt;code&gt;Monoid&lt;/code&gt;あっての&lt;code&gt;Monad&lt;/code&gt;と言えますね。&lt;/p&gt;
&lt;h2 id=&#34;doと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#doと&#34; title=&#34;doと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;do&lt;/code&gt;と&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;さて、この「&lt;code&gt;b&lt;/code&gt;を返すついでに&lt;code&gt;w1&lt;/code&gt;と&lt;code&gt;w2&lt;/code&gt;を&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;でくっつける」という&lt;code&gt;Writer&lt;/code&gt;の振る舞いが象徴するように、大抵の&lt;code&gt;Monad&lt;/code&gt;のインスタンスにおける&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;は、&lt;strong&gt;何かしら値を返すついでに、何らかの処理を行う&lt;/strong&gt;よう実装されています。この「ついでに行われる処理」は&lt;code&gt;Monad&lt;/code&gt;のインスタンスを&lt;code&gt;do&lt;/code&gt;記法の中で扱うと、ますます静かに身を隠すようになります。&lt;/p&gt;
&lt;p&gt;こちらも&lt;code&gt;Writer&lt;/code&gt;を例に説明しましょう。まず、例示用に&lt;code&gt;Writer&lt;/code&gt;を作るアクションを適当に定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addLogging ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;addLogging x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; y, [&lt;span class=&#34;st&#34;&gt;&amp;quot;Adding &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; to &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; y &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;multLogging ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;multLogging x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; y, [&lt;span class=&#34;st&#34;&gt;&amp;quot;Multiplying &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; with &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; y &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;addLogging&lt;/code&gt;と&lt;code&gt;multLogging&lt;/code&gt;はそれぞれ、引数として受け取った整数を足し算したりかけ算したりしつつ、「足したよ」「かけたよ」という内容の文字列を一緒に返します。&lt;code&gt;Writer [String] Int&lt;/code&gt;における&lt;code&gt;[String]&lt;/code&gt;にログとして書き込んでいるようなイメージで捉えてください。&lt;/p&gt;
&lt;p&gt;これらを&lt;code&gt;do&lt;/code&gt;の中で使ってみると、より&lt;code&gt;addLogging&lt;/code&gt;や&lt;code&gt;multLogging&lt;/code&gt;が「足し算やかけ算をするついでに、ログとして書き込んでいる」っぽいイメージが伝わるでしょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;testDo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;testDo &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  result1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; addLogging &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;  result2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; multLogging &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;  addLogging result1 result2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;small&gt;⚠️申し訳なくも&lt;code&gt;do&lt;/code&gt;記法自体の解説、つまり&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;がどのように&lt;code&gt;do&lt;/code&gt;記法に対応するかはここには書きません。お近くの&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門書をご覧ください。&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;👆では、&lt;code&gt;3 + 4&lt;/code&gt;した結果&lt;code&gt;result1&lt;/code&gt;と、&lt;code&gt;5 * 2&lt;/code&gt;した結果&lt;code&gt;result2&lt;/code&gt;を足す処理を行っています。それに加えて、「足したよ」「かけたよ」というログを表す文字列のリスト&lt;code&gt;[String]&lt;/code&gt;も一緒に返しています。&lt;code&gt;do&lt;/code&gt;記法が&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;に変換されるのに従い、&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;が内部で&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;を使い、&lt;code&gt;addLogging 3 4&lt;/code&gt;・&lt;code&gt;multLogging 5 2&lt;/code&gt;・&lt;code&gt;addLogging result1 result2&lt;/code&gt;が返した文字列のリスト&lt;code&gt;[String]&lt;/code&gt;を結合することによって、あたかも&lt;code&gt;addLogging&lt;/code&gt;や&lt;code&gt;multLogging&lt;/code&gt;が「値を返しつつ、ログとして書き込む」かのような処理を実現できるのが&lt;code&gt;Writer&lt;/code&gt;における&lt;code&gt;do&lt;/code&gt;記法の特徴です。&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;p&gt;能書きはここまでにして、実際にどのような結果になるか見てみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; runWriter testDo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;17&lt;/span&gt;,[&lt;span class=&#34;st&#34;&gt;&amp;quot;Adding 3 to 4.&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;Multiplying 5 with 2.&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;Adding 7 to 10.&amp;quot;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、&lt;code&gt;3 + 4&lt;/code&gt;と&lt;code&gt;5 * 2&lt;/code&gt;の結果を足し算した結果&lt;code&gt;17&lt;/code&gt;と、&lt;code&gt;addLogging 3 4&lt;/code&gt;・&lt;code&gt;multLogging 5 2&lt;/code&gt;・&lt;code&gt;addLogging result1 result2&lt;/code&gt;が一緒に返していた文字列のリスト&lt;code&gt;[String]&lt;/code&gt;が、書いた順番どおりに結合されて返ってきました。&lt;code&gt;Writer&lt;/code&gt;は&lt;code&gt;do&lt;/code&gt;記法の中に書いた&lt;code&gt;Writer&lt;/code&gt;の値&lt;code&gt;(a, w)&lt;/code&gt;のうち、&lt;code&gt;Monoid&lt;/code&gt;のインスタンスである&lt;code&gt;w&lt;/code&gt;を&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;で都度結合させているということが伝わったでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;writer-monadの結合則とmonoidの結合則&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#writer-monadの結合則とmonoidの結合則&#34; title=&#34;writer-monadの結合則とmonoidの結合則&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;の結合則と&lt;code&gt;Monoid&lt;/code&gt;の結合則&lt;/h2&gt;
&lt;p&gt;ここまでで、&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;がどのように&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;を使っているのか、それによって&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;や&lt;code&gt;do&lt;/code&gt;記法がどのように振る舞っているのか、具体例を示して説明いたしました。ここからは、&lt;code&gt;Writer&lt;/code&gt;が&lt;code&gt;Monoid&lt;/code&gt;の&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;の結合則をどう利用することで、&lt;code&gt;Monad&lt;/code&gt;としての&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を満たしているのかを示しましょう。長いので「めんどい！」という方は&lt;a href=&#34;#associative-law-qed&#34;&gt;こちらをクリックしてスキップ&lt;/a&gt;してください。&lt;/p&gt;
&lt;p&gt;そのために、&lt;code&gt;Monad&lt;/code&gt;の結合則における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;を、&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;として展開してみます。&lt;/p&gt;
&lt;!-- ReadmeTest: Ignore --&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(0)&lt;/span&gt; &lt;code&gt;Monad&lt;/code&gt;の結合則&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(1)&lt;/span&gt; &lt;code&gt;m&lt;/code&gt;は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の左辺なので&lt;code&gt;Writer (a, w1)&lt;/code&gt;に置き換える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;※ここからは、比較しやすくするために等式&lt;code&gt;=&lt;/code&gt;の左辺と右辺を別々の行に書きます。&lt;/small&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(2)&lt;/span&gt; 一つ目の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;を&lt;code&gt;Writer&lt;/code&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の定義で置き換える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(3)&lt;/span&gt; 等式&lt;code&gt;=&lt;/code&gt;の右辺における一つ目の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;も同様に変換する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k x) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-7&#34; title=&#34;7&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(4)&lt;/span&gt; 無名関数である&lt;code&gt;(\x -&amp;gt; k x &amp;gt;&amp;gt;= h)&lt;/code&gt;と&lt;code&gt;(\x -&amp;gt; k x)&lt;/code&gt;に、&lt;code&gt;a&lt;/code&gt;を適用する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-7&#34; title=&#34;7&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(5)&lt;/span&gt; 等式&lt;code&gt;=&lt;/code&gt;の左辺における二つ目の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;を&lt;code&gt;Writer&lt;/code&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の定義で置き換える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-10&#34; title=&#34;10&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(6)&lt;/span&gt; 等式&lt;code&gt;=&lt;/code&gt;の右辺における二つ目の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;も同様に変換する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-6&#34; title=&#34;6&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-10&#34; title=&#34;10&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-12&#34; title=&#34;12&#34;&gt;     &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(7)&lt;/span&gt; &lt;code&gt;Writer&lt;/code&gt;は、&lt;code&gt;Writer&lt;/code&gt;と&lt;code&gt;(a, w)&lt;/code&gt;を切り替えるだけで実質何もしていないので削除する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-4&#34; title=&#34;4&#34;&gt;          (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-6&#34; title=&#34;6&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-9&#34; title=&#34;9&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-10&#34; title=&#34;10&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-11&#34; title=&#34;11&#34;&gt;        (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-12&#34; title=&#34;12&#34;&gt;     &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(7.5) (7)&lt;/span&gt;の等式をよく見ると、&lt;code&gt;=&lt;/code&gt;の左辺においては&lt;code&gt;(b, w2)&lt;/code&gt;と&lt;code&gt;(d, w3 &amp;lt;&amp;gt; w4)&lt;/code&gt;が、&lt;code&gt;=&lt;/code&gt;の右辺においては&lt;code&gt;(c, w3)&lt;/code&gt;と&lt;code&gt;(b, w1 &amp;lt;&amp;gt; w2)&lt;/code&gt;が等しい。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;--           ここの(b, w2)は、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-4&#34; title=&#34;4&#34;&gt;          (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4) &lt;span class=&#34;co&#34;&gt;-- ここの(d, w3 &amp;lt;&amp;gt; w4)を代入したもの！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-6&#34; title=&#34;6&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-9&#34; title=&#34;9&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-10&#34; title=&#34;10&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (b, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2) &lt;span class=&#34;co&#34;&gt;-- ここで代入している！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-11&#34; title=&#34;11&#34;&gt;        (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-12&#34; title=&#34;12&#34;&gt;     &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(8) (7.5)&lt;/span&gt;から、&lt;code&gt;=&lt;/code&gt;の左辺では&lt;code&gt;b = d&lt;/code&gt;で&lt;code&gt;w2 = w3 &amp;lt;&amp;gt; w4&lt;/code&gt;、&lt;code&gt;=&lt;/code&gt;の右辺では&lt;code&gt;c = d&lt;/code&gt;で&lt;code&gt;w3 = w1 &amp;lt;&amp;gt; w2&lt;/code&gt;であることがわかる。なのでそれぞれ置き換える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;    (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;    (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (w3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-7&#34; title=&#34;7&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-8&#34; title=&#34;8&#34;&gt;    (d, w4) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-9&#34; title=&#34;9&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (d, (w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w4)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&#34;associative-law-qed&#34;&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(9)&lt;/span&gt; &lt;code&gt;a&lt;/code&gt;～&lt;code&gt;d&lt;/code&gt;・&lt;code&gt;w1&lt;/code&gt;～&lt;code&gt;w4&lt;/code&gt;の変数名を、登場した順番に振り直す&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; title=&#34;2&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; title=&#34;3&#34;&gt;    (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; title=&#34;4&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (c, w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (w2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w3))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (a, w1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; title=&#34;7&#34;&gt;    (b, w2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; k a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; title=&#34;8&#34;&gt;    (c, w3) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-9&#34; title=&#34;9&#34;&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (c, (w1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w2) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; w3)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等式&lt;code&gt;=&lt;/code&gt;の左辺と右辺がそっくりな式になりましたね！&lt;/p&gt;
&lt;p&gt;ここで、&lt;code&gt;Monoid&lt;/code&gt;の結合則を思い出してみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (y &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そう、&lt;code&gt;x &amp;lt;&amp;gt; y &amp;lt;&amp;gt; z&lt;/code&gt;などと書いて&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの&lt;code&gt;Monoid&lt;/code&gt;型クラスのインスタンスの値を&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;でくっつけるときは、カッコで囲って&lt;code&gt;(y &amp;lt;&amp;gt; z)&lt;/code&gt;を先に計算しようと、&lt;code&gt;(x &amp;lt;&amp;gt; y)&lt;/code&gt;を先に計算しようと、結果が変わらない、というものでした！&lt;/p&gt;
&lt;p&gt;それを踏まえて、&lt;span class=&#34;ascii&#34;&gt;(9)&lt;/span&gt;の等式&lt;code&gt;=&lt;/code&gt;の両辺をよく見比べてみてください。異なっているのは&lt;code&gt;w1 &amp;lt;&amp;gt; (w2 &amp;lt;&amp;gt; w3)&lt;/code&gt;と&lt;code&gt;(w1 &amp;lt;&amp;gt; w2) &amp;lt;&amp;gt; w3)&lt;/code&gt;の箇所だけですね！つまり、&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則は、&lt;code&gt;w1 &amp;lt;&amp;gt; (w2 &amp;lt;&amp;gt; w3)&lt;/code&gt;と&lt;code&gt;(w1 &amp;lt;&amp;gt; w2) &amp;lt;&amp;gt; w3)&lt;/code&gt;が等しいから、すなわち&lt;code&gt;Monoid&lt;/code&gt;における&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;の結合則が成り立つからこそ成立するのです。これがまさしく「&lt;code&gt;Monoid&lt;/code&gt;と&lt;code&gt;Writer&lt;/code&gt;の切っても切り離せない関係」なのです！&lt;/p&gt;
&lt;h1 id=&#34;関係を壊してみる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関係を壊してみる&#34; title=&#34;関係を壊してみる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関係を壊してみる&lt;/h1&gt;
&lt;p&gt;それではいよいよ、「&lt;code&gt;Monoid&lt;/code&gt;と&lt;code&gt;Writer&lt;/code&gt;の切っても切り離せない関係」を利用して、&lt;code&gt;Monad&lt;/code&gt;則を破ってみましょう💣&lt;/p&gt;
&lt;h2 id=&#34;とmonoidの結合則&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#とmonoidの結合則&#34; title=&#34;とmonoidの結合則&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;Monoid&lt;/code&gt;の結合則&lt;/h2&gt;
&lt;p&gt;前述のとおり、&lt;code&gt;Writer&lt;/code&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;が結合則を満たすのは、&lt;code&gt;Writer&lt;/code&gt;がラップしている&lt;code&gt;Monoid&lt;/code&gt;な値の&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;が結合則を満たしてこそ、なのでした。これは言い換えれば、その、ラップしている&lt;code&gt;Monoid&lt;/code&gt;な値の&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;が結合則を破れば、自然に&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;も結合則を破るはずです。この方法は、結合則を満たさない&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;っぽい処理をゼロから探すより遥かに簡単です。&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;のような&lt;code&gt;m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;というややこしい型の関数よりも、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;のような&lt;code&gt;a -&amp;gt; a -&amp;gt; a&lt;/code&gt;という型の関数の方がずっと身近ですしね！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Monoid&lt;/code&gt;の&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;のような&lt;code&gt;a -&amp;gt; a -&amp;gt; a&lt;/code&gt;という型の関数で、結合則を満たさない処理 — といえば、引き算&lt;code&gt;-&lt;/code&gt;や割り算&lt;code&gt;/&lt;/code&gt;を思い浮かべる方が多いのではないでしょうか。と、いうわけで&lt;a href=&#34;#monoid-examples&#34;&gt;&lt;code&gt;Monoid&lt;/code&gt;の例&lt;/a&gt;で紹介した&lt;code&gt;Sum&lt;/code&gt;や&lt;code&gt;Product&lt;/code&gt;のように、数値に対する引き算を表す&lt;code&gt;newtype&lt;/code&gt;、&lt;code&gt;Difference&lt;/code&gt;を定義してみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getDifference ::&lt;/span&gt; a }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それから、&lt;code&gt;Difference&lt;/code&gt;を&lt;small&gt;（実際には間違いですが）&lt;/small&gt;&lt;code&gt;Monoid&lt;/code&gt;のインスタンスにします。最近の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では、&lt;code&gt;Monoid&lt;/code&gt;のインスタンスを定義する前に&lt;code&gt;Semigroup&lt;/code&gt;のインスタンスにする必要があるのでご注意ください。説明しやすさのために敢えてこれまで触れてきませんでしたが、これまで何度も使った&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;は実際のところ&lt;code&gt;Monoid&lt;/code&gt;の関数ではなく&lt;code&gt;Semigroup&lt;/code&gt;の関数なんですね。&lt;code&gt;Monoid&lt;/code&gt;は「&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;で（結合則を備えた）二項演算ができるだけでなく、&lt;code&gt;mempty&lt;/code&gt;という単位元もある」という性質の型クラスなので、「単に『&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;で（結合則を備えた）二項演算ができる』だけの型クラスも欲しい！」というニーズから、&lt;code&gt;Monoid&lt;/code&gt;の&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;は&lt;code&gt;Semigroup&lt;/code&gt;の関数となり、&lt;code&gt;Monoid&lt;/code&gt;は&lt;code&gt;Semigroup&lt;/code&gt;のサブクラスという関係に変わったのでした。&lt;/p&gt;
&lt;p&gt;何はともあれ、&lt;code&gt;Difference&lt;/code&gt;を&lt;code&gt;Semigroup&lt;/code&gt;のインスタンスにしましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、単に両辺を&lt;code&gt;-&lt;/code&gt;で引き算するだけですね。&lt;/p&gt;
&lt;p&gt;今度こそ&lt;code&gt;Difference&lt;/code&gt;を&lt;code&gt;Monoid&lt;/code&gt;のインスタンスにします。本記事では&lt;code&gt;mempty&lt;/code&gt;を直接使うことはないので何でもいいはずですが、とりあえず&lt;code&gt;Sum&lt;/code&gt;と同様に&lt;code&gt;0&lt;/code&gt;ということにしておきます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;😈これで&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;が結合則を満たさないおかしな&lt;code&gt;Monoid&lt;/code&gt;のインスタンス、&lt;code&gt;Difference&lt;/code&gt;ができました！早速試して結合則を破っていることを確認してみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは 1 - (2 - 3) と同じ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは (1 - 2) - 3 と同じなので...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- &amp;lt;- 当然 1 - (2 - 3) とは異なる結果に！&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バッチリ破れてますね！このように&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;における結合則は、引き算などおなじみの演算で、簡単に破ることができます💪&lt;/p&gt;
&lt;h2 id=&#34;とmonadの結合則&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#とmonadの結合則&#34; title=&#34;とmonadの結合則&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;と&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;における結合則を破ることができたと言うことは、&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;による結合則も、もはや破れたも同然です。先ほど定義した&lt;code&gt;Difference&lt;/code&gt;型を使えば、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;は途端に結合則を満たさなくなるでしょう。&lt;/p&gt;
&lt;p&gt;例を示す前に、&lt;code&gt;Writer&lt;/code&gt;を使う際しばしば用いられる、ユーティリティー関数を定義しておきます。実践で&lt;code&gt;Writer&lt;/code&gt;を使いたくなったときにも大変便利なので、是非覚えておいてください&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tell ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; w &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; w &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; w ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; title=&#34;2&#34;&gt;tell w &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; ((), w)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;tell&lt;/code&gt;関数は、受け取った&lt;code&gt;Monoid&lt;/code&gt;な値をそのまま「ログとして書き込む」関数です。結果として返す値はただのユニット&lt;code&gt;()&lt;/code&gt;なので、気にする必要がありません。&lt;code&gt;tell&lt;/code&gt;のみを使って&lt;code&gt;Writer&lt;/code&gt;を組み立てれば、「ログとして書き込む」値のみに集中することができます。これから紹介する例でもやはり関心があるのは「ログとして書き込む」値だけなので、ここで&lt;code&gt;tell&lt;/code&gt;を定義しました。&lt;/p&gt;
&lt;p&gt;それでは&lt;code&gt;tell&lt;/code&gt;を使って、&lt;code&gt;Writer&lt;/code&gt;の&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;における結合則も破ってみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは Difference 1 &amp;lt;&amp;gt; (Difference 2 &amp;lt;&amp;gt; Difference 3) と同じ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; runWriter &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは (Difference 1 &amp;lt;&amp;gt; Difference 2) &amp;lt;&amp;gt; Difference 3 と同じなので...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; runWriter &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; (tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;))) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- &amp;lt;- 当然 1 - (2 - 3) とは異なる結果に！&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;予想どおり一つ目の&lt;code&gt;Writer&lt;/code&gt;と二つ目の&lt;code&gt;Writer&lt;/code&gt;とで異なる結果となりました。&lt;code&gt;1 - (2 - 3)&lt;/code&gt;と&lt;code&gt;(1 - 2) - 3&lt;/code&gt;を&lt;code&gt;Writer&lt;/code&gt;を使って遠回しに言い換えているだけなので、当然と言えば当然です。&lt;/p&gt;
&lt;p&gt;しかし&lt;code&gt;tell (Difference 1) &amp;gt;&amp;gt;= (\_ -&amp;gt; tell (Difference 2) &amp;gt;&amp;gt;= \_ -&amp;gt; tell (Difference 3))&lt;/code&gt;などの&lt;code&gt;Writer&lt;/code&gt;型の式が&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;code&gt;m &amp;gt;&amp;gt;= (\x -&amp;gt; k x &amp;gt;&amp;gt;= h) = (m &amp;gt;&amp;gt;= (\x -&amp;gt; k x)) &amp;gt;&amp;gt;= h&lt;/code&gt;にどう対応するのか、ちょっと分かりづらいですかね？&lt;small&gt;（式も長いし）&lt;/small&gt;一つずつ注釈を加えます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは m &amp;gt;&amp;gt;= (\x -&amp;gt; k x &amp;gt;&amp;gt;= h) = (m &amp;gt;&amp;gt;= (\x -&amp;gt; k x)) &amp;gt;&amp;gt;= h の前半、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;--   m &amp;gt;&amp;gt;= (\x -&amp;gt; k x &amp;gt;&amp;gt;= h) に相当する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^^^^^^^^^^^^^^^^^^^       ^    ^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;--          m                x             k                             h&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらは m &amp;gt;&amp;gt;= (\x -&amp;gt; k x &amp;gt;&amp;gt;= h) = (m &amp;gt;&amp;gt;= (\x -&amp;gt; k x)) &amp;gt;&amp;gt;= h の後半、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;--   (m &amp;gt;&amp;gt;= (\x -&amp;gt; k x)) &amp;gt;&amp;gt;= h に相当する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  (tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;))) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;co&#34;&gt;--  ^^^^^^^^^^^^^^^^^^^       ^    ^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           m                x             k                             h&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ラムダ式の引数&lt;code&gt;x&lt;/code&gt;は実際には使われていない点に注意してください。これでも&lt;code&gt;const&lt;/code&gt;を使って&lt;code&gt;\x -&amp;gt; const (tell (Difference 2)) x&lt;/code&gt;と書き換えれば、&lt;code&gt;const (tell (Difference 2))&lt;/code&gt;が&lt;code&gt;k&lt;/code&gt;に厳密に対応するので、上記の二組の式は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を破るペアだと言えます。&lt;/p&gt;
&lt;h2 id=&#34;do記法とmonadの結合則&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#do記法とmonadの結合則&#34; title=&#34;do記法とmonadの結合則&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;do&lt;/code&gt;記法と&lt;code&gt;Monad&lt;/code&gt;の結合則&lt;/h2&gt;
&lt;p&gt;前の節では、&lt;code&gt;Monoid&lt;/code&gt;の結合則を守っていない値をラップしている&lt;code&gt;Writer&lt;/code&gt;を作ることで、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を破る例を簡単に作り出せることを紹介しました。ここでは本記事の最後として、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を破った結果、&lt;code&gt;do&lt;/code&gt;記法がいかに直感に反する挙動となるか紹介して、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を守ることが私たちにどのようなメリットをもたらすのか解説します。&lt;/p&gt;
&lt;p&gt;例として、先ほど&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を破るのに使った&lt;code&gt;1 - 2 - 3&lt;/code&gt;を再利用しましょう。&lt;code&gt;Difference&lt;/code&gt;をラップした&lt;code&gt;Writer&lt;/code&gt;で&lt;code&gt;1 - 2 - 3&lt;/code&gt;を計算させると、次のような式になります&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: ValidateAsExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; title=&#34;1&#34;&gt;tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを&lt;code&gt;do&lt;/code&gt;記法に変換すると、次のようになります&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; title=&#34;2&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-3&#34; title=&#34;3&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-4&#34; title=&#34;4&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;do&lt;/code&gt;記法における各行の間に&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;が隠れたことで、すっきりしましたね！&lt;/p&gt;
&lt;p&gt;この状態から、&lt;code&gt;do&lt;/code&gt;記法を使って&lt;code&gt;1 - (2 - 3)&lt;/code&gt;と&lt;code&gt;(1 - 2) - 3&lt;/code&gt;を表す&lt;code&gt;Writer&lt;/code&gt;の式にするには、次のように書き換えます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらが 1 - (2 - 3) を表す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; title=&#34;2&#34;&gt;do_1minus&amp;#39;2minus3&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-4&#34; title=&#34;4&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-6&#34; title=&#34;6&#34;&gt;      tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-7&#34; title=&#34;7&#34;&gt;      tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらが (1 - 2) - 3 を表す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-10&#34; title=&#34;10&#34;&gt;do_&amp;#39;1minus2&amp;#39;minus3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-13&#34; title=&#34;13&#34;&gt;      tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-14&#34; title=&#34;14&#34;&gt;      tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-15&#34; title=&#34;15&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コメントに書いたとおり、&lt;code&gt;do_1minus&#39;2minus3&#39;&lt;/code&gt;が&lt;code&gt;1 - (2 - 3)&lt;/code&gt;、&lt;code&gt;do_&#39;1minus2&#39;minus3&lt;/code&gt;が&lt;code&gt;(1 - 2) - 3&lt;/code&gt;と同等な&lt;code&gt;Writer&lt;/code&gt;です。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;はシングルクォートを変数の名前に含めることができるので、シングルクォートでカッコを表すことにしました&lt;small&gt;（まさかこんなところで役に立つとはね！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;上記の二つの式では、カッコ&lt;code&gt;()&lt;/code&gt;で囲う代わりにもう一つの&lt;code&gt;do&lt;/code&gt;記法に収めることで、&lt;code&gt;do&lt;/code&gt;記法における各行を実行する順番をいじっています。&lt;/p&gt;
&lt;p&gt;本当にこれで&lt;code&gt;1 - (2 - 3)&lt;/code&gt;や&lt;code&gt;(1 - 2) - 3&lt;/code&gt;と同等な式になっているのでしょうか？試しに&lt;code&gt;runWriter&lt;/code&gt;して結果を確かめてみましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらが 1 - (2 - 3) を表す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; runWriter do_1minus&amp;#39;2minus3&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- こちらが (1 - 2) - 3 を表す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDifference &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; runWriter do_&amp;#39;1minus2&amp;#39;minus3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バッチリ👌想定どおり、&lt;code&gt;do_1minus&#39;2minus3&#39;&lt;/code&gt;が&lt;code&gt;1 - (2 - 3) = 2&lt;/code&gt;を計算し、&lt;code&gt;do_&#39;1minus2&#39;minus3&lt;/code&gt;が&lt;code&gt;(1 - 2) - 3 = -4&lt;/code&gt;を計算していますね！&lt;/p&gt;
&lt;p&gt;さてこれまでで、&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;は&lt;code&gt;Monoid&lt;/code&gt;の結合則を利用することで&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を満たしていることを示し、ラップしている&lt;code&gt;Monoid&lt;/code&gt;な値が結合則を満たしていなければ、必然的に&lt;code&gt;Writer&lt;/code&gt;も結合則を破ってしまうことを、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;や&lt;code&gt;do&lt;/code&gt;記法を使って具体的に示しました。それでは今挙げた、&lt;code&gt;do&lt;/code&gt;記法で結合則を破った例は、一体何を示唆しているのでしょうか？普通に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でコードを書いていて、前述のような書き換え、すなわち、&lt;/p&gt;
&lt;!-- ReadmeTest: ValidateAsExpression --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; title=&#34;2&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-4&#34; title=&#34;4&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-5&#34; title=&#34;5&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;から、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-3&#34; title=&#34;3&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-4&#34; title=&#34;4&#34;&gt;    tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-5&#34; title=&#34;5&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;への書き換え&lt;small&gt;（あるいはその逆）&lt;/small&gt;は、一見するとそんな機会ないように思えます。しかしこれが、&lt;code&gt;do&lt;/code&gt;記法をカッコ代わりに使うという変な方法ではなく、次のように変数に代入することで切り出していた場合、いかがでしょうか？&lt;/p&gt;
&lt;!-- ReadmeTest: AppendAsIs --&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; title=&#34;1&#34;&gt;someSingleAction &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-3&#34; title=&#34;3&#34;&gt;someSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-4&#34; title=&#34;4&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-5&#34; title=&#34;5&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-7&#34; title=&#34;7&#34;&gt;someCompositeAction &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-8&#34; title=&#34;8&#34;&gt;  someSingleAction&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-9&#34; title=&#34;9&#34;&gt;  someSequence&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記👆のような三つの&lt;code&gt;Writer&lt;/code&gt;の値を、下記👇の三つの値にリファクタリングする場合です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; title=&#34;1&#34;&gt;refactoredSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-2&#34; title=&#34;2&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-3&#34; title=&#34;3&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-5&#34; title=&#34;5&#34;&gt;splitOutSingleAction &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-7&#34; title=&#34;7&#34;&gt;refactoredCompositeAction &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-8&#34; title=&#34;8&#34;&gt;  refactoredSequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-9&#34; title=&#34;9&#34;&gt;  splitOutSingleAction&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あるいは、たった&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;行しかありませんし、一つの値に統合する方がいいかも知れません&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; title=&#34;1&#34;&gt;flattenedAction &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-2&#34; title=&#34;2&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-3&#34; title=&#34;3&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-4&#34; title=&#34;4&#34;&gt;  tell (&lt;span class=&#34;dt&#34;&gt;Difference&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらの書き換えは、いずれも&lt;code&gt;do&lt;/code&gt;記法が内部で使っている&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を前提とすれば、可能であってしかるべきです。&lt;code&gt;do&lt;/code&gt;記法は、適当に&lt;code&gt;Monad&lt;/code&gt;のインスタンスの値（「アクション」などとも呼ばれます）を上から下まで列挙すれば、自動で&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;を使ってつなげてくれる、というものです。なので、適当に並べたアクションがどういう形に結合されるのか気にする必要があるのでは、安心して使えません。一方、上記の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;組の式は、&lt;code&gt;Writer Difference&lt;/code&gt;、すなわち引き算を表す「偽&lt;code&gt;Monoid&lt;/code&gt;」をラップしているが故に、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の結合則を満たしておりません。結果、&lt;code&gt;do&lt;/code&gt;記法に変えたときに並べたアクションをどこで切り出すかで、結果が変わってしまいます。これでは安心して列挙できません！&lt;/p&gt;
&lt;!-- ReadmeTest: CompareAfterPrompt ByExpression --&gt;
&lt;!--
```haskell
&gt; getDifference . snd $ runWriter someCompositeAction
2
&gt; getDifference . snd $ runWriter refactoredCompositeAction
-4
&gt; getDifference . snd $ runWriter flattenedAction
2
```
--&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;p&gt;以上です。これまでで、&lt;code&gt;Monad&lt;/code&gt;則のうち結合則がなぜ重要なのか、結合則を実際に破ってみることを通じて説明しました。&lt;code&gt;Monad&lt;/code&gt;と同様に結合則を持った&lt;code&gt;Monoid&lt;/code&gt;は、&lt;code&gt;Monad&lt;/code&gt;以上にインスタンスを見つけるのが簡単で、なおかつ、例えば引き算のように「二項演算だけど結合則を満たしていない」処理を見つけるのが簡単です。本記事では&lt;code&gt;Monoid&lt;/code&gt;のそうした性質と、&lt;code&gt;Monoid&lt;/code&gt;の性質でもって&lt;code&gt;Monad&lt;/code&gt;則を満たしている&lt;code&gt;Writer&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt;に注目することで、簡単に&lt;code&gt;Monad&lt;/code&gt;則を破る例を提示することができました。それから、&lt;code&gt;Monad&lt;/code&gt;の結合則を実際に破った例を使って、&lt;code&gt;Monad&lt;/code&gt;の結合則が&lt;code&gt;do&lt;/code&gt;記法を自然に書けるようにするために必要であることを示しました。これらの実例から主張したいことを一般化すると、次のとおりです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt;記法の各行の間で、値を返すついでに何かを行うのが&lt;code&gt;Monad&lt;/code&gt;のインスタンス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt;記法の各行の間で、値を返すついでに行っている処理が結合則を満たす型が、&lt;code&gt;Monad&lt;/code&gt;則を満たすと言える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;則を守らない型を&lt;code&gt;do&lt;/code&gt;記法で使うと、&lt;code&gt;do&lt;/code&gt;記法の結合を気にして書かなければならなくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それでは、&lt;span class=&#34;ascii&#34;&gt;2021&lt;/span&gt;年も🎁&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking with Monad&lt;/span&gt;🎁&lt;span class=&#34;ascii&#34;&gt;!&lt;/span&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;一応、&lt;code&gt;Monad&lt;/code&gt;についてはそのスーパークラスである&lt;code&gt;Applicative&lt;/code&gt;の則、&lt;code&gt;Functor&lt;/code&gt;の則がありますが、&lt;code&gt;Monad&lt;/code&gt;則を満たしていればそれらは自動的に満たせるので、ここでは省略します。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;残念ながら実際のところ、&lt;code&gt;Float&lt;/code&gt;型・&lt;code&gt;Double&lt;/code&gt;型などの浮動小数点数に対する&lt;code&gt;Sum&lt;/code&gt;や&lt;code&gt;Product&lt;/code&gt;は結合則を満たさない場合があります。これは他の多くのプログラミング言語にもある、浮動小数点数の悩ましい問題です。詳しくは「情報落ち」で検索してみてください。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;ここでの定義は、実際に使われている&lt;a href=&#34;http://hackage.haskell.org/package/transformers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;transformers&lt;/span&gt;パッケージ&lt;/a&gt;の&lt;code&gt;Writer&lt;/code&gt;の定義とは大きく異なっているのでご注意ください。実際の&lt;code&gt;Writer&lt;/code&gt;はパフォーマンス上の都合や&lt;span class=&#34;ascii&#34;&gt;Monad Transformer&lt;/span&gt;との兼ね合いで、幾分工夫された定義となっています。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/about_admins.html&#34; lang=&#34;ja&#34;&gt;日本Haskellユーザーグループ管理委員会（Haskell-jp Admins）設立のお知らせ&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/antenna-with-gh-actions.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell AntennaのCI/CDをGitHub Actionsに移行する&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2020/12/16/004851</id><title type="text">liszt: Append onlyでリーダーとライターが分離されたKVS</title><updated>2020-12-16T00:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2020/12/16/004851"/><summary type="html">adventar.org 以前仕事で使おうとして没になったアイデアを改めて記事にまとめる。 動機 以前書いた記事で説明したものとほとんど一緒である。 fumieval.hatenablog.com プログラムのログをリアルタイムに監視する仕組みが欲しいが、その仕組みがダウンしても監視対象には影響を及ぼさないようにしたいというのポイントだ。 そのため、ライター側はファイルに書き込み、リーダーはinotifyなどでファイルを監視するという、書き込みにサーバーを必要としない仕組みにした。 さらに、途中でクラッシュしても問題ないよう、ファイルはappend-onlyとし、ファイルの最後にページを書き込…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/09/26/shake_%2B_lucid_%2B_hint_%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E7%94%9F%E6%88%90</id><title type="text">shake + lucid + hint で静的ウェブサイト生成</title><updated>2020-12-12T17:55:48+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/09/26/shake_%2B_lucid_%2B_hint_%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E7%94%9F%E6%88%90"/><summary type="html">The English version is at Dev. 同人活動用のウェブサイトがあって今までは Jekyll で生成していました。これを Shake + Lucid + Hint で作成した生成器に置き換えました。 doujin.kakkun61.com shakebuild.com hackage.haskell.org hackage.haskell.org ソースコードはこちらです。 github.com 経緯 GitHub Pages をホストに選択したので最初は自然に Jekyll を選びました。レールに乗っているうちはいいのですが外れたことをしようとすると難しくなってきまし…</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/antenna-with-gh-actions.html</id><title type="text">Haskell AntennaのCI/CDをGitHub Actionsに移行する</title><updated>2020-12-12T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/antenna-with-gh-actions.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2020/antenna-with-gh-actions/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;バイナリのビルドや&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージのビルドに&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;を、バイナリを実行してページの更新をするのに&lt;span class=&#34;ascii&#34;&gt;DroneCI&lt;/span&gt;を使っていました。 しかし、長らく放置していてちゃんと動作しているか怪しかったので、メンテナンスをするついでに昨今はやり（要出典）の&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/26&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub Actions&lt;/span&gt;にこれらを移行することにしました&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2020/antenna-with-gh-actions/pr.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#stackプロジェクトのビルド&#34; title=&#34;stackプロジェクトのビルド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;プロジェクトのビルド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dockerイメージのビルドとプッシュ&#34; title=&#34;dockerイメージのビルドとプッシュ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージのビルドとプッシュ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#antennaプログラムの実行&#34; title=&#34;antennaプログラムの実行&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムの実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;stackプロジェクトのビルド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stackプロジェクトのビルド&#34; title=&#34;stackプロジェクトのビルド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;プロジェクトのビルド&lt;/h3&gt;
&lt;p&gt;まずはバイナリのビルドを行うように設定します。 &lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;のプログラムは&lt;span class=&#34;ascii&#34;&gt;Haskell Stack&lt;/span&gt;を利用しているので、&lt;code&gt;stack build&lt;/code&gt;が実行できれば良いです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;pull_request:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;null&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;push:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branches:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;build:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.os }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;runs-on:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;strategy:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;fail-fast:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;matrix:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;ghc:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.8.4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;id:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;path:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;key:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;st&#34;&gt;          ${{ runner.os }}-stack\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;st&#34;&gt;          -${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;st&#34;&gt;          -${{ hashFiles(&amp;#39;**/package.yaml&amp;#39;) }}\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;&lt;span class=&#34;st&#34;&gt;        &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;          ${{ runner.os }}-stack-&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell/actions/setup@main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;ghc-version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;enable-stack:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;stack-version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Install dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc test --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build and Test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc test --copy-bins --local-bin-path=./bin&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは、&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;が作られたときや&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;がプッシュされたときに実行されることを想定しています。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub Actions&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Haskell Stack&lt;/span&gt;を使うには、&lt;del&gt;公式が提供している&lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;actions/setup-haskell&lt;/span&gt;&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/haskell/actions/tree/main/setup&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell/actions/setup&lt;/span&gt;&lt;/a&gt; を利用します。 元々は&lt;span class=&#34;ascii&#34;&gt;actions/haskell-setup&lt;/span&gt;がありましたが、どうやら&lt;a href=&#34;https://github.com/actions/setup-haskell/pull/56&#34;&gt;メンテナンスする人がいなくなったっぽく&lt;/a&gt;アーカイブされてしまいました。 この記事を書いている時点では移行したばかりでちゃんとタグが切られていないため、&lt;span class=&#34;ascii&#34;&gt;main&lt;/span&gt;ブランチを指定しています。 ちなみに、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;プロジェクトの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;バージョンを&lt;span class=&#34;ascii&#34;&gt;haskell/actions/setup&lt;/span&gt;でインストールして、&lt;code&gt;stack --system-ghc&lt;/code&gt;をすることでキャッシュサイズを減らすことができます。&lt;/p&gt;
&lt;p&gt;これまた余談ですが、&lt;span class=&#34;ascii&#34;&gt;actions/setup-haskell&lt;/span&gt;の方を使っていて次のようなエラーが出る場合は&lt;span class=&#34;ascii&#34;&gt;actions/setup-haskell&lt;/span&gt;のバージョンが古いです（&lt;a href=&#34;https://github.com/actions/setup-haskell/issues/44&#34;&gt;最新では修正済みです&lt;/a&gt;）。&lt;span class=&#34;ascii&#34;&gt;haskell/actions/setup&lt;/span&gt;の方を使いましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;Installing&lt;/span&gt; ghc version 8.8.4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Error&lt;/span&gt;: Unable to process command &lt;span class=&#34;st&#34;&gt;&amp;#39;::add-path::/opt/ghc/8.8.4/bin&amp;#39;&lt;/span&gt; successfully.&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Error&lt;/span&gt;: The &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;add-path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; command is disabled. Please upgrade to using Environment Files or opt into unsecure command execution by setting the &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;ACTIONS_ALLOW_UNSECURE_COMMANDS&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; environment variable to &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;. For more information see: https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;dockerイメージのビルドとプッシュ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dockerイメージのビルドとプッシュ&#34; title=&#34;dockerイメージのビルドとプッシュ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージのビルドとプッシュ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/haskelljp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムは&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージにして&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;に置いてあります&lt;/a&gt;（これも&lt;span class=&#34;ascii&#34;&gt;GitHub Container Registry&lt;/span&gt;に移行したいですね）。 なので、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;の更新に合わせて&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージをビルドしてプッシュするジョブを設定します。 &lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージのビルドとプッシュには&lt;a href=&#34;https://github.com/docker/build-push-action&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;docker/build-push-action&lt;/span&gt;&lt;/a&gt;を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# さっきと同じ設定ファイルです&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;pull_request:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;null&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;push:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branches:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;build:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.os }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;runs-on:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;strategy:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;fail-fast:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;matrix:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;ghc:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.8.4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;    ... &lt;span class=&#34;co&#34;&gt;# 割愛&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build and Test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc test --copy-bins --local-bin-path=./bin&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;co&#34;&gt;# Build and Push Docker Image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup QEMU&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker/setup-qemu-action@master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;platforms:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; all&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Docker Buildx&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;id:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; buildx&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker/setup-buildx-action@master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; latest&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Login to DockerHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-31&#34; title=&#34;31&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker/login-action@v1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-33&#34; title=&#34;33&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ secrets.DOCKER_USERNAME }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-34&#34; title=&#34;34&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ secrets.DOCKERHUB_TOKEN }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build and push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-36&#34; title=&#34;36&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker/build-push-action@v2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-37&#34; title=&#34;37&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-38&#34; title=&#34;38&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;context:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-39&#34; title=&#34;39&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;builder:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ steps.buildx.outputs.name }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-40&#34; title=&#34;40&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;tags:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskelljp/antenna:latest&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-41&#34; title=&#34;41&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;push:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ github.event_name != &amp;#39;pull_request&amp;#39; }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-42&#34; title=&#34;42&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;build-args:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; local_bin_path=./bin&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチへのプッシュのときにだけ&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージのプッシュをして欲しいので、&lt;code&gt;push:&lt;/code&gt; に &lt;code&gt;github.event_name != &#39;pull_request&#39;&lt;/code&gt; を設定しています。 また、&lt;span class=&#34;ascii&#34;&gt;Haskell Stack&lt;/span&gt;でビルドされたバイナリファイルは&lt;code&gt;--local-bin-path=./bin&lt;/code&gt;オプションで&lt;code&gt;./bin&lt;/code&gt;に置いてあります。 これを&lt;span class=&#34;ascii&#34;&gt;Dockerfile&lt;/span&gt;でコピーするようにしている（下記参照）ので、&lt;code&gt;docker build&lt;/code&gt;の引数に&lt;code&gt;local_bin_path=./bin&lt;/code&gt;というのを与える必要がありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell:git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path} /root/.local/bin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように前の&lt;span class=&#34;ascii&#34;&gt;step&lt;/span&gt;までの結果を利用するには &lt;code&gt;context: .&lt;/code&gt; を指定する必要があります（デフォルトでは&lt;a href=&#34;https://github.com/docker/build-push-action/tree/v2#git-context&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;git-context&lt;/span&gt;&lt;/a&gt;というのを使うからです）。&lt;/p&gt;
&lt;h3 id=&#34;antennaプログラムの実行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#antennaプログラムの実行&#34; title=&#34;antennaプログラムの実行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムの実行&lt;/h3&gt;
&lt;p&gt;最後に、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;の更新があったときに&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを実行して&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;ページを更新するような設定をします。 日毎のスケジュール実行も設定したいので、新しいワークフローを切りました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Update Antenna page&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;schedule:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cron:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;0 8 * * *&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;push:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branches:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;paths-ignore:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;CHANGELOG.md&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;LICENSE&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.gitignore&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;update:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.os }}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;runs-on:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;strategy:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;fail-fast:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;matrix:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;ghc:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.8.4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;    ... &lt;span class=&#34;co&#34;&gt;# Install dependenciesまでは一緒なので割愛&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;uses:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;with:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-28&#34; title=&#34;28&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;ref:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;gh-pages&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;path:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;temp&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Exec Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;fu&#34;&gt;      run:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-32&#34; title=&#34;32&#34;&gt;        cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-33&#34; title=&#34;33&#34;&gt;        cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-34&#34; title=&#34;34&#34;&gt;        cd temp &amp;amp;&amp;amp; stack exec -- antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Push changes&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-36&#34; title=&#34;36&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;env:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-37&#34; title=&#34;37&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;COMMIT_MESSAGE:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Update haskell antenna. See https://haskell.jp/antenna/ for new entries!&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-38&#34; title=&#34;38&#34;&gt;&lt;span class=&#34;fu&#34;&gt;      run:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-39&#34; title=&#34;39&#34;&gt;        git config --local user.email &amp;quot;bot@example.com&amp;quot;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-40&#34; title=&#34;40&#34;&gt;        git config --local user.name &amp;quot;Bot&amp;quot;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-41&#34; title=&#34;41&#34;&gt;        git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-42&#34; title=&#34;42&#34;&gt;        git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-43&#34; title=&#34;43&#34;&gt;        git diff --staged --quiet || git commit -m &amp;quot;$COMMIT_MESSAGE&amp;quot;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-44&#34; title=&#34;44&#34;&gt;        git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-45&#34; title=&#34;45&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;working-directory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ./temp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バイナリをビルドするところまでは一緒です。 &lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;は同じリポジトリの&lt;span class=&#34;ascii&#34;&gt;gh-pages&lt;/span&gt;ブランチに置いて、&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;を使って公開しています。 なので、同じリポジトリの&lt;span class=&#34;ascii&#34;&gt;gh-pages&lt;/span&gt;ブランチを&lt;span class=&#34;ascii&#34;&gt;git clone&lt;/span&gt;しなおしてサブディレクトリに置き、そこで&lt;span class=&#34;ascii&#34;&gt;antenna&lt;/span&gt;プログラムを実行して、更新があった場合にのみプッシュしています。 同じリポジトリであれば、特に設定することなくプッシュできるのが&lt;span class=&#34;ascii&#34;&gt;GitHub Actions&lt;/span&gt;のメリットですね。&lt;/p&gt;
&lt;h2 id=&#34;おまけzennを追加しました&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おまけzennを追加しました&#34; title=&#34;おまけzennを追加しました&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おまけ：&lt;span class=&#34;ascii&#34;&gt;Zenn&lt;/span&gt;を追加しました！&lt;/h2&gt;
&lt;p&gt;ついでに最近のアップデートによって、&lt;a href=&#34;https://github.com/haskell-jp/antenna/pull/25&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Zenn&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;に載せるサイトへ追加しました&lt;/a&gt;（&lt;span class=&#34;ascii&#34;&gt;igrep&lt;/span&gt;氏がしてくれました、ありがとうございます）。 アイコンの利用規約などがわからなかったのですが、&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;上で直接聞いてみたところ、問題ないという回答をいただきました。 突然だったのにありがとうございます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2020/antenna-with-gh-actions/antenna-page-with-zenn.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/break-monad-law-with-writer.html&#34; lang=&#34;ja&#34;&gt;Writer Monadで気軽にMonad則を破る&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/how-to-use-type-newtype-data.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;data / newtype / type の使い方&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/12/02/181155</id><title type="text">Kubernetes: kube-scheduler をソースコードレベルで理解する</title><updated>2020-12-03T17:56:17+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/12/02/181155"/><summary type="html">はじめに Kubernetes において、Pod を配置するための Node を決定する手続きをスケジューリングと呼び、デフォルトのクラスタでは kube-scheduler がその責務を担っています。本記事ではこの kube-scheduler のソースコードを時系列に沿って追いつつ、どのようなロジックで Pod を配置する Node が決定されるのかを解説します。 なお、本記事は Kubernetes の内部実装について学ぶ勉強会 Kubernetes Internal #3 の補足資料を意図して執筆されました。本文中で参照しているソースコードのバージョンは v1.19.4 です。 Kub…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/11/14/214355</id><title type="text">安全性-活性分解定理とその関連研究</title><updated>2020-11-14T21:43:55+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/11/14/214355"/><summary type="html">こんにちは、チェシャ猫です。先日行われた第 7 回 Web System Architecture 研究会で形式手法について発表してきました。 普段、形式手法について登壇する際は具体例な検証例を出すことが多いですが、今回は理論側に寄せたサーベイになっています。 はじめに 本セッションでは、安全性-活性分解 (safety-liveness decomposition) と呼ばれる一連の結果について解説する。安全性-活性分解は、システムの仕様が与えられた時、それを安全性 (safety) および活性 (liveness) と呼ばれる、よりシンプルな特徴付けを持つクラスに分解して扱うための方法論で…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/11/03/Windows_%E3%81%8B%E3%82%89_Windows_%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E3%81%A8_Linux_%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E3%81%AE%E4%B8%A1%E6%96%B9%E3%81%AE_Docker_%E3%82%92</id><title type="text">Windows から Windows コンテナーと Linux コンテナーの両方の Docker を使う</title><updated>2020-11-03T02:20:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/11/03/Windows_%E3%81%8B%E3%82%89_Windows_%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E3%81%A8_Linux_%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E3%81%AE%E4%B8%A1%E6%96%B9%E3%81%AE_Docker_%E3%82%92"/><summary type="html">Docker Desktop for Windows は Windows コンテナーと Linux コンテナーが使えるのだけど排他的になっている。 そう思ってスクショを取るために切り替えボタンを押してみたら今はそうじゃない？Windows/Linux コンテナーの切り替え、前は完全に排他的だったと思ったけど、今は実行は両方できるのか？あとホストの再起動要らなくなってる？ まあ、そもそも Docker Desktop for Windows のコンテナーが排他的なの理由が分からないのよな。 で、両方のコンテナーをいじりたいのでラッパープログラムを作った。その内要らなくなりそうだけど。 イメージ図…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/10/28/Data.Monoid.First_%E3%81%A8_Data.Semigroup.First_%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF_Last</id><title type="text">Data.Monoid.First と Data.Semigroup.First あるいは Last</title><updated>2020-11-01T12:07:47+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/10/28/Data.Monoid.First_%E3%81%A8_Data.Semigroup.First_%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF_Last"/><summary type="html">Data.Monoid.First のドキュメントを見ていたら次の記述を見つけたことから始まる記事です。 This type will be marked deprecated in GHC 8.8, and removed in GHC 8.10. Users are advised to use the variant from Data.Semigroup and wrap it in Maybe. すでに GHC 8.10 がリリースされているのにまだなくなっていない気がしますが（GHC 9.0.1-alpha1 にもまだある）、Data.Monoid.First よりも Data.S…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/10/23/%E5%8B%95%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%AA%E3%82%BF%E3%83%BC%E8%A8%80%E8%AA%9E_Haskell</id><title type="text">動的型付けインタープリター言語 Haskell</title><updated>2020-10-24T00:13:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/10/23/%E5%8B%95%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%AA%E3%82%BF%E3%83%BC%E8%A8%80%E8%AA%9E_Haskell"/><summary type="html">コンパイルを待つなんて生産性が低い！ 通らないコード片のエラーなんか知らない！ えっ？！まだ静的型検査してコンパイルしてるの？ デキるプログラマーは動的型検査！インタープリット！ main = do input &lt;- readLn if input &lt; 10 then putStrLn &#34;Hi&#34; else putStrLn (&#34;Bad&#34; + input) このコードを実行するにはどうしてる？まさかこうしてる？ &gt; ghc main.hs main.hs:5:21: error: • No instance for (Num [Char]) arising from a use of ‘+’ •…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2020/10/02/204554</id><title type="text">自動printfデバッグ</title><updated>2020-10-02T22:49:54+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2020/10/02/204554"/><summary type="html">関数をデバッグするために、引数と戻り値をそれぞれ表示するというのを誰しもやったことがあると思う。今回はそれを自動化するからくりをHaskellで実装してみる。 目標となるのは、関数が与えられたとき、その引数と結果をターミナルに出力する関数に変換する高階関数、probe :: Traceable a =&gt; String -&gt; a -&gt; aである。 testDelay :: Double -&gt; Double -&gt; IO () testDelay dur dur&#39; = threadDelay $ round $ (dur + dur&#39;) * 1000000 *Probe&gt; probe &#34;testDe…</summary></entry><entry><id>https://blog.miz-ar.info/2020/09/techbookfest9/</id><title type="text">技術書典9に「浮動小数点数小話」を出します</title><updated>2020-09-13T09:17:29+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2020/09/techbookfest9/"/><summary type="html">昨日からオンラインで「技術書典9」が始まっています。昨今のアレで今回はオンラインです。だめぽラボでは1年ぶりに技術書典に出展しています。 今回は既刊「Haskellで戦う競技プログラミング」の改訂第2版を出したほか、新刊 [&amp;#8230;]</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/09/10/044848</id><title type="text">CloudNative Days Tokyo 2020 で CockroachDB と TLA+ について話してきました</title><updated>2020-09-10T04:48:48+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/09/10/044848"/><summary type="html">こんにちは、チェシャ猫です。先日行われた CloudNative Days Tokyo 2020 で、形式手法ツール TLA+ が CockroachDB の設計に使用された事例について発表してきました。公募 CFP 枠です。 講演概要 CockroachDB は、Google Spanner の系譜に連なるいわゆる NewSQL データベースの一種です。 強い一貫性や ACID トランザクションといった従来の関係データベースが持つ「良い特徴」を残したまま、従来の関係データベースが苦手としていた水平スケーリングにも優れるのが特徴です。CockroachDB 自身は「地理分散 (geo-dist…</summary></entry><entry><id>https://blog.miz-ar.info/2020/08/debugging-with-quickcheck/</id><title type="text">QuickCheckで競プロ用Haskellコードをデバッグする</title><updated>2020-08-27T06:27:45+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2020/08/debugging-with-quickcheck/"/><summary type="html">競技プログラミングでは、提出したプログラムが誤答（WA）だった場合に「どのような入力について」答えを間違えたのか（参加者には）分からないことが多いです。 こういう場合はエスパーするなり眼力でソースコードをぐっと睨んだりす [&amp;#8230;]</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/07/30/173935</id><title type="text">【#CODT2020 解説】Infrastructure as Code の静的テスト戦略</title><updated>2020-08-02T04:34:49+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/07/30/173935"/><summary type="html">こんにちは、チェシャ猫です。先日行われた Cloud Operator Days Tokyo 2020 で、Infrastructure as Code のテストについて発表してきました。公募 CFP 枠です。 Cloud Operator Days Tokyo 2020 は今回が初開催のイベントですが、昨年 CloudNative Days Tokyo と併設されていた OpenStack Days Tokyo が前身となっているようです。 ASCII.jp：ふれあえるオンラインイベント「Cloud Operator Days Tokyo 2020」は泥臭い？ 今年は OpenStack に…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html</id><title type="text">Haskell Language Server のインストール</title><updated>2020-07-12T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html"/><summary type="html">&lt;p&gt;HLS(Haskell Language Server) を &lt;strong&gt;手動で&lt;/strong&gt; インストールする方法を説明します。&lt;/p&gt;
&lt;p&gt;HLSを &lt;strong&gt;自動で&lt;/strong&gt; インストールする方法は以下のPRで開発中です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/pull/165&#34;&gt;GitHub Action static binaries and runtime libdir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alanz/vscode-hie-server/pull/236&#34;&gt;Automatic installation of haskell-language-server binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;実行環境&#34;&gt;実行環境&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 66%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;環境&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;OS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Ubuntu 18.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Stack&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;HLS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: ~/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;導入手順&#34;&gt;導入手順&lt;/h2&gt;
&lt;h3 id=&#34;hls-のインストール&#34;&gt;1. HLS のインストール&lt;/h3&gt;
&lt;p&gt;インストールには以下のものが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; (バージョン2.1.1以上)
&lt;ul&gt;
&lt;li&gt;または、&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/&#34;&gt;cabal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icu&lt;/code&gt; のライブラリなど&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要に応じてインストールしておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
$ sudo apt update
$ sudo apt install libicu-dev libncurses-dev libgmp-dev zlib1g-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;準備ができたらHLSを&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;リポジトリ&lt;/a&gt;からクローンしてインストールしましょう。(以下の例では &lt;strong&gt;GHC-8.8.3&lt;/strong&gt; を対象としています。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/haskell/haskell-language-server --recurse-submodules
$ cd haskell-language-server
$ stack ./install.hs hls&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールができました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ haskell-language-server --version
ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: /home/yamada/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;エディタの設定&#34;&gt;エディタの設定&lt;/h2&gt;
&lt;h3 id=&#34;vscode&#34;&gt;VSCode&lt;/h3&gt;
&lt;p&gt;拡張機能 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server&#34;&gt;Haskell Language Server&lt;/a&gt; をインストールし、 設定から &lt;code&gt;haskell-language-server&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2020/07-12/hls-vscode.png&#34; alt=&#34;VSCodeの設定&#34; /&gt;&lt;figcaption aria-hidden=&#34;true&#34;&gt;VSCodeの設定&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;emacs&#34;&gt;Emacs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;こちら&lt;/a&gt;の記事を参考に、 &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-haskell&#34;&gt;lsp-haskell&lt;/a&gt; をEmacsにインストールします。&lt;/p&gt;
&lt;p&gt;設定ファイルで以下のように &lt;code&gt;haskell-language-server-wrapper&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package lsp-haskell
 :ensure t
 :config
 (setq lsp-haskell-process-path-hie &amp;quot;haskell-language-server-wrapper&amp;quot;)
 ;; Comment/uncomment this line to see interactions between lsp client/server.
 ;;(setq lsp-log-io t)
)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;Emacs で Haskell IDE Engine を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/how-to-use-type-newtype-data.html</id><title type="text">data / newtype / type の使い方</title><updated>2020-06-14T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/how-to-use-type-newtype-data.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングにおいて，データ型は非常に重要な役割を持つ．データ型は，扱うデータをプログラミング上で安全かつ容易に加工するために用いられ，またデータに対してどのような操作ができるのかを規定する．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; には，データ型を新たに定義する方法が&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ目は &lt;code&gt;type&lt;/code&gt; キーワードによって定義する方法で，これにより定義されたデータ型は型シノニムと呼ばれる．&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ目は &lt;code&gt;data&lt;/code&gt; キーワードによって定義する方法で，これにより定義されたデータ型は代数的データ型と呼ばれる．&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ目は &lt;code&gt;newtype&lt;/code&gt; キーワードによってある型を元に新たな型を作る方法だ．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，それぞれどういう使い方をするのか，どういう違いがあるのかについて見ていきたいと思う．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#型シノニム&#34; title=&#34;型シノニム&#34;&gt;型シノニム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代数的データ型&#34; title=&#34;代数的データ型&#34;&gt;代数的データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ある型を元に新たな型を作る-datatype-renaming&#34; title=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;ある型を元に新たな型を作る &lt;span class=&#34;ascii&#34;&gt;(Datatype Renaming)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;型シノニム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型シノニム&#34; title=&#34;型シノニム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型シノニム&lt;/h2&gt;
&lt;p&gt;例えば，あなたは &lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt; サイトを運営していて，一部年齢制限が必要なため，人の年齢が &lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt; 歳以上かを判定する関数を書かなければいけないとする．年齢は整数だが，入力は必須でないため入力してない人もいる．その場合は，&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt; 歳以上でないと判定する．この関数は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;isAdult m &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書ける．ただ，この定義はどこか味気ない．&lt;code&gt;isAdult&lt;/code&gt; が受け取るデータは，年齢を表していて，整数か未詳かの状態を持つので，&lt;code&gt;Maybe Int&lt;/code&gt; はデータを正確に捉えられている．しかし，&lt;code&gt;Maybe Int&lt;/code&gt; に適合するデータは他に無数にあるため，&lt;code&gt;isAdult&lt;/code&gt; が受け取るデータが年齢を表すのか知能指数を表すのか，はたまた今までお酒を飲んだことのある回数なのかは推測しないと分からない．年齢を表すデータ型を新たに定義して，それを受け取るようにすればもっとプログラムがクールになるだろう．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で新しくデータ型を定義する最も簡単な方法は，&lt;code&gt;type&lt;/code&gt; キーワードを使って型シノニム &lt;span class=&#34;ascii&#34;&gt;(type synonym)&lt;/span&gt; を定義する方法だ．シノニムとは，別名という意味で，型シノニムは文字通り，ある型の別名を表す．今回は次のように使える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;isAdult age &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; age &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで関数 &lt;code&gt;isAdult&lt;/code&gt; は，先ほどと比べてとても明確になった．&lt;code&gt;Age&lt;/code&gt; は &lt;code&gt;Maybe Int&lt;/code&gt; を元に作られた型シノニムで，つまり &lt;code&gt;Age&lt;/code&gt; は &lt;code&gt;Maybe Int&lt;/code&gt; の別名になっている．単なる別名なので，&lt;code&gt;isAdult&lt;/code&gt; は &lt;code&gt;Maybe Int -&amp;gt; Bool&lt;/code&gt; 型の関数だと思って使うこともできる．&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; で試してみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;isAdult ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Age&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe Int&lt;/code&gt; を &lt;code&gt;Age&lt;/code&gt; だと思うこともできるしその逆もできる．型シノニムと元となった型は自在に取り替え可能だ．型シノニムはとても手軽なので，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の標準ライブラリでも使われている．例えば，次のようなデータ型が型シノニムで定義されている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列は文字のリストと見做せる．そこから文字列によるデータ型 &lt;code&gt;String&lt;/code&gt; は，単に文字のリスト型の型シノニムで定義されている．文字列に対してリストの関数を自由に適用できるのは，このためだ．ファイルのパスによるデータ型 &lt;code&gt;FilePath&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; の型シノニムで定義されている．なので，文字列の関数を自由に適用できる．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の型シノニムは，これだけに止まらずもっと強力な機能も持っている．例えば，型シノニムは型コンストラクタ，すなわち型を受け取って新たな型を作るコンストラクタに対しても作れる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;Maybe Int&lt;/code&gt; と書く代わりに &lt;code&gt;Option Int&lt;/code&gt; と書くことも可能だ．部分適用された型コンストラクタに対する型シノニムも書ける&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failable&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;Either String ()&lt;/code&gt; と書く代わりに &lt;code&gt;Failable ()&lt;/code&gt; と書くことができる．&lt;/p&gt;
&lt;p&gt;さらに型シノニムは，パラメータを持つことができる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [a]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型シノニムを使うと，&lt;code&gt;[Int]&lt;/code&gt; は &lt;code&gt;List Int&lt;/code&gt; と書ける．ただし，型シノニムはあくまで別名なので，全てのパラメータを適用した状態でしか書けないことに注意する必要がある．例えば，次のプログラムはコンパイルエラーになる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Apply&lt;/code&gt; は&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパラメータをとるが，&lt;code&gt;ApplyMaybe&lt;/code&gt; は &lt;code&gt;Apply&lt;/code&gt; に&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのパラメータしか渡していない．この場合，&lt;code&gt;Apply Maybe&lt;/code&gt; という型がどういう型の別名になるか &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は分からないため，この型を拒否する．このプログラムを修正するには，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように，&lt;code&gt;Apply&lt;/code&gt; に全ての引数を渡してやる必要がある．こうすることで，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は &lt;code&gt;Apply&lt;/code&gt; の定義から &lt;code&gt;Apply Maybe a&lt;/code&gt; が &lt;code&gt;Maybe a&lt;/code&gt; の別名であると認識できるようになる &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;型シノニムは，他にも幾つか用途上で制限がある．&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ目は再帰的な型シノニムが作れないという制限だ．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfiniteList&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;InfiniteList&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という定義は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では却下される．相互再帰的な定義も許容されていない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Rec2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec2&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Rec1&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Rec1&lt;/code&gt; の型を具体的に求めようとすると，&lt;code&gt;[Rec2]&lt;/code&gt; の型になる．&lt;code&gt;Rec2&lt;/code&gt; はやっぱり型シノニムで，&lt;code&gt;[Rec1]&lt;/code&gt; の別名なので，この型はさらに &lt;code&gt;[[Rec1]]&lt;/code&gt; という型になる．このようにして具体的な型を求めようとしても永遠に型シノニムがどこかしらに入り込むことになってしまい，型シノニムが現れない型を求めることはできない．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ではそのようなことがないように，そのような定義を排除している &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの制約は，型シノニムを型クラスのインスタンスとして使えないというものだ．例えば，次のようなことはできない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;I&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代わりに，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように型シノニムを使わず書く必要がある．これは型シノニムを使って書けない唯一の例外だ．ただ，この制限は本質的なものではなく，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準で型シノニムに対する混乱を避けるための制限になっている．もし，型シノニムに対してインスタンスを書けるようにしても，型シノニムは単なる別名なので，それは元となった型に対してインスタンスを定義してることと同じになる．このため，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;f x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数は，&lt;code&gt;type Age = Int&lt;/code&gt; による型シノニム &lt;code&gt;Age&lt;/code&gt; に対して &lt;code&gt;C&lt;/code&gt; のインスタンスが定義されていた場合，&lt;code&gt;a&lt;/code&gt; が &lt;code&gt;Age&lt;/code&gt; の場合も &lt;code&gt;Int&lt;/code&gt; の場合も許容される．これは，プログラマが意図していない動作かもしれない．つまり，年齢のデータだけにインスタンスを定義したつもりが，整数データ全般に対していつのまにかインスタンスを定義してしまったことになるからだ &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;これらの制限はあるものの，型シノニムはデータ型を定義する上でとても強力で，しかも簡単に使用できる機能だ．&lt;/p&gt;
&lt;h2 id=&#34;代数的データ型&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的データ型&#34; title=&#34;代数的データ型&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的データ型&lt;/h2&gt;
&lt;p&gt;さて，型シノニムでデータ型を定義する場合には幾つかの制限があった．では，この制限を超えたデータ型を定義する方法はないのだろうか？ そのような場合には代数的データ型 &lt;span class=&#34;ascii&#34;&gt;(algebraic datatype)&lt;/span&gt; を使うことができる．&lt;/p&gt;
&lt;p&gt;代数的データ型は，複数の型の値を統合して&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型の値として扱うデータ型の積と，複数の型の表現範囲を合わせて&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型として扱うデータ型の和を組み合わせることで構成されている．そして，このデータ型の定義は，型シノニムと異なり完全に新しい型を作り出す．実際の例を見てみよう．&lt;/p&gt;
&lt;p&gt;あなたは積木パズルのパーツそれぞれの面積を計算する関数を，書かなければいけない．積木パズルのパーツはそれぞれ，長方形，真円，三角形から構成されている．まずはこのパーツを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; のデータ型に落とし込む必要がある．それぞれのパーツにおいて，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四角形の面積は縦横の長さ&lt;/li&gt;
&lt;li&gt;真円は半径&lt;/li&gt;
&lt;li&gt;三角形は三辺の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;によって特徴付けられている．では，これを代数的データ型に落とし込んでみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PuzzleElement&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 縦の長さ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 横の長さ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;co&#34;&gt;-- ^ 半径&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 三つの辺の長さを与える&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この定義は，&lt;code&gt;PuzzleElement&lt;/code&gt; という新しい型を作り，&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの値コンストラクタを作る．それぞれ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rect :: Double -&amp;gt; Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Circle :: Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Triangle :: Double -&amp;gt; Double -&amp;gt; Double -&amp;gt; PuzzleElement&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という型を持つ．&lt;code&gt;Rect&lt;/code&gt; は &lt;code&gt;Double&lt;/code&gt; 型の値を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ受け取り，その&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの値を &lt;code&gt;PuzzleElement&lt;/code&gt; 型の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの値として統合する．つまり，&lt;code&gt;Double&lt;/code&gt; 型&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの積を作る．&lt;code&gt;Circle&lt;/code&gt; や &lt;code&gt;Triangle&lt;/code&gt; も同様だ．そして，&lt;code&gt;PuzzleElement&lt;/code&gt; 型は&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の積の値のいずれかを表し，すなわちこれら&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の積の和を表す．このように，積和によって新しいデータ型を定義できるのが &lt;code&gt;data&lt;/code&gt; 宣言であり，それによって定義されるのが代数的データ型になる．&lt;/p&gt;
&lt;p&gt;代数的データ型の値から統合した値を取り出したい時は，&lt;code&gt;case&lt;/code&gt; 文を使ったパターンマッチを行う&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;areaMeasure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PuzzleElement&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;areaMeasure x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; w h &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; r &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pi&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; s1 s2 s3 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (s1 &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; s2 &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; s3) &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sqrt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s1) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s2) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; s3)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;areaMeasure&lt;/code&gt; によってパズルのピースの面積を求めることができるようになった．&lt;/p&gt;
&lt;p&gt;前に紹介した型シノニムは，ある型に対してその別名を与えるだけだった．それに比べ，代数的データ型では新しいデータ型を作り，その型の値を作る値コンストラクタを定義する．そして，型シノニムと大きく異なる点は，型システム上からは新たに定義された型しか分からず，実際にそのデータ型がどういう型から構成されるか分からない点にある．&lt;code&gt;PuzzleElement&lt;/code&gt; 型の値は，もしかしたら &lt;code&gt;Double&lt;/code&gt; 型の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの値から &lt;code&gt;Rect&lt;/code&gt; コンストラクタを介して作られているかもしれないし，&lt;code&gt;Double&lt;/code&gt; 型&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの値から &lt;code&gt;Circle&lt;/code&gt; コンストラクタを通して作られているかもしれない．これは実行時にその関数でパターンマッチをしてみて初めて分かることだ．型シノニムでは，型システムからそれがどういう型を元にしていたか分かるが，代数的データ型で観測できるのは新たに作られたデータ型があることだけだ．この違いは，代数的データ型と型シノニムの制約の違いに表れてくる．代数的データ型では，型シノニムの時に挙げたような制約はない．&lt;/p&gt;
&lt;p&gt;例えば，代数的データ型は型シノニムと同様，パラメータをとることができ，さらに部分適用も可能だ &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; (f a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ApplyMaybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Apply&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の正しいプログラムになる．&lt;code&gt;Apply&lt;/code&gt; は，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパラメータをとる型コンストラクタになっていて，データ型 &lt;code&gt;Apply f a&lt;/code&gt; の値を作る方法として，&lt;code&gt;f a&lt;/code&gt; 型の値から値コンストラクタ &lt;code&gt;Apply :: f a -&amp;gt; Apply f a&lt;/code&gt; を通す方法がある．&lt;code&gt;ApplyMaybe&lt;/code&gt; は &lt;code&gt;Apply Maybe&lt;/code&gt; の型シノニムになっていて，これを使えば &lt;code&gt;Apply Maybe Int&lt;/code&gt; と書く代わりに &lt;code&gt;ApplyMaybe Int&lt;/code&gt; と書けるようになる．&lt;code&gt;ApplyMaybe&lt;/code&gt; の定義は，&lt;code&gt;Apply&lt;/code&gt; に対して&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのパラメータしか渡していない．にも関わらず正しいというのが，型シノニムと異なる点になる．&lt;/p&gt;
&lt;p&gt;再帰的なデータ型を代数的データ型で定義することも可能だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;データ型 &lt;code&gt;List a&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; 型の要素を持つ単連結リストを表す．値コンストラクタが &lt;code&gt;List a&lt;/code&gt; 型の値を受け取ることがポイントだ．型シノニムでは，その型の定義に自身を含めることはできなかった．これは実際の具体的な型を求めようとした時，その計算が永遠に終わらなくなってしまうからだった．代数的データ型 &lt;code&gt;List a&lt;/code&gt; ではその型は単に新しい型として作られ，実際にその型の値がどういう型の値によって構成されているか知る必要はない．&lt;code&gt;List a&lt;/code&gt; はそれ自体が具体的な型であり &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; ，それ以上計算する必要はないからだ．代数的データ型において，定義された型とその型の値を作る方法は分離されている．そのため，データ型の計算においてその型の値を作る方法は考慮されない．よって，自身が定義中で用いられても，型シノニムのようにデータ型の計算が永遠に終わることがないということはないため，その操作が許容されている．&lt;/p&gt;
&lt;p&gt;もちろん，新しい型が定義されるため，型クラスのインスタンスを混乱なく定義できる．代数的データ型を作成した時，基本的なインスタンスを定義することは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングにおいてよくあることだ．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では，言語機能としてそれを支援する機能がある．それは，&lt;code&gt;deriving&lt;/code&gt; 構文というもので，&lt;code&gt;Eq&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;Ord&lt;/code&gt; などの標準的な型クラスを，データ型の定義から自動で導出してくれる．例えば，&lt;code&gt;List a&lt;/code&gt; に対して使ってみると，以下のようになる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように代数的データ型は，型シノニムでは定義できなかったデータ型を定義することができる．そして，代数的データ型は全く新しい型を作ることもできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Succ&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Zero&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このデータ型 &lt;code&gt;Nat&lt;/code&gt; は，他の型には依存しない全く新しい型だ．このように，代数的データ型は型シノニムと異なり全く新しい構造を作り出すことができる．&lt;/p&gt;
&lt;p&gt;ただ，その代わり既存の関数を流用できなくなってしまう場合がある．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は，&lt;code&gt;(a, b)&lt;/code&gt; と構造が同じであり，&lt;code&gt;(a, b)&lt;/code&gt; に対する関数 &lt;code&gt;fst :: (a, b) -&amp;gt; a&lt;/code&gt; を適用できてもいいはずだ．ところが，データ型 &lt;code&gt;Tuple a b&lt;/code&gt; とその値コンストラクタは型システム上は切り離されているため，自身の値が &lt;code&gt;(a, b)&lt;/code&gt; の値と同じ方法でしか構成できないことを知らない．&lt;code&gt;Tuple a b&lt;/code&gt; と &lt;code&gt;(a, b)&lt;/code&gt; において型上で言及できることは，それらが異なる型であるということだけだ．なので，&lt;code&gt;fst&lt;/code&gt; に &lt;code&gt;Tuple a b&lt;/code&gt; 型の値を渡すことはできない．これは，もし型シノニムを使って，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (a, b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義した場合は解決する問題だ &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;このように両者にはトレードオフがあり，利用目的に合った使い分けをするのがいいだろう．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;data&lt;/code&gt; 宣言の構文は他に&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ，便利な機能がある．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つは正格性フラグと呼ばれる機能で，値コンストラクタにおいて引数を正格に評価することを強制できる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;a &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように，正格性フラグ &lt;code&gt;!&lt;/code&gt; を使った定義を行うと，値コンストラクタ &lt;code&gt;StrictTuple :: a -&amp;gt; b -&amp;gt; StrictTuple&lt;/code&gt; はその引数を正格に評価してから格納するようになる．通常，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように正格性フラグを使わない定義では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように値コンストラクタは受け取った引数の評価を行わず，素直にそのままの形で遅延させて格納するため，エラーを出す式を渡してもその式の評価を行わない限りエラーにはならない．これは通常の関数の動作と同じになる．ところが，正格性フラグを使用した &lt;code&gt;StrictTuple&lt;/code&gt; の場合，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictTuple&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; Prelude.undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように引数の評価を行うため，エラーを出す式を受け取った場合値コンストラクタの適用においてその式を評価しエラーを出す．データ型を作成する際，その元となる式の評価を強制させることはパフォーマンスに大きく寄与する．そのため，そのようなことを支援するために正格性フラグは設けられている．&lt;/p&gt;
&lt;p&gt;また，代数的データ型の値コンストラクタはフィールド名を持つことができる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; firstVal  ::&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; secondVal ::&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合，型コンストラクタ &lt;code&gt;Tuple&lt;/code&gt;，値コンストラクタ &lt;code&gt;Tuple :: a -&amp;gt; b -&amp;gt; Tuple a b&lt;/code&gt; の他に，関数 &lt;code&gt;firstVal :: Tuple a b -&amp;gt; a&lt;/code&gt;， &lt;code&gt;secondVal :: Tuple a b -&amp;gt; b&lt;/code&gt; が作られる．また，値コンストラクタの呼び出しにおいて特別なレコード構文 &lt;code&gt;Tuple { firstVal = 0, secondVal = 1 }&lt;/code&gt; を使用でき，またレコード更新構文 &lt;code&gt;(Tuple 2 1) { firstVal = 0 }&lt;/code&gt; を使用できる．これらは両者 &lt;code&gt;Tuple 0 1&lt;/code&gt; と同様の値が作成される．&lt;/p&gt;
&lt;h2 id=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ある型を元に新たな型を作る-datatype-renaming&#34; title=&#34;ある型を元に新たな型を作る-datatype-renaming&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ある型を元に新たな型を作る &lt;span class=&#34;ascii&#34;&gt;(Datatype Renaming)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;さて，これまで見てきたように，型シノニムは型の別名を定義し，代数的データ型は型の積和により新たなデータ型を定義するものだった．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; にはもう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つデータ型を定義する方法がある．それが &lt;code&gt;newtype&lt;/code&gt; 宣言だ．この宣言によって作られるデータ型は，型システム上は代数的データ型と同じように扱われ，実行時は型シノニムと同様の動作をする．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; 宣言の構文は，&lt;code&gt;data&lt;/code&gt; 宣言と同じような形をしている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールド名をつけることもできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; unIdentity ::&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合 &lt;code&gt;data&lt;/code&gt; 宣言と同様に，型コンストラクタ &lt;code&gt;Identity&lt;/code&gt;，値コンストラクタ &lt;code&gt;Identity&lt;/code&gt; が作られることになる．ただし，&lt;code&gt;data&lt;/code&gt; 宣言と異なり &lt;code&gt;newtype&lt;/code&gt; は積和の機能を使用することはできない．単にある&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの型を受け取る値コンストラクタしか定義できない．なので，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unit&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はいずれも受け入れられない．この &lt;code&gt;newtype&lt;/code&gt; の制約はいまいちよく分からない．では，このような制約によりどのような違いが出るのだろうか？ &lt;code&gt;newtype&lt;/code&gt; と &lt;code&gt;data&lt;/code&gt; は型システム上は違いはない．しかし，パターンマッチの動作など，実行時の動作に少し差異が設けられている．例えば，通常&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;において，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; Prelude.undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにエラーを出す式をパターンマッチで分解しようとするとエラーが出力される．ところが，&lt;code&gt;newtype&lt;/code&gt; によって作られた値コンストラクタの場合，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにパターンマッチ時にエラーが出されることはない．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では &lt;code&gt;newtype&lt;/code&gt; で作られた値コンストラクタが実行動作に影響することはないと規定されている．よって，上のパターンマッチは，以下と同様の動きをすることになっている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように値コンストラクタを指定しないパターンマッチの場合，&lt;code&gt;data&lt;/code&gt; 宣言で作られたものもエラーを出さない&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DataIdentity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;よって，&lt;code&gt;data&lt;/code&gt; と &lt;code&gt;newtype&lt;/code&gt; で作られた値コンストラクタの動作が異なるのは，パターンマッチにおいて値コンストラクタを指定した場合だけということになる．&lt;/p&gt;
&lt;p&gt;では，&lt;code&gt;newtype&lt;/code&gt; はなぜ値コンストラクタを無視するよう規定されているのだろう？ これは，&lt;code&gt;newtype&lt;/code&gt; によるデータ型が実行時の動作として型シノニムと同様の動作をすることを目的としてしているからだ．値コンストラクタが無視されるのは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という宣言は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IdentitySynonym&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という宣言と同様の意味を持って欲しいことを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の設計者が意図しているからだ．よって，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の動作は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; undefined ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IdentitySynonym&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように，代数的データ型ではなく型シノニムに合わせてあるため，&lt;code&gt;data&lt;/code&gt; 宣言主体に見ると一見不思議な動作をしていたというわけだ．&lt;/p&gt;
&lt;p&gt;さて，ではなぜわざわざ型シノニムとは別に &lt;code&gt;newtype&lt;/code&gt; 宣言を導入したのだろうか？ 型シノニムには幾つか制約があったのを思い出して欲しい．そして，それらの制約は代数的データ型では解決されたのだった．それは &lt;code&gt;type&lt;/code&gt; 宣言が単に型の別名を導入するのに対し，&lt;code&gt;data&lt;/code&gt; 宣言が完全に新たな型を作るからだった．&lt;code&gt;newtype&lt;/code&gt; はその点に着目し，実行時には単なる別名として動作するが型システム上は完全に別の新たな型を導入することで，&lt;code&gt;type&lt;/code&gt; 宣言同様ある型の別名を作りたいものの型シノニムの制約は回避したい需要を満たすようにしたものだ．&lt;/p&gt;
&lt;p&gt;例えば，大文字小文字を区別しない文字列データを考えてみよう．この場合，&lt;code&gt;&#34;aBc&#34; == &#34;Abc&#34;&lt;/code&gt; であって欲しいが，これは型シノニムで&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義するだけでは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のままだ．そこで，&lt;code&gt;newtype&lt;/code&gt; を使って，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsensString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; s1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; s2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go s1 s2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-8&#34; title=&#34;8&#34;&gt;      go []       []       &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-9&#34; title=&#34;9&#34;&gt;      go []       (_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_)    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-10&#34; title=&#34;10&#34;&gt;      go (_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_)    []       &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-11&#34; title=&#34;11&#34;&gt;      go (c1&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;cs1) (c2&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;cs2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; c1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; c2 &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go cs1 cs2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とできる．型シノニムは単なる &lt;code&gt;String&lt;/code&gt; の別名なので，&lt;code&gt;String&lt;/code&gt; と異なるインスタンスを新しく定義することはできない．それに対して，&lt;code&gt;newtype&lt;/code&gt; によるデータ型は代数的データ型と同様に自由に定義することができる．そして，値コンストラクタ &lt;code&gt;CaseInsens&lt;/code&gt; は単なる飾りであり，実行時には完全に無視されるため，&lt;code&gt;CaseInsensString&lt;/code&gt; は動作としては &lt;code&gt;String&lt;/code&gt; の別名としてみることができる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; は型シノニムでの制約であった，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再帰的なデータ型が定義できない&lt;/li&gt;
&lt;li&gt;型コンストラクタに対する部分適用ができない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった問題も解決する．このように &lt;code&gt;newtype&lt;/code&gt; は型シノニムの問題を改善したデータ型を定義するが，&lt;code&gt;data&lt;/code&gt; 宣言と同様型シノニムでは起きなかった問題も一緒に顕在化させてしまう．&lt;/p&gt;
&lt;p&gt;上の例で，&lt;code&gt;CaseInsens&lt;/code&gt; は飾りだと言ったが，実際にはこの値コンストラクタは必要不可欠であり，重要な役割を持っている．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の例は，片方だけ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aBc&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaseInsens&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Abc&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としてしまうと，コンパイルエラーになってしまう．なぜなら，&lt;code&gt;(==)&lt;/code&gt; は&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの引数が同じ型の値である必要があり，&lt;code&gt;&#34;aBc&#34;&lt;/code&gt; の型である &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;CaseInsens &#34;Abc&lt;/code&gt; の型である &lt;code&gt;CaseInsensString&lt;/code&gt; は全く異なる型であるからだ．つまり，値コンストラクタ &lt;code&gt;CaseInsens&lt;/code&gt; は，実行時には何の影響も与えないが，型システム上は全く異なる型の値であることを示すマーカーとなる．そして，型シノニムではデータ型は単なる別名であったが，&lt;code&gt;newtype&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; と同様全く新たな型として導入する道を選んだため，元の型として受け入れてもらうことが出来なくなってしまったのだ．&lt;/p&gt;
&lt;p&gt;といっても，これは一長一短である．&lt;code&gt;data&lt;/code&gt; と同様 &lt;code&gt;newtype&lt;/code&gt; で作られた型は，型シノニムのように既存の関数を使い回すことができない．その反面，データの意味に沿わないプログラムを型によって弾くことができるという点は長所になる場合もある．例えば，&lt;code&gt;&#34;aBc&#34; == CaseInsens &#34;Abc&#34;&lt;/code&gt; の例は，一体どのような結果を返すべきか一見して分からない．両者は単なる文字列と，大文字小文字を区別しない文字列という異なるデータを表しており，その比較は定義されないとするのが自然だろう．このような場合に，型シノニムでは定義されないことを表す方法はなかったが，&lt;code&gt;newtype&lt;/code&gt; は元の型と異なる型を持つので，そのような仕組みを作ることができる．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;newtype&lt;/code&gt; において値コンストラクタは実行時に何の影響も及ぼさないことと，何故そうなっているかについて分かってもらえただろうか？ この影響は，パターンマッチ以外にも表れる．例えば，&lt;code&gt;newtype&lt;/code&gt; の値コンストラクタに正格性フラグの機能はない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictNewtype&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StrictNewtype&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というプログラムは，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では受け入れられない．なぜなら，これを受け入れた場合，値コンストラクタがあるかどうかによって実行時の動作が変わってしまうからだ．ただ，その他の &lt;code&gt;data&lt;/code&gt; 宣言の機能は使用できる．&lt;code&gt;deriving&lt;/code&gt; も使用できる．&lt;code&gt;newtype&lt;/code&gt; で作られたデータ型は，元のデータ型のインスタンスを継承することはできない．全く新たな型を作ったため，更地の状態から始まる．ただし，&lt;code&gt;deriving&lt;/code&gt; を使うことでインスタンスを用意に導出することは可能だ．ただ，標準クラスのインスタンスしか自動で導出できないため，自身で定義した型クラスなどのインスタンスは一から書く必要がある．そのことには，注意する必要があるだろう &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;最後に少し応用的な &lt;code&gt;newtype&lt;/code&gt; の使い方を紹介しよう．&lt;code&gt;newtype&lt;/code&gt; は上のように目的に合わせて型を既存の型から作る他，型シノニムの制約によって定義できない型上の計算を実現するのにも使用できる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; (f (&lt;span class=&#34;dt&#34;&gt;Fix&lt;/span&gt; f))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という変わったデータ型を使うと，型上の不動点演算をエミュレートできる．また，&lt;code&gt;newtype&lt;/code&gt; を使うことで幽霊型による曖昧な型を避けることもできる．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; ann a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-4&#34; title=&#34;4&#34;&gt;readShow s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を考える．この関数 &lt;code&gt;readShow&lt;/code&gt; は，&lt;code&gt;WithAnn&lt;/code&gt; で引数に &lt;code&gt;a&lt;/code&gt; を使っているにもかかわらず &lt;code&gt;a&lt;/code&gt; が曖昧な型になるため弾かれる．なぜなら，型シノニム &lt;code&gt;WithAnn a String&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; と書いてるのと同じであり，&lt;code&gt;readShow&lt;/code&gt; は&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型を持つのと同様になってしまうからだ．このため，制約だけに &lt;code&gt;a&lt;/code&gt; が現れることになってしまい，曖昧な型になってしまう．この例のような，型シノニムが具体化されてしまうことで曖昧な型が生じる問題は，&lt;code&gt;newtype&lt;/code&gt; を使用することで回避できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; ann a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readShow ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-4&#34; title=&#34;4&#34;&gt;readShow (&lt;span class=&#34;dt&#34;&gt;WithAnn&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は型システム上は &lt;code&gt;WithAnn a String&lt;/code&gt; が実行時に単なる &lt;code&gt;String&lt;/code&gt; の別名として扱われることを知らず，これを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの具体化された型として認識する．このため，実際には &lt;code&gt;a&lt;/code&gt; が引数の値に何ら関与しない場合も，型 &lt;code&gt;a&lt;/code&gt; を伴う型として残る．よって，この場合は &lt;code&gt;a&lt;/code&gt; は曖昧な型にならず，&lt;code&gt;WithAnn a String&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分にあてがわれる型から特定することができる．このように，型シノニムで早期に元となった型に具体化されることで生じる問題は，&lt;code&gt;newtype&lt;/code&gt; を使うことで実際に値を作る箇所とパターンマッチの箇所での型計算に遅延させることができ，回避できる場合がある．&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つのデータ型定義方法について紹介した．&lt;/p&gt;
&lt;p&gt;型シノニムは，ある型に対してその別名を与えることで，データ型を定義するものだった．簡易で元の型に対する関数をそのまま流用でき，使いやすい反面，部分適用ができない，再帰的データ型が定義できない，型クラスのインスタンスにできないと言う制約があった．&lt;/p&gt;
&lt;p&gt;代数的データ型は複数の型の積和によって全く新しいデータ型を定義するものだった．型シノニムであった制約を回避でき，新たな構造を導入できるが，関数の流用が困難な場合があり型シノニムとの使い分けが必要だった．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; によるデータ型は，型システム上は代数的データ型と，実行時の動作は型シノニムと同様といった，それぞれの中間をとったようなものだった．型シノニムのような関数の流用ができない場合はあるものの，その代わり型シノニムの制約を回避でき，型システム上は全く異なる振る舞いを行うことも可能だった．&lt;/p&gt;
&lt;p&gt;これらは，それぞれが一長一短を持ち，目的にあった使い分けをする必要がある．この記事が，そのような場合の助けになればいいと思う．では，今回はこれで．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;型シノニムに対して部分適用を許容する一般的な方法は，型上にもラムダ抽象にあたる表現を導入することである．ただ，この場合型上の演算が停止しない場合があり，型システムが決定不能になる．このため，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では型シノニムに対しての部分適用は許容していない．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;等価再帰データ型 &lt;span class=&#34;ascii&#34;&gt;(equirecursive types)&lt;/span&gt; と呼ばれる特別な型を型システムに導入することで，このような型を許容する理論は存在するが，この理論はとても複雑で型検査のアルゴリズムも難しくなりがちである．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;ただ，このような混乱が起こるかもしれないことを許容し，利便性のため型シノニムをインスタンス定義で使いたい場合，&lt;code&gt;TypeSynonymInstances&lt;/code&gt; という &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; 拡張を有効にすることで許容されるようになる．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;型上の計算によって，実際の型が特定される型シノニムとは異なり，代数的データ型の型コンストラクタはそれ自体がもう計算できないものになる．それは部分適用されても同様であり，部分適用を許容することで型シノニムと同様の問題は起こらない．これが，代数的データ型で部分適用が許容されている理由になる．&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;実際にはパラメータ &lt;code&gt;a&lt;/code&gt; の部分に具体的な型を当てはめないといけないが，当てはめればそれは完全に具体的な型になる．&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;なお，代数的データ型でも型シノニムと同様の利点を手に入れるための研究は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では盛んに行われている．例えば，&lt;code&gt;Generic&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;Data&lt;/code&gt; 型クラス，&lt;code&gt;lens&lt;/code&gt; パッケージなどを使うことで，構造が同じだが異なるデータ型で関数が流用できない問題を回避できる場合がある．&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; 拡張では，&lt;code&gt;deriving&lt;/code&gt; 構文の拡張として強力な機能がいくつか搭載されている．特に &lt;code&gt;newtype&lt;/code&gt; によるデータ型の場合は，&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; や &lt;code&gt;DerivingVia&lt;/code&gt; 拡張を使えば，インスタンスの自動導出の範囲を大幅に拡大できる．&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/antenna-with-gh-actions.html&#34; lang=&#34;ja&#34;&gt;Haskell AntennaのCI/CDをGitHub Actionsに移行する&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/strict-gotchas.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Strict拡張を使用する際の注意点&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/strict-gotchas.html</id><title type="text">Strict拡張を使用する際の注意点</title><updated>2020-06-11T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/strict-gotchas.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は他の多くのプログラミング言語と異なった特徴を備えており、しばしばそれらが議論を呼ぶことがあります。その中でも特によく俎上に上がるのが、遅延評価です。遅延評価は、適切に扱えば不要な計算を行わず、計算資源を節約してくれるステキな仕組みですが、一歩使い方を間違うと「サンク」という「これから実行する&lt;small&gt;（かも知れない）&lt;/small&gt;計算」を表すオブジェクトが無駄に作られてしまい、却ってメモリー消費量が増えてしまう、などといった問題を抱えています。この現象は「スペースリーク」と呼ばれ、かつて&lt;a href=&#34;https://qiita.com/advent-calendar/2015/haskell-space-leaks&#34;&gt;専門の&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;&lt;/a&gt;が作られたことがあるほど、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;達の関心を集めてきました。&lt;/p&gt;
&lt;p&gt;そんな&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;達の悩みの種を軽減しようと、&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;以降、&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-by-default-pattern-bindings&#34;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-data&#34;&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;/a&gt;という言語拡張が搭載されました。これらの拡張は、大雑把に言うと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 値コンストラクターにおいて、引数の値が弱頭正規形（&lt;span class=&#34;ascii&#34;&gt;Weak Head Normal Form&lt;/span&gt;。以降慣習に従い「&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;」と呼びます）まで評価されるようになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;StrictData&lt;/code&gt;の効果に加え、あらゆる関数の引数やローカル変数の定義において、パターンマッチで代入した変数の値が&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価されるようになる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というものです。&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;StrictData&lt;/code&gt;は比較的リスクが少なく大変有用&lt;small&gt;（もはや標準であって欲しいぐらい）&lt;/small&gt;という声をよく聞きますが&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;、&lt;code&gt;Strict&lt;/code&gt;については様々な問題点があることが知られています。今回はその各種問題点をまとめて共有することで、思い切って&lt;code&gt;Strict&lt;/code&gt;を有効にするときに参考になる情報を提供したいと思います！&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#前提知識とその参考資料&#34; title=&#34;前提知識とその参考資料&#34;&gt;前提知識とその参考資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#サンプルコードの試し方&#34; title=&#34;サンプルコードの試し方&#34;&gt;サンプルコードの試し方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-1-where句だろうとなんだろうと評価&#34; title=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 1:&lt;/span&gt; &lt;code&gt;where&lt;/code&gt;句だろうとなんだろうと評価&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34; title=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-3-内側のパターンはやっぱりダメ&#34; title=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 3:&lt;/span&gt; 内側のパターンはやっぱりダメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-4-foldrに渡す関数&#34; title=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 4:&lt;/span&gt; &lt;code&gt;foldr&lt;/code&gt;に渡す関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-5-undefinedを受け取るメソッド&#34; title=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Case 5:&lt;/span&gt; &lt;code&gt;undefined&lt;/code&gt;を受け取るメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに-やっぱりstrictは使う使わない&#34; title=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; やっぱり&lt;code&gt;Strict&lt;/code&gt;は使う？使わない？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;前提知識とその参考資料&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#前提知識とその参考資料&#34; title=&#34;前提知識とその参考資料&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;前提知識とその参考資料&lt;/h1&gt;
&lt;p&gt;以下の知識について、ざっくり理解しているものとして進めます。参考になりそうな日本語のページも付記したので、ご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の遅延評価について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itchyny.hatenablog.com/entry/20130209/1360417348&#34;&gt;実装して理解する遅延評価の仕組み 〜 &lt;span class=&#34;ascii&#34;&gt;thunk&lt;/span&gt;を絵に描いて理解しよう・&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を実装！？ &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; プログラムモグモグ&lt;/a&gt;が詳しくて分かりやすいでしょう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の正格評価、および&lt;code&gt;BangPatterns&lt;/code&gt;について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-all-about-strictness&#34;&gt;正格性のすべて &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;翻訳&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;と&lt;code&gt;StrictData&lt;/code&gt;について
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Strict Haskell -&lt;/span&gt; あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他、&lt;a href=&#34;https://qiita.com/advent-calendar/2015/haskell-space-leaks&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;スペースリーク &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2015 - Qiita&lt;/span&gt;&lt;/a&gt;の記事にも有用なものがたくさんあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;サンプルコードの試し方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#サンプルコードの試し方&#34; title=&#34;サンプルコードの試し方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;サンプルコードの試し方&lt;/h1&gt;
&lt;p&gt;これから紹介するコードは、すべて&lt;a href=&#34;https://github.com/haskell-jp/blog/tree/master/examples/2020/strict-gotchas&#34;&gt;このブログのリポジトリーの、&lt;code&gt;examples&lt;/code&gt;ディレクトリー&lt;/a&gt;に置いておきました。下記のコマンドを実行すれば実際に試すことができます&lt;small&gt;（一部実行する際のコマンドが異なりますので、適宜例示します）&lt;/small&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/haskell-jp/blog.git
cd blog/examples/2020/strict-gotchas
stack exec runghc -- &amp;lt;これから紹介するコードのファイル&amp;gt;.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実際に試すときは&lt;code&gt;--ghc-arg=-XStrict&lt;/code&gt;というオプションを&lt;code&gt;runghc&lt;/code&gt;に付けた場合と付けなかった場合両方で実行して、違いを確かめてみてください。&lt;/p&gt;
&lt;p&gt;なお、使用した&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは&lt;span class=&#34;ascii&#34;&gt;8.10.1&lt;/span&gt;で、&lt;span class=&#34;ascii&#34;&gt;OS&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Windows 10 ver. 1909&lt;/span&gt;です。&lt;/p&gt;
&lt;h1 id=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-1-where句だろうとなんだろうと評価&#34; title=&#34;case-1-where句だろうとなんだろうと評価&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 1:&lt;/span&gt; &lt;code&gt;where&lt;/code&gt;句だろうとなんだろうと評価&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/where.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;where.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最初のケースは、遅延評価で当たり前に享受できていたメリットが、&lt;code&gt;Strict&lt;/code&gt;を有効にしている状態では得られなくなってしまう、というものです。&lt;a href=&#34;https://qiita.com/pxfnc/items/a26bda6d11402daba675&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pxfnc&lt;/span&gt;さんの&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張でハマったお話&lt;/a&gt;という記事でも紹介されてはいますが、まとめ記事なのでここでも改めて取り上げます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; div10 &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;div10 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;div10 n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; result&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ご覧のとおり、本当にほとんど&lt;span class=&#34;ascii&#34;&gt;pxfnc&lt;/span&gt;さんの記事のサンプルそのままで恐縮ですが、このプログラム、👇のように&lt;code&gt;Strict&lt;/code&gt;拡張を有効にして実行するとエラーが起こります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict where.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;where.hs&lt;/span&gt;: divide by zero&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一方、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしなかった場合、エラーは起こりません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc where.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜこんなことが起こるのでしょう？&lt;/p&gt;
&lt;p&gt;これは、&lt;code&gt;Strict&lt;/code&gt;拡張がパターンマッチで代入したあらゆる変数の値を&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価するようになった結果、&lt;code&gt;where&lt;/code&gt;句で代入した変数まで必ず&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価してしまうために発生したエラーです。すなわち、&lt;code&gt;where&lt;/code&gt;における、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;までもが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;result &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`div`&lt;/span&gt; n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と&lt;span class=&#34;ascii&#34;&gt;Bang&lt;/span&gt;パターンを付けた代入であるかのように解釈されたのです&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;こうなると、&lt;code&gt;result&lt;/code&gt;を使用しないケース、すなわち&lt;code&gt;n == 0&lt;/code&gt;の場合であっても&lt;code&gt;result&lt;/code&gt;に &lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価した）&lt;/small&gt;値を代入するのに必要な計算は実行され、結果&lt;code&gt;10 `div` 0&lt;/code&gt;が計算されようとして&lt;code&gt;divide by zero&lt;/code&gt;が発生するのです。&lt;/p&gt;
&lt;p&gt;⚠️&lt;code&gt;where&lt;/code&gt;句は関数定義の後ろの方に書くという性格上、見落としがちかも知れません。注意しましょう。&lt;/p&gt;
&lt;h1 id=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34; title=&#34;case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/const.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;const.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;続いて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に慣れた方なら誰もが一度は試したくなる、ポイントフリースタイルに関する落とし穴です。まずは次の二つの関数をご覧ください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dontReferArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;dontReferArgs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;referArgs x _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数、どちらもやっていることは&lt;code&gt;const&lt;/code&gt;と変わりません。&lt;code&gt;dontReferArgs&lt;/code&gt;は&lt;code&gt;const&lt;/code&gt;をそのまま使うことでポイントフリースタイルにしていますが、&lt;code&gt;referArgs&lt;/code&gt;は自前で引数に言及することで&lt;code&gt;const&lt;/code&gt;と同等の定義となっています。ポイントフリースタイルに変えると言うことは原則として元の関数の挙動を変えないワケですから、&lt;code&gt;dontReferArgs&lt;/code&gt;と&lt;code&gt;referArgs&lt;/code&gt;の意味は変わらないはず、ですよね&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;？&lt;/p&gt;
&lt;p&gt;ところがこれらの関数を&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした上で定義すると、なんと挙動が異なってしまいます！&lt;/p&gt;
&lt;p&gt;使用例&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; dontReferArgs &lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; referArgs &lt;span class=&#34;st&#34;&gt;&amp;quot;referArgs&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にしなかった場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc const.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;referArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にした場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict const.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dontReferArgs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;const.hs&lt;/span&gt;: Prelude.undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ex&#34;&gt;CallStack&lt;/span&gt; (from HasCallStack)&lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;error&lt;/span&gt;, called at libraries\base\GHC\Err.hs:79:14 in base:GHC.Err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;undefined&lt;/span&gt;, called at const.hs:10:34 in main:Main&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、&lt;code&gt;where&lt;/code&gt;句のケースと同様、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合、例外が発生してしまいました❗️&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした結果、意図せず例外を発生させる値&lt;small&gt;（今回の場合&lt;code&gt;undefined&lt;/code&gt;）&lt;/small&gt;が評価されてしまったのです。&lt;/p&gt;
&lt;p&gt;例外を発生させた関数はそう、ポイントフリースタイルでない、&lt;code&gt;referArgs&lt;/code&gt;関数の方です！なぜ&lt;code&gt;referArgs&lt;/code&gt;でのみ例外が発生してしまったのかというと、&lt;code&gt;referArgs&lt;/code&gt;が&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールで、引数に言及&lt;small&gt;（パターンマッチ）&lt;/small&gt;しているからです。&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした結果「あらゆる関数やローカル変数の定義において、パターンマッチで代入した変数の値」が評価されるとおり、&lt;code&gt;referArgs&lt;/code&gt;の引数&lt;code&gt;x&lt;/code&gt;・&lt;code&gt;_&lt;/code&gt;も必ず評価されるようになり、このような例外が発生したのです。たとえ使用しない変数&lt;code&gt;_&lt;/code&gt;でも関係ありません！&lt;/p&gt;
&lt;p&gt;そのため、原因の本質は引数に言及&lt;small&gt;（パターンマッチ）&lt;/small&gt;しているか否かであり、&lt;code&gt;Prelude&lt;/code&gt;の&lt;code&gt;const&lt;/code&gt;を使用しているか否かではありません。こちら👇のように引数に言及した上で&lt;code&gt;const&lt;/code&gt;を使っても、結果は同じなのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgsByConst ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;referArgsByConst x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt; x y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; referArgsByConst &lt;span class=&#34;st&#34;&gt;&amp;quot;referArgsByConst&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一方、&lt;code&gt;dontReferArgs&lt;/code&gt;については、引数に言及せず、&lt;code&gt;Prelude&lt;/code&gt;にある&lt;code&gt;const&lt;/code&gt;をそのまま使っています。&lt;code&gt;Strict&lt;/code&gt;拡張はあくまでも「パターンマッチした変数」のみを&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価するものであり、あらゆる関数が正格に呼び出されるわけではありません。なので通常の&lt;code&gt;Prelude&lt;/code&gt;における&lt;code&gt;const&lt;/code&gt;と同様、&lt;code&gt;dontReferArgs&lt;/code&gt;も第&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;引数は評価しないため、&lt;code&gt;undefined&lt;/code&gt;を渡しても例外は起こらなかったのです。&lt;/p&gt;
&lt;p&gt;このことは、「&lt;strong&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールの中でも、&lt;code&gt;Strict&lt;/code&gt;を有効にしていないモジュール&lt;small&gt;（この場合は&lt;code&gt;Prelude&lt;/code&gt;）&lt;/small&gt;から&lt;code&gt;import&lt;/code&gt;した関数は、引数を正格に評価しない&lt;/strong&gt;」という忘れてはならないポイントも示しています。例えば&lt;code&gt;const&lt;/code&gt;よりももっと頻繁に使われるであろう、言及する引数を一つ削除する演算子の代表、関数合成&lt;code&gt;.&lt;/code&gt;を使ったケースを考えてみてください。&lt;/p&gt;
&lt;p&gt;ポイントフリースタイルに慣れた方なら、関数適用&lt;code&gt;$&lt;/code&gt;を次👇のように使って定義した&lt;code&gt;f&lt;/code&gt;を見ると、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;f xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- あるいは、`$`を使わないでこのように書いた場合も:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;f xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) xs)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちら👇のように書き換えたくなってうずうずするでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、&lt;code&gt;Strict&lt;/code&gt;を有効にしたモジュールでこのような書き換えを行うと、&lt;code&gt;f&lt;/code&gt;の挙動が変わってしまいます。引数&lt;code&gt;.&lt;/code&gt;を使って書き換える前は、引数&lt;code&gt;xs&lt;/code&gt;に言及していたところ&lt;code&gt;.&lt;/code&gt;を使って引数&lt;code&gt;xs&lt;/code&gt;に言及しなくなったからです。&lt;code&gt;filter&lt;/code&gt;も&lt;code&gt;map&lt;/code&gt;も&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールで定義されているわけではないので、引数を正格に評価しないんですね。結果、こうした書き換えによって、&lt;strong&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしていても意図せず遅延評価してしまう&lt;/strong&gt;、というリスクがあるので、リファクタリングの際はくれぐれも気をつけてください&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。ざっくりまとめると、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、「引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」、あるいは「引数や変数を宣言しなければ、評価されない」と意識しましょう。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;referArgs&lt;/code&gt;における&lt;code&gt;_&lt;/code&gt;のように「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合さえ、使用していない引数が評価されてしまうのは困る！」という場合は、引数名の前にチルダ&lt;code&gt;~&lt;/code&gt;を付けてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;referArgs ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;referArgs x &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-3-内側のパターンはやっぱりダメ&#34; title=&#34;case-3-内側のパターンはやっぱりダメ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 3:&lt;/span&gt; 内側のパターンはやっぱりダメ&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 今回は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;ですべて紹介するのでサンプルはありません。&lt;/p&gt;
&lt;p&gt;続いては、&lt;code&gt;Strict&lt;/code&gt;拡張のドキュメントでも触れられている、入れ子になったパターンマッチにおける問題を紹介します。一言で言うと、&lt;code&gt;let (a, b) = ...&lt;/code&gt;のような、データ構造&lt;small&gt;（この場合タプルですね）&lt;/small&gt;の「内側」に対するパターンマッチは、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしていても正格に評価しないよ、という話です。&lt;/p&gt;
&lt;p&gt;例えば、下記のコードを&lt;code&gt;Strict&lt;/code&gt;拡張付きで実行しても、パターンマッチしている&lt;code&gt;a&lt;/code&gt;・&lt;code&gt;b&lt;/code&gt;ともに代入した時点では正格評価されず、&lt;code&gt;error &#34;a&#34;&lt;/code&gt;・&lt;code&gt;error &#34;b&#34;&lt;/code&gt;による例外はいずれも発生しません。次のコードを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試してみてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; (a, b) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も起きない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先ほどの節における「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、『引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」』、あるいは『引数や変数を宣言しなければ、評価されない』と意識しましょう」という主張を真に受けてしまうと、意図せず遅延評価させてしまい、ハマりそうです😰。⚠️繰り返しますが「&lt;strong&gt;内側のパターンにおける変数は正格評価されない&lt;/strong&gt;」ということも意識してください。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;StrictData&lt;/code&gt;や正格性フラグを用いるなどして、各要素を正格評価するよう定義した値コンストラクターでは、ちゃんと評価して例外を発生させます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;CallStack&lt;/span&gt; (from &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;, called at &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; interactive&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Ghci7&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt;拡張を有効にすると&lt;code&gt;StrictData&lt;/code&gt;も自動的に有効になるので、👆における&lt;code&gt;MyTuple&lt;/code&gt;値コンストラクターは各要素を正格評価するようになったわけです。なので&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしたモジュールにおいて、なおかつそこで定義した型で完結している限りは平和でしょう。&lt;/p&gt;
&lt;p&gt;ただし、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で試す場合に特に注意していただきたいのですが、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で&lt;strong&gt;&lt;code&gt;let&lt;/code&gt;をつけないでパターンマッチした場合は正格評価されない&lt;/strong&gt;、という点に注意してください。&lt;code&gt;let&lt;/code&gt;をつけないとトップレベルでの定義と見なされるからです。&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#strict-by-default-pattern-bindings&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張のドキュメント&lt;/a&gt;にも、「&lt;span class=&#34;ascii&#34;&gt;Top level bindings are unaffected by&lt;/span&gt; &lt;code&gt;Strict&lt;/code&gt;」とありますとおり、トップレベルでの定義は例外扱いされているのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyTuple&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 何も起きない&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-4-foldrに渡す関数&#34; title=&#34;case-4-foldrに渡す関数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 4:&lt;/span&gt; &lt;code&gt;foldr&lt;/code&gt;に渡す関数&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/stackoverflow-foldr.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stackoverflow-foldr.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここの話はちょっと難しいので、先に守るべきルールを述べておきます。&lt;/p&gt;
&lt;p&gt;「遅延評価する関数を受け取る前提の高階関数に、（&lt;code&gt;Strict&lt;/code&gt;拡張などで）引数を正格に評価するよう定義された関数を渡すのは止めましょう。」&lt;/p&gt;
&lt;p&gt;なんだかこう書くと半ばトートロジーのようにも聞こえますが、より具体的には、例えば&lt;code&gt;foldr&lt;/code&gt;に引数を正格に評価するよう定義された関数を渡すのは止めましょう、という話です。&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態では、ラムダ式にも注意しないといけないもポイントです。&lt;/p&gt;
&lt;p&gt;※あらかじめおことわり&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; この節のお話は、あくまでもリストに対する&lt;code&gt;foldr&lt;/code&gt;の場合のお話です。他の&lt;code&gt;Foldable&lt;/code&gt;な型では必ずしも当てはまらないのでご注意ください。&lt;/p&gt;
&lt;p&gt;論より証拠で、サンプルコードの中身（抜粋）とその実行結果を見てみましょう。&lt;/p&gt;
&lt;pre class=&#34;main&#34;&gt;&lt;code&gt;-- ...
evaluate . length $ foldr (:) [] [1 .. size]
putStrLn &amp;quot;DONE: foldr 1&amp;quot;

evaluate . length $ foldr (\x z -&amp;gt; x : z) [] [1 .. size]
putStrLn &amp;quot;DONE: foldr 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回のサンプルコードを実行する際は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムオプションを設定して、スタック領域のサイズを減らしてください。そうでなければ、処理するリストがあまり大きくないので&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしても問題の現象は再現されないでしょう&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;。&lt;a href=&#34;https://stackoverflow.com/questions/29339643/how-can-i-pass-rts-options-to-runghc&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;Stackoverflow&lt;/span&gt;の質問&lt;/a&gt;曰く、&lt;code&gt;runghc&lt;/code&gt;で実行する際にランタイムオプションを設定する場合は、&lt;code&gt;GHCRTS&lt;/code&gt;環境変数を使用するしかないそうです。&lt;/p&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にしなかった場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;GHCRTS=&lt;/span&gt;-K100k &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- ./stackoverflow-foldr.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果（&lt;span class=&#34;ascii&#34;&gt;Strict&lt;/span&gt;拡張を有効にした場合）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;GHCRTS=&lt;/span&gt;-K100k &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- --ghc-arg=-XStrict ./stackoverflow-foldr.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;DONE&lt;/span&gt;: foldr 1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stackoverflow-foldr.hs&lt;/span&gt;: stack overflow&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サンプルコードは整数のリストに対して特に何も変換せず&lt;code&gt;foldr&lt;/code&gt;する&lt;small&gt;（そして、&lt;code&gt;length&lt;/code&gt;関数でリスト全体を評価してから捨てる）&lt;/small&gt;だけのことを&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回繰り返したコードです。最初の&lt;code&gt;foldr&lt;/code&gt;は&lt;code&gt;Strict&lt;/code&gt;拡張があろうとなかろうと無事実行できたにもかかわらず、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした二つめの&lt;code&gt;foldr&lt;/code&gt;は、&lt;code&gt;stack overflow&lt;/code&gt;というエラーを起こしてしまいました💥！&lt;/p&gt;
&lt;p&gt;なぜこんなエラーが発生したのかを知るために、&lt;code&gt;foldr&lt;/code&gt;の定義を見直しましょう。こちら👇は&lt;a href=&#34;http://hackage.haskell.org/package/base-4.14.0.0/docs/src/GHC.Base.html#foldr&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.10.1&lt;/span&gt;における、リストに対する&lt;code&gt;foldr&lt;/code&gt;の定義&lt;/a&gt;です&lt;small&gt;（コメントは省略しています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;            ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; k z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;          &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;            go []     &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;            go (y&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ys) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;`k`&lt;/span&gt; go ys&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go&lt;/code&gt;という補助関数を再帰的に呼び出すことで、第一引数として渡した関数&lt;code&gt;k&lt;/code&gt;を用いてリストの要素&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;y&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を一つずつ変換しています。呼び出す度にリストの残りの要素をチェックして、最終的に空のリストを受け取ったときは&lt;code&gt;foldr&lt;/code&gt;の第二引数&lt;code&gt;z&lt;/code&gt;を返していますね。&lt;/p&gt;
&lt;p&gt;このとき&lt;code&gt;k&lt;/code&gt;が第二引数を遅延評価する関数であった場合、 — サンプルコードで言えば&lt;code&gt;(:)&lt;/code&gt;の場合 — 受け取った&lt;code&gt;go ys&lt;/code&gt;という式は直ちには評価されません。サンプルコードの&lt;code&gt;(:)&lt;/code&gt;に置き換えると、&lt;code&gt;(:)&lt;/code&gt;の第二引数、つまりリストの残りの要素を取り出す度に&lt;code&gt;go ys&lt;/code&gt;を一回計算して、一個ずつ要素を作り出すイメージです。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;k&lt;/code&gt;が第二引数を正格評価する関数であった場合、 — サンプルコードで言うところの、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした&lt;code&gt;(\x z -&amp;gt; x : z)&lt;/code&gt;の場合 — &lt;code&gt;k&lt;/code&gt;は受け取った&lt;code&gt;go ys&lt;/code&gt;をすぐに評価しようとします。このとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;code&gt;k&lt;/code&gt;や&lt;code&gt;go&lt;/code&gt;に渡されている引数をスタック領域に積みます&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;。そうして&lt;code&gt;go&lt;/code&gt;と、&lt;code&gt;go&lt;/code&gt;に呼ばれた&lt;code&gt;k&lt;/code&gt;が次々と引数をスタック領域に積んだ結果、スタックサイズの上限に達し、スタックオーバーフローが発生してしまうのです。&lt;/p&gt;
&lt;p&gt;これは他の多くのプログラミング言語で&lt;small&gt;（末尾再帰じゃない、普通の）&lt;/small&gt;再帰呼び出しを行った場合とよく似た振る舞いです。間違って無限再帰呼び出しをしてしまってスタック領域があふれる、なんて経験は多くのプログラマーがお持ちでしょう。つまり単純に、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合の&lt;code&gt;foldr (\x z -&amp;gt; x : z) []&lt;/code&gt;は、再帰呼び出しをしすぎてしまう関数となるのです。&lt;/p&gt;
&lt;p&gt;なお、今回は&lt;code&gt;length&lt;/code&gt;関数を使ってリスト全体を使用するコードにしましたが、遅延リストらしく&lt;code&gt;foldr&lt;/code&gt;の結果を一部しか使わない、という場合、&lt;code&gt;foldr&lt;/code&gt;に渡した関数がリストを都度正格評価してしまうので、無駄な評価が占める割合はもっと増えることになります。やはり&lt;code&gt;foldr&lt;/code&gt;は遅延評価を前提とした高階関数と言えるでしょう。&lt;/p&gt;
&lt;p&gt;以上のとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には&lt;code&gt;foldr&lt;/code&gt;のような、遅延評価を前提とした関数が&lt;code&gt;Strict&lt;/code&gt;拡張より遥か昔から存在しています。それらを&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で使うと、思わぬ衝突が起きてしまうので、くれぐれも気をつけましょう。&lt;/p&gt;
&lt;p&gt;こういう「使ってはいけない関数」を引いてしまわないための方法についても一点補足します。&lt;span class=&#34;ascii&#34;&gt;HLint&lt;/span&gt;を細かく設定したり、カスタム&lt;code&gt;Prelude&lt;/code&gt;を設定したりしてみるのは、一つの作戦です。なんとプロジェクト全体で、&lt;code&gt;foldr&lt;/code&gt;を禁止することができます&lt;small&gt;（一部のモジュールでは例外的に許可する、なんてこともできます）&lt;/small&gt;。詳しくは&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/01-29-awesome-hlint.html&#34;&gt;「素晴らしき &lt;span class=&#34;ascii&#34;&gt;HLint&lt;/span&gt; を使いこなす」&lt;/a&gt;や&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/05-23-extended-prelude.html&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt; を カスタム&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt; で置き換える」&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#case-5-undefinedを受け取るメソッド&#34; title=&#34;case-5-undefinedを受け取るメソッド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Case 5:&lt;/span&gt; &lt;code&gt;undefined&lt;/code&gt;を受け取るメソッド&lt;/h1&gt;
&lt;p&gt;サンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/master/examples/2020/strict-gotchas/storable.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;storable.hs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後はちょっとレアケースではありますが、こちら👇の&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;で発覚した問題を解説しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues/16810&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#16810: Use explicit lazy binding around undefined in inlinable functions · Issues · Glasgow Haskell Compiler / GHC · GitLab&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;問題を簡単に再現するために、次のサンプルコードを用意しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- importなどは当然省略！&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;  sizeOf _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sizeOf (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;  alignment _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;  peek &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This should not be called in this program&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;  poke &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This should not be called in this program&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-10&#34; title=&#34;10&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; alloca &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \(&lt;span class=&#34;ot&#34;&gt;_ ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ptr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This won&amp;#39;t be printed when Strict is enabled&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、適当な型を定義して&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Storable.html#t:Storable&#34;&gt;&lt;code&gt;Storable&lt;/code&gt;&lt;/a&gt;のインスタンスにして、それに対して&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Marshal-Alloc.html#v:alloca&#34;&gt;&lt;code&gt;alloca&lt;/code&gt;&lt;/a&gt;を呼ぶだけのコードです。インスタンス定義をはじめかなり手抜きな感じになっちゃってますが、まぁ今回の問題を再現するのにはこれで十分なので、ご了承ください🙏。&lt;/p&gt;
&lt;p&gt;このコード、残念ながら&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で実行すると、&lt;code&gt;undefined&lt;/code&gt;による例外が発生してしまいます💥。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc --ghc-arg=-XStrict storable.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;storable.hs&lt;/span&gt;: Prelude.undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ex&#34;&gt;CallStack&lt;/span&gt; (from HasCallStack)&lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;error&lt;/span&gt;, called at libraries\base\GHC\Err.hs:79:14 in base:GHC.Err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;undefined&lt;/span&gt;, called at libraries\base\Foreign\Marshal\Alloc.hs:117:31 in base:Foreign.Marshal.Alloc&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらは&lt;code&gt;Strict&lt;/code&gt;を有効にしなかった場合。やはり例外は起きてませんね😌。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- runghc storable.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;This&lt;/span&gt; won&lt;span class=&#34;st&#34;&gt;&amp;#39;t be printed when Strict is enabled&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さてこの、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした場合に発生した、&lt;code&gt;undefined&lt;/code&gt;による例外はどこからやってきたのでしょう？上記のコードにはいくつか&lt;code&gt;error&lt;/code&gt;関数を使用している箇所がありますが、発生した例外はあくまでも&lt;code&gt;undefined&lt;/code&gt;です。見た限り上記のコードそのものから発生した例外ではなさそうですね…🤔。&lt;/p&gt;
&lt;p&gt;その答えはなんと、&lt;code&gt;main&lt;/code&gt;関数で呼んでいる&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/src/Foreign-Marshal-Alloc.html#alloca&#34;&gt;&lt;code&gt;alloca&lt;/code&gt;の定義&lt;/a&gt;にありました！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;alloca ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a b &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ptr&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;alloca  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-3&#34; title=&#34;3&#34;&gt;  allocaBytesAligned (sizeOf (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a)) (alignment (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに、&lt;code&gt;sizeOf&lt;/code&gt;メソッドや&lt;code&gt;alignment&lt;/code&gt;メソッドに&lt;code&gt;undefined&lt;/code&gt;を渡しています。これらはいずれも&lt;code&gt;Storable&lt;/code&gt;型クラスのメソッドなので、上記の&lt;code&gt;Test&lt;/code&gt;型でももちろん実装しています。そう、実はこの&lt;code&gt;sizeOf&lt;/code&gt;メソッドと&lt;code&gt;alignment&lt;/code&gt;メソッドの実装で、下👇のように引数&lt;code&gt;_&lt;/code&gt;を宣言しているのが問題なのです！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Storable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;  sizeOf _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sizeOf (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;  alignment _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;#case-2-ポイントフリースタイルかどうかで変わる&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Case 2:&lt;/span&gt; ポイントフリースタイルかどうかで変わる！」の節&lt;/a&gt;で、「&lt;code&gt;Strict&lt;/code&gt;拡張を有効にしているモジュールでは、『引数や変数を宣言することすなわち&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価すること」』、あるいは『引数や変数を宣言しなければ、評価されない』」と述べたことを再び思い出してください。こちらの&lt;code&gt;sizeOf&lt;/code&gt;・&lt;code&gt;alignment&lt;/code&gt;の定義でも同様に、引数&lt;code&gt;_&lt;/code&gt;を宣言しているため、引数を必ず&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;まで評価することになっています。結果、&lt;code&gt;alloca&lt;/code&gt;関数がそれぞれを呼ぶ際&lt;code&gt;undefined&lt;/code&gt;を渡しているため、&lt;code&gt;undefined&lt;/code&gt;を評価してしまい、&lt;code&gt;undefined&lt;/code&gt;による例外が発生してしまうのです💥。&lt;/p&gt;
&lt;p&gt;なぜこのように、&lt;code&gt;alloca&lt;/code&gt;関数では&lt;code&gt;sizeOf&lt;/code&gt;や&lt;code&gt;alignment&lt;/code&gt;に&lt;code&gt;undefined&lt;/code&gt;をわざわざ渡しているのでしょう？それは、これらのメソッドがそもそも&lt;code&gt;undefined&lt;/code&gt;を渡して使うことを前提に設計されているからです。&lt;code&gt;sizeOf&lt;/code&gt;・&lt;code&gt;alignment&lt;/code&gt;はともに&lt;code&gt;Storable a =&amp;gt; a -&amp;gt; Int&lt;/code&gt;という型の関数なので、第一引数に&lt;code&gt;Storable&lt;/code&gt;のインスタンスである型&lt;code&gt;a&lt;/code&gt;の値を受け取るのですが、このとき&lt;strong&gt;渡される&lt;code&gt;a&lt;/code&gt;型の値は、使わない&lt;/strong&gt;こととなっています。&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Foreign-Storable.html#v:sizeOf&#34;&gt;それぞれのメソッドの説明&lt;/a&gt;にも「&lt;span class=&#34;ascii&#34;&gt;The value of the argument is not used.&lt;/span&gt;」と書かれていますね。これは、&lt;code&gt;sizeOf&lt;/code&gt;も&lt;code&gt;alignment&lt;/code&gt;も、型毎に一意な値として定まる&lt;small&gt;（引数の値によって&lt;code&gt;sizeOf&lt;/code&gt;や&lt;code&gt;alignment&lt;/code&gt;の結果が変わることがない）&lt;/small&gt;ので、第一引数の&lt;code&gt;a&lt;/code&gt;は、単に「この型の&lt;code&gt;sizeOf&lt;/code&gt;を呼んでくださいね」という&lt;strong&gt;型の&lt;/strong&gt;情報を渡すためのものでしかないからです。だから値には関心がないので&lt;code&gt;undefined&lt;/code&gt;を渡しているわけです。そもそも、&lt;code&gt;alloca&lt;/code&gt;関数のように引数として&lt;code&gt;Storable a =&amp;gt; a&lt;/code&gt;型の値をとらない関数では、&lt;code&gt;a&lt;/code&gt;型の値を用意することができませんし。&lt;/p&gt;
&lt;p&gt;現代では通常、このように「値に関心がなく、何の型であるかという情報だけを受け取りたい」という場合は、&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/base-4.14.0.0/Data-Proxy.html#t:Proxy&#34;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;型を使うのが一般的です。&lt;code&gt;Storable&lt;/code&gt;は恐らく&lt;code&gt;Proxy&lt;/code&gt;が発明される前に生まれたため、&lt;code&gt;undefined&lt;/code&gt;を渡すことになってしまっているのでしょう。なので、&lt;code&gt;Storable&lt;/code&gt;型クラスのインスタンスを自前で定義したりしない限り、こうしたケースに出遭うことはまれだと思います。ただ、それでも&lt;code&gt;Proxy&lt;/code&gt;を&lt;code&gt;import&lt;/code&gt;するのを面倒くさがって&lt;code&gt;undefined&lt;/code&gt;を代わりに渡す、なんてケースはありえるので、&lt;code&gt;Proxy&lt;/code&gt;を使って定義した型クラスでも同じ問題にハマることはあるかも知れません…。&lt;/p&gt;
&lt;p&gt;⚠️結論として、&lt;code&gt;Storable&lt;/code&gt;型クラスや、&lt;code&gt;Proxy&lt;/code&gt;を受け取るメソッドを持つ型クラスのインスタンスを、&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で定義する場合は、&lt;code&gt;Proxy&lt;/code&gt;にあたる引数を評価しないよう、&lt;code&gt;~_&lt;/code&gt;などを使って定義しましょう。&lt;/p&gt;
&lt;h1 id=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに-やっぱりstrictは使う使わない&#34; title=&#34;おわりに-やっぱりstrictは使う使わない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; やっぱり&lt;code&gt;Strict&lt;/code&gt;は使う？使わない？&lt;/h1&gt;
&lt;p&gt;さて、ここまで&lt;code&gt;Strict&lt;/code&gt;拡張を有効にすることによって犯しうる、数々のミスを紹介してきました。ここまで書いた個人的な印象としては、「敢えて有効にする必要はないんじゃないか」といったところです&lt;small&gt;（まぁ、悪いところばかり調べた結果のため、とてもフェアな視点での判断とは言えないのですが…）&lt;/small&gt;。&lt;code&gt;foldr&lt;/code&gt;の例でも触れたとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には遅延評価を前提とした、遅延評価を存分に活かした機能が溢れています。当然それらは&lt;code&gt;Strict&lt;/code&gt;拡張ができるよりはるか昔からあり、&lt;code&gt;Strict&lt;/code&gt;拡張のことなど一切考えないで作られたものです。動的型付け言語に後から静的型検査を導入するのが大変なように、相対する機能を後付けすると衝突が起こるのは仕方のないことですが、こと&lt;code&gt;Strict&lt;/code&gt;拡張については想像以上に大きな衝突のようです😞。&lt;/p&gt;
&lt;p&gt;それでも使いたいという方に、今回の記事が助けになれば幸いです💪それでは&lt;code&gt;Strict&lt;/code&gt;な方も&lt;code&gt;NoStrict&lt;/code&gt;な方も&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking!!&lt;/span&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;例えば&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;さんによる&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2015/12/10/200630&#34;&gt;この記事&lt;/a&gt;より&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 「もっとも、日常ではここまで気にしなければいけない場面は少ないので、ほとんどの場合は気にせず感嘆符をつけて大丈夫だろう。&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;からは、全フィールドをデフォルトで正格にする&lt;code&gt;StrictData&lt;/code&gt;という拡張が入るため、こちらを使おう」&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;code&gt;BangPatterns&lt;/code&gt;言語拡張を有効にした上で上記のように書き換えてみると、&lt;code&gt;Strict&lt;/code&gt;拡張の有無に関わらずエラーが発生します。試してみましょう。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;実際のところ今回紹介するケース以外にも、ポイントフリースタイルにするかしないかで実行効率などが変わる場合があります。例えば、&lt;a href=&#34;https://treszkai.github.io/2019/07/13/haskell-eval&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Evaluation of function calls in Haskell&lt;/span&gt;&lt;/a&gt;をご覧ください。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;もっとも、この例では引数はリストでしょうから、&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;までのみ正格評価するメリットは少なそうですが。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;大きなリストにすると、今度はエラーが発生するまでに時間がかかってしまうので…。ちなみに、このようにスタック領域を小さくすることでスペースリークを検出する手法は、&lt;a href=&#34;https://github.com/ndmitchell/spaceleak&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ndmitchell/spaceleak: Notes on space leaks&lt;/span&gt;&lt;/a&gt;でも紹介されています。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がどのように評価し、スタック領域を消費するかは&lt;a href=&#34;https://takenobu-hs.github.io/downloads/haskell_ghc_illustrated.pdf&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC illustrated&lt;/span&gt;&lt;/a&gt;や、その参考文献をご覧ください。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/how-to-use-type-newtype-data.html&#34; lang=&#34;ja&#34;&gt;data / newtype / type の使い方&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/haskell-casually-at-work.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskellを業務で使う、カジュアルに&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2020/06/06/Haskell_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">Haskell 環境構築ツールフローチャートを作りました</title><updated>2020-06-06T12:24:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2020/06/06/Haskell_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">前に環境構築についての記事を書いたのですが、初学者向けにパッと見て分かるようにフローチャートにしました。kakkun61.hatenablog.comGoogle ドライブ 図形描画のファイルはこちらです。コメントを付けることができます。docs.google.com</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2020-05-31T02:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 www.youtube.com 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2020-05-06T17:02:25.994+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック
修飾キー：ControlとOptionを</summary></entry><entry><id>https://kurokawh.blogspot.com/2020/05/linux-gnupg.html</id><title type="text">[linux] gnupgによる暗号化処理時の確認プロンプトを抑制する方法</title><updated>2020-05-06T16:37:57.790+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2020/05/linux-gnupg.html"/><summary type="text">gnupgを用いてファイルを暗号化する際、予めインポートした公開鍵に対してtrust設定をしておかないと、指定した公開鍵毎に以下のような警告が発せられます。


% gpg -e -r abc@test.org a.txt 
gpg: AAAA4C0DD6F2ZZZZ: この鍵が本当に本人のものである、という兆候が、ありません

sub  elg2048/AAAA4C0DD6F2ZZZZ 2020-05-06 Hiroyuki Kurokawa &lt;abc@test.org&gt;
  主鍵フィンガープリント: &lt;snip&gt;
  副鍵フィンガープリント: &lt;snip&gt;

この鍵は、このユーザIDをなのる本人のものかどうか確信でき
ません。今から行うことを＊本当に＊理解していない場合には、
次の質問にはnoと答えてください。

それでもこの鍵を使いますか? (y/N)

以下のオプションを指定する</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html</id><title type="text">stack で管理されたプロジェクトを cabal でビルドするために</title><updated>2020-05-02T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html"/><summary type="html">&lt;p&gt;Haskell のビルドツールといえば &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; です。ちょっと前までは &lt;strong&gt;cabal&lt;/strong&gt; より &lt;strong&gt;stack&lt;/strong&gt; の方が流行っていたのですが、最近は開発も落ち着いているようであまり動きがありません。それよりも &lt;strong&gt;cabal&lt;/strong&gt; の &lt;strong&gt;nix-style local build&lt;/strong&gt; が非常に使いやすく、近頃では &lt;strong&gt;stack&lt;/strong&gt; から &lt;strong&gt;cabal&lt;/strong&gt; に移行しているプロジェクトも多くあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; を使っていて改善したら良いなぁと思う部分としては、新しい &lt;strong&gt;GHC&lt;/strong&gt; やライブラリをすぐに使おうと思っても &lt;strong&gt;LTS&lt;/strong&gt; や &lt;strong&gt;nightly&lt;/strong&gt; に入っていないため使えなかったり、&lt;strong&gt;Backpack&lt;/strong&gt; が未だに使えなかったりするところでしょうか。&lt;/p&gt;
&lt;p&gt;ただ、ビルドの再現性という点においては &lt;strong&gt;stack&lt;/strong&gt; の方が優秀だと思っているので今は両方使っています。(&lt;strong&gt;index-state&lt;/strong&gt; と &lt;strong&gt;freeze&lt;/strong&gt; ファイルを組み合わせれば &lt;strong&gt;cabal&lt;/strong&gt; でも再現性が保証されそうな気がしますが、どうなんだろう)&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;stack&lt;/strong&gt; で管理されたプロジェクトを確実に &lt;strong&gt;cabal&lt;/strong&gt; でビルドするための方法についてまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt; に載ってた &lt;strong&gt;Stackage&lt;/strong&gt; の使い方の紹介でもあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;ここでは &lt;strong&gt;stack&lt;/strong&gt; で管理されていて、&lt;strong&gt;cabal&lt;/strong&gt; ファイルにバージョン制約が明記されていないという、良くあるシチュエーションを考えます。&lt;/p&gt;
&lt;p&gt;どんなプロジェクトでも良いのですが、具体的には &lt;a href=&#34;https://github.com/arcticmatt/dino-brick&#34;&gt;arcticmatt/dino-brick&lt;/a&gt; のようなプロジェクトです。&lt;code&gt;stack.yaml&lt;/code&gt; は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-8.23&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arcticmatt/dino-brick/blob/dino/dino.cabal#L16&#34;&gt;dino.cabal の build-depends&lt;/a&gt; には、ほとんどバージョンが明記されていません。(&lt;strong&gt;stack&lt;/strong&gt; の場合はスナップショットが決まると自動的にパッケージのバージョンが決まるため、明示する必要はあまり無いのです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプロジェクトを &lt;strong&gt;cabal&lt;/strong&gt; でビルドするためにはどうしたら良いんだろうか？というお話です。何もしなくてもビルドできるプロジェクトも結構あるんですが、ハマる時もあります・・・。&lt;/p&gt;
&lt;h2 id=&#34;package.yaml-から-cabal-ファイルを生成する&#34;&gt;package.yaml から cabal ファイルを生成する&lt;/h2&gt;
&lt;p&gt;リポジトリに &lt;code&gt;package.yaml&lt;/code&gt; しか含まれていない場合は、&lt;code&gt;package.yaml&lt;/code&gt; から &lt;strong&gt;cabal&lt;/strong&gt; ファイルを生成しましょう。&lt;/p&gt;
&lt;p&gt;以下のコマンドでビルドすることなくすぐに生成できます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --dry-run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回は &lt;code&gt;dino.cabal&lt;/code&gt; が最初からリポジトリに含まれているため何もしなくても良さそうですね。&lt;/p&gt;
&lt;h2 id=&#34;cabal-でビルドしてみよう&#34;&gt;cabal でビルドしてみよう&lt;/h2&gt;
&lt;p&gt;とりあえずビルドしてみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick

$ cabal update
Downloading the latest package list from hackage.haskell.org
To revert to previous state run:
    cabal v2-update &amp;#39;hackage.haskell.org,2020-01-19T06:12:36Z&amp;#39;

$ cabal build
...

src/UI.hs:142:56: error:
    • Couldn&amp;#39;t match expected type ‘App s0 e0 n0’
                  with actual type ‘Game’
    • In the fourth argument of ‘customMain’, namely ‘g’
      In a stmt of a &amp;#39;do&amp;#39; block:
        customMain (V.mkVty V.defaultConfig) (Just chan) app g
      In the expression:
        do chan &amp;lt;- newBChan 10
           forkIO
             $ forever
                 $ do modifyIORef counter (+ 1)
                      c&amp;#39; &amp;lt;- readIORef counter
                      ....
           g &amp;lt;- initGame 0
           customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |
142 |   customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |                                                        ^
cabal: Failed to build dino-0.1.0.0 (which is required by exe:dino from
dino-0.1.0.0).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーがいくつも出てしまいました。上記の結果はそのうちの最後の1つだけを表示しています。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;stack build&lt;/code&gt; だとビルドできます。&lt;/p&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; だとビルドできて、&lt;strong&gt;cabal&lt;/strong&gt; だと失敗してしまう原因はビルド時にパッケージのバージョンにあります。どのパッケージが原因かと言うと、今回は &lt;a href=&#34;https://hackage.haskell.org/package/brick&#34;&gt;brick&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; の場合は &lt;a href=&#34;https://www.stackage.org/lts-8.23&#34;&gt;LTS-8.23&lt;/a&gt; に含まれるバージョンを利用することになるので &lt;a href=&#34;https://www.stackage.org/lts-8.23/package/brick-0.17.2&#34;&gt;brick-0.17.2&lt;/a&gt; を利用します。&lt;/p&gt;
&lt;p&gt;一方で &lt;strong&gt;cabal&lt;/strong&gt; の場合は &lt;code&gt;cabal update&lt;/code&gt; を最後に実行した時の &lt;strong&gt;Hackage&lt;/strong&gt; の最新バージョンが利用されます。これは明示的なバージョン制約が &lt;strong&gt;cabal&lt;/strong&gt; ファイルに記述されていないためです。そのため &lt;a href=&#34;https://hackage.haskell.org/package/brick-0.50.1&#34;&gt;brick-0.50.1&lt;/a&gt; などが利用されます。&lt;/p&gt;
&lt;p&gt;バージョンアップによって後方互換性が保たれている場合は何も考えずにビルドが通るのですが、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンが変わるタイミングなどでは破壊的変更が含まれている場合も多いため、どこかでビルドが壊れます。&lt;/p&gt;
&lt;p&gt;今回のプロジェクトでは &lt;a href=&#34;https://github.com/jtdaugherty/brick/blob/master/CHANGELOG.md#047&#34;&gt;brick-0.47&lt;/a&gt; の変更によって &lt;code&gt;Brick.Main.customMain&lt;/code&gt; の型が変わり、その結果ビルドエラーになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.46&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;        &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.47&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、原因が特定できれば、修正は簡単です。&lt;code&gt;brick&lt;/code&gt; にバージョン制約を付けるだけです。(0.47 でビルドできるようにコードを修正する方法ももちろん考えられます)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick == 0.46       -- 破壊的変更が起きる前のバージョンを指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトはこれで上手く動きました。&lt;/p&gt;
&lt;p&gt;しかし、どのバージョンで壊れたかどうかを毎回調べるのはかなりつらいです。そのため、もっと良い方法として &lt;code&gt;LTS-8.23&lt;/code&gt; のバージョン制約を使ってみましょう。&lt;/p&gt;
&lt;h2 id=&#34;cabal-freeze-コマンド&#34;&gt;cabal freeze コマンド&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; には &lt;code&gt;cabal freeze&lt;/code&gt; というコマンドがあります。アプリケーション開発で便利な機能です。&lt;/p&gt;
&lt;p&gt;コマンドを実行すると &lt;code&gt;cabal.project.freeze&lt;/code&gt; というファイルが作られます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal freeze
Wrote freeze file: dino-brick/cabal.project.freeze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルは一言でいえば &lt;code&gt;npm&lt;/code&gt; の &lt;code&gt;package-lock.json&lt;/code&gt; ファイルと同じです。ビルドの再現性を保証するためのものです。&lt;/p&gt;
&lt;p&gt;例えば、先ほどの &lt;code&gt;dino.cabal&lt;/code&gt; ファイルで &lt;code&gt;brick&lt;/code&gt; のバージョンを &lt;code&gt;^&amp;gt;= 0.46&lt;/code&gt; のように指定した場合を考えてみましょう。この指定方法は &lt;code&gt;brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47&lt;/code&gt; と同じ意味になります。(&lt;strong&gt;cabal 2.0&lt;/strong&gt; から利用可能な記法です)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.46      -- brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47 と同じ意味
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば、会社のデスクトップPCでビルドしたときに &lt;code&gt;brick-0.46&lt;/code&gt; がインストールされたとしましょう。&lt;/p&gt;
&lt;p&gt;次の日の朝、バグフィックスされた &lt;code&gt;brick-0.46.1&lt;/code&gt; が &lt;strong&gt;Hackage&lt;/strong&gt; にアップロードされました。&lt;/p&gt;
&lt;p&gt;その日の午後、自宅のノートPCで &lt;code&gt;cabal update &amp;amp;&amp;amp; cabal build&lt;/code&gt; を行った場合、インストールされるのは &lt;code&gt;brick-0.46.1&lt;/code&gt; になります。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;brick ^&amp;gt;= 0.46&lt;/code&gt; という指定方法では環境ごとに同じバージョンが使われていることを保証できません。そのため、&lt;code&gt;cabal freeze&lt;/code&gt; コマンドで &lt;code&gt;cabal.project.freeze&lt;/code&gt; を生成し、コマンドを実行した環境で実際に利用されている具体的なバージョンを記録しておきます。これは &lt;strong&gt;stack&lt;/strong&gt; のスナップショットと同じようなものです。&lt;/p&gt;
&lt;p&gt;実際に生成されたファイルの中身はこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;constraints: any.Cabal ==2.4.0.1,
             any.MonadRandom ==0.5.1.2,
             any.QuickCheck ==2.13.2,
             QuickCheck +templatehaskell,
             any.StateVar ==1.2,
             any.adjunctions ==4.4,
             any.ansi-terminal ==0.10.2,
             ansi-terminal -example,
             any.ansi-wl-pprint ==0.6.9,
             ansi-wl-pprint -example,
             any.array ==0.5.3.0,
             any.base ==4.12.0.0,
             any.base-orphans ==0.8.1,
             any.bifunctors ==5.5.6,
             bifunctors +semigroups +tagged,
             any.binary ==0.8.6.0,
             any.binary-orphans ==1.0.1,
             any.blaze-builder ==0.4.1.0,
             any.brick ==0.46,
             brick -demos,
             any.bytes ==0.16,
             bytes +test-doctests,
             any.bytestring ==0.10.8.2,
             any.cabal-doctest ==1.0.8,
             any.call-stack ==0.2.0,
             any.case-insensitive ==1.2.1.0,
             any.cereal ==0.5.8.1,
             cereal -bytestring-builder,
             any.colour ==2.3.5,
             any.comonad ==5.0.6,
             comonad +containers +distributive +test-doctests,
             any.config-ini ==0.2.4.0,
             config-ini -enable-doctests,
             any.containers ==0.6.0.1,
             any.contravariant ==1.5.2,
             contravariant +semigroups +statevar +tagged,
             any.data-clist ==0.1.2.3,
             any.deepseq ==1.4.4.0,
             any.directory ==1.3.3.0,
             any.distributive ==0.6.1,
             distributive +semigroups +tagged,
             any.dlist ==0.8.0.7,
             any.exceptions ==0.10.4,
             exceptions +transformers-0-4,
             any.filepath ==1.4.2.1,
             any.free ==5.1.3,
             any.ghc-boot-th ==8.6.5,
             any.ghc-prim ==0.5.3,
             any.hashable ==1.3.0.0,
             hashable -examples +integer-gmp +sse2 -sse41,
             any.integer-gmp ==1.0.2.0,
             any.integer-logarithms ==1.0.3,
             integer-logarithms -check-bounds +integer-gmp,
             any.invariant ==0.5.3,
             any.kan-extensions ==5.2,
             any.lens ==4.18.1,
             lens -benchmark-uniplate -dump-splices +inlining -j -old-inline-pragmas -safe +test-doctests +test-hunit +test-properties +test-templates +trustworthy,
             any.linear ==1.20.9,
             linear -herbie +template-haskell,
             any.megaparsec ==7.0.5,
             megaparsec -dev,
             any.microlens ==0.4.11.2,
             any.microlens-mtl ==0.2.0.1,
             any.microlens-th ==0.4.3.2,
             any.mtl ==2.2.2,
             any.optparse-applicative ==0.15.1.0,
             any.parallel ==3.2.2.0,
             any.parsec ==3.1.13.0,
             any.parser-combinators ==1.2.1,
             parser-combinators -dev,
             any.pretty ==1.1.3.6,
             any.primitive ==0.7.0.0,
             any.process ==1.6.5.0,
             any.profunctors ==5.5.1,
             any.random ==1.1,
             any.reflection ==2.1.5,
             reflection -slow +template-haskell,
             any.rts ==1.0,
             any.scientific ==0.3.6.2,
             scientific -bytestring-builder -integer-simple,
             any.semigroupoids ==5.3.4,
             semigroupoids +comonad +containers +contravariant +distributive +doctests +tagged +unordered-containers,
             any.semigroups ==0.19.1,
             semigroups +binary +bytestring -bytestring-builder +containers +deepseq +hashable +tagged +template-haskell +text +transformers +unordered-containers,
             any.splitmix ==0.0.3,
             splitmix -optimised-mixer +random,
             any.stm ==2.5.0.0,
             any.tagged ==0.8.6,
             tagged +deepseq +transformers,
             any.template-haskell ==2.14.0.0,
             any.terminfo ==0.4.1.2,
             any.text ==1.2.3.1,
             any.text-zipper ==0.10.1,
             any.th-abstraction ==0.3.1.0,
             any.time ==1.8.0.2,
             any.transformers ==0.5.6.2,
             any.transformers-base ==0.4.5.2,
             transformers-base +orphaninstances,
             any.transformers-compat ==0.6.5,
             transformers-compat -five +five-three -four +generic-deriving +mtl -three -two,
             any.type-equality ==1,
             any.unix ==2.7.2.2,
             any.unordered-containers ==0.2.10.0,
             unordered-containers -debug,
             any.utf8-string ==1.0.1.1,
             any.vector ==0.12.0.3,
             vector +boundschecks -internalchecks -unsafechecks -wall,
             any.void ==0.7.3,
             void -safe,
             any.vty ==5.26,
             any.word-wrap ==0.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルと &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; ファイルでバージョンが異なる場合は &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; のバージョンが優先されるようです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.47      -- ビルドが失敗するバージョン制約を指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino

$ cabal freeze
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そもそも制約を満たさない場合は &lt;code&gt;cabal freeze&lt;/code&gt; が失敗するみたいです。&lt;/p&gt;
&lt;h2 id=&#34;スナップショットに対応した-freeze-ファイルを使おう&#34;&gt;スナップショットに対応した freeze ファイルを使おう&lt;/h2&gt;
&lt;p&gt;さて、それではリポジトリを &lt;strong&gt;clone&lt;/strong&gt; した直後に戻しましょう。こんな状態です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の後ろに &lt;code&gt;cabal.config&lt;/code&gt; を付けた &lt;a href=&#34;https://www.stackage.org/lts-8.23/cabal.config&#34;&gt;https://www.stackage.org/lts-8.23/cabal.config&lt;/a&gt; にアクセスすると &lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルとして利用可能なテキストファイルが表示されます。&lt;/p&gt;
&lt;p&gt;これをそのまま保存してビルドするだけで全てが上手くいきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl https://www.stackage.org/lts-8.23/cabal.config &amp;gt; cabal.project.freeze
$ cabal build
[__2] fail (backjumping, conflict set: base, dino, optparse-applicative)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: optparse-applicative, base, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おっと忘れていました。&lt;code&gt;LTS-8.23&lt;/code&gt; は &lt;code&gt;GHC-8.0.2&lt;/code&gt; でしたね。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;with-compiler&lt;/code&gt; の頭文字) オプションで利用する &lt;strong&gt;GHC&lt;/strong&gt; を切り替えてビルドしましょう！&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build -w ghc-8.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; でビルドが通っていれば、&lt;strong&gt;cabal&lt;/strong&gt; でも通る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cabal freeze&lt;/code&gt; を使うとスナップショットのようにバージョンを記録できる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の最後に &lt;code&gt;cabal.config&lt;/code&gt; を付けると &lt;strong&gt;freeze&lt;/strong&gt; ファイルを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-freeze&#34;&gt;5.4.6. cabal v2-freeze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2020/04/29/170208</id><title type="text">家から出ない生活４週間</title><updated>2020-04-29T17:10:29+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2020/04/29/170208"/><summary type="html">出社非推奨になったのを機に家から出ない生活を始めて４週間が経った。今までやったことをまとめていく。 食料品 せっかくだから生活で縛りプレイをしてみようと思って Amazon と Yodobashi を禁止にしている。この２社は最近評判が良くないこともあるし。 業務スーパーの通販 いわゆるネットスーパーはサイトが激重になっていたり配達可能日がすべて☓になっていたりで機能不全を起こしているようだった。そこで飲食店がメインターゲットであろう業務スーパーなら今空いているだろうという読み。ここではピザ材料、冷凍野菜、割り箸などを入手している。 とにかく業務スーパーの通販を最大限利用するには冷凍室の容積が…</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/haskell-casually-at-work.html</id><title type="text">Haskellを業務で使う、カジュアルに</title><updated>2020-04-26T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/haskell-casually-at-work.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#作業の支援加速にhaskellを使う&#34; title=&#34;作業の支援加速にhaskellを使う&#34;&gt;🔧「作業」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#テストデータ生成&#34; title=&#34;テストデータ生成&#34;&gt;テストデータ生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パーサー&#34; title=&#34;パーサー&#34;&gt;パーサー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#階層データ処理&#34; title=&#34;階層データ処理&#34;&gt;階層データ処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#高機能電卓&#34; title=&#34;高機能電卓&#34;&gt;高機能電卓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他&#34; title=&#34;その他&#34;&gt;その他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#思考の支援加速にhaskellを使う&#34; title=&#34;思考の支援加速にhaskellを使う&#34;&gt;💡「思考」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#仕様理解&#34; title=&#34;仕様理解&#34;&gt;仕様理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#モデル確認&#34; title=&#34;モデル確認&#34;&gt;モデル確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#モデル探索&#34; title=&#34;モデル探索&#34;&gt;モデル探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他-1&#34; title=&#34;その他-1&#34;&gt;その他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h1&gt;
&lt;p&gt;この記事では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務でカジュアルに使う観点やヒントについて、簡単に紹介します。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務で使える局面は、以下のようにいくつか考えられます。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;「プロダクト」の開発用言語として、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;li&gt;「作業」の支援・加速用に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;li&gt;「思考」の支援・加速用に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;つまり、プロダクトの開発用言語として&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いない業務形態においても、上記&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;のケースとして、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使用できます。すなわち、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は幅広い局面でカジュアルに、つまり気軽に手軽に使用できます。&lt;/p&gt;
&lt;p&gt;本記事では、特に、上記の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;について、いくつかの観点やヒントや例を紹介します。&lt;/p&gt;
&lt;p&gt;なお、上記は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いる場合には限りません。&lt;span class=&#34;ascii&#34;&gt;Python, Perl, Ruby, Rust, Scala, OCaml, Clojure, Go, Elixir,&lt;/span&gt; … といった、様々なプログラミング言語に置き換えて本記事を解釈してもらって構いません。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;作業の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作業の支援加速にhaskellを使う&#34; title=&#34;作業の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔧「作業」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（を含むプログラミング言語）は、開発などの日常業務において、「作業」の支援・加速用に使うことが出来ます。&lt;/p&gt;
&lt;p&gt;つまり、電卓や&lt;span class=&#34;ascii&#34;&gt;Excel&lt;/span&gt;などのように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を日常ツールの一つとして使えます。&lt;/p&gt;
&lt;p&gt;特に、直近の業務作業を加速するために、書き捨てのツールを高品質で素早く欲しい場合や、ちょっとした対話ツールを欲しい場合などにも、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に活用できます。&lt;/p&gt;
&lt;p&gt;例えば具体的には、以下の場合に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストデータ生成&lt;/li&gt;
&lt;li&gt;パーサー&lt;/li&gt;
&lt;li&gt;階層データ処理&lt;/li&gt;
&lt;li&gt;高機能電卓&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下、それぞれについて簡単に紹介します。&lt;/p&gt;
&lt;h2 id=&#34;テストデータ生成&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#テストデータ生成&#34; title=&#34;テストデータ生成&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;テストデータ生成&lt;/h2&gt;
&lt;p&gt;例えば、解析事案が発生し、至急&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;分程度でテストデータを複数用意したい、というような場合に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でデータを生成させることは有効です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、関数合成や部分適用や高階関数や多相関数などの言語的な特徴により、小さな関数を組み合わせて、より大きな関数として作り上げることが容易です。&lt;/p&gt;
&lt;p&gt;対話環境（&lt;span class=&#34;ascii&#34;&gt;REPL&lt;/span&gt;）である&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いて、それら小さな関数を素早く高品質に確認した上で、徐々に大きな関数として組み合わせることにより、高品質な結果を素早く得ることがでできます。&lt;/p&gt;
&lt;p&gt;特にバイナリデータや複雑なデータを、一刻も早く高品質に生成することが重要な局面で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は威力を発揮します。&lt;/p&gt;
&lt;h2 id=&#34;パーサー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサー&#34; title=&#34;パーサー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサー&lt;/h2&gt;
&lt;p&gt;日常業務において、各種ログなどのデータを解析したい局面は頻繁に有ります。 単純なデータであれば、&lt;span class=&#34;ascii&#34;&gt;grep&lt;/span&gt;コマンドや&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;などの正規表現を用いて手早く仕事を済ませることも出来ます。&lt;/p&gt;
&lt;p&gt;しかし、データの構造が複雑であったり再帰的な構造である場合には、正規表現をデバッグするよりも、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で思い切ってパーサーを書いてしまう方が手早く済ませられることがあります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では、関数の組み立てが容易であることや&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;記法といった言語的な特徴を活かし、簡潔にパーサーを記述することができます。 言語的な特徴を活かした便利なパーサーコンビネータ関連のライブラリ（&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;&lt;code&gt;Parsec&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;code&gt;Megaparsec&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/replace-attoparsec&#34;&gt;&lt;code&gt;replace-attoparsec&lt;/code&gt;&lt;/a&gt;など）が豊富に存在します。&lt;/p&gt;
&lt;p&gt;一度パーサーの骨格を用意してしまえば、流用は容易であるため、強力な日常ツールとして&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使用できます。&lt;/p&gt;
&lt;h2 id=&#34;階層データ処理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#階層データ処理&#34; title=&#34;階層データ処理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;階層データ処理&lt;/h2&gt;
&lt;p&gt;例えばモジュールの構造に対応したデータのように、データが再帰的・階層的に表現されている場合は多くあります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、代数的データ型を用いて再帰的なデータ構造を簡潔に表現できます。また、簡潔なパターンマッチの記法と再帰的な関数により、これらの処理を容易に記述できる傾向にあります。&lt;/p&gt;
&lt;p&gt;もちろん、この再帰的なデータ構造も、コンパイル時の静的な型チェックの対象となるため、多くの不用意なミスを事前に抽出できます。&lt;/p&gt;
&lt;p&gt;素早く、非常に高品質にデータ処理を行うことが重要な局面で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は有効に機能します。&lt;/p&gt;
&lt;h2 id=&#34;高機能電卓&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#高機能電卓&#34; title=&#34;高機能電卓&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;高機能電卓&lt;/h2&gt;
&lt;p&gt;日常業務において、なんらかの変換テーブルや、計算式、定数値などの値を、散発的に直ちに得たい局面があります。 その都度、電卓で計算したり、&lt;span class=&#34;ascii&#34;&gt;Excel&lt;/span&gt;などの計算フォームを用意することで、手軽に業務を済ませられる場合もあります。&lt;/p&gt;
&lt;p&gt;しかし、繰り返し必要となる計算式や、ある程度複雑な計算であれば、これらの計算式などを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数群として定義しておき、対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;から用いることで、使い勝手良く素早く値を得ることができます。&lt;/p&gt;
&lt;p&gt;数値や対話操作などを補助する便利なライブラリ&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base/docs/Numeric.html&#34;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/base/docs/Data-Bits.html&#34;&gt;&lt;code&gt;Data.Bits&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/ghci-hexcalc/docs/Data-GHex.html&#34;&gt;&lt;code&gt;Data.GHex&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;や言語拡張&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#binary-integer-literals&#34;&gt;&lt;code&gt;BinaryLiterals&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#numeric-underscores&#34;&gt;&lt;code&gt;NumericUnderscores&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;などが豊富に存在します。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;における関数の組み立てが容易な特徴は、対話環境における対話的な操作との相性が良いため、試行錯誤的な計算作業にも有用です。&lt;/p&gt;
&lt;h2 id=&#34;その他&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他&#34; title=&#34;その他&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他&lt;/h2&gt;
&lt;p&gt;他にも、定型的なファイル処理や&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;コマンドや&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;の構築などを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いて便利に実現出来ます。 手元に各種雛形を蓄積していると、作業の素早さと正確さが求められる場合に、有益でしょう。&lt;/p&gt;
&lt;p&gt;もちろん、これらは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に限らず、多くのプログラミング言語にも言えます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、型システムに守られながら、関数を容易に組み立てられる特徴を持ちます。また、代数的データ型とパターンマッチの特徴により、直感的・シンプルで高品質なデータ表現・処理が可能です。さらに、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いる対話操作により、日常作業を高品質かつ手早く行えます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、（型システムの高度な機能などを使わない）基本的な機能のみにおいても、日常業務において有効に活用できるツールの一つです。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;思考の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#思考の支援加速にhaskellを使う&#34; title=&#34;思考の支援加速にhaskellを使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;💡「思考」の支援・加速に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（を含むプログラミング言語）は、開発などの日常業務において、「思考」の支援・加速用にも使うことが出来ます。&lt;/p&gt;
&lt;p&gt;つまり、紙と鉛筆などのように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を思考ツールの一つとして使えます。&lt;/p&gt;
&lt;p&gt;特に、試行錯誤的な思考フェーズや、探索フェーズにおいて、思考を整理・加速する場合などに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は便利です。&lt;/p&gt;
&lt;p&gt;例えば具体的には、以下の場合に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を便利に使えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仕様理解&lt;/li&gt;
&lt;li&gt;モデル確認&lt;/li&gt;
&lt;li&gt;モデル探索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下、それぞれについて簡単に紹介します。&lt;/p&gt;
&lt;h2 id=&#34;仕様理解&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#仕様理解&#34; title=&#34;仕様理解&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;仕様理解&lt;/h2&gt;
&lt;p&gt;ハードウェアやソフトウェア開発過程などでは、例えば、自然言語と図表や式の組み合わせで表現された仕様書を理解する事が必要な局面が多くあります。&lt;/p&gt;
&lt;p&gt;設計の上流工程で思考を広く深く及ばせておくことにより、仕様に対する思わぬ考え漏れや勘違いを防ぐことは、開発全体の質や開発速度を上げる観点で非常に有効です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、代数的データ型やパターンマッチを簡潔に記述できる言語的な特徴を持つため、仕様を簡潔に表現することに向いています。さらに、対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を用いて、自分の考えを試行錯誤的に確認できます。&lt;/p&gt;
&lt;p&gt;自然言語等の仕様を、プログラミング言語を用いて表現・写経する過程は、単純ですが、対象への理解を深める上で、意外に大きな投資対効果があります。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は、このような場合に強力なツールとなります。&lt;/p&gt;
&lt;h2 id=&#34;モデル確認&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#モデル確認&#34; title=&#34;モデル確認&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;モデル確認&lt;/h2&gt;
&lt;p&gt;設計の初期段階において、自分の考えミスを抽出するために、設計の中核部分を簡単なモデルで表現して確認することは、開発全体の質や開発速度を上げる観点で非常に有効です。&lt;/p&gt;
&lt;p&gt;前節の仕様理解の場合と同様に、設計の中核モデルを簡潔に記述する目的で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いることが出来る場合があります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチは、モデルの簡潔表現にもフィットする場合が多く、自分の考えを手早く確認することに有効に使用できます。&lt;/p&gt;
&lt;p&gt;さらに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で記述したモデルを、&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;&lt;code&gt;QuickCheck&lt;/code&gt;&lt;/a&gt;ライブラリなどによるランダムテストパターンを用いて簡易検査することにより、値の範囲や特性に対する考え不足を、容赦なく効率的に抽出できます。&lt;/p&gt;
&lt;h2 id=&#34;モデル探索&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#モデル探索&#34; title=&#34;モデル探索&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;モデル探索&lt;/h2&gt;
&lt;p&gt;設計の初期段階において、モデルのパラメータなどについての設計空間を、試行錯誤しながら探索したい局面があります。&lt;/p&gt;
&lt;p&gt;前節のモデル理解の場合と同様に、設計空間を探索する目的で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いることが出来る場合があります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチを用いてモデルを簡潔に記述できれば、系の大きさなどの多くのパラメータを振りながら、最適な設計値を探索することに活用できます。&lt;/p&gt;
&lt;h2 id=&#34;その他-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他-1&#34; title=&#34;その他-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他&lt;/h2&gt;
&lt;p&gt;思考フェーズでは、記述したプログラムの実行速度よりも、思考内容をコードで表現する速さや、試行錯誤的にコードの内容を確認・変更する速さの方が重要なことが有ります。&lt;/p&gt;
&lt;p&gt;各々の人の思考特性によりますが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の代数的データ型とパターンマッチなどの言語的な特徴は、実行可能仕様書・実行可能思考表現として、思考を整理することに向いています。&lt;/p&gt;
&lt;p&gt;以下のように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を用いて、簡潔に、素早く、手軽に、思考作業を支援・加速できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モデルなどの思考を、代数的データ型で直感的・簡潔に記述する&lt;/li&gt;
&lt;li&gt;処理をパターンマッチを用いて簡潔に記述する&lt;/li&gt;
&lt;li&gt;対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で、挙動と思考を手早く試行錯誤的に確認する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;便利ですね。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;この記事では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を業務でカジュアルに使う観点やヒントについて紹介しました。 「作業」や「思考」が必要な、よりたくさんの局面で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使用できます。&lt;/p&gt;
&lt;p&gt;関数合成、部分適用、高階関数、多相関数などの言語的な特徴は、関数をボトムアップや対話的に、素早くかつ高品質に組み上げるのに便利です。代数的データ型などの言語的な特徴は、ある種の思考パターン（選択、非一様、入れ子など）をストレートに表現するのに便利です。対話環境&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;は、試行錯誤的に作業や思考を進めるのに便利です。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に限らず、自分の思考特性にあったプログラミング言語を、業務を加速する日常的なツールとして備えておくことは有用です。&lt;/p&gt;
&lt;p&gt;しかし、そもそもプログラミング言語の可能性・適用範囲は非常に広いものです。その適用範囲を、「業務」に狭めてしまう必要もありません。&lt;/p&gt;
&lt;p&gt;プログラミング言語は、業務のみに限らず、日々の「思考」の支援・加速に広く使用できるものです。&lt;/p&gt;
&lt;p&gt;以上、 &lt;span class=&#34;ascii&#34;&gt;Enjoy programming&lt;/span&gt;！&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/strict-gotchas.html&#34; lang=&#34;ja&#34;&gt;Strict拡張を使用する際の注意点&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/io-monad-and-sideeffect.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;IO モナドと副作用&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/12/25/224329</id><title type="text">barbies-thで気軽にHKDを堪能しよう [Haskell AdC 14]</title><updated>2020-04-19T22:45:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/12/25/224329"/><summary type="html">ミーハーな読者なら、barbiesというライブラリをご存知の方も多いと思う。そう、HKDを扱う定番ライブラリだ。HKDは、同アドベントカレンダーにも寄稿されている他、Haskell Dayでも紹介された(https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660)注目の技法だ。Higher-Kinded Data (HKD) について - Qiita HKDは、一番簡単な場合であるはずのIdentityを使うと着脱が面倒になるという問題がよく知られている。Data.Barbie.BareモジュールのWearという型族…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html</id><title type="text">cabal repl コマンドについて</title><updated>2020-04-12T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html"/><summary type="html">&lt;p&gt;&lt;code&gt;cabal repl&lt;/code&gt; コマンドは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghci&lt;/code&gt;, &lt;code&gt;ghc --interactive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack repl&lt;/code&gt;, &lt;code&gt;stack ghci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などと同じように &lt;strong&gt;cabal&lt;/strong&gt; で &lt;strong&gt;REPL&lt;/strong&gt; 環境を実行するためのコマンドです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行する場合と、&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行する場合で挙動が少し異なります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.2.0.0
compiled using version 3.2.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;cabal-プロジェクト外で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行した場合&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; は自動的に &lt;strong&gt;fake-package&lt;/strong&gt; という環境を用意します。これは使い捨てのダミー &lt;strong&gt;cabal&lt;/strong&gt; プロジェクトです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl
Resolving dependencies...
Build profile: -w ghc-8.10.1 -O1
In order, the following will be built (use -v for more details):
 - fake-package-0 (lib) (first run)
Configuring library for fake-package-0..
Preprocessing library for fake-package-0..
Warning: No exposed modules
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-3302/setcwd.ghci
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成される内容は &lt;a href=&#34;https://github.com/haskell/cabal/blob/cabal-install-v3.2.0.0/cabal-install/Distribution/Client/CmdRepl.hs#L392&#34;&gt;withoutProject&lt;/a&gt; の中で定義されています。また、ログメッセージの最後に表示されている &lt;code&gt;/tmp/cabal-repl.-3302/&lt;/code&gt; ディレクトリに、実際に生成された &lt;strong&gt;cabal&lt;/strong&gt; ファイルなどが保存されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ls /tmp/cabal-repl.-3302/
dist-newstyle  fake-package.cabal  setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal-install-3.2&lt;/code&gt; で生成される &lt;code&gt;fake-package.cabal&lt;/code&gt; の内容は以下のようになっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cabal-version: 2.2
name:          fake-package
version:       0

library
    default-language: Haskell2010
    build-depends:    base -any&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;build-depends&lt;/strong&gt; に &lt;code&gt;base -any&lt;/code&gt; が指定されているため、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンに対応した &lt;strong&gt;base&lt;/strong&gt; パッケージがデフォルトで利用可能です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; の使い方は &lt;strong&gt;ghci&lt;/strong&gt; などと同じなので大丈夫でしょう。&lt;/p&gt;
&lt;h3 id=&#34;repl-起動時のメッセージを省略する&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略する&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略するためには &lt;code&gt;-v0&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-で利用する-ghc-を切り替える&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; で利用する GHC を切り替える&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal build&lt;/code&gt; などでもおなじみの &lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;--with-compiler&lt;/code&gt;) オプションを指定するだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -w ghc-8.8.3
...
GHCi, version 8.8.3: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20727/setcwd.ghci
Prelude&amp;gt;

$ cabal repl -w ghc-8.10.1
...
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20914/setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ファイルを指定して-repl-を起動&#34;&gt;ファイルを指定して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;ghci A.hs&lt;/code&gt; のように &lt;strong&gt;REPL&lt;/strong&gt; 起動時にファイル (モジュール) を読み込みたい時があります。&lt;/p&gt;
&lt;p&gt;しかし、これを &lt;strong&gt;cabal&lt;/strong&gt; で同じように実行するとエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 A.hs
cabal: &amp;#39;repl&amp;#39; doesn&amp;#39;t take any extra arguments when outside a project: A.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのため、一度 &lt;code&gt;cabal repl&lt;/code&gt; を実行してから &lt;code&gt;:l&lt;/code&gt; コマンドでファイルを読み込む必要があります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :l A.hs
*A&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-にオプションを渡す&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; にオプションを渡す&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;stack repl&lt;/code&gt; の &lt;code&gt;--ghci-options&lt;/code&gt; に相当するオプションは &lt;code&gt;--repl-options&lt;/code&gt; です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot;
&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数指定する場合は &lt;code&gt;--repl-options&lt;/code&gt; を何度も指定する必要があります。たぶんこれは&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;仕様&lt;/a&gt;っぽいです&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot; --repl-options=&amp;quot;-XNoStarIsType&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-に依存関係を追加&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; に依存関係を追加&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; を動かす際、少し複雑なファイルの場合は &lt;strong&gt;base&lt;/strong&gt; 以外のパッケージを利用していることがほとんどです。&lt;/p&gt;
&lt;p&gt;そういう時には &lt;code&gt;-b&lt;/code&gt; (&lt;code&gt;--build-depends&lt;/code&gt;) オプションを利用します。このオプションは &lt;code&gt;stack repl --package&lt;/code&gt; と同じような感じでパッケージを追加できます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vector&lt;/strong&gt; パッケージを追加で読み込む例です。(パッケージのビルドが走る場合があります。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数のパッケージ &lt;strong&gt;vector&lt;/strong&gt;, &lt;strong&gt;aeson&lt;/strong&gt; を読み込む例は以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector -b aeson
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; import Data.Aeson
Prelude Data.Vector Data.Aeson&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、カンマ区切りで続けてパッケージを指定することも可能です。(&lt;code&gt;-b&lt;/code&gt; ではエラーになります)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --build-depends=&amp;quot;vector, aeson&amp;quot;
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パッケージのバージョンを指定することも可能です。バージョンの指定には &lt;strong&gt;build-depends&lt;/strong&gt; と同じ記法が使えます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b aeson==1.4.7.1
...
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;ここで、パッケージを追加した際は追加したパッケージが依存しているパッケージも含めて読み込まれる点に注意してください。(つまり、推移的に依存関係が追加されます)&lt;/p&gt;
&lt;p&gt;例えば &lt;a href=&#34;https://hackage.haskell.org/package/deepseq&#34;&gt;deepseq&lt;/a&gt; パッケージで定義されている &lt;code&gt;Control.DeepSeq&lt;/code&gt; は本当なら &lt;strong&gt;import&lt;/strong&gt; できないはずです。しかし、&lt;a href=&#34;https://hackage.haskell.org/package/vector&#34;&gt;vector&lt;/a&gt; パッケージは &lt;strong&gt;deepseq&lt;/strong&gt; パッケージに依存しているため &lt;strong&gt;import&lt;/strong&gt; できてしまいます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector
Prelude&amp;gt; import Control.DeepSeq 
Prelude Control.DeepSeq&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この挙動を変更したい場合は &lt;code&gt;--no-transitive-deps&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; import Control.DeepSeq 

&amp;lt;no location info&amp;gt;: error:
    Could not load module ‘Control.DeepSeq’
    It is a member of the hidden package ‘deepseq-1.4.4.0’.
    Perhaps you need to add ‘deepseq’ to the build-depends in your .cabal file.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;読み込まれるパッケージがどのように変化しているか確認しておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :show packages 
active package flags:
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector
Prelude&amp;gt; :show packages 
active package flags:
  -package-id transformers-0.5.6.2
  -package-id primitive-0.7.0.1-26f169240ac34903846f3a33e2517e97382af71bd7fe7cb7262fd6ca4381f53e
  -package-id array-0.5.4.0
  -package-id deepseq-1.4.4.0
  -package-id integer-gmp-1.0.3.0
  -package-id rts
  -package-id ghc-prim-0.6.1
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; :show packages 
active package flags:
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-プロジェクト内で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行した場合&lt;/h2&gt;
&lt;p&gt;基本的にはプロジェクト内で &lt;code&gt;cabal repl&lt;/code&gt; と実行するとプロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; ファイルに従い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依存関係の追加&lt;/li&gt;
&lt;li&gt;モジュールの追加&lt;/li&gt;
&lt;li&gt;オプションの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などを自動的に行い、&lt;strong&gt;REPL&lt;/strong&gt; を起動します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
*MyLib&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この時、&lt;strong&gt;import&lt;/strong&gt; されるモジュールは1つのみです。(これは仕様みたいです)&lt;/p&gt;
&lt;p&gt;そのため、必要なモジュールは自分で &lt;strong&gt;import&lt;/strong&gt; する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;プロジェクトを無視して-repl-を起動&#34;&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動するためには &lt;code&gt;-z&lt;/code&gt; (&lt;code&gt;--ignore-project&lt;/code&gt;) オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -z
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;今回紹介したオプション一覧&#34;&gt;今回紹介したオプション一覧&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;short&lt;/th&gt;
&lt;th&gt;long&lt;/th&gt;
&lt;th&gt;オプションの意味&lt;/th&gt;
&lt;th&gt;stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--repl-options&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ghci&lt;/strong&gt; に渡すオプション指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ghci-options&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--build-depends&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;依存関係の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ignore-project&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; を無視する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-load&lt;/code&gt; が近いけど&lt;br&gt;プロジェクトの依存関係は読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-transitive-deps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;推移的な依存関係を追加しない&lt;/td&gt;
&lt;td&gt;デフォルトの動作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--with-compiler&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;利用するコンパイラの指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-with-ghc&lt;/code&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-v0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--verbose=0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;起動時のメッセージを省略&lt;/td&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-repl&#34;&gt;5.4.4. cabal v2-repl - Cabal User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5454&#34;&gt;Add –build-depends flag, associated support to new-repl #5454&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/3565&#34;&gt;Cabal repl and cabal build/run conflict over .o object files if ghci has -fobject-code set #3565&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/2592&#34;&gt;cabal repl load single module #2592&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;–repl-options doesn’t split on whitespace #6190&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5845&#34;&gt;Allow list for &lt;code&gt;repl --build-depends&lt;/code&gt; #5845&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5374&#34;&gt;&lt;code&gt;cabal new-repl&lt;/code&gt; only brings one module into scope #5374&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/io-monad-and-sideeffect.html</id><title type="text">IO モナドと副作用</title><updated>2020-04-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/io-monad-and-sideeffect.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は他のプログラミング言語には見られない特徴を多く持っている。その中の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つが純粋性だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語であることを、売りの&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つにしている。しかし、純粋性は多くの場合表現力の縮小を招く。ところが &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;モナドの導入により、通常のプログラミング言語と変わらぬ表現力を持てるようになっている。これは、とても驚くべきことだ。しかし、同時にこれは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 入門者にとって、大きな混乱を招いているようだ。&lt;/p&gt;
&lt;p&gt;今回は、そもそも純粋性とはなんなのか、なぜ他の言語は純粋性を担保できないのか、そして &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はどうやって &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドにより純粋性を担保しつつ他の言語と変わらない表現力を持てるようにしているのかについて、触れていきたいと思う。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#純粋性とは何か&#34; title=&#34;純粋性とは何か&#34;&gt;純粋性とは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#動作を扱う関数&#34; title=&#34;動作を扱う関数&#34;&gt;動作を扱う関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io-モナド&#34; title=&#34;io-モナド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#動作を第一級で取り扱う&#34; title=&#34;動作を第一級で取り扱う&#34;&gt;動作を第一級で取り扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おまけ-ioモナドの実装&#34; title=&#34;おまけ-ioモナドの実装&#34;&gt;おまけ&lt;span class=&#34;ascii&#34;&gt;: IO&lt;/span&gt;モナドの実装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;純粋性とは何か&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#純粋性とは何か&#34; title=&#34;純粋性とは何か&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;純粋性とは何か&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語 &lt;span class=&#34;ascii&#34;&gt;(purely functional programming language)&lt;/span&gt; を売りにしている。関数型 &lt;span class=&#34;ascii&#34;&gt;(functional)&lt;/span&gt; の部分は他に任せるとして、ここでは&lt;strong&gt;純粋 &lt;span class=&#34;ascii&#34;&gt;(purely)&lt;/span&gt;&lt;/strong&gt; の部分に着目しよう。純粋とはなんだろうか？ どういう条件を満たせば、プログラミング言語は純粋と言えるんだろうか？ &lt;a href=&#34;https://www.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の公式サイト&lt;/a&gt; ではこう述べられている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Every function in Haskell is a function in the mathematical sense (i.e.,&lt;/span&gt; “&lt;span class=&#34;ascii&#34;&gt;pure&lt;/span&gt;”&lt;span class=&#34;ascii&#34;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の全ての関数は、数学の意味での関数 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つまり「純粋」&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; です。&lt;/p&gt;
&lt;p&gt;– &lt;a href=&#34;https://www.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell.org&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;Features: Purely functional&lt;/span&gt; より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ふむ、どうやら全ての関数が、数学的な意味での関数であれば、そのプログラミング言語は純粋と言えるようだ。ところで、数学的な意味での関数とはなんだろうか？ 関数が純粋とはどういうことを指すんだろうか？ これは噛み砕くと、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;関数はどんな時も、同じ引数を与えられたら同じ結果を返す&lt;/p&gt;
&lt;p&gt;つまり、関数は毎回まっさらな状態で始まり、前にどんなことがあったのか、今巷でどういうことが起きてるのかを全く考慮に入れず、ただ受け取った引数から得られる情報だけを使って結果を計算する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;関数は、副作用を持たない&lt;/p&gt;
&lt;p&gt;つまり、関数は計算の結果を返す以外の役割を持たない。例えば、関数を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すのと、関数を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出してその結果を捨てまたもう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すので結果が変わることはない。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの性質にまとめられる &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。具体的には、関数 &lt;code&gt;f&lt;/code&gt; が、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回目の &lt;code&gt;f 1&lt;/code&gt; では &lt;code&gt;2&lt;/code&gt; を返し、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回目の &lt;code&gt;f 1&lt;/code&gt; では &lt;code&gt;3&lt;/code&gt; を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という動作をするなら、これは &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件にも &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; の条件にも違反することになる。では、関数 &lt;code&gt;printString&lt;/code&gt; が&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列をターミナルに出力し、&lt;code&gt;()&lt;/code&gt; を結果として返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことを考えよう。関数 &lt;code&gt;printString&lt;/code&gt; は常に &lt;code&gt;()&lt;/code&gt; を返すので &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件にはマッチする。しかし、この関数は、与えられた文字列をターミナルに出力するので、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回呼び出すか&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回呼び出すかは重要な違いになる。よって、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件を満たさないため、純粋ではない。逆に、関数 &lt;code&gt;getNowYear&lt;/code&gt; が、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全に副作用を持たず、何回呼び出しても他には何の影響もないが、今の年数を返す関数で、年が変わるごとに結果が変わる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となると &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; の条件に違反するため、やはり純粋ではない。関数が純粋になるためには、何の面白味もないかもしれないが、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; と &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; の条件を守らないといけない。決して夕日が沈むと突然結果を出さなくなったり、関数を呼ぶ度に近所の犬が吠えたり静かになったりしてはいけない。&lt;/p&gt;
&lt;p&gt;さて、このような定義なら、多くのプログラミング言語の関数が純粋性を持たないのは納得できるだろう。同じ引数でも呼ぶタイミングによって結果が変わる関数、関数を呼ぶと全く予期しなかったスイッチが作動し、別の関数の結果が突然変わるようなプログラムを思いつく人は少なくないはずだ。ただ、その人たちは同時にこうも思うだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;そのような関数はプログラミングでは必要不可欠だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はその必要不可欠な関数を、純粋性のためだけに書けないようにしてるのだろうか？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;その疑問は至極妥当で、当然のものだ。そして安心して欲しい。その質問に対する答えは &lt;span class=&#34;ascii&#34;&gt;NO&lt;/span&gt; だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋性を保ちながら、そのような必要不可欠な関数を表現する方法を持っている。&lt;/p&gt;
&lt;h2 id=&#34;動作を扱う関数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#動作を扱う関数&#34; title=&#34;動作を扱う関数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;動作を扱う関数&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; には、ターミナルに出力する動作を扱う関数や、ターミナルへの入力を受け取る動作を扱う関数が存在する。これは、どうも先ほどまでの純粋性の定義とは相容れないように見える。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の純粋関数型プログラミング言語という性質は、そのような関数を除いては純粋という意味なんだろうか？ それなら他のプログラミング言語でも事情は変わらない。ところが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はそのような関数まで純粋なのだ。そのカラクリについて、見ていこう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; でターミナルに文字列を &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;改行付きで&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; 出力する動作を扱う関数として、&lt;code&gt;putStrLn&lt;/code&gt; という関数がある。これを題材として扱っていこう。この関数はどういう型を持っているのだろう？ もし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型になっていたら、この場合は文字列を受け取り &lt;code&gt;()&lt;/code&gt; 型の値を返す関数になる。&lt;code&gt;()&lt;/code&gt; 型は次のように定義される &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、&lt;code&gt;()&lt;/code&gt; というたった一つの値を持つ型になる。なので、&lt;code&gt;putStrLn&lt;/code&gt; が &lt;code&gt;putStrLn :: String -&amp;gt; ()&lt;/code&gt; という型を持っていた場合は、常に &lt;code&gt;()&lt;/code&gt; という値を返す関数となり、純粋性の &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; 番目の条件を満たす。しかし、&lt;code&gt;putStrLn&lt;/code&gt; は呼び出し回数に応じて文字列をターミナルに出力していくので、副作用を持ち、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件には到底当てはまらない。では、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 番目の条件に当てはまるようにするにはどうすればいいだろう？ そのような選択肢は到底ないように見える。&lt;/p&gt;
&lt;p&gt;実際には、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; は&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型を持つ。つまり、返る値は &lt;code&gt;IO ()&lt;/code&gt; という不思議な型を持つ。こうすると純粋に文字列をターミナルに出力できるんだろうか？ 答えは &lt;span class=&#34;ascii&#34;&gt;NO&lt;/span&gt; だ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; 関数は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列をターミナルに出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数ではない。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、到底純粋性を持たないような操作をする関数を、そもそも関数の見方を変えて提供することで純粋性を保っている。この関数 &lt;code&gt;putStrLn&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受け取った文字列から、「ターミナルにその文字列を出力する動作」を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数だ。そして、「ターミナルにその文字列を出力する動作」は &lt;code&gt;IO ()&lt;/code&gt; という型を持つ。動作 &lt;span class=&#34;ascii&#34;&gt;(action)&lt;/span&gt; とは、文字通り「何をするか」 &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; を表す。&lt;code&gt;IO a&lt;/code&gt; は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;動作、つまり「何をするか」を表す値を持つ&lt;/li&gt;
&lt;li&gt;その動作をした結果、得られる値の型が &lt;code&gt;a&lt;/code&gt; であることを表す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型だ。抽象的すぎてあまりピンとこないかもしれない。もし、その動作が結果を返す以外に何もしないなら、それは純粋な操作であるから、次のように書ける&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、引数が何もない純粋関数だ。例えば、整数を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ受け取って、その和を計算する動作を返す関数は次のように書けるだろう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addAction ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;addAction x y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PureAction&lt;/span&gt; (\_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;putStrLn&lt;/code&gt; も &lt;code&gt;addAction&lt;/code&gt; と同じように、値そのものではなくその値を計算する&lt;strong&gt;動作&lt;/strong&gt;それ自体を返す。ただ、&lt;code&gt;putStrLn&lt;/code&gt; が返す &lt;code&gt;IO&lt;/code&gt; の動作は、&lt;code&gt;PureAction&lt;/code&gt; の動作よりもっと一般的なものだ。つまり、純粋な動作ではないかもしれないということだ。もしかしたらそれは、今の時刻で結果を変えるかもしれないし、結果は常に変わらなくても何回呼び出すかでターミナルに表示する文字を変えるかもしれない。つまり、完全に純粋な関数では表せないかもしれない。でも、動作自体は不変的だ。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力する動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を表す。これが、&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;時にはこういう動作を返してきたのが、&lt;span class=&#34;ascii&#34;&gt;12&lt;/span&gt;時には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力し、お昼の鐘を鳴らす動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を返すようになるということはないし、この動作を返す以外に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勝手にターミナルに文字列を出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということもない。例えば、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; で以下のようなプログラムの出力を見てみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; を計算し、&lt;/li&gt;
&lt;li&gt;結果を捨て&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; を返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というプログラムだ。このプログラムを評価しても、&lt;code&gt;()&lt;/code&gt; だけしか目にしないはずで、何回実行しても同じ結果が得られるはずだ。つまり、&lt;code&gt;putStrLn&lt;/code&gt; は余計なことを何もしていないと言えるだろう。そう説明すると、ちょっと &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をかじった人は&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;この説明は間違っている。この式は &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; を全く評価していないので、実際に &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が余計なことを何もしていないかは分からない&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と言うだろう。その通りだ。この説明は間違っている。それを確認してみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;something happened!&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もし、さっきの &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; がちゃんと計算されていたなら、今回は &lt;code&gt;something happened!&lt;/code&gt; というエラーが見れるはずだ。ところが、全く何の問題もなく式の実行は終わり、&lt;code&gt;()&lt;/code&gt; が出力されてしまった。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は遅延評価により、最終結果に本当に必要な部分しか計算してくれないので、&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; の部分は計算されず無視されてしまっていただけのようだ。では、ちゃんと修正してみよう。修正は、&lt;code&gt;seq&lt;/code&gt; という魔法の関数を使うことで可能だ。&lt;code&gt;seq :: a -&amp;gt; b -&amp;gt; b&lt;/code&gt; は一番最初に渡された引数を &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;必要かどうかに関わらず、強制的に&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; 計算し、その後&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目の引数を返す関数だ。この関数を使うと、次のように修正が可能だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;something happened!&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; something happened&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度は大丈夫だろう。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; の部分をエラーに変えると、ちゃんとエラーが出力されている。&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; は計算されているようだ。そう、&lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が実行されて実際に行われるのは、その定義通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「ターミナルに &lt;code&gt;&#34;str&#34;&lt;/code&gt; を出力する動作」を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということだけで、他には何もしない。常に同じ動作を返すし、副作用を起こしたりもしない。これは純粋関数の定義に当てはまっている。&lt;code&gt;putStrLn&lt;/code&gt; は純粋な関数なのだ。そして、その動作には、動作の結果の型によって型が決まっていて、それが &lt;code&gt;IO&lt;/code&gt; 型ということになる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;では、実際に &lt;code&gt;putStrLn&lt;/code&gt; はどういう定義になるんだろう？ その定義は純粋な枠組みで定義できるんだろうか？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と疑問を持つ人はいるかもしれない。その疑問はとても良いところをついている。そう、&lt;code&gt;putStrLn&lt;/code&gt; は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では定義できない。もしくは、定義するならば「文字列をターミナルに出力する動作」を表す値の作成方法を、何らかの仕組みで提供する必要がある。もし、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「文字列 &lt;code&gt;s&lt;/code&gt; をターミナルに出力する動作」を &lt;code&gt;PutStrLn s :: IO ()&lt;/code&gt; と書ける&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なら、その時は、&lt;code&gt;putStrLn&lt;/code&gt; を次のように定義できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PutStrLn&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただ、今度は &lt;code&gt;PutStrLn&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で定義するにはどうすればいいのだろう？ という話になり、この話は延々と続くことになるだろう。現実世界の純粋なエミュレータを &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内部で実装すれば収束するかもしれない。しかし、私たちは、現実世界をコストなく扱いたいわけであり、純粋かどうかは重要なことではない。そして、別に &lt;code&gt;putStrLn&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内で純粋に定義したいのではなく、「文字列 &lt;code&gt;s&lt;/code&gt; をターミナルに出力する動作」を扱いたいだけなのだ。なので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋な部分だけは目に見える範囲で提供し、非純粋な部分は隠蔽し、純粋に扱うことだけをできるようにしている。&lt;/p&gt;
&lt;p&gt;では、実際にこの動作を実行したい時はどうすればいいんだろう？ &lt;code&gt;putStrLn &#34;str&#34;&lt;/code&gt; が純粋に、「&lt;code&gt;&#34;str&#34;&lt;/code&gt; をターミナルに出力する動作」を返してきて、それを純粋に扱うことしかできないとなると、実際にターミナルに出力することはできないのではないだろうか？ それもその通りだ。では、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ではその問題をどう解決するか。実は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;main&lt;/code&gt; プログラムは、&lt;code&gt;IO&lt;/code&gt; 型の値で定義するようになっている。つまり、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように、&lt;code&gt;main&lt;/code&gt; を何らかの &lt;code&gt;IO&lt;/code&gt; 動作で定義する。そして、実際にこのプログラムからコンパイルされた実行ファイルは、定義された動作をそのまま行うようになっている。こうすることで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋性を保ちながら、非純粋な動作を扱えるようになっている。&lt;/p&gt;
&lt;h2 id=&#34;io-モナド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#io-モナド&#34; title=&#34;io-モナド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナド&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;putStrLn&lt;/code&gt; が純粋な理由は分かってもらえただろうか？ さて中には、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主張は分かったが、純粋に扱うだけに制限するということは、普通のプログラミング言語より非純粋な動作を上手く扱えないんじゃないか&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と疑問に思う人もいるだろう。これも当然の疑問だ。普通のプログラミング言語は、表現力豊かで、様々な制御構文を持ち、それぞれの構文が純粋性に拘らないため、とてもユニークな非純粋なプログラムを書くことができる。ただ、安心して欲しい。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; も、それに負けない表現力で、非純粋な動作を作成することができる。さて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、普通のプログラミング言語の機構の基盤は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作を上手く結合できること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ではないかと考えた。そして、このうまく結合する機構を、&lt;code&gt;IO&lt;/code&gt; 動作の上で実現する方法を考えた。結果、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの特殊な操作が組み込まれている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;純粋な計算を、&lt;code&gt;IO&lt;/code&gt; 動作に変換する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;pure :: a -&amp;gt; IO a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの &lt;code&gt;IO&lt;/code&gt; 動作を繋げる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;(&amp;gt;&amp;gt;=) :: IO a -&amp;gt; (a -&amp;gt; IO b) -&amp;gt; IO b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; については少し説明が必要だろう。&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの &lt;code&gt;IO&lt;/code&gt; 動作を繋げるというのは、&lt;code&gt;(&amp;gt;&amp;gt;=) :: IO a -&amp;gt; IO b -&amp;gt; IO b&lt;/code&gt; となった方が自然そうである。しかし、普通のプログラミング言語は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前の動作の結果により、次に行う動作を変える &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;while&lt;/code&gt; 文など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということが可能だ。そして、前の動作の結果は変数束縛などにより自由に参照できる。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、&lt;code&gt;IO&lt;/code&gt; 動作を純粋性により実際に実行することはできない。その代わり、上の動作の制御機構を、繋げる操作に組み入れることで代用しようとしたのだ。つまり、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の操作は、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;最初に受け取った &lt;code&gt;IO&lt;/code&gt; 動作を実行し、&lt;/li&gt;
&lt;li&gt;その結果から、次に行う &lt;code&gt;IO&lt;/code&gt; 動作を&lt;strong&gt;純粋に&lt;/strong&gt;生成し、&lt;/li&gt;
&lt;li&gt;生成された動作を行う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という動作全体を表す &lt;code&gt;IO&lt;/code&gt; 動作を生成する。この結果から次に行う &lt;code&gt;IO&lt;/code&gt; 動作を生成する部分をうまく定義すれば、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; によって様々な制御構文を模倣できるのではないかと考えたのだ。この仕組みはとても上手くいった。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では、非純粋な動作を&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;while&lt;/code&gt; 文で任意に実行することを、次のような純粋に動作を切り替える関数で代用する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;ifIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;whileIO ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;whileIO isEnd x0 act &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go x0 &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;  go x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ifIO (isEnd x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;    (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;        act x &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \nx &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;        go nx&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;    )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらの関数を使えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \loopCmd &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;  ifIO (loopCmd &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;No loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;    (whileIO (\(b, _) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (\(_, i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;loop &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \loopEndCmd &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; title=&#34;9&#34;&gt;        ifIO (loopEndCmd &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; title=&#34;10&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-11&#34; title=&#34;11&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-12&#34; title=&#34;12&#34;&gt;    ))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようなプログラムが書ける。このプログラムは、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;最初にターミナルへの入力を待ち、&lt;code&gt;loop&lt;/code&gt; と打たれれば、ループに入る。それ以外の場合は &lt;code&gt;&#34;No loop&#34;&lt;/code&gt; と出力し、プログラムを終了する。&lt;/li&gt;
&lt;li&gt;今のループの回数を出力し、ターミナルへの入力を待つ。&lt;/li&gt;
&lt;li&gt;ターミナルに &lt;code&gt;end&lt;/code&gt; と打たれれば、プログラムを終了する。それ以外の場合、ループカウントを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;増加させて、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; に戻る。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということを行う。このように、純粋な範囲内で繋げる操作を工夫することで、普通のプログラミング言語の機構を &lt;code&gt;IO&lt;/code&gt; 動作内に組み込めるようになっている。ただ、このプログラムは大変見にくい。なので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; はさらに、この繋げる操作を元に、次のような &lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt; を提供している&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;  loopCmd &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;  ifIO (loopCmd &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;    (&lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;No loop&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;    (whileIO (\(b, _) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (\(_, i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;loop &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;        loopEndCmd &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getLine&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;        ifIO (loopEndCmd &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; title=&#34;10&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; title=&#34;11&#34;&gt;          (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; title=&#34;12&#34;&gt;    ))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少しは見やすくなっただろうか？ この操作は、そこまで特別な操作をしてるわけではない。インデントを解析して、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;  x1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というのを、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; e2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に変形して、さらに&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;  e2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x2 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変形して、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  e1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x1 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;  e2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x2 &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;  e3&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変形する、というように最初から&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行変形して、&lt;code&gt;do&lt;/code&gt; がなくなるまで変形を行うだけだ。つまり一行一行の動作を &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; で繋げていくのだ。なお、一番最後以外は &lt;code&gt;x &amp;lt;- e&lt;/code&gt; という形になっているのが基本で、もしそのような形になっていない &lt;code&gt;e&lt;/code&gt; は、&lt;code&gt;_ &amp;lt;- e&lt;/code&gt; と変換される &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; 。なので、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と変換された後、先ほどの変換によって、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となる。このようにして、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は他のプログラミング言語の非純粋な動作を、純粋な枠組みでも同じように扱えるようになっている &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; 。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、この仕組みをモナディック&lt;code&gt;IO&lt;/code&gt;と名付け、&lt;code&gt;IO&lt;/code&gt; 型を &lt;code&gt;IO&lt;/code&gt; モナドと呼んでいる。モナドとは何か、どういう便利な側面があるのかについては、他の記事に譲る。&lt;/p&gt;
&lt;h2 id=&#34;動作を第一級で取り扱う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#動作を第一級で取り扱う&#34; title=&#34;動作を第一級で取り扱う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;動作を第一級で取り扱う&lt;/h2&gt;
&lt;p&gt;どうやら、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;IO&lt;/code&gt; 動作の仕組みが、純粋な枠組みでも他のプログラミング言語とそう劣るものではないということが分かってもらえただろうか？ ところで、先ほどの &lt;code&gt;ifIO&lt;/code&gt; や &lt;code&gt;whileIO&lt;/code&gt; は、&lt;code&gt;IO&lt;/code&gt; 動作を何事もなく引数にとって返したりしていた。&lt;code&gt;ifIO&lt;/code&gt; の定義をもう一度よく見てみよう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;ifIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; act2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプログラムは、条件を表す引数と、&lt;code&gt;IO&lt;/code&gt; 動作を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;個受け取り、条件によって&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作のうちのどちらかを返していた。これは考えてみれば、とても不思議で強力なことだと思わないだろうか？ 普通のプログラミング言語の &lt;code&gt;if&lt;/code&gt; 文は、条件から書かれたプログラムのどちらかを実行する。一方、&lt;code&gt;ifIO&lt;/code&gt; は実行を制御しているわけではない。単に、普通の関数と同じように、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの動作を受け取って、そのうちの片方を関数の返り値として返すだけだ。&lt;code&gt;ifIO&lt;/code&gt; を呼び出したプログラマは、返ってきた動作をゴミ箱に捨ててもいいし、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; で繋げて「&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回続けて同じ動作をする」&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの動作にしてもいい。もちろんその動作も &lt;code&gt;main&lt;/code&gt; に組み入れるかはプログラマ次第だ。なんなら、&lt;code&gt;main&lt;/code&gt; 以外にライブラリの一部としてグローバルに定義してもいい。ライブラリを使うユーザは、やっぱりそれを使うも使わないも自由だ。&lt;code&gt;main&lt;/code&gt; に組み入れない限り、その動作は単なるデータであり、実行もされない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt; 動作がデータであることは、プログラムをより豊かにする。さっきの &lt;code&gt;ifIO&lt;/code&gt; は、条件によって片方の動作を返していた。&lt;code&gt;IO&lt;/code&gt;動作はもっと多彩に制御できる。例えば、条件によって動作の順番を変えたかったら次のように書けばいい&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;chooseOrderIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;chooseOrderIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;    act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;    act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;    act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;    act1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;chooseOrderIO&lt;/code&gt; は条件によって、受け取った動作を実行する順番を変え、その順序で結合した動作を返す。順番が同じで結果だけ選ぶといったこともできる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ifResultIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;ifResultIO b act1 act2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; title=&#34;3&#34;&gt;  x1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; act1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; title=&#34;4&#34;&gt;  x2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; act2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ifIO&lt;/code&gt; は条件によって動作そのものを選んでいたが、&lt;code&gt;ifResultIO&lt;/code&gt; はどの条件でも &lt;code&gt;act1&lt;/code&gt; と &lt;code&gt;act2&lt;/code&gt; の順に動作をすること自体は変えない。代わりに、その動作の結果をどっちにするかだけを変える。このように、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は &lt;code&gt;IO&lt;/code&gt; 動作を、多彩に、しかも純粋にコーディネートすることができる。これは、他の多くのプログラミング言語にはなく、しかも強力な機能だ。そう、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;code&gt;IO&lt;/code&gt; 動作は、それが単なるデータであるがゆえに、通常のプログラミングの範囲で自由に加工できるのだ。&lt;/p&gt;
&lt;p&gt;これを、動作が第一級であるという。第一級とは、つまり他のデータと全く同じように扱えるということだ。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;この記事では、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;純粋とは何か&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、どうして純粋なのか&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は、純粋な中で、他の言語の機構をどうやって実現しているのか&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; が、その中で獲得した強力な機能とは何か&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;について紹介した。どうだろう？ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドについて、少しでも理解の補助になっただろうか？&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドとは、動作そのものを値に持つ型だった。そして、その値は、特別な繋げる操作により他の言語と同じように加工でき、しかも通常のプログラミングの範囲で加工が可能になっている。しかも、加工自体は純粋にでき、動作の生成も純粋にできる。これが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; が純粋であると言われる所以だった。&lt;/p&gt;
&lt;p&gt;この &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の根幹をなす機能が、どういう点で魅力的なのか分かってもらえたら、この記事を書いた甲斐があるというものだ。もし、あなたもこの機能の魅力に取り憑かれたらなら、ぜひ &lt;code&gt;IO&lt;/code&gt; 動作をふんだんに加工してプログラミングをしていって欲しい。では、楽しい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ライフを。&lt;/p&gt;
&lt;h2 id=&#34;おまけ-ioモナドの実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おまけ-ioモナドの実装&#34; title=&#34;おまけ-ioモナドの実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おまけ&lt;span class=&#34;ascii&#34;&gt;: IO&lt;/span&gt;モナドの実装&lt;/h2&gt;
&lt;p&gt;ところで、もしかしたら、読者の中には、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt; モナドは、現実世界を状態にする &lt;span class=&#34;ascii&#34;&gt;State&lt;/span&gt; モナドだ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;という主張を、見たことがある人がいるかもしれない。最後におまけとしてこの話に触れておこうと思う。気になる人は、この後も呼んでみると、&lt;code&gt;IO&lt;/code&gt; モナドの理解の助けになるかもしれない &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;または、むしろ混乱するかもしれない。もし、混乱したなら、とりあえずこの話は忘れることをお勧めする。ここに書いてある話を理解しなくても、&lt;code&gt;IO&lt;/code&gt; モナドの利用に関して全く支障はない。そういう話もあるぐらいの事柄だ。なので、安心してまずは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; プログラミングを楽しんでほしい。いつか楽しみ飽きたら戻ってきてもいいかもしれない&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;まず、この話は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非純粋な世界の話だということ&lt;/li&gt;
&lt;li&gt;単なる &lt;span class=&#34;ascii&#34;&gt;State&lt;/span&gt; モナドではないということ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を押さえておいて欲しい。さて、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の代表的な処理系 &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は、標準の範囲では純粋関数型プログラミングを提供するが、全体としては非純粋な計算も許容している。そして、その計算を &lt;code&gt;IO&lt;/code&gt; モナドの内部に使っている。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; では &lt;code&gt;IO&lt;/code&gt; モナドは、通常の言語内の一部として定義されている&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt;, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この型は、詳細は省くが、本質的には、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; 型の値を受け取り、&lt;code&gt;State# RealWorld&lt;/code&gt; 型の値と &lt;code&gt;a&lt;/code&gt; 型の値のタプルを返す関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の &lt;code&gt;newtype&lt;/code&gt; になっている。&lt;code&gt;State&lt;/code&gt; モナドについて知ってる人は、これは &lt;code&gt;State (State# RealWorld) a&lt;/code&gt; と同じだと思うだろう。しかし、&lt;code&gt;IO a&lt;/code&gt; の値は、他に &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の型では表現できない契約を持つ。それは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; の型の値は、必ず&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回だけ使用される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という契約だ。なので、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, \() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;code&gt;s#&lt;/code&gt; を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;箇所で使ってるため &lt;code&gt;IO (() -&amp;gt; State# RealWorld)&lt;/code&gt; の値になれないし、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, () &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;は一番外側の &lt;code&gt;IO&lt;/code&gt; は &lt;code&gt;s#&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 箇所で使っているため契約違反で、内側の &lt;code&gt;IO&lt;/code&gt; は受け取った引数を一度も使っていないのでやはり契約違反ということになる。この定義を使って、例えば &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で可変参照を扱う &lt;code&gt;IORef&lt;/code&gt; のフレームワークは、次のように定義されている &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;newIORef ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; title=&#34;4&#34;&gt;newIORef &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; title=&#34;5&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, var &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readIORef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; title=&#34;8&#34;&gt;readIORef (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;writeIORef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-11&#34; title=&#34;11&#34;&gt;writeIORef (&lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) val &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; val s1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-12&#34; title=&#34;12&#34;&gt;  s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, () &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この定義は、ちゃんと &lt;code&gt;IO&lt;/code&gt; 型の制約を守っている。なおここで出てくる、&lt;code&gt;#&lt;/code&gt; が付く関数やデータ型は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の中で特別扱いされ、プリミティブな関数やデータ型になっている。それぞれ、以下の型の関数として扱える&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-5&#34; title=&#34;5&#34;&gt;writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MutVar&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; s&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意して欲しいのは、これらの関数は純粋ではないということだ。これは、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; 上で次のように確認できる&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XMagicHash&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XUnboxedTuples&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Prim&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Types&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-7&#34; title=&#34;7&#34;&gt;      r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; _, b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; var&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-10&#34; title=&#34;10&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; は両方とも &lt;code&gt;readMutVar# var# r1#&lt;/code&gt; から得た値になる。ところが、これらを比較してみると &lt;code&gt;False&lt;/code&gt; になる &lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; 。もし、&lt;code&gt;readMutVar#&lt;/code&gt; が純粋なら、&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; の結果は同じになるため、上の評価結果は &lt;code&gt;True&lt;/code&gt; になるはずだ。しかし、残念ながら &lt;code&gt;readMutVar#&lt;/code&gt; は純粋ではないので、&lt;code&gt;b1&lt;/code&gt; と &lt;code&gt;b2&lt;/code&gt; は異なる値になってしまう。なお、この式は、&lt;code&gt;IO&lt;/code&gt; 型で定義しているが、実際には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 回目の &lt;code&gt;readMutVar#&lt;/code&gt; の呼び出しで &lt;code&gt;r1#&lt;/code&gt; を &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; 回使用しているし、&lt;/li&gt;
&lt;li&gt;返ってきた &lt;code&gt;State# RealWorld&lt;/code&gt; の値を捨てている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ので契約違反であることに注意だ。&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt; 上で、うまく評価結果を確認するために、&lt;code&gt;IO&lt;/code&gt; を使っている。&lt;/p&gt;
&lt;p&gt;さて、純粋性を守れないなら、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は一体全体何のためにこのような定義をしているんだろう？ 関数が純粋でなくてもいいなら、単に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義しても問題ないのではないだろうか？ この方が自然に動作を表しているように思える。ところが、このような定義は、ある問題を招くのだ。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; は純粋関数型プログラミング言語という売りの他に、遅延評価という他の言語にはあまり見られない評価機構を採用している。もちろん、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; も遅延評価が基本だ。正確には、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価順序は、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;The order of evaluation of expressions in Haskell is constrained only by data dependencies; an implementation has a great deal of freedom in choosing this order.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の式の評価順序は、データ依存によってのみ縛られます。これは、実装がこの順序の選択において、大きな自由度を持つことを意味します。&lt;/p&gt;
&lt;p&gt;– &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch7.html#x14-1420007&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report - Chapter 7 Basic Input/Output&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とあるように、データ依存関係によってのみ制御できる。ところが、&lt;code&gt;IO&lt;/code&gt;動作は違う。例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str1&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;str2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式において、&lt;code&gt;putStrLn &#34;str1&#34;&lt;/code&gt; と &lt;code&gt;putStrLn &#34;str2&#34;&lt;/code&gt; の動作の間には、何らのデータ依存関係も存在しない。しかしながら、&lt;code&gt;main&lt;/code&gt; は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;str1&#34;&lt;/code&gt; をターミナルに出力した後、&lt;code&gt;&#34;str2&#34;&lt;/code&gt; をターミナルに出力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という動作を表して欲しいはずだ。つまり、&lt;code&gt;IO&lt;/code&gt;動作はデータ依存関係によってのみ順序が決まるわけではなく、その繋げ方によって順序が決まって欲しいのだ。ところが、単純に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (() &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という定義を採用してしまうと、&lt;code&gt;IO&lt;/code&gt;の中身は繋げ方の順序を情報として持たないため、動作の実行順序を制御するのに、別途工夫が必要になる。そこで、元の定義の登場だ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RealWorld&lt;/span&gt;, a &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;State# RealWorld&lt;/code&gt; は、実際には &lt;code&gt;()&lt;/code&gt; 型と同じく単一の値を持つほぼ何の意味も持たない型になる。しかし、この型の値を計算度に付与することで、データ依存を作ることができる。具体的には、この &lt;code&gt;IO&lt;/code&gt; に対して次のように &lt;code&gt;pure&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt; &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; を定義するのだ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; g&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; g x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; g&amp;#39; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特に、&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; の定義が重要になる。&lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; が返してくる &lt;code&gt;IO&lt;/code&gt; の中身は、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;受け取った &lt;code&gt;State# RealWorld&lt;/code&gt; をまず最初の &lt;code&gt;IO&lt;/code&gt; 動作に渡す&lt;/li&gt;
&lt;li&gt;その結果を &lt;code&gt;g&lt;/code&gt; に渡して、次の &lt;code&gt;IO&lt;/code&gt; 動作を生成する&lt;/li&gt;
&lt;li&gt;生成した &lt;code&gt;IO&lt;/code&gt; 動作に、最初の &lt;code&gt;IO&lt;/code&gt; 動作が返してきた &lt;code&gt;State# RealWorld&lt;/code&gt; を渡す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということを行っている。これにより、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;受け取った &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; の結果の &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&#39;&lt;/code&gt; の結果の &lt;code&gt;State# RealWorld&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という順で &lt;code&gt;State# RealWorld&lt;/code&gt; のデータ依存関係が出来上がる。つまり、通常の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価の枠組みで、評価順序を保証できるようになるのだ。実際に、&lt;code&gt;IORef&lt;/code&gt; を例に考えてみよう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; title=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; title=&#34;4&#34;&gt;  b1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-5&#34; title=&#34;5&#34;&gt;  writeIORef &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-6&#34; title=&#34;6&#34;&gt;  b2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というプログラムにおいて、最終的な &lt;code&gt;pure $ b1 == b2&lt;/code&gt; からのデータ依存関係に、一見 &lt;code&gt;writeIORef True x&lt;/code&gt; は関与していないように見える。ところが、内部を見てみると、上のプログラムは、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; newMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; r0&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-4&#34; title=&#34;4&#34;&gt;      (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r1&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-5&#34; title=&#34;5&#34;&gt;      r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; writeMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r2&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-6&#34; title=&#34;6&#34;&gt;      (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r4&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; readMutVar&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r3&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; r4&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;, b1 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b2 &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と同じ意味を持ち、全て隠れた &lt;code&gt;State# RealWorld&lt;/code&gt; によってデータ依存で紐づいている。もちろん、&lt;code&gt;let&lt;/code&gt; 内の定義の順番を変えても何の問題もない。重要なのは &lt;code&gt;r0#&lt;/code&gt; から &lt;code&gt;r1#&lt;/code&gt; の結果が得られ、&lt;code&gt;r1#&lt;/code&gt; から &lt;code&gt;r2#&lt;/code&gt; の結果が得られ、というようなデータ依存だけだ。これにより、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価順序に特別な規則を設けない &lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; で、&lt;code&gt;IO&lt;/code&gt; を実装しているのだ。&lt;/p&gt;
&lt;p&gt;なお、こうなると &lt;code&gt;IO&lt;/code&gt; の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State# RealWorld&lt;/code&gt; の型の値は、必ず&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回だけ使用される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という契約も意義が見えてくる。もし、この契約が破られると、途中でデータ依存が分岐したり、または途中で途絶えたりすることになる。そうなると、動作がどういう挙動をするかは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 内では規定されなくなってしまう。実際に、最適化によってどう動作するかが変わってきてしまう例も作れる。&lt;code&gt;IO&lt;/code&gt; の契約とは、データ依存が必ず一本の線で繋がり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の評価の枠できちんと順番が規定されるということを保証しているのだ。&lt;/p&gt;
&lt;p&gt;これが、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; がこのような定義を &lt;code&gt;IO&lt;/code&gt; で採用している理由になる。もちろん、アナロジーとして現実世界全体を表す架空の状態を &lt;code&gt;State# RealWorld&lt;/code&gt; と見立て、&lt;code&gt;IO&lt;/code&gt;動作の実行により新たな現実世界全体の状態が手に入るという見方は可能だ。名前の由来もそこから来ている。ただ、基本的には、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; において、特別な仕組みを入れずに &lt;code&gt;IO&lt;/code&gt; を実装するためのやり方であるということを押さえておいて欲しい。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;定義は、 &lt;a href=&#34;https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/3-pure-functions-laziness-io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;School of Haskell&lt;/span&gt; のチュートリアル&lt;/a&gt; から拝借している。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;この定義は、&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1220006.1.5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report 6.1.5 The Unit Datatype&lt;/span&gt;&lt;/a&gt; で述べられているが、実際には &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の構文規則に違反している特別な構文が使われている。なので、実際に &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; でこのように定義できるわけではなく、擬似的に書くとこうなるという意味になる。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;動作は、計算 &lt;span class=&#34;ascii&#34;&gt;(computation)&lt;/span&gt; とも呼ばれる。また、日本の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; コミュニティでは、英語そのままで「アクション」とも呼ばれている。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;厳密には、&lt;code&gt;(&amp;gt;&amp;gt;)&lt;/code&gt; という別の関数を使って定義されるんだが、意味的にはそのような変換と思ってもらって構わない。正式な変換方法は、&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-470003.14&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Language Report 3.14 Do Expressions&lt;/span&gt;&lt;/a&gt; を参照するといいだろう。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;多くの言語では、&lt;code&gt;main&lt;/code&gt; プログラム以外の、例えばライブラリが勝手にスレッドを&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つ立てるなどの挙動をサポートしている。そのような挙動は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では残念ながらできない。なぜなら、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では &lt;code&gt;main&lt;/code&gt; に動作を組み入れない限りその動作は実行されないからだ。この点では、他の言語より表現力は劣っているということもできる。しかし、そのような機能は、多くの場合明示的に模倣できる。&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;code&gt;(# x, y #)&lt;/code&gt; は &lt;code&gt;(# a, b #)&lt;/code&gt; 型の値を表す特別な構文だ。ここでは詳細は述べないので、&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; のタプルの特別な表記方法だと思ってもらって構わない。&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;実際には &lt;code&gt;ST&lt;/code&gt; モナドとの兼ね合いで、直接こう定義はされていないが、分かりやすさのため簡略化している。&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;実際には、最適化次第で結果が変わることもある。&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;さらに、&lt;code&gt;State# RealWorld&lt;/code&gt; は &lt;span class=&#34;ascii&#34;&gt;unlifted&lt;/span&gt; なデータ型になっており、サンクを持たない。このため、強制的に正格評価になるようになっており、&lt;code&gt;IO&lt;/code&gt;動作が遅延され、最後に一気に評価されるということを防いでいる。これも、通常の &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の枠組みの中で提供されているのは、とても興味深い。&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;厳密には、残念ながら全てを特別扱いせずに済ませられているわけではない。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; では、&lt;code&gt;State# RealWorld&lt;/code&gt; に関して一部の最適化で特別な処理を施している。&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/haskell-casually-at-work.html&#34; lang=&#34;ja&#34;&gt;Haskellを業務で使う、カジュアルに&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/property-io.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HspecでQuickCheckするときもshouldBeなどが使えます&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html</id><title type="text">cabal install コマンドについて</title><updated>2020-04-03T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html"/><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; と全く同じ動作をする &lt;strong&gt;cabal&lt;/strong&gt; コマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今回利用した &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; のバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library 

$ stack --version
Version 2.1.3, Git revision 636e3a759d51127df2b62f90772def126cdf6d1f (7735 commits) x86_64 hpack-0.31.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この記事では &lt;code&gt;stack install&lt;/code&gt; コマンドと &lt;code&gt;cabal install&lt;/code&gt; コマンドの挙動の違いなどについて調査した結果等をまとめています。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;プロジェクトの構成&#34;&gt;プロジェクトの構成&lt;/h2&gt;
&lt;p&gt;例えば、プロジェクトが以下のような構成になっていて、&lt;strong&gt;executable&lt;/strong&gt; (mainExe1, mainExe2, subExe1, subExe2) が定義されているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── app
│   ├── Main1.hs
│   └── Main2.hs
├── cabal.project
├── stack.yaml
├── subs
│   ├── pkg1
│   │   ├── app
│   │   │   └── Main.hs
│   │   └── pkg1.cabal
│   └── pkg2
│       ├── app
│       │   └── Main.hs
│       └── pkg2.cabal
└── app.cabal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/tree/master/sample-code/2020/03-25/&#34;&gt;プロジェクトのコード&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stack-install-と-cabal-install-の違い&#34;&gt;stack install と cabal install の違い&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;　&lt;/th&gt;
&lt;th&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;インストール方法&lt;/td&gt;
&lt;td&gt;コピー&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;シンボリックリンク&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;インストール先ディレクトリの指定オプション&lt;/td&gt;
&lt;td&gt;&lt;code&gt;local-bin-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--installdir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;cabal-install&#34;&gt;cabal install&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal install&lt;/code&gt; に指定可能なコマンドをいくつか試してみて、実際に何がインストールされるか一覧にしました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;*注意点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install&lt;/code&gt; や &lt;code&gt;stack install .&lt;/code&gt; の挙動など、いくつか &lt;strong&gt;stack&lt;/strong&gt; と異なる場合があるので注意が必要です。&lt;/li&gt;
&lt;li&gt;注意点: 全てのパッケージに &lt;strong&gt;executable&lt;/strong&gt; が含まれている場合に限り実行可能です。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install all&lt;/code&gt; で &lt;strong&gt;executable&lt;/strong&gt; が含まれていないパッケージがある場合は以下のようなエラーになります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cabal: Cannot build the executables in the package pkg2 because it does not
contain any executables. Check the .cabal file for the package and make sure
that it properly declares the components that you expect.&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; に相当するコマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stack-install&#34;&gt;stack install&lt;/h3&gt;
&lt;p&gt;同様に &lt;code&gt;stack install&lt;/code&gt; も確認しました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;エラー 1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install . pkg1 pkg2
The following errors occurred while parsing the build targets:
- The package pkg1 was specified in multiple, incompatible ways: . pkg1
- The package pkg2 was specified in multiple, incompatible ways: . pkg2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー 2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install all
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: all
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;その他の指定方法&#34;&gt;その他の指定方法&lt;/h3&gt;
&lt;h4 id=&#34;cabal&#34;&gt;cabal&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install app:exe
cabal: Unknown target &amp;#39;app:exe&amp;#39;.
The package app has no component &amp;#39;exe&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;stack&#34;&gt;stack&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install app:exe
Error parsing targets: Component exe does not exist in package app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install exe:mainExe1
Error parsing targets: Unknown local package: exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー3&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install mainExe1
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: mainExe1
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-install-で良く使うオプション&#34;&gt;cabal install で良く使うオプション&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 47%&#34; /&gt;
&lt;col style=&#34;width: 52%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--installdir=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インストール先のパスを指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;--install-method=copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボリックリンクではなく、実体がコピーされる。&lt;br&gt;&lt;strong&gt;Docker&lt;/strong&gt; にバイナリをコピーする際や &lt;strong&gt;Windows&lt;/strong&gt; 環境などで利用することがあります。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すでに実行ファイルが存在する場合でも、常に上書きします。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt; を毎回指定するのが面倒な場合は&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal user-config update -a overwrite-policy:always&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というコマンドで &lt;code&gt;~/.cabal/config&lt;/code&gt; に設定できます。&lt;/p&gt;
&lt;h2 id=&#34;で変更になる点など&#34;&gt;3.2.0.0 で変更になる点など&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6519/files&#34;&gt;Copy on windows #6519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; 環境において &lt;code&gt;cabal install&lt;/code&gt; の際のデフォルトの挙動が変更されます。シンボリックリンクが作成できない場合は自動的にコピーになります。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6428&#34;&gt;Implement cabal install -z #6428&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルのプロジェクト設定を無視するオプション &lt;code&gt;-z&lt;/code&gt;, &lt;code&gt;--ignore-project&lt;/code&gt; が追加されます。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6576&#34;&gt;Resolve #6369 and #6393: Allow cabal v2-install pkgname:exename or http://example.com/package.tar.gz(#sha256=abcde…) #6576&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install &amp;#39;https://hackage.haskell.org/package/cabal-fmt-0.1.2/cabal-fmt-0.1.2.tar.gz#sha256=aae556efbcaddfd65c6a1c1811b122b0d8c8d00624c8c2e36aabb5e9f9ea9840&amp;#39;&lt;/code&gt;&lt;/pre&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html</id><title type="text">cabal-plan license-report 機能の紹介</title><updated>2020-03-30T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html"/><summary type="html">&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/cabal-plan&#34;&gt;cabal-plan&lt;/a&gt; を使って、プロジェクトが依存するパッケージのライセンスを列挙する方法について紹介します。&lt;/p&gt;
&lt;p&gt;本記事は &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/8vhkwv/is_there_a_tool_to_collect_all_license_files_of/&#34;&gt;Is there a tool to collect all LICENSE files of used dependencies?&lt;/a&gt; を参考にしています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal update
$ cabal install cabal-plan -f license-report
$ cabal-plan --version
cabal-plan 0.6.2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回の機能を使うためには &lt;strong&gt;license-report&lt;/strong&gt; フラグを有効にする必要があります。デフォルトでは無効になっています。&lt;/p&gt;
&lt;h2 id=&#34;ライセンスの列挙&#34;&gt;ライセンスの列挙&lt;/h2&gt;
&lt;p&gt;具体例として、このブログで試してみましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog&#34;&gt;e-bigmoon/haskell-blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ライセンスファイルを抽出する場合は &lt;code&gt;--licensedir&lt;/code&gt; オプションで出力先ディレクトリを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal-plan license-report --licensedir=licenses exe:site &amp;gt; blog.md
WARNING: couldn&amp;#39;t find metadata for base-4.13.0.0
WARNING: couldn&amp;#39;t find metadata for hakyll-sass-0.3
WARNING: license files for array-0.5.4.0 (global/GHC bundled) not copied
WARNING: license files for binary-0.8.7.0 (global/GHC bundled) not copied
WARNING: license files for bytestring-0.10.10.0 (global/GHC bundled) not copied
WARNING: license files for containers-0.6.2.1 (global/GHC bundled) not copied
WARNING: license files for deepseq-1.4.4.0 (global/GHC bundled) not copied
WARNING: license files for directory-1.3.6.0 (global/GHC bundled) not copied
WARNING: license files for filepath-1.4.2.1 (global/GHC bundled) not copied
WARNING: couldn&amp;#39;t find metadata for ghc-boot-th-8.8.3
WARNING: license files for ghc-prim-0.5.3 (global/GHC bundled) not copied
WARNING: license files for integer-gmp-1.0.2.0 (global/GHC bundled) not copied
WARNING: license files for mtl-2.2.2 (global/GHC bundled) not copied
WARNING: license files for parsec-3.1.14.0 (global/GHC bundled) not copied
WARNING: license files for pretty-1.1.3.6 (global/GHC bundled) not copied
WARNING: license files for process-1.6.8.0 (global/GHC bundled) not copied
WARNING: license files for stm-2.5.0.0 (global/GHC bundled) not copied
WARNING: license files for template-haskell-2.15.0.0 (global/GHC bundled) not copied
WARNING: license files for text-1.2.4.0 (global/GHC bundled) not copied
WARNING: license files for time-1.9.3 (global/GHC bundled) not copied
WARNING: license files for transformers-0.5.6.2 (global/GHC bundled) not copied
WARNING: license files for unix-2.7.2.2 (global/GHC bundled) not copied&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;出力結果&#34;&gt;出力結果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;licenses&lt;/code&gt; ディレクトリはだいたいこんな感じでライセンスファイルが格納されています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree licenses | head -n 20
licenses
├── Glob-0.10.0
│   └── LICENSE.txt
├── HTTP-4000.3.14
│   └── LICENSE
├── HsYAML-0.2.1.0
│   ├── LICENSE.GPLv2
│   └── LICENSE.GPLv3
├── HsYAML-aeson-0.2.0.0
│   └── LICENSE.GPLv2
├── JuicyPixels-3.3.5
│   └── LICENSE
├── Only-0.1
│   └── LICENSE
├── QuickCheck-2.13.2
│   └── LICENSE
├── SHA-1.6.4.4
│   └── LICENSE
├── StateVar-1.2
│   └── LICENSE&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;blog.md&lt;/code&gt; の内容を一部を以下に貼り付けます。完全なコードは&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/sample-code/2020/03-30/blog.md&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;dependency-license-report&#34;&gt;Dependency License Report&lt;/h1&gt;
&lt;p&gt;Bold-faced &lt;strong&gt;&lt;code&gt;package-name&lt;/code&gt;&lt;/strong&gt;s denote standard libraries bundled with &lt;code&gt;ghc-8.8.3&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;direct-dependencies-of-bigmoon-haskellers-blogexesite&#34;&gt;Direct dependencies of &lt;code&gt;bigmoon-haskellers-blog:exe:site&lt;/code&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Also depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;base&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/base-4.13.0.0&#34;&gt;&lt;code&gt;4.13.0.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(core library)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.8&#34;&gt;&lt;code&gt;0.8&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/extensible-0.8/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Extensible, efficient, optics-friendly data types and effects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-4.13.2.0&#34;&gt;&lt;code&gt;4.13.2.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/hakyll-4.13.2.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A static website compiler library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-sass-0.3&#34;&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;html-entities&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/html-entities-1.1.4.3&#34;&gt;&lt;code&gt;1.1.4.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/html-entities-1.1.4.3/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A codec library for HTML-escaped text and HTML-entities&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;rio&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/rio-0.1.14.1&#34;&gt;&lt;code&gt;0.1.14.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/rio-0.1.14.1/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A standard library for Haskell&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/yaml-0.11.3.0&#34;&gt;&lt;code&gt;0.11.3.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/yaml-0.11.3.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Support for parsing and rendering YAML documents.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;, &lt;code&gt;pandoc-citeproc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;indirect-transitive-dependencies&#34;&gt;Indirect transitive dependencies&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Glob&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Glob-0.10.0&#34;&gt;&lt;code&gt;0.10.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/Glob-0.10.0/LICENSE.txt&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Globbing library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/HTTP-4000.3.14&#34;&gt;&lt;code&gt;4000.3.14&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/HTTP-4000.3.14/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A library for client-side HTTP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回は &lt;strong&gt;cabal-plan&lt;/strong&gt; を使ってみましたが、同様のツールとして &lt;a href=&#34;https://github.com/fossas/fossa-cli/blob/master/docs/integrations/haskell.md#haskell&#34;&gt;fossas/fossa-cli&lt;/a&gt; や &lt;a href=&#34;https://github.com/github/licensed/blob/master/docs/sources/cabal.md&#34;&gt;github/licensed&lt;/a&gt; なども利用できるようです。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html</id><title type="text">Haskell 関連書籍の紹介ページを作りました</title><updated>2020-03-28T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html"/><summary type="html">&lt;p&gt;&lt;strong&gt;Qiita&lt;/strong&gt; で管理していた記事を移動しました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;haskell-関連の書籍紹介ページ&#34;&gt;Haskell 関連の書籍紹介ページ&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;/books/&#34;&gt;これから Haskell を学ぶ人のための書籍・論文紹介&lt;/a&gt;」というページを作りました。&lt;/p&gt;
&lt;p&gt;基本的には Qiita で管理していた内容ですが、いくつか書籍を追加し、「サポートページ」「正誤表」「レビュー」へのリンク等を追加しました。内容に不備がある場合は &lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/issues&#34;&gt;issue&lt;/a&gt; などで教えていただけると助かります。&lt;/p&gt;
&lt;p&gt;現在は主に自分が持っている物理書籍メインに紹介していますが、今後は電子書籍なども含めて充実させていけたらと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、今から入門するなら「&lt;a href=&#34;https://www.lambdanote.com/collections/frontpage/products/haskell&#34;&gt;プログラミング Haskell 第2版&lt;/a&gt;」をオススメします。&lt;/p&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2020/property-io.html</id><title type="text">HspecでQuickCheckするときもshouldBeなどが使えます</title><updated>2020-02-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2020/property-io.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;タイトルがほとんどすべてなんですが詳細を解説します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;😕なぜ使える？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#shouldbeなどはpropertyの中でも使えるので使ってください&#34; title=&#34;shouldbeなどはpropertyの中でも使えるので使ってください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;📣&lt;code&gt;shouldBe&lt;/code&gt;などは&lt;code&gt;property&lt;/code&gt;の中でも使えるので使ってください！&lt;/h1&gt;
&lt;p&gt;みなさんは&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;を使った&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書く際、どのように書いているでしょうか？&lt;br /&gt;
例えば&lt;a href=&#34;https://hspec.github.io/quickcheck.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のマニュアル&lt;/a&gt;のように、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;に&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を組み込む例として、次のような例を挙げています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/quickcheck.md&#34;&gt;こちらのコミット&lt;/a&gt;の時点での話です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;property&lt;/code&gt;関数に渡した関数&lt;small&gt;（以下、「&lt;code&gt;porperty&lt;/code&gt;ブロック」と呼びます）&lt;/small&gt;の中では&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でおなじみの&lt;code&gt;shouldBe&lt;/code&gt;などの&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;用関数を使わず、&lt;code&gt;==&lt;/code&gt;で結果を判定してますよね。&lt;br /&gt;
このサンプルに倣って、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;で書いたテストに&lt;span class=&#34;ascii&#34;&gt;property test&lt;/span&gt;を書くときは、&lt;code&gt;==&lt;/code&gt;を使ってる方が多いんじゃないでしょうか？&lt;/p&gt;
&lt;p&gt;ところが、この記事のタイトルに書いたとおり、実際のところ&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;は利用できます。&lt;br /&gt;
つまりは、こちら👇のようにも書ける、ということです！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように&lt;code&gt;property&lt;/code&gt;ブロックの中でも&lt;code&gt;shouldBe&lt;/code&gt;や&lt;code&gt;shouldSatisfy&lt;/code&gt;といった、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;固有の&lt;span class=&#34;ascii&#34;&gt;expectation&lt;/span&gt;関数を使うことの利点は、単に構文を他のテストと一貫させることができる、だけではありません。&lt;br /&gt;
&lt;strong&gt;テストが失敗したときのエラーが分かりやすくなる&lt;/strong&gt;、という遥かに重大なメリットがあるのです。&lt;/p&gt;
&lt;p&gt;試しにわざとテストを失敗させてみましょう。&lt;br /&gt;
先ほどの例&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;における&lt;code&gt;(x :: Int)&lt;/code&gt;という式を&lt;code&gt;(x + 1 :: Int)&lt;/code&gt;に変えれば、必ず失敗するはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※お手元で試す場合は&lt;a href=&#34;https://github.com/hspec/hspec/blob/9f3f4c38952f526701a67b6e26336a3a5aec0e89/doc/_includes/QuickCheck.hs&#34;&gt;こちら&lt;/a&gt;から元のコードを持ってきて、&lt;code&gt;stack build hspec&lt;/code&gt;なりを実行した上で修正・実行するのが簡単でしょう。&lt;/p&gt;
&lt;p&gt;結果、下記のようなエラーメッセージとなるでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このエラーでは「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」までしか教えてくれず、わかりづらいですよね。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;shouldBe&lt;/code&gt;を使用して以下のように書き換えると…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;describe &lt;span class=&#34;st&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  it &lt;span class=&#34;st&#34;&gt;&amp;quot;is inverse to show&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージはこう👇なります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) read, when used with ints, is inverse to show
       Falsifiable (after 1 test):
         0
       expected: 1
        but got: 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「テストが失敗したこと」と「どんな入力を&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;が生成したか」に加えて、&lt;code&gt;shouldBe&lt;/code&gt;に与えた両辺の式がどのような値を返したか、まで教えてくれました！&lt;br /&gt;
今回の例は極めて単純なのであまり役に立たないかも知れませんが、あなたが書いた関数をテストするときはやっぱり「期待される結果」と「実際の結果」両方がわかる方がデバッグしやすいですよね！&lt;/p&gt;
&lt;p&gt;と、いうわけで今後は&lt;code&gt;property&lt;/code&gt;関数&lt;small&gt;（あるいはその省略版の&lt;code&gt;prop&lt;/code&gt;関数）&lt;/small&gt;に渡した関数の中でも&lt;code&gt;shouldBe&lt;/code&gt;などを必ず使ってください！&lt;br /&gt;
&lt;small&gt;（せっかくなんで、今回紹介したドキュメントを&lt;a href=&#34;https://github.com/hspec/hspec/pull/429&#34;&gt;修正するための&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;&lt;/a&gt;を送っておきました。これがマージされればこの記事の情報の大半は時代遅れになります）&lt;/small&gt;&lt;/p&gt;
&lt;h1 id=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ使える&#34; title=&#34;なぜ使える&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;😕なぜ使える？&lt;/h1&gt;
&lt;p&gt;しかしここで、一つ疑問が残ります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のドキュメントをつぶさに読んだことがある方はお気づきでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck-2.13.2/docs/Test-QuickCheck.html#t:Testable&#34;&gt;&lt;code&gt;property&lt;/code&gt;関数は、&lt;code&gt;Testable&lt;/code&gt;という型クラスのメソッド&lt;/a&gt;であるため、&lt;code&gt;Testable&lt;/code&gt;のインスタンスでなければ使えないはずです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;の&lt;code&gt;shouldBe&lt;/code&gt;などが返す値は型シノニムのたらい回しをたどればわかるとおり、結局のところ&lt;code&gt;IO ()&lt;/code&gt;型の値です。&lt;br /&gt;
ところが&lt;code&gt;Testable&lt;/code&gt;のインスタンス一覧を見る限り、&lt;code&gt;IO a&lt;/code&gt;は&lt;code&gt;Testable&lt;/code&gt;のインスタンスではありません。&lt;br /&gt;
先ほどの例のように&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;property &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;) x &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; (x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いた場合における、関数型&lt;code&gt;(a -&amp;gt; prop)&lt;/code&gt;のインスタンスは、&lt;code&gt;(Arbitrary a, Show a, Testable prop) =&amp;gt; Testable (a -&amp;gt; prop)&lt;/code&gt;という定義のとおり、関数の戻り値の型が&lt;code&gt;Testable&lt;/code&gt;のインスタンスでないと、型チェックを通らないはずです。&lt;br /&gt;
&lt;code&gt;Testable&lt;/code&gt;のインスタンスでない、&lt;code&gt;IO ()&lt;/code&gt;を返しているにも関わらず型エラーが起きなかったのは、一体なぜでしょうか？&lt;/p&gt;
&lt;p&gt;その秘密を探るべく、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を立ち上げましょう。&lt;br /&gt;
先ほどの例のソースコードを&lt;code&gt;ghci&lt;/code&gt;コマンドに読ませれば、まとめて&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;のモジュールも&lt;code&gt;import&lt;/code&gt;できるので簡単です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci .\QuickCheck.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動したら、&lt;code&gt;:i Testable&lt;/code&gt;と入力して、&lt;code&gt;Testable&lt;/code&gt;型クラスのインスタンス一覧を出力しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;i &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  property ::&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;{-# MINIMAL property #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;        &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Property&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Discard&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] (&lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; prop) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; prop)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.Property’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; [safe] &lt;span class=&#34;dt&#34;&gt;Testable&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit.Lang.Assertion&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ありました！💡 最後の方にある&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行に注目してください。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;は、&lt;code&gt;IO ()&lt;/code&gt;の型シノニムであり、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でも間接的に型シノニムとして参照されています&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
要するに&lt;code&gt;instance [safe] Testable Test.HUnit.Lang.Assertion&lt;/code&gt;という行は&lt;code&gt;instance [safe] Testable (IO ())&lt;/code&gt;と読み替えることができます&lt;small&gt;（&lt;code&gt;[safe]&lt;/code&gt;という表記が指しているものについてはここでは省略します！すみません！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;紹介したとおり&lt;code&gt;Testable&lt;/code&gt;のドキュメントには&lt;code&gt;Testable Assertion&lt;/code&gt;なんて記載はありませんし、じゃあ一体どこで定義したのか、というとそう、続く行に&lt;code&gt;-- Defined in ‘Test.QuickCheck.IO’&lt;/code&gt;と書かれているとおり、&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-io-0.2.0/docs/Test-QuickCheck-IO.html&#34;&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;&lt;/a&gt;というモジュールで定義されています！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Test.QuickCheck.IO&lt;/code&gt;は、名前のとおり&lt;span class=&#34;ascii&#34;&gt;QuickCheck&lt;/span&gt;の&lt;code&gt;Testable&lt;/code&gt;について、&lt;code&gt;IO&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;を定義するためのモジュールです。&lt;br /&gt;
これを&lt;a href=&#34;https://github.com/hspec/hspec/blob/226510631f24b674827e99d17d10f9f92440c5a9/hspec-core/src/Test/Hspec/Core/QuickCheckUtil.hs#L18&#34;&gt;&lt;code&gt;import&lt;/code&gt;している&lt;/a&gt;が故に、&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;では&lt;code&gt;property&lt;/code&gt;ブロックの中で&lt;code&gt;shouldBe&lt;/code&gt;などが利用できるんですね！&lt;/p&gt;
&lt;p&gt;結論&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;わかりづらい😥&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;:i&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;orphan instance&lt;/span&gt;であろうとインスタンスを定義した箇所を見つけてくれるから便利！&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この節の冒頭で「型シノニムのたらい回し」と呼んだものを追いかけてみましょう。&lt;br /&gt;
おなじみ&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#v:shouldBe&#34;&gt;&lt;code&gt;shouldBe&lt;/code&gt;&lt;/a&gt;は&lt;a href=&#34;http://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html#t:Expectation&#34;&gt;&lt;code&gt;Expectation&lt;/code&gt;&lt;/a&gt;という型の値を返します。&lt;br /&gt;
そして&lt;code&gt;Expectation&lt;/code&gt;は&lt;code&gt;Assertion&lt;/code&gt;の型シノニムであり、クリックすると&lt;a href=&#34;http://hackage.haskell.org/package/HUnit-1.6.0.0/docs/Test-HUnit-Lang.html#t:Assertion&#34;&gt;&lt;code&gt;Test.HUnit.Lang.Assertion&lt;/code&gt;&lt;/a&gt;であることがわかります。&lt;br /&gt;
そして&lt;code&gt;Assertion&lt;/code&gt;はそう、&lt;code&gt;type Assertion = IO ()&lt;/code&gt;とあるとおり&lt;code&gt;IO ()&lt;/code&gt;なのです。やっと知ってる型にたどり着きました😌。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2020/io-monad-and-sideeffect.html&#34; lang=&#34;ja&#34;&gt;IO モナドと副作用&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2020/revenge-of-hourly-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;リベンジ・オブ・毎時更新 Haskell Antenna&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html</id><title type="text">HUnit で日本語が文字化けする問題</title><updated>2020-02-19T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html"/><summary type="html">&lt;p&gt;&lt;code&gt;HUnit&lt;/code&gt; で日本語を扱おうとすると、以下のように文字化けしますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は簡単に回避できるので、その方法を紹介します。やり方は &lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt; の方法そのまんまです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;問題が発生している原因&#34;&gt;問題が発生している原因&lt;/h2&gt;
&lt;p&gt;今回使うコードはとてもシンプルです。依存しているパッケージは &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードを実行すると、以下のような結果になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; bad&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:                              &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は何故発生するかと言うと、&lt;code&gt;HUnit&lt;/code&gt; 内部で &lt;code&gt;show&lt;/code&gt; 関数を利用しているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような文字化けに対応するには &lt;a href=&#34;https://hackage.haskell.org/package/unicode-show&#34;&gt;unicode-show&lt;/a&gt; パッケージの &lt;strong&gt;ushow&lt;/strong&gt; 関数が便利です。より詳しい紹介は「&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit --package unicode-show ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; ushow &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということで、&lt;strong&gt;HUnit&lt;/strong&gt; を &lt;strong&gt;ushow&lt;/strong&gt; を使うようにしてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策&lt;/h2&gt;
&lt;p&gt;やり方はとても簡単です。&lt;strong&gt;(@?=)&lt;/strong&gt; を以下のように再定義するだけです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit.Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード全体は以下の通りです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;good ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;good &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみましょう！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; good&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで他の関数も同様に定義してしまえば良い感じです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;日本語の文字化けで困っている人向け情報でした。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iwamototakashi.hatenadiary.jp/entry/20100722/p1&#34;&gt;HUnitで日本語を出力してみる→成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell</id><title type="text">GHC 環境構築 概観 と PowerShell</title><updated>2020-01-27T09:06:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell"/><summary type="html">Haskell の開発環境を構築する方法は何通りかあり、新しいツールが出ると「今はこれだ」とほめるブログも公開されますがそれが初学者を混乱させることがよくあります。 本記事ではビルドツールのインストールにしぼり、開発支援、例えば ghc-mod・haskell-ide-engine・hhp には言及しません。 いくつか典型的な構築方法を確認した後、新たに私が作成したツールを紹介しより初学者を混乱に落とし入れます。 重鎮 Haskell Platform www.haskell.org Haskell 解説書史1の第1波から第3波までのデファクトスタンダードであった重鎮 Haskell Plat…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html</id><title type="text">cabal の build-tool-depends フィールド</title><updated>2020-01-22T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html"/><summary type="html">&lt;p&gt;cabal の &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;build-tool-depends&lt;/a&gt; というフィールドが便利だったので紹介します。&lt;/p&gt;
&lt;p&gt;テストを書くときに &lt;a href=&#34;https://hackage.haskell.org/package/hspec-discover&#34;&gt;hspec-discover&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/tasty-discover&#34;&gt;tasty-discover&lt;/a&gt; などを使う場合、このフィールドを設定しておくことで依存している実行ファイルを自動的にダウンロードして使ってくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal --version
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library &lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;サンプルプロジェクトの構成&#34;&gt;サンプルプロジェクトの構成&lt;/h2&gt;
&lt;p&gt;全体のディレクトリ構成は以下のようになっているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── example.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    ├── LibSpec.hs
    └── Spec.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それぞれのファイルの内容は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- src/Lib.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; (someFunc) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;someFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;someFunc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/LibSpec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LibSpec&lt;/span&gt; (spec) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;spec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Spec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/Spec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;-- example.cabal
cabal-version: 2.4
name:          example
version:       0.1.0.0

library
  exposed-modules:  Lib
  hs-source-dirs:   src
  build-depends:    base &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
  default-language: Haskell2010

test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような状況で &lt;code&gt;cabal&lt;/code&gt; や &lt;code&gt;stack&lt;/code&gt; がどのように振舞うか見ていきましょう。&lt;/p&gt;
&lt;p&gt;現時点では &lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルは存在していません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ hspec-discover
bash: hspec-discover: コマンドが見つかりません&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stack&#34;&gt;stack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルが無い状態で &lt;code&gt;stack test&lt;/code&gt; を実行すると以下のようにエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のようにインストールした場合は、問題無く動作します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; がファイルを自動的に見つけてくれたので、コンパイルエラーになりました。&lt;/p&gt;
&lt;p&gt;次に進む前に実行ファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.local/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-depends-に追加した場合&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルの &lt;code&gt;build-depends&lt;/code&gt; に追加した場合はどうなるのでしょうか？&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example
    , hspec-discover  -- 新しく追加した

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では &lt;code&gt;stack test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルがローカル環境に存在しなくても自動的に &lt;code&gt;hspec-discover&lt;/code&gt; が動作しています。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; プロジェクトでは &lt;code&gt;hspec-discover&lt;/code&gt; を依存関係 (&lt;code&gt;build-depends&lt;/code&gt;) に追加するだけで良い感じにテストが進みます。&lt;/p&gt;
&lt;h2 id=&#34;cabal&#34;&gt;cabal&lt;/h2&gt;
&lt;p&gt;同様に &lt;code&gt;cabal&lt;/code&gt; の場合も確かめてみましょう。(&lt;code&gt;example.cabal&lt;/code&gt; ファイルから &lt;code&gt;hspec-discover&lt;/code&gt; を削除しておきます)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と同様のエラーになりました。&lt;/p&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合-1&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に &lt;code&gt;cabal test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の場合と同じように、ちゃんと動いていますね。&lt;/p&gt;
&lt;h3 id=&#34;build-depends-に追加した場合-1&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;まずはバイナリファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.cabal/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルは先ほどと同じように &lt;code&gt;build-depends&lt;/code&gt; に &lt;code&gt;hspec-discover&lt;/code&gt; を追加した状態です。&lt;/p&gt;
&lt;p&gt;テストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と異なる結果になりましたね・・・。僕は今までこの結果への対処法は &lt;code&gt;hspec-discover&lt;/code&gt; をインストールしておくしかないと思っていました。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;build-tool-depends&lt;/code&gt; をフィールドを利用することで &lt;code&gt;stack&lt;/code&gt; と同じ挙動になるということがわかりました。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;build-tool-depends-に追加した場合&#34;&gt;build-tool-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; に追加するとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  build-tool-depends:                 -- 新たに追加した行
    , hspec-discover:hspec-discover   -- 新たに追加した行

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-depends&lt;/code&gt; が &lt;code&gt;&amp;lt;package_name&amp;gt;&lt;/code&gt; という指定方法でしたが、&lt;code&gt;build-tool-depends&lt;/code&gt; では &lt;code&gt;&amp;lt;package_name&amp;gt;:&amp;lt;exe_name&amp;gt;&lt;/code&gt; という指定方法になっている点に注意です。&lt;/p&gt;
&lt;p&gt;バージョン制約が必要な場合は &lt;code&gt;build-depends&lt;/code&gt; と同じように指定できます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;hspec-discover:hspec-discover ^&amp;gt;=2.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでテストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;stack&lt;/code&gt; と同じような挙動になりました！happy!&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな便利なフィールドがあるなんて全然知りませんでした・・・。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; を指定しておけば、実行ファイルが無くても大丈夫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; は初心者に優しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/ghc/blog/20200116-ghc-8.8.2-released.html&#34;&gt;GHC-8.8.2 がリリース&lt;/a&gt;されましたね。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;cabal user guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html</id><title type="text">Memo - unexpected At most 9 numbers are allowed per version number part</title><updated>2020-01-22T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html"/><summary type="html">&lt;p&gt;GHC-8.8 への移行中に GitHub Actions で以下のようなエラーが発生しました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;proj/dist-newstyle/src/barbies-6f24224e2c384e2f/barbies.cabal:2:31: error:
unexpected At most 9 numbers are allowed per version number part

    1 | name:           barbies
    2 | version:        1.999999999999
      |                               ^

##[error]Process completed with exit code 1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初めて見るエラーだったのでメモとして残しておきます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;エラーが発生した理由&#34;&gt;エラーが発生した理由&lt;/h2&gt;
&lt;p&gt;エラー発生の原因はたぶんこれです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6386&#34;&gt;Limit version number parts to be 9 digits #6386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; に含まれるはずなので &lt;code&gt;cabal-3.0.0.0&lt;/code&gt; では関係ないと思っていたのですが、&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/commit/73a7adcb8bf8204dd81de35d014c967b76040526/checks?check_suite_id=384131716&#34;&gt;GitHub Actions のログ&lt;/a&gt;を見るとわかるとおり、GitHub Actions では &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; がインストールされていました。(何故?&lt;a href=&#34;https://github.com/haskell/cabal/issues/6328&#34;&gt;cabal-install 3.0.1.0 release planning #6328&lt;/a&gt; はまだ閉じられてない)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
The Glorious Glasgow Haskell Compilation System, version 8.6.5
cabal-install version 3.0.1.0
compiled using version 3.0.1.0 of the Cabal library 
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また &lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell&lt;/a&gt; の README を見る限り &lt;code&gt;cabal&lt;/code&gt; のバージョン指定方法は &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;2.4&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt; しか無いので &lt;code&gt;3.0.0.0&lt;/code&gt; を使う方法がありません・・・。&lt;/p&gt;
&lt;h2 id=&#34;とりあえずの解決策&#34;&gt;とりあえずの解決策&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jcpetruzza/barbies/blob/0b09a4235cd719aa3df9f9467f3e8fee81446bc8/barbies.cabal&#34;&gt;barbies.cabal&lt;/a&gt; のバージョン番号が長すぎるために起きているエラーなので、fork して一時的にバージョンを短くして対応しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name:           barbies
version:        1.999999999999  -- 変更前
version:        1.999999999     -- 変更後&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;もうすぐ GHC-8.10.1 がリリースされそうですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/status/ghc-8.10.1&#34;&gt;GHC plans for 8.10.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/01/01/083723</id><title type="text">2019 年のスライド一挙公開、あるいは 2020 年の方針</title><updated>2020-01-01T08:54:55+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/01/01/083723"/><summary type="html">あけましておめでとうございます。2019 年は大変お世話になりました。2020 年も張り切っていきましょう。 さて、2019 年には結構な回数の外部発表を行いました。これらの発表内容のうち一部は単独のブログ記事としてまとめてありますが、機を逸してしまって記事化されていないものも相当数あります。そこで本記事では、2019 年中に行った発表を一覧としてまとめてみました。 2019 年の活動実績 2019 年の登壇は全部で 19 件でした。うち（先着や抽選ではなく）CFP に応募して採択されたものは 4 件です。 チェシャ猫が普段活動している領域は、Twitter の Bio にも書いてある通り、大…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/12/21/212423</id><title type="text">OpenShift.run 2019 で Kubernetes のスケジューリングについて話してきました</title><updated>2019-12-21T21:24:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/12/21/212423"/><summary type="html">先日行われた OpenShift コミュニティのイベント OpenShift.run 2019 にて、Kubernetes Scheduler とその関連ツールについて講演してきました。公募 CFP 枠です。 OpenShift のイベントでありながら、OpenShift についてはまったく触れずひたすら Kubernetes の内部実装を解説する異色の登壇でした。実際、40 分枠の講演の中で（RedHat 社以外も含め）ベンダニュートラルな立場で登壇したのは自分だけだったようです。これは私見ですが、逆に言えばそういう内容でも CFP 採択されているというのは、運営側も「単なるマーケティングイ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">postgresql-pure を開発しました</title><updated>2019-12-06T00:03:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">この記事は Haskell Advent Calendar 2019 の6日目の記事です。 hackage.haskell.org postgresql-pure は Haskell の PostgreSQL ドライバー（クライアントライブラリー）で次のような目標で開発しました。 マルチコア環境でのパフォーマンス向上 暗黙のロックを回避する マルチプラットフォーム対応 C ライブラリーの libpq への依存をなくして特に Windows でのビルドを容易にする 既存ライブラリーとしては postgres-wire が高速だがそれは Windows をサポートしていない pure Haskel…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/12/05/191010</id><title type="text">最強にして最速のビルダー、mason</title><updated>2019-12-05T19:33:25+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/12/05/191010"/><summary type="html">Haskell Advent Calendar 2019 5日目 この冬、神速のサンタクロースがやってくる—— Haskellにおいて、バイト列の表現はByteStringが定番である。ByteStringはPinned領域に直接格納され、空間効率はリストに比べればはるかに良い。しかし、Pinned領域にあるとヒープフラグメンテーションが起こりやすくなるということでもあり、細かい文字列をつなぎ合わせるような使い方はパフォーマンスに悪影響が及ぶ。そのような問題を避けるため、ビルダーと呼ばれる構造が用意されている。 Data.ByteString.Builderは、word8 42 &lt;&gt; byte…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/11/30/215950</id><title type="text">状態機械を合成してデッドロックを検出できる Go 言語パッケージを作ってみました</title><updated>2019-11-30T21:59:50+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/11/30/215950"/><summary type="html">はじめに マルチスレッドで動作するプログラムの設計は難しい問題です。個々のスレッドの動作は単純に見えても、複数が並行して動作する場合の動作は組み合わせ論的に複雑になります。また、タイミングに依存する不具合は狙って再現することが難しく、通常の単体テストによる検出にも限界があります。 そんなとき、有効な手法がモデル検査です。システムの取りうる状態をあらかじめ網羅的に探索することで、「実際に動作させた際にごく低い確率で踏むバグ」であっても、動作させることなく設計段階で発見することが可能になります。 ところでちょうど先日、デッドロック発見器を自作するハンズオンに参加する機会がありました。内容は非常にシ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B</id><title type="text">FFI で Haskell から Rust を利用する</title><updated>2019-11-22T13:28:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B"/><summary type="html">Rust で作ったライブラリーを静的リンクして Haskell（GHC）から使う例と説明を書いた。 github.com</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89</id><title type="text">最近の自分の Haskell 開発環境（Windows）</title><updated>2019-11-21T09:09:44+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89"/><summary type="html">id:syocy のブログを見たので Windows で自分がどうしているかをメモしておく。 syocy.hatenablog.com Stack 最近は ghcup があるがシェルスクリプト製で自分は PowerShell ユーザーなので stack を使っている。（ghcup はなんで Haskell 製じゃないんだ1？） GHC 8.8 を使うには resolver は ghc-8.8 や nightly を指定する。まだ LTS にはなっていない。 エディター エディターは Spacemacs を使っている。前は IntelliJ IDEA に HaskForce プラグインを入れて使…</summary></entry><entry><id>https://blog.miz-ar.info/2019/10/scanl-and-scanr/</id><title type="text">Haskellのscan系関数を使いこなす</title><updated>2019-10-12T10:14:03+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/10/scanl-and-scanr/"/><summary type="html">&lt;img width=&#34;619&#34; height=&#34;146&#34; src=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png&#34; class=&#34;attachment-large size-large wp-post-image&#34; alt=&#34;&#34; loading=&#34;lazy&#34; style=&#34;float:left; margin:0 15px 15px 0;&#34; srcset=&#34;https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl.png 619w, https://blog.miz-ar.info/wp-content/uploads/2019/09/scanl-300x71.png 300w&#34; sizes=&#34;(max-width: 619px) 100vw, 619px&#34; /&gt;Haskellはリストを操作する関数を多数提供しています。map, filter, foldあたりが代表的で、これらは他の言語でもおなじみかと思います。 一方で、scan系関数（scanl, scanr）は他の言語ではあ [&amp;#8230;]</summary></entry><entry><id>https://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-20T21:45:08+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>https://blog.miz-ar.info/2019/09/techbookfest7-announce/</id><title type="text">技術書典7に、Haskellで競技プログラミングをやる本を出します</title><updated>2019-09-19T13:55:03+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/09/techbookfest7-announce/"/><summary type="html">今週末の9月22日（日）に池袋で開催される技術書典7に、新刊「Haskellで戦う競技プログラミング」を出します。既刊「LaTeX処理自動化ツールClutTeX 使い方とその仕組み」も改訂して紙の本を頒布します。 技術書 [&amp;#8230;]</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 &#34;Village and Pillage&#34;は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/</id><title type="text">Haskellでの浮動小数点数の方向付き丸めを考える</title><updated>2019-06-30T13:43:59+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/06/directed-rounding-in-haskell/"/><summary type="html">「週刊 代数的実数を作る」の #5 で、区間演算と方向付き丸めの話を書いた。浮動小数点数の計算は不正確だと思われがちだが、方向付き丸め等をうまく使えばある種の「正しい結果」（この数は確実に1.0より大きい、等）を得ること [&amp;#8230;]</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://blog.miz-ar.info/2019/05/atcoder-with-haskell/</id><title type="text">HaskellでAtCoderに参戦して水色になった</title><updated>2019-05-27T12:17:37+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/05/atcoder-with-haskell/"/><summary type="html">3月下旬からAtCoderのRatedコンテストに参加しています（AtCoderプロフィール）。この度、5月26日のABC128でようやく水色になりました（AtCoder社長の記事によると、これは上位15%に相当するらし [&amp;#8230;]</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/monoid-for-haskellers/</id><title type="text">Haskellerのためのモノイド完全ガイド</title><updated>2019-02-12T07:02:03+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/"/><summary type="html">Haskellにおけるモノイドについて解説記事を書いてみた。他の言語でも通用する話があるかもしれないし、ないかもしれない。 モノイドとは モノイドとは、ざっくり言うと「くっつける」演算ができる対象のことである。例えば、文 [&amp;#8230;]</summary></entry><entry><id>https://blog.miz-ar.info/2019/02/typical-dp-contest-t/</id><title type="text">フィボナッチ数絡みの競プロの問題を解いてみた（Typical DP Contest T）</title><updated>2019-02-03T13:17:32+00:00</updated><author><name>mod_poppo</name></author><link href="https://blog.miz-ar.info/2019/02/typical-dp-contest-t/"/><summary type="html">この間、フィボナッチ数を計算する記事を書いていたら、@fetburner氏にこういう問題を教えて頂いた： T: フィボナッチ &amp;#8211; Typical DP Contest &amp;#124; AtCoder フィボナッチ数列の各 [&amp;#8230;]</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>https://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>https://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="https://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="https://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>https://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="https://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00+00:00</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
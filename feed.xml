<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2019-01-15T12:51:07+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/lotz/items/b9ca3dfdbe97ad42bd12</id><title type="text">ある数がパスカルの三角形に出現する回数を数えるプログラムを高速化して3003が8回出現するところまで確認する</title><updated>2019-01-15T12:51:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/b9ca3dfdbe97ad42bd12"/></entry><entry><id>https://qiita.com/cp3/items/784f9ae0e09279b36ad8</id><title type="text">Haskell触る際の備忘録</title><updated>2019-01-14T18:00:09+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/cp3/items/784f9ae0e09279b36ad8"/></entry><entry><id>https://qiita.com/Cassin01/items/8be9af3170fef3d8d6cc</id><title type="text">C++ と Haskell と Rustの似てるとこ、違うとこ</title><updated>2019-01-12T19:41:54+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Cassin01/items/8be9af3170fef3d8d6cc"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/6e92a82a1d9fdb6a4b5a</id><title type="text">理想の浮動小数点数である「浜田のURR」を理解する</title><updated>2019-01-11T13:26:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/6e92a82a1d9fdb6a4b5a"/></entry><entry><id>https://qiita.com/ayase/items/a03e9e8484b492e6bc08</id><title type="text">Haskellで自然言語処理100本ノックの第2章を解いてみる。【前編】</title><updated>2019-01-08T02:04:51+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ayase/items/a03e9e8484b492e6bc08"/></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://qiita.com/chupaaaaaaan/items/709b6e241468e3f2dd1c</id><title type="text">トーラス上のライフゲームを、List Zipperを使用して実装してみた</title><updated>2019-01-07T12:36:27+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/chupaaaaaaan/items/709b6e241468e3f2dd1c"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id><title type="text">GCS で Drone 1.0 をキャッシュする</title><updated>2019-01-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;GCS で Drone 1.0 をキャッシュする&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2019-01-06&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 6, 2019
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Drone.html&#34;&gt;Drone&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．&lt;/p&gt;
&lt;h2 id=&#34;cache-in-drone&#34;&gt;Cache in Drone&lt;/h2&gt;
&lt;p&gt;Drone でキャッシュを利用するには次のような Plugin を使用する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drone-s3-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-s3-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drone-plugins/drone-s3-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-volume-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-volume-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drillster/drone-volume-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-gcs-cache: &lt;a href=&#34;https://github.com/hvalle/drone-gcs-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/hvalle/drone-gcs-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの &lt;code&gt;Trusted&lt;/code&gt; フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．&lt;/p&gt;
&lt;p&gt;ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．&lt;/p&gt;
&lt;h2 id=&#34;drone-gcs-cache&#34;&gt;Drone GCS Cache&lt;/h2&gt;
&lt;h3 id=&#34;認証鍵の設定&#34;&gt;認証鍵の設定&lt;/h3&gt;
&lt;p&gt;GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの &lt;code&gt;APIとサービス&lt;/code&gt; の &lt;code&gt;認証情報&lt;/code&gt; からサービスアカウントを作成し(このときに JSON が DL される)，&lt;code&gt;IAMと管理&lt;/code&gt; の &lt;code&gt;IAM&lt;/code&gt; からさっき作ったアカウントに &lt;code&gt;ストレージ管理者&lt;/code&gt; を追加した IAM を作成する．&lt;/p&gt;
&lt;p&gt;この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら &lt;code&gt;Allow Pull Requests&lt;/code&gt; にチェックする．&lt;/p&gt;
&lt;h3 id=&#34;yaml-の設定&#34;&gt;YAML の設定&lt;/h3&gt;
&lt;p&gt;あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restore:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; node_modules&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush_age:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは Drone の Secret に &lt;code&gt;gcs-access-json-key&lt;/code&gt; という名前で登録している場合である． ちなみに &lt;code&gt;flush_age&lt;/code&gt; は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で試す&#34;&gt;Haskell で試す&lt;/h2&gt;
&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/pull/3&#34;&gt;導入したPRはこれ&lt;/a&gt;． &lt;code&gt;.stack&lt;/code&gt; と &lt;code&gt;.stack-work&lt;/code&gt; をキャッシュする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell:8.6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara-drone-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack-work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;    ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;flush&lt;/code&gt; は同じなので割愛． &lt;code&gt;$HOME/.stack&lt;/code&gt; だと動作しなかったので，いっそのことカレントディレクトリに &lt;code&gt;.stack&lt;/code&gt; を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/before.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9分は長い． そんでアフター:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/after.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html</id><title type="text">Drone 1.0 を docker-compose up する</title><updated>2019-01-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Drone 1.0 を docker-compose up する&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2019-01-05&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 5, 2019
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Drone.html&#34;&gt;Drone&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/library.html&#34;&gt;library&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;新年一発目です． &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; が，めでたくバージョン1.0(まだ rc だけど)をリリースしてドキュメントも刷新されたんですけど，&lt;a href=&#34;https://0-8-0.docs.drone.io/install-for-github/&#34;&gt;0.8.x 時代にはあった &lt;code&gt;docker-compose&lt;/code&gt; でのやり方&lt;/a&gt;が書いてなかった(見つけられなかった)ので，そのメモ書きです． ちなみに経緯は，結構前に作っていた &lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;drone-haskell&lt;/a&gt; と言う Drone CI の Haskell クライアントを Drone 1.0 に対応したくて，手元で Drone を起動しようとしたためです． めでたく，Haskell クライアントも 1.0 に対応したので，それの紹介もおまけでします．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Drone.io, Inc. というアメリカ企業が開発している継続的デリバリーを支援するためのプラットフォームである． 同種のものに Jenkins や TravisCI，CircleCI などが挙げられます(多分)． 単純な利用者側(リポジトリにCIなどを設定する側)としては，TravisCI・CircleCI に似ているが，これらとの大きな違いとして，Drone は GitHub 上に OSS として公開されている点だ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと個人的に特徴的なのが Plugin という形で様々な機能を提供している点だ(このあたりは Jenkins に似ているのかな)． 公式のページより，組織アカウントを見た方が早い気がする(これに限らずドキュメントが色々追いついてない印象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugins - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-compose-する&#34;&gt;docker-compose する&lt;/h2&gt;
&lt;p&gt;さて本題． ローカルで Drone サーバを &lt;code&gt;docker-compose up&lt;/code&gt; して GitHub で利用する． GitHub で利用するには Drone を &lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-an-oauth-application&#34;&gt;GitHub の OAuth App として登録する必要がある&lt;/a&gt;． OAuth App にするにはパブリックな URL が必要なので，&lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; を利用する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ngrok http 8000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで仮に &lt;code&gt;abcdef.ngrok.io&lt;/code&gt; と言うドメインを得たとする． 次のような OAuth App を登録する:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/docker-compose-up-drone-1-0/oauth-app.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意点として，8.0.x のときは callback URL が &lt;code&gt;/authorize&lt;/code&gt; だったのに対し，1.0 では &lt;code&gt;/login&lt;/code&gt; となっている． あとは次のような &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを書けば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-server:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;9000&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .:/data&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=XXX&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=YYY&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_HOST=abcdef.ngrok.io&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;command:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; agent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; drone-server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SERVER=drone-server:9000&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;XXX&lt;/code&gt; は GitHub OAuth App の Client ID を，&lt;code&gt;YYY&lt;/code&gt; には Client Secret を記述する． &lt;code&gt;DRONE_RPC_SECRET&lt;/code&gt; の &lt;code&gt;ZZZ&lt;/code&gt; は server と agent で同じであればなんでも良いのだが，&lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-a-shared-secret&#34;&gt;ここ&lt;/a&gt;に &lt;code&gt;openssl rand -hex 16&lt;/code&gt; で生成すると書いてあるので，それに従う． これであとは &lt;code&gt;docker-compose up&lt;/code&gt; をすれば無事起動完了だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8000/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;ffe3ad2aa2a30d0ba4d848c1cd0f61238b73a21c&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ちなみに&#34;&gt;ちなみに&lt;/h3&gt;
&lt;p&gt;Drone ってクラウドのフリープランがあったのに記事を書いてる時に気づいた(遅い):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl https://cloud.drone.io/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;f16b67b54fb462d3a4b2cfa93f527d4f8d1e19af&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;わざわざ検証用に立てる必要なかったな笑 ちなみにフリープランでは5リポジトリまでと書いてあったが，試しに6個 Activate したらできた． 謎．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-drone-haskell&#34;&gt;おまけ: drone-haskell&lt;/h2&gt;
&lt;p&gt;ここからおまけ． drone の Haskell クライアントを作った． ちゃんとバージョン 1.0 に対応させてます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;matsubara0507/drone-haskell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drone 1.0 の RESTful API に関するドキュメントは見つからなかったので，唯一公式から出ている Drone クライアントである &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone-go&lt;/a&gt; のコード読んで実装した． なので，drone-go が間違ってたらこっちも間違ってる．&lt;/p&gt;
&lt;h3 id=&#34;利用したパッケージ&#34;&gt;利用したパッケージ&lt;/h3&gt;
&lt;p&gt;HTTP クライアントには &lt;a href=&#34;http://hackage.haskell.org/package/req&#34;&gt;req&lt;/a&gt; を，レスポンス型には &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; を利用した． このあたりの組み合わせについては昔記事に書いた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2017-08-13-create-rest-api-package-with-extensible.html&#34;&gt;extensible の拡張可能レコードを使って REST API Haskell パッケージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，管理がめんどくさい(加えて extensible は今の LTS にはまだないし)ので，Stackage や Hackage には登録していない． なので Stack でビルドするには &lt;code&gt;extra-deps&lt;/code&gt; に書き加える必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; extensible-0.5&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/drone-haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; XXX&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ちょっと工夫&#34;&gt;ちょっと工夫&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テストは Servant でモックサーバーを立てて行ってる
&lt;ul&gt;
&lt;li&gt;テストケースも drone-go から取ってきてる&lt;/li&gt;
&lt;li&gt;https://github.com/drone/drone-go/tree/master/drone/testdata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API のパスに &lt;a href=&#34;http://hackage.haskell.org/package/formatting&#34;&gt;formatting&lt;/a&gt; を使ってみた
&lt;ul&gt;
&lt;li&gt;あくまで試しに&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/blob/e735b77171eebedc35160346afec71cd7631b532/src/Drone/Client/Path.hs#L65-L102&#34;&gt;こんな感じ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://qiita.com/kmizu/items/0892eca588088836967f</id><title type="text">型なし言語のメリットを一言で書いてみる</title><updated>2019-01-04T02:11:40+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kmizu/items/0892eca588088836967f"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>https://qiita.com/gugu/items/03b15ea3fb34331fda72</id><title type="text">関数型言語、聞いたことあるけど結局何なの？</title><updated>2018-12-26T23:44:50+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/gugu/items/03b15ea3fb34331fda72"/></entry><entry><id>https://qiita.com/aiya000/items/82f432a4b19c60561c01</id><title type="text">「正規表現はあんまり使わないかな。パーサー使うから」っていう人の気持ちがわかった！</title><updated>2018-12-25T07:01:01+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/aiya000/items/82f432a4b19c60561c01"/></entry><entry><id>https://qiita.com/cutsea110/items/b99b20cfc10dfbeca24b</id><title type="text">二分木をモナドにする</title><updated>2018-12-25T07:00:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/cutsea110/items/b99b20cfc10dfbeca24b"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html</id><title type="text">cabal build で package.yaml を使う</title><updated>2018-12-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近少しずつ &lt;code&gt;cabal&lt;/code&gt; を使うようになりました。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; と &lt;code&gt;cabal&lt;/code&gt; のどちらを使ってもビルドできるようにプロジェクトを修正していたのですが、&lt;code&gt;cabal&lt;/code&gt; ファイルの取り扱いが難しかったのでメモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;方針としては &lt;code&gt;cabal&lt;/code&gt; コマンドの実行時にフックを仕掛けて &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;cabal&lt;/code&gt; ファイルを生成しようという感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; cabal &lt;span class=&#34;co&#34;&gt;--numeric-version&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fl&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;setup.hs-は何のためにあるのか&#34;&gt;Setup.hs は何のためにあるのか？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; を使ってプロジェクトを作ると &lt;code&gt;Setup.hs&lt;/code&gt; が以下の内容で自動的に生成されると思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今まで特に使わなくても困らなかったので、気にせずに放置していましたが、このファイルが今回の主役になります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; には &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-type&#34;&gt;build-type&lt;/a&gt; という設定項目があり、この値はデフォルトでは &lt;code&gt;Simple&lt;/code&gt; か &lt;code&gt;Custom&lt;/code&gt; のどちらかに自動的に推論されます。(他にも &lt;code&gt;Configure&lt;/code&gt;, &lt;code&gt;Make&lt;/code&gt; などもあります。詳しくはドキュメントを参照してください)&lt;/p&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Simple&lt;/code&gt; を指定した場合、&lt;code&gt;cabal&lt;/code&gt; は &lt;code&gt;Setup.hs&lt;/code&gt; に以下の内容が記述されているものとして処理を進めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため &lt;code&gt;Setup.hs&lt;/code&gt; を削除しても問題なくビルド可能です。&lt;/p&gt;
&lt;h3 id=&#34;custom&#34;&gt;Custom&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Custom&lt;/code&gt; を指定した場合、&lt;code&gt;Setup.hs&lt;/code&gt; の内容をユーザが自由に書き換えることができます。&lt;/p&gt;
&lt;p&gt;Cabal には &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#v:defaultMainWithHooks&#34;&gt;defaultMainWithHooks&lt;/a&gt; という素晴らしい関数が用意されています。&lt;/p&gt;
&lt;p&gt;この関数を利用することで、コマンドの前後に好きな処理を挟むことができます。(処理の上書きも可能です)&lt;/p&gt;
&lt;p&gt;詳しいドキュメントは &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#more-complex-packages&#34;&gt;3.3.8. More complex packages&lt;/a&gt; を参照ください。&lt;/p&gt;
&lt;h3 id=&#34;userhooks&#34;&gt;UserHooks&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;defaultMainWithHooks&lt;/code&gt; に渡す &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#t:UserHooks&#34;&gt;UserHooks&lt;/a&gt; 型はこんな感じで定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    runTests ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    readDesc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPreProcessors ::&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;PPSuffixHandler&lt;/span&gt; ],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPrograms ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preConf  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    confHook ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postConf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBuild  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    buildHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBuild ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preRepl  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    replHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postRepl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preClean  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    cleanHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postClean ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preCopy  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    copyHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postCopy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preInst  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    instHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postInst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preSDist  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    sDistHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postSDist ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preReg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    regHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postReg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preUnreg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    unregHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postUnreg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHscolour  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hscolourHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHscolour ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preDoctest  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    doctestHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postDoctest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHaddock  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    haddockHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHaddock ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    testHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    benchHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけあれば、やりたいことはほとんど出来そうですね。&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;p&gt;フックする場所はたくさんあるので問題無さそうです。&lt;/p&gt;
&lt;p&gt;しかし、これだけあると、どこにフックすれば良いのか？ということになるのですが、処理的には &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;.cabal&lt;/code&gt; ファイルを生成したいので &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込む手前で差し込む必要がありそうです。&lt;/p&gt;
&lt;p&gt;適当に cabal のコードを読んでいると、どうやら &lt;a href=&#34;https://github.com/haskell/cabal/blob/e15d87d542b4b23983aed3d54e0b42585257f453/cabal-install/Distribution/Client/CmdBuild.hs#L119&#34;&gt;establishProjectBaseContext&lt;/a&gt; という関数が &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込んでコンテキストを作っているっぽいことがわかりました。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;preBuild&lt;/code&gt; にフックすれば良さそうです。(&lt;code&gt;cabal&lt;/code&gt; のコードベースについて全然わからないので、本当に合ってるかどうかは不安)&lt;/p&gt;
&lt;p&gt;最終的に、こんな感じで完成しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple.Setup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Types.HookedBuildInfo&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;, emptyHookedBuildInfo)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; myHook &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; simpleUserHooks {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    preBuild &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pbHpack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  defaultMainWithHooks myHook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pbHpack ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;pbHpack _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; emptyHookedBuildInfo&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/package/hpack&#34;&gt;hpack&lt;/a&gt; パッケージの関数をそのまま使ってます。&lt;/p&gt;
&lt;p&gt;今回は他に何もしないので &lt;code&gt;emptyHookedBuildInfo&lt;/code&gt; で大丈夫でした。(たぶん)&lt;/p&gt;
&lt;h3 id=&#34;extra-source-files&#34;&gt;extra-source-files&lt;/h3&gt;
&lt;p&gt;キャッシュの問題があるので &lt;code&gt;extra-source-files&lt;/code&gt; に &lt;code&gt;package.yaml&lt;/code&gt; を追加しておくと良さそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-source-files:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; package.yaml&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;custom-setup&#34;&gt;custom-setup&lt;/h3&gt;
&lt;p&gt;最後に忘れてはいけないのが、&lt;code&gt;custom-setup&lt;/code&gt; の設定です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Setup.hs&lt;/code&gt; で利用する依存関係などは &lt;code&gt;library&lt;/code&gt; や &lt;code&gt;executables&lt;/code&gt;, &lt;code&gt;tests&lt;/code&gt; と同様に &lt;code&gt;custom-setup&lt;/code&gt; を &lt;code&gt;package.yaml&lt;/code&gt; に追記します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;custom-setup:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; Cabal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hpack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成です。&lt;/p&gt;
&lt;p&gt;最初の一度だけは &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;cabal&lt;/code&gt; ファイルを生成する必要がありますが、それ以降は必要ありません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash
$ hpack package.yaml
$ cabal new-build&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;失敗したこと&#34;&gt;失敗したこと&lt;/h2&gt;
&lt;p&gt;最初はフックさせずにこんな感じですぐに実装できるものだと思ってましたが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;  defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと、あんまり上手くいきません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.yaml&lt;/code&gt; を更新しても実行されなかったり、期待するタイミングで &lt;code&gt;.cabal&lt;/code&gt; ファイルが生成されていないっぽい感じでした。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;とりあえず実装してみたという感じなので、実際どのぐらい使えるのか試してみようと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; も &lt;code&gt;cabal&lt;/code&gt; も両方とも良いビルドツールだと思います。&lt;/p&gt;
&lt;p&gt;もうちょっとしたら、&lt;code&gt;cabal&lt;/code&gt; も同様にオススメしていこうと思います。&lt;/p&gt;</summary></entry><entry><id>https://qiita.com/thimura/items/632be5385fc7eb1ef4bf</id><title type="text">libdw で遊ぶ</title><updated>2018-12-24T19:22:11+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/thimura/items/632be5385fc7eb1ef4bf"/></entry><entry><id>https://qiita.com/aiya000/items/778308345bc863f55d26</id><title type="text">TemplateHaskell不要なレコードアクセサgeneric-lens🙄</title><updated>2018-12-24T14:47:35+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/aiya000/items/778308345bc863f55d26"/></entry><entry><id>https://qiita.com/AK-10/items/b41da8376e83c0c13958</id><title type="text">Monad入門以前: (Functor,Applicative)</title><updated>2018-12-24T09:49:50+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/AK-10/items/b41da8376e83c0c13958"/></entry><entry><id>https://qiita.com/reotasosan/items/f131f0e5eba5fbddc256</id><title type="text">Duckling  (•ө•) を使って時間、日付抽出をしてみた！</title><updated>2018-12-24T00:42:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/f131f0e5eba5fbddc256"/></entry><entry><id>https://qiita.com/reotasosan/items/363a4e612a36dbebc000</id><title type="text">Why named Haskell?</title><updated>2018-12-23T16:20:31+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/363a4e612a36dbebc000"/></entry><entry><id>https://qiita.com/reotasosan/items/8533668b9c9bd05b1823</id><title type="text">What is category theory, Man?</title><updated>2018-12-23T15:31:03+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/8533668b9c9bd05b1823"/></entry><entry><id>https://qiita.com/junjihashimoto@github/items/ecf5d0a4e62645c2b2cc</id><title type="text">型を使って書く機械学習:Hasktorchの紹介</title><updated>2018-12-23T06:07:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/junjihashimoto@github/items/ecf5d0a4e62645c2b2cc"/></entry><entry><id>https://qiita.com/reotasosan/items/9dcedd9d0749765e8abd</id><title type="text">Samuel Gélineau からの返信その2</title><updated>2018-12-22T20:22:35+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/9dcedd9d0749765e8abd"/></entry><entry><id>https://qiita.com/reotasosan/items/e77ec87f3b0e1a6d3c1b</id><title type="text">Getting started with Haskell</title><updated>2018-12-22T19:21:38+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/e77ec87f3b0e1a6d3c1b"/></entry><entry><id>https://qiita.com/reotasosan/items/1cba3a552b1accd79d96</id><title type="text">What is Haskell anyways?</title><updated>2018-12-22T09:33:34+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/reotasosan/items/1cba3a552b1accd79d96"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-12-19T09:22:10.151+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html</id><title type="text">Elm 0.19 で作るライフゲーム</title><updated>2018-12-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elm 0.19 で作るライフゲーム&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-19&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/elm2&#34;&gt;Elm2(完全版) Advent Calendar 2018&lt;/a&gt; の19日目の記事です．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ライフゲームを Elm で作りました。 ウェブアプリケーション(?)としては，鉄板中の鉄板ですね． 完全に一発ネタ+思いつきでやったのですが，Elm の最新バージョンによる違いもあり，いくつか躓いたのでそのメモ書きです(巷の資料の多くは旧バージョン)． まぁそれでも2日ぐらいでできるので Elm は便利ですね．&lt;/p&gt;
&lt;p&gt;完成品は&lt;a href=&#34;https://matsubara0507.github.io/lifegame&#34;&gt;コレ&lt;/a&gt;で，コードは GitHub においてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/lifegame&#34;&gt;matsubara0507/lifegame - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ライフゲーム&#34;&gt;ライフゲーム&lt;/h2&gt;
&lt;p&gt;ライフゲームのルールは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;囲碁や将棋のような NxM マスの盤上（今回は正方形 NxN）&lt;/li&gt;
&lt;li&gt;マスの状態は「生」と「死」がある&lt;/li&gt;
&lt;li&gt;状態の更新の規則は以下の3つ
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;生の状態の回りに生の状態のマスが2つか3つならば生のまま&lt;/li&gt;
&lt;li&gt;死の状態の回りに生の状態のマスが3つならば生になる&lt;/li&gt;
&lt;li&gt;それ以外は死の状態になる&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでいう「回り」というのは，自身のマスの周囲８マスのことを指す．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;一般的なライフゲームに加えて，次のようなことを実現した．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;レンジスライダーで盤面の粒度をコントロール&lt;/li&gt;
&lt;li&gt;レンジスライダーで盤面の更新間隔をコントロール&lt;/li&gt;
&lt;li&gt;URLのクエリから生と死の画像を上書き&lt;/li&gt;
&lt;li&gt;スマホでも動作するように Touch イベントをいい感じに&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;実装について&#34;&gt;実装について&lt;/h2&gt;
&lt;p&gt;次の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/miyamo_madoka/items/2cad5473010292982303&#34;&gt;[Elm]Life Gameで生命を生み出す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記憶に新しいのでステップバイステップにまとめる．&lt;/p&gt;
&lt;h3 id=&#34;盤面の描写&#34;&gt;盤面の描写&lt;/h3&gt;
&lt;p&gt;まずはモデルを考える． 適当にパッケージを探して見たが， Elm 0.19 に対応している良さげなものはなかったので自作することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alisa &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回は正方形を想定するので &lt;code&gt;size&lt;/code&gt; は一辺のマス数にする． つまり初期化関数は次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;initBoard n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n, cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に盤面をどうやって描写するかを考えた． テーブルでゴリゴリ書くのもいいかなと思ったが，あんまりエレガントではない気がした． ヒントを得るために GitHub をブラブラしてたら個人ページの左下の組織アカウント一覧に目が行った． HTMLを見てみると，これは直列に繋いだ &lt;code&gt;div&lt;/code&gt; を適当なタイミングで折り返しているようだ． このやり方なら &lt;code&gt;cells&lt;/code&gt; を &lt;code&gt;size&lt;/code&gt; 個ごとに行へとする必要がなく，完全にCSSだけでなんとかなる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; viewBoard (initBoard &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;viewBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;viewBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;        attr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    concatMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;viewCell board cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;        styleAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; title=&#34;21&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; title=&#34;22&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; title=&#34;24&#34;&gt;    Html.img (List.concat [ styleAttrs, [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ] ]) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; title=&#34;26&#34;&gt;concatMapWith &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-27&#34; title=&#34;27&#34;&gt;concatMapWith f g board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-28&#34; title=&#34;28&#34;&gt;    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.map g&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-30&#34; title=&#34;30&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-31&#34; title=&#34;31&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-33&#34; title=&#34;33&#34;&gt;maxLength &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-34&#34; title=&#34;34&#34;&gt;maxLength &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;90.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-36&#34; title=&#34;36&#34;&gt;vmin &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-37&#34; title=&#34;37&#34;&gt;vmin n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;append (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n) &lt;span class=&#34;st&#34;&gt;&amp;quot;vmin&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4bx9X6b6S7Ma1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;プログラムの中で割り算を記述するのは気がひけるが，まぁ上手く描写されているのでよしとする．&lt;/p&gt;
&lt;h3 id=&#34;粒度スライダーの導入&#34;&gt;粒度スライダーの導入&lt;/h3&gt;
&lt;p&gt;スライダーには次のパッケージを利用した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/&#34;&gt;carwow/elm-slider - Elm Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/SingleSlider&#34;&gt;SingleSlider&lt;/a&gt; を使いたい． SingleSlider の中に &lt;code&gt;Model&lt;/code&gt; や &lt;code&gt;Msg&lt;/code&gt; などが定義されているので，それらを適切に使えば良い．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  { board &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  , sizeSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always (initModel, Cmd.none)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;        size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;            &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;        defaultSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;            SingleSlider.defaultModel&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;        sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;            { defaultSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;5.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;                , &lt;span class=&#34;fu&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;                , step &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;                , value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;                , minFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;                , maxFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;                , currentValueFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;                    \n _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;1列のマス数: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;            }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;                    initBoard (&lt;span class=&#34;fu&#34;&gt;truncate&lt;/span&gt; updatedSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;            , Cmd.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;        sliderAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-63&#34; title=&#34;63&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-64&#34; title=&#34;64&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-65&#34; title=&#34;65&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-66&#34; title=&#34;66&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-67&#34; title=&#34;67&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-68&#34; title=&#34;68&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-69&#34; title=&#34;69&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-70&#34; title=&#34;70&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-71&#34; title=&#34;71&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-72&#34; title=&#34;72&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-73&#34; title=&#34;73&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-74&#34; title=&#34;74&#34;&gt;        , viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-75&#34; title=&#34;75&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4bXck9C58qFa1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; の初期化関数，&lt;code&gt;update&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; メソッドがそれぞれあって，それを呼び出して &lt;code&gt;map&lt;/code&gt; するだけ． こういう風に細かいパーツを呼び出すだけでできるデザインいいですよね．&lt;/p&gt;
&lt;h3 id=&#34;状態と入力&#34;&gt;状態と入力&lt;/h3&gt;
&lt;p&gt;現状はまだ全セルが死んでいる状態なので，何らかの入力を受け取って好きなセルを生きてる状態にできるようにする必要がある． まずはPCだけ考えるとして，できればセルを一個一個クリックして更新する形にはしたくない(めんどくさいから)． 生状態にできるかどうかのフラグと，オンの時だけマウスオーバーで生状態にするようにしたい． なので，まずはフラグを &lt;code&gt;Model&lt;/code&gt; に追加した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 状態の更新が可能か&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;initBoard n &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;planting&lt;/code&gt; が真のときだけマウスオーバーでセルを生状態にできる(ようにする)． したがって「&lt;code&gt;planting&lt;/code&gt; のオンオフ」と「セルを生状態にする」の二つの &lt;code&gt;Msg&lt;/code&gt; が必要だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- インデックスのセルを生状態にする&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 生状態への変更を可能にする&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;updateBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;updateBoard msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; idx &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;            ( born idx board, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; xor board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;born &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;born idx board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.set idx &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，盤上をクリックして &lt;code&gt;planting&lt;/code&gt; のオンオフをし，マウスオーバーで生状態にするように &lt;code&gt;view&lt;/code&gt; へ &lt;code&gt;Msg&lt;/code&gt; を追加する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html.Events.Extra.Pointer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pointer&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;viewBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;viewBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;        attr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;    concatIndexedMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;viewCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;        styleAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;        bornAttr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                [ Pointer.onDown (always &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;                , Pointer.onOver (always (&lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; idx))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;                ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-31&#34; title=&#34;31&#34;&gt;                [ Pointer.onDown (always &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-33&#34; title=&#34;33&#34;&gt;        imageLink &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-34&#34; title=&#34;34&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; cell &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-35&#34; title=&#34;35&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-36&#34; title=&#34;36&#34;&gt;                    [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-37&#34; title=&#34;37&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-38&#34; title=&#34;38&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-39&#34; title=&#34;39&#34;&gt;                    [ src &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-41&#34; title=&#34;41&#34;&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-42&#34; title=&#34;42&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-43&#34; title=&#34;43&#34;&gt;concatIndexedMapWith &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-44&#34; title=&#34;44&#34;&gt;concatIndexedMapWith f g board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-45&#34; title=&#34;45&#34;&gt;    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-46&#34; title=&#34;46&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.indexedMap g&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-47&#34; title=&#34;47&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-48&#34; title=&#34;48&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マウスイベントには，おいおいスマホ対応もできるように &lt;a href=&#34;https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest&#34;&gt;&lt;code&gt;mpizenberg/elm-pointer-events&lt;/code&gt;&lt;/a&gt; パッケージを利用した． あとは &lt;code&gt;main&lt;/code&gt; 側を書き換えれば出来上がり:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;                ( updatedBoard, cmd ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;                    updateBoard subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard }, Cmd.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; cmd )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;        sliderAttrs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;        , Html.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4c3qbgJmvZ8a1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;更新を追加&#34;&gt;更新を追加&lt;/h3&gt;
&lt;p&gt;いよいよライフゲーム化． まず，上述した状態変化の定義を関数(&lt;code&gt;nextCell&lt;/code&gt;)にする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;nextBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;nextBoard board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.indexedMap (nextCell board) board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;nextCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;nextCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; ( countAroundAliveCell board idx, cell ) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;        ( &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;        ( &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, _ ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;countAroundAliveCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;countAroundAliveCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Debug.todo &lt;span class=&#34;st&#34;&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;countAroundAliveCell&lt;/code&gt; は「回り」の生状態のセル数を返す想定． ここで少し大変． &lt;code&gt;cells&lt;/code&gt; を2次元配列ではなく，1次元配列にしてCSSで折りたたむようにしてしまったので，壁際にあるかどうかの判定をインデックスと盤面のサイズから導く必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;countAroundAliveCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;countAroundAliveCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;    aroundCell board idx &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.filter ((&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.length&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;aroundCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;aroundCell board idx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;    [ &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; modBy board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size idx &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;        [] &lt;span class=&#34;co&#34;&gt;-- 左端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;        [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;    , [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size ] &lt;span class=&#34;co&#34;&gt;-- 上下は `Array.get` で `Nothing` になる&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;    , &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; modBy board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size idx &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;        &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;        [] &lt;span class=&#34;co&#34;&gt;-- 右端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;        [ idx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, idx &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.concat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.filterMap (\n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Array.get n board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;cells)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで更新部分はできた． 次に &lt;code&gt;nextBoard&lt;/code&gt; 関数を呼び出すタイミングを &lt;code&gt;subscriptions&lt;/code&gt; と &lt;code&gt;Msg&lt;/code&gt; で定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;  , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;  , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; nextBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-24&#34; title=&#34;24&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-26&#34; title=&#34;26&#34;&gt;        Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-29&#34; title=&#34;29&#34;&gt;        Time.every &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt; (always &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://ellie-app.com/4c7ncvvgQVqa1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;時間スライダーの導入&#34;&gt;時間スライダーの導入&lt;/h3&gt;
&lt;p&gt;ついでに更新間隔の時間もスライダーで設定できるようにした． やり方は簡単で，&lt;code&gt;Model&lt;/code&gt; にもう一つ &lt;code&gt;SingleSlider&lt;/code&gt; を生やせばいい:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;  { board &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;  , sizeSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;  , tickSlider &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;        tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;            { defaultSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; title=&#34;14&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; title=&#34;15&#34;&gt;                , &lt;span class=&#34;fu&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;1000.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; title=&#34;16&#34;&gt;                , step &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;10.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; title=&#34;17&#34;&gt;                , value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;100.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; title=&#34;18&#34;&gt;                , minFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-19&#34; title=&#34;19&#34;&gt;                , maxFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-20&#34; title=&#34;20&#34;&gt;                , currentValueFormatter &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-21&#34; title=&#34;21&#34;&gt;                    \n _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;更新間隔: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromFloat n, &lt;span class=&#34;st&#34;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-22&#34; title=&#34;22&#34;&gt;            }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-24&#34; title=&#34;24&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-25&#34; title=&#34;25&#34;&gt;    , sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-26&#34; title=&#34;26&#34;&gt;    , tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-27&#34; title=&#34;27&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-31&#34; title=&#34;31&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-35&#34; title=&#34;35&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-36&#34; title=&#34;36&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-38&#34; title=&#34;38&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-39&#34; title=&#34;39&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-40&#34; title=&#34;40&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-41&#34; title=&#34;41&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-42&#34; title=&#34;42&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-43&#34; title=&#34;43&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-44&#34; title=&#34;44&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-45&#34; title=&#34;45&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-46&#34; title=&#34;46&#34;&gt;            , Cmd.batch [ Cmd.map &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; cmd ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-47&#34; title=&#34;47&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-48&#34; title=&#34;48&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-49&#34; title=&#34;49&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-50&#34; title=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-51&#34; title=&#34;51&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-52&#34; title=&#34;52&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-53&#34; title=&#34;53&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-54&#34; title=&#34;54&#34;&gt;view model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-55&#34; title=&#34;55&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-56&#34; title=&#34;56&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-58&#34; title=&#34;58&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-59&#34; title=&#34;59&#34;&gt;        [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-60&#34; title=&#34;60&#34;&gt;            [ style &lt;span class=&#34;st&#34;&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-61&#34; title=&#34;61&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-62&#34; title=&#34;62&#34;&gt;            , style &lt;span class=&#34;st&#34;&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-63&#34; title=&#34;63&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-64&#34; title=&#34;64&#34;&gt;            [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-65&#34; title=&#34;65&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-66&#34; title=&#34;66&#34;&gt;            , &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-67&#34; title=&#34;67&#34;&gt;                [ Html.map &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-68&#34; title=&#34;68&#34;&gt;            ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-69&#34; title=&#34;69&#34;&gt;        , Html.map &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-70&#34; title=&#34;70&#34;&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでスライダーが増えた． あとは &lt;code&gt;subscriptions&lt;/code&gt; のところを書き換えるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;planting &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;        Sub.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;        Time.every model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;tickSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value (always &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単ですね． &lt;a href=&#34;https://ellie-app.com/4c7nNjzjy44a1&#34;&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;urlパーサー&#34;&gt;URLパーサー&lt;/h3&gt;
&lt;p&gt;生状態や死状態の画像を好きなのに変えたいなと思った． そこで，ちょうど elm/url の勉強をしたので，url のクエリから指定できるようにしようと考えた． まずは状態の画像のリンクを &lt;code&gt;Board&lt;/code&gt; に持たせる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;    { alive &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; title=&#34;10&#34;&gt;    , dead &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; title=&#34;11&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; title=&#34;13&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; title=&#34;14&#34;&gt;initBoard n links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; title=&#34;15&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; title=&#34;16&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; title=&#34;17&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; title=&#34;18&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; title=&#34;19&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-21&#34; title=&#34;21&#34;&gt;viewCell &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-22&#34; title=&#34;22&#34;&gt;viewCell board idx cell &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-26&#34; title=&#34;26&#34;&gt;        imageLink &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-27&#34; title=&#34;27&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; cell &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-28&#34; title=&#34;28&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-29&#34; title=&#34;29&#34;&gt;                    [ src board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;dead ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-31&#34; title=&#34;31&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Alive&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-32&#34; title=&#34;32&#34;&gt;                    [ src board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;alive ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-34&#34; title=&#34;34&#34;&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は URL から値を取得する． URL を取得するには &lt;code&gt;Browser.application&lt;/code&gt; を使う必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;    Browser.application&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;        , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;        , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;        , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;        , onUrlRequest &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; always (&lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; defaultLinks)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;        , onUrlChange &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \url &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; (parseUrl url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; _ url _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (initModel url, Cmd.none)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; title=&#34;14&#34;&gt;initModel &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; title=&#34;15&#34;&gt;initModel url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; title=&#34;19&#34;&gt;    { board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; initBoard size (parseUrl url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; title=&#34;20&#34;&gt;    , sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-21&#34; title=&#34;21&#34;&gt;    , tickSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-22&#34; title=&#34;22&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-24&#34; title=&#34;24&#34;&gt;defaultLinks &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-25&#34; title=&#34;25&#34;&gt;    { alive &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-26&#34; title=&#34;26&#34;&gt;    , dead &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-27&#34; title=&#34;27&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-29&#34; title=&#34;29&#34;&gt;parseUrl &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-30&#34; title=&#34;30&#34;&gt;parseUrl url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Debug.todo &lt;span class=&#34;st&#34;&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.onUrlRequest&lt;/code&gt; や &lt;code&gt;.onUrlChange&lt;/code&gt; は SPA 内で URL を変更して遷移した場合に使う． 今回はおそらく不要だが適当にそれっぽい &lt;code&gt;Msg&lt;/code&gt; を生やした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; title=&#34;8&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; title=&#34;9&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; title=&#34;12&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; title=&#34;13&#34;&gt;                ( updatedSlider, cmd, _ ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; title=&#34;14&#34;&gt;                    SingleSlider.update subMsg model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; title=&#34;16&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; title=&#34;17&#34;&gt;                    initBoard (&lt;span class=&#34;fu&#34;&gt;truncate&lt;/span&gt; updatedSlider&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value) model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;links &lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; title=&#34;18&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; title=&#34;19&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; title=&#34;20&#34;&gt;            , Cmd.map &lt;span class=&#34;dt&#34;&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; title=&#34;21&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-23&#34; title=&#34;23&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-25&#34; title=&#34;25&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-27&#34; title=&#34;27&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;NextTick&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-29&#34; title=&#34;29&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;ChangeUrl&lt;/span&gt; links &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-30&#34; title=&#34;30&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-31&#34; title=&#34;31&#34;&gt;                board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-32&#34; title=&#34;32&#34;&gt;                    model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-33&#34; title=&#34;33&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-34&#34; title=&#34;34&#34;&gt;                updatedBoard &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-35&#34; title=&#34;35&#34;&gt;                    { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-36&#34; title=&#34;36&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-37&#34; title=&#34;37&#34;&gt;            ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; updatedBoard }, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さぁいよいよ URL のパーサーだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing (&lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser.Query&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlQuery&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;parseUrl &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;parseUrl url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; title=&#34;8&#34;&gt;        queryParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; title=&#34;9&#34;&gt;            UrlQuery.map2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; title=&#34;10&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; title=&#34;11&#34;&gt;                (UrlQuery.string &lt;span class=&#34;st&#34;&gt;&amp;quot;alive&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;alive))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; title=&#34;12&#34;&gt;                (UrlQuery.string &lt;span class=&#34;st&#34;&gt;&amp;quot;dead&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;dead))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-14&#34; title=&#34;14&#34;&gt;        parser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-15&#34; title=&#34;15&#34;&gt;            Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; queryParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-17&#34; title=&#34;17&#34;&gt;    { url &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Url.parse parser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault defaultLinks&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回の要件ではクエリしか必要ないので &lt;code&gt;{ url | path = &amp;quot;&amp;quot; }&lt;/code&gt; とパースする前にした． 現状の全体のコードは&lt;a href=&#34;https://gist.github.com/matsubara0507/b3c5b33505fbe50f63c1d3242414eece&#34;&gt;こんな感じ&lt;/a&gt;(ellie は application を動かせない)． これで &lt;code&gt;https://matsubara0507.github.io/lifegame?alive=http://4.bp.blogspot.com/-_A6aKYIGbf8/UOJXnVPCmQI/AAAAAAAAKH0/CHFd0OPz0Hk/s180-c/virus_character.png&lt;/code&gt; などで状態の画像が指定できるようになった．&lt;/p&gt;
&lt;h3 id=&#34;スマホ対応&#34;&gt;スマホ対応&lt;/h3&gt;
&lt;p&gt;最後にスマホでもできるようにした． 色々試行錯誤してみたが，マウスのような &lt;code&gt;onOver&lt;/code&gt; を使うことはできない． マウスのように一筆書きのみたいに入力するには &lt;code&gt;Touch.onMove&lt;/code&gt; を使うしかなく，このためには &lt;code&gt;Model&lt;/code&gt; に &lt;code&gt;Touch.onMove&lt;/code&gt; イベントで取得した値を保持させる必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; title=&#34;6&#34;&gt;    , touchPos &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-7&#34; title=&#34;7&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-9&#34; title=&#34;9&#34;&gt;initBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Links&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-10&#34; title=&#34;10&#34;&gt;initBoard n links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-11&#34; title=&#34;11&#34;&gt;    { size &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-12&#34; title=&#34;12&#34;&gt;    , cells &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Array.repeat (n &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; n) &lt;span class=&#34;dt&#34;&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-13&#34; title=&#34;13&#34;&gt;    , planting &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-14&#34; title=&#34;14&#34;&gt;    , links &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-15&#34; title=&#34;15&#34;&gt;    , touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-16&#34; title=&#34;16&#34;&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.touchPos&lt;/code&gt; を更新するために &lt;code&gt;BoardMsg&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; を書き換える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-6&#34; title=&#34;6&#34;&gt;updateBoard &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-7&#34; title=&#34;7&#34;&gt;updateBoard msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; pos &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-12&#34; title=&#34;12&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-13&#34; title=&#34;13&#34;&gt;            , Cmd.none&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-14&#34; title=&#34;14&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-16&#34; title=&#34;16&#34;&gt;view &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-17&#34; title=&#34;17&#34;&gt;view board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-21&#34; title=&#34;21&#34;&gt;        getTouchPos event &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-22&#34; title=&#34;22&#34;&gt;            List.head event&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;targetTouches&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-23&#34; title=&#34;23&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;clientPos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-24&#34; title=&#34;24&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault ( &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-25&#34; title=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-26&#34; title=&#34;26&#34;&gt;        bornAttr &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-27&#34; title=&#34;27&#34;&gt;            [ Touch.onWithOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-28&#34; title=&#34;28&#34;&gt;                &lt;span class=&#34;st&#34;&gt;&amp;quot;touchmove&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-29&#34; title=&#34;29&#34;&gt;                { stopPropagation &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, preventDefault &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-30&#34; title=&#34;30&#34;&gt;                (&lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; getTouchPos)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-31&#34; title=&#34;31&#34;&gt;            ]    &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-33&#34; title=&#34;33&#34;&gt;    concatIndexedMapWith (Html.div (attr &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; bornAttr)) (viewCell board) board&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確か &lt;code&gt;.preventDefault&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; にするとスワイプ(?)で画面が動いてしまうのを止めてくれるらしい． さて問題はここから． &lt;code&gt;cells&lt;/code&gt; を1次元配列にしてしまった弊害パート2で，この &lt;code&gt;.touchPos&lt;/code&gt; からなんとかして配列のインデックスを出さなきゃいけない． 幸いなことにセル一つの大きさは相対サイズにしていたので，盤全体の実際の大きさとセル数がわかれば逆算できる． 盤全体の大きさを得るには &lt;code&gt;Dom.getElement&lt;/code&gt; を使う必要があり，そのためには &lt;code&gt;BoardMsg&lt;/code&gt; を追加する必要があった:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Born&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Element&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; title=&#34;7&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Board&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; title=&#34;8&#34;&gt;update msg board &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;TouchMovePos&lt;/span&gt; pos &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-13&#34; title=&#34;13&#34;&gt;            ( { board &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; touchPos &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-14&#34; title=&#34;14&#34;&gt;            , Dom.getElement &lt;span class=&#34;st&#34;&gt;&amp;quot;board&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-15&#34; title=&#34;15&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Task.attempt (&lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Result.toMaybe)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-16&#34; title=&#34;16&#34;&gt;            )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-18&#34; title=&#34;18&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-19&#34; title=&#34;19&#34;&gt;            ( board, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-21&#34; title=&#34;21&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;BornWithTouch&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-22&#34; title=&#34;22&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-23&#34; title=&#34;23&#34;&gt;                &lt;span class=&#34;co&#34;&gt;-- 1セルの大きさ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-24&#34; title=&#34;24&#34;&gt;                ( px, py ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-25&#34; title=&#34;25&#34;&gt;                    ( &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;width &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-26&#34; title=&#34;26&#34;&gt;                    , &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;height &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; toFloat board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-27&#34; title=&#34;27&#34;&gt;                    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-29&#34; title=&#34;29&#34;&gt;                ( tx, ty ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-30&#34; title=&#34;30&#34;&gt;                    board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;touchPos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-32&#34; title=&#34;32&#34;&gt;                &lt;span class=&#34;co&#34;&gt;-- タップしたところの2次元座標&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-33&#34; title=&#34;33&#34;&gt;                ( x, y ) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-34&#34; title=&#34;34&#34;&gt;                    ( (tx &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;x) &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; px &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-35&#34; title=&#34;35&#34;&gt;                    , (ty &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elem.&lt;/span&gt;element&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;y) &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; py &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-36&#34; title=&#34;36&#34;&gt;                    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-37&#34; title=&#34;37&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-38&#34; title=&#34;38&#34;&gt;            ( born (y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; board&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; x) board, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成． ちなみに，最初は全てのセルの &lt;code&gt;Dom.getElement&lt;/code&gt; して，&lt;code&gt;element.width&lt;/code&gt; を比較する全探索方式でやってみたが，遅すぎて使い物にならなかったので，逆算するようにした． まぁ多少誤差があったってもともと指でなぞってるだけなのでいいでしょう．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;.touchPos&lt;/code&gt; みたいな要素を盤面の &lt;code&gt;Model&lt;/code&gt; に入れるべきか？って気がするが，今回はやっつけなので大目にみてください．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;無駄にコードを貼りまくったせいで長くなってしまった． できたアプリ，意外と気に入ってます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html</id><title type="text">GHC 8.x 勉強会に行ってきた</title><updated>2018-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;GHC 8.x 勉強会に行ってきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; の18日目の記事です． 空いていたのでついでに埋めました．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;12/7 の10-17時半ぐらいに IIJ-II で GHC8 系のバージョンアップを追う会的なイベントが企画されました． このイベントは IIJ-II の Haskell チームで発案・企画し，Haskell-jp の Slack で募集をかけていました． 定員12人かつ，平日昼間でしたが，面白そうなので有給とって行ってきた(僕は IIJ-II では無いので)． 多少クローズドな会ということもあり，せっかくなので色々と議論したことを記事に起こしておきます． 正確な情報は GHC のドキュメントを呼んでください．&lt;/p&gt;
&lt;h2 id=&#34;進め方&#34;&gt;進め方&lt;/h2&gt;
&lt;p&gt;GHCには&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html&#34;&gt;こんな感じ&lt;/a&gt;のリリースノートがある． 当日は8系のリリースノートのハイライトを追っていくという感じだった．&lt;/p&gt;
&lt;p&gt;事前に一人一つぐらいは調べてきて発表する感じだったが，担当者がいない内容でも，紹介記事を引っ張ってきたりなんだりしてた．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;8.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;． 8.0だけめっちゃ多い． 当初は 7.12 とかにする予定だったが，あまりにも差分があったので 8 にした的な話があるとかないとか(要出典)．&lt;/p&gt;
&lt;h3 id=&#34;typeintype-など&#34;&gt;TypeInType など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeInType&#34;&gt;&lt;code&gt;TypeInType&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;以下3つの言語拡張も包含している
&lt;ul&gt;
&lt;li&gt;PolyKinds&lt;/li&gt;
&lt;li&gt;DataKinds&lt;/li&gt;
&lt;li&gt;KindSignatures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PolyKind: 型変数のカインドが多相的になる（本来は &lt;code&gt;*&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;DataKinds: 定義した型をカインドとして利用できる&lt;/li&gt;
&lt;li&gt;KindSignatures: カインドを明示的に指定できる&lt;/li&gt;
&lt;li&gt;TypeInType:
&lt;ul&gt;
&lt;li&gt;上記全部を利用可&lt;/li&gt;
&lt;li&gt;多相カインド&lt;/li&gt;
&lt;li&gt;RankNTypes も追加で高階カインドも可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: 結局目指すところは？
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell&#34;&gt;Dependent Haskell&lt;/a&gt; のマイルストーンの一部では？&lt;/li&gt;
&lt;li&gt;Merging Types and Kinds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patternsynonyms-系&#34;&gt;PatternSynonyms 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#record-patsyn&#34;&gt;Record Pattern Synonyms&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;レコード型でも PatternSynonyms を利用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20170919/1505787393&#34;&gt;PatternSynonymsのススメ - あどけない話&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;そもそも PatternSynonyms って？&lt;/li&gt;
&lt;li&gt;PatternSynonyms それ自体は 7.8.1 から&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8.0 から export 時に &lt;code&gt;pattern&lt;/code&gt; キーワードがいらなくなった
&lt;ul&gt;
&lt;li&gt;すごい助かるって意見もあれば&lt;/li&gt;
&lt;li&gt;あえて明示的にすべきという意見も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ネットワーク屋さん的にはこのパターンは本当に便利という話&lt;/li&gt;
&lt;li&gt;BangPattern や ViewPattern の組み合わせ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deriveanyclass&#34;&gt;DeriveAnyClass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#derive-any-class&#34;&gt;DeriveAnyClass&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;名前の通り任意の型クラスに対して &lt;code&gt;deriving&lt;/code&gt; を利用する仕組みを提供&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; 可能な型クラスからデフォルト実装を定義したり&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;injective-type-families&#34;&gt;Injective type families&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#injective-ty-fams&#34;&gt;&lt;code&gt;TypeFamilyDependencies&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lotz/items/6c038698c8f04f57113a&#34;&gt;型族が単射だと嬉しい理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(書いた当人は書いてたこと忘れてた笑)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;applicativedo&#34;&gt;ApplicativeDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#applicative-do&#34;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;do 記法が Applicative でも使える&lt;/li&gt;
&lt;li&gt;だけじゃなく，do 記法が特定の条件を満たすと勝手に Applicative や Functor に脱糖してくれる
&lt;ul&gt;
&lt;li&gt;この条件がなかなか(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか結構盛り上がった(笑)&lt;/p&gt;
&lt;h3 id=&#34;wildcards-in-data-and-type-family&#34;&gt;Wildcards in data and type family&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#wildcards-on-the-lhs-of-data-and-type-family-instances&#34;&gt;この辺り&lt;/a&gt;？ ちょっと何話したか忘れた．&lt;/p&gt;
&lt;h3 id=&#34;strict-系&#34;&gt;Strict 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#strict-haskell&#34;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679&#34;&gt;Strict Haskell - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;昔から正格評価にする記法はあったが，この拡張によりデフォルトの評価戦略を切り替えれる．&lt;/li&gt;
&lt;li&gt;実は逆に &lt;code&gt;~x&lt;/code&gt; とすることで &lt;code&gt;x&lt;/code&gt; を遅延評価できる&lt;/li&gt;
&lt;li&gt;Q: パターンマッチの反駁不能パターンはどうなるんだろ？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~(~x)&lt;/code&gt; のようにチルダをカッコで重ねる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;duplicate-record-fields&#34;&gt;Duplicate record fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20160114/1452735514&#34;&gt;重複したフィールドラベル - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: &lt;code&gt;instance (a ~ Int) =&amp;gt; IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; a)&lt;/code&gt; の &lt;code&gt;a ~ Int&lt;/code&gt; はなぜ必要か？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; Int)&lt;/code&gt; ではなく&lt;/li&gt;
&lt;li&gt;推論の順番を明示的にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: ボイラーテンプレートの件は進んだの？？
&lt;ul&gt;
&lt;li&gt;なんか放置されてる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SystemF + レコード多相は死ぬ
&lt;ul&gt;
&lt;li&gt;OCaml は分けている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ユーザ定義-typeerror&#34;&gt;ユーザ定義 TypeError&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;型エラーをユーザーで定義できる？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Proposal/CustomTypeErrors&#34;&gt;プロポーザル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;どんな話したか忘れました，すいません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ghci-関連&#34;&gt;GHCi 関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本来 GHCi はコードを同一のプロセスと共通のヒープで実行する&lt;/li&gt;
&lt;li&gt;それを &lt;a href=&#34;https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/ghci.html#external-interpreter&#34;&gt;&lt;code&gt;fexternal-interpreter&lt;/code&gt;&lt;/a&gt; オプションでコントロールできる&lt;/li&gt;
&lt;li&gt;だっけか（また細かい話は忘れました，すいません）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-2&#34;&gt;8.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/8.2.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typeable mechanism, Type.Reflection&lt;/li&gt;
&lt;li&gt;そういえばCUIがカラフルになったね&lt;/li&gt;
&lt;li&gt;Heap 系
&lt;ul&gt;
&lt;li&gt;あんまりよく覚えてないごめんなさい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;derivingstrategies&#34;&gt;DerivingStrategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DerivingStrategies&lt;/code&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies&#34;&gt;Commentary/Compiler/DerivingStrategies – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kakkun61/deriving-strategies-playground&#34;&gt;kakkun 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; する時に &lt;code&gt;newtype&lt;/code&gt; や &lt;code&gt;stock&lt;/code&gt; などのキーワードを指定することで &lt;code&gt;deriving&lt;/code&gt; の仕方をコントロールできる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unboxedsums&#34;&gt;UnboxedSums&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XUnboxedSums&#34;&gt;&lt;code&gt;UnboxedSums&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/maoe/e5888fad16a190a9c7cf58b8bedb1d04&#34;&gt;maoe 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compact-regions&#34;&gt;Compact Regions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ezyang/compact&#34;&gt;ezyang/compact - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;処理系によってGCされないデータ領域&lt;/li&gt;
&lt;li&gt;インターフェースは充実してる&lt;/li&gt;
&lt;li&gt;ただしデータの追加しかできない（書き換えは不可）&lt;/li&gt;
&lt;li&gt;Q: 何に使える？
&lt;ul&gt;
&lt;li&gt;強大な辞書とか？&lt;/li&gt;
&lt;li&gt;設定ファイルとか？（巨大なら）&lt;/li&gt;
&lt;li&gt;NGワード集とか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GHC8.x 勉強会のあとに記事にしてくれた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ruicc/items/c955e794c5dc74c4cb58&#34;&gt;Compact Regionsについて軽く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;backpack&#34;&gt;Backpack&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Backpack&#34;&gt;Backpack – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;雑にいうと: ML系のファンクターのようなより強力なモジュールシステム&lt;/li&gt;
&lt;li&gt;モジュールのインターフェースと実装を分離できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html&#34;&gt;Haskell Backpack 覚え書き - ひげメモ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;自分の記事だけど1年近く前で覚えてない(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: どんな時に有用？
&lt;ul&gt;
&lt;li&gt;本質的には型クラスと同じ用途のはず&lt;/li&gt;
&lt;li&gt;ただし型に依存しない（型クラスは型によって実装をディスパッチ）&lt;/li&gt;
&lt;li&gt;不自然な &lt;code&gt;Proxy a&lt;/code&gt; を渡さなくていい（苦肉の策でそういう実装をしている型クラスがある）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;そういえば最近 &lt;a href=&#34;https://github.com/kowainik/containers-backpack&#34;&gt;contains の Backpack 版&lt;/a&gt;がでた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者さんが忙しくて Stack への適用を断念したため，なかなか浸透しない． 今「Stack への適用をやりたい」という人が現れたが時間がかかりそう．&lt;/p&gt;
&lt;h3 id=&#34;脱線-各位リンカどうしてるの&#34;&gt;脱線: 各位リンカどうしてるの？&lt;/h3&gt;
&lt;p&gt;kazu yamamoto 氏が GHC 8.6 になってから(だっけ？)リンカ周りで動作しなくて困ってるらしい(OS は Mac)． 僕は適当にやってて困ったことないのでよくわからない．&lt;/p&gt;
&lt;p&gt;ちなみに GHC 8.6.3 で無事動いたらしい:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
吉報：GHC 8.6.3 は macOS で問題なく使えるようになりました！
&lt;/p&gt;
— 山本和彦 (&lt;span class=&#34;citation&#34; data-cites=&#34;kazu_yamamoto&#34;&gt;@kazu_yamamoto&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/kazu_yamamoto/status/1072030847799255040?ref_src=twsrc%5Etfw&#34;&gt;2018年12月10日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;section-3&#34;&gt;8.4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.4/docs/html/users_guide/8.4.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;そういえば，8.4.4 は 8.6 系が出てから出て，ちゃんとバグフィックス出すんだと感心した的な話をした．&lt;/p&gt;
&lt;h3 id=&#34;semigroup-monoid-proposal&#34;&gt;Semigroup-Monoid Proposal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; にサブクラスとして &lt;code&gt;Semigroup&lt;/code&gt; を持たせる
&lt;ul&gt;
&lt;li&gt;その方が数学的に自然&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20180306/1520314185&#34;&gt;あなたの知らないSemigroupの世界 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前のバージョンアから &lt;code&gt;-Wnoncanonical-monoid-instances&lt;/code&gt; などの警告を付け足して段階的にやっている
&lt;ul&gt;
&lt;li&gt;しかし &lt;code&gt;-Wall&lt;/code&gt; に含まれてないので気づかず&lt;/li&gt;
&lt;li&gt;なんか 8.4 で急にエラーに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ちなみに以降は &lt;code&gt;Monoid&lt;/code&gt; をインポートしなくても &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; が使える&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monadfail-と-no-return&#34;&gt;MonadFail と no return&lt;/h3&gt;
&lt;p&gt;ここは脱線．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/MonadFail_Proposal&#34;&gt;MonadFail Proposal - HaskellWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; には &lt;code&gt;fail&lt;/code&gt; が定義されている
&lt;ul&gt;
&lt;li&gt;が &lt;code&gt;error&lt;/code&gt; などを利用している残念な実装もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MonadFail&lt;/code&gt; という型クラスで切り出す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wnoncanonical-monadfail-instances&lt;/code&gt; ができた？&lt;/li&gt;
&lt;li&gt;8.6: &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadFailDesugaring&#34;&gt;&lt;code&gt;MonadFailDesugaring&lt;/code&gt;&lt;/a&gt; 言語拡張がデフォルトに
&lt;ul&gt;
&lt;li&gt;do 記法の &lt;code&gt;fail&lt;/code&gt; への脱糖が &lt;code&gt;MonadFail&lt;/code&gt; のものになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-4&#34;&gt;8.6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/8.6.1-notes.html&#34;&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;quantifiedconstraints&#34;&gt;QuantifiedConstraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-QuantifiedConstraints&#34;&gt;QuantifiedConstraints&lt;/a&gt; 言語拡張を追加&lt;/li&gt;
&lt;li&gt;インスタンスの定義に量化が使える
&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;instance (Eq a, forall b. (Eq b) =&amp;gt; Eq (f b)) =&amp;gt; Eq (Rose f a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://the.igreque.info/slides/2018-12-07-ghc8x.html&#34;&gt;igrap 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: Constraint のシノニムでも使える？
&lt;ul&gt;
&lt;li&gt;無理だった orz&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;derivingvia&#34;&gt;DerivingVia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DerivingVia&#34;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;code&gt;via&lt;/code&gt; キーワードを使ってインスタンスを明示的に選択できるようになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kayhide/try-ghc86&#34;&gt;kayhide 氏の資料&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;QuickCheck の例&lt;/li&gt;
&lt;li&gt;テストの実装を Via で定義&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;わかりやすい&lt;a href=&#34;https://speakerdeck.com/konn/ben-dang-hasugoi-newtype&#34;&gt;スライド&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;後半の方&lt;/li&gt;
&lt;li&gt;タプルの例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;plugin-mechanism&#34;&gt;Plugin mechanism&lt;/h3&gt;
&lt;p&gt;(誰も調べてはない) ちょうど記事があった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/waddlaw/items/65b57517f105fcbbe724&#34;&gt;GHC Source Plugin 作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終わった後の雑談で，Scala には似たような機能(Scala Compiler Plugins?)が既にあるので，真似するといいとかなんとか．&lt;/p&gt;
&lt;h3 id=&#34;valid-hole-fits&#34;&gt;Valid hole fits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/GHC/Typed_holes&#34;&gt;Type holes&lt;/a&gt; という機能についての拡張
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/07-TypedHoles.html&#34;&gt;Type Hole については Haskell-jp に記事がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#typed-hole-valid-hole-fits&#34;&gt;コンパイルフラグ&lt;/a&gt;で type Holes での推論アルゴリズム(?)のコントロールができるようになった(って感じかな)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;シンタックスの言語拡張&#34;&gt;シンタックスの言語拡張&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数値リテラルに &lt;code&gt;_&lt;/code&gt; が使える: &lt;code&gt;10_000_000&lt;/code&gt; とか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; 記法の前に &lt;code&gt;$&lt;/code&gt; などがいらなくなる: &lt;code&gt;\x -&amp;gt; do ...&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;時間経ちすぎてめっちゃ適当になってしまった． すいません． ただ，めっちゃ楽しかった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html</id><title type="text">詳解 elm/url !!</title><updated>2018-12-11T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;詳解 elm/url !!&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-11&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 11, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/elm&#34;&gt;Elm Advent Calendar 2018&lt;/a&gt; の11日目の記事です． elm-jp の Discord で突如無茶振りされたので頑張ります．&lt;/p&gt;
&lt;h2 id=&#34;elmurl&#34;&gt;elm/url&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/elm/url/1.0.0/&#34;&gt;elm/url&lt;/a&gt; は Elm 0.19 で刷新されたパッケージ群にしれっと混ざってきた URL に関するパッケージ． &lt;a href=&#34;https://package.elm-lang.org/packages/elm/browser/latest/Browser#application&#34;&gt;Browser.application&lt;/a&gt; でも使われているのでみなさんも頑張って使えるようになりましょう．&lt;/p&gt;
&lt;p&gt;ちなみに本記事では ver1.0.0 の elm/url を想定している．&lt;/p&gt;
&lt;h2 id=&#34;url-の型&#34;&gt;Url の型&lt;/h2&gt;
&lt;p&gt;こんな風に定義されている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    { protocol &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protocol&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    , host &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    , port_ &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    , path &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    , query &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    , fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protocol&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Https&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超絶わかりやすい ASCII アートまでありエヴァン様神って感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  https://example.com:8042/over/there?name=ferret#nose
  \___/   \______________/\_________/ \_________/ \__/
    |            |            |            |        |
  scheme     authority       path        query   fragment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; は &lt;code&gt;example.com&lt;/code&gt; の部分で &lt;code&gt;port_&lt;/code&gt; は &lt;code&gt;8042&lt;/code&gt; の部分． 試しに REPL で &lt;code&gt;Url.fromString&lt;/code&gt; してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:8042/over/there?name=ferret#nose&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { fragment &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;nose&amp;quot;&lt;/span&gt;, host &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/over/there&amp;quot;&lt;/span&gt;, port_ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;8042&lt;/span&gt;, protocol &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Https&lt;/span&gt;, query &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name=ferret&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Url&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;url.parser-の使い方&#34;&gt;Url.Parser の使い方&lt;/h2&gt;
&lt;p&gt;さて，ここからが本番． &lt;code&gt;Url.Parser&lt;/code&gt; モジュールを利用して &lt;code&gt;Browser.application&lt;/code&gt; などから受け取った URL をパースして，任意の型に変換するパーサーを記述する．&lt;/p&gt;
&lt;h3 id=&#34;パーサーの例&#34;&gt;パーサーの例&lt;/h3&gt;
&lt;p&gt;次のような型にパースするパーサーを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  { &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  , name &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入力には &lt;code&gt;http://localhost/hoge/1234?name=fuga&lt;/code&gt; URL というのを想定している．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser.Query&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  Url.map &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; (Url.s &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使ってみると:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/hoge/1234?name=fuga&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser1)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1234&lt;/span&gt;, name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;基本的な関数と型&#34;&gt;基本的な関数と型&lt;/h3&gt;
&lt;p&gt;まずは肝となる &lt;code&gt;Url.parse&lt;/code&gt; 関数の型を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;parse &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; というのがパーサーの型だ(&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が何を意味しているかは後述，無論 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が同じでもいい)． &lt;code&gt;Parser (a -&amp;gt; a) a&lt;/code&gt; という型(この &lt;code&gt;a&lt;/code&gt; は全て同じ型)のパーサーを与えて &lt;code&gt;Url&lt;/code&gt; という入力を食わせることで &lt;code&gt;Maybe a&lt;/code&gt; という結果を受け取れる． 途中でパース失敗した場合は &lt;code&gt;Nothing&lt;/code&gt; が返り，成功すると &lt;code&gt;Just a&lt;/code&gt; の値が返る．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;次のような関数を組み合わせて，パーサーを構築する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;int    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;s      &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;top    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;(&lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;)  &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;/code&gt; の型が &lt;code&gt;Parser a b&lt;/code&gt; の場合と &lt;code&gt;Parser (a -&amp;gt; b) b&lt;/code&gt; の場合の2パターンがあることに気づいただろうか？ &lt;code&gt;string&lt;/code&gt; や &lt;code&gt;int&lt;/code&gt; のような &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; のようなパーサーの場合は， &lt;code&gt;a&lt;/code&gt; の部分がパース結果の型と考えられる． 対して &lt;code&gt;s&lt;/code&gt; や &lt;code&gt;top&lt;/code&gt; のような関数は入力(&lt;code&gt;Url&lt;/code&gt;)を消費するだけでパース結果の型(&lt;code&gt;parse&lt;/code&gt; の &lt;code&gt;Maybe a&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分)に影響を与えない． そして &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; が URL の区切り文字(&lt;code&gt;/&lt;/code&gt;) である．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;試しにいくつか組み合わせてみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.s &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser2 &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.top&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { hoge1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, hoge2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, hoge3 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser4 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.map &lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; parser3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; でパーサーを連結することで &lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分がどんどん伸びてくる． ちなみに，&lt;code&gt;top&lt;/code&gt; はURLの末尾かどうかのチェックするパーサーだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost/1&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;url.parser.query-の使い方&#34;&gt;Url.Parser.Query の使い方&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;b&lt;/code&gt; 側が仕事をするのはクエリに関するパーサーがある場合だ． なので次にクエリのパーサーを見てみる． 便宜上以降ではクエリの型や関数には &lt;code&gt;Query&lt;/code&gt; を付けるようにする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;(&lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;)  &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a (query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;int    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;map2   &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; result) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; result&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; という演算子が Url のパーサーとクエリのパーサーを繋ぐ． クエリのパーサーの型は &lt;code&gt;Parser a&lt;/code&gt; と JSON デコーダーのような型と同じ仕組みだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; で連結したものを &lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一気に繋げても良いし，&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一つずつ繋げても良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; { fuga1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, fuga2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.map2 &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; (Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt;) (Query.int &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.map &lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; (Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.int &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga1&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;fragment&#34;&gt;Fragment&lt;/h2&gt;
&lt;p&gt;フラグメントの部分をパースするには &lt;code&gt;fragment&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (fragment &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんでもよければ &lt;code&gt;identity&lt;/code&gt; を使えば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parser6 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Url.top &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.fragment identity&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;function&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url.Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost#abc&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class=&#34;st&#34;&gt;&amp;quot;http://localhost&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;中身を読んでいく&#34;&gt;中身を読んでいく&lt;/h2&gt;
&lt;p&gt;今までの話でなんとなく使い方はわかっただろう． ここからは elm/url の実装について読み解いていく． なので，使い方が分かればもう十分勢の人は以降を読む必要はない．&lt;/p&gt;
&lt;h3 id=&#34;余談-参考にしたもの&#34;&gt;余談: 参考にしたもの&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elm/url#related-work&#34;&gt;README曰く&lt;/a&gt;，&lt;code&gt;Url.Parser&lt;/code&gt; の実装の着想は下記の記事によって得たようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrisdone.com/posts/formatting&#34;&gt;Formatting in Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rgrinberg.com/posts/primitive-type-safe-routing/&#34;&gt;Type Safe Routing - Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者は Haskell の &lt;code&gt;printf&lt;/code&gt; のようなフォーマット出力ライブラリで，後者は OCaml のルーティングのライブラリに関する記事．&lt;/p&gt;
&lt;h3 id=&#34;パーサーの型&#34;&gt;パーサーの型&lt;/h3&gt;
&lt;p&gt;まずは型の中身を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; b))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; value &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;  { visited &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;  , unvisited &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  , params &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;  , frag &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;  , value &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; というのは関数型パーサー(パーサーコンビネーター)でよくある型だ(&lt;code&gt;Functional Parser&lt;/code&gt; や &lt;code&gt;Parser Combinator&lt;/code&gt; などで調べると良い)． 入力の状態が &lt;code&gt;State a&lt;/code&gt; で出力の状態が &lt;code&gt;State b&lt;/code&gt;，出力がリストになっているが &lt;code&gt;Maybe&lt;/code&gt; と考えて問題ないはずだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Url.parse&lt;/code&gt; や簡単なパーサーの中身を見てみればそれぞれのフィールドの意味がわかるはずだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;parse &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;parse (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parser) url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  getFirstMatch &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parser &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; [] (preparePath url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;path) (prepareQuery url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;query) url&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fragment identity&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; title=&#34;6&#34;&gt;getFirstMatch &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; title=&#34;7&#34;&gt;getFirstMatch states &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; states &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; title=&#34;9&#34;&gt;    [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    state ::&lt;/span&gt; rest &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;unvisited &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; title=&#34;14&#34;&gt;        [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; title=&#34;15&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; title=&#34;17&#34;&gt;        [&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; title=&#34;18&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; state&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; title=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; title=&#34;20&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; title=&#34;21&#34;&gt;          getFirstMatch rest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt; の定義より，&lt;code&gt;unvisited&lt;/code&gt; と &lt;code&gt;params&lt;/code&gt; と &lt;code&gt;frag&lt;/code&gt; はそれぞれパスとクエリとフラグメントを与えているのがわかる． &lt;code&gt;getFirstMatch&lt;/code&gt; の定義を見ると，最後に &lt;code&gt;Just state.value&lt;/code&gt; をしているので，&lt;code&gt;value&lt;/code&gt; フィールドが最終的な結果となる． では &lt;code&gt;visited&lt;/code&gt; はなんだろうか？ パーサーの実装を見てみる．&lt;/p&gt;
&lt;h3 id=&#34;組み込みのパーサー&#34;&gt;組み込みのパーサー&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;Url.string&lt;/code&gt; を見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;string &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;  custom &lt;span class=&#34;st&#34;&gt;&amp;quot;STRING&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; title=&#34;5&#34;&gt;custom &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; title=&#34;6&#34;&gt;custom tipe stringToSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; unvisited &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; title=&#34;9&#34;&gt;      [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; title=&#34;10&#34;&gt;        []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;      next ::&lt;/span&gt; rest &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-13&#34; title=&#34;13&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; stringToSomething next &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-14&#34; title=&#34;14&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; nextValue &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-15&#34; title=&#34;15&#34;&gt;            [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;next ::&lt;/span&gt; visited) rest params frag (value nextValue) ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-17&#34; title=&#34;17&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-18&#34; title=&#34;18&#34;&gt;            []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;custom&lt;/code&gt; 関数の定義からわかるように，&lt;code&gt;unvisited&lt;/code&gt; を入力にして &lt;code&gt;stringToSomething&lt;/code&gt; というパーサーを咬ませて，その結果を &lt;code&gt;value&lt;/code&gt; に追加し，元の文字列を &lt;code&gt;visited&lt;/code&gt; に追加している． すなわち，&lt;code&gt;visited&lt;/code&gt; はパースできたパスをためている． しかし，elm/url のコードを探しても &lt;code&gt;visited&lt;/code&gt; が使われているところはないので，今の実装では無くても良いフィールドのはずだ(パースエラーをわかりやすくするときに使えそう)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，クエリやフラグメントのパーサーは入力が違う(&lt;code&gt;unvisited&lt;/code&gt; を使うのではない)だけだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; title=&#34;1&#34;&gt;query &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Query.Parser&lt;/span&gt; query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (query &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; title=&#34;2&#34;&gt;query (&lt;span class=&#34;dt&#34;&gt;Q.Parser&lt;/span&gt; queryParser) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; title=&#34;4&#34;&gt;    [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (value (queryParser params))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; title=&#34;5&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-7&#34; title=&#34;7&#34;&gt;fragment &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (fragment &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-8&#34; title=&#34;8&#34;&gt;fragment toFrag &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-10&#34; title=&#34;10&#34;&gt;    [ &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (value (toFrag frag))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-11&#34; title=&#34;11&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;コンビネーター&#34;&gt;コンビネーター&lt;/h3&gt;
&lt;p&gt;ちなみに，コンビネーター(&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt;)の定義も見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;slash &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; title=&#34;2&#34;&gt;slash (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseBefore) (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseAfter) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \state &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; title=&#34;4&#34;&gt;    List.concatMap parseAfter (parseBefore state)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; は &lt;code&gt;slash&lt;/code&gt; のエイリアスになっている． &lt;code&gt;Parser&lt;/code&gt; の型は &lt;code&gt;State a -&amp;gt; [State b]&lt;/code&gt; のラップなので，パーサーの連結は &lt;code&gt;concatMap&lt;/code&gt; をするだけになっている．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;Url.map&lt;/code&gt; も見てみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; subValue (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseArg) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; title=&#34;4&#34;&gt;    List.map (mapState value) &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; title=&#34;7&#34;&gt;mapState &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; title=&#34;8&#34;&gt;mapState func { visited, unvisited, params, frag, value } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag (func value)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; を利用する場合，各型変数は次のようになっていることが多いだろう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- parseArg : State (x -&amp;gt; y) -&amp;gt; List (State y)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- value を identity と考えれば良い&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y) y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z) z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; subValue (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; parseArg) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-6&#34; title=&#34;6&#34;&gt;    List.map (mapState value) &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こう考えれば &lt;code&gt;map&lt;/code&gt; 関数の定義も読めるはずだ．&lt;/p&gt;
&lt;h2 id=&#34;結局&#34;&gt;結局&lt;/h2&gt;
&lt;p&gt;最後に &lt;code&gt;Parser a b&lt;/code&gt; の各型変数は何を意味して，従来の &lt;code&gt;Parser a&lt;/code&gt; 方式のパーサーではなぜダメなのかについて議論する(まぁあくまでも，実際に実装などを読んでの個人的な肌感なんですけど)．&lt;/p&gt;
&lt;h3 id=&#34;型変数の意味&#34;&gt;型変数の意味&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の意味は &lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; からわかるように，パーサーの入力の状態に使われる型 &lt;code&gt;a&lt;/code&gt; と出力の状態に使われる型 &lt;code&gt;b&lt;/code&gt; である． ここで，「使われる」というのが肝で，&lt;code&gt;a&lt;/code&gt; それ自体は入力ではない． 入力にせよ，出力にせよ，パーサーが行うのは状態 &lt;code&gt;State r1&lt;/code&gt; から &lt;code&gt;State r2&lt;/code&gt; への変換だ(ただしそれは失敗するかもしれないので &lt;code&gt;List&lt;/code&gt; でラップされている)． &lt;code&gt;State r&lt;/code&gt; にとって &lt;code&gt;r&lt;/code&gt; は &lt;strong&gt;パースの最終結果&lt;/strong&gt; を意味している(変化する状態の最終結果)．&lt;/p&gt;
&lt;p&gt;なので &lt;code&gt;Parser a b&lt;/code&gt; のパーサーがあった場合，このパーサーの最終結果は &lt;code&gt;b&lt;/code&gt; であり，&lt;code&gt;a&lt;/code&gt; は入力の状態が想定している最終結果である． ただし，&lt;code&gt;Parser (String -&amp;gt; b) b&lt;/code&gt; というパーサーの場合，&lt;code&gt;b&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; でも良く，このパーサーを &lt;code&gt;Url.parse&lt;/code&gt; で実行する場合は &lt;code&gt;b = String&lt;/code&gt; と推論される．&lt;/p&gt;
&lt;h3 id=&#34;parser-a-との違い&#34;&gt;&lt;code&gt;Parser a&lt;/code&gt; との違い&lt;/h3&gt;
&lt;p&gt;大きな違いは &lt;code&gt;map&lt;/code&gt; の振る舞いだ． &lt;code&gt;Parser a&lt;/code&gt; の場合，レコード型 &lt;code&gt;Hoge = { hoge1 : Int, hoge2 : String }&lt;/code&gt; のパーサーを記述するのには次のように書く:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;intParser &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;stringParser &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; map2 &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; intParser stringParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールドの個数が3つ4つと増えるたびに，&lt;code&gt;map3&lt;/code&gt; &lt;code&gt;map4&lt;/code&gt; と作る必要がある． また，parser1 を再利用して &lt;code&gt;Fuga = { hoge1 : Int, hoge2 : String, hoge3 : Int }&lt;/code&gt; 型のパーサーを記述することはできない．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;対して &lt;code&gt;Parser a b&lt;/code&gt; の場合は &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; を用いて &lt;code&gt;intParser&lt;/code&gt; や &lt;code&gt;stringParser&lt;/code&gt; をどんどん連結していき，最終的に &lt;code&gt;map&lt;/code&gt; をする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; title=&#34;2&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; intParser &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; parser0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; title=&#34;7&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; title=&#34;8&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; (parser0 &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; intParser)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すなわち利点は:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;引数ごとの &lt;code&gt;map&lt;/code&gt; がいらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; で繋いだパーサーの再利用性が高い&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;applicative-スタイル&#34;&gt;Applicative スタイル&lt;/h3&gt;
&lt;p&gt;Elm で一般的かどうかはわからないが，Haskell では一般的な Applicative スタイルというのがある． ちなみに elm/url を Applicative スタイルにしたパッケージは GitHub に揚げてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elm-url-applicative&#34;&gt;matsubara0507/elm-url-applicative - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applicative スタイルとは，次のようなコンビネーターを使って関数を構築する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; title=&#34;2&#34;&gt;apply &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，今回の話の流れ上 &lt;code&gt;Parser&lt;/code&gt; を用いたが，ここが &lt;code&gt;Maybe&lt;/code&gt; だろうと &lt;code&gt;List&lt;/code&gt; だろうと同じに扱える． この場合，パーサーの構築は次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; title=&#34;2&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; title=&#34;3&#34;&gt;  apply (apply (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser) stringParser) intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 的にはパイプで連結できるので &lt;code&gt;app&lt;/code&gt; の引数の順番を変えた方がいいかもしれない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; title=&#34;1&#34;&gt;andApply &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-3&#34; title=&#34;3&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-4&#34; title=&#34;4&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一見問題なさそうだ． しかし，今回でいう &lt;code&gt;Url.s : String -&amp;gt; Parser a a&lt;/code&gt; のような入力を消費するだけで結果に反映しないパーサーがあるとうまく行かない． &lt;code&gt;ignore&lt;/code&gt; のようなコンビネーターが必要になる(ちなみに Haskell の Applicative にはもちろんある):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;s &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;ignore &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;parser3 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-5&#34; title=&#34;5&#34;&gt;parser3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; ignore (s &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，再利用の方もうまくいく:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; title=&#34;1&#34;&gt;parser0 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; title=&#34;2&#34;&gt;parser0 f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; f intParser &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; title=&#34;4&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; title=&#34;5&#34;&gt;parser1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser0 &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; title=&#34;7&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; title=&#34;8&#34;&gt;parser2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; parser0 &lt;span class=&#34;dt&#34;&gt;Fuga&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;Parser a b&lt;/code&gt; の場合と同等の能力を持つはずだ． すなわち，&lt;code&gt;Parser a b&lt;/code&gt; と Applicative スタイルは見た目以上の差異はない（はず）．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;Elm には珍しく型がテクニカルなパッケージということで，細かく中を読んでみました． 色々試した結果，Haskell の Applicative スタイルの見た目を変えてるだけのようでした． まだ，エヴァンさんが参考にしたという記事をちゃんと読んでないので，もしかしたら間違っているかも． 時間ができたら読んでみます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html</id><title type="text">Stack 1.9.3 がリリースされました。</title><updated>2018-12-10T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;12月3日に Stack version 1.9.3 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.3/ChangeLog.md#v193&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
...

$ stack --numeric-version
1.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はバグフィックスが3点のみです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack をコンパイルする際に &lt;code&gt;.git&lt;/code&gt; ディレクトリが含まれていない場合、コンパイルに失敗する問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題は &lt;code&gt;Stack&lt;/code&gt; をビルドする人の話なので、普通の人は問題になりませんが、githash を使っている人は自分のアプリケーションでも起こりうる問題なので注意です。&lt;/p&gt;
&lt;p&gt;Stack はバージョン情報に git の情報を含めるために &lt;a href=&#34;https://github.com/acfoltzer/gitrev&#34;&gt;gitrev&lt;/a&gt; を使っていたのですが、現在は開発が止まっているようで &lt;a href=&#34;https://github.com/snoyberg/githash&#34;&gt;githash&lt;/a&gt; に切り替えました。(&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回の問題を修正するために実装された &lt;code&gt;tGitInfoCwdTry&lt;/code&gt; 関数を使うことで &lt;code&gt;.git&lt;/code&gt; ディレクトリが存在しない場合でもコンパイルできるようになります。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364&#34;&gt;1.9.1 fails to build from tarball without .git/ #4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4368&#34;&gt;Compile without a Git dir #4364 #4368&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC が生成する hi-dump ファイルの &lt;code&gt;addDependentFile&lt;/code&gt; 関連のフォーマット変更 (ハッシュを含むようになった) に対応しました。詳細: &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yesod で報告された問題に対する修正です。&lt;code&gt;.hi-dump&lt;/code&gt; フォーマットが変わったので、それに対応しました。shakespeare の問題なので主に Yesod ユーザに影響があるかと思われます。以下のバージョンを利用すればこの問題は解決するため、この現象で悩んでいる人は stack と shakespeare の両方を更新しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack &amp;gt;= 1.9.3&lt;/li&gt;
&lt;li&gt;shakespeare &amp;gt;= 2.0.19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stack は GHC が出力する &lt;code&gt;hi&lt;/code&gt; ファイルの情報を内部で利用しているため、このようなことが起きます。(ビルド時にデフォルトで &lt;code&gt;-ddump-hi -ddump-to-file&lt;/code&gt; オプションが追加されています)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ddump-to-file&lt;/code&gt; が自動的に追加されてしまうせいで &lt;code&gt;-ddump-splices&lt;/code&gt; の結果を表示しようとしてもコンソールに出力されなかったりして不便だったので出力先のディレクトリを指定できるようにしました。たぶん次のメジャーリリースで使えるようになると思います。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;Unable to detect file changes on hamlet templates on stack devel for lts-12.5 #1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4369&#34;&gt;Support GHC 8.4 in addDependentFile for 1.9.3 #4369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4360&#34;&gt;qAddDependentFile doesn’t cause re-compilation without extra-source-files #4360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/aae15e3&#34;&gt;commit@aae15e3ae5767febe9fcad36bf5a5e184c635de1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4225&#34;&gt;Can’t display -ddump-splices result. #4225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4242&#34;&gt;Add the ddump-dir option/config value #4225 #4242&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートファイルのファイル名に変数が利用できるようになりました&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じで使えます。&lt;/p&gt;
&lt;pre class=&#34;mastache&#34;&gt;&lt;code&gt;{-# START_FILE {{name}}.cabal #-}
name: {{name}}
version: 0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4397&#34;&gt;Expand mustache variables in template file names #4397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4381&#34;&gt;Allow variables in filenames in templates #4381&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack can now be compiled again inside a directory that does not contain a &lt;code&gt;.git&lt;/code&gt; directory, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle a change in GHC’s hi-dump format around &lt;code&gt;addDependentFile&lt;/code&gt;, which now includes a hash. See &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow variables to appear in template file names.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html</id><title type="text">Dhall を試して物足りない部分を補うツールを自作した</title><updated>2018-12-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Dhall を試して物足りない部分を補うツールを自作した&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-05&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 5, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/Dhall.html&#34;&gt;Dhall&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本稿は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell&#34;&gt;Haskell Advent Calendar 2018&lt;/a&gt; 5日目の記事です．&lt;/p&gt;
&lt;p&gt;Haskell Day 2018 の発表をきっかけに，兼ねてから気になっていた Dhall を試した． いくつかツールが欲しくなったので作りましたっていう話です．&lt;/p&gt;
&lt;p&gt;作ったものはこれ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/yaml-to-dhall&#34;&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex&#34;&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，今回作ったツールは現状の stack の stable resolver にある v1.5.1 を利用している．&lt;/p&gt;
&lt;h2 id=&#34;dhall&#34;&gt;Dhall&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;Dhall&lt;/a&gt; は静的型付けされた設定記述言語である． 多くの場合，プログラミング言語やアプリケーションに使われる設定ファイルには JSON や YAML が利用されている． プログラミング言語のビルドシステムのような設定ファイル一つ程度なら問題ないが，Kubernetes や Ansible のような膨大な設定ファイルが依存しあう場合，静的型付けプログラミング言語のようにコンパイルによる型検査を導入したくなるだろう． Dhall はそのための言語であり，また便利な関数が用意されているため，非常に再利用性の高い設定ファイルを記述できる．&lt;/p&gt;
&lt;h3 id=&#34;例&#34;&gt;例:&lt;/h3&gt;
&lt;p&gt;Dhall は静的片付け言語なので，まずは型を定義しよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ocaml&#34;&gt;&lt;code class=&#34;sourceCode ocaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;$ cat ./User.dhall&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;{ homeDirectory : Text, privateKeyFile : Text, publicKeyFile : Text }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このユーザ型の値はユーザ名から一意に生成されることは容易に想像できるだろう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode ocaml&#34;&gt;&lt;code class=&#34;sourceCode ocaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;$ cat ./makeUser.dhall&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  \(user_name : Text)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;-&amp;gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; homeDirectory = &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/${user_name}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; privateKeyFile = &lt;span class=&#34;st&#34;&gt;&amp;quot;${homeDirectory}/id_rsa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; publicKeyFile = &lt;span class=&#34;st&#34;&gt;&amp;quot;${privateKeyFile}.pub&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;    { homeDirectory =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;            homeDirectory&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;        , privateKeyFile =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;            privateKeyFile&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;        , publicKeyFile =&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;            publicKeyFile&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      : ./User.dhall&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;./makeUser.dhall&lt;/code&gt; は任意の文字列を与えると，それをユーザ名として &lt;code&gt;./User.dhall&lt;/code&gt; 型の値を生成してくれる． さらに，高階関数を使って複数のユーザに対し一気に適用してみよう．&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;$ cat ./users.dhall
let User = ./User.dhall

in  let map =
      https://raw.githubusercontent.com/dhall-lang/dhall-lang/0a7f596d03b3ea760a96a8e03935f4baa64274e1/Prelude/List/map

in  map Text User ./makeUser.dhall [ &amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;curry&amp;quot; ] : List User&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; には &lt;a href=&#34;https://github.com/dhall-lang/dhall-lang/blob/master/Prelude/List/map&#34;&gt;dhall のリポジトリにある標準パッケージの関数&lt;/a&gt;を直接インポートしている． &lt;code&gt;map&lt;/code&gt; の型は &lt;code&gt;∀(a : Type) → ∀(b : Type) → (a → b) → List a → List b&lt;/code&gt; となっている． 基本的に Dhall で多相な高階関数を利用するときは，引数から直接型を与えてあげる必要がある．&lt;/p&gt;
&lt;p&gt;さて，これを dhall でビルドすると次のような結果を得る:&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;$ dhall &amp;lt;&amp;lt;&amp;lt; ./users.dhall
[ { homeDirectory =
      &amp;quot;/home/alice&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/alice/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/alice/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/bob&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/bob/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/bob/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/curry&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/curry/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/curry/id_rsa.pub&amp;quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは次のようなYAMLに対応し，&lt;code&gt;dhall-to-yaml&lt;/code&gt; などのツールで変換可能だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/alice&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/bob&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;privateKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;publicKeyFile:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;homeDirectory:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /home/curry&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;また，ざっくりとしたイメージを得るには、先日あった &lt;a href=&#34;https://wiki.haskell.jp/Workshop/HaskellDay/2018&#34;&gt;Haskell Day 2018&lt;/a&gt; での&lt;a href=&#34;https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri&#34;&gt;発表資料&lt;/a&gt;がわかりやすくてオススメ．&lt;/p&gt;
&lt;h3 id=&#34;使ってみて思うところ&#34;&gt;使ってみて思うところ&lt;/h3&gt;
&lt;p&gt;もしかしたら最新のバージョンであれば改善しているものもあるかもしれない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的な高階関数があり便利
&lt;ul&gt;
&lt;li&gt;map,fold,filter など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;普通のプログラミングのように式を再利用できる&lt;/li&gt;
&lt;li&gt;型推論がザコい
&lt;ul&gt;
&lt;li&gt;パラメトリック多相を挟むとダメみたいですね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結構ビルドエラーがエスパー
&lt;ul&gt;
&lt;li&gt;慣れの問題か？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YAML のいわゆる連想配列への変換ができない&lt;/li&gt;
&lt;li&gt;日本語が化ける ;;
&lt;ul&gt;
&lt;li&gt;まぁ原因はわかるので最新でも治ってなかったらPRしてみるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;何に導入したか&#34;&gt;何に導入したか&lt;/h2&gt;
&lt;p&gt;弊社が企画してる学生向けの競技型イベントに関するシステムの設定ファイルを Dhall に置き換えてみた． そのシステムは，インフラ・スコアボード・デプロイツールの3つのリポジトリに別れており，ところどころ重複した設定が3つのリポジトリに存在する． そこで，設定用のリポジトリを作って，そこに Dhall で記述した設定を置き，そこから各リポジトリに設定を撒くような仕組みを考えることにした．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-dhall-ex/system-with-dhall.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;別に Dhall にしたからといって劇的に何かがよくなるわけでは無いのだが，ちょうど良いサンドボックスがあったのでイロイロと試してみる，というのが本音です（笑）&lt;/p&gt;
&lt;h2 id=&#34;yaml-to-dhall&#34;&gt;yaml-to-dhall&lt;/h2&gt;
&lt;p&gt;最初の方はせっせと手作業で変換していたが，何個かやって変換の仕方の勘所がわかって来た． そうなると後は作業でしか無いので，なんとかして大量にある設定ファイルを一括変換したい．&lt;/p&gt;
&lt;p&gt;調べた限り，YAML から Dhall に変換するプログラムは無さそう(逆はもちろんあるけど)． なのですっごい雑なものを作った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/yaml-to-dhall&#34;&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは極めて単純なことしかできない． 数値は全て Float に変換されるし，Optional や空リストの書き方が間違っている． とりあえず変換して，手元のエディタで置換すればいいかなと思ったので雑なままである．&lt;/p&gt;
&lt;p&gt;時間ができたらそのうち直すかも．&lt;/p&gt;
&lt;h2 id=&#34;dhall-ex&#34;&gt;dhall-ex&lt;/h2&gt;
&lt;p&gt;前述した通り，一組の設定ファイル群から複数のリポジトリの設定ファイルを生成したかったのでその仕組みを作った． dhall-ex は次のような設定ファイルを記述する:&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;{ GH_TOKEN =
      [ &amp;quot;matsubara0507:XXXX&amp;quot; ] : Optional Text
  , root =
      &amp;quot;configs&amp;quot;
  , exports =
      [ { name =
            &amp;quot;deploy-tool&amp;quot;
        , repo =
            [ &amp;quot;git-challenge/deploy-tool&amp;quot; ] : Optional Text
        , paths =
            [ &amp;quot;settings/orgs/orgs.yml&amp;quot;
            , &amp;quot;settings/orgs/review.yml&amp;quot;
            ...
            ]
        }
      ...
      ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別にどっちでもよかったのだが，せっかくなので dhall-ex の設定ファイルも Dhall で記述するようにした． なので，具体例より&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex/blob/master/dhall/dhall-ex-type.dhall&#34;&gt;型&lt;/a&gt;を見た方が早いだろう．&lt;/p&gt;
&lt;pre class=&#34;dhall&#34;&gt;&lt;code&gt;let Export = { name : Text, repo : Optional Text, paths : List Text }
in  { GH_TOKEN : Optional Text, root : Text, exports : List Export }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt; は設定ファイル群を置くパスで，&lt;code&gt;exports&lt;/code&gt; が設定ファイル群の更新先のリポジトリなどの情報だ． &lt;code&gt;repo&lt;/code&gt; で GitHub リポジトリを指定し，&lt;code&gt;paths&lt;/code&gt; で関連する設定ファイルを列挙する． 例の場合 &lt;code&gt;./config/settings/orgs/orgs.yml.dhall&lt;/code&gt; を &lt;code&gt;./.dhall-ex/git-challenge/deploy-tool/settings/orgs/orgs.yml&lt;/code&gt; に dhall でビルドする．&lt;/p&gt;
&lt;p&gt;ちなみに Dhall のバージョンが古いので &lt;code&gt;Optional&lt;/code&gt; がリストのリテラルを利用しているが，最新の Dhall には &lt;code&gt;Some&lt;/code&gt; と &lt;code&gt;None&lt;/code&gt; があるはず．&lt;/p&gt;
&lt;h3 id=&#34;機能&#34;&gt;機能&lt;/h3&gt;
&lt;p&gt;現状はこんな感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dhall-ex --help
dhall-ex - cli tool to support dhall

Usage: dhall-ex [-v|--verbose] [-c|--config PATH] [--only NAME] COMMAND
                [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &amp;quot;debug&amp;quot;
  -c,--config PATH         Configuration file
  --only NAME              Exec subcommand only NAME in config
  --version                Show version
  -h,--help                Show this help text

Available commands:
  sort                     Sort record keys in dhall file
  echo                     Echo TEXT
  init                     Init dhall-ex work directory
  build                    Build Dhall file to YAML or JSON
  deploy                   Deploy builded config file to remote repository
  checkout                 Checkout repository in dhall workspace
  pull                     Pull repository in dhall workspace&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; は設定が正しく読み取れるかどうかにだけ使う雑機能． &lt;code&gt;sort&lt;/code&gt; レコードのフィールドの順番を型に合わせて並び替えてくれるコマンドだ． 前述した &lt;code&gt;yaml-to-dhall&lt;/code&gt; などを使った後に使った(並び変える必要はないんだけど，なんか読みやすいように)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; でリポジトリなどの初期化をし，&lt;code&gt;build&lt;/code&gt; で設定ファイルを変換し，&lt;code&gt;deploy&lt;/code&gt; でコミットとプッシュを行ってくれる． &lt;code&gt;checkout&lt;/code&gt; や &lt;code&gt;pull&lt;/code&gt; はただの git コマンドのラッパーだ．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;--only deploy-tool&lt;/code&gt; などとすることでコマンドの実行を特定のリポジトリに限定できる．&lt;/p&gt;
&lt;h3 id=&#34;実装&#34;&gt;実装&lt;/h3&gt;
&lt;p&gt;実は内部実装はそこまで難しいことをしていない． Dhall のファイルを読み込み，ビルドし，それを dhall-ex の設定ファイルに則って出力するだけだ． &lt;code&gt;build&lt;/code&gt; 以外のコマンドは &lt;a href=&#34;http://hackage.haskell.org/package/shelly&#34;&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; を使ってシェルスクリプトもどきを実行している．&lt;/p&gt;
&lt;h3 id=&#34;todo&#34;&gt;ToDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;例外処理が雑なのを直す
&lt;ul&gt;
&lt;li&gt;だいたいこの部分が残る（笑）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;任意のコマンドを各リポジトリのワークスペースで実行できるようにする
&lt;ul&gt;
&lt;li&gt;なんか &lt;code&gt;git status&lt;/code&gt; とか &lt;code&gt;git branch&lt;/code&gt; とかしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;並行処理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;随分雑な記事になってしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html</id><title type="text">Stack の Docker Integration とイメージの自動更新</title><updated>2018-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Stack の Docker Integration とイメージの自動更新&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-12-02&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 2, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/Docker.html&#34;&gt;Docker&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本稿は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; 2日目の記事です．&lt;/p&gt;
&lt;p&gt;最近よく CLI ツールを作るんですが，Haskell Stack を持ってなくても CLI ツールが使えるように，ツールを Docker イメージ化するようにしています． その流れを書き留めておこうというの本稿の趣旨です．&lt;/p&gt;
&lt;p&gt;ちなみに，以下のリポジトリで実際に試しています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/mdium&#34;&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/dhall-ex&#34;&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-integration&#34;&gt;Docker Integration&lt;/h2&gt;
&lt;p&gt;Haskell のビルドツール Stack には Dcoker Integration という機能がある（現在最新の安定版である v1.9.1 を想定しています）．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/v1.9.1/docker_integration/&#34;&gt;Docker integration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/v1.9.1/yaml_configuration/#image&#34;&gt;Image - Yaml configuration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker Integration として，ざっくりと次のような機能がある．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;指定したイメージのコンテナでビルド・実行をする&lt;/li&gt;
&lt;li&gt;ビルドした実行ファイルを含めた Docker イメージの作成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2 は正確には Docker Integration とは呼ばない)&lt;/p&gt;
&lt;p&gt;ちなみに，Stack はワークスペース内の &lt;code&gt;.stack-work&lt;/code&gt; の中に中間結果などを含むビルド結果をバージョンやビルド環境ごとに保存する． そして，&lt;code&gt;--docker&lt;/code&gt; オプションでビルドすることで，ローカルではなく Docker のコンテナ内でビルドをしたり，生成したプログラムを実行したりできる． しかも，コンテナ内でビルドした場合でもビルド結果をローカルの &lt;code&gt;.stack-work&lt;/code&gt; に保存するのだ．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージ内でビルド&#34;&gt;Docker イメージ内でビルド&lt;/h2&gt;
&lt;p&gt;まず stack.yaml に次のような設定を追加する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;fpco/stack-build&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enable: true&lt;/code&gt; にすると，以降の &lt;code&gt;--docker&lt;/code&gt; オプションを省けるが，逆に普通にローカルでビルドしたい場合は &lt;code&gt;--no-docker&lt;/code&gt; オプションが必要になる． &lt;code&gt;repo&lt;/code&gt; でビルドするイメージを指定する． [&lt;code&gt;fpco/stack-build&lt;/code&gt; はこれだ]（https://hub.docker.com/r/fpco/stack-build/）． stack.yaml の &lt;code&gt;resolver&lt;/code&gt; からイメージタグを自動的に選んでくれるはずだ．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでビルドできる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack docker pull

# docker コンテナ内でビルド
$ stack build --docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他にも細かい設定がかけるが割愛（上述したドキュメントを参照してください）．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;stack.yaml に次の設定を追加する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;image.container.name&lt;/code&gt; は生成する Docker イメージの名前で，&lt;code&gt;image.container.base&lt;/code&gt; は生成する Docker イメージに使うベースイメージだ． ベースイメージは &lt;code&gt;docker.repo&lt;/code&gt; などで指定したイメージのOSとあってさえいれば良い（ちなみに &lt;code&gt;fpco/stack-build&lt;/code&gt; は &lt;code&gt;ubuntu:16.04&lt;/code&gt;）． やってくれることは簡単で， &lt;code&gt;stack build --docker&lt;/code&gt; で作成した実行ファイルをベースイメージの &lt;code&gt;local/bin&lt;/code&gt; などにコピーするだけだ． なので，もし静的リンクしていない場合はリンクが含まれるベースイメージを指定すると良い(&lt;a href=&#34;https://hub.docker.com/r/fpco/ubuntu-with-libgmp/&#34;&gt;&lt;code&gt;fpco/ubuntu-with-libgmp&lt;/code&gt;&lt;/a&gt; はそのために使っている)．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでイメージの作成ができる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--docker&lt;/code&gt; を指定しないとローカルでビルドした実行ファイルをコピーして，生成したイメージのコンテナで実行できなくなるので注意してください（もちろんローカルが ubuntu なら問題ないけど）． あと， stack によるイメージ作成方法では他に Dockerfile の &lt;code&gt;add&lt;/code&gt; っぽいことと &lt;code&gt;entrypoints&lt;/code&gt; っぽいことができるが，それ以上のことはできない． もっと複雑な設定をしたい場合は，生成したイメージをベースイメージにした Dockerfile を書いたり， Docker のマルチステージビルドを使って設定を上書きしたりするとと良いだろう．&lt;/p&gt;
&lt;h2 id=&#34;travisci-docker-hub&#34;&gt;TravisCI + Docker Hub&lt;/h2&gt;
&lt;p&gt;Docker Integration の欠点は Docker Hub の Automated build が使えない点だ． そこで，TravisCI を使って自動ビルドし，Docker Hub にプッシュするようにした． 次のような設定を travis.yml に書くと良いだろう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker push $TRAVIS_REPO_SLUG&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;stack --docker image container&lt;/code&gt; でビルドまでしてくれる． Docker Hub には Token のようなものはないので &lt;code&gt;--password-stdin&lt;/code&gt; とパイプを使って普通のパスワードでログインする． あとは &lt;code&gt;image.container.name&lt;/code&gt; で指定する名前を &lt;code&gt;hoge&lt;/code&gt; ではなく &lt;code&gt;user_name/repo_name&lt;/code&gt; としておけば良い． もちろんこれは GitHub と Docker Hub のユーザ名が同じ場合にしか使えない． 違う場合は直接書いてね．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;この方法なら実行ファイルしか入ってないイメージが出来上がるので軽いし， stack のビルド遅すぎて利用者側は厳しい問題も緩和するので最近のマイブームです．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120502/1335973255</id><title type="text">AtCoder Regular Contest #2</title><updated>2018-11-29T19:16:22+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120502/1335973255"/><summary type="html">AtCoder Regular Contest #2 参加したおーい。 成績は気にするなおーい。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120709/1341769539</id><title type="text">関数合成をいろんな言語で書いてみた。</title><updated>2018-11-29T19:16:05+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120709/1341769539"/><summary type="html">友人に Java で関数合成するプログラムを作れって課題の相談をされて一緒に考えた。で、せっかくだから勉強も兼ねていろんな言語で書いてみた。Java 以外はほとんど書いたことのない言語。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120725/1343186129</id><title type="text">すごい H 本7.10章の「読者への練習問題」</title><updated>2018-11-29T19:15:57+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120725/1343186129"/><summary type="html">大学の教科書とかでよくある「読者への練習問題としましょう」ってやつですよ。考査前、知りたいことが「読者への練習問題」で泣くやつですよ。 今回は API 調べて分かればそんなに難しくなかった。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20120822/1345602358</id><title type="text">Reader モナド（関数モナド）</title><updated>2018-11-29T19:15:37+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20120822/1345602358"/><summary type="html">すごい Haskell たのしく学ぼう！の14.2章331ページの関数モナドを do 記法で書いてあるコード、どういう動作になるかは解説されてあるので分かるのだけどなんでそうなるのかが分からないので書き下してみる。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html</id><title type="text">Haskell Day 2018 に参加してきた</title><updated>2018-11-17T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell Day 2018 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-17&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 17, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;11月10日にあった「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;Haskell Day 2018&lt;/a&gt;」に参加してきたのでメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;午前中-ハンズオン&#34;&gt;午前中 : ハンズオン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/igrep&#34;&gt;igrep&lt;/a&gt; 氏が中心になって作成した &lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;code&gt;makeMistakesToLearnHaskell&lt;/code&gt;&lt;/a&gt; を使ったハンズオン． ぼくも少しだけコミットした．&lt;/p&gt;
&lt;p&gt;当日の様子は，みなさんかなり黙々と作業してて静かだったが，Twitter 上で質問している人がチラチラいた． それらの Twitter の様子などをみてリアルタイムに修正を行なっていたのはすごい．&lt;/p&gt;
&lt;h2 id=&#34;午後&#34;&gt;午後&lt;/h2&gt;
&lt;p&gt;そのうちログミーが公開されるそうなので，概要と感想だけ．&lt;/p&gt;
&lt;h3 id=&#34;haskellを導入した話hrrの話&#34;&gt;Haskellを導入した話/HRRの話&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;10年近く職業 Haskeller をやっていた &lt;a href=&#34;https://github.com/khibino&#34;&gt;khibino&lt;/a&gt; 氏が，当時 Haskell を導入するに至った話と，彼が作った &lt;a href=&#34;https://hackage.haskell.org/package/relational-record&#34;&gt;HRR&lt;/a&gt; というライブラリの紹介 Perl に変わるグルー言語を求めて Haskell に行き着いたそうだ． 「GHC6.8 ですよ，GHC8.6 じゃなく，すごく無いですか？」すごい． HRRは面白そうだけど，使うタイミングがないや．&lt;/p&gt;
&lt;h3 id=&#34;servantで実現する高速かつ安全なapi&#34;&gt;Servantで実現する高速かつ安全なAPI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/daishi/servantdexing-uan-quan-katugao-su-naapikai-fa&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;同様に職業 Haskeller の &lt;a href=&#34;https://github.com/nakaji-dayo&#34;&gt;nakaji&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://haskell-servant.github.io/&#34;&gt;Servant&lt;/a&gt; という型レベルに RSETful API を定義できるパッケージを実際にどのように使っているかという話． Servant は僕もよく使う． 「実際に依存してるパッケージの紹介」や「実運用する上で困ったこと」などもあって興味深い．&lt;/p&gt;
&lt;h3 id=&#34;並列並行言語haskell&#34;&gt;並列並行言語Haskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/bing-lie-bing-xing-yan-yu-haskell&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;次のも含めて2本連続で &lt;a href=&#34;https://github.com/syocy&#34;&gt;syocy&lt;/a&gt; 氏の発表． Haskell における並行・並列プログラミングについての紹介． 並行・並列プログラミングとして最近は Go・Elixir/Erlang・Rust などが注目されているが，Haskell は20年近く前から並行・並列に対して意識してる． おまけとして，ツールの話や並行並列系パッケージの話があって勉強になる． 余談として「&lt;a href=&#34;https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html&#34;&gt;A Tour of Go in Haskell&lt;/a&gt;」というのを作ったが，英語版も作ったところめっさ PR が来たという話をしてくれた． やっぱ分母の大きい自然言語は強い．&lt;/p&gt;
&lt;h3 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;Dhall: Haskellの新たなキラーアプリ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;個人的に今回一番面白かった． &lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;Dhall&lt;/a&gt; というアプリケーションの紹介． Dhall は設定ファイルを記述するための DSL である． 設定ファイルの多くは YAML や JSON などで書かれるが，複数の YAML が複雑な依存関係を持っている場合(k8sとか)は静的解析したいよね？ しかし逆に「設定ファイルとしての領分」を守って欲しいという要求もある(汎用プログラミング言語としての役割はいらない)． そこで Dhall です！って感じの発表だった． 最後の導入事例として，自社の設定ファイル群を書き換えた話も面白かった．&lt;/p&gt;
&lt;h3 id=&#34;semigroupとはmonoidとは環とは&#34;&gt;Semigroupとは？Monoidとは？環とは？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aiya000&#34;&gt;aiya&lt;/a&gt; 氏の発表． 群や環などの代数的構造についての話． ステップバイステップに要件が増えていくのでわかりやすい説明だった．&lt;/p&gt;
&lt;p&gt;ちなみに個人的な肌感として，このような数学的な素養がないと Haskell プログラミングができないかというと，そうでもないと思う． 僕自身は教養としてそのあたりを知ってはいるので微妙なところだが，普段 Haskell プログラミングしてる時に意識してはいないはず． ただ，いくつかの言語機能やライブラリは数学や論理学など学術的なバックグランドを持ってることがある． そのような場合は「なぜこのような仕様なのか」「どうしてこのような仕組みでうまくいくかのか」などは，学術論文にしか書いてないことが多い． そのため，そういう機能やライブラリの仕組みを &lt;strong&gt;ちゃんと&lt;/strong&gt; 追おうとする場合は数学的素養がないと厳しいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;haskellで作るcli&#34;&gt;Haskellで作るCLI&lt;/h3&gt;
&lt;p&gt;僕の発表．後述します．&lt;/p&gt;
&lt;h3 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;gloss: 動かして遊んで学ぶHaskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lotz84&#34;&gt;lotz&lt;/a&gt; 氏の発表． Haskell を勉強したあと何するかシリーズ，GUI 編． 作りたいものがはっきりないときは &lt;a href=&#34;http://hackage.haskell.org/package/gloss&#34;&gt;gloss&lt;/a&gt; で振り子やライフゲームを作って遊んでみよう，という感じ． 僕自身はあんまり GUI に関心がないけど，実際に作りたいものがない場合はこういうので色々出力して手をうごしてみるのは正しい． 時間あるときになんか変なことできないか調べてみようかな．&lt;/p&gt;
&lt;h3 id=&#34;liszt-あるいは永続データ構造を真に永続させる方法&#34;&gt;Liszt あるいは永続データ構造を真に永続させる方法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;僕が愛用している extensible というライブラリの作者，&lt;a href=&#34;https://github.com/fumieval&#34;&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://github.com/fumieval/liszt&#34;&gt;liszt&lt;/a&gt; を作り始めていたことは知っていたので気になっていた． Liszt は Kafka のような大量のデータを収集・配信するためのプログラムだそうだ(名前も &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・カフカ&#34;&gt;Franz Kafka&lt;/a&gt; に対抗して &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・リスト&#34;&gt;Franz Liszt&lt;/a&gt; らしい)． 内部のデータ構造として Skew binary random access list を要素としてもつ 2-3 木 を用いている． このあたりの詳しい話は「&lt;a href=&#34;https://asciidwango.jp/post/160831986220/純粋関数型データ構造&#34;&gt;純粋関数型データ構造&lt;/a&gt;」を読むと良いとのこと(本の名前が上がった瞬間「ですよね〜」となってたw)．&lt;/p&gt;
&lt;h2 id=&#34;自分の話&#34;&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Haskell で CLI を作るうえでの小話をした。 スライドはこれ． &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;実はどれも，既に記事におこしたことのあるネタだった．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;コマンドライン引数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs&lt;/code&gt;・&lt;code&gt;GetOpt&lt;/code&gt;・&lt;code&gt;optparse-applicative&lt;/code&gt; について紹介&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optparse-applicative&lt;/code&gt; + &lt;code&gt;extensible&lt;/code&gt; でサブコマンドも網羅性をチェック&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-05-10-make-cli-with-haskell-in-2018&#34;&gt;オレ的 Haskell で CLI を作る方法 2018&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Alt. Prelude
&lt;ul&gt;
&lt;li&gt;Prelude 微妙だなって思ったら Alt. Prelude なパッケージを使ってみようという話&lt;/li&gt;
&lt;li&gt;具体的には愛用している RIO を紹介した&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-04-13-try-rio-1&#34;&gt;rio ライブラリを試す その１&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stack Template
&lt;ul&gt;
&lt;li&gt;よく使う依存パッケージやアプリのインターフェースの書き方がパターン化してきたら Stack Template 化しようという話&lt;/li&gt;
&lt;li&gt;Stack 1.9 から GitHub にあるテンプレートを参照できるようになった&lt;/li&gt;
&lt;li&gt;GitHub にあるテンプレートを出力する stack-tpls コマンドの紹介&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-10-14-collect-stack-templates&#34;&gt;stack-templates を集める with GraphQL&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haskell を知ってる人にとってはあんまり面白くない話題だったかもしれないが，まぁまぁ(発言が)ウケていたのでよかった(?)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;初心者がわかりやすく，玄人にもウケるネタってなんだろうね． 来年もやるかもしれないから考えておこう．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html</id><title type="text">CamelCase の split</title><updated>2018-11-16T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Twitter で &lt;code&gt;CamelCase&lt;/code&gt; の文字列を &lt;code&gt;Camel Case&lt;/code&gt; にするという話を見かけたので、やってみました。&lt;/p&gt;
&lt;p&gt;文字列に含まれる文字は &lt;code&gt;[&#39;a&#39;..&#39;z&#39;] ++ [&#39;A&#39;..&#39;Z&#39;]&lt;/code&gt; を想定しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記: 寄せられたご意見について追記しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;split&#34;&gt;split&lt;/h2&gt;
&lt;p&gt;分割するということなので &lt;a href=&#34;https://www.stackage.org/package/split&#34;&gt;split&lt;/a&gt; パッケージを使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt; (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;splitCC  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; splitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fold&#34;&gt;fold&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; パッケージを使った実装は直感的でコードもコンパクトです。&lt;/p&gt;
&lt;p&gt;しかし、見た感じ効率悪そうですよね。(リスト全体を分割した後で &lt;code&gt;unwords&lt;/code&gt; かけるため)&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;fold&lt;/code&gt; バージョンも実装してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (isUpper, isSpace)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; foldSplitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quickcheck&#34;&gt;QuickCheck&lt;/h2&gt;
&lt;p&gt;念の為 &lt;a href=&#34;https://www.stackage.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; を使ってランダムテストを行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; quickCheck prop_split&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;prop_split ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;prop_split xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; splitCC xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getString xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
splitcc-0.1.0.0: test (suite: splitcc-test)

+++ OK, passed 100 tests.

splitcc-0.1.0.0: Test suite splitcc-test passed&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;
&lt;p&gt;次は &lt;a href=&#34;https://github.com/vincenthz/hs-gauge&#34;&gt;gauge&lt;/a&gt; を使ってどっちが速いか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main.Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultConfig { displayMode &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Condensed&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;  sampleData1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;  sampleData2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;  sampleData3 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;100000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;  sampleData4 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  defaultMainWith conf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;    [ bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;splitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;                       ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;    , bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;foldSplitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                           ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;charGen ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;charGen &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack bench
Benchmark splitcc-bench: RUNNING...
splitCC/10                               mean 2.847 μs  ( +- 261.0 ns  )
splitCC/1000                             mean 287.2 μs  ( +- 3.935 μs  )
splitCC/100000                           mean 29.10 ms  ( +- 1.348 ms  )
splitCC/1000000                          mean 287.3 ms  ( +- 735.0 μs  )

foldSplitCC/10                           mean 219.3 ns  ( +- 2.955 ns  )
foldSplitCC/1000                         mean 25.65 μs  ( +- 246.5 ns  )
foldSplitCC/100000                       mean 2.640 ms  ( +- 22.98 μs  )
foldSplitCC/1000000                      mean 27.43 ms  ( +- 1.795 ms  )
Benchmark splitcc-bench: FINISH&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;autobench&#34;&gt;AutoBench&lt;/h2&gt;
&lt;p&gt;最後に &lt;a href=&#34;https://github.com/mathandley/AutoBench&#34;&gt;AutoBench&lt;/a&gt; を使って視覚的に実行時間の変化を確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveGeneric #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Input&lt;/span&gt; (ts, splitCC, foldSplitCC) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;          (isSpace, isUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt;    (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Generics&lt;/span&gt;    (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.DeepSeq&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Default&lt;/span&gt;         (def)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.Types&lt;/span&gt;      (&lt;span class=&#34;dt&#34;&gt;DataOpts&lt;/span&gt;(..), &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.QuickCheck&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;splitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; title=&#34;20&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go [] &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; title=&#34;22&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; title=&#34;24&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; title=&#34;25&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ts ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-31&#34; title=&#34;31&#34;&gt;ts  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; def { _dataOpts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;200000&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;NFData&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-37&#34; title=&#34;37&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;AutoBench を利用する際、デフォルトの設定では、入力の型は &lt;code&gt;NFData&lt;/code&gt; 型クラスのインスタンスになっている必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AutoBench の結果&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/AutoBenched.png&#34; alt=&#34;AutoBench の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応ターミナルにもこんな感じで詳細な結果も出力してくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;     • Executed benchmarking file ✔
     • Generating test report ✔
     • Analysing performance results...

 ―― Test summary ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  Programs       foldSplitCC, splitCC
  Data           Random, size range [0,10000..200000]
  Normalisation  nf
  QuickCheck     ✔
  GHC flags      n/a

 ―― Analysis ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  foldSplitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   0.179   1.225   1.978   2.112   6.172   4.232   1.248
                  0.217   5.961   5.184   2.715   5.186   2.690   6.810   4.810
                  7.073   7.760   5.122   8.280   18.66
    Std dev (ms)  1.742
    Average variance introduced by outliers: 83% (severely inflated)

    Fits          y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
                  y = 3.45e-13 + 4.71e-8x
                  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  splitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   1.080   9.397   13.53   6.133   39.55   29.14   9.504
                  1.596   44.46   38.58   16.35   35.41   17.94   38.40   52.06
                  59.35   62.88   40.68   58.27   105.0
    Std dev (ms)  10.54
    Average variance introduced by outliers: 62% (severely inflated)

    Fits          y = 2.41e-12 + 3.29e-7x
                  y = 8.06e-15 + 1.92e-8xlog₂(x)
                  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  Optimisation:

    splitCC ≥ foldSplitCC (1.00)

 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; ということなので &lt;code&gt;foldSplitCC&lt;/code&gt; の方が良い結果となりました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リストを何度も走査すると遅くなるので、fold で書くと良いよ！&lt;/li&gt;
&lt;li&gt;関数の振る舞いが変化していないか確認するために QuickCheck を使おう！&lt;/li&gt;
&lt;li&gt;ベンチマークの実行はとても簡単なので積極的にやってみよう！&lt;/li&gt;
&lt;li&gt;AutoBench を使って可視化すると楽しいよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄せられたご意見&#34;&gt;寄せられたご意見&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;問題設定として &lt;code&gt;convertRGB&lt;/code&gt; は &lt;code&gt;convert R G B&lt;/code&gt; でいいの？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直感的に良くないですが、全然考えてなかったので今回は良いことにしておきたいと思います・・・。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;グラフの隅に、“splitCCは線形でfoldsplitCCは2次”とか書いてあって本当にそうだと巨大な列で結果が逆転してしまうんだけどそれは間違いだよね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは (たぶん) グラフをプロットする際の値の選択が良くなかったため、間違った計算量が推論されてしまっています。&lt;/p&gt;
&lt;p&gt;具体的にはこのような表示があり、ここから選ぶことになるのですが全然わからないので &lt;code&gt;1&lt;/code&gt; を選択した結果、今回の図のようになりました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
    2)  y = 3.45e-13 + 4.71e-8x
    3)  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.41e-12 + 3.29e-7x
    2)  y = 8.06e-15 + 1.92e-8xlog₂(x)
    3)  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のように正しく選ぶと&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 2.80e-13 + 3.83e-8x
    2)  y = 9.34e-16 + 2.22e-9xlog₂(x)
    3)  y = -7.13e-3 + 1.34e-6log₂(x) + 4.22e-5log₂²(x)

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.15e-12 + 2.94e-7x
    2)  y = 7.18e-15 + 1.71e-8xlog₂(x)
    3)  y = 6.99e-23 + 2.79e-16x + 1.76e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、正しい計算量になります。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/true-result.png&#34; alt=&#34;AutoBench の真の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の真の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MyString を定義するのが面倒な場合は以下のようにすると良いよ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;prop_split &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  xs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; splitCC xs &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; っていうのはどういう意味&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitCC ≥ foldSplitCC&lt;/code&gt; の部分は &lt;code&gt;splitCC&lt;/code&gt; よりも &lt;code&gt;foldSplitCC&lt;/code&gt; 関数の方がパフォーマンスが向上していることを示しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1.00)&lt;/code&gt; は QuickCheck によって生成されたテストケースを入力として利用した時に全てのテストケース (&lt;code&gt;100%&lt;/code&gt;) で性能が改善されたという意味です。&lt;code&gt;0.5&lt;/code&gt; などとなっていた場合はテストケースによっては性能が向上していないということです。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html</id><title type="text">Markdownで書いたテキストをMediumへポストする(mdium)</title><updated>2018-11-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Markdownで書いたテキストをMediumへポストする(mdium)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-04&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;完全な二番煎じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://namaraii.com/markdownで書いたテキストをmediumへポストする-md2mid-60c6ff9efde&#34;&gt;Markdownで書いたテキストをMediumへポストする(md2mid) – namaraii.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記記事は，Go 言語で作った「Markdownで書いたテキストをMediumへポストする」CLIツールです． 弊社の技術記事置き場が Medium だったので，なんとか，ここのように Markdown で書けないかと調べていたら上記記事が出て来ました． もっといいのできないかなと車輪の再発明してみたけど，正直大して変わらなかったと思います．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;md2mid と同様に Markdown で書いた記事を Medium に送信する CLI ツールを作った． 言わずもがな Haskell 製．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/mdium&#34;&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;違いがあるとすれば:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell 製（しつこい）&lt;/li&gt;
&lt;li&gt;環境変数を使ったトークンの管理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/matsubara0507/mdium/&#34;&gt;Docker Image&lt;/a&gt; 化してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;まず CLI ツールをインストールするには，リポジトリをクローンして Haskell Stack で直接ビルド・インストールする:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/matsubara0507/mdium.git
$ cd mdium
$ stack install mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは，Docker Image をプルしてくる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker pull matsubara0507/mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドを使うには，まず Medium のトークンを&lt;a href=&#34;https://medium.com/me/settings&#34;&gt;設定&lt;/a&gt;から生成する．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-mdium/generate-token.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これを環境変数 &lt;code&gt;MEDIUM_TOKEN&lt;/code&gt; にセットする． 直接でも良いし，&lt;code&gt;./.env&lt;/code&gt; か &lt;code&gt;~/.env&lt;/code&gt; に描いても良い． 下記のコマンドを実行することでトークンをチェックできる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mdium --me
Hi MATSUBARA Nobutada!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker イメージを使う場合にはこう:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm --env-file=&amp;quot;$HOME/.env&amp;quot; matsubara0507/mdium /bin/bash -c &amp;quot;mdium --me&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;トークンを渡すのは &lt;code&gt;--env-file&lt;/code&gt; オプションでも &lt;code&gt;-e&lt;/code&gt; オプションでも何でも良い． 実際に送信するには引数に送信したいファイルのパスを渡すだけ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ medium example.md
post success, browse to: https://medium.com/@nobutada/e31f70013b36&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうすることで指定した Markdown ファイルを draft として記事にしてくれる． ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/mdium/blob/master/example/example.md&#34;&gt;これ&lt;/a&gt;が下記のようになる．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/matsubara0507/mdium/raw/master/example/example.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;medium-api&#34;&gt;Medium API&lt;/h2&gt;
&lt;p&gt;こっからは中身の話を少し． 中では Medium の API を使っている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Medium/medium-api-docs#readme&#34;&gt;Medium’s API documentation - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その中に記事を送信する API があるのだが，驚いたことに送信できるファイルフォーマットに HTML と &lt;strong&gt;Markdown&lt;/strong&gt; があったのだ． つまり，特別な処理をせずともこの API を使ってマークダウンを送信すれば良い．&lt;/p&gt;
&lt;h2 id=&#34;dockerise&#34;&gt;Dockerise&lt;/h2&gt;
&lt;p&gt;Haskell Stack には Docker integration というのがある（あんまりドキュメントにまとまっていない機能）． これを使うことで，指定した Docker image 内で Haskell プロジェクトをビルドしたり，ビルドした実行ファイルを突っ込んだ Docker image を作成したりできる．&lt;/p&gt;
&lt;p&gt;今回は次のような設定を書き:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/mdium&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行することで Docker image を作成している:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack docker pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成した Image は &lt;code&gt;docker push&lt;/code&gt; コマンドでアップロードしている． また，この一連の流れを TravisCI で自動化している．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;p&gt;突貫で作ったのでいくつかやり残しがある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーハンドリング : 特に何も例外処理していないので&lt;/li&gt;
&lt;li&gt;記事の更新 : 今はひたすら新しい記事を生成してしまう&lt;/li&gt;
&lt;li&gt;タグやファイルフォーマットなどの細かい指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;だいたい1日とちょっとでサクッと作った割にはいい感じのものができて満足． どんどん再発明していこ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-10-29-join-hacktoberfest-2018.html</id><title type="text">Hacktoberfest 2018 なので PR を5つ以上出してみた</title><updated>2018-10-29T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-10-29-join-hacktoberfest-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Hacktoberfest 2018 なので PR を5つ以上出してみた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-10-29&#34; itemprop=&#34;datePublished&#34;&gt;
        Oct 29, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;去年に引き続き，Hacktoberfest に参加しました． 2017 は PR を4つでしたが，2018 は5つになったようです．&lt;/p&gt;
&lt;p&gt;ちなみに Hacktoberfest がなんなのかや，参加方法については&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-10-11-join-hacktoberfest-2017.html&#34;&gt;過去記事&lt;/a&gt;を見てください（多分変わってなかったはず）．&lt;/p&gt;
&lt;h2 id=&#34;マイステータス&#34;&gt;マイステータス&lt;/h2&gt;
&lt;p&gt;10月29日時点のステータスはこんな感じ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/join-hacktoberfest-2018/status.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/stats/matsubara0507&#34;&gt;ここから見れる&lt;/a&gt;が，毎年同じリンクを使ってるっぽいので，2019年にこの記事を見にきた人は役に立たないリンクです(笑)&lt;/p&gt;
&lt;h2 id=&#34;出した-pr&#34;&gt;出した PR&lt;/h2&gt;
&lt;p&gt;自分のリポジトリに対する PR もカウントされてしまうので，それを除くと4リポジトリ7PRです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/10&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/14&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/16&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/30&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stackage/pull/4078&#34;&gt;commercialhaskell/stackage ＃4078&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Hacktoberfest-2018/Hello-world/pull/2483&#34;&gt;Hacktoberfest-2018/Hello-world ＃2483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stackbuilders/dotenv-hs/pull/101&#34;&gt;stackbuilders/dotenv-hs ＃101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とはいえ，haskell-jp は僕が活動しているコミュニティだし，stackage は Haskell 版 Gem の登録申請みたいなものだし，Hacktoberfest-2018/Hello-world はただの遊びだし． ちゃんと OSS に出した PR は一つだ…&lt;/p&gt;
&lt;h3 id=&#34;haskell-jpmakemistakestolearnhaskell&#34;&gt;haskell-jp/makeMistakesToLearnHaskell&lt;/h3&gt;
&lt;p&gt;このリポジトリは，2018/11/10 に開催予定の &lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;Haskell Day 2018&lt;/a&gt; の午前中で行われる予定のハンズオンで使うものです． &lt;a href=&#34;https://github.com/igrep&#34;&gt;igrep&lt;/a&gt; 氏がメインで作っており，僕は CI を設定したり，Cabal から hpack に移行したり，コンテンツをいじるより環境周りをいじった．&lt;/p&gt;
&lt;h3 id=&#34;commercialhaskellstackage&#34;&gt;commercialhaskell/stackage&lt;/h3&gt;
&lt;p&gt;このリポジトリは Haskell のパッケージマネージャーである &lt;a href=&#34;https://www.stackage.org/&#34;&gt;Stackage&lt;/a&gt; の管理リポジトリだ． &lt;a href=&#34;http://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt; というのもあるが，Hackage はパッケージストレージで，Stackage は Hackage にある各パッケージのバージョンのリゾルバを提供している（ビルド可能な組み合わせのこと）． 他の言語と異なり，リゾルバがあることで Haskell アプリケーションの作者が常に各パッケージ間のバージョンなどを細かく管理する必要はなく，特定のリゾルバを設定するだけで良い．&lt;/p&gt;
&lt;p&gt;最近，Haskell のデファクトスタンダードなコンパイラ，GHC の最新バージョンである GHC 8.6 がリリースされた． それに伴い，Stackage の Nightly 版が GHC 8.6 へ移行され，多くのパッケージが disable された． 徐々にメジャーパッケージが reenable されたので，&lt;a href=&#34;http://hackage.haskell.org/package/servant-kotlin&#34;&gt;僕の作成したパッケージ&lt;/a&gt;も reenable する PR を送ったのだ．&lt;/p&gt;
&lt;h3 id=&#34;hacktoberfest-2018hello-world&#34;&gt;Hacktoberfest-2018/Hello-world&lt;/h3&gt;
&lt;p&gt;これは Hacktoberfest が作ったお遊びリポジトリだ（多分）． いろんな言語の &lt;code&gt;Hello, world!&lt;/code&gt; と出力するプログラムを集めるリポジトリのようだ．&lt;/p&gt;
&lt;p&gt;僕は &lt;a href=&#34;https://hacktoberfest.digitalocean.com/stats&#34;&gt;Hacktoberfest のグローバルステータス&lt;/a&gt;の「Highest Pull Request Count Repos」で見かけた（今は read-only になっているので PR は出せない）． 面白そうだったので，まだ無かった &lt;a href=&#34;https://www.egison.org/&#34;&gt;Egison&lt;/a&gt; のプログラムを PR として出した．&lt;/p&gt;
&lt;pre class=&#34;egison&#34;&gt;&lt;code&gt;(define $main
  (lambda [$args]
    (write &amp;quot;Hello, world!\n&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Egison は江木さんという方が学生のころから作ってるパターンマッチ志向という独特のパラダイムを持つプログラミング言語だ． 全然関係ない話だが，今度&lt;a href=&#34;https://connpass.com/event/102061/&#34;&gt;ワークショップ&lt;/a&gt;も行われる．&lt;/p&gt;
&lt;h3 id=&#34;stackbuildersdotenv-hs&#34;&gt;stackbuilders/dotenv-hs&lt;/h3&gt;
&lt;p&gt;唯一のまともな OSS な PR． &lt;a href=&#34;http://hackage.haskell.org/package/dotenv&#34;&gt;dotenv&lt;/a&gt; という Haskell パッケージのリポジトリだ． 自分が作ってる &lt;a href=&#34;https://github.com/matsubara0507/stack-tpls&#34;&gt;CLI ツール&lt;/a&gt;に使おうと思って README に書いてある通りに書いて見たら，動かなかったので，その修正 PR を出した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Configuration.Dotenv&lt;/span&gt; (loadFile, defaultConfig)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;loadFile defaultConfig&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こう書くと &lt;code&gt;defaultConfig&lt;/code&gt; が無いと怒られる．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Main.hs:17:42: error:
    Module ‘Configuration.Dotenv’ does not export ‘defaultConfig’
   |                             
17 | import           Configuration.Dotenv   (defaultConfig, loadFile)
   |                                          ^^^^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを見に行ったら &lt;code&gt;defaultConfig&lt;/code&gt; を Reexport し忘れていたので，Reexport し直す PR を出した． 無事マージされ，最新バージョンでリリースされたので，もし同じバグを踏んだ人がいた場合はバージョン &lt;code&gt;0.6.0.3&lt;/code&gt; 以上を試してほしい．&lt;/p&gt;
&lt;h2 id=&#34;t-shirt&#34;&gt;T-shirt&lt;/h2&gt;
&lt;p&gt;去年と同様に「You’ve completed the Hacktoberfest challenge!」というメールが届いた（10/27に）． メール本文にあるユニークなリンクを踏んでTシャツのリクエストを出せる． Tシャツのサイズと，自分の住所などを英語で記載するだけだ．&lt;/p&gt;
&lt;p&gt;アメリカ以外はだいたいひと月ほどで届くらしい． ちなみに，去年は12月20日ぐらいに届いてた．&lt;/p&gt;
&lt;h3 id=&#34;おしまい&#34;&gt;おしまい&lt;/h3&gt;
&lt;p&gt;あんまり OSS っぽい PR を出せなくて残念…&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html</id><title type="text">Stack 1.9.1 がリリースされました。</title><updated>2018-10-22T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;10月18日に Stack version 1.9.1 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.1/ChangeLog.md#v191&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
Current Stack version: 1.7.1, available download version: 1.9.1
Newer version detected, downloading
Querying for archive location for platform: linux-x86_64-static
Downloading from: https://github.com/commercialhaskell/stack/releases/download/v1.9.1/stack-1.9.1-linux-x86_64-static.tar.gz
Download complete, testing executable
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
New stack executable available at /home/guchi/.local/bin/stack
Also copying stack executable to /usr/local/bin/stack
Permission error when trying to copy: /usr/local/bin: copyFile:atomicCopyFileContents:withReplacementFile:openBinaryTempFile: permission denied (Permission denied)
Should I try to perform the file copy using sudo? This may fail
Try using sudo? (y/n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルは &lt;code&gt;~/.local/bin/stack&lt;/code&gt; と &lt;code&gt;/usr/local/bin&lt;/code&gt; にインストールされます。&lt;/p&gt;
&lt;p&gt;ただし、権限が無いと上記のように &lt;code&gt;/usr/local/bin&lt;/code&gt; へのコピーに失敗するため &lt;code&gt;sudo&lt;/code&gt; で再実行するか聞かれます。必要であれば &lt;code&gt;y&lt;/code&gt; でインストールしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Try using sudo? (y/n) y
Going to run the following commands:

-  sudo cp /home/guchi/.local/bin/stack /usr/local/bin/stack.tmp
-  sudo mv /usr/local/bin/stack.tmp /usr/local/bin/stack

sudo file copy worked!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされるバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack --version
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;気になる更新内容まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static binary の復活&lt;/li&gt;
&lt;li&gt;Cabal 2.4 への対応&lt;/li&gt;
&lt;li&gt;internal-library 関連のバグ修正&lt;/li&gt;
&lt;li&gt;namespaced template&lt;/li&gt;
&lt;li&gt;stack run&lt;/li&gt;
&lt;li&gt;ghci に -fobject-code を渡した際にちゃんとキャッシュされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;さんのおかげで、静的にリンクされた Linux バイナリが再び利用できるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c34f11190302b2db9bab44ac6e45ca2c5f7810ce/doc/maintainers/releases.md#build-linux-static-binary-distribution-with-nix&#34;&gt;Build Linux static binary distribution with Nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2/static-haskell-nix/tree/upstream-nixpkgs-musl-1.1.19/static-stack&#34;&gt;Fully statically linked stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;download.fpcomplete.com&lt;/code&gt; から Ubuntu, Debian, CentOS, Fedora, Arch のパッケージリポジトリを削除する予定です。これらは既に1年以上前から非推奨となっており、新しいリリースにも対応していませんでしたが、過去のスクリプトとの互換性のために残していました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;大きな変更点&#34;&gt;大きな変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cabal 2.4 にアップグレードしました。
&lt;ul&gt;
&lt;li&gt;注意点: ファイル名のパターンマッチの動作が変わりました。Cabal spec 2.4 より前のバージョンでは &lt;code&gt;*.txt&lt;/code&gt; は &lt;code&gt;foo.txt&lt;/code&gt; にマッチしていましたが、&lt;code&gt;foo.2.txt&lt;/code&gt; にはマッチしませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4317&#34;&gt;Use Cabal 2.4 for the 1.9 branch #4317&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/blob/master/Cabal/ChangeLog.md#2400-mikhail-glushenkov-september-2018&#34;&gt;ChangeLog (Cabal 2.4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5372&#34;&gt;Multi-dot globbing #5372&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/784&#34;&gt;Wildcards in data-files don’t work with filenames containing multiple dots #784&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5057&#34;&gt;&lt;code&gt;cabal sdist&lt;/code&gt; does not pick up files with multiple dots #5057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; のサポートが &lt;code&gt;experimental (実験的)&lt;/code&gt; へ降格しました。また、&lt;code&gt;GHCJS&lt;/code&gt; が実験段階であることをユーザに知らせるための警告が表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4086&#34;&gt;DISCUSSION: Mark GHCJS support as deprecated? #4086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4154&#34;&gt;Warning about GHCJS use when constructing a build plan #4154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/729a052cede11855644bf00c4b7661a89148bdc7#diff-e705c8fadf1193ab59443a5e6c8cbe8b&#34;&gt;commit@729a052cede11855644bf00c4b7661a89148bdc7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;変更点&#34;&gt;変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; と &lt;code&gt;config.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようにしました。今までは置き換えていました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;グローバルな &lt;code&gt;~/.stack/.config.yaml&lt;/code&gt; とプロジェクト固有の &lt;code&gt;stack.yaml&lt;/code&gt; の話で &lt;code&gt;package.yaml&lt;/code&gt; は関係しません。&lt;/p&gt;
&lt;p&gt;例として、それぞれファイルの内容を以下のように設定しておきます。(&lt;code&gt;$everything&lt;/code&gt; は全てのパッケージを指定)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パッケージの指定が重複していたときに今までは、&lt;code&gt;stack.yaml&lt;/code&gt; (プロジェクト固有) の &lt;code&gt;ghc-options&lt;/code&gt; で上書きされていましたが、 &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようになりました。以下は動作例です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# stack v1.9.1 の動作
$ stack build
... --ghc-options aaa --ghc-options bbb

# stack v1.7.1 の動作
$ stack build
... --ghc-options bbb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc-options&lt;/code&gt; の内容が重複する場合は両方とも引数に与えられますが、後ろの値で上書きされるようなのでプロジェクト固有の設定が優先されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-config&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-stack&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に試してみると、以下のようになると思います。&lt;/p&gt;
&lt;pre class=&#34;sell&#34;&gt;&lt;code&gt;$ stack build -v
... --ghc-options -dumpdir=./respect-config --ghc-options -dumpdir=./respect-stack

$ ls  -l
...
drwxrwxr-x 5 guchi guchi 4096 10月 21 13:35 respect-stack
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3753&#34;&gt;Stack does not respect ghc-options in user config #3753&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3781&#34;&gt;Fix inheritance of category ghc-options from config.yaml #3753 #3781&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4089&#34;&gt;Have project ghc-options append to config.yaml ghc-options #3753&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはパッケージのサブライブラリをビルドする際に executables, test, benchmarks, libraries などと同様の方法でアナウンスを行うようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111/commits/4a4b63f59130bb66477d155dcb401d50fac02fab&#34;&gt;commit@4a4b63f59130bb66477d155dcb401d50fac02fab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドはサニティチェックの結果にかかわらず、生成された tarball の場所をアナウンスするようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4117&#34;&gt;Mention tarball earlier in sdist #4117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4112&#34;&gt;stack sdist fails when modules are exposed based on a flag in the cabal file #4112&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack setup&lt;/code&gt; コマンドの &lt;code&gt;--upgrade-cabal&lt;/code&gt; オプションは廃止されます。この機能は GHC 8.2 以降では動作しません。また、このフラグが実装された当初の動機は Stack がカスタムセットアップのためにスナップショットの &lt;code&gt;Cabal&lt;/code&gt; ライブラリを利用し始めたことでほとんど無くなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4118&#34;&gt;Deprecate the –upgrade-cabal flag (fixes #4070) #4118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;&lt;code&gt;stack setup --upgrade-cabal&lt;/code&gt; doesn’t work for Cabal-2.2.0.1 + ghc-8.2.2 #4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たに namespaced template 機能が実装されたため、&lt;code&gt;stack templates&lt;/code&gt; コマンドは利用可能な全てのテンプレートの一覧を良い感じに表示できなくなりました。代わりに、テンプレートを見つける方法についての&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;ヘルプファイル&lt;/a&gt;をダウンロードし、表示します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4129&#34;&gt;Get stack templates help from Github file #4039 #4129&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;ビルドツールを &lt;code&gt;cabal-install&lt;/code&gt; と同様の方法で取り扱うようになりました。また、レガシーな &lt;code&gt;build-tools&lt;/code&gt; フィールドに対しては、ツールマップの中からビルドツールパッケージを調べるのではなく、ハードコードされたビルドツールのリストを利用します。この変更により Stack の動作は &lt;code&gt;cabal-install&lt;/code&gt; に近づいたため、いくつかのバグを回避し、最適化/遅延性の恩恵を得られる可能性があります。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;stack 1.7.1 still has problems finding build tools (“The program ‘happy’ is required”) #4125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4132&#34;&gt;Use a hard-coded tool dependency map (fixes #4125) #4132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/595&#34;&gt;Build-tools not detected when not using Stackage snapshot #595&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3178&#34;&gt;Stack cannot find happy during build #3178&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3249&#34;&gt;Extensible snapshots #3249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの低下を避けるため、Mustache テンプレートに (50kb を超える) 大きなファイルを適用できなくなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4134&#34;&gt;Do not apply Mustache to large files (fixes #4133) #4134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;stack new is very slow at compiling Mustache templates #4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; はデフォルトでパッケージに署名を行うようになりました。また、&lt;code&gt;--no-signature&lt;/code&gt; オプションで署名をスキップできます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートダウンロード時のネットワーク接続問題に備えて、事前にチェックを行うようになりました。もし、問題があればキャッシュ済みのテンプレートを利用します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4173&#34;&gt;Use cached template if template download fails #4173&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;その他の改良点&#34;&gt;その他の改良点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 より前の Windows 環境では、ターミナルのデフォルト値が &lt;code&gt;--color=never&lt;/code&gt; となります。エミュレーションによる出力のみ ANSI カラーコードが利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4106&#34;&gt;Re #4091: Pre-Windows 10, default –color=never #4106&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Windows 環境では、デフォルトのターミナルを ‘mintty’ (false) として認識するように変更しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4015&#34;&gt;Windows: use ‘hIsTerminalDevice or isMinTTYHandle’ #4015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に &lt;code&gt;base&lt;/code&gt; が明示的に記載されているとき、警告を出すようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3940&#34;&gt;Warn when upgrading base #3940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、ビルドプランで達成不可能な &lt;code&gt;base&lt;/code&gt; バージョンが要求された際に、別の GHC バージョンを試すように提案するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たなサブコマンド &lt;code&gt;run&lt;/code&gt; が導入されました。このコマンドは &lt;code&gt;cabal run&lt;/code&gt; のように、指定された executable をビルド&amp;amp;実行します。executable が省略された場合は、プロジェクト内で最初に利用可能な executable が指定されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3952&#34;&gt;Introduce &lt;code&gt;stack run&lt;/code&gt; command line option #3952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/233&#34;&gt;Wishlist: &lt;code&gt;stack run&lt;/code&gt; #233&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-stack-run.html&#34;&gt;stack run コマンド – BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、依存関係が足りない旨を伝えるメッセージにパッケージの最新の cabal ファイルリビジョンハッシュを含めるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-1&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;こんな感じで表示されるようです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
  * Recommended action: try adding the following to your extra-deps in /home/thomas/github/stack/stack.yaml:
rio-0.1.2.0@sha256:cb2a65cee1c0450815002ca890633215e4544b5c1c9f7091a950142c6efe8f3f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;Add cabal-hash revision info when displaying recommended packages when failing to construct buildplan #4068&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3925&#34;&gt;Modify “recommended packages” output to include revision info #3925&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドに新しく &lt;code&gt;--tar-dir&lt;/code&gt; オプションを追加しました。このオプションにより指定したディレクトリに生成された tarball をコピーできるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3621&#34;&gt;3568 add tar files option to sdist #3621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3568&#34;&gt;Stack sdist option to place build artefacts elsewhere #3568&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/9a58d5bf5346bedb0d460335c7018c256591966d&#34;&gt;commit@9a58d5bf5346bedb0d460335c7018c256591966d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interleaved-output&lt;/code&gt; オプションと &lt;code&gt;build.interleaved-output&lt;/code&gt; 設定値が導入されました。これにより、複数の並行ビルドの出力が &lt;code&gt;packagename&amp;gt;&lt;/code&gt; プレフィックス付きで同時に標準エラー出力にダンプされます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4097&#34;&gt;Add the interleaved-output option/config value #3225 #4097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;Add flag to print GHC output to stdout #3225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3508&#34;&gt;Report progress on STDOUT/STDERR during compilation of individual modules #3508&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの再接続戦略を exponential backoff に変更しました。これにより &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt; の問題が緩和されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4109&#34;&gt;Changed the default retry strategy #4109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;Stack does not retry effectively when S3 is being flaky. #3510&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.14/retry-0.7.7.0/Control-Retry.html#v:exponentialBackoff&#34;&gt;exponentialBackoff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; コマンドは &lt;code&gt;username/foo&lt;/code&gt; という形式で、&lt;code&gt;commercialstack&lt;/code&gt; 以外のリポジトリからテンプレートをダウンロードできるようになりました。また &lt;code&gt;github:&lt;/code&gt; という形式でプレフィックスを付けることでサービスを指定することもできます。現状は &lt;code&gt;github:&lt;/code&gt; の他に &lt;code&gt;gitlab:&lt;/code&gt; と &lt;code&gt;bitbucket:&lt;/code&gt; が利用可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4103&#34;&gt;4039 namespaced templates #4103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;Namespaced templates #4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html&#34;&gt;namespaced templates - BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitrev&lt;/code&gt; から &lt;code&gt;githash&lt;/code&gt; に切り替えました。このパッケージには &lt;code&gt;gitrev&lt;/code&gt; にマージされていないバグフィックスが含まれています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; を追加するファイルがわかりづらいため、ユーザ設定ファイルへのパスをエラーメッセージに含めるようにしました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;allow-newer in global-project doesn’t work #3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4127&#34;&gt;Point to user’s config.yaml when advising ‘allow-newer: true’ #4127&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; コマンドはビルド後ではなく、ビルド前にどのメインターゲットを読み込むか質問するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4138&#34;&gt;‘stack ghci’ now asks which main module to load before building #4138&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;hpack のバージョンを 0.29.0 に更新しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4151&#34;&gt;Bump to hpack 0.29 #4151&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC 8.4 以降のバージョンを利用したとき、自動的に Haddock へ &lt;code&gt;--quickjump&lt;/code&gt; オプションが渡されるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4163&#34;&gt;Pass –quickjump to Haddock for GHC 8.4 and later #4163&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hackage-base-url&lt;/code&gt; 設定オプションを利用することで、パッケージアップロード時の Hackage ベースURL に任意のURLを指定できるようになりました。(デフォルトは &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt; です)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Nix 利用時に GHC のマイナーバージョンを省略した場合、メジャーブランチの最新のマイナーバージョンを自動的に利用するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4189&#34;&gt;Do not hardcode GHC versions for Nixpkgs #4189&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; を繰り返し実行したときに &lt;code&gt;.o&lt;/code&gt; ファイルを無効化しなくなりました。これにより、&lt;code&gt;-fobject-code&lt;/code&gt; でコンパイルされた全てのモジュールは ghci を実行する度にキャッシュされます。 詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;Set cabal_macros.h work directory in stack ghci to something non-temporary #4038&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3344&#34;&gt;stack ghci recompiles all modules on every startup, even when invoked with “-fobject-code” or “–no-build” #3344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; の最後に改行が追加されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3983&#34;&gt;fixed: terminating is newline #3983&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;前回のリリースで &lt;code&gt;ghc-pkg&lt;/code&gt; コマンドの出力が &lt;code&gt;stderr&lt;/code&gt; に出力されてしまう問題が再発したので修正しました。現在の出力はとても静かになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4028&#34;&gt;Make ghc-pkg calls less noisy #4028&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1.7.1&lt;/code&gt; で導入された再コンパイルチェックの問題を修正し、回帰テストを追加しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4003&#34;&gt;4001 excess recompilation #4003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;–file-watch is watching test suites again #4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; は internal library を含むパッケージの処理で internal libray に対応する間違ったパッケージを探し、モジュールの読み込みに失敗していました。この問題は現在修正済みで、ライブラリとサブライブラリが適切に追跡されるようにコードが変更されました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;&lt;code&gt;stack ghci&lt;/code&gt; does not recognise internal libraries #3926&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3982&#34;&gt;Handle internal libraries in GHCi. #3982&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存していないパッケージを &lt;code&gt;stack build&lt;/code&gt; すると、internal library をビルドしていないのにも関わらず登録しようとするため、ビルドに失敗していました。この問題は internal library を常にビルドすることで解決しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4033&#34;&gt;Handle internal libs not listed as dependencies #4033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;Build fails with internal libraries that aren’t dependencies #3996&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;NixOS 環境では &lt;code&gt;--no-nix&lt;/code&gt; オプションの影響を受けなくなりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4021&#34;&gt;Allow Nix mode to be disabled under NixOS #4021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4002&#34;&gt;stack does not honor –no-nix under NixOS #4002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;RAM を大量に消費してしまう問題が再発していたので修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;Regression in 1.7.1 (compared to 1.6.5) in getPackageFiles RAM usage #4027&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4066&#34;&gt;Fix RAM usage upon big dump-hi files parsing #4066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインの引数の順序によって動作が異なる問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;It should not matter if flags given before command or after #3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4067&#34;&gt;Change parsers to use &lt;code&gt;flag&#39;&lt;/code&gt; instead of &lt;code&gt;switch&lt;/code&gt; #4067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パッケージをアップロードする際の Hackage クレデンシャル保存プロンプトで、ユーザの入力前に表示されなければならないメッセージが入力後に表示されてしまっていた問題を修正しました。ghci のターゲット選択プロンプトでも同様の問題が発生していたので修正しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4063&#34;&gt;Flush after prompt #4063&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4162&#34;&gt;Stack Upload waits for confirmation BEFORE printing confirmation message #4162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack solver&lt;/code&gt; コマンドで、PATH に &lt;code&gt;cabal&lt;/code&gt; が存在しない場合、ユーザに対して &lt;code&gt;stack install cabal-install&lt;/code&gt; の実行を促すためのメッセージが表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4100&#34;&gt;Solver cabal install hint #4100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3841&#34;&gt;stack solver complains there’s no cabal in path. #3841&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはサブライブラリを含むパッケージが executable, test, benchmark などの依存関係になっている場合でも、正しくビルドできるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-2&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;Cabal 2.0 から &lt;code&gt;internal Libraries&lt;/code&gt; が追加され、stack 側も対応したという感じです。&lt;/p&gt;
&lt;p&gt;例として以下のような &lt;code&gt;package.yaml&lt;/code&gt; があった場合&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# package.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test-internal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;internal-libraries:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;internal-foo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動生成される &lt;code&gt;cabal&lt;/code&gt; ファイルは以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           test-internal
version:        0.0.0
build-type:     Simple
cabal-version:  &amp;gt;= 2.0

library internal-foo
  other-modules:
      Paths_test_internal
  build-depends:
      base
  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態でビルドした結果は次のとおりです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# v1.7.1
$ stack build
Package has buildable sublibraries but no buildable libraries, I&amp;#39;m giving up
CallStack (from HasCallStack):
  error, called at src/Stack/Package.hs:280:30 in stack-1.7.1-JqFYW3fz7If7um4NzPRwPj:Stack.Package

# v1.9.1
$ stack build
test-internal-0.0.0: configure (internal-lib)
Configuring test-internal-0.0.0...
test-internal-0.0.0: build (internal-lib)
Preprocessing library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
Building library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
[1 of 1] Compiling Paths_test_internal ( .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/autogen/Paths_test_internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/Paths_test_internal.o )
ignoring (possibly broken) abi-depends field for packages
test-internal-0.0.0: copy/register
Installing internal library internal-foo in /home/guchi/Desktop/stack-191-working/test-internal/.stack-work/install/x86_64-linux/lts-12.14/8.4.3/lib/x86_64-linux-ghc-8.4.3/test-internal-0.0.0-6jijyMwb8IH16YEILzaUQW-internal-foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;Internal libraries does not work if there’s no main library #3787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#sublibs&#34;&gt;Internal Libraries - Cabal document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sol/hpack#library-fields&#34;&gt;hpack Top-level fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存したテストスイートのカバレッジレポートで、サブライブラリが適切に処理されるようになりました。以前まではカバレッジレポートを生成するときにエラーとなっていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;Error running test coverage when tests depend on internal lbraries. #4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スナップショット更新時にサブライブラリがプリコンパイルキャシュに追加されるようになりました。以前まではスナップショットにサブライブラリを含むパッケージが存在するようなスナップショットを更新するとビルドが壊れていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;haddock-library’s internal attoparsec library cannot be found - broken package #4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Stack は &lt;code&gt;warning&lt;/code&gt; の代わりに適切な &lt;code&gt;error&lt;/code&gt; ログレベルでエラーメッセージをプリティプリントするようになりました。これにより self-executing scripts で runhaskell のプラン構築エラーがターミナルに出力されない問題も修正されます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;#4114&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;Fixes self-executing scripts not piping plan construction errors from runhaskell to terminal, issue #3942 #4114&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3942&#34;&gt;Self-executing scripts don’t pipe plan construction errors from runhaskell to terminal #3942&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Cabal の呼び出しに失敗した際に “While building Setup.hs” という間違ったメッセージが表示されていた問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4131&#34;&gt;Fix invalid “While building Setup.hs” #3934 #4131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;Invalid “While building Setup.hs” error message #3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;release-notes&#34;&gt;Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically linked Linux bindists are back again, thanks to &lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We will be deleting the Ubuntu, Debian, CentOS, Fedora, and Arch package repos from &lt;code&gt;download.fpcomplete.com&lt;/code&gt; soon. These have been deprecated for over a year and have not received new releases, but were left in place for compatibility with older scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;major-changes&#34;&gt;Major changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade to Cabal 2.4
&lt;ul&gt;
&lt;li&gt;Note that, in this process, the behavior of file globbing has been modified to match that of Cabal. In particular, this means that for Cabal spec versions less than 2.4, &lt;code&gt;*.txt&lt;/code&gt; will match &lt;code&gt;foo.txt&lt;/code&gt;, but not &lt;code&gt;foo.2.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; support is being downgraded to ‘experimental’. A warning notifying the user of the experimental status of &lt;code&gt;GHCJS&lt;/code&gt; will be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;behavior-changes&#34;&gt;Behavior changes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;stack.yaml&lt;/code&gt; are now appended to &lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;config.yaml&lt;/code&gt;, whereas before they would be replaced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; will now announce when sublibraries of a package are being build, in the same way executables, tests, benchmarks and libraries are announced&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; will now announce the destination of the generated tarball, regardless of whether or not it passed the sanity checks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--upgrade-cabal&lt;/code&gt; option to &lt;code&gt;stack setup&lt;/code&gt; has been deprecated. This feature no longer works with GHC 8.2 and later. Furthermore, the reason for this flag originally being implemented was drastically lessened once Stack started using the snapshot’s &lt;code&gt;Cabal&lt;/code&gt; library for custom setups. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;With the new namespaced template feature, &lt;code&gt;stack templates&lt;/code&gt; is no longer able to meaningfully display a list of all templates available. Instead, the command will download and display a &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt; with more information on how to discover templates. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build tools are now handled in a similar way to &lt;code&gt;cabal-install&lt;/code&gt;. In particular, for legacy &lt;code&gt;build-tools&lt;/code&gt; fields, we use a hard-coded list of build tools in place of looking up build tool packages in a tool map. This both brings Stack’s behavior closer into line with &lt;code&gt;cabal-install&lt;/code&gt;, avoids some bugs, and opens up some possible optimizations/laziness. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mustache templating is not applied to large files (over 50kb) to avoid performance degredation. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In case there is a network connectivity issue while trying to download a template, stack will check whether that template had been downloaded before. In that case, the cached version will be used. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3850&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-enhancements&#34;&gt;Other enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On Windows before Windows 10, –color=never is the default on terminals that can support ANSI color codes in output only by emulation&lt;/li&gt;
&lt;li&gt;On Windows, recognise a ‘mintty’ (false) terminal as a terminal, by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; issues a warning when &lt;code&gt;base&lt;/code&gt; is explicitly listed in &lt;code&gt;extra-deps&lt;/code&gt; of &lt;code&gt;stack.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; suggests trying another GHC version should the build plan end up requiring unattainable &lt;code&gt;base&lt;/code&gt; version.&lt;/li&gt;
&lt;li&gt;A new sub command &lt;code&gt;run&lt;/code&gt; has been introduced to build and run a specified executable similar to &lt;code&gt;cabal run&lt;/code&gt;. If no executable is provided as the first argument, it defaults to the first available executable in the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; missing dependency suggestions (on failure to construct a valid build plan because of missing deps) are now printed with their latest cabal file revision hash. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new &lt;code&gt;--tar-dir&lt;/code&gt; option to &lt;code&gt;stack sdist&lt;/code&gt;, that allows to copy the resulting tarball to the specified directory.&lt;/li&gt;
&lt;li&gt;Introduced the &lt;code&gt;--interleaved-output&lt;/code&gt; command line option and &lt;code&gt;build.interleaved-output&lt;/code&gt; config value which causes multiple concurrent builds to dump to stderr at the same time with a &lt;code&gt;packagename&amp;gt;&lt;/code&gt; prefix. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The default retry strategy has changed to exponential backoff. This should help with &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; now allows template names of the form &lt;code&gt;username/foo&lt;/code&gt; to download from a user other than &lt;code&gt;commercialstack&lt;/code&gt; on Github, and can be prefixed with the service &lt;code&gt;github:&lt;/code&gt;, &lt;code&gt;gitlab:&lt;/code&gt;, or &lt;code&gt;bitbucket:&lt;/code&gt;. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch to &lt;code&gt;githash&lt;/code&gt; to include some unmerged bugfixes in &lt;code&gt;gitrev&lt;/code&gt; Suggestion to add &lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; now shows path to user config file where this flag should be put into &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now asks which main target to load before doing the build, rather than after&lt;/li&gt;
&lt;li&gt;Bump to hpack 0.29.0&lt;/li&gt;
&lt;li&gt;With GHC 8.4 and later, Haddock is given the &lt;code&gt;--quickjump&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;It is possible to specify the Hackage base URL to upload packages to, instead of the default of &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt;, by using &lt;code&gt;hackage-base-url&lt;/code&gt; configuration option.&lt;/li&gt;
&lt;li&gt;When using Nix, if a specific minor version of GHC is not requested, the latest minor version in the given major branch will be used automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now does not invalidate &lt;code&gt;.o&lt;/code&gt; files on repeated runs, meaning any modules compiled with &lt;code&gt;-fobject-code&lt;/code&gt; will be cached between ghci runs. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; and &lt;code&gt;stack.yaml&lt;/code&gt; terminating by newline&lt;/li&gt;
&lt;li&gt;The previous released caused a regression where some &lt;code&gt;stderr&lt;/code&gt; from the &lt;code&gt;ghc-pkg&lt;/code&gt; command showed up in the terminal. This output is now silenced.&lt;/li&gt;
&lt;li&gt;A regression in recompilation checking introduced in v1.7.1 has been fixed. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; on a package with internal libraries was erroneously looking for a wrong package corresponding to the internal library and failing to load any module. This has been fixed now and changes to the code in the library and the sublibrary are properly tracked. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For packages with internal libraries not depended upon, &lt;code&gt;stack build&lt;/code&gt; used to fail the build process since the internal library was not built but it was tried to be registered. This is now fixed by always building internal libraries. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;#3996&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-nix&lt;/code&gt; was not respected under NixOS&lt;/li&gt;
&lt;li&gt;Fix a regression which might use a lot of RAM. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Order of commandline arguments does not matter anymore. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When prompting users about saving their Hackage credentials on upload, flush to stdout before waiting for the response so the prompt actually displays. Also fixes a similar issue with ghci target selection prompt.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;cabal&lt;/code&gt; is not on PATH, running &lt;code&gt;stack solver&lt;/code&gt; now prompts the user to run &lt;code&gt;stack install cabal-install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; now succeeds in building packages which contain sublibraries which are dependencies of executables, tests or benchmarks but not of the main library. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now properly considered for coverage reports when the test suite depends on the internal library. Before, stack was erroring when trying to generate the coverage report, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now added to the precompiled cache and recovered from there when the snapshot gets updated. Previously, updating the snapshot when there was a package with a sublibrary in the snapshot resulted in broken builds. This is now fixed, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[#4114] Stack pretty prints error messages with proper &lt;code&gt;error&lt;/code&gt; logging level instead of &lt;code&gt;warning&lt;/code&gt; now. This also fixes self-executing scripts not piping plan construction errors from runhaskell to terminal (issue #3942).&lt;/li&gt;
&lt;li&gt;Fix invalid “While building Setup.hs” when Cabal calls fail. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html</id><title type="text">time パッケージの使い方</title><updated>2018-09-17T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell で時間や日付を扱う際に良く利用されるのは &lt;a href=&#34;https://www.stackage.org/lts-12.9/package/time&#34;&gt;time&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;このパッケージが使いやすいかどうかは人それぞれですが、使い方を知っておくと便利なのでよく使いそうな関数を簡単に解説しようと思います。&lt;/p&gt;
&lt;p&gt;これからの例は以下のコマンドを実行していると仮定して話を進めます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack repl --package time --resolver lts-12.9
$ import Data.Time&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;time-パッケージのモジュール構造&#34;&gt;Time パッケージのモジュール構造&lt;/h2&gt;
&lt;p&gt;基本的には &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time.html&#34;&gt;Data.Time&lt;/a&gt; を import して使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data.Time は以下のモジュールを再エクスポートしています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;モジュール名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html&#34;&gt;Data.Time.Clock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全然使わないので良くわからない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-LocalTime.html&#34;&gt;Data.Time.LocalTime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日本の現在時刻を取得など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html&#34;&gt;Data.Time.Format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力の整形&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;rio-を利用している場合&#34;&gt;rio を利用している場合&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/lts-12.9/package/rio&#34;&gt;rio&lt;/a&gt; を利用している場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/rio-0.1.5.0/RIO-Time.html&#34;&gt;RIO.Time&lt;/a&gt; を import します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;data.time.localtime&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;現在時刻を取得する場合にこのモジュールを使います。現在時刻を取得したいからと言って &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:getCurrentTime&#34;&gt;getCurrentTime&lt;/a&gt; を利用すると日本時間にならないので注意してください。&lt;/p&gt;
&lt;h3 id=&#34;getzonedtime&#34;&gt;getZonedTime&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンに応じた現在時刻を返します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getZonedTime
getZonedTime :: IO ZonedTime

&amp;gt; getZonedTime
2018-09-17 13:41:05.512522063 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;getcurrenttimezone&#34;&gt;getCurrentTimeZone&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンを取得します。このタイムゾーンに基づいて &lt;code&gt;getZonedTime&lt;/code&gt; が計算されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getCurrentTimeZone
getCurrentTimeZone :: IO TimeZone

&amp;gt; getCurrentTimeZone
JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zonedtimetoutc&#34;&gt;zonedTimeToUTC&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ZonedTime&lt;/code&gt; を &lt;code&gt;UTCTime&lt;/code&gt; に変換するために使います。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t zonedTimeToUTC
zonedTimeToUTC :: ZonedTime -&amp;gt; UTCTime

&amp;gt; zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 04:41:27.907476307 UTC&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;utctozonedtime&#34;&gt;utcToZonedTime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zonedTimeToUTC&lt;/code&gt; の逆で &lt;code&gt;UTCTime&lt;/code&gt; を &lt;code&gt;ZonedTime&lt;/code&gt; に変換する関数です。タイムゾーンのための引数を余分に取ります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t utcToZonedTime
utcToZonedTime :: TimeZone -&amp;gt; UTCTime -&amp;gt; ZonedTime

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; getCurrentTime
2018-09-17 13:41:37.955641567 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日後の時間を計算するには&#34;&gt;1日後の時間を計算するには？&lt;/h2&gt;
&lt;p&gt;ここで、取得した時間の1日後を計算してみましょう。&lt;/p&gt;
&lt;p&gt;そのためには Data.Time.Clock で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:addUTCTime&#34;&gt;addUTCTime&lt;/a&gt; を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addUTCTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数に &lt;code&gt;NominalDiffTime&lt;/code&gt; という謎の型を取りますが、&lt;code&gt;nominalDay&lt;/code&gt; の実装を見れば &lt;code&gt;60 * 60 * 24&lt;/code&gt; っぽいことがわかるので、そんな感じで値を作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;nominalDay ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;nominalDay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;86400&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、上記の実装でなぜ &lt;code&gt;NominalDiffTime&lt;/code&gt; の値になるかと言うと、&lt;code&gt;NominalDiffTime&lt;/code&gt; は &lt;code&gt;Num&lt;/code&gt; クラスのインスタンスになっているため、自動的に &lt;code&gt;fromInteger&lt;/code&gt; が呼ばれて変換されるという仕組みです。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。1日後を計算してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime nominalDay . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 10:32:56.880362453 UTC

&amp;gt; getZonedTime
2018-09-17 13:49:09.279378323 JST

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-18 13:49:16.211737218 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に1時間後も計算してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime (60 * 60) . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime

&amp;gt; getZonedTime
2018-09-17 13:49:33.169797528 JST

&amp;gt; t
2018-09-17 05:49:36.757498845 UTC

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-17 14:49:40.930944714 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上手くいってますね！&lt;/p&gt;
&lt;h2 id=&#34;data.time.localtime-1&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;時刻の取得・計算ができたら、あとは整形して出力するだけです！&lt;/p&gt;
&lt;p&gt;Data.Time.LocalTime モジュールの関数を使って出力を整形してみましょう！&lt;/p&gt;
&lt;h3 id=&#34;formattime&#34;&gt;formatTime&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;formatTime&lt;/a&gt; 関数の使い方がわかれば、任意の形式で出力できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t formatTime
formatTime :: FormatTime t =&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; t -&amp;gt; String&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで &lt;code&gt;FormatTime t&lt;/code&gt; の &lt;code&gt;t&lt;/code&gt; は &lt;code&gt;UTCTime&lt;/code&gt; や &lt;code&gt;ZonedTime&lt;/code&gt;、&lt;code&gt;Day&lt;/code&gt; などの型が使えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型に応じて第三引数が変わるということです。&lt;/p&gt;
&lt;p&gt;実際に使えばすぐに慣れます。(第一引数の値は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:defaultTimeLocale&#34;&gt;defaultTimeLocale&lt;/a&gt; を指定しておけば良いのですが、自分でカスタマイズしたものを使うこともあります)&lt;/p&gt;
&lt;p&gt;第二引数がフォーマット文字列なので、空文字列を与えれば当然結果も空になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フォーマットの指定方法については &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;haddock&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%D&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%x&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%Y/%m/%d-%T&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018/09/17-13:52:21&amp;quot;

&amp;gt; formatTime defaultTimeLocale rfc822DateFormat &amp;lt;$&amp;gt; getZonedTime
&amp;quot;Sun, 16 Sep 2018 19:53:10 JST&amp;quot;

&amp;gt; formatTime defaultTimeLocale (iso8601DateFormat Nothing) &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-16&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文字列をパーズして-zonedtime-や-day-の値を作る&#34;&gt;文字列をパーズして ZonedTime や Day の値を作る&lt;/h2&gt;
&lt;p&gt;ここまでは現在時刻を元に時刻の計算や出力結果の整形を行いました。&lt;/p&gt;
&lt;p&gt;しかし、実際のプログラムでは文字列をパーズして &lt;code&gt;ZonedTime&lt;/code&gt; や &lt;code&gt;Day&lt;/code&gt; の値に変換したいこともあるでしょう。そのような場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:parseTimeM&#34;&gt;parseTimeM&lt;/a&gt; を使うと便利です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t parseTimeM
parseTimeM
  :: (Monad m, ParseTime t) =&amp;gt;
     Bool -&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; String -&amp;gt; m t&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;型がわかりづらいですが、具体的にはこんな型で利用することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一引数は &lt;strong&gt;空白&lt;/strong&gt; を許容するかどうかのフラグです (True だと空白OK)&lt;/li&gt;
&lt;li&gt;第二引数は気にせず &lt;strong&gt;defaultTimeLocale&lt;/strong&gt; を指定しておきましょう&lt;/li&gt;
&lt;li&gt;第三引数は &lt;strong&gt;パーズで利用するフォーマット&lt;/strong&gt; を指定します&lt;/li&gt;
&lt;li&gt;第四引数は &lt;strong&gt;入力の文字列&lt;/strong&gt; です&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具体例&#34;&gt;具体例&lt;/h3&gt;
&lt;p&gt;実際にいくつか使ってみましょう。以下の通り &lt;code&gt;%F&lt;/code&gt; は &lt;code&gt;YYYY-MM-DD&lt;/code&gt; の書式になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モナドを &lt;code&gt;IO&lt;/code&gt; や &lt;code&gt;Maybe&lt;/code&gt; などに変化させた基本的な例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: Maybe ZonedTime
Just 2018-09-17 00:00:00 +0000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一引数を変化させて、入力文字列の空白の有無について確認する例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot;2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入力文字列とパーズの書式がマッチしない例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%x&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot; 2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Day 型の値をとしてパーズする例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day
2018-09-17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにして日付を取得できれば、今回は説明していませんが &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt; の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html#v:addDays&#34;&gt;addDays&lt;/a&gt; 関数などを使って日付の計算を行うこともできるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; d = parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day

&amp;gt; addDays 1 &amp;lt;$&amp;gt; d
2018-09-18

&amp;gt; addDays 35 &amp;lt;$&amp;gt; d
2018-10-22&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;time パッケージを使うと時刻や日付の計算ができる&lt;/li&gt;
&lt;li&gt;現在の&lt;strong&gt;日本&lt;/strong&gt;時間を取得した場合は &lt;strong&gt;getCurrentTime&lt;/strong&gt; ではなく、&lt;strong&gt;getZonedTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;整形には &lt;strong&gt;formatTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;文字列から &lt;strong&gt;ZonedTime&lt;/strong&gt; や &lt;strong&gt;Day&lt;/strong&gt; に変換する際は &lt;strong&gt;parseTimeM&lt;/strong&gt; を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell入門の &lt;strong&gt;7.7 日付・時刻を扱う&lt;/strong&gt; にも3ページほど &lt;strong&gt;time&lt;/strong&gt; パッケージの解説があるので、気になる人はそちらも確認してみると良いかもしれません。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;getZonedTime&lt;/code&gt; に対して &lt;code&gt;formatTime defaultTimeLocale &amp;lt;フォーマット文字&amp;gt;&lt;/code&gt; の対応表です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; getZonedTime
2018-09-17 14:44:52.052040178 JST&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;narrow-table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;出力結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%_z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+ 900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%0z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%^z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%#z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%8z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+00000900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%_12z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+         900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JST&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon Sep 17 14:39:34 JST 2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:39&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:12&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:31&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02:40:55 PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;43&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;49&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;903244678000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%Q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.28084722&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1537163079&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018-09-17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;September&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;260&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Monday&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;37&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html</id><title type="text">stack でアプリケーションのバックトレースを取得する (デバッグ)</title><updated>2018-09-01T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell のデバッグ手法については、以下の記事がとても詳しく参考になります。素晴らしい記事です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はHaskellアプリケーションをデバックする際に、バックトレースのとても簡単な取得方法があったのでご紹介したいと思います。&lt;/p&gt;
&lt;p&gt;まとめると以下の2行です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
$ stack exec -- &amp;lt;exe_name&amp;gt; +RTS -xc&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;バックトレースの取得方法&#34;&gt;バックトレースの取得方法&lt;/h2&gt;
&lt;p&gt;まず、バックトレースを取得するために &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html&#34;&gt;GHC.Stack&lt;/a&gt; で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html#t:HasCallStack&#34;&gt;HasCallStack&lt;/a&gt; をクラス制約として追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記の例を雛形として、&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加するとどうなるのか確認していきましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Main.hs&lt;/code&gt; はこんな感じで &lt;strong&gt;f1&lt;/strong&gt; を呼び出します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しない場合は以下のような出力となります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f3&lt;/strong&gt; でエラーが発生したことはわかりますが、それ以外は何もわかりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-f2-f3-に-hascallstack-を追加した場合&#34;&gt;f1, f2, f3 に HasCallStack を追加した場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドしてみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと呼び出しの関係が &lt;code&gt;error&lt;/code&gt; -&amp;gt; &lt;code&gt;f3&lt;/code&gt; -&amp;gt; &lt;code&gt;f2&lt;/code&gt; -&amp;gt; &lt;code&gt;f1&lt;/code&gt; と表示されていますね！&lt;/p&gt;
&lt;h3 id=&#34;f2-f3-にのみ-hascallstack-を追加する&#34;&gt;f2, f3 にのみ HasCallStack を追加する&lt;/h3&gt;
&lt;p&gt;では、ここで &lt;code&gt;f1&lt;/code&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除くとどうなるか確認してみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f1&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いた影響により、先程出力されていた &lt;code&gt;f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt; が出なくなりました。&lt;/p&gt;
&lt;p&gt;しかし、依然として &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f3&lt;/strong&gt; のバックトレースは取得できています。そのため、本当に全てのバックトレースを取得したい場合は全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加しなけばなりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f3-にのみ-hascallstack-制約を追加する&#34;&gt;f1 と f3 にのみ HasCallStack 制約を追加する&lt;/h3&gt;
&lt;p&gt;次に中間の &lt;strong&gt;f2&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今度は &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f1&lt;/strong&gt; の両方の情報がが抜け落ちてしまいました。&lt;strong&gt;f2&lt;/strong&gt; で &lt;strong&gt;HasCallStack&lt;/strong&gt; の伝搬がストップしてしまったということです。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f2-のみに-hascallstack-を追加する&#34;&gt;f1 と f2 のみに HasCallStack を追加する&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予想通り &lt;strong&gt;f1&lt;/strong&gt;, &lt;strong&gt;f2&lt;/strong&gt;, &lt;strong&gt;f3&lt;/strong&gt; の全ての情報が途絶えましたね・・・。&lt;/p&gt;
&lt;h2 id=&#34;hascallstack-を省略したままバックトレースを取りたい&#34;&gt;HasCallStack を省略したままバックトレースを取りたい&lt;/h2&gt;
&lt;p&gt;先程の結果を見たとおり、正確な情報を取得するためには全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加する必要がありそうです。&lt;/p&gt;
&lt;p&gt;しかしながら、規模が大きくなってくるとそんなの不可能ですよね。&lt;/p&gt;
&lt;p&gt;そんな時には &lt;code&gt;stack&lt;/code&gt; の &lt;code&gt;--profile&lt;/code&gt; オプションと &lt;code&gt;+RTS -xc&lt;/code&gt; オプションを利用します。(&lt;code&gt;--profile&lt;/code&gt; オプションは &lt;strong&gt;ghc&lt;/strong&gt; のオプションを良い感じに追加してくれます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような素のコードに対しても、同様にバックトレースが取得できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
...
$ stack exec -- example +RTS -xc
*** Exception (reporting due to +RTS -xc): (THUNK_2_0), stack trace:
  Lib.f3,
  called from Lib.CAF:f3
  --&amp;gt; evaluated by: Lib.CAF:f2
  --&amp;gt; evaluated by: Lib.CAF:f1
  --&amp;gt; evaluated by: Main.CAF:main
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
CallStack (from -prof):
  Lib.f3 (src/Lib.hs:10:1-15)
  Lib.CAF:f3 (src/Lib.hs:10:1-2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なんか沢山表示されますが、&lt;code&gt;reporting due to +RTS -xc&lt;/code&gt; の部分を見ると、しっかりとバックトレースが取得できています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を使うとバックトレースが取得できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build --profile&lt;/code&gt; でビルドする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack exec -- &amp;lt;exe&amp;gt; +RTS -xc&lt;/code&gt; を使えば、明示的に &lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しなくても、バックトレースが取得できる&lt;/li&gt;
&lt;li&gt;アプリケーションのコードに対して有効&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program/#HasCallStack&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md#debugging&#34;&gt;Debugging – stack document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-flag--xc&#34;&gt;-xc option – GHC Users Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html</id><title type="text">stack-1.11 から location に extra-dep を指定できなくなります。</title><updated>2018-08-31T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;まだまだ先の話ですが、&lt;code&gt;extra-dep&lt;/code&gt; の書き方が &lt;strong&gt;Legacy syntax&lt;/strong&gt; になりました。&lt;code&gt;stack-1.11&lt;/code&gt; からはビルドできなくなります。&lt;/p&gt;
&lt;p&gt;以下の設定例は&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/yaml_configuration.md#packages&#34;&gt;公式ドキュメント&lt;/a&gt;の例を少し変更したものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;subdirs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正方法は、設定ファイルの &lt;code&gt;packages&lt;/code&gt; に &lt;code&gt;extra-dep: true&lt;/code&gt; と指定している部分を、以下のように &lt;code&gt;extra-deps&lt;/code&gt; へ追加するだけです。また、 &lt;code&gt;subdirs&lt;/code&gt; を指定している場合は単純に分割して指定します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp/haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;extra-deps&lt;/code&gt; の構文は従来の &lt;code&gt;stack&lt;/code&gt; でも使えるので、今から対応しておいても問題ないと思います。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;!--more--&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html</id><title type="text">RecordWildCards と Reader モナド</title><updated>2018-08-26T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Twitter&lt;/code&gt; で &lt;code&gt;RecordWildCards&lt;/code&gt; の話が流れて来たので &lt;code&gt;Reader&lt;/code&gt; モナドと組み合わせた例を1つご紹介します。&lt;/p&gt;
&lt;p&gt;この書き方は &lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さんが使っていてカッコイイ書き方だなぁと思った記憶があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;func &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- personName, personAge という名前でそのまま値を利用できる&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RecordWildCards&lt;/code&gt; に関しては既に色んな方が記事にしてくれているので、そちらをご参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rf0444.hatenablog.jp/entry/20120617/1339910411&#34;&gt;Haskellの言語拡張たち 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2016/12/18/181540&#34;&gt;波打たせるものの正体(エクステンシブル・タングル)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-wildcards&#34;&gt;GHC user guide 10.5.5. Record wildcards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;p&gt;あまり良い例が思いつかなかったのですが、 &lt;code&gt;Env&lt;/code&gt; に必要な情報を持たせておけば任意のタイミングで利用できて便利です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.IO.Class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.Trans.Reader&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.IORef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Time.LocalTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; envCounter  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envLogPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envUserName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;  counter &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;        { envCounter  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;        , envLogPath  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;./output.log&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;        , envUserName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;wado&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;  runReaderT (access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access) env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;  n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;counter = &amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; n]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;access ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;access &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;  modifyIORef envCounter (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-35&#34; title=&#34;35&#34;&gt;  now &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getZonedTime&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-36&#34; title=&#34;36&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;appendFile&lt;/span&gt; (toFilePath envLogPath)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [envUserName, &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;access&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot; (&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; now, &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs
counter = 3

$ cat ./output.log
wado: access (2018-08-26 14:04:07.132813451 JST)
wado: access (2018-08-26 14:04:07.133330363 JST)
wado: access (2018-08-26 14:04:07.133389916 JST)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;missing-fields-警告&#34;&gt;missing-fields 警告&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;    personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のようにフィールドが全て初期化されていないコードはコンパイル時に &lt;code&gt;missing-fields&lt;/code&gt; 警告が出ます。&lt;/p&gt;
&lt;p&gt;この警告を無視すると実行時エラーになる可能性があります。無視せずにしっかり修正しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;warning&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Wmissing&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;fields]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;’ &lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; initialised&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; personAge&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘f’&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;          f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;                personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dv&#34;&gt;46&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、通常のレコード構文でもフィールドが部分的にしか初期化されていない場合は、同様の警告がでます。(&lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さん、ご指摘ありがとうございます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/5334&#34;&gt;record wildcards: field not initialised reported as type error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RecordWildCards 言語拡張は現実世界ではとても便利 (レコードのフィールドがかなり沢山あったりするので)&lt;/li&gt;
&lt;li&gt;Reader とかと組み合わせるとオシャレ&lt;/li&gt;
&lt;li&gt;GHC の &lt;code&gt;missing-fields&lt;/code&gt; 警告は絶対に無視しない (実行時エラーが発生する可能性がある)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html</id><title type="text">path ＆ path-io パッケージ</title><updated>2018-08-21T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell でファイルやディレクトリを扱うプログラムを書く時によく使うパッケージとして &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/filepath-1.4.2&#34;&gt;filepath&lt;/a&gt; パッケージや &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/directory-1.3.1.5&#34;&gt;directory&lt;/a&gt; パッケージがあります。(Haskell入門の「4.4 ファイルシステム」に &lt;strong&gt;directory&lt;/strong&gt; パッケージの話が少し載っています。)&lt;/p&gt;
&lt;p&gt;これらのパッケージは結局のところただの文字列操作なので、バグを出さないためにはパッケージ利用者がかなり注意深く使わなければなりません。&lt;/p&gt;
&lt;p&gt;例えば、以下のようなパスは型レベルでは同じ文字列 (&lt;strong&gt;FilePath&lt;/strong&gt;) ですが&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathRel ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;pathRel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathAbs ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;pathAbs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;user&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ファイルへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;pathFile &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;png&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ディレクトリへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathDir ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;pathDir &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、&lt;strong&gt;FilePath&lt;/strong&gt; 型では&lt;strong&gt;相対パス&lt;/strong&gt;なのか&lt;strong&gt;絶対パス&lt;/strong&gt;なのか型レベルで判断する方法が無かったり、そもそもパスが&lt;strong&gt;ファイル&lt;/strong&gt;なのか&lt;strong&gt;ディレクトリ&lt;/strong&gt;なのかすらわからなかったりします。&lt;/p&gt;
&lt;p&gt;今回紹介するのは、型レベルでこれらをちゃんと分類できるようにしている &lt;a href=&#34;https://github.com/commercialhaskell/path&#34;&gt;path&lt;/a&gt; と &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;型レベルで &lt;strong&gt;相対パス&lt;/strong&gt; or &lt;strong&gt;絶対パス&lt;/strong&gt; と &lt;strong&gt;ファイル&lt;/strong&gt; or &lt;strong&gt;ディレクトリ&lt;/strong&gt; を表現するため、不正な操作はコンパイル時にチェックできるようになります。&lt;/p&gt;
&lt;p&gt;また、&lt;strong&gt;stack&lt;/strong&gt; の内部でも利用していたので、実用しても大丈夫だと思います。&lt;/p&gt;
&lt;p&gt;パッケージのバージョンは以下のとおりです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path-0.6.1&lt;/li&gt;
&lt;li&gt;path-io-1.3.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだまだ更新が活発なパッケージなので、path-0.7 では破壊的変更を含む更新があるようです。(&lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt;)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;path-パッケージ&#34;&gt;path パッケージ&lt;/h2&gt;
&lt;p&gt;ドキュメントが充実しているので &lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/README.md&#34;&gt;Readme&lt;/a&gt; を読めば使い方はすぐにわかると思います。&lt;/p&gt;
&lt;h3 id=&#34;データ型&#34;&gt;データ型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; の型は &lt;code&gt;FilePath&lt;/code&gt; を幽霊型 (Phantom type) を使ってラップしているだけです。(幽霊型については &lt;a href=&#34;https://qiita.com/nobkz/items/5926257a375a4a181dde&#34;&gt;ElmでPhantom Type (幽霊型)入門&lt;/a&gt; や &lt;a href=&#34;https://qiita.com/HirotoShioi/items/3444e215070144b8ca0f&#34;&gt;で、出たー！幽霊型だー！(Phantom Type)&lt;/a&gt; などが日本語のわかりやすい解説だと思います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで2つの型変数の意味は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - 相対パス or 絶対パス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; - ファイル or ディレクトリ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型変数 &lt;code&gt;b&lt;/code&gt; は実際には以下の型のどちらかを取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同様に型変数 &lt;code&gt;t&lt;/code&gt; は以下の型を取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的なパスの型は以下の4種類のどれかになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの相対パス&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型を見るだけでどんなパスなのか一目瞭然なので、めっちゃ良いですね。&lt;/p&gt;
&lt;h3 id=&#34;値の作り方&#34;&gt;値の作り方&lt;/h3&gt;
&lt;p&gt;型については説明したので、次は実際に &lt;code&gt;Path&lt;/code&gt; 型の値を作っていきましょう！&lt;/p&gt;
&lt;h4 id=&#34;パースする方法&#34;&gt;パースする方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型は4種類あるので、パーズする関数も4種類あります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MonadThrow m&lt;/code&gt; がついていますが、この &lt;code&gt;m&lt;/code&gt; は &lt;code&gt;IO&lt;/code&gt; だと思えば以下の型と同じですし&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; であれば、以下の型と同じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;難しいことはあまり気にせず、(&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/exceptions-0.10.0/Control-Monad-Catch.html#t:MonadThrow&#34;&gt;MonadThrow&lt;/a&gt; 型クラスのインスタンスになっている) 色んなモナドで使えるんだなと思えば良いと思います。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;ghci&lt;/code&gt; を使って動作を確認してみましょう！&lt;/p&gt;
&lt;pre class=&#34;shel&#34;&gt;&lt;code&gt;$ stack repl --package path
&amp;gt; import Path

# 型のチェック
&amp;gt; :t parseAbsDir &amp;quot;/&amp;quot;
parseAbsDir &amp;quot;/&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)
&amp;gt; :t parseAbsDir &amp;quot;./&amp;quot;
parseAbsDir &amp;quot;./&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)

# IO モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot;
&amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./&amp;quot;

# Maybe モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot; :: Maybe (Path Abs Dir)
Just &amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot; :: Maybe (Path Abs Dir)
Nothing

# 以下のような &amp;quot;../&amp;quot; を含むパスはパーズできない
&amp;gt; parseAbsDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;
&amp;gt; parseRelDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで文字列から &lt;code&gt;Path&lt;/code&gt; 型に変換する方法がわかりましたね！結構簡単です。&lt;/p&gt;
&lt;h4 id=&#34;template-haskell-quasiquotes&#34;&gt;Template Haskell &amp;amp; QuasiQuotes&lt;/h4&gt;
&lt;p&gt;コンパイル時にすでにファイルパスが決まっている時はテンプレートHaskellや準クォートを使うこともできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsDir &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsFile &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;[absdir|/home/chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;[reldir|chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;[absfile|/home/chris/x.txt|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;[relfile|chris/x.txt|]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで不正なパスはコンパイル時エラーとなるため、かなり安全ですね。&lt;/p&gt;
&lt;h3 id=&#34;path-から-filepath-への変換&#34;&gt;Path から FilePath への変換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型の値を &lt;code&gt;FilePath&lt;/code&gt; に変換するためには &lt;code&gt;toFilePath&lt;/code&gt; 関数を利用します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a////b//////&amp;quot;
&amp;quot;a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じで期待している文字列に変換されているか確かめることができます。&lt;/p&gt;
&lt;h3 id=&#34;パスの等価性&#34;&gt;パスの等価性&lt;/h3&gt;
&lt;p&gt;2つの &lt;code&gt;Path&lt;/code&gt; の等しさは単純に文字列の等価性として定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; x) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にいくつか試してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
True

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/c&amp;quot;
False

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
True&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パスの操作&#34;&gt;パスの操作&lt;/h3&gt;
&lt;p&gt;関数と実行結果のみを紹介していきます。&lt;/p&gt;
&lt;h4 id=&#34;つのパスの結合&#34;&gt;2つのパスの結合&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;/&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数は &lt;strong&gt;Dir&lt;/strong&gt; で第二引数は &lt;strong&gt;Rel&lt;/strong&gt; が指定されている点に注意してください。そのため、第一引数にファイルへのパスを与えようとするとコンパイルエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelFile &amp;quot;a.png&amp;quot;
&amp;quot;a/b/c/a.png&amp;quot;

&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;d&amp;quot;
&amp;quot;a/b/c/d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスの先頭部分からディレクトリパスを除去&#34;&gt;パスの先頭部分から、ディレクトリパスを除去&lt;/h4&gt;
&lt;p&gt;Data.List の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/base-4.11.1.0/Data-List.html#v:stripPrefix&#34;&gt;stripPrefix&lt;/a&gt; 関数と同じように利用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;stripProperPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/usr/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
&amp;quot;stack&amp;quot;

&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
*** Exception: NotAProperPrefix &amp;quot;/local/bin/&amp;quot; &amp;quot;/usr/local/bin/stack&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスから親ディレクトリパスを取得&#34;&gt;パスから親ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;ab&amp;quot;
&amp;quot;./&amp;quot;

&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;a/b/c/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ディレクトリパスから相対ディレクトリパスを取得&#34;&gt;ディレクトリパスから、相対ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dirname ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; dirname &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;

&amp;gt; dirname &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから相対ファイルパスを取得&#34;&gt;ファイルパスから相対ファイルパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;filename ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; filename &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;

&amp;gt; filename &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから拡張子を取得&#34;&gt;ファイルパスから拡張子を取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; fileExtension &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;

&amp;gt; fileExtension &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加&#34;&gt;ファイルパスに拡張子を追加&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ addFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;

&amp;gt; join $ (&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;既に拡張子があっても、追加する点に注意。&lt;/p&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加-既に拡張子がある場合は置き換える&#34;&gt;ファイルパスに拡張子を追加 (既に拡張子がある場合は置き換える)&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;setFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (-&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(-&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ setFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ (-&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;path-io&#34;&gt;path-io&lt;/h2&gt;
&lt;p&gt;ここまでで &lt;code&gt;Path&lt;/code&gt; 型の定義や値の作り方、操作する関数などを見てきました。&lt;/p&gt;
&lt;p&gt;しかしながら、これだけでは実際にファイルを作ったり削除したりすることはできません。文字列に変換して &lt;code&gt;directory&lt;/code&gt; パッケージを利用することもできますが、やはり &lt;code&gt;Path&lt;/code&gt; 型のまま使いたいですよね。&lt;/p&gt;
&lt;p&gt;そのためには &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージを利用すると良いです。内部的には &lt;code&gt;directory&lt;/code&gt; パッケージを再利用していますが、&lt;code&gt;Path&lt;/code&gt; 型で使えるようにラップしてくれています。(また、便利な関数もいくつか追加されています)&lt;/p&gt;
&lt;h3 id=&#34;サンプルプログラム&#34;&gt;サンプルプログラム&lt;/h3&gt;
&lt;p&gt;例えばこんな感じで使えます。以下の例はコマンドライン引数から受け取った文字列に拡張子 &lt;code&gt;.hs&lt;/code&gt; を追加して適当な内容で保存し、最後にディレクトリを再帰的にコピーする例です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path.IO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt; (when)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-12&#34; title=&#34;12&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-13&#34; title=&#34;13&#34;&gt;  args &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getArgs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-15&#34; title=&#34;15&#34;&gt;  when (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; args &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; src  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./src&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-17&#34; title=&#34;17&#34;&gt;        dest &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./.backup&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- 安全にディレクトリを作成&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; ensureDir [src, dest]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-22&#34; title=&#34;22&#34;&gt;    rawName &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; parseRelFile &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-23&#34; title=&#34;23&#34;&gt;    fn &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (src &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; rawName) &lt;span class=&#34;fu&#34;&gt;-&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;writeFile&lt;/span&gt; (toFilePath fn) &lt;span class=&#34;st&#34;&gt;&amp;quot;main :: IO ()\nmain = undefined\n&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ディレクトリを再帰的にコピー&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-28&#34; title=&#34;28&#34;&gt;    copyDirRecur&amp;#39; src dest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs aaa

$ tree -a .
.
├── .backup
│   └── aaa.hs
├── Sample.hs
└── src
    └── aaa.hs

2 directories, 3 files

$ cat src/aaa.hs
main :: IO ()
main = undefined

$ cat .backup/aaa.hs
main :: IO ()
main = undefined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;動いているようです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filepath&lt;/code&gt; や &lt;code&gt;directory&lt;/code&gt; パッケージでは文字列の操作となってしまうため、コンパイル時に不正な利用方法をチェックできない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; や &lt;code&gt;path-io&lt;/code&gt; は幽霊型を使って不正な利用をコンパイル時にチェックする&lt;/li&gt;
&lt;li&gt;実際に &lt;code&gt;stack&lt;/code&gt; でも利用されているパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-12-quiz-16.html</id><title type="text">二分木の操作 (Haskell Quiz No.16)</title><updated>2018-08-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-12-quiz-16.html"/><summary type="html">&lt;h2 id=&#34;haskell-quiz-no.16&#34;&gt;Haskell Quiz No.16&lt;/h2&gt;
&lt;p&gt;難易度: λλ&lt;/p&gt;
&lt;p&gt;以下のような二分木の定義があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下の操作を定義してみましょう！&lt;/p&gt;
&lt;h3 id=&#34;部分木を左右反転させた木を返す関数&#34;&gt;(1) 部分木を左右反転させた木を返す関数&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mirror ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;mirror &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;mirror 関数適用前&#34;&gt; → &lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_after.svg&#34; alt=&#34;mirror 関数適用後&#34;&gt;&lt;/p&gt;
&lt;p&gt;左の木に &lt;strong&gt;mirror&lt;/strong&gt; 関数を適用すると、右の木を返します。&lt;/p&gt;
&lt;h3 id=&#34;木の高さを計算する関数&#34;&gt;(2) 木の高さを計算する関数&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;depth ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;depth &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;depth&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;depth&lt;/strong&gt; 関数で上記の木の高さを計算すると &lt;strong&gt;3&lt;/strong&gt; になります。&lt;/p&gt;
&lt;h3 id=&#34;木が平衡かチェックする関数&#34;&gt;(3) 木が平衡かチェックする関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;平衡の定義: 左右の部分木の高さが高々1しか違わない&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isBalanced ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;isBalanced &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;isBalanced&#34;&gt;&lt;/p&gt;
&lt;p&gt;上記の木は &lt;strong&gt;平衡&lt;/strong&gt; です。&lt;/p&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#t:Functor&#34;&gt;Functor&lt;/a&gt; と &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#t:Foldable&#34;&gt;Foldable&lt;/a&gt; のインスタンスを定義してみましょう！(ここでは &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#v:fmap&#34;&gt;fmap&lt;/a&gt; と &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#v:foldMap&#34;&gt;foldMap&lt;/a&gt; を定義することにします。)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  fmap ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  foldMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答えは次回。&lt;/p&gt;
&lt;p&gt;※ 図の作成には &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt;というツールを使っています。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programming in Haskell (14.2 Foldables and friends)&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 Haskell で学ぶ原理と技法 (8.3.2 木による表現)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cis.syr.edu/courses/cis623/p2.html&#34;&gt;CIS 623&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;./07-24-quiz-15.html&#34;&gt;前回&lt;/a&gt;の問題と答えは以下の通りです。&lt;/p&gt;
&lt;h3 id=&#34;問題&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;難易度: λ&lt;/p&gt;
&lt;p&gt;葉に&lt;strong&gt;だけ&lt;/strong&gt;値を持つような&lt;strong&gt;二分木&lt;/strong&gt;を定義してみてください！&lt;/p&gt;
&lt;p&gt;図で書くとこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/2018/07-24/tree.svg&#34; alt=&#34;木の図&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;こたえ&#34;&gt;こたえ&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- より一般的な定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;解説&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;この定義を使って図の木を作るとこんな感じになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;t ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; t1 t3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;    t1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) t2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    t2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;    t3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;where&lt;/strong&gt; を使わない場合はこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;intTree ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;intTree &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;    (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2018-03-20T22:47:14+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/02/13/175220</id><title type="text">すごい JVM 言語 Frege をたのしく学ぼう！</title><updated>2016-02-13T17:52:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/02/13/175220"/><summary type="html">言わずと知れた Haskell の定番教科書『すごい Haskell たのしく学ぼう！』に登場するサンプルコードを、プログラミング言語 Frege に翻訳してみました。 github.com Frege について Frege は、JVM 上で動く純粋関数型プログラミング言語です。 github.com 最近、JVM 用 Lisp である Clojure の存在感を増してきている気がしますが、Frege はいわばその Haskell 版ですね。 文法的には Haskell + Java のメソッドを呼び出すための追加構文、といった感じ。細かな違いはありますが、Haskell が読める人間であれば…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/23/190729</id><title type="text">Alloy で自動定理証明っぽいやつ</title><updated>2015-12-23T19:42:18+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/23/190729"/><summary type="html">このエントリは Theorem Prover Advent Calendar 2015 - Qiita の 23 日目です。 とは言ってみたものの、内容はいわゆる定理証明器の話ではありません。モデル検査器 Alloy を利用して古典命題論理のシークエント計算をモデル化し、証明図を自動生成させることを目標にします。 なお、以下で部分的に引用しているモデル定義の完全版は alloy_sequent.als · GitHub にアップロードしてあります。 モデル化してみる 命題論理式の実装 まず対象となる論理式を Alloy で記述します。 abstract sig Formula {} sig A…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/13/193508</id><title type="text">NGK2015B で AWS + Alloy について話してきました</title><updated>2015-12-13T19:35:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/13/193508"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2015B / 名古屋合同懇親会 2015 忘年会 で発表してきました。 AWS は形式手法の夢を見るか？ - モデル検査器 Alloy によるインフラ設計 from y_taka_23 www.slideshare.net 当日の動画は [3] NGK2015B（名古屋合同懇親会 2015 忘年会） - YouTube から見ることができます。 TL;DR AWS でインフラ運用中 でも設定が大人の都合でカオスになりがちだったりして辛い よろしい、ならば形式手法だ サンプルコードを動かしてみよう！ まずはインストールしてみる 公式ページ Alloy …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/06/22/162833</id><title type="text">Haskellの型クラスを活用する</title><updated>2015-06-22T16:30:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/06/22/162833"/><summary type="html">Haskellの型クラスは、うまく使えば高いパフォーマンスと抽象度を両立できる、優れた仕組みである。その使い方のコツは、決して理解の難しいものではない。 小さな性質、大きな恩恵 プログラマは大きなものを小さく見せがちだ。オブジェクト指向プログラミングに慣れている人がやりがちなアンチパターンとして、欲しい機能と、それを分割する基準が現実に寄りすぎていて、一つ一つが巨大というものがある。 普通のプログラミングではありえない例かもしれないが、たとえば家を作りたいことを考える。「ベッド」「箪笥」「台所」「冷蔵庫」「トイレ」「風呂」のように設備ごとに分けた抽象化をしたいと考えるだろう。確かにこれは理に適…</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/17/125213</id><title type="text">最近やったこと</title><updated>2015-04-20T18:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/17/125213"/><summary type="html">最近やったことのまとめ。 CPSのモナド変換子 モナド変換子の速さを測ってみる - モナドとわたしとコモナドfumieval.hatenablog.com で作ったmtl-cの塵を払い、Hackageにリリースした。 StateTやWriterTは中でタプルを作ったり壊したりしているが、CPS変換するとそれがなくなり、しかも(&gt;&gt;=)も最適化されるためそれなりのパフォーマンスの向上が期待できる。モナドガチユーザにおすすめだ。 補足 GHC 7.10.1現在、StateTに関しては最適化がうまく効くらしく、Lazy、Strict、CPS版のパフォーマンスはほぼ同じだった。一方、CPS版Write…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/173848</id><title type="text">Haskellでいかに多態を表すか</title><updated>2015-04-06T17:46:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/173848"/><summary type="html">オブジェクト指向を行使する心 ではオブジェクト指向の必要性と仕組みについて議論した。 インスタンスは言語によって様々な実装方法があるが、大きく分けて「クラス(処理)のインデックス」か「処理そのもの」のどちらかがインスタンスの内部に隠れている。 と述べたが、Haskellの場合、クラスのインデックスに基づいた表現では、インターフェイスは型クラス、クラスはインスタンス、インスタンスは存在量化された型の値に対応する。…といってもややこしいことこの上ないので、実装例を考えてみよう。 まず、問題となっている愚直な実装は、Haskellではこんな感じだ。 data World = World { … } …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/141523</id><title type="text">オブジェクト指向を行使する心</title><updated>2015-04-06T14:16:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/141523"/><summary type="html">今日、とあるツイートでプログラミングにおけるよくある問題が顕現していた。 プログラミングしてそうなサークル探したら、ゲーム公開してて、ソースコード公開されてたから見た。 pic.twitter.com/7W09sb9DFa— タコス(祭り) (@tacosufestival) 2015, 4月 4 奇妙な行コメントには目を瞑るとして、このコードは要約すれば以下のような処理を実現していることが窺える。 ゲームプログラミングでは、現在のシーンによって処理を切り替える必要がある。メニュー画面ならメニューの処理を、戦闘画面なら戦闘を、マップならマップの表示をそれぞれ行う。 現在のシーンの種類は変数によ…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
&#34;Haslell Platform 2014.2.0.0&#34;を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/20/155326</id><title type="text">モノイドと継続渡しの道具箱</title><updated>2015-03-21T06:54:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/20/155326"/><summary type="html">関数型言語Haskellにおいて、普通は計算の結果は関数の戻り値として扱うが、「結果を受け取る関数」 に渡すという継続渡しというスタイルもある。これは単なる冗長なやり方ではなく、様々な興味深い性質を持つ。 基本形は、aという値を渡すところを ∀r. (a -&gt; r) -&gt; r のような表現にする。たとえば、与えられた数の42倍を渡したいとき、そのまま\x -&gt; x * 42ではなく、\x f -&gt; f (x * 42)と書く。もちろんこれだけではありがたみが分からない。 さて、与えられた文字列の中のうち、大文字のアルファベットを取り出し、それがアルファベットの何番目か計算するプログラムを作りた…</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
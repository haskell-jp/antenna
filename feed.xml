<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2019-06-19T22:45:41+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/sgmryk/items/c467af40c6c9df0f95a1</id><title type="text">Lensの仕組みがわかった</title><updated>2019-06-19T22:45:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sgmryk/items/c467af40c6c9df0f95a1"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://qiita.com/kaityo256/items/bfd327ecf4e79b8ab83d</id><title type="text">格子計算プログラム生成言語Formuraを使ってみる その3</title><updated>2019-06-14T12:37:34+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaityo256/items/bfd327ecf4e79b8ab83d"/></entry><entry><id>https://qiita.com/kaityo256/items/7ff1fb39986414654824</id><title type="text">格子計算プログラム生成言語Formuraを使ってみる その2</title><updated>2019-06-14T12:37:08+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaityo256/items/7ff1fb39986414654824"/></entry><entry><id>https://qiita.com/kaityo256/items/8b6c9ca1abeeef64f414</id><title type="text">格子計算プログラム生成言語Formuraを使ってみる その1</title><updated>2019-06-14T12:36:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaityo256/items/8b6c9ca1abeeef64f414"/></entry><entry><id>https://qiita.com/kaityo256/items/2dd11363769cb5f29bc2</id><title type="text">格子計算プログラム生成言語Formuraを使ってみる その4</title><updated>2019-06-12T18:45:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaityo256/items/2dd11363769cb5f29bc2"/></entry><entry><id>https://qiita.com/cutsea110/items/4c891a5e20b4ff33e97b</id><title type="text">最短経路問題をCofree+Nexus構成で解く</title><updated>2019-06-12T02:30:06+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/cutsea110/items/4c891a5e20b4ff33e97b"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id><title type="text">stack image コマンドなしに Haskell アプリの Docker イメージを作る</title><updated>2019-06-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;自分は Haskell アプリケーションの Docker イメージを作るのに &lt;code&gt;stack image&lt;/code&gt; コマンドを愛用している． しかし，悲しいことに &lt;strong&gt;stack v2 からはこの機能が無くなってしまう&lt;/strong&gt; のだ． ということで，代替方法を考えてみた，というお話．&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;matsubara0507/whoami というリポジトリで試したので，その PR をみると良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/whoami/pull/6&#34;&gt;Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結論としては stack の &lt;code&gt;--local-bin-path&lt;/code&gt; オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，&lt;code&gt;docker build&lt;/code&gt; でコピーしているだけ．&lt;/p&gt;
&lt;h2 id=&#34;stack-image-コマンド&#34;&gt;stack image コマンド&lt;/h2&gt;
&lt;p&gt;簡単に今は亡き &lt;code&gt;stack image&lt;/code&gt; コマンドを説明する． このコマンドは &lt;code&gt;stack image container&lt;/code&gt; というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． &lt;code&gt;docker&lt;/code&gt; コマンドで普通にイメージを作るのと違い，&lt;code&gt;.stack-work&lt;/code&gt; のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(&lt;code&gt;stack&lt;/code&gt; による初回ビルドはとても時間がかかる…)．&lt;/p&gt;
&lt;p&gt;使い方は簡単で，次のようなのを stack.yaml に記述し &lt;code&gt;stack --docker image container&lt;/code&gt; とするだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git-plantation-bin&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/ubuntu-for-haskell:git&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; の方の設定は Docker Integration と呼ばれるもので，&lt;code&gt;repo&lt;/code&gt; で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの &lt;code&gt;.stack-work&lt;/code&gt; を利用する)． &lt;code&gt;image&lt;/code&gt; の方の設定が &lt;code&gt;stack image&lt;/code&gt; の設定で，&lt;code&gt;base&lt;/code&gt; が作成するイメージのベースイメージだ． やってることは実行ファイルを &lt;code&gt;.stack-work&lt;/code&gt; からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さて，冒頭に書いた通り，&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate&#34;&gt;&lt;strong&gt;この機能は stack の新しいバージョンでは無くなってしまう&lt;/strong&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「&lt;a href=&#34;https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker&#34;&gt;Building Haskell Apps with Docker&lt;/a&gt;」という記事を読むと良いらしい．&lt;/p&gt;
&lt;h2 id=&#34;マルチステージビルドする&#34;&gt;マルチステージビルドする&lt;/h2&gt;
&lt;p&gt;上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; fpco/stack-build:lts-13.21 as bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; . /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd /root/work &amp;amp;&amp;amp; stack install --system-ghc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=bin /root/.local/bin /root/.local/bin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stack の Docker Integration は残ってるので &lt;code&gt;stack --docker build&lt;/code&gt; とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは &lt;code&gt;stack install&lt;/code&gt; により &lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルを &lt;code&gt;/root/.local/bin&lt;/code&gt; にコピーし，二つ目のステージではさらにこれだけを最終的に作られるイメージにコピーしている． ちなみに，&lt;code&gt;/root/.local/bin&lt;/code&gt; は stack が決めてるローカル実行ファイルを置くパスで，&lt;code&gt;stack path&lt;/code&gt; で確認できる(OS によって違うはず)．&lt;/p&gt;
&lt;p&gt;でもこれ一つ欠点があって． &lt;code&gt;docker build&lt;/code&gt; するときに，肥大化しがちな &lt;code&gt;.stack-work&lt;/code&gt; をいちいち上げる必要があるので，だんだん &lt;code&gt;docker build&lt;/code&gt; の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． &lt;code&gt;.dockerignore&lt;/code&gt; で無視できれば良いのだが，それだと &lt;code&gt;stack insatll&lt;/code&gt; できない(&lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ &lt;code&gt;.dockerignore&lt;/code&gt; に書くのはめんどくさい)．&lt;/p&gt;
&lt;h2 id=&#34;local-bin-path-オプション&#34;&gt;local-bin-path オプション&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; する時は &lt;code&gt;.stack-work&lt;/code&gt; を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを &lt;code&gt;stack install&lt;/code&gt; を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/730&#34;&gt;Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;stack --local-bin-path=any_path install&lt;/code&gt; とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから &lt;code&gt;docker build&lt;/code&gt; で実行ファイルコピーしてくるように Dockerfile を書くだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path} /root/.local/bin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ARG&lt;/code&gt; を使ったので次のように &lt;code&gt;docker build&lt;/code&gt; コマンドのオプションで指定する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いい感じ！ もちろん &lt;code&gt;.dockerignore&lt;/code&gt; に &lt;code&gt;.stack-work&lt;/code&gt; が書いてあるのでイメージのビルドも速い．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これで心置き無く新しい stack のバージョンを使うことができる．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/nishimura/items/827b78aab6e529c56b29</id><title type="text">MacでHaskellを使ってJavaScriptをビルドする環境(GHCJS)を最短で整える（長い）</title><updated>2019-06-08T21:18:08+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/nishimura/items/827b78aab6e529c56b29"/></entry><entry><id>https://qiita.com/rs06042/items/5424538a5769c51fab3c</id><title type="text">Vagrant仮想環境に Yesod-MySQL をインストール</title><updated>2019-06-04T08:54:13+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/rs06042/items/5424538a5769c51fab3c"/></entry><entry><id>https://qiita.com/isamuJazz/items/c25c0bb836b3bc073ef0</id><title type="text">[初心者向け]リスト操作関数map,reduce,filterの各言語の簡単なサンプル</title><updated>2019-06-03T20:02:49+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/isamuJazz/items/c25c0bb836b3bc073ef0"/></entry><entry><id>https://qiita.com/cutsea110/items/6a28049337166d4d9c3f</id><title type="text">累積百ます計算,パスカルの三角形,関・ベルヌーイ数を計算する</title><updated>2019-05-31T08:37:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/cutsea110/items/6a28049337166d4d9c3f"/></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://qiita.com/mod_poppo/items/793fdb08e62591d6f3fb</id><title type="text">【低レベルHaskell】Haskell (GHC) でもインラインアセンブリに肉薄したい！</title><updated>2019-05-28T01:42:53+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/793fdb08e62591d6f3fb"/></entry><entry><id>https://qiita.com/toru0408/items/db417dc7f761d00839eb</id><title type="text">HaskellとScottyで簡単にAPIを構築する</title><updated>2019-05-27T00:40:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/toru0408/items/db417dc7f761d00839eb"/></entry><entry><id>https://qiita.com/hnw/items/3f7d27b742c5a1a99a9a</id><title type="text">HaskellでAtCoderの問題を解く（入力の高速化編）</title><updated>2019-05-27T00:29:16+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/hnw/items/3f7d27b742c5a1a99a9a"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id><title type="text">rio + extensible なフレームワーク: mix</title><updated>2019-05-27T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近はよく &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．&lt;/p&gt;
&lt;p&gt;ちなみに，それぞれのパッケージを軽く説明すると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude&lt;/li&gt;
&lt;li&gt;extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mix-パッケージ&#34;&gt;mix パッケージ&lt;/h2&gt;
&lt;p&gt;リポジトリはこれ:&lt;/p&gt;
&lt;h5 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;183&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs&#34;&gt;&lt;/iframe&gt;&lt;/h5&gt;
&lt;p&gt;mix パッケージの目的は rio パッケージの &lt;code&gt;RIO env a&lt;/code&gt; モナドの &lt;code&gt;env&lt;/code&gt; の部分を extensible パッケージを用いて簡単に構築することであり，&lt;code&gt;env&lt;/code&gt; をプラグインとして構築する． プラグインで構築という部分は &lt;a href=&#34;https://hackage.haskell.org/package/tonatona&#34;&gt;tonatona&lt;/a&gt; から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，&lt;code&gt;rio&lt;/code&gt; パッケージのロガーを利用して次のような簡易的なプログラムをかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  MixLogger.logDebug &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is debug: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;  MixLogger.logInfo  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;  MixLogger.logWarn  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is warn: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  MixLogger.logError &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is error: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hoge&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tonatona との違いは &lt;code&gt;RIO env a&lt;/code&gt; の &lt;code&gt;env&lt;/code&gt; に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(&lt;code&gt;#logger &amp;lt;@=&amp;gt; ...&lt;/code&gt; とか)を記述するだけで良い． これの実行結果は次のようになる:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，&lt;code&gt;extensible&lt;/code&gt; の魔法によるものである．&lt;/p&gt;
&lt;h3 id=&#34;extensible-の魔法&#34;&gt;extensible の魔法&lt;/h3&gt;
&lt;p&gt;もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; logFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  opt &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;  withLogFunc opt &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \logFunc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runRIO &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;    logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;    logDebug &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;withLogFunc opt&lt;/code&gt; の型は &lt;code&gt;MonadUnliftIO m =&amp;gt; (LogFunc -&amp;gt; m a) -&amp;gt; m a&lt;/code&gt; となっている． なぜこのような形になっているのかの秘密は(たぶん) &lt;code&gt;MonadUnliftIO&lt;/code&gt; にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withLogFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 継続(Continuation)のモナドトランスフォーム仕様の型&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runContT ::&lt;/span&gt; ((a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;継続は &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として &lt;strong&gt;レコードのフィールドをモナディックに走査できる！&lt;/strong&gt; というのがある(正確には &lt;code&gt;Applicative&lt;/code&gt; ですが)． 例えば &lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence&#34;&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; という関数が走査する関数だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hsequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; f h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;Plugin&lt;/code&gt; という型はただの継続で，&lt;code&gt;Mix.run plugin&lt;/code&gt; は単純に &lt;code&gt;runContT&lt;/code&gt; した中で &lt;code&gt;runRIO env action&lt;/code&gt; しているだけだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; a m env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; env a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;run plugin act &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;`runRIO`&lt;/span&gt; act) &lt;span class=&#34;ot&#34;&gt;`withPlugin`&lt;/span&gt; plugin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withPlugin ::&lt;/span&gt; (env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;withPlugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; runContT&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toPlugin ::&lt;/span&gt; ((env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;toPlugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．&lt;/p&gt;
&lt;h2 id=&#34;プラグイン&#34;&gt;プラグイン&lt;/h2&gt;
&lt;p&gt;プラグインと言ったもののただの継続だ． 今あるのは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logger&lt;/li&gt;
&lt;li&gt;Config&lt;/li&gt;
&lt;li&gt;API Client (GitHub, Drone)&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．&lt;/p&gt;
&lt;h3 id=&#34;logger-と-config&#34;&gt;Logger と Config&lt;/h3&gt;
&lt;p&gt;この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． &lt;code&gt;&amp;quot;config&amp;quot;&lt;/code&gt; フィールドと任意の型と紐づかせている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixConfig.askConfig&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; config &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Config は試しに作ってみたけど，いまいち使い道がない．&lt;/p&gt;
&lt;h3 id=&#34;api-client&#34;&gt;API Client&lt;/h3&gt;
&lt;p&gt;API クライアントを利用するのに必要な情報(API トークンなど)を &lt;code&gt;env&lt;/code&gt; に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のものを作った． GitHub のクライアントは &lt;a href=&#34;https://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージを Drone のクライアントは(僕が作った) &lt;a href=&#34;https://hackage.haskell.org/package/drone&#34;&gt;drone&lt;/a&gt; パッケージを使う． 各プラグインのパッケージは &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github&#34;&gt;mix-plugin-github&lt;/a&gt; と &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone&#34;&gt;mix-plugin-drone&lt;/a&gt; として matsubara0507/mix.hs リポジトリに置いてある．&lt;/p&gt;
&lt;p&gt;こんな感じに使える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Drone&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.Endpoints.Users&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Drone&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt;      &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt;     (getEnv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub.Token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;drone&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone.Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;  gToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;  dHost  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_HOST&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;  dToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_TOKEN&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; logConf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;      dClient &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;host &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; dHost &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;port &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;token &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; dToken &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;      plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;            &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logConf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;github &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;drone  &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixDrone.buildPlugin dClient &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;  Mix.run plugin app&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch GitHub user info:&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;  resp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch GitHub.userInfoCurrent&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; resp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;GitHub fetch error....&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ghLogin user &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch Drone user info:&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; title=&#34;36&#34;&gt;  tryAny (responseBody &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; MixDrone.fetch Drone.getSelf) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;Drone CI fetch error...&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; title=&#34;38&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; user &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;login &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; title=&#34;39&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; title=&#34;40&#34;&gt;    ghLogin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; GitHub.untagName &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; GitHub.userLogin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行するとこんな感じ:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本来は &lt;code&gt;env&lt;/code&gt; を &lt;code&gt;Reader&lt;/code&gt; モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;shell-コマンド&#34;&gt;Shell コマンド&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;shelly&lt;/a&gt; というパッケージを利用したシェルコマンドの実行を支援する． &lt;code&gt;env&lt;/code&gt; にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを &lt;code&gt;cd&lt;/code&gt; した上で実行してくれる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Shell&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixShell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shelly&lt;/span&gt;            &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;work&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  paths &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixShell.exec &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; Shell.ls &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;  forM_ paths &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; MixLogger.logInfo (display &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; Shell.toTextIgnore path)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;work   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/spinylobster/items/713c3777374c02af6896</id><title type="text">Haskell のリストを左結合で連結すると効率が悪い理由</title><updated>2019-05-26T11:09:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/spinylobster/items/713c3777374c02af6896"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id><title type="text">Drone Plugin を作ってみた: slack-notify-log</title><updated>2019-05-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の &lt;a href=&#34;https://github.com/drone-plugins/drone-slack&#34;&gt;&lt;code&gt;plugin/slack&lt;/code&gt;&lt;/a&gt; では出来なそうだったので，Plugin を自作した，というお話．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go&lt;/a&gt; を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/drone/drone-go/drone&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/pkg/errors&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;	log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;golang.org/x/oauth2&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;  config := &lt;span class=&#34;bu&#34;&gt;new&lt;/span&gt;(oauth2.Config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;  client := drone.NewClient(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    p.Config.DroneHost,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;    config.Client(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;      context.Background(),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;      &amp;amp;oauth2.Token{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;        AccessToken: p.Config.DroneToken,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;      },&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    ),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;can&amp;#39;t fetch drone logs: builds/%d/logs/%d/%d&amp;quot;&lt;/span&gt;, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Success: fetch drone logs (lines num is %d)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(logs))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，実際の Plugin の使い方はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; notify drone log to slack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/slack-notify-log&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;    template:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      {{#success build.status}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;        {{repo.name}} is Success!&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;      {{else}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;        {{repo.name}} is Failure...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      {{/success}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;token:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; slack_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;channel:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bot-test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;step_number:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;drone_host:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_host&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;drone_token:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;status:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; success&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; failure&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各 &lt;code&gt;settings&lt;/code&gt; は:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; : スニペットのコメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt; : slack にポストするための API トークン
&lt;ul&gt;
&lt;li&gt;個人トークンや &lt;a href=&#34;https://slack.com/apps/A0F7YS25R-bots&#34;&gt;Bots App&lt;/a&gt; などから生成する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channel&lt;/code&gt; : 通知先チャンネル
&lt;ul&gt;
&lt;li&gt;無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step_number&lt;/code&gt; : 何ステップ目のログを通知したいか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step_number: 1&lt;/code&gt; は git clone になる点に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_host&lt;/code&gt; : この CI を実行したい Drone のホスト
&lt;ul&gt;
&lt;li&gt;別にシークレットにする必要はないけど&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cloud.drone.io&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_token&lt;/code&gt; : この CI を実行したい Drone の API トークン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行結果はこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-drone-slack-notify-log/example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;これは matsubara0507/drone-slack-notify-log のビルドステップ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか他に良い方法が絶対にある気がするんだけどな…&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/kaizen_nagoya/items/4e27a6905a57a1e8d34c</id><title type="text">Qiita-dockerお宝鑑定団(2)haskell 収集中</title><updated>2019-05-25T09:58:56+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaizen_nagoya/items/4e27a6905a57a1e8d34c"/></entry><entry><id>https://qiita.com/kaizen_nagoya/items/a305b12393bf7cdd55d7</id><title type="text">haskell 入門の入門</title><updated>2019-05-25T09:52:17+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kaizen_nagoya/items/a305b12393bf7cdd55d7"/></entry><entry><id>https://qiita.com/Tatsuki-I/items/62b0d0691557c5305fdb</id><title type="text">Programming in Haskell 第2版 目次の雑和訳</title><updated>2019-05-19T20:17:06+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Tatsuki-I/items/62b0d0691557c5305fdb"/></entry><entry><id>https://qiita.com/tanakh/items/a1fb13f78e0576415de3</id><title type="text">「サイゼリヤで1000円あれば最大何kcal摂れるのか」をSMTソルバー(Z3)で解いてみた。</title><updated>2019-05-18T12:20:19+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tanakh/items/a1fb13f78e0576415de3"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id><title type="text">Ruby のパターンマッチング機能を MinRuby で試す</title><updated>2019-05-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Ruby 2.7 で導入予定で，すでに &lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby リポジトリ&lt;/a&gt;の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．&lt;/p&gt;
&lt;h2 id=&#34;パターンマッチング&#34;&gt;パターンマッチング&lt;/h2&gt;
&lt;p&gt;(わざわざ解説することでもないけど)&lt;/p&gt;
&lt;p&gt;パターンマッチングは &lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文のようなプログラムの分岐に使うプログラミング機能． &lt;code&gt;if&lt;/code&gt; 文が真偽値を返す条件式 (e.g. &lt;code&gt;a &amp;gt; 0 &amp;amp;&amp;amp; x == &amp;#39;hoge&amp;#39;&lt;/code&gt;) の結果により分岐し，&lt;code&gt;case&lt;/code&gt; 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．&lt;/p&gt;
&lt;p&gt;例えば Ruby に導入されたパターンマッチングだと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; var &lt;span class=&#34;co&#34;&gt;# var のデータ構造により分岐&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is empty list&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is singleton: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;a&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 変数 a に値を代入する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;:hoge&lt;/span&gt;, a, b]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is hoge list: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;[a, b]&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 一要素目が :hoge の3要素リスト&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;No match: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;var&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# else はどれにもマッチしないとき&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．&lt;/p&gt;
&lt;p&gt;ちなみに，パターンマッチングがあれば基本的に &lt;code&gt;if&lt;/code&gt; 文も &lt;code&gt;case&lt;/code&gt; 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．&lt;/p&gt;
&lt;h3 id=&#34;ruby-のパターンマッチング&#34;&gt;Ruby のパターンマッチング&lt;/h3&gt;
&lt;p&gt;ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:&lt;/p&gt;
&lt;iframe class=&#34;embedly-embed&#34; src=&#34;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fspeakerdeck.com%2Fplayer%2Fa853a73bba9d48ae88860f7c9b068334&amp;amp;url=https%3A%2F%2Fspeakerdeck.com%2Fk_tsj%2Fpattern-matching-new-feature-in-ruby-2-dot-7&amp;amp;image=https%3A%2F%2Fspeakerd.s3.amazonaws.com%2Fpresentations%2Fa853a73bba9d48ae88860f7c9b068334%2Fslide_0.jpg%3F510667&amp;amp;key=internal&amp;amp;type=text%2Fhtml&amp;amp;schema=speakerdeck&#34; width=&#34;500&#34; height=&#34;299&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; fullscreen&#34; allowfullscreen=&#34;true&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;すでに &lt;a href=&#34;https://www.youtube.com/watch?v=paBlgsqoKk8&#34;&gt;YouTube で動画も公開された&lt;/a&gt;． ちなみに，2012 ぐらいからずっと作っていたらしい．&lt;/p&gt;
&lt;p&gt;Elixir のピンパターン(&lt;code&gt;^var&lt;/code&gt;)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;001&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;002&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;003&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [b, c] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;004&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;=&amp;gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;005&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; [a,b,c]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;=&amp;gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;in ..&lt;/code&gt; ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文でもこんな感じの挙動)．&lt;/p&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;h3 id=&#34;ruby2.7-dev&#34;&gt;Ruby2.7-dev&lt;/h3&gt;
&lt;p&gt;前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; を使った．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rbenv install 2.7.0-dev&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;minruby&#34;&gt;MinRuby&lt;/h3&gt;
&lt;p&gt;パターンマッチングを試す対象として，「&lt;a href=&#34;https://ascii.jp/elem/000/001/230/1230449/&#34;&gt;Ruby で学ぶ Ruby&lt;/a&gt;」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．&lt;/p&gt;
&lt;p&gt;最終的な処理系は &lt;a href=&#34;https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb&#34;&gt;Ruby コード一枚&lt;/a&gt;でできている(一番めんどくさい構文解析を &lt;a href=&#34;https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper&#34;&gt;ripper&lt;/a&gt; とそのラッパー &lt;a href=&#34;https://github.com/mame/minruby&#34;&gt;minruby&lt;/a&gt; というのに任せているので):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# interp.rb&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;require &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;    tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) + evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) - evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) * evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) / evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) % evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) == evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) != evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;      last = evaluate(tree[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;    last&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;    genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;    args = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;      args[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;    mhd = genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-63&#34; title=&#34;63&#34;&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-64&#34; title=&#34;64&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-65&#34; title=&#34;65&#34;&gt;      new_lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-66&#34; title=&#34;66&#34;&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-67&#34; title=&#34;67&#34;&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-68&#34; title=&#34;68&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-69&#34; title=&#34;69&#34;&gt;        new_lenv[params[i]] = args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-70&#34; title=&#34;70&#34;&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-71&#34; title=&#34;71&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-72&#34; title=&#34;72&#34;&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-73&#34; title=&#34;73&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-74&#34; title=&#34;74&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-75&#34; title=&#34;75&#34;&gt;    ary = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-76&#34; title=&#34;76&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-77&#34; title=&#34;77&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-78&#34; title=&#34;78&#34;&gt;      ary[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-79&#34; title=&#34;79&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-80&#34; title=&#34;80&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-81&#34; title=&#34;81&#34;&gt;    ary&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-82&#34; title=&#34;82&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-83&#34; title=&#34;83&#34;&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-84&#34; title=&#34;84&#34;&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-85&#34; title=&#34;85&#34;&gt;    ary[idx]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-86&#34; title=&#34;86&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-87&#34; title=&#34;87&#34;&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-88&#34; title=&#34;88&#34;&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-89&#34; title=&#34;89&#34;&gt;    val = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-90&#34; title=&#34;90&#34;&gt;    ary[idx] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-91&#34; title=&#34;91&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-92&#34; title=&#34;92&#34;&gt;    hsh = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-93&#34; title=&#34;93&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-94&#34; title=&#34;94&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-95&#34; title=&#34;95&#34;&gt;      key = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-96&#34; title=&#34;96&#34;&gt;      val = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-97&#34; title=&#34;97&#34;&gt;      hsh[key] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-98&#34; title=&#34;98&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-99&#34; title=&#34;99&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-100&#34; title=&#34;100&#34;&gt;    hsh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-101&#34; title=&#34;101&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-102&#34; title=&#34;102&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-103&#34; title=&#34;103&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-104&#34; title=&#34;104&#34;&gt;str = minruby_load()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-105&#34; title=&#34;105&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-106&#34; title=&#34;106&#34;&gt;tree = minruby_parse(str)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-107&#34; title=&#34;107&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-108&#34; title=&#34;108&#34;&gt;genv = {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-109&#34; title=&#34;109&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-110&#34; title=&#34;110&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-111&#34; title=&#34;111&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-112&#34; title=&#34;112&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-113&#34; title=&#34;113&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-114&#34; title=&#34;114&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-115&#34; title=&#34;115&#34;&gt;lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-116&#34; title=&#34;116&#34;&gt;evaluate(tree, genv, lenv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コードを見て分かるように(?)，配列の一引数目のリテラルで &lt;code&gt;case&lt;/code&gt; 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + &lt;code&gt;case&lt;/code&gt; 文による分岐はパターンマッチングにうってつけのユースケースだ．&lt;/p&gt;
&lt;h3 id=&#34;minruby-パターンマッチング&#34;&gt;MinRuby + パターンマッチング&lt;/h3&gt;
&lt;p&gt;作業リポジトリはこれ:&lt;/p&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;code&gt;pattern-match&lt;/code&gt; というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは &lt;code&gt;evaluate&lt;/code&gt; 関数だけなのでそこだけ載せる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;, lit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;    lit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;    evaluate(exp1, genv, lenv) &amp;lt; evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;    evaluate(exp1, genv, lenv) &amp;lt;= evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;    evaluate(exp1, genv, lenv) &amp;gt;= evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-26&#34; title=&#34;26&#34;&gt;    evaluate(exp1, genv, lenv) &amp;gt; evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;, *stmts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-28&#34; title=&#34;28&#34;&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-29&#34; title=&#34;29&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; stmts[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-31&#34; title=&#34;31&#34;&gt;      last = evaluate(stmts[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-32&#34; title=&#34;32&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-34&#34; title=&#34;34&#34;&gt;    last&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-35&#34; title=&#34;35&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;, var_name, var_value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-36&#34; title=&#34;36&#34;&gt;    lenv[var_name] = evaluate(var_value, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-37&#34; title=&#34;37&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;, var_name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-38&#34; title=&#34;38&#34;&gt;    lenv[var_name]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-39&#34; title=&#34;39&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;, cond, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-41&#34; title=&#34;41&#34;&gt;      evaluate(exp1, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-42&#34; title=&#34;42&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-43&#34; title=&#34;43&#34;&gt;      evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-45&#34; title=&#34;45&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;, cond, exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-46&#34; title=&#34;46&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-47&#34; title=&#34;47&#34;&gt;      evaluate(exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-48&#34; title=&#34;48&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-49&#34; title=&#34;49&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;, func_name, func_args, func_body&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-50&#34; title=&#34;50&#34;&gt;    genv[func_name] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, func_args, func_body]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-51&#34; title=&#34;51&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;, func_name, *func_args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-52&#34; title=&#34;52&#34;&gt;    args = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-53&#34; title=&#34;53&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-54&#34; title=&#34;54&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; func_args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-55&#34; title=&#34;55&#34;&gt;      args[i] = evaluate(func_args[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-56&#34; title=&#34;56&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-58&#34; title=&#34;58&#34;&gt;    mhd = genv[func_name]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-59&#34; title=&#34;59&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-60&#34; title=&#34;60&#34;&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-61&#34; title=&#34;61&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-62&#34; title=&#34;62&#34;&gt;      new_lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-63&#34; title=&#34;63&#34;&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-64&#34; title=&#34;64&#34;&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-65&#34; title=&#34;65&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-66&#34; title=&#34;66&#34;&gt;        new_lenv[params[i]] = args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-67&#34; title=&#34;67&#34;&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-68&#34; title=&#34;68&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-69&#34; title=&#34;69&#34;&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-70&#34; title=&#34;70&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-71&#34; title=&#34;71&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;, ary_values&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-72&#34; title=&#34;72&#34;&gt;    ary = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-73&#34; title=&#34;73&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-74&#34; title=&#34;74&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; ary_values[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-75&#34; title=&#34;75&#34;&gt;      ary [i] = evaluate(ary_values[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-76&#34; title=&#34;76&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-77&#34; title=&#34;77&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-78&#34; title=&#34;78&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;, ary_exp, idx_exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-79&#34; title=&#34;79&#34;&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-80&#34; title=&#34;80&#34;&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-81&#34; title=&#34;81&#34;&gt;    ary[idx]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-82&#34; title=&#34;82&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;, ary_exp, idx_exp, value_exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-83&#34; title=&#34;83&#34;&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-84&#34; title=&#34;84&#34;&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-85&#34; title=&#34;85&#34;&gt;    val = evaluate(value_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-86&#34; title=&#34;86&#34;&gt;    ary[idx] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-87&#34; title=&#34;87&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;, *key_values&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-88&#34; title=&#34;88&#34;&gt;    hsh = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-89&#34; title=&#34;89&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-90&#34; title=&#34;90&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; key_values[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-91&#34; title=&#34;91&#34;&gt;      key = evaluate(key_values[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-92&#34; title=&#34;92&#34;&gt;      val = evaluate(key_values[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-93&#34; title=&#34;93&#34;&gt;      hsh[key] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-94&#34; title=&#34;94&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-95&#34; title=&#34;95&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-96&#34; title=&#34;96&#34;&gt;    hsh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-97&#34; title=&#34;97&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-98&#34; title=&#34;98&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配列にマッチさせる場合，&lt;code&gt;in [a, b, c]&lt;/code&gt; の &lt;code&gt;[]&lt;/code&gt; を省くことができる． また，&lt;code&gt;in &amp;quot;hoge&amp;quot;, *rest&lt;/code&gt; は配列の残りの要素全てを &lt;code&gt;*rest&lt;/code&gt; にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-minruby-パターンマッチング&#34;&gt;おまけ: minruby + パターンマッチング&lt;/h2&gt;
&lt;p&gt;試しに &lt;code&gt;minruby&lt;/code&gt; もパターンマッチで書き換えてみた． 差分は&lt;a href=&#34;https://github.com/matsubara0507/minruby-gem/pull/1&#34;&gt;これ&lt;/a&gt;． めちゃくちゃやっつけで作ったので穴があるかもしれない．&lt;/p&gt;
&lt;p&gt;ここでは新しく Alternative Pattern を使っている． こういうのだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# Alternative Pattern: hoge | fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt;), exp1, *_&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    make_stmts(exp1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# Error: illegal variable in alternative pattern&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; exp1, *_ | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt; exp1, *_),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;    make_stmts(exp1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここからは余談． MinRuby は &lt;code&gt;ruby interp.rb interp.rb fizzbuzz.rb&lt;/code&gt; のように自身を自身で評価することが可能だ(そのため &lt;code&gt;map&lt;/code&gt; や &lt;code&gt;foreach&lt;/code&gt; などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って &lt;code&gt;minruby&lt;/code&gt; をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次は型検査も試したいですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/little_Haskeller/items/a3ec4c82c7099f1c9cf1</id><title type="text">Haskell で「エラトステネスの篩」 その２</title><updated>2019-05-13T11:27:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/little_Haskeller/items/a3ec4c82c7099f1c9cf1"/></entry><entry><id>https://qiita.com/dsm/items/861d08844b1fba32f07b</id><title type="text">macOSでVS CodeのHaskellの環境構築で嵌った点</title><updated>2019-05-12T22:36:37+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/dsm/items/861d08844b1fba32f07b"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id><title type="text">GitHub Card を生成する SPA を Elm で作った</title><updated>2019-05-12T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ということに，だいたい完成してから気づいた orz&lt;/p&gt;
&lt;h3 id=&#34;github-card&#34;&gt;GitHub Card&lt;/h3&gt;
&lt;p&gt;特別定義はないけど，&lt;a href=&#34;https://lab.lepture.com/github-cards/&#34;&gt;こんな感じ&lt;/a&gt;のを iframe で作りたかった．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:&lt;/p&gt;
&lt;h4 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card&#34;&gt;GitHub Pages に置いた&lt;/a&gt;ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…&lt;/p&gt;
&lt;p&gt;こんな感じになる:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/user-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507/github-card&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/repo-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上がユーザーのカードで下がリポジトリのカード． &lt;code&gt;Embed:&lt;/code&gt; の下に書いてある iframe タグをコピペすることで埋め込める．&lt;/p&gt;
&lt;h3 id=&#34;ちょっとした工夫&#34;&gt;ちょっとした工夫&lt;/h3&gt;
&lt;p&gt;Elm の &lt;code&gt;Browser.application&lt;/code&gt; の URL 機能を&lt;del&gt;わざわざ&lt;/del&gt;使って色々工夫してる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://xxxx#name&lt;/code&gt; とすることで直接任意ユーザー/リポジトリのカードのページを開ける
&lt;ul&gt;
&lt;li&gt;実は &lt;code&gt;Build&lt;/code&gt; ボタンで &lt;code&gt;#name&lt;/code&gt; にジャンプしてる笑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://xxx?target=name&lt;/code&gt; とすることで &lt;code&gt;name&lt;/code&gt; のカードだけを表示
&lt;ul&gt;
&lt;li&gt;iframe にはこっちを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; とか&lt;del&gt;わざわざ&lt;/del&gt;してぴったりの &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; を iframe に生成してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…&lt;/p&gt;
&lt;h2 id=&#34;作るパート2&#34;&gt;作る(パート2)&lt;/h2&gt;
&lt;p&gt;ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，&lt;strong&gt;適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??&lt;/strong&gt; と．&lt;/p&gt;
&lt;p&gt;ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．&lt;/p&gt;
&lt;h3 id=&#34;できたもの&#34;&gt;できたもの&lt;/h3&gt;
&lt;p&gt;集める部分と表示する部分を分けた:&lt;/p&gt;
&lt;h4 id=&#34;section-1&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;h4 id=&#34;section-2&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;前回の &lt;a href=&#34;https://github.com/matsubara0507/github-card&#34;&gt;matsubara0507/github-card&lt;/a&gt; と違い自分専用． selfcat という CLI ツールで次のような設定ファイル &lt;code&gt;.selfcat.yaml&lt;/code&gt; にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;owner:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;repos:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mix.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; selfcat&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--compact&lt;/code&gt; オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．&lt;/p&gt;
&lt;h3 id=&#34;selfcat&#34;&gt;selfcat&lt;/h3&gt;
&lt;p&gt;これはやってること単純:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;設定ファイルの YAML を読み込み (&lt;a href=&#34;http://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;GitHub API を叩き (&lt;a href=&#34;http://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;JSON を吐くだけ (&lt;a href=&#34;http://hackage.haskell.org/package/aeson&#34;&gt;aeson&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例のごとく，&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; でサクッと作った．&lt;/p&gt;
&lt;p&gt;中身を見るとわかるのだが &lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;mix&lt;/a&gt; というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．&lt;/p&gt;
&lt;h3 id=&#34;生成した-json-ファイルを読み込む&#34;&gt;生成した JSON ファイルを読み込む&lt;/h3&gt;
&lt;p&gt;Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには &lt;code&gt;init&lt;/code&gt; 関数の &lt;code&gt;Flag&lt;/code&gt; というのを使う。&lt;a href=&#34;https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement&#34;&gt;このあたりが参考になる&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;で，問題はどうやってローカルの JSON を読み込むか． &lt;a href=&#34;https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48&#34;&gt;git-plantation では Haskell で埋め込んでいた&lt;/a&gt;のだが，今回はサーバー側がないのでできない． ググったら出てきた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript&#34;&gt;Load JSON file locally using pure Javascript by Rich on CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて &lt;code&gt;index.html&lt;/code&gt; から読み込むようにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(callback) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xobj &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;XMLHttpRequest&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;overrideMimeType&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;static/info.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;         &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readyState&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;           &lt;span class=&#34;at&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;responseText&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;         &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;   &lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(response) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;parse&lt;/span&gt;(response)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;va&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;  )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，うまく動作はしている．&lt;/p&gt;
&lt;p&gt;いつも通り，GitHub Pages に置いたので&lt;a href=&#34;https://matsubara0507.github.io/my-github-cards/&#34;&gt;ここ&lt;/a&gt;から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．&lt;/p&gt;
&lt;h3 id=&#34;daily-cron-on-travisci&#34;&gt;Daily cron on TravisCI&lt;/h3&gt;
&lt;p&gt;更新は TravisCI の Daily cron を使う． &lt;a href=&#34;https://hub.docker.com/r/matsubara0507/selfcat/&#34;&gt;selfcat は Docker Image にした&lt;/a&gt;ので selfcat をビルドする必要はない． &lt;code&gt;docker run&lt;/code&gt; で JSON を生成し，差分があったら GitHub に push する．&lt;/p&gt;
&lt;p&gt;知らぬ間に，TravisCI の設定方法に &lt;code&gt;deploy&lt;/code&gt; という設定が増えていたんですね:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;language:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; generic&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;before_install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker pull matsubara0507/selfcat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec selfcat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &amp;#39;cd app &amp;amp;&amp;amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;deploy:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;provider:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; script&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;skip_cleanup:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bash .travis/deploy.bash&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; master&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; のところで読んでいるスクリプトは以下:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;-eux&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;# setup ssh-agent and provide the GitHub deploy key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;bu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ssh-agent&lt;/span&gt; -s&lt;span class=&#34;va&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ex&#34;&gt;openssl&lt;/span&gt; aes-256-cbc -K &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_key&lt;/span&gt; -iv &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_iv&lt;/span&gt; -in .travis/id_rsa.enc -out .travis/id_rsa -d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;chmod&lt;/span&gt; 600 .travis/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ssh-add&lt;/span&gt; .travis/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;# commit the assets in docs/ if changed, and push to GitHub using SSH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_NAME}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.email &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_EMAIL}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; remote set-url origin git@github.com:&lt;span class=&#34;va&#34;&gt;${TRAVIS_REPO_SLUG}&lt;/span&gt;.git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; checkout master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; add docs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; diff --staged --quiet &lt;span class=&#34;kw&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update docs by selfcat&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; push origin master&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929&#34;&gt;Deploy to GitHub Pages using Travis CI and deploy keys - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暗号化/複合の部分は TravisCI の &lt;a href=&#34;https://docs.travis-ci.com/user/encrypting-files/&#34;&gt;Encrypting Files&lt;/a&gt; を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが &lt;code&gt;script: ./.travis-deploy.sh&lt;/code&gt; では呼べなかった． ググったら &lt;a href=&#34;https://github.com/travis-ci/travis-ci/issues/5538&#34;&gt;Issue&lt;/a&gt; があり，&lt;code&gt;script: sh deploy.sh&lt;/code&gt; とすれば良いみたいだったのでそうしたらうまくいった．&lt;/p&gt;
&lt;h1 id=&#34;section-3&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/my-github-cards&#34;&gt;matsubara0507/my-github-cards&lt;/a&gt; をフォークして，selfcat と TravisCI の設定(&lt;code&gt;.travis/id_rsa.enc&lt;/code&gt; と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入力してエンターキーで Build ボタン押したことにしたい&lt;/li&gt;
&lt;li&gt;Embed のところにクリップボードにコピーボタン欲しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/asterius.html</id><title type="text">AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）</title><updated>2019-05-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/asterius.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、&lt;a href=&#34;https://emsn.connpass.com/event/121028/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Emscripten &amp;amp; WebAssembly night !! #7&lt;/span&gt;&lt;/a&gt;というイベントにて、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルするツールについて紹介いたしました。&lt;br /&gt;
資料はこちら👇です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://the.igreque.info/slides/2019-04-19-asterius.html#(1)&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を&lt;span class=&#34;ascii&#34;&gt;JS&lt;/span&gt;から呼べるようにしてみた（けど失敗）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日は、スライドの英語で書いていた箇所を和訳しつつ、いろいろ捕捉してブログ記事の形で共有します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;結果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;✅おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/h1&gt;
&lt;p&gt;冒頭でも触れたとおり、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースを&lt;a href=&#34;https://developer.mozilla.org/ja/docs/WebAssembly&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;&lt;/a&gt;にコンパイルするコンパイラーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;&lt;small&gt;（開発中のバージョン）&lt;/small&gt;を都度フォークして、現在活発に開発中です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）を除いた、すべての機能が利用できるようになっています。&lt;br /&gt;
現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;を実用する上で必要不可欠であろう、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;もサポートされています。&lt;br /&gt;
つまり、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルされた&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を呼んだり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことができます！&lt;br /&gt;
何かしらの&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;処理を行う場合は、基本的にこの&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことになります。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;ahc-cabal&lt;/code&gt;という名前のコマンドで、&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;パッケージを利用することもできます。&lt;br /&gt;
こちらは&lt;code&gt;cabal&lt;/code&gt;コマンドの単純なラッパーです。&lt;code&gt;ahc-cabal new-build&lt;/code&gt;などと実行すれば、外部のパッケージに依存したアプリケーションも、まとめて&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルできます。&lt;br /&gt;
本格的に開発する上では欠かせないツールでしょう。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、“&lt;span class=&#34;ascii&#34;&gt;A linker which performs aggressive dead-code elimination, producing as small WebAssembly binary as possible.&lt;/span&gt;”と謳っているとおり、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムを抱えているにしては、比較的小さい&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;ファイルを生成するそうです。&lt;br /&gt;
というわけで手元で試してみたところ、下記のような結果になりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空っぽのプログラム（&lt;code&gt;main = return ()&lt;/code&gt;しかしないソース）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;36KB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。なかなかいい感じですね。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;168KB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。未圧縮でこれなら確かに十分軽いでしょう。&lt;span class=&#34;ascii&#34;&gt;Webpack&lt;/span&gt;などで結合・&lt;span class=&#34;ascii&#34;&gt;minify&lt;/span&gt;するともっと軽くできますし。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今回私が移植を試みたアプリ（詳細は後ほど）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1.9MB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。うーん、ちょっと苦しいような…😥。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2.1MB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。&lt;code&gt;.mjs&lt;/code&gt;ファイルの内容は特に変わりませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、移植前の元のソースを含むアプリを、&lt;span class=&#34;ascii&#34;&gt;Linux 64bit&lt;/span&gt;向けの&lt;span class=&#34;ascii&#34;&gt;ELF&lt;/span&gt;ファイルとしてビルドして比較してみたところ、&lt;code&gt;.wasm&lt;/code&gt;ファイルよりも少し小さいぐらいでした。&lt;br /&gt;
詳細な内訳が気にはなりますが、今のソースですと大体これぐらいが限界なのかも知れません&lt;small&gt;（でも&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;は現状&lt;span class=&#34;ascii&#34;&gt;32bit&lt;/span&gt;バイナリー相当のはずだし、もう少し小さくならないものか…）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を利用して開発すると、ほぼ最新の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版が使える、というところも、新しもの好きな&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;をわくわくさせるところですね！&lt;small&gt;（今回はあいにく新しい機能について調べる余裕もなかったので、特に恩恵は受けてませんが…😅）&lt;/small&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をフォークしていくつかの機能を追加して作られているものです。&lt;br /&gt;
しかし幸いオリジナルとの差分が十分に小さく、作者が定期的に&lt;span class=&#34;ascii&#34;&gt;rebase&lt;/span&gt;することができています。&lt;br /&gt;
詳細な違いは&lt;a href=&#34;https://tweag.github.io/asterius/custom-ghc/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;About the custom GHC fork&lt;/span&gt;&lt;/a&gt;にまとまっています。近い将来&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;本体に取り込まれそうな修正ばかりではないかと。&lt;/p&gt;
&lt;p&gt;それからこれは、ブラウザーで&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすことができるという点で&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の競合に当たる、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;と比較した場合の話ですが、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を利用して、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;strong&gt;直接&lt;/strong&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶことができるようになっているのも、優れた点と言えるでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;は&lt;a href=&#34;https://github.com/ghcjs/ghcjs/blob/3959a9321a2d3e2ad4b8d4c9cc436fcfece99237/doc/foreign-function-interface.md#calling-haskell-from-javascript&#34;&gt;こちらのドキュメント曰く&lt;/a&gt;、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶ機能は備えてはいるものの、簡単ではないためドキュメントも書かれておらず、推奨されていません。&lt;br /&gt;
これでは状況によってはかなり使いづらいでしょう。&lt;br /&gt;
今回私が試したように、コアとなる処理だけを&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数として書いて、それを&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼び出すということができないのです。&lt;/p&gt;
&lt;p&gt;一方&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;では、例えば👇のように書くことで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;がエクスポートする関数として、&lt;code&gt;func&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにすることができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;foreign export javascript &lt;span class=&#34;st&#34;&gt;&amp;quot;func&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし、実際に今回試してみたところ、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;ではまだバグがあったので、この用途では依然使いにくいという状況ではありますが…（詳細は後で触れます）。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、やっぱりまだまだ開発中で、バグが多いです。&lt;br /&gt;
今回の目的もバグのために果たせませんでした😢。&lt;/p&gt;
&lt;p&gt;先ほども触れたとおり、特に未完成なのが、&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;なら使えるはずの&lt;code&gt;IO&lt;/code&gt;な関数の多くが使えませんし、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に至っては一切利用できません。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;については、現状、&lt;small&gt;（&lt;code&gt;putStrLn&lt;/code&gt;などのよく使われる）&lt;/small&gt;一部を除き、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;&lt;small&gt;（&lt;code&gt;foreign import javascript&lt;/code&gt;）&lt;/small&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数経由でよばなけれなりません。&lt;br /&gt;
これは、入出力関連の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を一切持たないという現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の事情を考えれば、致し方ない仕様だとも言えます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/WebAssembly/WASI&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WASI&lt;/span&gt;&lt;/a&gt;の策定によってこの辺の事情が変わるまでの間に、すべて&lt;code&gt;foreign import javascript&lt;/code&gt;で賄うというのも、なかなか面倒なことでしょうし。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に関しては、現在&lt;a href=&#34;https://github.com/tweag/asterius/pull/81&#34;&gt;こちらのブランチ&lt;/a&gt;で開発中です。…と、思ったらこの&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;、&lt;span class=&#34;ascii&#34;&gt;Close&lt;/span&gt;されてますね…。&lt;br /&gt;
これに関して詳しい事情はわかりません。いずれにしても、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を実装するには、コンパイル時にその場で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を評価するためのインタープリターが別途必要だったりして、結構ハードルが高いのです。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;RTS&lt;/span&gt;&lt;small&gt;（この場合、コンパイルした&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすのに必要な&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイル）&lt;/small&gt;が&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;に依存している関係で、&lt;span class=&#34;ascii&#34;&gt;V8&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SpiderMonkey&lt;/span&gt;でないと動かない点もまだまだ、という感じです。&lt;br /&gt;
ブラウザーで言うと、&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;日時点で&lt;span class=&#34;ascii&#34;&gt;Chrome&lt;/span&gt;か、&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版以降でないと使用できません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のドキュメント「&lt;a href=&#34;https://tweag.github.io/asterius/ir/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IR types and transformation passes&lt;/span&gt;&lt;/a&gt;」をざっくり要約してみると、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は以下のような流れで動くそうです。&lt;br /&gt;
実際には&lt;code&gt;ahc-link&lt;/code&gt;というコマンドがこれらの手順をまとめて実行するので、ユーザーの皆さんはあまり意識する必要はないでしょう。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#frontend-plugins&#34;&gt;フロントエンドプラグイン&lt;/a&gt;という仕組みでラップした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;&lt;small&gt;（のフォーク）&lt;/small&gt;を使い、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が生成した&lt;span class=&#34;ascii&#34;&gt;Cmm&lt;/span&gt;という中間言語で書かれたコードを、&lt;code&gt;AsteriusModule&lt;/code&gt;という独自のオブジェクトに変換します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ahc-ld&lt;/code&gt;という専用のリンカーで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;向けにリンクします。&lt;/li&gt;
&lt;li&gt;最後に、&lt;code&gt;ahc-dist&lt;/code&gt;というコマンドで、リンクしたモジュールを実行できる状態にします。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/binaryen&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;binaryen&lt;/span&gt;&lt;/a&gt;か、&lt;a href=&#34;https://github.com/tweag/asterius/tree/master/wasm-toolkit&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;wasm-toolkit&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;を書く言語内&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;を利用して、&lt;code&gt;ahc-ld&lt;/code&gt;がリンクしたモジュールを検証し、&lt;code&gt;.wasm&lt;/code&gt;ファイルに変換して、&lt;/li&gt;
&lt;li&gt;実行時に必要な&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイルをコピーして、&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースにおける&lt;code&gt;main&lt;/code&gt;関数を実行する、エントリーモジュールを作ります。&lt;br /&gt;
あとはこれを&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;ファイルから&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグで参照すれば、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;が動きます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/h1&gt;
&lt;p&gt;ここからは、私が以前作った&lt;a href=&#34;https://github.com/igrep/igrep-cashbook/tree/master/hs2&#34;&gt;アプリケーション&lt;/a&gt;のコアに当たる関数を&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;でコンパイルすることで、ブラウザー上で動かせるようチャレンジした時の体験談を紹介します。&lt;/p&gt;
&lt;p&gt;今回試みたアプリケーションは、単純なコマンドラインアプリケーションです。&lt;br /&gt;
詳細は省きますが、行単位で書かれたファイルをパースして、項目ごとの合計を計算するだけの、ありふれたものです。&lt;br /&gt;
パーサーは&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;を使って作り、整数の四則演算ができるようなっているのも特徴です。&lt;br /&gt;
そのアプリケーションの処理のほとんどすべてに当たる、ファイル名とその中身を受け取って、計算結果を文字列で返す関数（&lt;code&gt;FilePath -&amp;gt; Text -&amp;gt; Text&lt;/code&gt;）を、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;でエクスポート&lt;small&gt;（&lt;code&gt;foreign export javascript&lt;/code&gt;）&lt;/small&gt;し、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにしてみました。&lt;/p&gt;
&lt;p&gt;アプリケーション自体の書き換えはほとんど必要なかったものの、依存関係を減らしたり、依存するパッケージを書き換えたりするのが大変でした。&lt;br /&gt;
というのも、先ほど触れたとおり、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は現状「&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）」が一切使用できないので、取り除かなければコンパイルエラーになってしまいます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているだけで依存関係の解決すらできないのはなかなかつらいものでした。&lt;br /&gt;
&lt;a href=&#34;https://docs.haskellstack.org/en/stable/dependency_visualization/&#34;&gt;&lt;code&gt;stack dot&lt;/code&gt;&lt;/a&gt;コマンドを使って依存関係のツリーを作り、それを見て&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているパッケージを割り出し、そのパッケージの必要な関数のみを切り出すことでどうにか回避できました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/monoidal-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;monoidal-containers&lt;/span&gt;&lt;/a&gt;パッケージと&lt;a href=&#34;http://hackage.haskell.org/package/foldl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;foldl&lt;/span&gt;&lt;/a&gt;パッケージがそれでした。&lt;br /&gt;
幸い、どちらも依存しているのはごく一部だったで、必要な部分だけをコピペして使うことにしました。&lt;br /&gt;
それから、&lt;code&gt;IO&lt;/code&gt;への依存もなくすために、&lt;a href=&#34;http://hackage.haskell.org/package/text&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;&lt;/a&gt;パッケージから&lt;code&gt;*.IO&lt;/code&gt;なモジュールを取り除いたりもしました。&lt;/p&gt;
&lt;p&gt;当然、元々のアプリケーションも&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;パッケージの&lt;code&gt;*.IO&lt;/code&gt;なモジュールを使ってはいたので、それを使わないよう修正する必要がありました。&lt;br /&gt;
しかしそこは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;。そうした&lt;code&gt;IO&lt;/code&gt;に依存した関数から純粋な関数を切り出すのは、型システムのおかげで大変楽ちんでした！😤&lt;br /&gt;
入出力をするのに&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使わないといけない、という現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の制約が、偶然にもマッチしたわけですね！&lt;br /&gt;
純粋じゃない関数はときめかないので捨て去ってしまいましょう✨&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果&lt;/h2&gt;
&lt;p&gt;ここまで頑張った結果、目的の関数を&lt;code&gt;foreign export javascript&lt;/code&gt;してコンパイルを通すことはできました🎉&lt;br /&gt;
しかし、実際にブラウザー上で動かしてみたところ、&lt;a href=&#34;https://github.com/tweag/asterius/issues/105&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;のバグ&lt;/a&gt;にハマってしまいました…😢 肝心の&lt;code&gt;foreign export javascript&lt;/code&gt;した関数が、返すべき値を返してくれないのです！&lt;br /&gt;
恐らく&lt;code&gt;foreign export javascript&lt;/code&gt;を使わずに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;側から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶようにしていれば、今回の問題は回避できたのではないかと思います。&lt;br /&gt;
しかし、それは今回のゴールではありませんし、あまり便利ではないのでひとまず移植は見送ることにしました。残念！&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✅おわりに&lt;/h1&gt;
&lt;p&gt;今回&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を試したことで、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かす、もう一つの可能性を知ることができました。&lt;br /&gt;
とは言え、バグが多かったり依存関係から&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を抜き出さなければならなかったりで、まだまだ実用的とは言い難いでしょう。&lt;br /&gt;
しかし、今回報告したバグが直れば、ブラウザーによる処理のコアに当たる部分を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書く、という応用が利きそうです。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;Pandoc&lt;/span&gt;など&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製アプリケーションをブラウザーから操作する、なんてアプリケーション作りが捗りそうですね！&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://caniuse.com/#feat=bigint&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Can I use&lt;/span&gt;&lt;/a&gt;曰く安定版でも&lt;code&gt;about:config&lt;/code&gt;を書き換えればすでに使えるとのことなんですが、なぜか手元の&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt; 安定版ではうまくいきませんでした。確かに&lt;code&gt;about:config&lt;/code&gt;にそれらしき設定はあるものの、&lt;code&gt;true&lt;/code&gt;にしても何も変わらず…😰。&lt;br /&gt;
ついでに細かいことを言うと、&lt;span class=&#34;ascii&#34;&gt;Firefox Nightly&lt;/span&gt;は&lt;code&gt;about:config&lt;/code&gt;を書き換えなくても使え、&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版では&lt;code&gt;about:config&lt;/code&gt;を書き換えると使えました。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/stack-ghc8.8.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/stack-ghc8.8.html</id><title type="text">GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする</title><updated>2019-05-02T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/stack-ghc8.8.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、我らが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクトスタンダードなコンパイラー、&lt;a href=&#34;https://mail.haskell.org/pipermail/ghc-devs/2019-April/017550.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン&lt;span class=&#34;ascii&#34;&gt;8.8.1-alpha1&lt;/span&gt;がリリースされました&lt;/a&gt;。&lt;br /&gt;
このリリースはまだアルファ版であることからわかるとおり、主にテスト目的で使用するためのものです。&lt;br /&gt;
なのでいち早く試してみて、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のデバッグに貢献してみましょう。&lt;/p&gt;
&lt;p&gt;そこで今回は、最近&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めた方なら使っている方も多いであろう、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使ってこの新しい&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールし、あなたのライブラリー・アプリケーションでテストする方法を紹介いたします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr-cabal-installでやったほうがよさそう&#34; title=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TL;DR cabal-install&lt;/span&gt;でやったほうがよさそう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-infoを作る&#34; title=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; &lt;code&gt;setup-info&lt;/code&gt;を作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#必要ならallow-newerを有効にする&#34; title=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; （必要なら）&lt;span class=&#34;ascii&#34;&gt;allow-newer&lt;/span&gt;を有効にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-indicesを設定してhead.hackageを利用できるようにする&#34; title=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;3. package-indices&lt;/span&gt;を設定して、&lt;span class=&#34;ascii&#34;&gt;head.hackage&lt;/span&gt;を利用できるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stack-buildを実行しつつひたすらextra-depsを追加編集&#34; title=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;4. stack build&lt;/span&gt;を実行しつつ、ひたすら&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;を追加・編集&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#それでもうまくいかない場合-extra-depsを使い倒す&#34; title=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;それでもうまくいかない場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;extra-deps&lt;/code&gt;を使い倒す&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#自分以外の人が対象のパッケージを修正した場合&#34; title=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;自分以外の人が対象のパッケージを修正した場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#自分で対象のパッケージを修正するという場合&#34; title=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;自分で対象のパッケージを修正する、という場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#対象のパッケージがgitリポジトリーで管理されてない場合は&#34; title=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;対象のパッケージが&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーで管理されてない場合は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#番外編-operation-vanguard&#34; title=&#34;番外編-operation-vanguard&#34;&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: Operation Vanguard&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tldr-cabal-installでやったほうがよさそう&#34; title=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TL;DR cabal-install&lt;/span&gt;でやったほうがよさそう&lt;/h1&gt;
&lt;p&gt;いきなりやろうとすることを真っ向から否定するようで恐縮ですが…😅&lt;br /&gt;
実際に私が試しにビルドしてみた感じ、普通に&lt;a href=&#34;https://www.haskell.org/cabal/download.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;をこちらから&lt;/a&gt;インストールして、&lt;code&gt;cabal new-build --with-ghc=ghc-8.8.0.20190424&lt;/code&gt;などと実行した方がいいんじゃないかという気がしました…。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールする機能はないので、その場合は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は別途インストールすることになります&lt;small&gt;（&lt;a href=&#34;https://github.com/haskell/ghcup&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt;が使える？）&lt;/small&gt;。&lt;br /&gt;
&lt;a href=&#34;../2017/06-ghc-install.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@takenobu-hs&lt;/span&gt;さんが書いてくれた、こちらの記事&lt;/a&gt;を参考にどうぞ！&lt;/p&gt;
&lt;p&gt;なお、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でやると面倒な理由についての詳細はこれから述べる手順で適宜触れます…。&lt;/p&gt;
&lt;h1 id=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#setup-infoを作る&#34; title=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; &lt;code&gt;setup-info&lt;/code&gt;を作る&lt;/h1&gt;
&lt;p&gt;まずはじめに、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールする際に参照する、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#setup-info&#34;&gt;&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;を作りましょう。&lt;br /&gt;
&lt;code&gt;setup-info&lt;/code&gt;は&lt;code&gt;stack setup&lt;/code&gt;や&lt;code&gt;stack build&lt;/code&gt;を実行したとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;などの必要なソフトウェアがインストールされていなかった際、自動で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールするために必要な情報です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンや対象となるプラットフォームごとに、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のビルド済み&lt;span class=&#34;ascii&#34;&gt;tarball&lt;/span&gt;への&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;やそのチェックサムが書いてあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はここに書かれた&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;にアクセスすることで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールしているんですね。&lt;/p&gt;
&lt;p&gt;デフォルトでは、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は&lt;a href=&#34;https://raw.githubusercontent.com/commercialhaskell/stackage-content/master/stack/stack-setup-2.yaml&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;&lt;/a&gt;ファイルを&lt;code&gt;setup-info&lt;/code&gt;として扱っています。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;には&lt;a href=&#34;https://www.stackage.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;&lt;/a&gt;が参照している、安定版の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;については書いてあるものの、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;にも&lt;span class=&#34;ascii&#34;&gt;Stackage Nightly&lt;/span&gt;にもまだ採用されていない&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;については、書かれていません。&lt;br /&gt;
当然アルファ版である&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;が書かれることはないため、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;用の&lt;code&gt;setup-info&lt;/code&gt;を作る必要があります。&lt;/p&gt;
&lt;p&gt;それでは書いてみましょう… と、言いたいところですが、この&lt;code&gt;setup-info&lt;/code&gt;、実際のところ自分で直接書く必要はなく、&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;ファイルへの&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;やパスを指定するだけで&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は参照しに行ってくれます！&lt;br /&gt;
と、言うわけで、&lt;a href=&#34;https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4&#34;&gt;こちらに&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;向けの&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;を作ってアップロードしておきました！&lt;br /&gt;
&lt;small&gt;（申し訳なくも&lt;span class=&#34;ascii&#34;&gt;Linux&lt;/span&gt;についてはどう書けばいいかわからず、&lt;span class=&#34;ascii&#34;&gt;macOS&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Windows 64bit&lt;/span&gt;のみ対応いたしました… あしからず。🙇）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;ひとまずみなさんは、下記のいずれかの方法で指定するだけでこの手順はクリアできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stack.yaml&lt;/code&gt;に記載する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ghc-8.8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;setup-info:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://gist.githubusercontent.com/igrep/7298e1e2515059ae332feaf5501c41a4/raw/d69cc0b75d9be6735bdfcca6aa3eb6398d98983f/stack-setup-info.yaml&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ... 以下略 ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ビルドしたいプロジェクトや、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;を試す用のディレクトリーを作って、そこに👆の内容が書かれた&lt;code&gt;stack.yaml&lt;/code&gt;を置きましょう。&lt;br /&gt;
ちょっと試したいだけならそのディレクトリーで&lt;code&gt;stack exec ghci&lt;/code&gt;などと実行すれば&lt;span class=&#34;ascii&#34;&gt;OK&lt;/span&gt;です！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stack setup&lt;/code&gt;コマンドのオプションとして渡す&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stack setup 8.8.0.20190424 --setup-info-yaml https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4/raw/d69cc0b75d9be6735bdfcca6aa3eb6398d98983f/stack-setup-info.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--setup-info-yaml&lt;/code&gt;オプションを指定した上で&lt;code&gt;8.8.0.20190424&lt;/code&gt;という引数を与えるのがポイントです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版の慣習上、&lt;code&gt;8.8.1-alpha1&lt;/code&gt;&lt;strong&gt;ではなく&lt;/strong&gt;&lt;code&gt;8.8.0.20190424&lt;/code&gt;となっている点に注意してください！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;8.8.1-alpha1&lt;/span&gt;じゃなくて、自分でビルドした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を&lt;code&gt;stack&lt;/code&gt;でインストールできるようにしたい！」というマニアなあなたは、&lt;a href=&#34;https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4&#34;&gt;今回私が作った&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;をどうぞ参考にしてください！🙇&lt;/p&gt;
&lt;h1 id=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#必要ならallow-newerを有効にする&#34; title=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; （必要なら）&lt;span class=&#34;ascii&#34;&gt;allow-newer&lt;/span&gt;を有効にする&lt;/h1&gt;
&lt;p&gt;ここからは、何かしら依存するパッケージがあるライブラリー・アプリケーションを&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;で試しにビルドしたいという方向けです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;をちょっと試したいだけという方はこれ以降を読む必要はありません。&lt;/p&gt;
&lt;p&gt;まずは、ひとまず対象となるプロジェクトの&lt;code&gt;stack.yaml&lt;/code&gt;に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;allow-newer:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を追記しましょう。&lt;br /&gt;
これは、依存している&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;パッケージのバージョンの、上限を取っ払うというものです。&lt;br /&gt;
依存パッケージのバージョンの上限は、パッケージの開発者が自身のパッケージを確実にビルドできるよう、「このパッケージはあのパッケージのバージョン&lt;span class=&#34;ascii&#34;&gt;N.M&lt;/span&gt;&lt;strong&gt;以下&lt;/strong&gt;じゃないとビルドできないよ！」と&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;の依存関係リゾルバーに教えてあげるためのものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;&lt;small&gt;（と、恐らく&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;も必要に応じて）&lt;/small&gt;は、通常であればこの上限を見て、どのバージョンのパッケージをインストールするか決めます。&lt;br /&gt;
その上限により、残念ながら依存関係の解決に失敗することがあるのです。&lt;br /&gt;
そこでそうしたエラーを避けるためにも&lt;code&gt;allow-newer: true&lt;/code&gt;と設定して、上限を無視してみましょう。&lt;/p&gt;
&lt;p&gt;というのも、このバージョンの上限はしばしば、予防のために実際より厳しめに設定されることがあるためです&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
そりゃそうですよね。今作っているパッケージが依存している&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が、どのバージョンで使用できなくなるかなんて、大抵のパッケージではわかりませんし。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の世界には&lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PVP&lt;/span&gt;&lt;/a&gt;という、&lt;a href=&#34;https://semver.org/lang/ja/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semantic Versioning&lt;/span&gt;&lt;/a&gt;と似た思想のバージョン変更ポリシーがありまして、&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の互換性がなくなるような修正が含まれる場合、次のバージョンでは&lt;code&gt;A.B.C&lt;/code&gt;の&lt;code&gt;A.B&lt;/code&gt;の箇所を変更することになっています。&lt;br /&gt;
これを信じて依存バージョンの上限（と下限）を設定してみても、実際にあなたが依存している&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が使用できなくなるとは限らないのです。&lt;/p&gt;
&lt;p&gt;したがって、依存パッケージのバージョンの上限は、実際には無視してもよい場合がしばしばあります。&lt;br /&gt;
もちろん、自分で依存パッケージのバージョンを正しく書き換えて対応するというのもアリですし、将来的にはそうした方がより望ましいやり方です。&lt;br /&gt;
また、&lt;code&gt;allow-newer: true&lt;/code&gt;を設定することにより、&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;とは関係のない原因でビルドが失敗&lt;/strong&gt;する可能性がある点にも注意してください。&lt;br /&gt;
とは言え、今回は手っ取り早くビルドしてみるために、敢えて&lt;code&gt;allow-newer: true&lt;/code&gt;を設定することと致しました。&lt;br /&gt;
「私はバージョンの上限を直してみたいんだー！」という方は、是非チャレンジしてみてください。&lt;/p&gt;
&lt;h1 id=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#package-indicesを設定してhead.hackageを利用できるようにする&#34; title=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;3. package-indices&lt;/span&gt;を設定して、&lt;span class=&#34;ascii&#34;&gt;head.hackage&lt;/span&gt;を利用できるようにする&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;stack.yaml&lt;/code&gt;に書いておいた方が良い設定がもう一つあります。&lt;br /&gt;
それは、&lt;a href=&#34;http://head.hackage.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;&lt;/a&gt;の設定です。&lt;/p&gt;
&lt;p&gt;これからビルドするあなたのパッケージは、きっとたくさんのパッケージに依存していることでしょう。&lt;br /&gt;
残念ながら、その中には&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応できていないものも数多くあるでしょう😰。&lt;br /&gt;
特に今回は&lt;a href=&#34;https://scrapbox.io/haskell-shoen/MonadFail&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Proposal&lt;/span&gt;&lt;/a&gt;による、&lt;code&gt;Monad&lt;/code&gt;型クラスの仕様変更を適切に周知できていなかったこともあり、まだ多くのパッケージが対応できていないようです。&lt;/p&gt;
&lt;p&gt;しかし、まだ希望はあります。&lt;br /&gt;
あなたの依存パッケージに対する必要な修正は、すでに&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチにマージされているかも知れませんし、すでに誰かが&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;を送っているかも知れません。&lt;br /&gt;
さらにラッキーな場合、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にパッチを当てたバージョンが上がっていることでしょう！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;は、今回のように&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版をいち早く試したい人が、新しい&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に向けて修正を加えたパッケージを、いち早くアップロードするサイトです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/hvr/head.hackage&#34;&gt;こちらのリポジトリー&lt;/a&gt;にパッチをアップロードすることで、&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;から、普通の&lt;span class=&#34;ascii&#34;&gt;hackage&lt;/span&gt;にあるパッケージとしてダウンロードできるようにしてくれます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で利用するには、下記のように、&lt;code&gt;package-indices:&lt;/code&gt;という設定を、&lt;code&gt;stack.yaml&lt;/code&gt;に加えてください。&lt;br /&gt;
下記のように記載することで、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にある修正済みのパッケージを優先して取得してくれるようになります&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;package-indices:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; head.hackage&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;download-prefix:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://head.hackage.haskell.org/package/&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;http:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://head.hackage.haskell.org/01-index.tar.gz&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Hackage&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;download-prefix:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://hackage.haskell.org/package/&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;http:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://hackage.haskell.org/01-index.tar.gz&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;対応済みのパッケージを、簡単に取得できるようになります！&lt;/p&gt;
&lt;h1 id=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stack-buildを実行しつつひたすらextra-depsを追加編集&#34; title=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;4. stack build&lt;/span&gt;を実行しつつ、ひたすら&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;を追加・編集&lt;/h1&gt;
&lt;p&gt;ここまで設定できたら、いよいよ&lt;code&gt;stack build&lt;/code&gt;してみましょう&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;！&lt;br /&gt;
とは言え、この状態ではほぼ間違いなく失敗が続くので、&lt;code&gt;stack build --file-watch&lt;/code&gt;と、&lt;strong&gt;&lt;code&gt;--file-watch&lt;/code&gt;オプションを付けて、&lt;code&gt;stack.yaml&lt;/code&gt;を編集する度に再度&lt;/strong&gt;ビルドが実行されるようにするのをおすすめします。&lt;/p&gt;
&lt;p&gt;と、言うのも、恐らく次👇のようなエラーがたくさん出ると思われるからです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
In the dependencies for wss-client-0.2.1.1:
    http-client must match &amp;gt;=0.5.13, but the stack configuration has no specified version  (latest
                matching version is 0.6.4)
    http-client-tls needed, but the stack configuration has no specified version  (latest matching
                    version is 0.3.5.3)
    network-uri needed, but the stack configuration has no specified version  (latest matching
                version is 2.6.1.0)
    websockets must match &amp;gt;=0.12.0 &amp;amp;&amp;amp; &amp;lt;0.13, but the stack configuration has no specified version
               (latest matching version is 0.12.5.3)
needed since wss-client is a build target.

Some different approaches to resolving this:

  * Consider trying &amp;#39;stack solver&amp;#39;, which uses the cabal-install solver to attempt to find some
    working build configuration. This can be convenient when dealing with many complicated
    constraint errors, but results may be unpredictable.

  * Recommended action: try adding the following to your extra-deps
    in C:\Users\igrep\Downloads\direct-hs\stack-ghc-8.8.yaml:

attoparsec-0.13.2.2@sha256:6a0baba19991e84ef939056e7b411ad3a1ea0fb5e1e8fce7ca50e96c84b206c8
base-compat-0.10.5@sha256:d49e174ed0daecd059c52d13d4f4de87b5609c81212a22adbb92431f9cd58fff
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このエラー、見かけたことがある人も多いでしょう。&lt;br /&gt;
そう、指定した&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が使用するパッケージのバージョンの一覧。&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;に登録されている&lt;code&gt;lts-13.12&lt;/code&gt;などもその一つ）&lt;/small&gt;に、必要なバージョンのパッケージが登録されていない場合に起こるエラーです。&lt;br /&gt;
みなさんが普段利用する&lt;code&gt;lts-13.12&lt;/code&gt;などの&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;では、数多くのパッケージが登録されています&lt;small&gt;（&lt;a href=&#34;https://www.stackage.org/lts-13.19&#34;&gt;最新版の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell 13.19&lt;/span&gt;&lt;/a&gt;で&lt;span class=&#34;ascii&#34;&gt;2346&lt;/span&gt;件。&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;をメンテしている皆さんのおかげですね）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;一方、最初の手順で我々が指定した&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;、すなわち&lt;code&gt;resolver: ghc-8.8&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に添付されたパッケージ&lt;small&gt;（&lt;code&gt;base&lt;/code&gt;パッケージや、&lt;code&gt;array&lt;/code&gt;パッケージなど）&lt;/small&gt;しか入っていない、実質空っぽな&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;なのです&lt;small&gt;（&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#resolver&#34;&gt;参考&lt;/a&gt;）&lt;/small&gt;。&lt;br /&gt;
そのため、あなたが必要なほとんどのパッケージはないため、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はやむなく「&lt;code&gt;extra-deps&lt;/code&gt;にこれらのパッケージを追加してね！」というエラーを出すことになります。&lt;br /&gt;
これでは&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;の良さを生かせません…。&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;で&lt;code&gt;cabal new-build&lt;/code&gt;していれば、&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;は黙って必要なパッケージのバージョンを決定し、あとは&lt;code&gt;cabal new-freeze&lt;/code&gt;でもすれば、完全にビルドを再現可能な状態にしてくれます。&lt;br /&gt;
やっぱり&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はあくまでも&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;を活かすためのツールと捉えた方がいいのかも知れません😥。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extra-deps&lt;/code&gt;へのパッケージの追記を何度か繰り返すと、ようやくパッケージのビルドが始まります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;に収録されたパッケージを正しく取得できていれば、現在&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;にアップロードされているバージョンではビルドできない依存パッケージも、無事ビルドできることでしょう。&lt;br /&gt;
依存するパッケージの数にもよりますが、やっぱり時間がかかるかと思います。待ちましょう☕️。&lt;/p&gt;
&lt;h2 id=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでもうまくいかない場合-extra-depsを使い倒す&#34; title=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでもうまくいかない場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;extra-deps&lt;/code&gt;を使い倒す&lt;/h2&gt;
&lt;p&gt;しかしやっぱり、必要な変更が施されたパッケージが、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にもアップロードされていない場合はあります。&lt;br /&gt;
そうした場合、自分で修正して&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;を送りつつ）&lt;/small&gt;パッチを&lt;a href=&#34;https://github.com/hvr/head.hackage&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;のリポジトリー&lt;/a&gt;にアップロードすることもできますが、&lt;code&gt;stack.yaml&lt;/code&gt;の&lt;code&gt;extra-deps&lt;/code&gt;を次のように使えば、もっと手っ取り早く修正したバージョンのビルドを試すことができます。&lt;/p&gt;
&lt;h3 id=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#自分以外の人が対象のパッケージを修正した場合&#34; title=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;自分以外の人が対象のパッケージを修正した場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;自分以外の人が対象のパッケージを修正したので、すでにどこかのリポジトリーに&lt;span class=&#34;ascii&#34;&gt;push&lt;/span&gt;済みのコミットがある、という場合、下記👇のように書くと、&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーの特定のコミットを直接参照した状態で、依存関係に加えることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/github_user/repository_name.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &amp;lt;修正したコミットのSHA&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#自分で対象のパッケージを修正するという場合&#34; title=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;自分で対象のパッケージを修正する、という場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;そうでない場合、対象のパッケージのリポジトリーを一旦&lt;code&gt;git submodule add&lt;/code&gt;して、自分のリポジトリーの一部に含めてしまいましょう。&lt;br /&gt;
その上で、&lt;code&gt;extra-deps&lt;/code&gt;には下記のように書けば、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はローカルのファイルシステムに置かれたディレクトリーも、直接依存するパッケージとして追加してくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./path/to/package&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逐一別のディレクトリーに&lt;code&gt;git clone&lt;/code&gt;して&lt;code&gt;git commit&lt;/code&gt;して&lt;code&gt;git push&lt;/code&gt;して作られたコミットの&lt;span class=&#34;ascii&#34;&gt;SHA&lt;/span&gt;を参照して… なんてのを繰り返していたら、面倒だからです。&lt;/p&gt;
&lt;h3 id=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#対象のパッケージがgitリポジトリーで管理されてない場合は&#34; title=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;対象のパッケージが&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーで管理されてない場合は？&lt;/h3&gt;
&lt;p&gt;臨機応変に対応しましょう…😰&lt;br /&gt;
ちなみに、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;のドキュメント&lt;/a&gt;いわく&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Mercurial&lt;/span&gt;もサポートしています。&lt;/p&gt;
&lt;h1 id=&#34;番外編-operation-vanguard&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編-operation-vanguard&#34; title=&#34;番外編-operation-vanguard&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: Operation Vanguard&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;以上が&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使った&lt;span class=&#34;ascii&#34;&gt;GHC 8.8-alpha1&lt;/span&gt;のインストール方法や、それを利用したパッケージのビルド手順です。自分で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をビルドしたときなども参考にしてみてください。&lt;br /&gt;
これで終わり…！と、言いたいところですが、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に関連して、非常に意欲的なプロジェクト💪を紹介させてください。&lt;/p&gt;
&lt;p&gt;それは、&lt;a href=&#34;https://github.com/haskell-vanguard/haskell-vanguard&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fumieval/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;&lt;/a&gt;さんが始めた、「エコシステムの主要なパッケージの最新版を一挙に&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応させる」プロジェクトです。&lt;br /&gt;
一旦&lt;span class=&#34;ascii&#34;&gt;submodule&lt;/span&gt;として対象のパッケージのリポジトリーを&lt;span class=&#34;ascii&#34;&gt;clone&lt;/span&gt;する、という方法は、&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;のリポジトリーを見ていて知りました💡。&lt;/p&gt;
&lt;p&gt;すでに対応のほとんどが終了したとのことですが、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応していないパッケージは恐らくまだたくさんあります。&lt;br /&gt;
ゴールデンウィークももう半分が終わりましたが、時間をとって&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;のようにチャレンジしてみるのはいかがでしょうか💪💪💪&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;もっとも、私のようにものぐさな人間が作るパッケージには、そもそも上限も何も書いてないことが多いのですが…😰&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;本来であれば&lt;span class=&#34;ascii&#34;&gt;Hackage Security&lt;/span&gt;の設定も必要なはずなんですが、なぜかうまくいかず…😱。&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3844&#34;&gt;こちら&lt;/a&gt;で紹介された&lt;span class=&#34;ascii&#34;&gt;workaround&lt;/span&gt;にしたがって、関連する設定を除くことにしました…。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;code&gt;stack solver&lt;/code&gt;コマンドを使えば、この節で紹介するエラーは簡単にクリアできそうだということを聞いて試した&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Thanks,&lt;/span&gt; &lt;a href=&#34;https://github.com/mizunashi-mana&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mizunashi-mana&lt;/span&gt;&lt;/a&gt;さん！）&lt;/small&gt;のですが、手元のパッケージでは依存関係を解決できず、エラーになってしまいました…。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/asterius.html&#34; lang=&#34;ja&#34;&gt;AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/string-gap-for-heredoc-like.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell でも heredoc がしたい&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/string-gap-for-heredoc-like.html</id><title type="text">Haskell でも heredoc がしたい</title><updated>2019-04-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/string-gap-for-heredoc-like.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;多くの言語では， &lt;span class=&#34;ascii&#34;&gt;here document (heredoc)&lt;/span&gt; という言語機能が搭載されています．これは，複数行の文字列をコード中に文字列リテラルとして埋め込める機能です．今日は &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; ほど使い勝手がよくないものの，長い文字列を埋め込める， &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準の &lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt; という機能を紹介したいと思います．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#string-gap&#34; title=&#34;string-gap&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp-下での注意事項&#34; title=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; 下での注意事項&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;string-gap&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#string-gap&#34; title=&#34;string-gap&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;bash&lt;/span&gt; では，複数行の文字列を，次の記法で埋め込むことができます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;bu&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;EOS&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;some text&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;is multilined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;EOS&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;va&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは，&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;some text
is multilined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という文字列が出力されます．多くの言語では似たような構文で &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; が採用されていて，特殊な記号の後に終端記号を書いて，その後の終端記号までを文字列リテラルとして扱われます． &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では残念ながらこのような機能は搭載されていませんが，代わりに次の記法が提供されています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \some text\n\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \is multilined\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この実行結果は，前の &lt;span class=&#34;ascii&#34;&gt;bash&lt;/span&gt; スクリプトの結果と同じになります． &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; より色々ごちゃごちゃしてますが，複数行の文字列リテラルを書けます．この機能は， &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の複数行文字列リテラルまたは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準では &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; と呼ばれています &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;．記法はかなり単純で，文字列中のバックスラッシュ &lt;code&gt;\&lt;/code&gt; で囲まれた空白が無視されるだけです．改行も空白に含まれます．なので，上のプログラムは以下のプログラムと同じです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;some text\nis multilined&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使わないで複数行の文字列リテラルを書くことはできません．また， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; は空白を全て無視するため，改行を含まない長い文字列を複数行に渡って埋め込むのにも使えます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準でレイアウトルールの処理から除外されているため&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;，インデントを考慮する必要はありません&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;one line&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\multiline\n\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;st&#34;&gt;\text\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;st&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cpp-下での注意事項&#34; title=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; 下での注意事項&lt;/h2&gt;
&lt;p&gt;ただ， &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の &lt;code&gt;CPP&lt;/code&gt; 拡張を使用する際注意が必要です． &lt;code&gt;CPP&lt;/code&gt; では，バックスラッシュで終わる行は，バックスラッシュを除いて次の行と繋げる処理が行われます&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;．この処理のため， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使用した以下のコードは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cpp&lt;/code&gt; により次のように変換されてしまいます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very   \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このため，結果的にコンパイルエラーになってしまいます．このため， &lt;code&gt;CPP&lt;/code&gt; を使う際は， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使わず &lt;code&gt;CPP&lt;/code&gt; の機能を使う必要があります．例えば，上記のプログラムは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\ \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くと &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; をそのまま使った時のプログラムと同じになります．一番最初の &lt;code&gt;\&lt;/code&gt; は &lt;code&gt;CPP&lt;/code&gt; のためのもの，次の &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; つは &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; になります．&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt; は，昔から &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準で付いている機能なので，ぜひ使ってみてください．&lt;/p&gt;
&lt;p&gt;ただ， &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; より使い勝手は良くないです．変数展開やもう少し見栄えの良い &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; が欲しい場合は， &lt;a href=&#34;http://hackage.haskell.org/package/here&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;here&lt;/span&gt; パッケージ&lt;/a&gt; や &lt;a href=&#34;http://hackage.haskell.org/package/shakespeare&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Shakespeare&lt;/span&gt;&lt;/a&gt; などの &lt;span class=&#34;ascii&#34;&gt;TemplateHaskell&lt;/span&gt; を使ったテンプレートエンジンの使用を検討してみるといいかもしれませんね．&lt;/p&gt;
&lt;p&gt;では，今日はこれでノシ&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-200002.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;2.6&lt;/span&gt; 節&lt;/a&gt;の最後の方で紹介されています．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch10.html#x17-17800010.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;10.3&lt;/span&gt; 節&lt;/a&gt; で触れられています．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/cpp/Initial-processing.html#index-continued-lines&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; の仕様の &lt;span class=&#34;ascii&#34;&gt;1.2&lt;/span&gt; 節&lt;/a&gt; で触れられています．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/stack-ghc8.8.html&#34; lang=&#34;ja&#34;&gt;GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hourly-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;DroneでHaskell Antennaを毎時更新する&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id><title type="text">Drone 1.0 を GCE 上に構築する</title><updated>2019-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先月ついに &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！&lt;/p&gt;
&lt;p&gt;で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、&lt;code&gt;.drone.yml&lt;/code&gt; という設定ファイルにパイプラインを使って記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm test&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; database&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mysql&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3306&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．&lt;/p&gt;
&lt;h2 id=&#34;drone-on-gcp&#34;&gt;Drone on GCP&lt;/h2&gt;
&lt;p&gt;Drone 自体は Docker で起動できる(&lt;a href=&#34;https://docs.drone.io/installation&#34;&gt;公式ドキュメント&lt;/a&gt;)． docker-compose を次のように記述することで簡単に起動可能だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/lib/drone:/data&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_GITHUB_CLIENT&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_GITHUB_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_AGENTS_ENABLED=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_HOST=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_HOST&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; drone&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SERVER=http://drone&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_NAME=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;HOSTNAME&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href=&#34;/posts/2019-01-05-docker-compose-up-drone-1-0.html&#34;&gt;ローカルで試す話は前に書いた&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．&lt;/p&gt;
&lt;h3 id=&#34;gcpでの準備&#34;&gt;GCPでの準備&lt;/h3&gt;
&lt;p&gt;HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/koshilife/items/a75a69d03e2524f33c8e&#34;&gt;GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;GCEインスタンスを立てる
&lt;ul&gt;
&lt;li&gt;スペックは &lt;code&gt;n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk&lt;/code&gt; にした&lt;/li&gt;
&lt;li&gt;HTTPアクセスを許可しておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インスタンスグループを作成&lt;/li&gt;
&lt;li&gt;HTTP(S) LB を作成
&lt;ul&gt;
&lt;li&gt;バックエンド: (2)のインスタンスグループを選んで他はデフォルト値&lt;/li&gt;
&lt;li&gt;ホストとパスのルール: 特になし&lt;/li&gt;
&lt;li&gt;フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DNSのAレコードを作成
&lt;ul&gt;
&lt;li&gt;有効化されるのに長いと1時間ぐらいかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．&lt;/p&gt;
&lt;h3 id=&#34;drone-の準備と起動&#34;&gt;Drone の準備と起動&lt;/h3&gt;
&lt;p&gt;上記手順の(1)で以下のプログラムをインストール:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx の設定は雑に次のような感じ(&lt;a href=&#34;https://angristan.xyz/host-your-own-ci-cd-server-with-drone/&#34;&gt;参考&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode conf&#34;&gt;&lt;code class=&#34;sourceCode ini&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;server {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen 80 default_server;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[::]&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;:80 default_server;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  server_name _;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  return 444;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;dt&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;dt&#34;&gt;server {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen 80;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  server_name &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[(4)で設定するドメイン]&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  if ($http_x_forwarded_proto &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &amp;#39;http&amp;#39;) {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    return 301 https://$server_name$request_uri;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  }&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  location / {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header Host $http_host;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Forwarded-Proto $scheme;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_pass http://localhost:8000;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_redirect off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_buffering off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    chunked_transfer_encoding off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  }&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; title=&#34;26&#34;&gt;&lt;span class=&#34;dt&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで &lt;code&gt;docker-compose up -d&lt;/code&gt; とすれば良い．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/drone-1-0-in-gce/my-drone-example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;drone-起動時の環境変数&#34;&gt;Drone 起動時の環境変数&lt;/h3&gt;
&lt;p&gt;このあたりのを適宜使った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRONE_USER_FILTER
&lt;ul&gt;
&lt;li&gt;認証後に閲覧できるユーザーを絞る&lt;/li&gt;
&lt;li&gt;ただし Public は誰でも見れる(はず)&lt;/li&gt;
&lt;li&gt;ちなみに Internal はここで指定したユーザー全員が見れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_USER_CREATE
&lt;ul&gt;
&lt;li&gt;Admin ユーザーみたいな感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
&lt;ul&gt;
&lt;li&gt;この二つをオンにしておくと &lt;code&gt;docker logs&lt;/code&gt; でだいたいログを追える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;drone-の情報&#34;&gt;Drone の情報&lt;/h3&gt;
&lt;p&gt;冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.drone.io/&#34;&gt;Drone Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.drone.yml&lt;/code&gt; の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は &lt;a href=&#34;https://github.com/search?q=org%3Adrone&amp;amp;type=Issues&#34;&gt;GitHub Issue&lt;/a&gt; の他に &lt;a href=&#34;https://discourse.org/&#34;&gt;Discourse&lt;/a&gt; というサービスを使っている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.drone.io/&#34;&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/drone/home&#34;&gt;drone/home - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;Haskell の Drone クライアント&lt;/a&gt;を作るときは直接ソースコードを見ていた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;: &lt;code&gt;handler/api&lt;/code&gt; とか見ると良い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go - GitHub&lt;/a&gt;: Drone API の Go クライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid.html</id><title type="text">Sum Monoid</title><updated>2019-02-13T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Sum&#34;&gt;Sum&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- (+) の結合律より&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; ((a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;newtype-を使って定義する理由&#34;&gt;newtype を使って定義する理由&lt;/h2&gt;
&lt;p&gt;わざわざ &lt;code&gt;Sum&lt;/code&gt; という新しい型を作ってインスタンスを定義しなくても、&lt;code&gt;Int&lt;/code&gt; を使って直接 &lt;code&gt;Semigroup&lt;/code&gt; と &lt;code&gt;Monoid&lt;/code&gt; のインスタンスを定義すれば良いんじゃないか？と普通は思います。&lt;/p&gt;
&lt;p&gt;実際に以下の定義は問題なく動きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; mempty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、足し算と同様に掛け算もモノイドとして定義したいと思う人もいるでしょう。&lt;/p&gt;
&lt;p&gt;この時 &lt;code&gt;Int&lt;/code&gt; は既に &lt;code&gt;Semigroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt; のインスタンス定義があるため、同じファイルに以下のように定義することはできません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題を解決する方法はいくつかありますが、このような例では &lt;code&gt;newtype&lt;/code&gt; が適切ということです。&lt;/p&gt;
&lt;h2 id=&#34;law-の自動チェック-quickcheck-classes&#34;&gt;Law の自動チェック (quickcheck-classes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-classes&#34;&gt;quickcheck-classes&lt;/a&gt; を使って &lt;code&gt;Semigroup law&lt;/code&gt; と &lt;code&gt;Monoid law&lt;/code&gt; がちゃんと法則を満たすかどうかチェックしてみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Arbitrary&lt;/code&gt; が無いとチェックできないので &lt;code&gt;derive&lt;/code&gt; しています。&lt;/p&gt;
&lt;p&gt;実行はめっちゃ簡単で、&lt;code&gt;lawsCheck&lt;/code&gt; 関数と &lt;code&gt;semigroupLaws&lt;/code&gt; や &lt;code&gt;monoidLaws&lt;/code&gt; などのチェックしたい則に対応する関数を使うだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 99 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity +++ OK, passed 100 tests.
Monoid: Right Identity +++ OK, passed 100 tests.
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考までに &lt;code&gt;mempty&lt;/code&gt; の定義が Law を満たさない場合の例も載せておきます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 113 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend mempty a = a
  a = Sum {getSum = 0}
  mappend mempty a = Sum {getSum = 1}
Monoid: Right Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend a mempty = a
  a = Sum {getSum = 0}
  mappend a mempty = Sum {getSum = 1}
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じでモノイドの左単位元則 (Left Identity law) と右単位元則 (Right Identity law) が満たされていないことを教えてくれます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://people.cs.kuleuven.be/~tom.schrijvers/Research/talks/lhug4.pdf&#34;&gt;Lists and Other Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html</id><title type="text">Last Monoid</title><updated>2019-02-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Last&#34;&gt;Last&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getLast ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  _ &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b            &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Last&lt;/code&gt; モノイドは &lt;code&gt;First&lt;/code&gt; モノイドとほとんど同じですが、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で結合した時に最後の値を返すという部分が異なります。&lt;/p&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-law-の確認&#34;&gt;Semigroup law の確認&lt;/h2&gt;
&lt;h3 id=&#34;case-1-b-nothing-c-nothing&#34;&gt;Case (1) (b == Nothing, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-b-just-b-c-nothing&#34;&gt;Case (2) (b == Just b’, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-3-c-just-c&#34;&gt;Case (3) (c == Just c’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;monoid-law&#34;&gt;Monoid Law&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing&#34;&gt;Case (1) (a = Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-just-a&#34;&gt;Case (2) (a = Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;具体例-partial-options-monoid&#34;&gt;具体例: Partial Options Monoid&lt;/h2&gt;
&lt;p&gt;コマンドライン引数によりオプションを受け取り、指定されなかったオプションの値に対してはデフォルト値を利用するという場面で &lt;code&gt;Last&lt;/code&gt; モノイドが活用できそうです。&lt;/p&gt;
&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を使った具体的なサンプルはこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; oInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; oOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; oLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; poInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; poOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; poLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;      { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poInputPath  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poInputPath  y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;      , poOutputPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poOutputPath x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poOutputPath y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-24&#34; title=&#34;24&#34;&gt;      , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poLogLevel   x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poLogLevel   y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-25&#34; title=&#34;25&#34;&gt;      }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-27&#34; title=&#34;27&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-28&#34; title=&#34;28&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;ot&#34;&gt;defaultPartialOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-31&#34; title=&#34;31&#34;&gt;defaultPartialOptions &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-32&#34; title=&#34;32&#34;&gt;  { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-33&#34; title=&#34;33&#34;&gt;  , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-34&#34; title=&#34;34&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastOption ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-37&#34; title=&#34;37&#34;&gt;lastOption &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;ot&#34;&gt;partialOptionsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-40&#34; title=&#34;40&#34;&gt;partialOptionsParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-41&#34; title=&#34;41&#34;&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-42&#34; title=&#34;42&#34;&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-43&#34; title=&#34;43&#34;&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; option auto (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-44&#34; title=&#34;44&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-45&#34; title=&#34;45&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastToEither ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-46&#34; title=&#34;46&#34;&gt;lastToEither errMsg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; errMsg) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getLast&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-47&#34; title=&#34;47&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-48&#34; title=&#34;48&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-49&#34; title=&#34;49&#34;&gt;mkOptions &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-50&#34; title=&#34;50&#34;&gt;  oInputPath  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing input path&amp;quot;&lt;/span&gt;  poInputPath&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-51&#34; title=&#34;51&#34;&gt;  oOutputPath &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing output path&amp;quot;&lt;/span&gt; poOutputPath&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-52&#34; title=&#34;52&#34;&gt;  oLogLevel   &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing loglevel&amp;quot;&lt;/span&gt;    poLogLevel&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-53&#34; title=&#34;53&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-54&#34; title=&#34;54&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-55&#34; title=&#34;55&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-56&#34; title=&#34;56&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-57&#34; title=&#34;57&#34;&gt;  options &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execParser &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; info partialOptionsParser &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-58&#34; title=&#34;58&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mkOptions (defaultPartialOptions &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; options) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-59&#34; title=&#34;59&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt;  msg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-60&#34; title=&#34;60&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; opt &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; opt&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;defaultPartialOptions&lt;/code&gt; でオプションの初期値を用意しておきます。ここで指定されなかったフィールドの値はオプションで必ず指定しなければなりません。今回の例では &lt;code&gt;poOutputPath&lt;/code&gt; が必須オプションになっています。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;Last&lt;/code&gt; モノイドが効いている部分は &lt;code&gt;defaultPartialOptions &amp;lt;&amp;gt; options&lt;/code&gt; です。&lt;code&gt;mempty = Last Nothing&lt;/code&gt; となるため、期待通りの動作が得られます。&lt;/p&gt;
&lt;p&gt;デフォルト値の無いオプションが省略された場合にエラーメッセージが表示される理由としては &lt;code&gt;lastToEither&lt;/code&gt; で &lt;code&gt;getLast&lt;/code&gt; した際に &lt;code&gt;Nothing&lt;/code&gt; となるためです。&lt;/p&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;p&gt;実行結果は見やすく整形しています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# オプション無しで実行
λ&amp;gt; stack run ex3
Missing output path

# 必須オプションの -o のみ指定 (他はデフォルト値)
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot;
Options
  { oInputPath  = &amp;quot;input&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# 必須オプションの -o と -i を指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot;
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# オプションを全部指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot; -l 10
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Just 10
  }&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67&#34;&gt;The Partial Options Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2018/11/29/155311&#34;&gt;SemigroupがMonoidに恋するとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/philopon/items/a29717af62831d3c8c07&#34;&gt;optparse-applicativeをふわっと使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-11-first-monoid.html</id><title type="text">First Monoid</title><updated>2019-02-11T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-11-first-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:First&#34;&gt;First&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  a             &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;First&lt;/code&gt; モノイドは &lt;code&gt;Endo&lt;/code&gt; や &lt;code&gt;Dual&lt;/code&gt; モノイドとは定義の雰囲気が少し違いますね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFirst :: a&lt;/code&gt; ではなく &lt;code&gt;getFirst :: Maybe a&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;インスタンス宣言にクラス制約が必要無い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getFirst (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常に最初の値を返すという、一見意味の無さそうな &lt;code&gt;First&lt;/code&gt; モノイドも実は便利に使えたりします。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-law-の確認&#34;&gt;Semigroup law の確認&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing-b-nothing&#34;&gt;Case (1) (a == Nothing, b == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-nothing-b-just-b&#34;&gt;Case (2) (a == Nothing, b == Just b’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-3-a-just-a&#34;&gt;Case (3) (a == Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;monoid-law&#34;&gt;Monoid Law&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing&#34;&gt;Case (1) (a = Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-just-a&#34;&gt;Case (2) (a = Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;なぜ-getfirst-a-にしないのか&#34;&gt;なぜ getFirst :: a にしないのか？&lt;/h2&gt;
&lt;p&gt;普通は他のモノイド同様に以下のように定義したくなりますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ではなぜこのような定義にしないのでしょうか？&lt;/p&gt;
&lt;p&gt;答えは、&lt;code&gt;Monoid law&lt;/code&gt; を満たさないからです。実際に確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように成り立ちません。ちなみに &lt;code&gt;Semigroup law&lt;/code&gt; は満たします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、Semigroup からモノイドにするために &lt;code&gt;Maybe&lt;/code&gt; でラップしてあると考えて差し支えないと思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Semigroup&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Semigroup, Monoid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;具体例-コマンドラインパーサー&#34;&gt;具体例: コマンドラインパーサー&lt;/h2&gt;
&lt;p&gt;僕が &lt;code&gt;First&lt;/code&gt; モノイドの存在を認識したのは &lt;code&gt;stack&lt;/code&gt; のコードで &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.6/stack-1.9.3/Stack-Types-Config.html#t:ConfigMonoid&#34;&gt;ConfigMonoid&lt;/a&gt; というデータ型があり、その設定値に &lt;code&gt;First Bool&lt;/code&gt; などの型が使われているという場面でした。&lt;/p&gt;
&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を使った具体的なサンプルはこんな感じです。(Last モノイドは名前の通りです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; poInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; poOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;partialOptionsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; title=&#34;12&#34;&gt;partialOptionsParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toPartialOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many (optFilePathP &lt;span class=&#34;ch&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many (optFilePathP &lt;span class=&#34;ch&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; title=&#34;16&#34;&gt;    toPartialOptions input output &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; title=&#34;18&#34;&gt;        { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lift input&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; title=&#34;19&#34;&gt;        , poOutputPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lift output&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; title=&#34;20&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lift ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (f a), &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-23&#34; title=&#34;23&#34;&gt;lift &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;optFilePathP ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-26&#34; title=&#34;26&#34;&gt;optFilePathP &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; strOption &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; short&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-29&#34; title=&#34;29&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-30&#34; title=&#34;30&#34;&gt;  options &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execParser &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; info partialOptionsParser &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; options&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;p&gt;実行すると何が起きているかわかります。(手動で改行等を入れて見やすくしています)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# オプション無しで実行
λ&amp;gt; stack run ex2
PartialOptions
  { poInputPath  = First { getFirst = Nothing }
  , poOutputPath = Last  { getLast  = Nothing }
  }

# どちらもオプションを1つずつ指定して実行
λ&amp;gt; stack run ex2 -- -i aaa -o aaa
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;aaa&amp;quot; }
  }

# -i のオプションのみ2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -i bbb -o aaa
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;aaa&amp;quot; }
  }

# -o のオプションのみ2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -o aaa -o bbb
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;bbb&amp;quot; }
  }

# -i, -o のオプションどちらも2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -i bbb -o aaa -o bbb
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;bbb&amp;quot; }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じで &lt;code&gt;First&lt;/code&gt; モノイドや &lt;code&gt;Last&lt;/code&gt; モノイドを使ってオプションが複数指定された場合に最初の値か最後の値かを選ぶことができます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67&#34;&gt;The Partial Options Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2018/11/29/155311&#34;&gt;SemigroupがMonoidに恋するとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/philopon/items/a29717af62831d3c8c07&#34;&gt;optparse-applicativeをふわっと使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html</id><title type="text">Lambdabot for Slack</title><updated>2019-02-11T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近 slack で &lt;a href=&#34;https://github.com/lambdabot/lambdabot&#34;&gt;Lambdabot&lt;/a&gt; というツールを知りました。こいつを導入するとこんな事ができます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/1.png&#34; alt=&#34;Lambdabot と遊んでいる図&#34; /&gt;&lt;figcaption&gt;Lambdabot と遊んでいる図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;実務で本格的に使えるものではありませんが、入れてみると楽しいですよ。(カスタマイズして改良すれば、かなり使えるかもしれない)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;lambdabot-の導入&#34;&gt;Lambdabot の導入&lt;/h2&gt;
&lt;p&gt;導入はとても簡単で slack app から Lambdabot をインストールするだけです！&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/2.png&#34; alt=&#34;Slack app で検索&#34; /&gt;&lt;figcaption&gt;Slack app で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/3.png&#34; alt=&#34;Lambdabot のインストール画面&#34; /&gt;&lt;figcaption&gt;Lambdabot のインストール画面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;検索するのが面倒な人は &lt;a href=&#34;https://lambdabot.brianmckenna.org/slack/install.html&#34;&gt;Add Lambdabot to Slack&lt;/a&gt; の App ボタンからもインストール可能です。&lt;/p&gt;
&lt;p&gt;アプリのソースコード等は &lt;a href=&#34;https://github.com/markandrus/slack-lambdabot&#34;&gt;markandrus/slack-lambdabot&lt;/a&gt; にありますので、気になる方はこちらもご参照ください。&lt;/p&gt;
&lt;p&gt;自分でビルドしてホスティングする場合は fork の &lt;a href=&#34;https://github.com/ezoerner/slack-lambdabot&#34;&gt;ezoerner/slack-lambdabot&lt;/a&gt; の方が良いかもしれません。(要検証)&lt;/p&gt;
&lt;h2 id=&#34;lambdabot-for-slack-でできること&#34;&gt;Lambdabot for Slack でできること&lt;/h2&gt;
&lt;p&gt;どうやら本家の Lambdabot の機能全てが使えるわけではないようです。&lt;/p&gt;
&lt;p&gt;また、利用可能な機能のうち &lt;code&gt;type&lt;/code&gt; や &lt;code&gt;hoogle&lt;/code&gt;等はちゃんと使えるようですが、&lt;code&gt;run&lt;/code&gt; や &lt;code&gt;check&lt;/code&gt; などは結果がおかしい場合があります。&lt;/p&gt;
&lt;h3 id=&#34;hoogle&#34;&gt;hoogle&lt;/h3&gt;
&lt;p&gt;どうやら結果は3件しか返さないようです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-1.png&#34; alt=&#34;関数名で検索&#34; /&gt;&lt;figcaption&gt;関数名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-2.png&#34; alt=&#34;型名で検索&#34; /&gt;&lt;figcaption&gt;型名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-3.png&#34; alt=&#34;型で検索 (型変数有り)&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数有り)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-4.png&#34; alt=&#34;型で検索 (型変数無し)&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数無し)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;p&gt;どのパッケージが含まれているかわかりませんが、lens の演算子を試したところだめでした。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-1.png&#34; alt=&#34;関数&#34; /&gt;&lt;figcaption&gt;関数&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-2.png&#34; alt=&#34;メソッド&#34; /&gt;&lt;figcaption&gt;メソッド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-3.png&#34; alt=&#34;複雑な式&#34; /&gt;&lt;figcaption&gt;複雑な式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-4.png&#34; alt=&#34;演算子&#34; /&gt;&lt;figcaption&gt;演算子&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-5.png&#34; alt=&#34;セクション&#34; /&gt;&lt;figcaption&gt;セクション&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-6.png&#34; alt=&#34;エラー&#34; /&gt;&lt;figcaption&gt;エラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;run&#34;&gt;run&lt;/h3&gt;
&lt;p&gt;式を実行することができるようですが、全然動かないです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-1.png&#34; alt=&#34;print はエラー&#34; /&gt;&lt;figcaption&gt;print はエラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-2.png&#34; alt=&#34;奇跡的に動いた例&#34; /&gt;&lt;figcaption&gt;奇跡的に動いた例&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-3.png&#34; alt=&#34;文字列を含む場合にはエラーになる&#34; /&gt;&lt;figcaption&gt;文字列を含む場合にはエラーになる&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-4.png&#34; alt=&#34;無限リストは適当に打ち切り&#34; /&gt;&lt;figcaption&gt;無限リストは適当に打ち切り&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;check&#34;&gt;check&lt;/h3&gt;
&lt;p&gt;QuickCheck も実行可能ですが、上手く行く例が作れません・・・。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/check-1.png&#34; alt=&#34;実行時間の制約に引っかかってるっぽい&#34; /&gt;&lt;figcaption&gt;実行時間の制約に引っかかってるっぽい&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;free&#34;&gt;free&lt;/h3&gt;
&lt;p&gt;たぶん実装は &lt;a href=&#34;https://github.com/lambdabot/lambdabot/blob/0b26cb6ca0e0389bcff68d360c18775a787c9d52/lambdabot-haskell-plugins/src/Lambdabot/Plugin/Haskell/Free/FreeTheorem.hs&#34;&gt;FreeTheorem.hs&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;良くわからないので解説できません。実行結果だけ貼っておきます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-1.png&#34; alt=&#34;reverse&#34; /&gt;&lt;figcaption&gt;reverse&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-2.png&#34; alt=&#34;const&#34; /&gt;&lt;figcaption&gt;const&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-3.png&#34; alt=&#34;id&#34; /&gt;&lt;figcaption&gt;id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-4.png&#34; alt=&#34;flip&#34; /&gt;&lt;figcaption&gt;flip&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-5.png&#34; alt=&#34;filter&#34; /&gt;&lt;figcaption&gt;filter&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;pl&#34;&gt;pl&lt;/h3&gt;
&lt;p&gt;ポイントフリーにしてくれます。また fusion もいくつか可能っぽいです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-1.png&#34; alt=&#34;ポイントフリー化1&#34; /&gt;&lt;figcaption&gt;ポイントフリー化1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-2.png&#34; alt=&#34;ポイントフリー化2&#34; /&gt;&lt;figcaption&gt;ポイントフリー化2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-3.png&#34; alt=&#34;f . id = id&#34; /&gt;&lt;figcaption&gt;f . id = id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-4.png&#34; alt=&#34;map f . map g = map (f . g)&#34; /&gt;&lt;figcaption&gt;map f . map g = map (f . g)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;ちゃんと作り込んだら結構使えそうな気がします。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html</id><title type="text">Endo Monoid</title><updated>2019-02-04T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Endo&#34;&gt;Endo&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Endo&lt;/code&gt; という名前は &lt;code&gt;自己準同型 (Endomorphism)&lt;/code&gt; に由来します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; appEndo ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [(&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;fu&#34;&gt;negate&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; appEndo f &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; appEndo (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, Haskell!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; (appEndo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [(&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;), &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;, (&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)]) &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, Haskell!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;appEndo&lt;/code&gt; すると関数が出てくるところがポイントですね。2つ目の評価の流れをざっくり追うとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;haskll&#34;&gt;&lt;code&gt;  appEndo (Endo (&amp;quot;Hello, &amp;quot; ++) &amp;lt;&amp;gt; Endo (++ &amp;quot;!&amp;quot;)) &amp;quot;Haskell&amp;quot;
= appEndo (Endo ((&amp;quot;Hello, &amp;quot; ++ ) . (++ &amp;quot;!&amp;quot;))) &amp;quot;Haskell&amp;quot;
= (&amp;quot;Hello, &amp;quot; ++ ) . (++ &amp;quot;!&amp;quot;) $ &amp;quot;Haskell&amp;quot;
= &amp;quot;Hello, &amp;quot; ++ (&amp;quot;Haskell&amp;quot; ++ &amp;quot;!&amp;quot;)
= &amp;quot;Hello, &amp;quot; ++ &amp;quot;Haskell!&amp;quot;
= &amp;quot;Hello, Haskell!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Endo&lt;/code&gt; は意外と色んなところで使える便利なモノイドです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より f . (g . h) == (f . g) . h&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; ((f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より f . id == f&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より id . f == f&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;f-.-g-.-h-f-.-g-.-h&#34;&gt;&lt;code&gt;f . (g . h) == (f . g) . h&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(.)&lt;/code&gt; の定義&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(.) ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g x)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;(&lt;span class=&#34;dt&#34;&gt;LHS&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;  f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f ((g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h) x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f ((\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g (h y)) x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g (h x))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;(&lt;span class=&#34;dt&#34;&gt;RHS&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;  (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) (h x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g y)) (h x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g (h x))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;id-.-f-f&#34;&gt;&lt;code&gt;id . f == f&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; の定義&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; (f x)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例1-write-endo-パターン&#34;&gt;例1) Write Endo パターン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/yesod-core&#34;&gt;yesod-core&lt;/a&gt; パッケージの &lt;a href=&#34;https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Handler.html#t:ProvidedRep&#34;&gt;ProvideRep&lt;/a&gt; を扱う関数は &lt;code&gt;Endo&lt;/code&gt; を利用しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;selectRep ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadHandler&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;TypedContent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;provideRep ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;HasContentType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;provideRepType ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;ToContent&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また &lt;code&gt;Yesod&lt;/code&gt; には &lt;a href=&#34;https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Types.html#t:GHState&#34;&gt;GHState&lt;/a&gt; 型がありますが、そこでも &lt;code&gt;Endo&lt;/code&gt; を使っています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHState&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHState&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;    {&lt;span class=&#34;ot&#34;&gt; ghsSession ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SessionMap&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsRBC     ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestBodyContents&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsIdent   ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsCache   ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;TypeMap&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsCacheBy ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;KeyedTypeMap&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsHeaders ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような &lt;code&gt;Writer&lt;/code&gt; と &lt;code&gt;Endo&lt;/code&gt; を使った実装パターンは &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html&#34;&gt;Quick and Easy DSLs with Writer Endo&lt;/a&gt; で紹介されている &lt;code&gt;Writer Endo&lt;/code&gt; パターンとして知られているようです。&lt;/p&gt;
&lt;h2 id=&#34;例2-データの更新&#34;&gt;例2) データの更新&lt;/h2&gt;
&lt;p&gt;こんな感じで設定等を更新する際にも使えるかもしれません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;update ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; title=&#34;15&#34;&gt;update fs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo (&lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; fs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;me ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; title=&#34;18&#34;&gt;me &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-19&#34; title=&#34;19&#34;&gt;  [ (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;.~&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;guchi&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-20&#34; title=&#34;20&#34;&gt;  , (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;age &lt;span class=&#34;op&#34;&gt;.~&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-21&#34; title=&#34;21&#34;&gt;  ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;defaultPerson ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-24&#34; title=&#34;24&#34;&gt;defaultPerson &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;NONAME&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-25&#34; title=&#34;25&#34;&gt;             &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;age  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-26&#34; title=&#34;26&#34;&gt;             &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package extensible --package lens EndoExample.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; defaultPerson&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;NONAME&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; age &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; update me defaultPerson&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;guchi&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; age &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例3-パターンマッチの実装&#34;&gt;例3) パターンマッチの実装&lt;/h2&gt;
&lt;p&gt;僕はあまり &lt;code&gt;Endo&lt;/code&gt; モノイドを使いこなせていませんが、良い感じに使えたと思える例としては TAPL 11章でレコードパターンを実装する際です。&lt;/p&gt;
&lt;p&gt;レコードのパターンマッチは代入の合成で書くことができるので、&lt;code&gt;Endo&lt;/code&gt; がちょうどぴったり適用できました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;match ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pattern&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;match (&lt;span class=&#34;dt&#34;&gt;PtVar&lt;/span&gt; _ n) v &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; subst n v&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;match p&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;PtRecord&lt;/span&gt; fs) v&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;TmRecord&lt;/span&gt; fs&amp;#39;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; isRecordValue v &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sameFieldLength p v&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;uncurry&lt;/span&gt; match) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;zip&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; fs) (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; fs&amp;#39;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;match: pattern match failure&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;match &lt;span class=&#34;dt&#34;&gt;PtRecord&lt;/span&gt;{} _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;match: v is not Rrcord&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/user/mgsloan/monoids-tour&#34;&gt;Monoids Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html&#34;&gt;Quick and Easy DSLs with Writer Endo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ploeh.dk/2018/04/16/endomorphic-composite-as-a-monoid/&#34;&gt;Endomorphic Composite as a monoid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id><title type="text">Re: Marp のすゝめ</title><updated>2019-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;strong&gt;2019.4.6 Marp-core-0.6.0 での更新を反映した&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://yhatt.github.io/marp/&#34;&gt;Marp&lt;/a&gt; というのは Markdown 記法で書けるスライド作成ツールです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown 記法で手軽に書ける&lt;/li&gt;
&lt;li&gt;見た目が綺麗&lt;/li&gt;
&lt;li&gt;画像の拡縮が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの特徴から個人的にかなり重宝しています． その辺りは昔&lt;a href=&#34;/posts/2016-12-14-recommend-marp.html&#34;&gt;記事にしました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから &lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;Marp Next&lt;/a&gt; というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます&#34;&gt;markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yhatt/items/874d5bfa919c32728403&#34;&gt;Puppeteer &amp;amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，本記事での Marp Next のバージョンは &lt;code&gt;marp-cli-0.6&lt;/code&gt; ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．&lt;/p&gt;
&lt;h2 id=&#34;marp-next&#34;&gt;Marp Next&lt;/h2&gt;
&lt;p&gt;新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;リポジトリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;marp-team/marp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp 全体を取りまとめるリポジトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marpit&#34;&gt;Marpit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core&#34;&gt;Marp Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli&#34;&gt;Marp CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の CLI ツール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-web&#34;&gt;Marp Web&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の Web UI (まだベータっぽい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Marp Desktop&lt;/td&gt;
&lt;td&gt;Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22&#34;&gt;旧 Marp のリポジトリの Issue ラベルに &lt;code&gt;Marp Next&lt;/code&gt; や &lt;code&gt;Supports in Marp Next&lt;/code&gt; というのができている&lt;/a&gt;． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには &lt;code&gt;Support in Marp Next&lt;/code&gt; を付けたようだ．&lt;/p&gt;
&lt;h3 id=&#34;旧-marp-との非互換な機能&#34;&gt;旧 Marp との非互換な機能&lt;/h3&gt;
&lt;p&gt;これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;==AAA==&lt;/code&gt; というハイライト機能がない（辛い）&lt;/li&gt;
&lt;li&gt;打ち消し線記法 &lt;code&gt;~~AAA~~&lt;/code&gt; もない&lt;/li&gt;
&lt;li&gt;画像の拡縮ルール (Marpit)
&lt;ul&gt;
&lt;li&gt;より&lt;a href=&#34;https://marpit.marp.app/image-syntax&#34;&gt;細かいルールができて&lt;/a&gt;書きやすくなった&lt;/li&gt;
&lt;li&gt;しかし前のは記法は非互換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; がないので中央寄せができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- *template: xxx --&amp;gt;&lt;/code&gt; のようなそのページだけ機能追加 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- _class: xxx --&amp;gt;&lt;/code&gt; のように先頭にアンダースコア &lt;code&gt;_&lt;/code&gt; を付けるスタイルになった&lt;/li&gt;
&lt;li&gt;ちなみに &lt;code&gt;&amp;lt;!-- $theme: xxx --&amp;gt;&lt;/code&gt; はあるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマの取り扱い (Marpit ??)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; だけだと中央寄せなどになっていた機能がなくなった&lt;/li&gt;
&lt;li&gt;それらはテーマのイチ &lt;code&gt;class&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;前の &lt;code&gt;template&lt;/code&gt; も &lt;code&gt;class&lt;/code&gt; なので組み合わせれない&lt;/li&gt;
&lt;li&gt;明示的に指定できるようになったのは嬉しい&lt;/li&gt;
&lt;li&gt;class を複数設定できるようになった！ (&lt;a href=&#34;https://github.com/marp-team/marp-core/pull/69&#34;&gt;marp-core-0.6.0~&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KaTeX のバージョンアップ (Marp Core)
&lt;ul&gt;
&lt;li&gt;0.6.0 =&amp;gt; 0.10.0&lt;/li&gt;
&lt;li&gt;0.6.0 だと全然 LaTeX 記法をサポートしていないので&lt;a href=&#34;https://katex.org/docs/supported.html&#34;&gt;助かる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まぁ僕はフォークしてバージョンをあげてたけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドのサイズ・縦横比 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size&#34;&gt;テーマごとになったぽい&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marpit.marp.app/directives?id=tweak-theme-style&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; で上書きすると変な余白ができる&lt;/li&gt;
&lt;li&gt;どっちにせよ前の &lt;code&gt;&amp;lt;!-- size: 4:3 --&amp;gt;&lt;/code&gt; みたいなのはできないっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ちなみに，コードが全部 CoffeScript から TypeScript になってた．&lt;/p&gt;
&lt;h2 id=&#34;cli-を試す&#34;&gt;CLI を試す&lt;/h2&gt;
&lt;p&gt;リッチすぎてビビる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README の通りで動いた (Mac, npx)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx @marp-team/marp-cli slide.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/marpteam/marp-cli/&#34;&gt;Docker もサポートされてる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ただし一部機能に制限があるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown から HTML を生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pdf&lt;/code&gt; オプションで PDF を生成する
&lt;ul&gt;
&lt;li&gt;ただし &lt;strong&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli/pull/10&#34;&gt;セキュリティの関係&lt;/a&gt;でデフォルトではローカルファイルの画像などを埋め込めない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;そのためローカル画像を使うには &lt;code&gt;--allow-local-files&lt;/code&gt; をつける&lt;/li&gt;
&lt;li&gt;日本語フォントも変になっている気がする&lt;/li&gt;
&lt;li&gt;日本語検索もダメっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; オプションで Markdown の変更を検知し再生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--server&lt;/code&gt; オプションで &lt;code&gt;localhost:8080&lt;/code&gt; で閲覧やPDFの生成ができる (watch もされます)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preview&lt;/code&gt; でプレビューモード
&lt;ul&gt;
&lt;li&gt;待望の！！&lt;/li&gt;
&lt;li&gt;ブラウザの全画面モードを使ってるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; でカスタムテーマを設定可能 (CSS)&lt;/li&gt;
&lt;li&gt;CLI のオプションを使わずに&lt;a href=&#34;https://github.com/marp-team/marp-cli#configuration-file&#34;&gt;設定ファイルでも設定可能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;.marprc.yml&lt;/code&gt; &lt;code&gt;marp.config.js&lt;/code&gt; のどれでも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-netlify-を試す&#34;&gt;CLI + Netlify を試す&lt;/h2&gt;
&lt;p&gt;試した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/pub-slides&#34;&gt;matsubara0507/pub-slides - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507-slides.netlify.com/&#34;&gt;&lt;img src=&#34;/assets/re-recommend-marp/pub-slides-with-marp.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試し方: Marp の作者の&lt;a href=&#34;https://github.com/yhatt/marp-cli-example&#34;&gt;リポジトリ&lt;/a&gt;の &lt;code&gt;Deploy to netlify&lt;/code&gt; をクリックするだけ．&lt;/p&gt;
&lt;p&gt;この方法の場合，リポジトリの &lt;code&gt;PITCHME.md&lt;/code&gt; を &lt;code&gt;index.html&lt;/code&gt; に変換する． marp-cli の設定は &lt;code&gt;package.yml&lt;/code&gt; に書いてある． &lt;a href=&#34;https://github.com/marp-team/marp-cli#options&#34;&gt;設定方法&lt;/a&gt;はこれを参照．&lt;/p&gt;
&lt;p&gt;僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt; 以下の &lt;code&gt;*.md&lt;/code&gt; を全部変換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.md&lt;/code&gt; が &lt;code&gt;index.html&lt;/code&gt; のスライドになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後述する自作テーマをサブモジュールで設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides/assets&lt;/code&gt; にある画像を &lt;code&gt;public&lt;/code&gt; にコピーしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように少しだけ設定を書き換えた．&lt;/p&gt;
&lt;h2 id=&#34;web-ui-を試す&#34;&gt;Web UI を試す&lt;/h2&gt;
&lt;p&gt;すでに&lt;a href=&#34;https://web.marp.app/&#34;&gt;ここ&lt;/a&gt;から試せる． 手元で試すなら:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/re-recommend-marp/editing_marp_next.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルの読み込みや保存が可能&lt;/li&gt;
&lt;li&gt;プレゼンテーションモードは(まだ)なかった&lt;/li&gt;
&lt;li&gt;PDFのエクスポートはブラウザの印刷機能を使うようだった&lt;/li&gt;
&lt;li&gt;カスタムテーマの設定などはまだできない？？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;テーマを移植する&#34;&gt;テーマを移植する&lt;/h2&gt;
&lt;p&gt;オリジナルテーマを作ってたので Marp Next にも移植した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;olive&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/marp-themes&#34;&gt;marp-themes&lt;/a&gt; というリポジトリを作り，そこに置いてある． やったことは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss&#34;&gt;gaia の scss&lt;/a&gt; を持ってきて主に色を変更
&lt;ul&gt;
&lt;li&gt;カスタムテーマとして指定できるのは CSS だけなので &lt;code&gt;scss&lt;/code&gt; コマンドで手動変換する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の中央寄せをできるようにした
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ![](path/to/image.jpg)&lt;/code&gt; とすると中央寄せになるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt; から &lt;code&gt;h6&lt;/code&gt; のどれでも良いです&lt;/li&gt;
&lt;li&gt;ただし，雑に &lt;code&gt;img&lt;/code&gt; タグに適用してるので emoji を含ませるとずれる…&lt;/li&gt;
&lt;li&gt;marpit に修正入れてもらった方が良いかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lead&lt;/code&gt; + &lt;code&gt;invert&lt;/code&gt; などの class を作っておいた
&lt;ul&gt;
&lt;li&gt;scss で書いてるので &lt;code&gt;lead&lt;/code&gt; を適当に mixi-in にして include するだけ&lt;/li&gt;
&lt;li&gt;これもできれば &lt;code&gt;class&lt;/code&gt; の組み合わせができるようになって欲しい&lt;/li&gt;
&lt;li&gt;marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;olive&#34;&gt;Olive&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;colors&#34;&gt;Colors&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;haskell&#34;&gt;Haskell&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう既に十分使える状態になっていました． すごい！&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html</id><title type="text">Dual Monoid</title><updated>2019-02-02T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Dual&#34;&gt;Dual&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getDual ::&lt;/span&gt; a }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbbaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbbaaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いつか使う時もあるかもしれないので、適当な例を作ってみます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a, b, c は Semigroup なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;headmaybe&#34;&gt;headMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;headMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- First を使った定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;headMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lastmaybe&#34;&gt;lastMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;lastMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Last を使った定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;lastMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;last&#34;&gt;last&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;last&amp;#39; ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;last&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getAlt &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; user &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; (mzero)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reverse&#34;&gt;reverse&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;rev ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;rev &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; rev [&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;[&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; rev &lt;span class=&#34;st&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dlroW olleH&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;foldl&#34;&gt;foldl&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; f z t &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo (getDual (&lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; f) t)) z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/haskell/example/2555/folding-a-structure-in-reverse&#34;&gt;Folding a structure in reverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@sjsyrek/five-minutes-to-monoid-fe6f364d0bba&#34;&gt;Five Minutes to Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ozark.hendrix.edu/~yorgey/pub/monoid-pearl.pdf&#34;&gt;Monoids: Theme and Variations (Functional Pearl)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-13.5/base-4.12.0.0/Prelude.html#t:Foldable&#34;&gt;Foldable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hourly-antenna.html</id><title type="text">DroneでHaskell Antennaを毎時更新する</title><updated>2019-01-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hourly-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という &lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt; ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;この&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページは&lt;a href=&#34;https://github.com/haskell-jp/antenna&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のリポジトリ&lt;/a&gt;で開発し、&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;として公開しています。 更新は&lt;a href=&#34;https://travis-ci.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;Daily Cron&lt;/span&gt;を使って行なっていましたが、なんとかして &lt;strong&gt;毎時更新を実現したい&lt;/strong&gt; と思案していました。 ひょんなことから&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスを見つけ、このサービスでは&lt;span class=&#34;ascii&#34;&gt;Hourly Cron&lt;/span&gt;が可能だったので試しに更新の部分だけ移行してみました。 という話です。&lt;/p&gt;
&lt;p&gt;ちなみに、本稿は全く&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードが出て来ません &lt;span class=&#34;ascii&#34;&gt;;)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;毎時更新を実現するために&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;はパブリックリポジトリであれば無料で利用できる&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスです。 内部では&lt;a href=&#34;https://drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームを利用しています。 &lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;は以下のような特徴を持っています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Jenkins&lt;/span&gt;のような&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;である&lt;span class=&#34;ascii&#34;&gt;(Go&lt;/span&gt;言語製&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のようなパイプラインによる設定を行う&lt;span class=&#34;ascii&#34;&gt;(YAML&lt;/span&gt;形式&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;との親和性が高く&lt;span class=&#34;ascii&#34;&gt;k8s&lt;/span&gt;などでの動作もサポートしている&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Plugin&lt;/span&gt;システムによって外部サービスとの連携が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;のためお好みのクラウドサービスなどで自前運用も可能ですし、&lt;span class=&#34;ascii&#34;&gt;Drone Enterprise&lt;/span&gt;という有料のクラウドサービスも提供しています。&lt;/p&gt;
&lt;h1 id=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;毎時更新を実現するために&lt;/h1&gt;
&lt;p&gt;単純に&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;の設定ファイルを記述するだけではなく、次のような作業を行いました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージを自動更新&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;順に説明していきましょう。&lt;/p&gt;
&lt;h2 id=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;では無償でキャッシュを利用することができません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。 &lt;span class=&#34;ascii&#34;&gt;Haskell(&lt;/span&gt;というか&lt;span class=&#34;ascii&#34;&gt;Stack)&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;をしている方ならわかると思いますが、キャッシュなしにビルドするとすごい時間がかかります。 なので、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の静的ページの生成を行う &lt;code&gt;antenna&lt;/code&gt; コマンドを&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージとしておき、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;内ではこのイメージを利用して静的ページの生成を行う方針でいきます。&lt;/p&gt;
&lt;p&gt;もちろん&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの生成には、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;インテグレーションを使います。 以下のような設定を&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に追記し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行するだけで&lt;code&gt;antenna&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージが生成されます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stack docker pull
stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;に&lt;a href=&#34;https://hub.docker.com/r/haskelljp/antenna/&#34;&gt;&lt;code&gt;haskelljp/antenna&lt;/code&gt;&lt;/a&gt;というネームスペースを確保した&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のでここにプッシュしました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker tag antenna haskelljp/antenna
docker push haskelljp/antenna&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに、&lt;code&gt;haskell-jp&lt;/code&gt; ではなく &lt;code&gt;haskelljp&lt;/code&gt; なのは、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の組織アカウント名には &lt;code&gt;-&lt;/code&gt; が使えなかったからです。&lt;/p&gt;
&lt;h2 id=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;Automated builds&lt;/span&gt;と呼ばれる&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;などのプッシュによって行う自動ビルドがありますが、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt;を使うと、その機能を利用することができません。 そこで、&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;を使って自動ビルドすることにしました。 この辺りは「&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt; とイメージの自動更新 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」で記事にしてあるので、細かい話は割愛します。&lt;/p&gt;
&lt;p&gt;今回は次のような設定をして、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt; ブランチにプッシュがあった時にのみ&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;にプッシュします&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; export PATH=$HOME/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &lt;span class=&#34;st&#34;&gt;&amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker --install-ghc test --bench --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker build --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type = push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker tag antenna haskelljp/antenna&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker push haskelljp/antenna&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のビルドもするために毎回&lt;span class=&#34;ascii&#34;&gt;Docker Pull&lt;/span&gt;が走るようになり少し遅くなったのが辛いですね&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;今後要検討&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/h2&gt;
&lt;p&gt;いよいよ&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;による &lt;code&gt;antenna&lt;/code&gt; コマンドの実行を設定します。 元々は &lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt; でこんな感じでした&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install anttena&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal install&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git clone -b gh-pages &amp;quot;https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git&amp;quot; temp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type IN (push, cron)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;after_success:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack exec -- antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack install&lt;/code&gt; で &lt;code&gt;antenna&lt;/code&gt; コマンドの実行ファイルを生成し&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;これはキャッシュされるので早い&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;、&lt;code&gt;gh-pages&lt;/code&gt; ブランチへページの更新をプッシュするために&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;を使って再度クローンしていました。 更新の有無は &lt;code&gt;git diff&lt;/code&gt; を使って確認しています。&lt;/p&gt;
&lt;p&gt;まずはこれをこのまま&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;に移植します&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GH_TOKEN:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github_api_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GIT_NAME:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; BOT&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages &lt;span class=&#34;st&#34;&gt;&amp;quot;https://${GH_TOKEN}@github.com/haskell-jp/antenna.git&amp;quot;&lt;/span&gt; temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記法は違うもののそのまま移植ができました。 条件&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;if&lt;/code&gt;や&lt;code&gt;when&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;のところですが、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;で&lt;code&gt;cron&lt;/code&gt;のイベントを指定する方法がわからなかったので、動作しては困る&lt;code&gt;pull_request&lt;/code&gt;だけ弾くようにしました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Cron&lt;/span&gt;の設定は&lt;span class=&#34;ascii&#34;&gt;Web UI&lt;/span&gt;上で行います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/drone-cron-setting.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;これで毎時間&lt;code&gt;master&lt;/code&gt;ブランチのビルドが実行されます。&lt;/p&gt;
&lt;h2 id=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;は他の個人のリポジトリも操作できてしまうので、兼ねてからできれば使いたくないなと思っていました&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;特に個人プロジェクトじゃない&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のプロジェクトでは&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 なので、これを機にリポジトリ固有の&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行しました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のような書き込み用の&lt;span class=&#34;ascii&#34;&gt;SSH Key&lt;/span&gt;を登録する機能は&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;にはありません。 代わりに次のように書くと良いです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Secret&lt;/span&gt;というのは&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;側で保持・秘匿できる環境変数のような機能です&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;名前が違うだけでだいたいどの&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームにもありますね&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 今回はせっかくなので、これを&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt;として自作した&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;、&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;&lt;code&gt;matsubara0507/git-with-ssh&lt;/code&gt;&lt;/a&gt; というのを使います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskelljp/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; title=&#34;38&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.name  BOT&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.email bot@example.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-41&#34; title=&#34;41&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-42&#34; title=&#34;42&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-43&#34; title=&#34;43&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-45&#34; title=&#34;45&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-46&#34; title=&#34;46&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-47&#34; title=&#34;47&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-48&#34; title=&#34;48&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-49&#34; title=&#34;49&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-50&#34; title=&#34;50&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd temp &amp;amp;&amp;amp;&lt;/code&gt; というのがダサいですが、そこはおいおい直します&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;git-with-ssh&lt;/code&gt; の方を&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/h2&gt;
&lt;p&gt;元々は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の &lt;code&gt;#antenna&lt;/code&gt; チャンネルに&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の通知設定をしているだけでした。 今回の開発中、ずっとコミットの通知などが来てうるさかったので次のように分けました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#antenna&lt;/code&gt; チャンネルは &lt;code&gt;gh-pages&lt;/code&gt; ブランチのコミットだけ通知
&lt;ul&gt;
&lt;li&gt;ついでに&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;を設定した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#antenna-dev&lt;/code&gt; チャンネルを新しく作り&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の全ての更新はこっちに設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#dockerhub&lt;/code&gt; チャンネルもついでに作って &lt;code&gt;haskelljp&lt;/code&gt; の更新を通知する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の大リニューアルがあって、いつのまにか&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;を連携できるようになっていました。 なので試しに連携して更新の通知が飛ぶようにしてみました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/dockerhub-slack.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後やりたいこと&lt;/h1&gt;
&lt;p&gt;いくつかあります&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;LTS&lt;/span&gt;の更新&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;最新&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;でも動作したらかな&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;の改善
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;でもちゃんと更新が通知されるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ないしは更新差分の通知
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;App&lt;/span&gt;が満杯なので厳しいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと、&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;がコメントや追記などでも更新され、その通知が &lt;code&gt;#antenna&lt;/code&gt; チャンネルに飛んで来てうるさいので修正したいです&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;キャッシュの導入の仕方は記事にしたので興味のある方は是非「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GCS&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;Drone 1.0&lt;/span&gt; をキャッシュする &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;もし&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;haskelljp&lt;/span&gt;組織アカウントのメンバーになりたい場合は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で声をかけてください&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;チャンネルはどこでも良いですよ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;この話も記事にしておきました「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt; を作ってみた&lt;span class=&#34;ascii&#34;&gt;: git-with-ssh -&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;この修正は &lt;code&gt;haskell-jp/antenna&lt;/code&gt; ではなく、&lt;a href=&#34;https://github.com/matsubara0507/scrapbook&#34;&gt;&lt;code&gt;matsubara0507/scrapbook&lt;/code&gt;&lt;/a&gt; からやる必要があります。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/string-gap-for-heredoc-like.html&#34; lang=&#34;ja&#34;&gt;Haskell でも heredoc がしたい&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近 &lt;a href=&#34;https://drone.io&#34;&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href=&#34;https://github.com/drone/drone/issues/1891#issuecomment-269629929&#34;&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href=&#34;https://docs.drone.io/plugins&#34;&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id=&#34;drone-plugin&#34;&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id=&#34;main.go-と-plugin.go&#34;&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;package&lt;/span&gt; main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; build = &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;  app := cli.NewApp()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;  app.Name = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;  app.Usage = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;  app.Action = run&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;  app.Version = fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  app.Flags = []cli.Flag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    cli.StringFlag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;      Name:   &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;      Usage:  &lt;span class=&#34;st&#34;&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;      EnvVar: &lt;span class=&#34;st&#34;&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    },&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;    log.Fatal(err)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;    _ = godotenv.Load(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;    SSHKey: c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id=&#34;脱線-vs.改行&#34;&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// plugin.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Plugin &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  Home     &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  SSHKey   &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  Hosts    []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  Commands []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  sshDir := fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class=&#34;dv&#34;&gt;0700&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class=&#34;dt&#34;&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class=&#34;dv&#34;&gt;0600&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$&amp;#39;aaa\nbbb&amp;#39;&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href=&#34;https://blog.konboi.com/post/2018/05/01/225336/&#34;&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;    SSHKey: strings.Replace(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;docker-イメージ&#34;&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; docker:git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href=&#34;https://hub.docker.com/r/plugins/base/&#34;&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href=&#34;https://hub.docker.com/_/docker&#34;&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;va&#34;&gt;GOOS=&lt;/span&gt;linux &lt;span class=&#34;va&#34;&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class=&#34;va&#34;&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class=&#34;ex&#34;&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;drone-を設定する&#34;&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build docker image (dry_run)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;dry-run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# Push をしないフラグ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-22&#34; title=&#34;22&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-35&#34; title=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-36&#34; title=&#34;36&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href=&#34;https://github.com/drone-plugins/drone-docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id=&#34;テストをどうするか&#34;&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; go build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt; --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;  ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id=&#34;おまけ-バッチ&#34;&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md&#34;&gt;&lt;img src=&#34;/assets/create-drone-git-with-ssh/badges.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreportcard.com/&#34;&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microbadger.com/&#34;&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/tidalcycles-stack.html</id><title type="text">TidalCyclesをstackで確実にインストールする</title><updated>2019-01-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/tidalcycles-stack.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;実行した環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;各種依存パッケージのインストール&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;そのままの手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;使い方・動作確認&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;ハマったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;背景&lt;/h1&gt;
&lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;タグを眺めていたところ、下記のような質問がありました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://teratail.com/questions/167461?rss&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell - network&lt;/span&gt;パッケージがうまく機能しない｜&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Welcome&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;でシンセサイザーの演奏ができるライブラリーのインストールがうまくいかない、という質問です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;network&lt;/span&gt;パッケージがインストールできていない、ということなので&lt;span class=&#34;ascii&#34;&gt;cabal hell&lt;/span&gt;にでもハマったのかな、と思ったのですが、&lt;a href=&#34;https://github.com/tidalcycles/tidal-chocolatey/issues/1&#34;&gt;類似しているとおぼしき報告&lt;/a&gt;（と、&lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c#comment-b568fc7ecb423b9bc2ce&#34;&gt;こちら&lt;/a&gt;）を読む限り、どうも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストール自体に何か問題があるように見えました。&lt;/p&gt;
&lt;p&gt;もう当の質問者は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;をインストールすることで解決したそうですが、いずれにしても、我々&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としては、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;なり&lt;span class=&#34;ascii&#34;&gt;cabal new-install&lt;/span&gt;なりといった、慣れた方法でインストールできた方がサポートしやすいですし、きっと確実です。&lt;br /&gt;
というわけで今回は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でのインストールに挑戦してみました。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;をインストールしているという&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は多いでしょうし、そうした方が&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を使いたくなったときの参考になれば幸いです。&lt;/p&gt;
&lt;p&gt;結論から言うとほとんど問題なくできたんですが、以下の&lt;span class=&#34;ascii&#34;&gt;tweet&lt;/span&gt;で述べたポイントにご注意ください。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles, Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;package&lt;/span&gt;の設定で&lt;span class=&#34;ascii&#34;&gt;stack exec ghci&lt;/span&gt;を使うよう設定したら普通に&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で入れた&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;から使えましたわ。&lt;br&gt;ポイントは、&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- hosc-0.17&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;に加えないといけない&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC 8.6.3&lt;/span&gt;は地雷なので&lt;span class=&#34;ascii&#34;&gt;LTS 12.26&lt;/span&gt;を使う&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- ~/.ghci&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;:set +m&lt;/span&gt;してるとうまく動かない&lt;br&gt;ぐらいか。
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;Yuji Yamamoto:&lt;/span&gt; 山本悠滋 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;igrep&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@igrep&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/igrep/status/1082475580753207296?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実行した環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10 Pro 64bit ver. 1809&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack --version&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;: Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles:&lt;/span&gt; &lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.0.6&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider: 3.10.0, 64bit&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom: 1.34.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグイン&lt;span class=&#34;ascii&#34;&gt;: 0.14.0&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;各種依存パッケージのインストール&lt;/h1&gt;
&lt;p&gt;冒頭に挙げた質問をされた方が参考にしたページ &lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストール&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年版 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt; では、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;を使ったインストール方法を紹介していますが、この方法では、直接&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tarball&lt;/span&gt;をダウンロードしてインストールしているようです。&lt;br /&gt;
私が知る限り特にその方法でも問題はないはずなんですが、なぜか質問者が挙げたようなエラーが発生してしまいます。&lt;br /&gt;
また、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が実行時に依存している&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;といったソフトウェアを、別の&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージに分けることなく、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストールスクリプトで直接インストールしているようです&lt;small&gt;（詳細は&lt;a href=&#34;https://chocolatey.org/packages/TidalCycles&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージ情報&lt;/a&gt;に書かれた&lt;span class=&#34;ascii&#34;&gt;chocolateyinstall.ps1&lt;/span&gt;を参照されたし）&lt;/small&gt;。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしようとすると、問題のある&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;などの依存パッケージを一緒にインストールしなければなりませんし、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;だけを&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;でインストールすることもできません。&lt;/p&gt;
&lt;p&gt;なので、ここは素直に&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;に書かれた方法に従って&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;をインストールしつつ、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;関連のものだけ&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でインストールしようと思います。&lt;/p&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;そのままの手順&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;⚠️行く先々で&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;のファイアウォールの警告が出るかと思います。適当に承認しちゃってください！⚠️&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://supercollider.github.io/download&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を公式サイトからインストール&lt;/a&gt;します。&lt;br /&gt;
今回は「&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;」の箇所に書いてある「&lt;span class=&#34;ascii&#34;&gt;3.10.0, 64-bit (no SuperNova)&lt;/span&gt;」というリンクをクリックしてダウンロードされた実行ファイルでインストールしました。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;&lt;/a&gt;も公式サイトからインストールしました。&lt;br /&gt;
後で触れます&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の対話環境を、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で呼び出すためのプラグインがあるためです。他のエディタ向けのプラグインもありますが、公式サイトで紹介していたのは&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;なので、一番これがサポートされているのでしょう。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;も&lt;span class=&#34;ascii&#34;&gt;Prerequisites&lt;/span&gt;として挙げられていますが、すでに私の環境に入っているので今回は特に何もしていません。なければ普通に&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Git for Windows&lt;/span&gt;&lt;/a&gt;を入れるのが無難かと思います。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストール
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;ウィンドウの左側にある「&lt;span class=&#34;ascii&#34;&gt;Untitled&lt;/span&gt;」と書かれた箇所の下が&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタになっているようです&lt;small&gt;（色がわかりづらい！）&lt;/small&gt;。&lt;br /&gt;
そこに&lt;code&gt;include(&#34;SuperDirt&#34;)&lt;/code&gt;と書いて、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押せば、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールが始まります。&lt;/li&gt;
&lt;li&gt;次のセクションで&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動する前に、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を終了&lt;/strong&gt;させましょう。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインのインストール
&lt;ul&gt;
&lt;li&gt;面倒なので省略します。他のプラグインと変わらないはずなので適当に検索してください！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/h2&gt;
&lt;p&gt;ここからはこの記事特有の手順です。&lt;br /&gt;
最近の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;というツールを使って開発環境を整えることが多いですので、冒頭の予告通りここでは&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使います。&lt;br /&gt;
ちなみに、現在は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;にも&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が添付されていますが、&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;に含まれる、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使うことでも簡単にインストールできるため、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のみをインストールすれば十分です。&lt;br /&gt;
なお、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;自体のインストール方法については拙作の&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell#%E3%81%BE%E3%81%A0stack%E3%82%84haskell-platform%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AF&#34;&gt;「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;ではインストーラーをダウンロードして実行するだけで十分でしょう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のインストールが終わったら、次の手順を踏んでください。&lt;/p&gt;
&lt;h3 id=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルドをするには、&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;というファイルを、下記でコメントしたように書き換えてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.26 &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= ここを編集&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行と、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hosc-0.17         &lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行を追記&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単に編集した内容について解説させてください。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;resolver:&lt;/code&gt;で始まる行ですが、これは「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」という、パッケージの一覧のバージョンを指定するものです。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」は、「確実にビルドできるバージョンのパッケージをまとめた一覧」です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のメンテナーの方々は、毎日登録された大量のパッケージをまとめてビルド・テストしてみることで、実際に登録されたバージョンのパッケージのビルドとテストが成功することを確認しています。&lt;br /&gt;
なので、この&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されているバージョンのパッケージを使う限りは、私たちは安心してビルドができると言うことです。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを書き換えたのかというと、それは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;には実際にはパッケージの一覧だけでなく、それらをビルドできる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも含まれているからです。&lt;br /&gt;
したがって、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを指定する、ということは、そのままインストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも指定することになります&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
実は特に今回の場合、インストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンを指定しなければ、ビルドできない可能性が高かったのです。&lt;br /&gt;
現在の最新の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは「&lt;span class=&#34;ascii&#34;&gt;8.6.3&lt;/span&gt;」ですが、残念ながらこのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/16057&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;版のみにおいて深刻なバグ&lt;/a&gt;があります。&lt;br /&gt;
実際に&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をビルドする際にこのバグに遭遇するかは確かめてませんが、内容からして遭遇する確率が高そうであるという点と、遭遇するとビルドができないという点を考慮して、念のため確実にビルドできるバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を指定しておきました。&lt;/p&gt;
&lt;p&gt;そして、&lt;code&gt;extra-deps&lt;/code&gt;という項目は、ビルドしようとしているパッケージ&lt;small&gt;（今回の場合&lt;code&gt;tidal&lt;/code&gt;パッケージ）&lt;/small&gt;が依存しているパッケージが、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されていない場合に指定するものです。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージ &lt;span class=&#34;ascii&#34;&gt;ver. 1.0.6&lt;/span&gt;のパッケージ情報&lt;/a&gt;を確認すると、確かに&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;というパッケージに依存していると書かれていますね！&lt;br /&gt;
残念ながらこの&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;パッケージは今回指定した、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ver. 12.26&lt;/span&gt;には登録されていないので、上記のとおり&lt;code&gt;extra-deps&lt;/code&gt;に明記しておいてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;の編集が終わったら、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build tidal&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と実行しましょう。&lt;br /&gt;
初回は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストールも含めて行われるので、結構時間がかかると思います。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;stack install tidal&lt;/code&gt;と実行してもいいですが、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;の仕様上、特に結果は変わりません。&lt;br /&gt;
&lt;code&gt;stack install&lt;/code&gt;は、実行ファイルがついたパッケージをビルドして&lt;code&gt;PATH&lt;/code&gt;にインストールするためのコマンドなので、&lt;code&gt;tidal&lt;/code&gt;のように実行ファイルがないパッケージでは意味がありません。&lt;/p&gt;
&lt;h3 id=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/h3&gt;
&lt;p&gt;続いて、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインの設定をしましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は使用する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を、前述の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に書いた&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンに応じて切り替える関係上、&lt;code&gt;PATH&lt;/code&gt;の通ったところに&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールしません。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインに、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;がインストールした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を認識させるには、下記のように設定を書き換える必要があります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動し、「&lt;span class=&#34;ascii&#34;&gt;File&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」の順にメニューをクリックして、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の設定画面を開きます。&lt;/li&gt;
&lt;li&gt;画面左側の「📦&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」と書かれた箇所をクリックすると、インストールした&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの一覧が表示されるはずです。&lt;/li&gt;
&lt;li&gt;一覧から「&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;」を探して、「⚙️&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」をクリックします。&lt;/li&gt;
&lt;li&gt;「&lt;span class=&#34;ascii&#34;&gt;Ghci Path&lt;/span&gt;」という設定項目があるので、それを&lt;code&gt;stack exec ghci&lt;/code&gt;に書き換えてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・動作確認&lt;/h1&gt;
&lt;h2 id=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/h2&gt;
&lt;p&gt;※&lt;a href=&#34;https://tidalcycles.org/index.php/Start_tidalcycles_and_superdirt_for_the_first_time&#34;&gt;公式サイトのこちらのページ&lt;/a&gt;に対応しています。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;先ほど&lt;code&gt;include(&#34;SuperDirt&#34;)&lt;/code&gt;と入力した、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタに、今度は&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力して、同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が起動します。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動して、拡張子が&lt;code&gt;.tidal&lt;/code&gt;なファイルを開くか作成します。&lt;/li&gt;
&lt;li&gt;メニューを「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順に選択してください。&lt;/li&gt;
&lt;li&gt;画面下部で&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動し、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を実行するのに必要なパッケージの&lt;code&gt;import&lt;/code&gt;や、&lt;code&gt;import&lt;/code&gt;では賄いきれない関数の定義などが自動的に行われます。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルの中身を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に貼り付けているみたいです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;動作確認のために、適当な&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式 — 例えば公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;どおり&lt;code&gt;d1 $ sound &#34;bd sn&#34;&lt;/code&gt; — を入力して、入力した行にカーソルを置き、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押しましょう。
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;入力した式が画面下部で起動した&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に送信され、実行されます。うまくいっていれば音が鳴るはずです。&lt;/li&gt;
&lt;li&gt;停止させたいときは、&lt;code&gt;d1 silence&lt;/code&gt;と入力して同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押してください。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;より詳しい&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の使い方は、&lt;a href=&#34;https://qiita.com/mk668a/items/6e8e0151817f484a526c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のチュートリアル&lt;span class=&#34;ascii&#34;&gt;1 - Qiita&lt;/span&gt;&lt;/a&gt;など、他の方が書いた記事を検索してみてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ハマったこと&lt;/h1&gt;
&lt;h2 id=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/h2&gt;
&lt;p&gt;正確なエラーメッセージは申し訳なくも忘れてしまったのですが、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;上で&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力した際、エラーになることがあります。&lt;br /&gt;
この場合、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を再起動するのを忘れている可能性がありますので、再起動してみてください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールを終えた直後では、まだ&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;は利用できないのです。&lt;/p&gt;
&lt;h2 id=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先ほどの「&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動」という手順で、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;というエラーに出遭うことがあります。&lt;br /&gt;
そのまま&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を入力して「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しても、&lt;code&gt;Variable not in scope: d1 :: ControlPattern -&amp;gt; t&lt;/code&gt;などというエラーになってしまうでしょう。&lt;br /&gt;
これは、前のセクションで触れた&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む際に、エラーになってしまったからです。&lt;/p&gt;
&lt;p&gt;原因はいろいろあり得るかと思いますが、私の場合、&lt;code&gt;~/.ghci&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定ファイルに&lt;code&gt;:set +m&lt;/code&gt;という行を加えていたためでした。&lt;br /&gt;
まず、&lt;code&gt;~/.ghci&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動するときに必ず読み込まれるファイルです。&lt;br /&gt;
必ず有効にしたい言語拡張や、&lt;code&gt;:set +m&lt;/code&gt;のような&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定を記載しておくファイルとなっています。要するに&lt;code&gt;~/.vimrc&lt;/code&gt;などと似たようなものですね。&lt;br /&gt;
そして&lt;code&gt;:set +m&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で複数行の入力を有効にするためのものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で&lt;code&gt;:set +m&lt;/code&gt;と実行すると、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;は入力した行を見て「あっ、この入力はまだ続きがありそうだな」と判断したとき、次の行を自動で前の行の続きとして扱うようになります。&lt;br /&gt;
そして、その場合入力の終了を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に伝えたい場合は、空行を入力しなければなりません。&lt;br /&gt;
結果、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を読み込む際に、空行が入力されないため、意図しない行が「前の行の続き」と&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に認識されてしまい、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;となってしまうようです。&lt;/p&gt;
&lt;p&gt;仕方ないので、直すために&lt;code&gt;~/.ghci&lt;/code&gt;を開いて&lt;code&gt;:set +m&lt;/code&gt;と書いた行をコメントアウトするか削除しちゃいましょう。&lt;br /&gt;
再び&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;で「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順にメニューをクリックすれば、今度は該当のエラーがなく起動するかと思います😌。&lt;/p&gt;
&lt;p&gt;このエラーは、特にすでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境を導入している方で遭遇するケースが多いかと思います。ご注意ください。&lt;/p&gt;
&lt;h2 id=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/h2&gt;
&lt;p&gt;表題の通りです。&lt;br /&gt;
困ったことに&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れた状態で&lt;code&gt;d1 $ sound &#34;bd sn&#34;&lt;/code&gt;などの式を実行しても、特に何のエラーもなく、音も鳴りません。&lt;br /&gt;
&lt;small&gt;（サーバーとして起動しているべき）&lt;/small&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;に接続し損ねたんだから、何かしらエラーが表示されてもいいはずなんですが、困ったことにウンともスンとも言いません😰。&lt;br /&gt;
と、言うわけで、何のエラーもなく音も出なかった場合は、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れてないか確認しましょう。&lt;/p&gt;
&lt;h1 id=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;※ここから先はおまけ &lt;span class=&#34;ascii&#34;&gt;+&lt;/span&gt; 宣伝です。&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしたいだけの方は適当に読み飛ばしてください&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまで、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;という、昨今の&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;の多くが好んで利用するツールで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を利用する方法を説明しました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;にはこの方法は書かれてませんが、より確実なインストール方法として、覚えておいていただけると幸いです。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境をインストールしている方にも参考になるかと思います。&lt;/p&gt;
&lt;p&gt;ところで、ここまで&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を自分でインストールしてみて、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としていくつか気になった点があります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;としては、ちょっと変わっているように感じました。&lt;/p&gt;
&lt;p&gt;それは、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が「標準」として提供している関数を実行する際、&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージに含まれるモジュールを&lt;code&gt;import&lt;/code&gt;するだけでなく、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを読んで、追加の関数を定義する必要がある、という点です。&lt;br /&gt;
大抵の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;は、そんなことしなくてもモジュールを&lt;code&gt;import&lt;/code&gt;するだけで使えるようになっています&lt;small&gt;（&lt;a href=&#34;http://hspec.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;https://github.com/chrisdone/lucid&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;lucid&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://hackage.haskell.org/package/clay&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;clay&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://khibino.github.io/haskell-relational-record/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;relational-record&lt;/span&gt;&lt;/a&gt;とか）&lt;/small&gt;。&lt;br /&gt;
つまり本来ならばわざわざ、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のような、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む専用のファイルを用意しなくとも良いはずなのです。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定で簡単に切り替えることができるものなので、もし間違ったファイルに設定してしまったら、言語の標準にあたる関数がおかしな動作をすることになりかねませんし、あまり良いやり方だとは思えません。本来なら設定に混ぜて書くべきものではないでしょう。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;はこんな仕様になっているかというと、それにはある意味&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;らしい制約が絡んでいると推測されます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する、というのは、実際には&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を起動して、&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルを読み込ませる、ということなのでした&lt;small&gt;（事実、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;などのエディターを介さなくとも、お使いのターミナルエミュレーターから&lt;code&gt;ghci&lt;/code&gt;コマンドを起動して&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;ファイルの中身をコピペするだけで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は利用できます）&lt;/small&gt;。&lt;br /&gt;
その&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;の中身を見てみると、サンプルで実行した&lt;code&gt;d1&lt;/code&gt;という関数が、下記のように定義されていることがわかります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sound.Tidal.Context&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- total latency = oLatency + cFrameTimespan&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;tidal &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; startTidal (superdirtTarget {oLatency &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.1&lt;/span&gt;, oAddress &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;, oPort &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;57120&lt;/span&gt;}) (defaultConfig {cFrameTimespan &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; streamReplace tidal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;で始まる行で、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の初期化を行っていると思われます。&lt;br /&gt;
初期化の際には、サーバーとして起動している&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続設定&lt;small&gt;（この場合&lt;code&gt;127.0.0.1&lt;/code&gt;の&lt;code&gt;57120&lt;/code&gt;番ポートへ接続している）&lt;/small&gt;を渡しているようです。&lt;br /&gt;
恐らくこの&lt;code&gt;startTidal&lt;/code&gt;関数が、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;へ接続し、代入した&lt;code&gt;tidal&lt;/code&gt;という変数に、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を含んでいるんでしょう。&lt;br /&gt;
そして、&lt;code&gt;let p = streamReplace tidal&lt;/code&gt;という行で、その&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;streamReplace&lt;/code&gt;関数に&lt;a href=&#34;http://capm-network.com/?tag=Haskell-%E9%83%A8%E5%88%86%E9%81%A9%E7%94%A8&#34;&gt;部分適用&lt;/a&gt;することで、&lt;code&gt;p&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を参照できるようにしています。&lt;br /&gt;
さらに、&lt;code&gt;let d1 = p 1&lt;/code&gt;などの行で、前の行で定義した&lt;code&gt;p&lt;/code&gt;に整数&lt;small&gt;（シンセサイザーの番号だそうです）&lt;/small&gt;を部分適用することで、結果、&lt;code&gt;d1&lt;/code&gt;、&lt;code&gt;d2&lt;/code&gt;などの関数へ、間接的に&lt;code&gt;tidal&lt;/code&gt;を渡すことになります。&lt;/p&gt;
&lt;p&gt;つまり&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数は、何らかの形で、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を持っているのです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として、&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数に毎回接続情報を渡すのは煩雑だと考えたためでしょう。&lt;br /&gt;
残念ながら、通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;がそうであるように、外部のサーバーに接続した結果取得されるものを、関数が暗黙に参照できるようにしたい場合、 — つまり、今回のようにユーザーが接続情報を明示的に渡すことなく使えるようにしたい場合 — 少なくともパッケージを&lt;code&gt;import&lt;/code&gt;するだけではうまくいきません&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のように、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のような外部に接続する処理を、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の実行時に書かなければならないのです。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;の行で作られる&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を&lt;code&gt;d1&lt;/code&gt;などの関数が暗黙に利用できるようにすることは、実際には&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;で行っているような方法を使わなくともできます。&lt;br /&gt;
そうすることで、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を変なファイルに切り替えてしまって、&lt;code&gt;d1&lt;/code&gt;などの関数の定義が間違ったものになってしまう&lt;small&gt;（あるいはそもそも定義されなくなってしまう）&lt;/small&gt;リスクを回避できます。&lt;br /&gt;
具体的には、下記のような方法が考えられます。&lt;br /&gt;
申し訳なくも私はこれ以上&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;に入れ込むつもりもないので、誰か&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を気に入った方が適当に提案するなりパッチを送るなりしてみてください&lt;small&gt;（他力本願😰）&lt;/small&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の中で&lt;code&gt;ReaderT&lt;/code&gt;を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で「関数に渡した引数を暗黙に利用できるようにする」といえば、やはり&lt;code&gt;ReaderT&lt;/code&gt;モナドトランスフォーマーが一番オーソドックスな方法でしょう。&lt;br /&gt;
実は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上では、&lt;code&gt;IO&lt;/code&gt;以外のモナドのアクションで&lt;code&gt;print&lt;/code&gt;することができます。&lt;br /&gt;
&lt;a href=&#34;https://www.reddit.com/r/haskell/comments/87otrn/you_can_override_the_monad_that_ghci_uses/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;You can override the monad that GHCi uses&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Reddit&lt;/span&gt;のスレッドでは、&lt;code&gt;ReaderT&lt;/code&gt;を使ったサンプルが紹介されています。&lt;br /&gt;
これと同じ要領で、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;-interactive-print&lt;/code&gt;というオプションに、&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;ReaderT&lt;/code&gt;経由で渡してから結果を&lt;code&gt;print&lt;/code&gt;する関数を設定しましょう。&lt;br /&gt;
あとは&lt;code&gt;d1&lt;/code&gt;などを&lt;code&gt;ReaderT&lt;/code&gt;のアクションにするだけで、それらを&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;から消し去ることができます。&lt;br /&gt;
残念ながらこの方法を使うと、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に与えた式の結果がすべて当該のモナドのアクションになっていなければならなくなるため、例えば単純な計算結果でさえ&lt;code&gt;return&lt;/code&gt;をいちいち書かないといけなくなります。しかし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の利用方法を見る限り、大きな問題にはならないだろうと思います。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;code&gt;ImplicitParams&lt;/code&gt;という、もっと直接的にこれを実現する言語拡張があります。文字通り、暗黙の引数を実現するための拡張です&lt;small&gt;（&lt;a href=&#34;https://qiita.com/philopon/items/e6d2522f5b514c219a5f&#34;&gt;参考&lt;/a&gt;）&lt;/small&gt;。&lt;br /&gt;
これを利用して、例えば&lt;code&gt;d1&lt;/code&gt;を&lt;code&gt;?tidal :: Stream =&amp;gt; ControlPattern -&amp;gt; IO ()&lt;/code&gt;のように型宣言しておき、&lt;code&gt;?tidal&lt;/code&gt;&lt;small&gt;（頭に&lt;code&gt;?&lt;/code&gt;を付けたものが暗黙の引数となります）&lt;/small&gt;を暗黙の引数として参照するようにしましょう。後は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の起動時に&lt;code&gt;?tidal&lt;/code&gt;を定義すれば、&lt;code&gt;?tidal&lt;/code&gt;の後に&lt;code&gt;d1&lt;/code&gt;などを定義する必要がなくなるので、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;はもっとコンパクトに済むはずです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他、&lt;code&gt;unsafePerformIO&lt;/code&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;など、ちょっと危ない手段を使う
&lt;ul&gt;
&lt;li&gt;こちらについては詳細を割愛します。&lt;code&gt;d1&lt;/code&gt;などの再利用性が下がるので、おすすめしません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の技術的な側面で気になった点は以上です。&lt;br /&gt;
ちょっと難しい話になってしまいましたが、これを機会に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;そのものへの興味を持っていただけると幸いです。&lt;br /&gt;
素晴らしいことに、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;そのものは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知らなくてもそれなりに使えるようになっているようですが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知った上で使えば、より簡単にトラブルシューティングができるようになりますし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をより柔軟に使えるようになるでしょう。&lt;/p&gt;
&lt;p&gt;もし、今回の記事や&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をきっかけに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を勉強してみたいと思ったら、&lt;a href=&#34;https://wiki.haskell.jp/Links&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Wiki&lt;/span&gt;の日本語のリンク集&lt;/a&gt;を読んで、自分に合う入門コンテンツを見つけてみてください！&lt;br /&gt;
それから、何か困ったことがあれば&lt;a href=&#34;https://haskell-jp.slack.com/messages/C5666B6BB/convo/C4M4TT8JJ-1547294914.091800/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;にある、&lt;span class=&#34;ascii&#34;&gt;#questions&lt;/span&gt;チャンネル&lt;/a&gt;で質問してみてください。&lt;br /&gt;
&lt;a href=&#34;https://join.slack.com/t/haskell-jp/shared_invite/enQtNDY4Njc1MTA5MDQxLTAzZGNkZDlkMWYxZDRlODI3NmNlNTQ1ZDc3MjQxNzg3OTg4YzUzNmUyNmU5YWVkMjFmMjFjYzk1OTE3Yzg4ZTM&#34;&gt;登録はこちら&lt;/a&gt;からどうぞ！&lt;/p&gt;
&lt;p&gt;それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Hacking!!&lt;/span&gt; 🎶🎶🎶&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;どのバージョンの&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;でどのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がインストールされるかは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;を管理している&lt;a href=&#34;https://www.stackage.org/&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;」というウェブサイトのトップページ&lt;/a&gt;にある、「&lt;span class=&#34;ascii&#34;&gt;Latest LTS per GHC version&lt;/span&gt;」というセクションをご覧ください。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;後で軽く触れる、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;という邪悪なテクニックを使わない限りは。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hourly-antenna.html&#34; lang=&#34;ja&#34;&gt;DroneでHaskell Antennaを毎時更新する&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id><title type="text">GCS で Drone 1.0 をキャッシュする</title><updated>2019-01-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．&lt;/p&gt;
&lt;h2 id=&#34;cache-in-drone&#34;&gt;Cache in Drone&lt;/h2&gt;
&lt;p&gt;Drone でキャッシュを利用するには次のような Plugin を使用する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drone-s3-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-s3-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drone-plugins/drone-s3-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-volume-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-volume-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drillster/drone-volume-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-gcs-cache: &lt;a href=&#34;https://github.com/hvalle/drone-gcs-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/hvalle/drone-gcs-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの &lt;code&gt;Trusted&lt;/code&gt; フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．&lt;/p&gt;
&lt;p&gt;ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．&lt;/p&gt;
&lt;h2 id=&#34;drone-gcs-cache&#34;&gt;Drone GCS Cache&lt;/h2&gt;
&lt;h3 id=&#34;認証鍵の設定&#34;&gt;認証鍵の設定&lt;/h3&gt;
&lt;p&gt;GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの &lt;code&gt;APIとサービス&lt;/code&gt; の &lt;code&gt;認証情報&lt;/code&gt; からサービスアカウントを作成し(このときに JSON が DL される)，&lt;code&gt;IAMと管理&lt;/code&gt; の &lt;code&gt;IAM&lt;/code&gt; からさっき作ったアカウントに &lt;code&gt;ストレージ管理者&lt;/code&gt; を追加した IAM を作成する．&lt;/p&gt;
&lt;p&gt;この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら &lt;code&gt;Allow Pull Requests&lt;/code&gt; にチェックする．&lt;/p&gt;
&lt;h3 id=&#34;yaml-の設定&#34;&gt;YAML の設定&lt;/h3&gt;
&lt;p&gt;あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restore:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; node_modules&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush_age:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは Drone の Secret に &lt;code&gt;gcs-access-json-key&lt;/code&gt; という名前で登録している場合である． ちなみに &lt;code&gt;flush_age&lt;/code&gt; は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で試す&#34;&gt;Haskell で試す&lt;/h2&gt;
&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/pull/3&#34;&gt;導入したPRはこれ&lt;/a&gt;． &lt;code&gt;.stack&lt;/code&gt; と &lt;code&gt;.stack-work&lt;/code&gt; をキャッシュする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell:8.6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara-drone-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack-work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;    ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;flush&lt;/code&gt; は同じなので割愛． &lt;code&gt;$HOME/.stack&lt;/code&gt; だと動作しなかったので，いっそのことカレントディレクトリに &lt;code&gt;.stack&lt;/code&gt; を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/before.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;9分は長い． そんでアフター:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/after.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html</id><title type="text">Drone 1.0 を docker-compose up する</title><updated>2019-01-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;strong&gt;2019.4.6 YAMLの設定が一部間違っていたので修正しました&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;新年一発目です． &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; が，めでたくバージョン1.0(まだ rc だけど)をリリースしてドキュメントも刷新されたんですけど，&lt;a href=&#34;https://0-8-0.docs.drone.io/install-for-github/&#34;&gt;0.8.x 時代にはあった &lt;code&gt;docker-compose&lt;/code&gt; でのやり方&lt;/a&gt;が書いてなかった(見つけられなかった)ので，そのメモ書きです． ちなみに経緯は，結構前に作っていた &lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;drone-haskell&lt;/a&gt; と言う Drone CI の Haskell クライアントを Drone 1.0 に対応したくて，手元で Drone を起動しようとしたためです． めでたく，Haskell クライアントも 1.0 に対応したので，それの紹介もおまけでします．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Drone.io, Inc. というアメリカ企業が開発している継続的デリバリーを支援するためのプラットフォームである． 同種のものに Jenkins や TravisCI，CircleCI などが挙げられます(多分)． 単純な利用者側(リポジトリにCIなどを設定する側)としては，TravisCI・CircleCI に似ているが，これらとの大きな違いとして，Drone は GitHub 上に OSS として公開されている点だ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと個人的に特徴的なのが Plugin という形で様々な機能を提供している点だ(このあたりは Jenkins に似ているのかな)． 公式のページより，組織アカウントを見た方が早い気がする(これに限らずドキュメントが色々追いついてない印象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugins - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-compose-する&#34;&gt;docker-compose する&lt;/h2&gt;
&lt;p&gt;さて本題． ローカルで Drone サーバを &lt;code&gt;docker-compose up&lt;/code&gt; して GitHub で利用する． GitHub で利用するには Drone を &lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-an-oauth-application&#34;&gt;GitHub の OAuth App として登録する必要がある&lt;/a&gt;． OAuth App にするにはパブリックな URL が必要なので，&lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; を利用する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ngrok http 8000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで仮に &lt;code&gt;abcdef.ngrok.io&lt;/code&gt; と言うドメインを得たとする． 次のような OAuth App を登録する:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/docker-compose-up-drone-1-0/oauth-app.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;注意点として，8.0.x のときは callback URL が &lt;code&gt;/authorize&lt;/code&gt; だったのに対し，1.0 では &lt;code&gt;/login&lt;/code&gt; となっている． あとは次のような &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを書けば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-server:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .:/data&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=XXX&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=YYY&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_HOST=abcdef.ngrok.io&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone-agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;command:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; agent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; drone-server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SERVER=http://drone-server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;XXX&lt;/code&gt; は GitHub OAuth App の Client ID を，&lt;code&gt;YYY&lt;/code&gt; には Client Secret を記述する． &lt;code&gt;DRONE_RPC_SECRET&lt;/code&gt; の &lt;code&gt;ZZZ&lt;/code&gt; は server と agent で同じであればなんでも良いのだが，&lt;a href=&#34;https://docs.drone.io/installation/github/multi-machine/#create-a-shared-secret&#34;&gt;ここ&lt;/a&gt;に &lt;code&gt;openssl rand -hex 16&lt;/code&gt; で生成すると書いてあるので，それに従う． これであとは &lt;code&gt;docker-compose up&lt;/code&gt; をすれば無事起動完了だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8000/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;ffe3ad2aa2a30d0ba4d848c1cd0f61238b73a21c&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ちなみに&#34;&gt;ちなみに&lt;/h3&gt;
&lt;p&gt;Drone ってクラウドのフリープランがあったのに記事を書いてる時に気づいた(遅い):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl https://cloud.drone.io/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;f16b67b54fb462d3a4b2cfa93f527d4f8d1e19af&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;わざわざ検証用に立てる必要なかったな笑 ちなみにフリープランでは5リポジトリまでと書いてあったが，試しに6個 Activate したらできた． 謎．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-drone-haskell&#34;&gt;おまけ: drone-haskell&lt;/h2&gt;
&lt;p&gt;ここからおまけ． drone の Haskell クライアントを作った． ちゃんとバージョン 1.0 に対応させてます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;matsubara0507/drone-haskell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drone 1.0 の RESTful API に関するドキュメントは見つからなかったので，唯一公式から出ている Drone クライアントである &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone-go&lt;/a&gt; のコード読んで実装した． なので，drone-go が間違ってたらこっちも間違ってる．&lt;/p&gt;
&lt;h3 id=&#34;利用したパッケージ&#34;&gt;利用したパッケージ&lt;/h3&gt;
&lt;p&gt;HTTP クライアントには &lt;a href=&#34;http://hackage.haskell.org/package/req&#34;&gt;req&lt;/a&gt; を，レスポンス型には &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; を利用した． このあたりの組み合わせについては昔記事に書いた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2017-08-13-create-rest-api-package-with-extensible.html&#34;&gt;extensible の拡張可能レコードを使って REST API Haskell パッケージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，管理がめんどくさい(加えて extensible は今の LTS にはまだないし)ので，Stackage や Hackage には登録していない． なので Stack でビルドするには &lt;code&gt;extra-deps&lt;/code&gt; に書き加える必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; extensible-0.5&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/drone-haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; XXX&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ちょっと工夫&#34;&gt;ちょっと工夫&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テストは Servant でモックサーバーを立てて行ってる
&lt;ul&gt;
&lt;li&gt;テストケースも drone-go から取ってきてる&lt;/li&gt;
&lt;li&gt;https://github.com/drone/drone-go/tree/master/drone/testdata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API のパスに &lt;a href=&#34;http://hackage.haskell.org/package/formatting&#34;&gt;formatting&lt;/a&gt; を使ってみた
&lt;ul&gt;
&lt;li&gt;あくまで試しに&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/blob/e735b77171eebedc35160346afec71cd7631b532/src/Drone/Client/Path.hs#L65-L102&#34;&gt;こんな感じ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/super-precure-monad.html</id><title type="text">モナドの新しい力！スーパープリキュアモナド！</title><updated>2018-12-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/super-precure-monad.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;この記事は&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;できたもの&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;この記事は&lt;/h1&gt;
&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt; その&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;&lt;/a&gt;兼&lt;a href=&#34;https://adventar.org/calendars/2984&#34;&gt;プリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2018&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事です。&lt;br /&gt;
毎度同時投稿で失礼します。&lt;br /&gt;
今年は私用で忙しかったので、のんびり書いてできあがったら空いてる日に投稿する、という楽なスタイルで書かせていただきました。なのでタイムスリップして&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事と言うことにします&lt;small&gt;（それにしてもずいぶん時間かかってしまってすみません、もうクリスマスも過ぎたし…😥）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;今回も例年の私の&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;どおり、&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;に、最近追加しようとした機能と、その際使用したもろもろの要素技術についての記事です。&lt;br /&gt;
タイプセーフプリキュア！そのものについては&lt;a href=&#34;https://haskell.jp/blog/posts/2018/substring-parser.html&#34;&gt;今年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月の記事&lt;/a&gt;や、そこで言及しているもっと古い記事をご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/h1&gt;
&lt;p&gt;従来より、タイプセーフプリキュア！には、&lt;code&gt;PreCureMonad&lt;/code&gt;と呼ばれる、プリキュアの台詞を&lt;code&gt;do&lt;/code&gt;記法で組み立てる機能があります。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で下記のように書くだけで、&lt;a href=&#34;https://www.youtube.com/watch?v=oQLIyIZ2vk0&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Go!&lt;/span&gt; プリンセスプリキュア」のあの名シーン&lt;/a&gt;を再現できます&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       say &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyScarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;名シーンを単純な文字列のリストとして使いたい場合はこう👇しましょう&lt;small&gt;（出力は手で見やすく加工しています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; composeEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！プリンセスエンゲージ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;深紅の炎のプリンセス！キュアスカーレット！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;冷たい檻に閉ざされた夢、返していただきますわ。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;お覚悟を決めなさい！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;エクスチェンジ！モードエレガント！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;スカーレット・バイオリン！フェニックス！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;羽ばたけ炎の翼！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！ フェニックス・ブレイズ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ごきげんよう。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに&lt;code&gt;printEpisode&lt;/code&gt;という関数で実行すれば、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行ごとに間隔を置いてあの台詞を再生できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;プリキュア！プリンセスエンゲージ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;深紅の炎のプリンセス！キュアスカーレット！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;冷たい檻に閉ざされた夢、返していただきますわ。&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;お覚悟を決めなさい！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;エクスチェンジ！モードエレガント！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;スカーレット・バイオリン！フェニックス！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;羽ばたけ炎の翼！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;プリキュア！ フェニックス・ブレイズ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;ごきげんよう。&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんな&lt;code&gt;PreCureMonad&lt;/code&gt;ですが、先ほどのコードをよく読めばわかるとおり、ちょっと不格好ですよね。&lt;br /&gt;
具体的には下記の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKey_Scarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を返し、さらにその&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数に渡すことでキュアスカーレットのモード・エレガント（&lt;code&gt;CureScarlet_ModeElegant&lt;/code&gt;）を取得しています。&lt;br /&gt;
「&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を」返すという箇所について、&lt;code&gt;Towa&lt;/code&gt;に&lt;strong&gt;加えて&lt;/strong&gt;&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;strong&gt;新しく作っている&lt;/strong&gt;ように聞こえます。&lt;br /&gt;
本来同一人物であるはずの&lt;code&gt;Towa&lt;/code&gt;と&lt;code&gt;CureScarlet&lt;/code&gt;を、あたかも別々のものとして扱っているように捉えられかねません。&lt;br /&gt;
そう、本来プリキュアの「変身」は女の子自身の状態を書き換えるものとして表現した方が自然なのです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でそうした「状態」を表現する場合、名前のとおり&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を使うのが割と一般的な方法です&lt;small&gt;（プログラム全体で状態を管理する場合、&lt;code&gt;IORef&lt;/code&gt;や&lt;code&gt;TVar&lt;/code&gt;などを使う方が例外に強く安全ではありますが、それはさておき）&lt;/small&gt;。&lt;br /&gt;
しかし、従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;でプリキュアの変身や浄化技を表現する場合、&lt;strong&gt;女の子が変身していない状態で浄化技&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;purify&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を使おうとした場合をどのように扱うか&lt;/strong&gt;、という問題があります。&lt;br /&gt;
先ほどの例で言うところの&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という行でまさにその「浄化技」を実行しているのですが、プリキュアの設定上、特定の浄化技を使うには、特定のプリキュアのフォームに、専用のアイテムを渡さなければなりません。&lt;br /&gt;
タイプセーフプリキュア！ではこの点に強くこだわり、浄化技が使用できる組み合わせごとに型クラスのインスタンスを定義することで、間違った組み合わせを&lt;code&gt;purify&lt;/code&gt;関数に渡すと、型エラーになります&lt;small&gt;（詳しくは&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;タイプセーフプリキュア！を最初に技術的に解説した記事&lt;/a&gt;をご覧ください）&lt;/small&gt;。&lt;br /&gt;
当然、まだ変身していない状態の女の子を&lt;code&gt;purify&lt;/code&gt;関数に渡しても、エラーになってしまいます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; for (&lt;span class=&#34;dt&#34;&gt;Purification&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;                         &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;        arising from a use &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘purify’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘scene’&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;          scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プリキュア実装の大先輩である&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;では、同じようなケースで実行時エラーを出すようにしていますし、&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;においても、&lt;code&gt;ExceptT&lt;/code&gt;を使ってエラーにする、という方法が採れるでしょう。&lt;br /&gt;
しかしそこは「タイプセーフプリキュア！」。どうにかして、変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーにして、従来のこの振る舞いと一貫させたいところですよね。&lt;br /&gt;
というのが今回の課題です。&lt;/p&gt;
&lt;h1 id=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/h1&gt;
&lt;p&gt;今回の課題のとおり、「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラー」としつつ、「変身した状態での&lt;code&gt;purify&lt;/code&gt;を型エラーとしない」ためには、&lt;code&gt;purify&lt;/code&gt;や&lt;code&gt;transform&lt;/code&gt;を実行する前後で、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;内で共有している値の型を変更できるようにする必要があります。&lt;br /&gt;
残念ながら、これは従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;では不可能です。&lt;br /&gt;
&lt;code&gt;State s&lt;/code&gt;に対する&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: State s a -&amp;gt; (a -&amp;gt; State s b) -&amp;gt; State s b&lt;/code&gt;となっていることから察せられるとおり、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の中で共有する型は、アクションの実行前後にかかわらず同じ&lt;code&gt;s&lt;/code&gt;でないといけないためです。&lt;br /&gt;
これはそもそも従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の仕様上やむを得ないことです。&lt;br /&gt;
従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;はそもそもアクションの実行前後で、アクションの実行結果以外の型を変えることができないようになっています。&lt;br /&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;となっていることからしても、アクションの実行前後で&lt;code&gt;m&lt;/code&gt;は&lt;code&gt;m&lt;/code&gt;のままであることがわかります。&lt;/p&gt;
&lt;p&gt;この、「アクションの実行前後で、&lt;code&gt;m&lt;/code&gt;の型を変えることができる」ようにしたのが&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は次のような型宣言にすることで、アクションの実行前後で異なる型の “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を挟めるようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxApplicative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxMonad&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  ibind ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m j k b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i j a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i k b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IxApplicative&lt;/code&gt;は名前のとおり&lt;code&gt;IxMonad&lt;/code&gt;と同様に“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”が付いた&lt;code&gt;Applicative&lt;/code&gt;となっています。&lt;a href=&#34;http://hackage.haskell.org/package/indexed-0.1/docs/Control-Monad-Indexed.html&#34;&gt;詳しい定義はドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;唯一のメソッドである&lt;code&gt;ibind&lt;/code&gt;が、普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の引数をひっくり返して“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”を追加したものです。&lt;br /&gt;
&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;の&lt;code&gt;m&lt;/code&gt;に、型引数が&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ追加されていますね？これが“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”です。&lt;br /&gt;
ある&lt;code&gt;IxMonad&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;が&lt;code&gt;m i j a&lt;/code&gt;という形で型引数を渡されている時、&lt;code&gt;i&lt;/code&gt;がアクションを実行する&lt;strong&gt;前&lt;/strong&gt;の型、&lt;code&gt;j&lt;/code&gt;がアクションを実行した&lt;strong&gt;後&lt;/strong&gt;の型を表します。&lt;br /&gt;
&lt;code&gt;a&lt;/code&gt;は普通の&lt;code&gt;Monad&lt;/code&gt;と同様、アクションの実行結果となっています。&lt;/p&gt;
&lt;p&gt;さらに&lt;span class=&#34;ascii&#34;&gt;Indexed&lt;/span&gt;な&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad (&lt;/span&gt;&lt;code&gt;IxState&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;で使えるアクションの型宣言を見れば、&lt;code&gt;IxState&lt;/code&gt;で共有している状態の型が、アクションの実行前後で変更できることがよりはっきりとわかるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iget ::&lt;/span&gt;      &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i i i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ igetしてもIxStateが管理している状態は変わらないため、型もやはり変わらず。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iput ::&lt;/span&gt; j &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i j ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ iputするとIxStateが管理している状態は、引数で渡した値の型に変わる。&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらもおなじみ&lt;a href=&#34;http://hackage.haskell.org/package/mtl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mtl&lt;/span&gt;パッケージ&lt;/a&gt;にある&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;に、単純に “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を加えただけのものとなっています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2013/05/04/144840&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;の世界 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; モナドとわたしとコモナド&lt;/a&gt;で紹介された際の&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は、&lt;code&gt;ido&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Quasi Quote&lt;/span&gt;を使って&lt;code&gt;do&lt;/code&gt;記法を無理矢理シミュレートしていましたが、現在は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;RebindableSyntax&lt;/code&gt;という拡張を使うことで、普通の&lt;code&gt;do&lt;/code&gt;記法をそのまま利用することができるようになりました&lt;small&gt;（例は後で紹介します）&lt;/small&gt;。&lt;br /&gt;
さらに、現在は&lt;code&gt;RebindableSyntax&lt;/code&gt;を使った場合の諸々の問題を回避するべく、&lt;a href=&#34;https://github.com/jbracker/supermonad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を一般化した&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;と、それを簡単に使えるようにした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の型チェッカープラグイン&lt;/a&gt;が作られたり、&lt;a href=&#34;https://github.com/isovector/do-notation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;という、&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を型クラスで抽象化したパッケージ&lt;/a&gt;が作られたりしています。&lt;br /&gt;
今回は純粋に&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使うだけで十分だったので、&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;は使用しませんでしたが、今後&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;をもっと実践的に使用する機会があれば、使用してみたいと思います。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使用することで、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型を、アクションの実行前後で変更できるようになりました。&lt;br /&gt;
続いて、各女の子の状態を、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型として、どのように管理するかを検討しましょう。&lt;br /&gt;
というのも、タイプセーフプリキュア！には最新の&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;の時点で&lt;span class=&#34;ascii&#34;&gt;59&lt;/span&gt;人の女の子が収録されている&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のですが、それらすべてを変身前と変身後に分けて管理するだけでも、&lt;span class=&#34;ascii&#34;&gt;2 ^ 59&lt;/span&gt;通りの状態を型として表現できなければなりません。&lt;br /&gt;
これを直感的に表現できるようにするために、ちょっと型レベルプログラミングの力を借りましょう。そこで登場するのが「型レベル連想配列」です。&lt;br /&gt;
「型レベル連想配列」という言い方はあまりしないのでピンとこないかも知れませんが、要するに型&lt;small&gt;（タイプセーフプリキュア！の場合、プリキュアに変身する女の子一人一人に個別の型を割り当てているので、その個別の型）&lt;/small&gt;と、それに対応する値のペアを含んだ型レベルリストです。&lt;br /&gt;
大雑把に言うと、下記👇のような内容となります&lt;small&gt;（実際にはもう少し違う型で構成されています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;[ (&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;,   &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ プリキュアに変身する女の子を表す型（この場合「HUGっと！プリキュア」の野乃はな）&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt;,  &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;--         ^ 対応する女の子が変身しているかどうかを表すsingleton type。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           DataKindsで型に持ち上げられたBoolを、普通の値として扱えるよう変換するためのラッパー。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           申し訳なくもsingleton typeについては割愛します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           Haskell-jpのSlack Workspaceあたりでリクエストがあったら書こうかな。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Homare&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;, &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;別の視点で見ると、これはいわゆる&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;とも似ています。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;パッケージ&lt;/a&gt;や&lt;a href=&#34;https://github.com/chrisdone/labels&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;labels&lt;/span&gt;パッケージ&lt;/a&gt;、&lt;a href=&#34;https://www.athiemann.net/2017/07/02/superrecord.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;superrecord&lt;/span&gt;パッケージ&lt;/a&gt;がそうしているように、&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;は、フィールドのラベルを表す&lt;small&gt;（型レベルの、静的な）&lt;/small&gt;文字列をキーとして、それに対応する値を含んだ連想配列として見なすことができるためです。&lt;br /&gt;
事実私は今回、&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;を使ってこの機能を実装しました。他の&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;の実装でも良かったのですが、これ以外のものを全く使ったことがないので😅。&lt;/p&gt;
&lt;h1 id=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;できたもの&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;を組み合わせることで、&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;の各種アクションを、次のように置き換えられることがわかりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform &amp;lt;girl&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxState&lt;/code&gt;（実際にはその&lt;span class=&#34;ascii&#34;&gt;Monad Transformer&lt;/span&gt;版である&lt;code&gt;IxStateT&lt;/code&gt;）で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」に更新する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;がすでに変身している状態の場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身した状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、変身時の台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purify &amp;lt;precure&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキーを取得するため、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;にあらかじめ定義しておいた&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsGirl&lt;/code&gt;で取得した型を、これ以降&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と呼びます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;が「変身した状態」になっていない場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身していない状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、浄化技を使用したときの台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように生まれ変わった&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;を&lt;strong&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨&lt;/strong&gt;と呼ぶこととします💪&lt;/p&gt;
&lt;p&gt;下記が&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;のサンプルコードです。&lt;br /&gt;
野乃はながキュアエールに変身して、「ハート・フォー・ユー」という浄化技を放つまでを表しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cureYell ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreCureM&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;StatusTable&lt;/span&gt; &amp;#39;[]) (&lt;span class=&#34;dt&#34;&gt;StatusTable&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;True&lt;/span&gt;]) ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;cureYell &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureYell&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enter&lt;/code&gt;は、旧&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;にはない、&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;に新しく追加されたアクションです。&lt;br /&gt;
引数で指定された女の子や、女の子が変身したプリキュアを「登場」させます。&lt;br /&gt;
具体的には、以下のように振る舞います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数で指定された値が女の子&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身していない状態」で追加する。&lt;/li&gt;
&lt;li&gt;引数で指定された値がすでに変身したプリキュア&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;に&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用し、女の子を表す値&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;を取得する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」で追加する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、&lt;code&gt;transform&lt;/code&gt;するにしても&lt;code&gt;purify&lt;/code&gt;するにしても、事前に変身前の女の子かその変身後のプリキュアが&lt;code&gt;enter&lt;/code&gt;していないといけません。&lt;br /&gt;
これは単純にその方が実装が簡単だから、という理由もありますし、一旦「登場」させたほうがなんとなくかっこいいかな、と感じたからです。&lt;/p&gt;
&lt;h2 id=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/h2&gt;
&lt;p&gt;ここまで述べたような基本的な仕様は実装できたものの、まだ解決すべき技術的な問題が見つかったので、残念ながらリリースはされていません&lt;small&gt;（その詳細は気が向いたら書きます）&lt;/small&gt;。&lt;br /&gt;
なので、試す場合は下記のように実行してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; chcp &lt;span class=&#34;dv&#34;&gt;65001&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ Windowsの方は恐らく必要&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; git clone &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;b super&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;monad https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; cd typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack exec ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XRebindableSyntax&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XFlexibleContexts&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XTypeFamilies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((&amp;gt;&amp;gt;), (&amp;gt;&amp;gt;=))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Monad.Super&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       enter &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       transform &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       purify &lt;span class=&#34;dt&#34;&gt;CureSword&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;(ダビィー！)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;プリキュア！ラブリンク！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;(&lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;勇気の刃！ キュアソード！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;このキュアソードが 愛の剣で、あなたの野望を断ち切ってみせる！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;閃け！ホーリー・ソード！&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーとする」といった仕様を試す場合は、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/super-precure-monad/gen/AllPreCureM.hs&#34;&gt;こちらに置いた、全プリキュアの変身と浄化技を列挙したテスト用ファイル&lt;/a&gt;を&lt;span class=&#34;ascii&#34;&gt;ghci&lt;/span&gt;で読んでみるといいでしょう。&lt;br /&gt;
先ほど👆の手順で&lt;code&gt;git clone&lt;/code&gt;したディレクトリーにおいて、あらかじめ&lt;code&gt;stack build&lt;/code&gt;を実行しておくのをお忘れなく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack build
$ stack exec ghci gen/AllPreCureM.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適当に&lt;code&gt;gen/AllPreCureM.hs&lt;/code&gt;を書き換えて&lt;code&gt;:r&lt;/code&gt;してみれば、概ねいい感じに動いていることがわかるはずです。&lt;/p&gt;
&lt;p&gt;例えば冒頭付近にある、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;act_CureDiamond_LovelyCommuneRaquel_CureLoveads &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; printEpisode &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureDiamond&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;によるアクションから、&lt;code&gt;transform Rikka (LovelyCommuneRaquel CureLoveads)&lt;/code&gt;という行を削除した上で&lt;code&gt;:r&lt;/code&gt;してみると、次のようなエラーになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; :r
[1 of 1] Compiling AllPreCureM      ( gen\AllPreCureM.hs, interpreted )

gen\AllPreCureM.hs:22:3: error:
    • Couldn&amp;#39;t match type ‘&amp;#39;False’ with ‘&amp;#39;True’
        arising from a use of ‘purify’
    • In a stmt of a &amp;#39;do&amp;#39; block:
        purify CureDiamond (LovelyCommuneRaquel CureLoveads)
      In the second argument of ‘($)’, namely
        ‘do enter Rikka
            purify CureDiamond (LovelyCommuneRaquel CureLoveads)’
      In the expression:
        printEpisode
          $ do enter Rikka
               purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |
22 |   purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと、変身していない状態で&lt;code&gt;purify&lt;/code&gt;することを型エラーにできていますね！&lt;/p&gt;
&lt;p&gt;ここまでできていながら残念ですが、リリースは、来年のプリキュアハッカソンか&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;あたりに乞うご期待と言うことで！💦&lt;br /&gt;
それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Super PreCure Hacking&lt;/span&gt;を❣️❣️❣️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;リンク先の動画をご覧になればわかるとおり、実際のそのシーンより大幅に省略されているところは突っ込まないでいただきたい…🙏。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;「この間の映画に出ていた人数より多くない？」と思った方へ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 「プリキュアオールスターズ」に出てくる女の子たちに加え、坂上あゆみ、ペコリン、若宮アンリ、はぐたんの&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;人が、タイプセーフプリキュア！の分類上&lt;code&gt;Girl&lt;/code&gt;として収録されています。ちなみにキュアモフルンも収録されていますが、モフルンはあくまでも変身アイテム&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;SpecialItem&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;という扱いです。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html</id><title type="text">cabal build で package.yaml を使う</title><updated>2018-12-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近少しずつ &lt;code&gt;cabal&lt;/code&gt; を使うようになりました。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; と &lt;code&gt;cabal&lt;/code&gt; のどちらを使ってもビルドできるようにプロジェクトを修正していたのですが、&lt;code&gt;cabal&lt;/code&gt; ファイルの取り扱いが難しかったのでメモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;方針としては &lt;code&gt;cabal&lt;/code&gt; コマンドの実行時にフックを仕掛けて &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;cabal&lt;/code&gt; ファイルを生成しようという感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; cabal &lt;span class=&#34;co&#34;&gt;--numeric-version&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fl&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;setup.hs-は何のためにあるのか&#34;&gt;Setup.hs は何のためにあるのか？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; を使ってプロジェクトを作ると &lt;code&gt;Setup.hs&lt;/code&gt; が以下の内容で自動的に生成されると思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今まで特に使わなくても困らなかったので、気にせずに放置していましたが、このファイルが今回の主役になります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; には &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-type&#34;&gt;build-type&lt;/a&gt; という設定項目があり、この値はデフォルトでは &lt;code&gt;Simple&lt;/code&gt; か &lt;code&gt;Custom&lt;/code&gt; のどちらかに自動的に推論されます。(他にも &lt;code&gt;Configure&lt;/code&gt;, &lt;code&gt;Make&lt;/code&gt; などもあります。詳しくはドキュメントを参照してください)&lt;/p&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Simple&lt;/code&gt; を指定した場合、&lt;code&gt;cabal&lt;/code&gt; は &lt;code&gt;Setup.hs&lt;/code&gt; に以下の内容が記述されているものとして処理を進めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため &lt;code&gt;Setup.hs&lt;/code&gt; を削除しても問題なくビルド可能です。&lt;/p&gt;
&lt;h3 id=&#34;custom&#34;&gt;Custom&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Custom&lt;/code&gt; を指定した場合、&lt;code&gt;Setup.hs&lt;/code&gt; の内容をユーザが自由に書き換えることができます。&lt;/p&gt;
&lt;p&gt;Cabal には &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#v:defaultMainWithHooks&#34;&gt;defaultMainWithHooks&lt;/a&gt; という素晴らしい関数が用意されています。&lt;/p&gt;
&lt;p&gt;この関数を利用することで、コマンドの前後に好きな処理を挟むことができます。(処理の上書きも可能です)&lt;/p&gt;
&lt;p&gt;詳しいドキュメントは &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#more-complex-packages&#34;&gt;3.3.8. More complex packages&lt;/a&gt; を参照ください。&lt;/p&gt;
&lt;h3 id=&#34;userhooks&#34;&gt;UserHooks&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;defaultMainWithHooks&lt;/code&gt; に渡す &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#t:UserHooks&#34;&gt;UserHooks&lt;/a&gt; 型はこんな感じで定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    runTests ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    readDesc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPreProcessors ::&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;PPSuffixHandler&lt;/span&gt; ],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPrograms ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preConf  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    confHook ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postConf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBuild  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    buildHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBuild ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preRepl  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    replHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postRepl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preClean  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    cleanHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postClean ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preCopy  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    copyHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postCopy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preInst  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    instHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postInst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preSDist  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    sDistHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postSDist ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preReg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    regHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postReg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preUnreg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    unregHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postUnreg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHscolour  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    hscolourHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHscolour ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preDoctest  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    doctestHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postDoctest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preHaddock  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    haddockHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postHaddock ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    testHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    preBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    benchHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    postBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけあれば、やりたいことはほとんど出来そうですね。&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;p&gt;フックする場所はたくさんあるので問題無さそうです。&lt;/p&gt;
&lt;p&gt;しかし、これだけあると、どこにフックすれば良いのか？ということになるのですが、処理的には &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;.cabal&lt;/code&gt; ファイルを生成したいので &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込む手前で差し込む必要がありそうです。&lt;/p&gt;
&lt;p&gt;適当に cabal のコードを読んでいると、どうやら &lt;a href=&#34;https://github.com/haskell/cabal/blob/e15d87d542b4b23983aed3d54e0b42585257f453/cabal-install/Distribution/Client/CmdBuild.hs#L119&#34;&gt;establishProjectBaseContext&lt;/a&gt; という関数が &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込んでコンテキストを作っているっぽいことがわかりました。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;preBuild&lt;/code&gt; にフックすれば良さそうです。(&lt;code&gt;cabal&lt;/code&gt; のコードベースについて全然わからないので、本当に合ってるかどうかは不安)&lt;/p&gt;
&lt;p&gt;最終的に、こんな感じで完成しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple.Setup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Types.HookedBuildInfo&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;, emptyHookedBuildInfo)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; myHook &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; simpleUserHooks {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;    preBuild &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pbHpack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  defaultMainWithHooks myHook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pbHpack ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;pbHpack _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; emptyHookedBuildInfo&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/package/hpack&#34;&gt;hpack&lt;/a&gt; パッケージの関数をそのまま使ってます。&lt;/p&gt;
&lt;p&gt;今回は他に何もしないので &lt;code&gt;emptyHookedBuildInfo&lt;/code&gt; で大丈夫でした。(たぶん)&lt;/p&gt;
&lt;h3 id=&#34;extra-source-files&#34;&gt;extra-source-files&lt;/h3&gt;
&lt;p&gt;キャッシュの問題があるので &lt;code&gt;extra-source-files&lt;/code&gt; に &lt;code&gt;package.yaml&lt;/code&gt; を追加しておくと良さそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-source-files:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; package.yaml&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;custom-setup&#34;&gt;custom-setup&lt;/h3&gt;
&lt;p&gt;最後に忘れてはいけないのが、&lt;code&gt;custom-setup&lt;/code&gt; の設定です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Setup.hs&lt;/code&gt; で利用する依存関係などは &lt;code&gt;library&lt;/code&gt; や &lt;code&gt;executables&lt;/code&gt;, &lt;code&gt;tests&lt;/code&gt; と同様に &lt;code&gt;custom-setup&lt;/code&gt; を &lt;code&gt;package.yaml&lt;/code&gt; に追記します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;custom-setup:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; Cabal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hpack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成です。&lt;/p&gt;
&lt;p&gt;最初の一度だけは &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;cabal&lt;/code&gt; ファイルを生成する必要がありますが、それ以降は必要ありません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash
$ hpack package.yaml
$ cabal new-build&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;失敗したこと&#34;&gt;失敗したこと&lt;/h2&gt;
&lt;p&gt;最初はフックさせずにこんな感じですぐに実装できるものだと思ってましたが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;  defaultMain&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと、あんまり上手くいきません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.yaml&lt;/code&gt; を更新しても実行されなかったり、期待するタイミングで &lt;code&gt;.cabal&lt;/code&gt; ファイルが生成されていないっぽい感じでした。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;とりあえず実装してみたという感じなので、実際どのぐらい使えるのか試してみようと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; も &lt;code&gt;cabal&lt;/code&gt; も両方とも良いビルドツールだと思います。&lt;/p&gt;
&lt;p&gt;もうちょっとしたら、&lt;code&gt;cabal&lt;/code&gt; も同様にオススメしていこうと思います。&lt;/p&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-12-19T09:22:10.151+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html</id><title type="text">Stack 1.9.3 がリリースされました。</title><updated>2018-12-10T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;12月3日に Stack version 1.9.3 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.3/ChangeLog.md#v193&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
...

$ stack --numeric-version
1.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はバグフィックスが3点のみです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack をコンパイルする際に &lt;code&gt;.git&lt;/code&gt; ディレクトリが含まれていない場合、コンパイルに失敗する問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題は &lt;code&gt;Stack&lt;/code&gt; をビルドする人の話なので、普通の人は問題になりませんが、githash を使っている人は自分のアプリケーションでも起こりうる問題なので注意です。&lt;/p&gt;
&lt;p&gt;Stack はバージョン情報に git の情報を含めるために &lt;a href=&#34;https://github.com/acfoltzer/gitrev&#34;&gt;gitrev&lt;/a&gt; を使っていたのですが、現在は開発が止まっているようで &lt;a href=&#34;https://github.com/snoyberg/githash&#34;&gt;githash&lt;/a&gt; に切り替えました。(&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回の問題を修正するために実装された &lt;code&gt;tGitInfoCwdTry&lt;/code&gt; 関数を使うことで &lt;code&gt;.git&lt;/code&gt; ディレクトリが存在しない場合でもコンパイルできるようになります。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364&#34;&gt;1.9.1 fails to build from tarball without .git/ #4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4368&#34;&gt;Compile without a Git dir #4364 #4368&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC が生成する hi-dump ファイルの &lt;code&gt;addDependentFile&lt;/code&gt; 関連のフォーマット変更 (ハッシュを含むようになった) に対応しました。詳細: &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yesod で報告された問題に対する修正です。&lt;code&gt;.hi-dump&lt;/code&gt; フォーマットが変わったので、それに対応しました。shakespeare の問題なので主に Yesod ユーザに影響があるかと思われます。以下のバージョンを利用すればこの問題は解決するため、この現象で悩んでいる人は stack と shakespeare の両方を更新しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack &amp;gt;= 1.9.3&lt;/li&gt;
&lt;li&gt;shakespeare &amp;gt;= 2.0.19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stack は GHC が出力する &lt;code&gt;hi&lt;/code&gt; ファイルの情報を内部で利用しているため、このようなことが起きます。(ビルド時にデフォルトで &lt;code&gt;-ddump-hi -ddump-to-file&lt;/code&gt; オプションが追加されています)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ddump-to-file&lt;/code&gt; が自動的に追加されてしまうせいで &lt;code&gt;-ddump-splices&lt;/code&gt; の結果を表示しようとしてもコンソールに出力されなかったりして不便だったので出力先のディレクトリを指定できるようにしました。たぶん次のメジャーリリースで使えるようになると思います。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;Unable to detect file changes on hamlet templates on stack devel for lts-12.5 #1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4369&#34;&gt;Support GHC 8.4 in addDependentFile for 1.9.3 #4369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4360&#34;&gt;qAddDependentFile doesn’t cause re-compilation without extra-source-files #4360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/aae15e3&#34;&gt;commit@aae15e3ae5767febe9fcad36bf5a5e184c635de1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4225&#34;&gt;Can’t display -ddump-splices result. #4225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4242&#34;&gt;Add the ddump-dir option/config value #4225 #4242&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートファイルのファイル名に変数が利用できるようになりました&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じで使えます。&lt;/p&gt;
&lt;pre class=&#34;mastache&#34;&gt;&lt;code&gt;{-# START_FILE {{name}}.cabal #-}
name: {{name}}
version: 0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4397&#34;&gt;Expand mustache variables in template file names #4397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4381&#34;&gt;Allow variables in filenames in templates #4381&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack can now be compiled again inside a directory that does not contain a &lt;code&gt;.git&lt;/code&gt; directory, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle a change in GHC’s hi-dump format around &lt;code&gt;addDependentFile&lt;/code&gt;, which now includes a hash. See &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow variables to appear in template file names.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120502/1335973255</id><title type="text">AtCoder Regular Contest #2</title><updated>2018-11-29T19:16:22+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120502/1335973255"/><summary type="html">AtCoder Regular Contest #2 参加したおーい。 成績は気にするなおーい。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120709/1341769539</id><title type="text">関数合成をいろんな言語で書いてみた。</title><updated>2018-11-29T19:16:05+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120709/1341769539"/><summary type="html">友人に Java で関数合成するプログラムを作れって課題の相談をされて一緒に考えた。で、せっかくだから勉強も兼ねていろんな言語で書いてみた。Java 以外はほとんど書いたことのない言語。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120725/1343186129</id><title type="text">すごい H 本7.10章の「読者への練習問題」</title><updated>2018-11-29T19:15:57+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120725/1343186129"/><summary type="html">大学の教科書とかでよくある「読者への練習問題としましょう」ってやつですよ。考査前、知りたいことが「読者への練習問題」で泣くやつですよ。 今回は API 調べて分かればそんなに難しくなかった。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120822/1345602358</id><title type="text">Reader モナド（関数モナド）</title><updated>2018-11-29T19:15:37+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120822/1345602358"/><summary type="html">すごい Haskell たのしく学ぼう！の14.2章331ページの関数モナドを do 記法で書いてあるコード、どういう動作になるかは解説されてあるので分かるのだけどなんでそうなるのかが分からないので書き下してみる。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/haskell-day-2018.html</id><title type="text">Haskell Day 2018 開催レポート</title><updated>2018-11-20T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/haskell-day-2018.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;去る&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;日に&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;が開催されましたので、そのイベントレポートをお送りします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;セッション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;懇親会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;アンケート&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/connpass.png&#34; alt=&#34;Connpass&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://haskell-jp.connpass.com/event/92617/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;2012&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;年と不定期に開催しており今回で&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;度目となります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年の今回は「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで」というテーマで開催されました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1173.jpg&#34; alt=&#34;受付&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;セッション&lt;/h1&gt;
&lt;h2 id=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/h2&gt;
&lt;p&gt;開発中の対話的チュートリアル&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt;を使って、参加者の皆さんにもくもくと入門していただきました。「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」では、簡単な課題を解くことで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の初歩的な使い方を学びつつ、学んだ知識をその場でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/makeMistakesToLearnHaskell&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1176.jpg&#34; alt=&#34;ハンズオン&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/khibino.png&#34; alt=&#34;Haskell を導入した話と HRR の紹介&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1177.jpg&#34; alt=&#34;khibino&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;413d120b6bee433c985c1d2b3395ff0e&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1193.jpg&#34; alt=&#34;nakaji-dayo&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;07d92af9d7aa40bca6cc3959d3f56b28&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1178.jpg&#34; alt=&#34;syocy&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7a16b1e09882433ca2dac9a6a81eb236&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/#/&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/aiya000.png&#34; alt=&#34;Semigroup とは？Monoid？環？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1179.jpg&#34; alt=&#34;aiya000&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;
&lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/noob00/haskell-cli&#34; title=&#34;Haskell で CLI&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt; &lt;span class=&#34;ascii&#34;&gt;from&lt;/span&gt; &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/noob00&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Nobutada Matsubara&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1183.jpg&#34; alt=&#34;matsubara0507&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/lotz.png&#34; alt=&#34;動かして遊んで学ぶ Haskell&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1186.jpg&#34; alt=&#34;lotz&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/fumieval.png&#34; alt=&#34;Liszt あるいは永続データ構造を真に永続させる方法&#34; style=&#34;width: 100%; max-width: 600px; border: solid 1px black;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1191.jpg&#34; alt=&#34;fumieval&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;懇親会&lt;/h2&gt;
&lt;p&gt;スポンサーとして&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;に飲食物の提供をしていただきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1194.jpg&#34; alt=&#34;懇親会&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート&lt;/h1&gt;
&lt;p&gt;約&lt;span class=&#34;ascii&#34;&gt;110&lt;/span&gt;名の方が出席し約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方が回答してくださいました。&lt;/p&gt;
&lt;p&gt;参加できなくなった約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方は事前のキャンセルをよろしくお願いします。&lt;/p&gt;
&lt;h2 id=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire1.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;ここ&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以内に始めた方が全体の&lt;span class=&#34;ascii&#34;&gt;21.4&lt;/span&gt;％、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方がちょうど半分程度となりました。&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方の&lt;span class=&#34;ascii&#34;&gt;57%&lt;/span&gt;の方は今でも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使い続けているようです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年以上前に始めた方は全体の&lt;span class=&#34;ascii&#34;&gt;1/4&lt;/span&gt;となりました。&lt;/p&gt;
&lt;h2 id=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire2.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;項目は下記となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すごい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; による並列・並行プログラミング&lt;/li&gt;
&lt;li&gt;関数プログラミング実践入門 ── 完結で正しいコードを書くために&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 ── &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で学ぶ原理と技法&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;関数プログラミング ── 珠玉のアルゴリズムデザイン&lt;/li&gt;
&lt;li&gt;簡約！λカ娘&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── 教養としての関数型プログラミング&lt;/li&gt;
&lt;li&gt;その他（自由記述）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この項目にはアンケートの途中で追加したものもあるので、結果があまり厳密でないことに注意してください。&lt;/p&gt;
&lt;p&gt;その他の選択肢で自由記述では次の票がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門 &lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;ふつうの&lt;span class=&#34;ascii&#34;&gt;Haskell 1&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による関数プログラミングの思考法 &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;票&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;終わりに&lt;/h1&gt;
&lt;p&gt;参加者の発表者、スタッフのみなさんのおかげで無事開催することができました。ありがとうございました。&lt;/p&gt;
&lt;p&gt;今後とも&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;をよろしくお願いします。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html</id><title type="text">CamelCase の split</title><updated>2018-11-16T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Twitter で &lt;code&gt;CamelCase&lt;/code&gt; の文字列を &lt;code&gt;Camel Case&lt;/code&gt; にするという話を見かけたので、やってみました。&lt;/p&gt;
&lt;p&gt;文字列に含まれる文字は &lt;code&gt;[&#39;a&#39;..&#39;z&#39;] ++ [&#39;A&#39;..&#39;Z&#39;]&lt;/code&gt; を想定しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記: 寄せられたご意見について追記しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;split&#34;&gt;split&lt;/h2&gt;
&lt;p&gt;分割するということなので &lt;a href=&#34;https://www.stackage.org/package/split&#34;&gt;split&lt;/a&gt; パッケージを使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt; (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;splitCC  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; splitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fold&#34;&gt;fold&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; パッケージを使った実装は直感的でコードもコンパクトです。&lt;/p&gt;
&lt;p&gt;しかし、見た感じ効率悪そうですよね。(リスト全体を分割した後で &lt;code&gt;unwords&lt;/code&gt; かけるため)&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;fold&lt;/code&gt; バージョンも実装してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (isUpper, isSpace)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;foldSplitCC &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; foldSplitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quickcheck&#34;&gt;QuickCheck&lt;/h2&gt;
&lt;p&gt;念の為 &lt;a href=&#34;https://www.stackage.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; を使ってランダムテストを行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  arbitrary &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; quickCheck prop_split&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;prop_split ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;prop_split xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; splitCC xs&amp;#39; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; foldSplitCC xs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getString xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
splitcc-0.1.0.0: test (suite: splitcc-test)

+++ OK, passed 100 tests.

splitcc-0.1.0.0: Test suite splitcc-test passed&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;
&lt;p&gt;次は &lt;a href=&#34;https://github.com/vincenthz/hs-gauge&#34;&gt;gauge&lt;/a&gt; を使ってどっちが速いか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main.Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; conf &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultConfig { displayMode &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Condensed&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;  sampleData1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;  sampleData2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;  sampleData3 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;100000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;  sampleData4 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  defaultMainWith conf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;    [ bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;splitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf splitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf splitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf splitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf splitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;                       ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;    , bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;foldSplitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                           ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;charGen ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;charGen &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack bench
Benchmark splitcc-bench: RUNNING...
splitCC/10                               mean 2.847 μs  ( +- 261.0 ns  )
splitCC/1000                             mean 287.2 μs  ( +- 3.935 μs  )
splitCC/100000                           mean 29.10 ms  ( +- 1.348 ms  )
splitCC/1000000                          mean 287.3 ms  ( +- 735.0 μs  )

foldSplitCC/10                           mean 219.3 ns  ( +- 2.955 ns  )
foldSplitCC/1000                         mean 25.65 μs  ( +- 246.5 ns  )
foldSplitCC/100000                       mean 2.640 ms  ( +- 22.98 μs  )
foldSplitCC/1000000                      mean 27.43 ms  ( +- 1.795 ms  )
Benchmark splitcc-bench: FINISH&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;autobench&#34;&gt;AutoBench&lt;/h2&gt;
&lt;p&gt;最後に &lt;a href=&#34;https://github.com/mathandley/AutoBench&#34;&gt;AutoBench&lt;/a&gt; を使って視覚的に実行時間の変化を確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveGeneric #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Input&lt;/span&gt; (ts, splitCC, foldSplitCC) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;          (isSpace, isUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt;    (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Generics&lt;/span&gt;    (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.DeepSeq&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Default&lt;/span&gt;         (def)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.Types&lt;/span&gt;      (&lt;span class=&#34;dt&#34;&gt;DataOpts&lt;/span&gt;(..), &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.QuickCheck&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;splitCC &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; title=&#34;20&#34;&gt;foldSplitCC &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go [] &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; title=&#34;22&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; title=&#34;24&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; title=&#34;25&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ts ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-31&#34; title=&#34;31&#34;&gt;ts  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; def { _dataOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;200000&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;NFData&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-37&#34; title=&#34;37&#34;&gt;  arbitrary &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;AutoBench を利用する際、デフォルトの設定では、入力の型は &lt;code&gt;NFData&lt;/code&gt; 型クラスのインスタンスになっている必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AutoBench の結果&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/AutoBenched.png&#34; alt=&#34;AutoBench の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応ターミナルにもこんな感じで詳細な結果も出力してくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;     • Executed benchmarking file ✔
     • Generating test report ✔
     • Analysing performance results...

 ―― Test summary ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  Programs       foldSplitCC, splitCC
  Data           Random, size range [0,10000..200000]
  Normalisation  nf
  QuickCheck     ✔
  GHC flags      n/a

 ―― Analysis ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  foldSplitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   0.179   1.225   1.978   2.112   6.172   4.232   1.248
                  0.217   5.961   5.184   2.715   5.186   2.690   6.810   4.810
                  7.073   7.760   5.122   8.280   18.66
    Std dev (ms)  1.742
    Average variance introduced by outliers: 83% (severely inflated)

    Fits          y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
                  y = 3.45e-13 + 4.71e-8x
                  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  splitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   1.080   9.397   13.53   6.133   39.55   29.14   9.504
                  1.596   44.46   38.58   16.35   35.41   17.94   38.40   52.06
                  59.35   62.88   40.68   58.27   105.0
    Std dev (ms)  10.54
    Average variance introduced by outliers: 62% (severely inflated)

    Fits          y = 2.41e-12 + 3.29e-7x
                  y = 8.06e-15 + 1.92e-8xlog₂(x)
                  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  Optimisation:

    splitCC ≥ foldSplitCC (1.00)

 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; ということなので &lt;code&gt;foldSplitCC&lt;/code&gt; の方が良い結果となりました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リストを何度も走査すると遅くなるので、fold で書くと良いよ！&lt;/li&gt;
&lt;li&gt;関数の振る舞いが変化していないか確認するために QuickCheck を使おう！&lt;/li&gt;
&lt;li&gt;ベンチマークの実行はとても簡単なので積極的にやってみよう！&lt;/li&gt;
&lt;li&gt;AutoBench を使って可視化すると楽しいよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄せられたご意見&#34;&gt;寄せられたご意見&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;問題設定として &lt;code&gt;convertRGB&lt;/code&gt; は &lt;code&gt;convert R G B&lt;/code&gt; でいいの？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直感的に良くないですが、全然考えてなかったので今回は良いことにしておきたいと思います・・・。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;グラフの隅に、“splitCCは線形でfoldsplitCCは2次”とか書いてあって本当にそうだと巨大な列で結果が逆転してしまうんだけどそれは間違いだよね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは (たぶん) グラフをプロットする際の値の選択が良くなかったため、間違った計算量が推論されてしまっています。&lt;/p&gt;
&lt;p&gt;具体的にはこのような表示があり、ここから選ぶことになるのですが全然わからないので &lt;code&gt;1&lt;/code&gt; を選択した結果、今回の図のようになりました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
    2)  y = 3.45e-13 + 4.71e-8x
    3)  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.41e-12 + 3.29e-7x
    2)  y = 8.06e-15 + 1.92e-8xlog₂(x)
    3)  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のように正しく選ぶと&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 2.80e-13 + 3.83e-8x
    2)  y = 9.34e-16 + 2.22e-9xlog₂(x)
    3)  y = -7.13e-3 + 1.34e-6log₂(x) + 4.22e-5log₂²(x)

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.15e-12 + 2.94e-7x
    2)  y = 7.18e-15 + 1.71e-8xlog₂(x)
    3)  y = 6.99e-23 + 2.79e-16x + 1.76e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、正しい計算量になります。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/true-result.png&#34; alt=&#34;AutoBench の真の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の真の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MyString を定義するのが面倒な場合は以下のようにすると良いよ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;prop_split &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  xs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; listOf &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; splitCC xs &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; foldSplitCC xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; っていうのはどういう意味&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitCC ≥ foldSplitCC&lt;/code&gt; の部分は &lt;code&gt;splitCC&lt;/code&gt; よりも &lt;code&gt;foldSplitCC&lt;/code&gt; 関数の方がパフォーマンスが向上していることを示しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1.00)&lt;/code&gt; は QuickCheck によって生成されたテストケースを入力として利用した時に全てのテストケース (&lt;code&gt;100%&lt;/code&gt;) で性能が改善されたという意味です。&lt;code&gt;0.5&lt;/code&gt; などとなっていた場合はテストケースによっては性能が向上していないということです。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html</id><title type="text">Stack 1.9.1 がリリースされました。</title><updated>2018-10-22T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;10月18日に Stack version 1.9.1 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.1/ChangeLog.md#v191&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
Current Stack version: 1.7.1, available download version: 1.9.1
Newer version detected, downloading
Querying for archive location for platform: linux-x86_64-static
Downloading from: https://github.com/commercialhaskell/stack/releases/download/v1.9.1/stack-1.9.1-linux-x86_64-static.tar.gz
Download complete, testing executable
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
New stack executable available at /home/guchi/.local/bin/stack
Also copying stack executable to /usr/local/bin/stack
Permission error when trying to copy: /usr/local/bin: copyFile:atomicCopyFileContents:withReplacementFile:openBinaryTempFile: permission denied (Permission denied)
Should I try to perform the file copy using sudo? This may fail
Try using sudo? (y/n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルは &lt;code&gt;~/.local/bin/stack&lt;/code&gt; と &lt;code&gt;/usr/local/bin&lt;/code&gt; にインストールされます。&lt;/p&gt;
&lt;p&gt;ただし、権限が無いと上記のように &lt;code&gt;/usr/local/bin&lt;/code&gt; へのコピーに失敗するため &lt;code&gt;sudo&lt;/code&gt; で再実行するか聞かれます。必要であれば &lt;code&gt;y&lt;/code&gt; でインストールしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Try using sudo? (y/n) y
Going to run the following commands:

-  sudo cp /home/guchi/.local/bin/stack /usr/local/bin/stack.tmp
-  sudo mv /usr/local/bin/stack.tmp /usr/local/bin/stack

sudo file copy worked!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされるバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack --version
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;気になる更新内容まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static binary の復活&lt;/li&gt;
&lt;li&gt;Cabal 2.4 への対応&lt;/li&gt;
&lt;li&gt;internal-library 関連のバグ修正&lt;/li&gt;
&lt;li&gt;namespaced template&lt;/li&gt;
&lt;li&gt;stack run&lt;/li&gt;
&lt;li&gt;ghci に -fobject-code を渡した際にちゃんとキャッシュされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;さんのおかげで、静的にリンクされた Linux バイナリが再び利用できるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c34f11190302b2db9bab44ac6e45ca2c5f7810ce/doc/maintainers/releases.md#build-linux-static-binary-distribution-with-nix&#34;&gt;Build Linux static binary distribution with Nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2/static-haskell-nix/tree/upstream-nixpkgs-musl-1.1.19/static-stack&#34;&gt;Fully statically linked stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;download.fpcomplete.com&lt;/code&gt; から Ubuntu, Debian, CentOS, Fedora, Arch のパッケージリポジトリを削除する予定です。これらは既に1年以上前から非推奨となっており、新しいリリースにも対応していませんでしたが、過去のスクリプトとの互換性のために残していました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;大きな変更点&#34;&gt;大きな変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cabal 2.4 にアップグレードしました。
&lt;ul&gt;
&lt;li&gt;注意点: ファイル名のパターンマッチの動作が変わりました。Cabal spec 2.4 より前のバージョンでは &lt;code&gt;*.txt&lt;/code&gt; は &lt;code&gt;foo.txt&lt;/code&gt; にマッチしていましたが、&lt;code&gt;foo.2.txt&lt;/code&gt; にはマッチしませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4317&#34;&gt;Use Cabal 2.4 for the 1.9 branch #4317&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/blob/master/Cabal/ChangeLog.md#2400-mikhail-glushenkov-september-2018&#34;&gt;ChangeLog (Cabal 2.4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5372&#34;&gt;Multi-dot globbing #5372&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/784&#34;&gt;Wildcards in data-files don’t work with filenames containing multiple dots #784&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5057&#34;&gt;&lt;code&gt;cabal sdist&lt;/code&gt; does not pick up files with multiple dots #5057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; のサポートが &lt;code&gt;experimental (実験的)&lt;/code&gt; へ降格しました。また、&lt;code&gt;GHCJS&lt;/code&gt; が実験段階であることをユーザに知らせるための警告が表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4086&#34;&gt;DISCUSSION: Mark GHCJS support as deprecated? #4086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4154&#34;&gt;Warning about GHCJS use when constructing a build plan #4154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/729a052cede11855644bf00c4b7661a89148bdc7#diff-e705c8fadf1193ab59443a5e6c8cbe8b&#34;&gt;commit@729a052cede11855644bf00c4b7661a89148bdc7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;変更点&#34;&gt;変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; と &lt;code&gt;config.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようにしました。今までは置き換えていました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;グローバルな &lt;code&gt;~/.stack/.config.yaml&lt;/code&gt; とプロジェクト固有の &lt;code&gt;stack.yaml&lt;/code&gt; の話で &lt;code&gt;package.yaml&lt;/code&gt; は関係しません。&lt;/p&gt;
&lt;p&gt;例として、それぞれファイルの内容を以下のように設定しておきます。(&lt;code&gt;$everything&lt;/code&gt; は全てのパッケージを指定)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パッケージの指定が重複していたときに今までは、&lt;code&gt;stack.yaml&lt;/code&gt; (プロジェクト固有) の &lt;code&gt;ghc-options&lt;/code&gt; で上書きされていましたが、 &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようになりました。以下は動作例です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# stack v1.9.1 の動作
$ stack build
... --ghc-options aaa --ghc-options bbb

# stack v1.7.1 の動作
$ stack build
... --ghc-options bbb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc-options&lt;/code&gt; の内容が重複する場合は両方とも引数に与えられますが、後ろの値で上書きされるようなのでプロジェクト固有の設定が優先されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-config&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-stack&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に試してみると、以下のようになると思います。&lt;/p&gt;
&lt;pre class=&#34;sell&#34;&gt;&lt;code&gt;$ stack build -v
... --ghc-options -dumpdir=./respect-config --ghc-options -dumpdir=./respect-stack

$ ls  -l
...
drwxrwxr-x 5 guchi guchi 4096 10月 21 13:35 respect-stack
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3753&#34;&gt;Stack does not respect ghc-options in user config #3753&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3781&#34;&gt;Fix inheritance of category ghc-options from config.yaml #3753 #3781&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4089&#34;&gt;Have project ghc-options append to config.yaml ghc-options #3753&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはパッケージのサブライブラリをビルドする際に executables, test, benchmarks, libraries などと同様の方法でアナウンスを行うようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111/commits/4a4b63f59130bb66477d155dcb401d50fac02fab&#34;&gt;commit@4a4b63f59130bb66477d155dcb401d50fac02fab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドはサニティチェックの結果にかかわらず、生成された tarball の場所をアナウンスするようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4117&#34;&gt;Mention tarball earlier in sdist #4117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4112&#34;&gt;stack sdist fails when modules are exposed based on a flag in the cabal file #4112&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack setup&lt;/code&gt; コマンドの &lt;code&gt;--upgrade-cabal&lt;/code&gt; オプションは廃止されます。この機能は GHC 8.2 以降では動作しません。また、このフラグが実装された当初の動機は Stack がカスタムセットアップのためにスナップショットの &lt;code&gt;Cabal&lt;/code&gt; ライブラリを利用し始めたことでほとんど無くなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4118&#34;&gt;Deprecate the –upgrade-cabal flag (fixes #4070) #4118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;&lt;code&gt;stack setup --upgrade-cabal&lt;/code&gt; doesn’t work for Cabal-2.2.0.1 + ghc-8.2.2 #4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たに namespaced template 機能が実装されたため、&lt;code&gt;stack templates&lt;/code&gt; コマンドは利用可能な全てのテンプレートの一覧を良い感じに表示できなくなりました。代わりに、テンプレートを見つける方法についての&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;ヘルプファイル&lt;/a&gt;をダウンロードし、表示します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4129&#34;&gt;Get stack templates help from Github file #4039 #4129&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;ビルドツールを &lt;code&gt;cabal-install&lt;/code&gt; と同様の方法で取り扱うようになりました。また、レガシーな &lt;code&gt;build-tools&lt;/code&gt; フィールドに対しては、ツールマップの中からビルドツールパッケージを調べるのではなく、ハードコードされたビルドツールのリストを利用します。この変更により Stack の動作は &lt;code&gt;cabal-install&lt;/code&gt; に近づいたため、いくつかのバグを回避し、最適化/遅延性の恩恵を得られる可能性があります。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;stack 1.7.1 still has problems finding build tools (“The program ‘happy’ is required”) #4125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4132&#34;&gt;Use a hard-coded tool dependency map (fixes #4125) #4132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/595&#34;&gt;Build-tools not detected when not using Stackage snapshot #595&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3178&#34;&gt;Stack cannot find happy during build #3178&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3249&#34;&gt;Extensible snapshots #3249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの低下を避けるため、Mustache テンプレートに (50kb を超える) 大きなファイルを適用できなくなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4134&#34;&gt;Do not apply Mustache to large files (fixes #4133) #4134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;stack new is very slow at compiling Mustache templates #4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; はデフォルトでパッケージに署名を行うようになりました。また、&lt;code&gt;--no-signature&lt;/code&gt; オプションで署名をスキップできます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートダウンロード時のネットワーク接続問題に備えて、事前にチェックを行うようになりました。もし、問題があればキャッシュ済みのテンプレートを利用します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4173&#34;&gt;Use cached template if template download fails #4173&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;その他の改良点&#34;&gt;その他の改良点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 より前の Windows 環境では、ターミナルのデフォルト値が &lt;code&gt;--color=never&lt;/code&gt; となります。エミュレーションによる出力のみ ANSI カラーコードが利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4106&#34;&gt;Re #4091: Pre-Windows 10, default –color=never #4106&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Windows 環境では、デフォルトのターミナルを ‘mintty’ (false) として認識するように変更しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4015&#34;&gt;Windows: use ‘hIsTerminalDevice or isMinTTYHandle’ #4015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に &lt;code&gt;base&lt;/code&gt; が明示的に記載されているとき、警告を出すようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3940&#34;&gt;Warn when upgrading base #3940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、ビルドプランで達成不可能な &lt;code&gt;base&lt;/code&gt; バージョンが要求された際に、別の GHC バージョンを試すように提案するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たなサブコマンド &lt;code&gt;run&lt;/code&gt; が導入されました。このコマンドは &lt;code&gt;cabal run&lt;/code&gt; のように、指定された executable をビルド&amp;amp;実行します。executable が省略された場合は、プロジェクト内で最初に利用可能な executable が指定されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3952&#34;&gt;Introduce &lt;code&gt;stack run&lt;/code&gt; command line option #3952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/233&#34;&gt;Wishlist: &lt;code&gt;stack run&lt;/code&gt; #233&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-stack-run.html&#34;&gt;stack run コマンド – BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、依存関係が足りない旨を伝えるメッセージにパッケージの最新の cabal ファイルリビジョンハッシュを含めるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-1&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;こんな感じで表示されるようです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
  * Recommended action: try adding the following to your extra-deps in /home/thomas/github/stack/stack.yaml:
rio-0.1.2.0@sha256:cb2a65cee1c0450815002ca890633215e4544b5c1c9f7091a950142c6efe8f3f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;Add cabal-hash revision info when displaying recommended packages when failing to construct buildplan #4068&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3925&#34;&gt;Modify “recommended packages” output to include revision info #3925&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドに新しく &lt;code&gt;--tar-dir&lt;/code&gt; オプションを追加しました。このオプションにより指定したディレクトリに生成された tarball をコピーできるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3621&#34;&gt;3568 add tar files option to sdist #3621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3568&#34;&gt;Stack sdist option to place build artefacts elsewhere #3568&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/9a58d5bf5346bedb0d460335c7018c256591966d&#34;&gt;commit@9a58d5bf5346bedb0d460335c7018c256591966d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interleaved-output&lt;/code&gt; オプションと &lt;code&gt;build.interleaved-output&lt;/code&gt; 設定値が導入されました。これにより、複数の並行ビルドの出力が &lt;code&gt;packagename&amp;gt;&lt;/code&gt; プレフィックス付きで同時に標準エラー出力にダンプされます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4097&#34;&gt;Add the interleaved-output option/config value #3225 #4097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;Add flag to print GHC output to stdout #3225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3508&#34;&gt;Report progress on STDOUT/STDERR during compilation of individual modules #3508&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの再接続戦略を exponential backoff に変更しました。これにより &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt; の問題が緩和されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4109&#34;&gt;Changed the default retry strategy #4109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;Stack does not retry effectively when S3 is being flaky. #3510&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.14/retry-0.7.7.0/Control-Retry.html#v:exponentialBackoff&#34;&gt;exponentialBackoff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; コマンドは &lt;code&gt;username/foo&lt;/code&gt; という形式で、&lt;code&gt;commercialstack&lt;/code&gt; 以外のリポジトリからテンプレートをダウンロードできるようになりました。また &lt;code&gt;github:&lt;/code&gt; という形式でプレフィックスを付けることでサービスを指定することもできます。現状は &lt;code&gt;github:&lt;/code&gt; の他に &lt;code&gt;gitlab:&lt;/code&gt; と &lt;code&gt;bitbucket:&lt;/code&gt; が利用可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4103&#34;&gt;4039 namespaced templates #4103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;Namespaced templates #4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html&#34;&gt;namespaced templates - BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitrev&lt;/code&gt; から &lt;code&gt;githash&lt;/code&gt; に切り替えました。このパッケージには &lt;code&gt;gitrev&lt;/code&gt; にマージされていないバグフィックスが含まれています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; を追加するファイルがわかりづらいため、ユーザ設定ファイルへのパスをエラーメッセージに含めるようにしました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;allow-newer in global-project doesn’t work #3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4127&#34;&gt;Point to user’s config.yaml when advising ‘allow-newer: true’ #4127&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; コマンドはビルド後ではなく、ビルド前にどのメインターゲットを読み込むか質問するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4138&#34;&gt;‘stack ghci’ now asks which main module to load before building #4138&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;hpack のバージョンを 0.29.0 に更新しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4151&#34;&gt;Bump to hpack 0.29 #4151&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC 8.4 以降のバージョンを利用したとき、自動的に Haddock へ &lt;code&gt;--quickjump&lt;/code&gt; オプションが渡されるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4163&#34;&gt;Pass –quickjump to Haddock for GHC 8.4 and later #4163&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hackage-base-url&lt;/code&gt; 設定オプションを利用することで、パッケージアップロード時の Hackage ベースURL に任意のURLを指定できるようになりました。(デフォルトは &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt; です)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Nix 利用時に GHC のマイナーバージョンを省略した場合、メジャーブランチの最新のマイナーバージョンを自動的に利用するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4189&#34;&gt;Do not hardcode GHC versions for Nixpkgs #4189&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; を繰り返し実行したときに &lt;code&gt;.o&lt;/code&gt; ファイルを無効化しなくなりました。これにより、&lt;code&gt;-fobject-code&lt;/code&gt; でコンパイルされた全てのモジュールは ghci を実行する度にキャッシュされます。 詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;Set cabal_macros.h work directory in stack ghci to something non-temporary #4038&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3344&#34;&gt;stack ghci recompiles all modules on every startup, even when invoked with “-fobject-code” or “–no-build” #3344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; の最後に改行が追加されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3983&#34;&gt;fixed: terminating is newline #3983&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;前回のリリースで &lt;code&gt;ghc-pkg&lt;/code&gt; コマンドの出力が &lt;code&gt;stderr&lt;/code&gt; に出力されてしまう問題が再発したので修正しました。現在の出力はとても静かになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4028&#34;&gt;Make ghc-pkg calls less noisy #4028&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1.7.1&lt;/code&gt; で導入された再コンパイルチェックの問題を修正し、回帰テストを追加しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4003&#34;&gt;4001 excess recompilation #4003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;–file-watch is watching test suites again #4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; は internal library を含むパッケージの処理で internal libray に対応する間違ったパッケージを探し、モジュールの読み込みに失敗していました。この問題は現在修正済みで、ライブラリとサブライブラリが適切に追跡されるようにコードが変更されました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;&lt;code&gt;stack ghci&lt;/code&gt; does not recognise internal libraries #3926&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3982&#34;&gt;Handle internal libraries in GHCi. #3982&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存していないパッケージを &lt;code&gt;stack build&lt;/code&gt; すると、internal library をビルドしていないのにも関わらず登録しようとするため、ビルドに失敗していました。この問題は internal library を常にビルドすることで解決しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4033&#34;&gt;Handle internal libs not listed as dependencies #4033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;Build fails with internal libraries that aren’t dependencies #3996&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;NixOS 環境では &lt;code&gt;--no-nix&lt;/code&gt; オプションの影響を受けなくなりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4021&#34;&gt;Allow Nix mode to be disabled under NixOS #4021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4002&#34;&gt;stack does not honor –no-nix under NixOS #4002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;RAM を大量に消費してしまう問題が再発していたので修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;Regression in 1.7.1 (compared to 1.6.5) in getPackageFiles RAM usage #4027&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4066&#34;&gt;Fix RAM usage upon big dump-hi files parsing #4066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインの引数の順序によって動作が異なる問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;It should not matter if flags given before command or after #3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4067&#34;&gt;Change parsers to use &lt;code&gt;flag&#39;&lt;/code&gt; instead of &lt;code&gt;switch&lt;/code&gt; #4067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パッケージをアップロードする際の Hackage クレデンシャル保存プロンプトで、ユーザの入力前に表示されなければならないメッセージが入力後に表示されてしまっていた問題を修正しました。ghci のターゲット選択プロンプトでも同様の問題が発生していたので修正しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4063&#34;&gt;Flush after prompt #4063&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4162&#34;&gt;Stack Upload waits for confirmation BEFORE printing confirmation message #4162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack solver&lt;/code&gt; コマンドで、PATH に &lt;code&gt;cabal&lt;/code&gt; が存在しない場合、ユーザに対して &lt;code&gt;stack install cabal-install&lt;/code&gt; の実行を促すためのメッセージが表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4100&#34;&gt;Solver cabal install hint #4100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3841&#34;&gt;stack solver complains there’s no cabal in path. #3841&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはサブライブラリを含むパッケージが executable, test, benchmark などの依存関係になっている場合でも、正しくビルドできるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-2&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;Cabal 2.0 から &lt;code&gt;internal Libraries&lt;/code&gt; が追加され、stack 側も対応したという感じです。&lt;/p&gt;
&lt;p&gt;例として以下のような &lt;code&gt;package.yaml&lt;/code&gt; があった場合&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# package.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test-internal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;internal-libraries:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;internal-foo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動生成される &lt;code&gt;cabal&lt;/code&gt; ファイルは以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           test-internal
version:        0.0.0
build-type:     Simple
cabal-version:  &amp;gt;= 2.0

library internal-foo
  other-modules:
      Paths_test_internal
  build-depends:
      base
  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態でビルドした結果は次のとおりです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# v1.7.1
$ stack build
Package has buildable sublibraries but no buildable libraries, I&amp;#39;m giving up
CallStack (from HasCallStack):
  error, called at src/Stack/Package.hs:280:30 in stack-1.7.1-JqFYW3fz7If7um4NzPRwPj:Stack.Package

# v1.9.1
$ stack build
test-internal-0.0.0: configure (internal-lib)
Configuring test-internal-0.0.0...
test-internal-0.0.0: build (internal-lib)
Preprocessing library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
Building library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
[1 of 1] Compiling Paths_test_internal ( .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/autogen/Paths_test_internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/Paths_test_internal.o )
ignoring (possibly broken) abi-depends field for packages
test-internal-0.0.0: copy/register
Installing internal library internal-foo in /home/guchi/Desktop/stack-191-working/test-internal/.stack-work/install/x86_64-linux/lts-12.14/8.4.3/lib/x86_64-linux-ghc-8.4.3/test-internal-0.0.0-6jijyMwb8IH16YEILzaUQW-internal-foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;Internal libraries does not work if there’s no main library #3787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#sublibs&#34;&gt;Internal Libraries - Cabal document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sol/hpack#library-fields&#34;&gt;hpack Top-level fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存したテストスイートのカバレッジレポートで、サブライブラリが適切に処理されるようになりました。以前まではカバレッジレポートを生成するときにエラーとなっていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;Error running test coverage when tests depend on internal lbraries. #4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スナップショット更新時にサブライブラリがプリコンパイルキャシュに追加されるようになりました。以前まではスナップショットにサブライブラリを含むパッケージが存在するようなスナップショットを更新するとビルドが壊れていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;haddock-library’s internal attoparsec library cannot be found - broken package #4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Stack は &lt;code&gt;warning&lt;/code&gt; の代わりに適切な &lt;code&gt;error&lt;/code&gt; ログレベルでエラーメッセージをプリティプリントするようになりました。これにより self-executing scripts で runhaskell のプラン構築エラーがターミナルに出力されない問題も修正されます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;#4114&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;Fixes self-executing scripts not piping plan construction errors from runhaskell to terminal, issue #3942 #4114&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3942&#34;&gt;Self-executing scripts don’t pipe plan construction errors from runhaskell to terminal #3942&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Cabal の呼び出しに失敗した際に “While building Setup.hs” という間違ったメッセージが表示されていた問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4131&#34;&gt;Fix invalid “While building Setup.hs” #3934 #4131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;Invalid “While building Setup.hs” error message #3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;release-notes&#34;&gt;Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically linked Linux bindists are back again, thanks to &lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We will be deleting the Ubuntu, Debian, CentOS, Fedora, and Arch package repos from &lt;code&gt;download.fpcomplete.com&lt;/code&gt; soon. These have been deprecated for over a year and have not received new releases, but were left in place for compatibility with older scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;major-changes&#34;&gt;Major changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade to Cabal 2.4
&lt;ul&gt;
&lt;li&gt;Note that, in this process, the behavior of file globbing has been modified to match that of Cabal. In particular, this means that for Cabal spec versions less than 2.4, &lt;code&gt;*.txt&lt;/code&gt; will match &lt;code&gt;foo.txt&lt;/code&gt;, but not &lt;code&gt;foo.2.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; support is being downgraded to ‘experimental’. A warning notifying the user of the experimental status of &lt;code&gt;GHCJS&lt;/code&gt; will be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;behavior-changes&#34;&gt;Behavior changes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;stack.yaml&lt;/code&gt; are now appended to &lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;config.yaml&lt;/code&gt;, whereas before they would be replaced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; will now announce when sublibraries of a package are being build, in the same way executables, tests, benchmarks and libraries are announced&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; will now announce the destination of the generated tarball, regardless of whether or not it passed the sanity checks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--upgrade-cabal&lt;/code&gt; option to &lt;code&gt;stack setup&lt;/code&gt; has been deprecated. This feature no longer works with GHC 8.2 and later. Furthermore, the reason for this flag originally being implemented was drastically lessened once Stack started using the snapshot’s &lt;code&gt;Cabal&lt;/code&gt; library for custom setups. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;With the new namespaced template feature, &lt;code&gt;stack templates&lt;/code&gt; is no longer able to meaningfully display a list of all templates available. Instead, the command will download and display a &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt; with more information on how to discover templates. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build tools are now handled in a similar way to &lt;code&gt;cabal-install&lt;/code&gt;. In particular, for legacy &lt;code&gt;build-tools&lt;/code&gt; fields, we use a hard-coded list of build tools in place of looking up build tool packages in a tool map. This both brings Stack’s behavior closer into line with &lt;code&gt;cabal-install&lt;/code&gt;, avoids some bugs, and opens up some possible optimizations/laziness. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mustache templating is not applied to large files (over 50kb) to avoid performance degredation. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In case there is a network connectivity issue while trying to download a template, stack will check whether that template had been downloaded before. In that case, the cached version will be used. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3850&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-enhancements&#34;&gt;Other enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On Windows before Windows 10, –color=never is the default on terminals that can support ANSI color codes in output only by emulation&lt;/li&gt;
&lt;li&gt;On Windows, recognise a ‘mintty’ (false) terminal as a terminal, by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; issues a warning when &lt;code&gt;base&lt;/code&gt; is explicitly listed in &lt;code&gt;extra-deps&lt;/code&gt; of &lt;code&gt;stack.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; suggests trying another GHC version should the build plan end up requiring unattainable &lt;code&gt;base&lt;/code&gt; version.&lt;/li&gt;
&lt;li&gt;A new sub command &lt;code&gt;run&lt;/code&gt; has been introduced to build and run a specified executable similar to &lt;code&gt;cabal run&lt;/code&gt;. If no executable is provided as the first argument, it defaults to the first available executable in the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; missing dependency suggestions (on failure to construct a valid build plan because of missing deps) are now printed with their latest cabal file revision hash. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new &lt;code&gt;--tar-dir&lt;/code&gt; option to &lt;code&gt;stack sdist&lt;/code&gt;, that allows to copy the resulting tarball to the specified directory.&lt;/li&gt;
&lt;li&gt;Introduced the &lt;code&gt;--interleaved-output&lt;/code&gt; command line option and &lt;code&gt;build.interleaved-output&lt;/code&gt; config value which causes multiple concurrent builds to dump to stderr at the same time with a &lt;code&gt;packagename&amp;gt;&lt;/code&gt; prefix. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The default retry strategy has changed to exponential backoff. This should help with &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; now allows template names of the form &lt;code&gt;username/foo&lt;/code&gt; to download from a user other than &lt;code&gt;commercialstack&lt;/code&gt; on Github, and can be prefixed with the service &lt;code&gt;github:&lt;/code&gt;, &lt;code&gt;gitlab:&lt;/code&gt;, or &lt;code&gt;bitbucket:&lt;/code&gt;. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch to &lt;code&gt;githash&lt;/code&gt; to include some unmerged bugfixes in &lt;code&gt;gitrev&lt;/code&gt; Suggestion to add &lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; now shows path to user config file where this flag should be put into &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now asks which main target to load before doing the build, rather than after&lt;/li&gt;
&lt;li&gt;Bump to hpack 0.29.0&lt;/li&gt;
&lt;li&gt;With GHC 8.4 and later, Haddock is given the &lt;code&gt;--quickjump&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;It is possible to specify the Hackage base URL to upload packages to, instead of the default of &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt;, by using &lt;code&gt;hackage-base-url&lt;/code&gt; configuration option.&lt;/li&gt;
&lt;li&gt;When using Nix, if a specific minor version of GHC is not requested, the latest minor version in the given major branch will be used automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now does not invalidate &lt;code&gt;.o&lt;/code&gt; files on repeated runs, meaning any modules compiled with &lt;code&gt;-fobject-code&lt;/code&gt; will be cached between ghci runs. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; and &lt;code&gt;stack.yaml&lt;/code&gt; terminating by newline&lt;/li&gt;
&lt;li&gt;The previous released caused a regression where some &lt;code&gt;stderr&lt;/code&gt; from the &lt;code&gt;ghc-pkg&lt;/code&gt; command showed up in the terminal. This output is now silenced.&lt;/li&gt;
&lt;li&gt;A regression in recompilation checking introduced in v1.7.1 has been fixed. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; on a package with internal libraries was erroneously looking for a wrong package corresponding to the internal library and failing to load any module. This has been fixed now and changes to the code in the library and the sublibrary are properly tracked. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For packages with internal libraries not depended upon, &lt;code&gt;stack build&lt;/code&gt; used to fail the build process since the internal library was not built but it was tried to be registered. This is now fixed by always building internal libraries. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;#3996&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-nix&lt;/code&gt; was not respected under NixOS&lt;/li&gt;
&lt;li&gt;Fix a regression which might use a lot of RAM. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Order of commandline arguments does not matter anymore. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When prompting users about saving their Hackage credentials on upload, flush to stdout before waiting for the response so the prompt actually displays. Also fixes a similar issue with ghci target selection prompt.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;cabal&lt;/code&gt; is not on PATH, running &lt;code&gt;stack solver&lt;/code&gt; now prompts the user to run &lt;code&gt;stack install cabal-install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; now succeeds in building packages which contain sublibraries which are dependencies of executables, tests or benchmarks but not of the main library. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now properly considered for coverage reports when the test suite depends on the internal library. Before, stack was erroring when trying to generate the coverage report, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now added to the precompiled cache and recovered from there when the snapshot gets updated. Previously, updating the snapshot when there was a package with a sublibrary in the snapshot resulted in broken builds. This is now fixed, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[#4114] Stack pretty prints error messages with proper &lt;code&gt;error&lt;/code&gt; logging level instead of &lt;code&gt;warning&lt;/code&gt; now. This also fixes self-executing scripts not piping plan construction errors from runhaskell to terminal (issue #3942).&lt;/li&gt;
&lt;li&gt;Fix invalid “While building Setup.hs” when Cabal calls fail. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/tech-book-fest-5.html</id><title type="text">技術書典 5 での Haskell 関連サークルのまとめ</title><updated>2018-10-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/tech-book-fest-5.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;来たる&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日（月・祝）に池袋にて技術系同人誌即売会「技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;」が開催されます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を題材にした同人誌もいくつかあるようですのでまとめてみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;技術書典とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-a-la-carte-vol.-1&#34; title=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;矢澤にこ先輩といっしょに代数！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;それでは当日に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;技術書典とは？&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/tech-book-fest-5-banner.png&#34; alt=&#34;技術書典 5 バナー&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（バナー画像は技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;サイトよりの引用です。）&lt;/p&gt;
&lt;p&gt;技術書典とは技術系同人誌即売会としておそらく日本最大のもので、今回で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回目の開催となります。（ニコニコ超会議内での超技術書典があったのでナンバリングがずれています。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05&#34;&gt;サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.techbookfest.org/&#34;&gt;ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/techbookfest&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは秋葉原での開催でしたが、今回はなんと場所を&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;倍の広さに拡張して池袋で開催されます。&lt;/p&gt;
&lt;p&gt;それにともないサークル数もどどんと&lt;span class=&#34;ascii&#34;&gt;470&lt;/span&gt;超となり、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;サークル&lt;span class=&#34;ascii&#34;&gt;45&lt;/span&gt;秒で回っても全サークルは見て回れないことになります。&lt;/p&gt;
&lt;p&gt;事前準備の重要性が高まった今回、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;向けに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;サークルをまとめてみました。&lt;/p&gt;
&lt;h1 id=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/32370012&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#data-a-la-carte-vol.-1&#34; title=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
あと技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;に、鴨川書房というサークル名で合同本を出品します。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による&lt;span class=&#34;ascii&#34;&gt;NN&lt;/span&gt;実装&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://twitter.com/lotz84_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;lotz84_&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@lotz84_&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; や、&lt;span class=&#34;ascii&#34;&gt;FPGA&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;auto encoder&lt;/span&gt;実装に関する苦労話等が掲載される予定です。ぜひに🙏……
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1027501210494853120?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
形態素解析ライブラリ&lt;span class=&#34;ascii&#34;&gt;nagisa&lt;/span&gt;については，技術書典の合同本に寄稿してもらえるよう作成者に依頼中なので興味ある方は是非&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;表紙は鋭意作成中&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 &lt;a href=&#34;https://t.co/zUtngAS23t&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/zUtngAS23t&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1042018372207108099?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;268&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥2500&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/09/techbookfest5/&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代数的数（整数係数多項式の根として表される数）を実装するためのアルゴリズムを解説します。代数的数を使うと、ルートを含むような数に関して、浮動小数点数の誤差に煩わされることなく正確な演算が行えます。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によるサンプルコードを掲載しています。&lt;/p&gt;
&lt;p&gt;この本は、&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;連載していた「週刊 代数的実数を作る」 &lt;span class=&#34;ascii&#34;&gt;https://miz-ar.info/math/algebraic-real/&lt;/span&gt; の書籍化です。本文の加筆修正の他、「付録&lt;span class=&#34;ascii&#34;&gt;A&lt;/span&gt; ユークリッドの互除法と拡張された互除法」「付録&lt;span class=&#34;ascii&#34;&gt;B&lt;/span&gt; 部分分数分解」を追加しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt;で「代数的数を作る 多項式の根と因数分解のアルゴリズム」を頒布します。よろしくお願いします。 &lt;a href=&#34;https://t.co/HkLF1YFDuN&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/HkLF1YFDuN&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/V17ZIj2Iub&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/V17ZIj2Iub&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— だめぽラボ&lt;span class=&#34;ascii&#34;&gt;@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;mod_poppo&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mod_poppo&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/mod_poppo/status/1045885679232737281?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/h1&gt;
&lt;p&gt;私のサークルです。新刊落としました……&lt;/p&gt;
&lt;h2 id=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;28&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doujin.kakkun61.com/procedural-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://doujin.kakkun61.com/procedural-haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;での手続きプログラミングの側面について解説します。&lt;/p&gt;
&lt;p&gt;対象読者 &lt;span class=&#34;ascii&#34;&gt;- Haskell&lt;/span&gt;入門書程度が読める &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 特に読めるが書こうとすると悩む人に読んでほしいです &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミングのプログラマー &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 厳密に本書を読むためには&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を読めた方がよいですが、手続きプログラミングですのでプログラマーなら雰囲気で読めると思います&lt;/p&gt;
&lt;p&gt;書かれてあること &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 書き換え可能な変数 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミング的な制御構造 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 配列 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; サンプルプログラム &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続き的な実装と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;的な実装の対比&lt;/p&gt;
&lt;p&gt;電子版（&lt;span class=&#34;ascii&#34;&gt;PDF&lt;/span&gt;）はこちらで販売中です。 &lt;span class=&#34;ascii&#34;&gt;https://kakkun61.booth.pm/items/829369&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;商業誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;76&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://nextpublishing.jp/book/9979.html&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書！】&lt;/p&gt;
&lt;p&gt;本書は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書レベルの知識をもつ読者を対象とした、ウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書です。比較的学習コストの高い&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;ですが、本書を通じて&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の基本的な知識と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのウェブアプリケーション開発に挑んで見ましょう！ 〈本書の対象読者〉 &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書は既に読みこなしているプログラマ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でウェブアプリを作ってみたいプログラマ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;出版社ページ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみにこんな本を作るつもりでした。欲しい方いらっしゃったら次で書けとお伝えください。はげみになります。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;にサークル「趣味はデバッグ……」として参加申込をしました！ &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; 技術書典 &lt;a href=&#34;https://t.co/nD4eBo9622&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/nD4eBo9622&lt;/span&gt;&lt;/a&gt; 「自作静的型付け言語を作ってそれに対して型推論する方法を解説する」書籍を作るぞ！
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;kakkun61@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;61 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;kakkun61&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@kakkun61&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/kakkun61/status/1009271813107474432?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;矢澤にこ先輩といっしょに代数！&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;84&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1000&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://aiya000.github.io/posts/2018-09-12-techbookfest5.html&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゆるふわにこまき数学！&lt;/p&gt;
&lt;p&gt;以下のような人に向けて、頒布します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学・代数の雰囲気をゆるく知りたい&lt;/li&gt;
&lt;li&gt;軽い&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知りたい&lt;/li&gt;
&lt;li&gt;なんでもいいから技術系にこまきが読みたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;の「か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt;」で、矢澤にこ先輩が簡単な&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で代数（半群・モノイド・群・環・体）を教えてくれる本を頒布します。&lt;br&gt;よろしくお願いします🐕&lt;a href=&#34;https://t.co/KBFxqX69m3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/KBFxqX69m3&lt;/span&gt;&lt;/a&gt;&lt;br&gt;☝サークルページ&lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B85?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/HvD5ql4gFl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/HvD5ql4gFl&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— あいや🤘🙄🤘技術書典&lt;span class=&#34;ascii&#34;&gt;5@&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;public_ai000ya&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@public_ai000ya&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/public_ai000ya/status/1045946096327962624?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでは当日に&lt;/h1&gt;
&lt;p&gt;当日は安全に配慮しつつ楽しんでいきましょう！！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1000&lt;/span&gt;円札と&lt;span class=&#34;ascii&#34;&gt;500&lt;/span&gt;円玉の準備はしっかりとね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/substring-parser.html</id><title type="text">substring-parserで「タイプセーフプリキュア！」を移行した話</title><updated>2018-09-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/substring-parser.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日私は&lt;a href=&#34;https://cure-hack.connpass.com/event/91157/&#34;&gt;プリキュアハッカソン &lt;span class=&#34;ascii&#34;&gt;NewStage&lt;/span&gt;&lt;/a&gt;というちょっと変わったイベントで、「&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;」の最近の更新について発表いたしました。&lt;br /&gt;
今回は&lt;a href=&#34;http://the.igreque.info/slides/2018-08-18-substring-parser.html&#34;&gt;その際使用したスライド&lt;/a&gt;を、ブログ記事として拡大して共有させていただきたいと思います！&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;予告編（はじめにまとめ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;これまでのあらすじ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;「タイプセーフプリキュア！」とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;どうやって修正する？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;パーサーコンビネーターとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;👎記述が冗長&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;👎文字列の先頭からのマッチしかできない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;結果、できたもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;その他の似たソリューション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;次のゴール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;予告編（はじめにまとめ）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;これまでのあらすじ&lt;/h1&gt;
&lt;h2 id=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「タイプセーフプリキュア！」とは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;https://github.com/kan/p5-acme-prettycure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ACME::PrettyCure&lt;/span&gt;&lt;/a&gt;のような「&lt;a href=&#34;https://qiita.com/sue445/items/b41a4f5bdca46f1736c3&#34;&gt;プリキュア実装&lt;/a&gt;」の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つです。&lt;br /&gt;
詳しくはこれから挙げる過去の記事をご覧ください、と言いたいところですが、よくよく見たら「プリキュア実装」が何かを明記してる記事ではないようなので😅、ここで軽く説明しましょう。&lt;br /&gt;
「プリキュア実装」とは一言で言うと「プリキュアやプリキュアに変身する女の子たち、変身時の台詞など諸々のプリキュアの設定をソースコードに収録したライブラリー」です。&lt;/p&gt;
&lt;p&gt;例えば、今回取り上げます私の「タイプセーフプリキュア！」は（もちろん）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書かれたプリキュア実装で、次のように書くことで、キュアアンジュが変身する際の台詞を取得することができます。&lt;br /&gt;
&lt;small&gt;（出力されるリストは、手で整形しています）&lt;/small&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- キュアアンジュには、薬師寺さあやが「ミライクリスタル・ブルー」を&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- セットした「プリハート」を使うことで変身します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; transformationSpeech &lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalBlue&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;ミライクリスタル！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ハートキラっと！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;は～ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;輝く未来をー、抱きしめて！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなを癒す！知恵のプリキュア！キュアアンジュ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で上記のコードを試す場合は、下記のコードで&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;と&lt;a href=&#34;https://github.com/haskell-jp/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;をインストールした上で起動するとよいでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build typesafe-precure unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci -- -interactive-print=&lt;span class=&#34;st&#34;&gt;&amp;quot;Text.Show.Unicode.uprint&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その他の機能や、使っている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張などについては下記の記事をご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://the.igreque.info/posts/2016/06-type-safe-precure.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;igreque : Info -&amp;gt; Haskell&lt;/span&gt;でプリキュアを作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;「タイプセーフプリキュア！」を支える技術 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/h2&gt;
&lt;p&gt;そんな「タイプセーフプリキュア！」ですが、前述の&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の記事の最後で「&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;は現状非常に冗長で、非実用的な実装になってしまっています」と述べているとおり、ほかのプリキュア実装と異なり、&lt;del&gt;実用性を度外視して&lt;/del&gt;「設定の正しさ」を最優先事項とした結果、変身時の台詞や浄化技（「必殺技」ともしばしば呼ばれます）の台詞を取得するのに、非常に冗長なコードが必要になってしまいました。&lt;br /&gt;
それではせっかく&lt;span class=&#34;ascii&#34;&gt;YouTube&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Wikipedia&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Blu-ray&lt;/span&gt;やらを見直してせっせと集めた情報が勿体ないので、集めた情報を、コンパイル時に&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;として出力することにしました。&lt;br /&gt;
そうして生まれたのが&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;&lt;/a&gt;とそれをプリティープリントした&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/pretty-cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pretty-cure-index.json&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
将来的には、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を書き直すのに使用しようかと考えています。&lt;/p&gt;
&lt;p&gt;作るに当たって新たに「タイプセーフプリキュア！」のソースコードに仕込んだ仕組みについては、&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;ANN&lt;/code&gt;という機能を濫用することで達成しました。😎&lt;/p&gt;
&lt;h1 id=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/h1&gt;
&lt;p&gt;従来の&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;には、最新作である「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と、その一つ前の作品である「キラキラ☆プリキュアアラモード」の情報しか収録されていませんでした。&lt;br /&gt;
前述の&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;でも触れましたが、収録のためにはプリキュアの設定の書式を大幅に変更しなければならず、面倒なのでひとまず後回しにしていたのです。&lt;/p&gt;
&lt;p&gt;そこで今年のプリキュアハッカソンにて発表するのによいネタだろうと思い、あの手この手を使って、全シリーズを&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に含める対応を行いました&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;🎉。&lt;/p&gt;
&lt;h2 id=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;それでは、具体的にどんな修正を行ったのか紹介しましょう。&lt;br /&gt;
修正前は、プリキュアの設定を収録した各モジュール（&lt;code&gt;ACME.PreCure.Textbook&lt;/code&gt;以下にあるので、今後は「&lt;strong&gt;各&lt;code&gt;Textbook&lt;/code&gt;モジュール&lt;/strong&gt;」と呼びます）には&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Types.hs#L71&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;がたくさん&lt;/a&gt;ありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;transformedInstance&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  [t| CureMiracle |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;  introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;  variation_Dia&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記はキュアミラクルを表す型の定義と、その日本語での名前、変身時の名乗りといったプロフィールを設定しているコードです。&lt;br /&gt;
このほかにも、プリキュアに変身する女の子の設定や、変身の際に必要な変身アイテムなどの型定義がたくさんあります。&lt;br /&gt;
&lt;code&gt;transformedInstance&lt;/code&gt;で始まる行は、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を使った、型クラスのインスタンス宣言です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types/TH.hs#L151-L158&#34;&gt;&lt;code&gt;transformedInstance&lt;/code&gt;というマクロ&lt;/a&gt;が、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types.hs#L15-L19&#34;&gt;&lt;code&gt;Transformed&lt;/code&gt;という型クラス&lt;/a&gt;のインスタンスを生成することで、プリキュアを表す型と、日本語での名前、変身時の名乗りを実際に紐付けているのです。&lt;br /&gt;
&lt;small&gt;（実際の日本語での名前はご覧のとおり&lt;code&gt;cureName_Miracle&lt;/code&gt;といった変数に束縛されております。&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Words.hs#L18&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Words.hs&lt;/span&gt;&lt;/a&gt;というファイルから参照しています）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;修正前はこのように、あくまでも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとして、プリキュアの設定を書いていたため、このままでは&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;のデータとして扱うのが難しい状態でした。&lt;/p&gt;
&lt;h2 id=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;そのため、今回修正した後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/fd5f89797372f616a551e07251c0fcd2ca1531c2/src/ACME/PreCure/Textbook/MahoGirls/Profiles.hs#L20&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Profiles.hs&lt;/span&gt;&lt;/a&gt;で、各種の設定を宣言することにしました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;transformees ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Transformee&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;transformees &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  [ mkTransformee&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;Cure Miracle&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;      cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;      variation_Dia&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;      introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  , &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkTransformee&lt;/code&gt;関数で作っている&lt;code&gt;Transformee&lt;/code&gt;型の値は、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;の一部として、&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する中間データです。もちろん&lt;code&gt;ToJSON&lt;/code&gt;のインスタンスになっております。&lt;br /&gt;
このように新しい各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、直接&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとしてプリキュアの設定を書く代わりに、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する用の中間データを設けることで、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録しやすい状態に&lt;/strong&gt;しています。&lt;/p&gt;
&lt;p&gt;こうして作られた&lt;code&gt;Transformee&lt;/code&gt;などの中間データ用の値は、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのルートに当たるモジュールで、型クラスのインスタンス宣言を行ったり、&lt;code&gt;ANN&lt;/code&gt;という機能でモジュールに紐付けられます。&lt;br /&gt;
以下は「魔法つかいプリキュア！」のルートに当たるモジュール&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Textbook/MahoGirls.hs&#34;&gt;&lt;code&gt;MahoGirls.hs&lt;/code&gt;&lt;/a&gt;からの抜粋です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls.Profiles&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# ANN module transformees #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(declareTransformees transformees)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Profiles.hs&lt;/code&gt;で定義した&lt;code&gt;transformees&lt;/code&gt;というリストを、&lt;code&gt;ANN&lt;/code&gt;で&lt;code&gt;MahoGirls&lt;/code&gt;モジュールに紐付け、&lt;code&gt;declareTransformees&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロで型宣言やインスタンス宣言を生成するのに使っています。&lt;br /&gt;
&lt;code&gt;ANN&lt;/code&gt;については&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;前回の「タイプセーフプリキュア！を支える技術」&lt;/a&gt;をご覧ください&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;修正前との違いにおける要点を繰り返しましょう。修正後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリキュアの情報を、
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;として書き出すためのデータ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;で型や型クラスのインスタンスとして生成するためのデータ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;両方で扱えるようにするために、専用の型の値として保存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;するようにしています。&lt;/p&gt;
&lt;h2 id=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうやって修正する？&lt;/h2&gt;
&lt;p&gt;それではここからは、各&lt;code&gt;Textbook&lt;/code&gt;モジュールの書式を、どうやって前節で説明したような、「修正前」から「修正後」の書式に移行したのか説明します。&lt;/p&gt;
&lt;p&gt;当然、手で修正するには大変な量です。&lt;br /&gt;
従来より「タイプセーフプリキュア！」では&lt;span class=&#34;ascii&#34;&gt;TV&lt;/span&gt;シリーズ&lt;span class=&#34;ascii&#34;&gt;15&lt;/span&gt;作品に加えてキュアエコーが出てくる映画もサポートしているため、各&lt;code&gt;Textbook&lt;/code&gt;モジュールは&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;作品分存在しています。&lt;br /&gt;
すでに「修正後」の書式に移行済みの「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と「キラキラ☆プリキュアアラモード」を除いても、&lt;span class=&#34;ascii&#34;&gt;14&lt;/span&gt;作品分書き換えないといけません。&lt;br /&gt;
シリーズごとに定義されている型やインスタンス宣言の数にはばらつきがありますが、すべて移行してから数えてみたところ、型の数だけで&lt;span class=&#34;ascii&#34;&gt;313&lt;/span&gt;個、変身や浄化技のインスタンス宣言だけで&lt;span class=&#34;ascii&#34;&gt;211&lt;/span&gt;個ありました。&lt;br /&gt;
プリキュアやプリキュアに変身する女の子、変身アイテムだけでなく、それぞれの変種も別の型として定義しているため、実際のプリキュアの数よりも遙かに多いのです😵。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim&lt;/span&gt;のマクロなどを駆使すれば決して人間の手でも移行できない規模ではありませんが、そこは「タイプセーフプリキュア！」です。&lt;br /&gt;
始まって以来私が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張を始めいろいろな技術を試すための実験場としても機能していたので、ここは是非ちょっと凝ったことをしてぱーっと書き換えてみたいものでしょう😏。&lt;br /&gt;
そこで思いついたのがパーサーコンビネーター、並びに拙作のライブラリー&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;だったのです💡！&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターとは&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の紹介の前に、パーサーコンビネーターについて簡単に紹介しておきましょう。&lt;br /&gt;
&lt;small&gt;（「すでに知ってるよ！」という方はこの節は飛ばした方が良いかと思います）&lt;/small&gt;&lt;br /&gt;
パーサーコンビネーターは、例えば正規表現のような、文字列を解析する技術の一つです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;&lt;/a&gt;をはじめ、多くのプログラミング言語にライブラリーとして提供されています。&lt;/p&gt;
&lt;p&gt;実装はいろいろありますが、本質的にパーサーコンビネーターは「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」として表現されます。&lt;br /&gt;
加えて、それらを簡単に組み合わせるための&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を提供することで、複雑な文字列から複雑なデータ構造を抽出できるようにしてくれます。&lt;/p&gt;
&lt;p&gt;実際のパーサーコンビネーターのライブラリーを単純化して例を挙げましょう。&lt;br /&gt;
例えば、通例パーサーコンビネーターのライブラリーは&lt;code&gt;decimal&lt;/code&gt;という、「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取って、整数を返すパーサー」を提供していることが多いです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt;関数に、解析したい文字列と一緒に渡すことで、「文字列を解析した結果」と、「残りの文字列」を取得することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;123abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆上記の例では「解析したい文字列」として&lt;code&gt;123abc&lt;/code&gt;を渡したので、パースした結果の整数&lt;code&gt;123&lt;/code&gt;と、その残りの文字列&lt;code&gt;&#34;abc&#34;&lt;/code&gt;を返しています。&lt;/p&gt;
&lt;p&gt;これだけではつまらないので、ほかのパーサーの例も挙げましょう。&lt;br /&gt;
👇今度は「文字 セミコロン &lt;code&gt;;&lt;/code&gt; を受け取って、そのまま返すパーサー」です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parse (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;(&lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「パースした結果」がセミコロン &lt;code&gt;;&lt;/code&gt; で、「残りの文字列」が&lt;code&gt;&#34;aaa&#34;&lt;/code&gt;となっていますね。&lt;/p&gt;
&lt;p&gt;それでは以上&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパーサーを組み合わせて、&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー&lt;/strong&gt;を作ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; decimalAndSemicolon &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;    n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decimal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;    char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parse decimalAndSemicolon &lt;span class=&#34;st&#34;&gt;&amp;quot;123;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 結果にセミコロンが含まれてない点に注意&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;におけるパーサーコンビネーターのライブラリーは、パーサーを&lt;code&gt;Monad&lt;/code&gt;として提供することで、上記のように&lt;code&gt;do&lt;/code&gt;記法でパーサーを組み合わせることができるようになっています。&lt;br /&gt;
ここでは詳細は割愛しますが、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;で整数をパースしたあと、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char &#39;;&#39;&lt;/code&gt; で文字セミコロン &lt;code&gt;;&lt;/code&gt;をパース（でも結果は無視）し&lt;/li&gt;
&lt;li&gt;パースした結果として「&lt;code&gt;decimal&lt;/code&gt;がパースした整数」&lt;code&gt;n&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を行っているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;ちなみに、パーサーコンビネーターに慣れた読者の方なら、いわゆる&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルを使って、次のようにも書けると気づくでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;decimalAndSemicolon &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; decimal &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これならパースした結果をいちいち変数に束縛する必要もなく、より簡潔に書くことができますね！&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターのパワーを実感していただくために、もう一つ例を紹介します。&lt;br /&gt;
&lt;code&gt;many&lt;/code&gt;という関数にパーサーコンビネーターを渡すと、「受け取ったパーサーコンビネーターで失敗するまで繰り返しパースして、その結果をリストとして返す」パーサーが作れます。&lt;br /&gt;
例えば先ほどの「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー」から、「セミコロンが末尾に着けられた整数のリストを返すパーサー」を作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;parse (many decimalAndSemicolon) &lt;span class=&#34;st&#34;&gt;&amp;quot;12;34;56;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;([&lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;34&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;56&lt;/span&gt;], &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにパーサーコンビネーターは、小さなパーサーをどんどん組み合わせることで、複雑な文字列から複雑なデータ構造を取り出すパーサーを、クールに作れるようにしてくれます。&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/h3&gt;
&lt;p&gt;そんなパーサーコンビネーターについて、正規表現と比べた場合の長所短所を明確にしておきましょう。&lt;br /&gt;
まずはよいところから。&lt;/p&gt;
&lt;h4 id=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/h4&gt;
&lt;p&gt;前節で示したように、複雑なパーサーも、小さなパーサーの組み合わせからコツコツと作れるようになっています。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/h4&gt;
&lt;p&gt;さっきの&lt;code&gt;decimal&lt;/code&gt;は、パースした結果を直接整数&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;として返していたことにお気づきでしょうか？&lt;br /&gt;
正規表現で欲しい文字列からデータ構造を取り出したい際は、通常グルーピング機能を使うことになりますが、必ず一旦文字列として取り出すことになります。&lt;br /&gt;
それに対してパーサーコンビネーターには、取り出した文字列を対象のデータ構造に変換する仕組みが組み込まれています。&lt;br /&gt;
再帰的なパーサーを書いて再帰的なデータ構造に割り当てるのも楽ちんです。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/h4&gt;
&lt;p&gt;今回の例にはありませんでしたが、例えばパースして取り出した整数の数だけ、続きの文字列を繰り返しパースする、といったことも簡単にできます。&lt;/p&gt;
&lt;p&gt;一方、正規表現と比べて悪いところもあります。&lt;/p&gt;
&lt;h4 id=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎記述が冗長&lt;/h4&gt;
&lt;p&gt;正規表現はいわゆる「外部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」、すなわちプログラミング言語から独立した構文で提供されています。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Ruby&lt;/span&gt;などの構文で言えば、&lt;code&gt;/.../&lt;/code&gt;の中は別世界ですよね。&lt;br /&gt;
パーサーコンビネーターは、本質的に「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」であるとおり、あくまでプログラミング言語標準の関数&lt;small&gt;（のうち、文字列の解析に特化したもの）&lt;/small&gt;として提供されます。「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」なんて呼ばれることもあります。&lt;/p&gt;
&lt;p&gt;そのため、正規表現とは異なり、あくまでもプログラミング言語の構文の中で使えなければならないため、使用できる文字列に限りがあり、必然的に長くなります。&lt;br /&gt;
例えば先ほどの&lt;code&gt;many&lt;/code&gt;は正規表現で言うところの&lt;code&gt;*&lt;/code&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上の量指定子）&lt;/small&gt;とちょっと似てますが、正規表現の方が&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;文字も短いですよね。&lt;/p&gt;
&lt;p&gt;しかしながら、冗長であることはメリットにもなり得ます👍。&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt;をはじめ、正規表現の特殊な機能を使うには、専用の記号（メタキャラクター）をその数だけ覚えなければなりません。&lt;br /&gt;
片やパーサーコンビネーターは&lt;code&gt;many&lt;/code&gt;のような機能も普通の関数として提供されるため、冗長である分分かりやすい名前をつけやすいのです。&lt;/p&gt;
&lt;h4 id=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/h4&gt;
&lt;p&gt;パーサーコンビネーターは先ほども触れた「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」です。&lt;br /&gt;
つまり、プログラミング言語の普通の関数として使用されるものです。&lt;br /&gt;
したがって、例えば正規表現をエディターの検索機能に利用すると言ったような、「ユーザーからの入力として受け取る」と言ったことは、不可能ではないものの、正規表現に比べれば難しいです。&lt;/p&gt;
&lt;h4 id=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/h4&gt;
&lt;p&gt;こちらについてはちょっと難しいので後述します。&lt;/p&gt;
&lt;h4 id=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎文字列の先頭からのマッチしかできない&lt;/h4&gt;
&lt;p&gt;この問題は、パーサーコンビネーターをベター正規表現として使おうと思った場合に、しばしばパーサー作りを面倒くさくします。&lt;br /&gt;
パーサーコンビネーターは、原理上必ず文字列の先頭から解析するよう作られています。&lt;br /&gt;
例えば先ほど紹介したパーサー&lt;code&gt;decimal&lt;/code&gt;の場合、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;abc123&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても、&lt;code&gt;&#34;abc123&#34;&lt;/code&gt;は先頭が「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列」ではないので、失敗してしまいます&lt;small&gt;（実際の戻り値はライブラリーによって異なります。試してみましょう！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターはそもそもの用途が&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;からプログラミング言語などのマシンリーダブルな構文を作るところにあるので、妥当と言えば妥当な制限です。&lt;br /&gt;
その場合は必ず、文字列を頭から読んでパースすることになるでしょうから。&lt;/p&gt;
&lt;p&gt;とはいえ、これは正規表現で例えるなら、常に先頭に&lt;code&gt;\A&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;あるいは &lt;code&gt;^&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を付けなければならない、あるいは自動的に付いてしまう、というような制限です。&lt;br /&gt;
正規表現は行の中にある一部の文字列を抽出したり置換したりするのによく使われるので、役に立たないケースがたくさん出てきてしまいます。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターでこの問題に対応するには、マッチさせたい文字列に到達するまで、スキップするための処理を書かないといけません。&lt;br /&gt;
残念ながらこれは、正規表現で言うところの &lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt; と書けばよい話&lt;strong&gt;ではありません&lt;/strong&gt;。&lt;br /&gt;
&lt;code&gt;\A(マッチさせたくない文字列)*(本当にマッチさせたい文字列)&lt;/code&gt; という書き方をしなければならないのです。&lt;br /&gt;
なぜなら、先ほど触れた「正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が強欲なマッチになる」という問題があるためです。&lt;br /&gt;
正規表現で言うところの&lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt;を書くと、&lt;code&gt;.*&lt;/code&gt;が「マッチさせたくない文字列」だけでなく「本当にマッチさせたい文字列」までマッチしてしまい、結果肝心の「本当にマッチさせたい文字列」を扱うことができなくなってしまうのです。&lt;/p&gt;
&lt;h3 id=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;さて、今回の目的は「『タイプセーフプリキュア！』のソースコードの書式を書き換えることで、全シリーズのプリキュアの情報を&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録する」ことでした。&lt;br /&gt;
そのためには、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのソースコードにおいて&lt;strong&gt;途中&lt;/strong&gt;に含まれている、プリキュアを表す型の定義や、型クラスのインスタンス宣言を集める必要があります。&lt;br /&gt;
しかもそれらは、一つの定義が行をまたいでいたりまたいでなかったりするので、よくある行単位で処理するツールを使うのも、なかなか難しいと思います。&lt;br /&gt;
また、抽出したいデータ構造も多様かつそこそこに複雑で、中には再帰的なデータ構造もあります。正規表現を用いてのパースも、かなり困難なことでしょう。&lt;br /&gt;
とはいえパーサーコンビネーターを通常のとおりに使うと、これまでに述べたとおり、「文字列の先頭からしかマッチできない」という制限が、考えることを複雑にします。&lt;/p&gt;
&lt;p&gt;こうした状況は今回の問題に限らず、このように、ソースコードの多くの類似箇所を書き換える場面において、しばしば発生するでしょう。&lt;br /&gt;
そこで今回は&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;こうした問題全般に対応するライブラリーとして、&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを作りました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を使えば、任意のパーサーコンビネーター&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;を&lt;strong&gt;文字列の中間でも&lt;/strong&gt;マッチさせることができます。&lt;br /&gt;
残念ながらドキュメントらしいドキュメントが全く書けてない状況ではありますが、一応動きます。&lt;br /&gt;
&lt;a href=&#34;https://gitlab.com/igrep/substring-parser/blob/master/test/Spec.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Spec.hs&lt;/span&gt;&lt;/a&gt;が動作を知る際の参考になるかも知れません。&lt;/p&gt;
&lt;h4 id=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;はどのようにして、任意のパーサーコンビネーターを文字列の中間でもマッチできるようにしているのでしょう？&lt;br /&gt;
仕組みは単純です。&lt;br /&gt;
引数として受け取ったパーサーを、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;とりあえず先頭からマッチさせてみる。&lt;/li&gt;
&lt;li&gt;失敗したら先頭の一文字をスキップして、次の文字からまたマッチさせてみる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という手順を繰り返すだけです。 結果として文字列の先頭にある「マッチさせたくない文字列」をスキップすることができるのです。&lt;/p&gt;
&lt;p&gt;⚠️残念ながら決して効率のいい方法ではないので、真面目なパーサーを書くときはおすすめしません！&lt;br /&gt;
あくまでも今回のような、書き捨てだけど、それなりに複雑な文字列を解析する必要がある場合のみ使うべきでしょう。&lt;/p&gt;
&lt;h2 id=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果、できたもの&lt;/h2&gt;
&lt;p&gt;ここまで説明した&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を駆使することで、私は無事、各&lt;code&gt;Textbook&lt;/code&gt;モジュールを半自動で古い書式から新しい書式に書き換えることに成功しました。&lt;br /&gt;
&lt;small&gt;（残念ながら古い&lt;code&gt;Textbook&lt;/code&gt;モジュールには存在しない情報を補ったり、体裁を整えたりする必要があったため、完全に自動で書き換えられたわけではありません）&lt;/small&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/pull/25&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure#25&lt;/span&gt;&lt;/a&gt;という大きな&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;に、移行したもののほぼすべてが刻まれています。&lt;/p&gt;
&lt;p&gt;なお、上記の&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;では消してしまってますが、実際に実行した、移行用スクリプトは&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/ed038aa57a4df6b1fcc23fb071253888ebd7d477/app/migrate2cure-index.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure/app/migrate2cure-index.hs&lt;/span&gt;&lt;/a&gt;にあります。&lt;br /&gt;
ご興味のある方はご覧になってみてください。&lt;/p&gt;
&lt;p&gt;また、もう少し小さいサンプルとして、プリキュアハッカソンの成果発表でデモをした時点のコミットも載せておきます。&lt;br /&gt;
👇のコマンドを実行すれば、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/app/migrate2cure-index.hs#L101-L118&#34;&gt;こちらのコミット時点のパーサー&lt;/a&gt;で、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/Dokidoki/Types.hs#L19-L23&#34;&gt;同時点の&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;&lt;/a&gt;から、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;で使用する&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Index/Types.hs#L44-L46&#34;&gt;&lt;code&gt;Girl&lt;/code&gt;&lt;/a&gt;という型の値を取り出すことができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; git clone https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; cd typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; git checkout 73948fb4a82baaf4e33900d77326791c7703f786&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stack build &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;migrate2cure&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;index&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stack exec migrate2cure&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;index&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; 略 &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- src/ACME/PreCure/Textbook/Dokidoki --&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他の似たソリューション&lt;/h1&gt;
&lt;p&gt;今回は、自前で作ったライブラリーと一から書いたパーサーを組み合わせることで「ソースコードの多くの類似箇所を書き換える」問題に対応しましたが、似たようなことを行うツールはほかにもあります。&lt;br /&gt;
いずれも私はほぼ使ったことがないので詳しい解説はできませんが、軽く紹介しておきます。&lt;/p&gt;
&lt;h2 id=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;製の一括置換ツールです。指定したディレクトリーのファイル群を、正規表現で一括置換できます。&lt;br /&gt;
ここまで書くと&lt;code&gt;perl&lt;/code&gt;や&lt;code&gt;sed&lt;/code&gt;、&lt;code&gt;awk&lt;/code&gt;などで十分できそうにも聞こえますが、修正前後の状態を色つきで見ながら対話的に修正できるそうです。&lt;br /&gt;
正規表現での単純な修正が気に入らなければ、その場で該当箇所だけをエディタで修正できるとのこと。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Python 2&lt;/span&gt;に依存しているのがちょっとつらいところでしょうか…😨。&lt;/p&gt;
&lt;h2 id=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同じく&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;が作った、名前のとおり&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;に特化したソースコードの修正ツールです。&lt;br /&gt;
こちらは正規表現は使用せず、「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」と呼ばれる、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;を変換するための専用のスクリプトを実行することで修正するそうです。&lt;br /&gt;
様々な状況に特化した「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」を別パッケージとしても提供しているようです。&lt;/p&gt;
&lt;p&gt;📝以上の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つについては「&lt;a href=&#34;https://www.webprofessional.jp/getting-started-with-codemods/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;疲れに効く！ &lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;JSCodeshift&lt;/span&gt;でリファクタリングが捗る &lt;span class=&#34;ascii&#34;&gt;- WPJ&lt;/span&gt;&lt;/a&gt;」も参考にしました。&lt;/p&gt;
&lt;h2 id=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.superpowerscorp.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperPowers Corp&lt;/span&gt;&lt;/a&gt;という会社が開発中の、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;をはじめとする&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のパワーを集大成させた、ソースコードの一括置換ツールです。&lt;br /&gt;
&lt;code&gt;ByteString -&amp;gt; ByteString&lt;/code&gt;という型の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を渡すことで、指定したディレクトリーのファイルすべてに対して関数を適用し、書き換えます。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;--haskell&lt;/code&gt;や&lt;code&gt;--html&lt;/code&gt;、&lt;code&gt;--javascript&lt;/code&gt;など、各言語に特化したオプションを渡すと、各言語のソースコードを修正する&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ベースの&lt;span class=&#34;ascii&#34;&gt;module&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;した状態で、関数を作れるようにしてくれます。&lt;br /&gt;
具体的には、例えば&lt;code&gt;--haskell&lt;/code&gt;オプションを渡すと、&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts&lt;/span&gt;&lt;/a&gt;と&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts-prisms&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts-prisms&lt;/span&gt;&lt;/a&gt;パッケージのモジュールを&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;の各トークンに対応した&lt;code&gt;Prism&lt;/code&gt;などが使えるようになります。&lt;/p&gt;
&lt;p&gt;後は&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;など&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのコンビネーターと組み合わせれば、一気に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードを編集することができます。 「任意のデータ構造に対する&lt;span class=&#34;ascii&#34;&gt;jQuery&lt;/span&gt;」とも言われる&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのパワーを存分に生かしたツールなのです。&lt;/p&gt;
&lt;p&gt;残念なところは、今でも開発中である点と、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーに習熟していなければ使いこなせないという点でしょうか。&lt;br /&gt;
よく使う&lt;code&gt;Lens&lt;/code&gt;型や&lt;code&gt;Prism&lt;/code&gt;型だけでなく、&lt;code&gt;Traversal&lt;/code&gt;も使えなければなりません。&lt;br /&gt;
特に&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio#haskell-via-haskell-src-exts-and-haskell-src-exts-prisms&#34;&gt;サンプル&lt;/a&gt;で紹介されているような&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;を使った場合において、指定した&lt;code&gt;Prism&lt;/code&gt;がマッチしなかった場合、何事もなかったかのようにソースが書き換えられないため、デバッグが面倒なところもつらいです。&lt;/p&gt;
&lt;h1 id=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次のゴール&lt;/h1&gt;
&lt;p&gt;「タイプセーフプリキュア！」の開発は、これからもプリキュアハッカソンの前後とプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;の前後を中心に、今後も続ける予定です。&lt;br /&gt;
先にも触れましたが、次回は今回完成させた&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;を使用することで、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を「ユナイトプリキュア」を「ディナイトプリキュア」として書き直すかも知れません。&lt;br /&gt;
ただ、それ以外にももうちょっと&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で遊びたいことがあるので、後回しにするかも知れません。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim script&lt;/span&gt;、あんまり書きたくないんですよね…😥&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それではこの秋もパーサーコンビネーターで&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking!!&lt;/span&gt;✌️✌️✌️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;プリキュアハッカソンは「ハッカソン」の名を冠してはいるものの、実態としてはプリキュアの映画を観ながら好き勝手に開発するというゆるい会です。&lt;br /&gt;
また、そもそもそれほど時間もないので、私は当日の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;～&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;週間ほど前から今回の対応を始めておりました。「今回のプリキュアハッカソンに&lt;strong&gt;向けて&lt;/strong&gt;行ったこと」なる見出しなのは、そのためです。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;当時は各&lt;code&gt;Textbook&lt;/code&gt;モジュールの&lt;code&gt;Types.hs&lt;/code&gt;というファイルで&lt;code&gt;ANN&lt;/code&gt;や&lt;code&gt;declareTransformees&lt;/code&gt;などを使っていましたが、現在は「ルートに当たるモジュール」で行うことにしました。ファイル数を減らすのと、&lt;span class=&#34;ascii&#34;&gt;export&lt;/span&gt;する識別子を型に絞ることで、&lt;code&gt;transformeesHugtto&lt;/code&gt;のような、あまりかっこよくない識別子を隠す、というのがその目的です。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;実際には、前職時代に同様の問題に遭遇した際作成しました。今後も必要になったときにちょっとずつ開発していく予定です。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;一応&lt;a href=&#34;http://hackage.haskell.org/package/parsers&#34;&gt;&lt;code&gt;parsers&lt;/code&gt;&lt;/a&gt;パッケージを使って様々なパーサーコンビネーターのライブラリーをサポートするように作りましたが、現状&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;code&gt;attoparsec&lt;/code&gt;&lt;/a&gt;でのみテストしています。用途を考えれば多分十分じゃないかと思っています。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html</id><title type="text">deriveJsonNoPrefixをリリースしました</title><updated>2018-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;前回の更新からちょっと時間が空いてしまいました 💦&lt;br /&gt;
小ネタです。掲題の通り&lt;a href=&#34;http://hackage.haskell.org/package/deriveJsonNoPrefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;というパッケージをリリースしました。&lt;br /&gt;
地味に有用だと思うので、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/master/README.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をやや意訳気味に翻訳して記事にします。&lt;br /&gt;
十分に単純なので、仕様が変わることもまさかないでしょうし。&lt;/p&gt;
&lt;p&gt;以下、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/6114e0fc55cf5b57a771871e53971a51592f618b/README.md&#34;&gt;こちらのコミットの時点の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;の翻訳です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;同じ問題を解決するほかのライブラリー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;プレフィックスに優しい&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを定義する&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロを提供します。&lt;/p&gt;
&lt;h2 id=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;例&lt;/h2&gt;
&lt;p&gt;こんな感じの&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;を作りたいとしましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode json&#34;&gt;&lt;code class=&#34;sourceCode json&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ID STRING&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;max&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.789&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;min&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.123&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きっと&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ToJSON&lt;/span&gt;&lt;/a&gt;（おそらくそれに加えて&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:FromJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;FromJSON&lt;/span&gt;&lt;/a&gt;も）のインスタンスを自動的に定義するための、次のようなレコード型を定義したくなるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.TH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; id ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; max ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; min ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(deriveToJSON defaultOptions &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、こんなレコード型は定義すべきではありません。&lt;br /&gt;
&lt;code&gt;id&lt;/code&gt;も&lt;code&gt;max&lt;/code&gt;も&lt;code&gt;min&lt;/code&gt;も、&lt;code&gt;Prelude&lt;/code&gt;に定義済みなのですから！&lt;/p&gt;
&lt;p&gt;この問題を回避するために、レコードラベルに型の名前をプレフィックスとして加える、ということをわれわれはよくやります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; someRecordId ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMax ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして、&lt;code&gt;deriveToJSON&lt;/code&gt;にデフォルトと異なるオプションを渡して実行します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;SomeRecord&amp;quot;&lt;/span&gt;) } &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;firstLower (x&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;firstLower _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fieldLabelModifier&lt;/code&gt;オプションは文字通り、対象のレコードを&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換するとき、あるいは&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;から対象のレコードの値に変換する時、レコードのラベルを変換する関数を設定するために使います。&lt;br /&gt;
👆の場合、プレフィックスである&lt;code&gt;SomeRecord&lt;/code&gt;の文字数分レコードラベルから&lt;code&gt;drop&lt;/code&gt;して、先頭の文字&lt;small&gt;（&lt;code&gt;someRecordId&lt;/code&gt;で言えば&lt;code&gt;Id&lt;/code&gt;の&lt;code&gt;I&lt;/code&gt;に相当します）&lt;/small&gt;を小文字に変換しているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;そう、これが&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;がやっていることとほぼ同等のことです。&lt;br /&gt;
&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;は、実質次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;deriveToJsonNoTypeNamePrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Q&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;deriveToJsonNoTypeNamePrefix deriver name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; dropPrefix name } name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dropPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;dropPrefix name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; nameBase name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;firstLower (x&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toLower&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;firstLower _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果、これからは&lt;code&gt;fieldLabelModifier&lt;/code&gt;をもう自分で定義する必要がありません！🙌&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.DeriveNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(deriveJsonNoTypeNamePrefix &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆 の&lt;code&gt;deriveJsonNoTypeNamePrefix&lt;/code&gt; は &lt;a href=&#34;https://hackage.haskell.org/package/aeson/docs/Data-Aeson-TH.html#v:deriveJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJSON&lt;/span&gt;&lt;/a&gt;と同様に、&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンス、両方を生成します。&lt;br /&gt;
もちろん、&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを生成するときのオプションとしても、プレフィックスを削除するための&lt;code&gt;fieldLabelModifier&lt;/code&gt;を渡してくれます！&lt;/p&gt;
&lt;h2 id=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;同じ問題を解決するほかのライブラリー&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;など、&lt;code&gt;ToJSON&lt;/code&gt;・&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスが定義された&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので、そうした&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリーが学習コストや依存関係などの事情で「重たい」と感じたときにこのパッケージを使ってください。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
&#34;Haslell Platform 2014.2.0.0&#34;を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
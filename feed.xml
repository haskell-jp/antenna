<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2018-11-23T19:31:25+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/sasanquaneuf/items/c9d2bb9358f14b0c9c6e</id><title type="text">左と右は対称的ではなかった！？ Haskellのfoldrでアハ体験</title><updated>2018-11-23T19:31:25+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sasanquaneuf/items/c9d2bb9358f14b0c9c6e"/></entry><entry><id>https://qiita.com/Morico/items/a387a68b5180590d6395</id><title type="text">Haskell Hello,Worldへの道</title><updated>2018-11-23T08:49:46+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Morico/items/a387a68b5180590d6395"/></entry><entry><id>https://qiita.com/mtsugawa/items/e410812567e8b5b1690c</id><title type="text">だれも Data.Maybe を教えてくれなかった</title><updated>2018-11-23T00:10:04+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mtsugawa/items/e410812567e8b5b1690c"/></entry><entry><id>https://qiita.com/ryuichi1208/items/cecd868dfa53c9808777</id><title type="text">[初心者向け]流行りのプログラミング言語の一言概要(2018年版)</title><updated>2018-11-22T16:04:59+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ryuichi1208/items/cecd868dfa53c9808777"/></entry><entry><id>https://haskell.jp/blog/posts/2018/haskell-day-2018.html</id><title type="text">Haskell Day 2018 開催レポート</title><updated>2018-11-20T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/haskell-day-2018.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;去る&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;日に&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;が開催されましたので、そのイベントレポートをお送りします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;セッション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;懇親会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;アンケート&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/connpass.png&#34; alt=&#34;Connpass&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://haskell-jp.connpass.com/event/92617/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;2012&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;年と不定期に開催しており今回で&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;度目となります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年の今回は「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで」というテーマで開催されました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1173.jpg&#34; alt=&#34;受付&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;セッション&lt;/h1&gt;
&lt;h2 id=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/h2&gt;
&lt;p&gt;開発中の対話的チュートリアル&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt;を使って、参加者の皆さんにもくもくと入門していただきました。「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」では、簡単な課題を解くことで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の初歩的な使い方を学びつつ、学んだ知識をその場でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/makeMistakesToLearnHaskell&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1176.jpg&#34; alt=&#34;ハンズオン&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/khibino.png&#34; alt=&#34;Haskell を導入した話と HRR の紹介&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1177.jpg&#34; alt=&#34;khibino&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;413d120b6bee433c985c1d2b3395ff0e&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1193.jpg&#34; alt=&#34;nakaji-dayo&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;07d92af9d7aa40bca6cc3959d3f56b28&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1178.jpg&#34; alt=&#34;syocy&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7a16b1e09882433ca2dac9a6a81eb236&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/#/&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/aiya000.png&#34; alt=&#34;Semigroup とは？Monoid？環？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1179.jpg&#34; alt=&#34;aiya000&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;
&lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/noob00/haskell-cli&#34; title=&#34;Haskell で CLI&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt; &lt;span class=&#34;ascii&#34;&gt;from&lt;/span&gt; &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/noob00&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Nobutada Matsubara&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1183.jpg&#34; alt=&#34;matsubara0507&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/lotz.png&#34; alt=&#34;動かして遊んで学ぶ Haskell&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1186.jpg&#34; alt=&#34;lotz&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/fumieval.png&#34; alt=&#34;Liszt あるいは永続データ構造を真に永続させる方法&#34; style=&#34;width: 100%; max-width: 600px; border: solid 1px black;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1191.jpg&#34; alt=&#34;fumieval&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;懇親会&lt;/h2&gt;
&lt;p&gt;スポンサーとして&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;に飲食物の提供をしていただきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1194.jpg&#34; alt=&#34;懇親会&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート&lt;/h1&gt;
&lt;p&gt;約&lt;span class=&#34;ascii&#34;&gt;110&lt;/span&gt;名の方が出席し約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方が回答してくださいました。&lt;/p&gt;
&lt;p&gt;参加できなくなった約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方は事前のキャンセルをよろしくお願いします。&lt;/p&gt;
&lt;h2 id=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire1.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;ここ&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以内に始めた方が全体の&lt;span class=&#34;ascii&#34;&gt;21.4&lt;/span&gt;％、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方がちょうど半分程度となりました。&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方の&lt;span class=&#34;ascii&#34;&gt;57%&lt;/span&gt;の方は今でも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使い続けているようです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年以上前に始めた方は全体の&lt;span class=&#34;ascii&#34;&gt;1/4&lt;/span&gt;となりました。&lt;/p&gt;
&lt;h2 id=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire2.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;項目は下記となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すごい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; による並列・並行プログラミング&lt;/li&gt;
&lt;li&gt;関数プログラミング実践入門 ── 完結で正しいコードを書くために&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 ── &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で学ぶ原理と技法&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;関数プログラミング ── 珠玉のアルゴリズムデザイン&lt;/li&gt;
&lt;li&gt;簡約！λカ娘&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── 教養としての関数型プログラミング&lt;/li&gt;
&lt;li&gt;その他（自由記述）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この項目にはアンケートの途中で追加したものもあるので、結果があまり厳密でないことに注意してください。&lt;/p&gt;
&lt;p&gt;その他の選択肢で自由記述では次の票がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門 &lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;ふつうの&lt;span class=&#34;ascii&#34;&gt;Haskell 1&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による関数プログラミングの思考法 &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;票&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;終わりに&lt;/h1&gt;
&lt;p&gt;参加者の発表者、スタッフのみなさんのおかげで無事開催することができました。ありがとうございました。&lt;/p&gt;
&lt;p&gt;今後とも&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;をよろしくお願いします。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://qiita.com/ken_hamada/items/0f4f305675d4cc397e36</id><title type="text">HaskellでHello Worldしてみました（Mobile Haskell/iOS)</title><updated>2018-11-18T19:01:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ken_hamada/items/0f4f305675d4cc397e36"/></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html</id><title type="text">Haskell Day 2018 に参加してきた</title><updated>2018-11-17T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell Day 2018 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-17&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 17, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;11月10日にあった「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;Haskell Day 2018&lt;/a&gt;」に参加してきたのでメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;午前中-ハンズオン&#34;&gt;午前中 : ハンズオン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/igrep&#34;&gt;igrep&lt;/a&gt; 氏が中心になって作成した &lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;code&gt;makeMistakesToLearnHaskell&lt;/code&gt;&lt;/a&gt; を使ったハンズオン． ぼくも少しだけコミットした．&lt;/p&gt;
&lt;p&gt;当日の様子は，みなさんかなり黙々と作業してて静かだったが，Twitter 上で質問している人がチラチラいた． それらの Twitter の様子などをみてリアルタイムに修正を行なっていたのはすごい．&lt;/p&gt;
&lt;h2 id=&#34;午後&#34;&gt;午後&lt;/h2&gt;
&lt;p&gt;そのうちログミーが公開されるそうなので，概要と感想だけ．&lt;/p&gt;
&lt;h3 id=&#34;haskellを導入した話hrrの話&#34;&gt;Haskellを導入した話/HRRの話&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;10年近く職業 Haskeller をやっていた &lt;a href=&#34;https://github.com/khibino&#34;&gt;khibino&lt;/a&gt; 氏が，当時 Haskell を導入するに至った話と，彼が作った &lt;a href=&#34;https://hackage.haskell.org/package/relational-record&#34;&gt;HRR&lt;/a&gt; というライブラリの紹介 Perl に変わるグルー言語を求めて Haskell に行き着いたそうだ． 「GHC6.8 ですよ，GHC8.6 じゃなく，すごく無いですか？」すごい． HRRは面白そうだけど，使うタイミングがないや．&lt;/p&gt;
&lt;h3 id=&#34;servantで実現する高速かつ安全なapi&#34;&gt;Servantで実現する高速かつ安全なAPI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/daishi/servantdexing-uan-quan-katugao-su-naapikai-fa&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;同様に職業 Haskeller の &lt;a href=&#34;https://github.com/nakaji-dayo&#34;&gt;nakaji&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://haskell-servant.github.io/&#34;&gt;Servant&lt;/a&gt; という型レベルに RSETful API を定義できるパッケージを実際にどのように使っているかという話． Servant は僕もよく使う． 「実際に依存してるパッケージの紹介」や「実運用する上で困ったこと」などもあって興味深い．&lt;/p&gt;
&lt;h3 id=&#34;並列並行言語haskell&#34;&gt;並列並行言語Haskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/bing-lie-bing-xing-yan-yu-haskell&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;次のも含めて2本連続で &lt;a href=&#34;https://github.com/syocy&#34;&gt;syocy&lt;/a&gt; 氏の発表． Haskell における並行・並列プログラミングについての紹介． 並行・並列プログラミングとして最近は Go・Elixir/Erlang・Rust などが注目されているが，Haskell は20年近く前から並行・並列に対して意識してる． おまけとして，ツールの話や並行並列系パッケージの話があって勉強になる． 余談として「&lt;a href=&#34;https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html&#34;&gt;A Tour of Go in Haskell&lt;/a&gt;」というのを作ったが，英語版も作ったところめっさ PR が来たという話をしてくれた． やっぱ分母の大きい自然言語は強い．&lt;/p&gt;
&lt;h3 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;Dhall: Haskellの新たなキラーアプリ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;個人的に今回一番面白かった． &lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;Dhall&lt;/a&gt; というアプリケーションの紹介． Dhall は設定ファイルを記述するための DSL である． 設定ファイルの多くは YAML や JSON などで書かれるが，複数の YAML が複雑な依存関係を持っている場合(k8sとか)は静的解析したいよね？ しかし逆に「設定ファイルとしての領分」を守って欲しいという要求もある(汎用プログラミング言語としての役割はいらない)． そこで Dhall です！って感じの発表だった． 最後の導入事例として，自社の設定ファイル群を書き換えた話も面白かった．&lt;/p&gt;
&lt;h3 id=&#34;semigroupとはmonoidとは環とは&#34;&gt;Semigroupとは？Monoidとは？環とは？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aiya000&#34;&gt;aiya&lt;/a&gt; 氏の発表． 群や環などの代数的構造についての話． ステップバイステップに要件が増えていくのでわかりやすい説明だった．&lt;/p&gt;
&lt;p&gt;ちなみに個人的な肌感として，このような数学的な素養がないと Haskell プログラミングができないかというと，そうでもないと思う． 僕自身は教養としてそのあたりを知ってはいるので微妙なところだが，普段 Haskell プログラミングしてる時に意識してはいないはず． ただ，いくつかの言語機能やライブラリは数学や論理学など学術的なバックグランドを持ってることがある． そのような場合は「なぜこのような仕様なのか」「どうしてこのような仕組みでうまくいくかのか」などは，学術論文にしか書いてないことが多い． そのため，そういう機能やライブラリの仕組みを &lt;strong&gt;ちゃんと&lt;/strong&gt; 追おうとする場合は数学的素養がないと厳しいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;haskellで作るcli&#34;&gt;Haskellで作るCLI&lt;/h3&gt;
&lt;p&gt;僕の発表．後述します．&lt;/p&gt;
&lt;h3 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;gloss: 動かして遊んで学ぶHaskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lotz84&#34;&gt;lotz&lt;/a&gt; 氏の発表． Haskell を勉強したあと何するかシリーズ，GUI 編． 作りたいものがはっきりないときは &lt;a href=&#34;http://hackage.haskell.org/package/gloss&#34;&gt;gloss&lt;/a&gt; で振り子やライフゲームを作って遊んでみよう，という感じ． 僕自身はあんまり GUI に関心がないけど，実際に作りたいものがない場合はこういうので色々出力して手をうごしてみるのは正しい． 時間あるときになんか変なことできないか調べてみようかな．&lt;/p&gt;
&lt;h3 id=&#34;liszt-あるいは永続データ構造を真に永続させる方法&#34;&gt;Liszt あるいは永続データ構造を真に永続させる方法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;僕が愛用している extensible というライブラリの作者，&lt;a href=&#34;https://github.com/fumieval&#34;&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://github.com/fumieval/liszt&#34;&gt;liszt&lt;/a&gt; を作り始めていたことは知っていたので気になっていた． Liszt は Kafka のような大量のデータを収集・配信するためのプログラムだそうだ(名前も &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・カフカ&#34;&gt;Franz Kafka&lt;/a&gt; に対抗して &lt;a href=&#34;https://ja.wikipedia.org/wiki/フランツ・リスト&#34;&gt;Franz Liszt&lt;/a&gt; らしい)． 内部のデータ構造として Skew binary random access list を要素としてもつ 2-3 木 を用いている． このあたりの詳しい話は「&lt;a href=&#34;https://asciidwango.jp/post/160831986220/純粋関数型データ構造&#34;&gt;純粋関数型データ構造&lt;/a&gt;」を読むと良いとのこと(本の名前が上がった瞬間「ですよね〜」となってたw)．&lt;/p&gt;
&lt;h2 id=&#34;自分の話&#34;&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Haskell で CLI を作るうえでの小話をした。 スライドはこれ． &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;実はどれも，既に記事におこしたことのあるネタだった．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;コマンドライン引数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs&lt;/code&gt;・&lt;code&gt;GetOpt&lt;/code&gt;・&lt;code&gt;optparse-applicative&lt;/code&gt; について紹介&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optparse-applicative&lt;/code&gt; + &lt;code&gt;extensible&lt;/code&gt; でサブコマンドも網羅性をチェック&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-05-10-make-cli-with-haskell-in-2018&#34;&gt;オレ的 Haskell で CLI を作る方法 2018&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Alt. Prelude
&lt;ul&gt;
&lt;li&gt;Prelude 微妙だなって思ったら Alt. Prelude なパッケージを使ってみようという話&lt;/li&gt;
&lt;li&gt;具体的には愛用している RIO を紹介した&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-04-13-try-rio-1&#34;&gt;rio ライブラリを試す その１&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stack Template
&lt;ul&gt;
&lt;li&gt;よく使う依存パッケージやアプリのインターフェースの書き方がパターン化してきたら Stack Template 化しようという話&lt;/li&gt;
&lt;li&gt;Stack 1.9 から GitHub にあるテンプレートを参照できるようになった&lt;/li&gt;
&lt;li&gt;GitHub にあるテンプレートを出力する stack-tpls コマンドの紹介&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;2018-10-14-collect-stack-templates&#34;&gt;stack-templates を集める with GraphQL&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haskell を知ってる人にとってはあんまり面白くない話題だったかもしれないが，まぁまぁ(発言が)ウケていたのでよかった(?)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;初心者がわかりやすく，玄人にもウケるネタってなんだろうね． 来年もやるかもしれないから考えておこう．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html</id><title type="text">CamelCase の split</title><updated>2018-11-16T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Twitter で &lt;code&gt;CamelCase&lt;/code&gt; の文字列を &lt;code&gt;Camel Case&lt;/code&gt; にするという話を見かけたので、やってみました。&lt;/p&gt;
&lt;p&gt;文字列に含まれる文字は &lt;code&gt;[&#39;a&#39;..&#39;z&#39;] ++ [&#39;A&#39;..&#39;Z&#39;]&lt;/code&gt; を想定しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記: 寄せられたご意見について追記しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;split&#34;&gt;split&lt;/h2&gt;
&lt;p&gt;分割するということなので &lt;a href=&#34;https://www.stackage.org/package/split&#34;&gt;split&lt;/a&gt; パッケージを使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt; (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;splitCC  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; splitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fold&#34;&gt;fold&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; パッケージを使った実装は直感的でコードもコンパクトです。&lt;/p&gt;
&lt;p&gt;しかし、見た感じ効率悪そうですよね。(リスト全体を分割した後で &lt;code&gt;unwords&lt;/code&gt; かけるため)&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;fold&lt;/code&gt; バージョンも実装してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (isUpper, isSpace)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ghci&amp;gt; foldSplitCC &amp;quot;CamelCase&amp;quot;
&amp;quot;Camel Case&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quickcheck&#34;&gt;QuickCheck&lt;/h2&gt;
&lt;p&gt;念の為 &lt;a href=&#34;https://www.stackage.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; を使ってランダムテストを行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; quickCheck prop_split&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;prop_split ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;prop_split xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; splitCC xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; xs&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; getString xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
splitcc-0.1.0.0: test (suite: splitcc-test)

+++ OK, passed 100 tests.

splitcc-0.1.0.0: Test suite splitcc-test passed&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;
&lt;p&gt;次は &lt;a href=&#34;https://github.com/vincenthz/hs-gauge&#34;&gt;gauge&lt;/a&gt; を使ってどっちが速いか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gauge.Main.Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SplitCC&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultConfig { displayMode &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Condensed&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;  sampleData1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;  sampleData2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;  sampleData3 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;100000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;  sampleData4 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; generate &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; vectorOf &lt;span class=&#34;dv&#34;&gt;1000000&lt;/span&gt; charGen&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  defaultMainWith conf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;    [ bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;splitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;                       , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf splitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;                       ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;    , bgroup &lt;span class=&#34;st&#34;&gt;&amp;quot;foldSplitCC&amp;quot;&lt;/span&gt; [ bench &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; title=&#34;23&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; title=&#34;24&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; title=&#34;25&#34;&gt;                           , bench &lt;span class=&#34;st&#34;&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nf foldSplitCC sampleData4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; title=&#34;26&#34;&gt;                           ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; title=&#34;27&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-29&#34; title=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;charGen ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-30&#34; title=&#34;30&#34;&gt;charGen &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack bench
Benchmark splitcc-bench: RUNNING...
splitCC/10                               mean 2.847 μs  ( +- 261.0 ns  )
splitCC/1000                             mean 287.2 μs  ( +- 3.935 μs  )
splitCC/100000                           mean 29.10 ms  ( +- 1.348 ms  )
splitCC/1000000                          mean 287.3 ms  ( +- 735.0 μs  )

foldSplitCC/10                           mean 219.3 ns  ( +- 2.955 ns  )
foldSplitCC/1000                         mean 25.65 μs  ( +- 246.5 ns  )
foldSplitCC/100000                       mean 2.640 ms  ( +- 22.98 μs  )
foldSplitCC/1000000                      mean 27.43 ms  ( +- 1.795 ms  )
Benchmark splitcc-bench: FINISH&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;autobench&#34;&gt;AutoBench&lt;/h2&gt;
&lt;p&gt;最後に &lt;a href=&#34;https://github.com/mathandley/AutoBench&#34;&gt;AutoBench&lt;/a&gt; を使って視覚的に実行時間の変化を確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveGeneric #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Input&lt;/span&gt; (ts, splitCC, foldSplitCC) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;          (isSpace, isUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.Split&lt;/span&gt;    (split, startsWithOneOf)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Generics&lt;/span&gt;    (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.DeepSeq&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Default&lt;/span&gt;         (def)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.Types&lt;/span&gt;      (&lt;span class=&#34;dt&#34;&gt;DataOpts&lt;/span&gt;(..), &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AutoBench.QuickCheck&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.QuickCheck&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; title=&#34;17&#34;&gt;splitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; split (startsWithOneOf [&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;foldSplitCC ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; title=&#34;20&#34;&gt;foldSplitCC &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmt &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; go [] &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getString&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; title=&#34;22&#34;&gt;    go c acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isUpper&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; title=&#34;24&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;acc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; title=&#34;25&#34;&gt;    fmt cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; cs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isSpace&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; cs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tail&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; cs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ts ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestSuite&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-31&#34; title=&#34;31&#34;&gt;ts  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; def { _dataOpts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Gen&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;200000&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-33&#34; title=&#34;33&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getString ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;NFData&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-35&#34; title=&#34;35&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-36&#34; title=&#34;36&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-37&#34; title=&#34;37&#34;&gt;  arbitrary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;AutoBench を利用する際、デフォルトの設定では、入力の型は &lt;code&gt;NFData&lt;/code&gt; 型クラスのインスタンスになっている必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AutoBench の結果&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/AutoBenched.png&#34; alt=&#34;AutoBench の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応ターミナルにもこんな感じで詳細な結果も出力してくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;     • Executed benchmarking file ✔
     • Generating test report ✔
     • Analysing performance results...

 ―― Test summary ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  Programs       foldSplitCC, splitCC
  Data           Random, size range [0,10000..200000]
  Normalisation  nf
  QuickCheck     ✔
  GHC flags      n/a

 ―― Analysis ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  foldSplitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   0.179   1.225   1.978   2.112   6.172   4.232   1.248
                  0.217   5.961   5.184   2.715   5.186   2.690   6.810   4.810
                  7.073   7.760   5.122   8.280   18.66
    Std dev (ms)  1.742
    Average variance introduced by outliers: 83% (severely inflated)

    Fits          y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
                  y = 3.45e-13 + 4.71e-8x
                  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  splitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   1.080   9.397   13.53   6.133   39.55   29.14   9.504
                  1.596   44.46   38.58   16.35   35.41   17.94   38.40   52.06
                  59.35   62.88   40.68   58.27   105.0
    Std dev (ms)  10.54
    Average variance introduced by outliers: 62% (severely inflated)

    Fits          y = 2.41e-12 + 3.29e-7x
                  y = 8.06e-15 + 1.92e-8xlog₂(x)
                  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  Optimisation:

    splitCC ≥ foldSplitCC (1.00)

 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; ということなので &lt;code&gt;foldSplitCC&lt;/code&gt; の方が良い結果となりました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リストを何度も走査すると遅くなるので、fold で書くと良いよ！&lt;/li&gt;
&lt;li&gt;関数の振る舞いが変化していないか確認するために QuickCheck を使おう！&lt;/li&gt;
&lt;li&gt;ベンチマークの実行はとても簡単なので積極的にやってみよう！&lt;/li&gt;
&lt;li&gt;AutoBench を使って可視化すると楽しいよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄せられたご意見&#34;&gt;寄せられたご意見&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;問題設定として &lt;code&gt;convertRGB&lt;/code&gt; は &lt;code&gt;convert R G B&lt;/code&gt; でいいの？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直感的に良くないですが、全然考えてなかったので今回は良いことにしておきたいと思います・・・。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;グラフの隅に、“splitCCは線形でfoldsplitCCは2次”とか書いてあって本当にそうだと巨大な列で結果が逆転してしまうんだけどそれは間違いだよね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは (たぶん) グラフをプロットする際の値の選択が良くなかったため、間違った計算量が推論されてしまっています。&lt;/p&gt;
&lt;p&gt;具体的にはこのような表示があり、ここから選ぶことになるのですが全然わからないので &lt;code&gt;1&lt;/code&gt; を選択した結果、今回の図のようになりました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
    2)  y = 3.45e-13 + 4.71e-8x
    3)  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.41e-12 + 3.29e-7x
    2)  y = 8.06e-15 + 1.92e-8xlog₂(x)
    3)  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のように正しく選ぶと&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 2.80e-13 + 3.83e-8x
    2)  y = 9.34e-16 + 2.22e-9xlog₂(x)
    3)  y = -7.13e-3 + 1.34e-6log₂(x) + 4.22e-5log₂²(x)

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1

  splitCC
    1)  y = 2.15e-12 + 2.94e-7x
    2)  y = 7.18e-15 + 1.71e-8xlog₂(x)
    3)  y = 6.99e-23 + 2.79e-16x + 1.76e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&amp;#39;t plot         [X]

&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、正しい計算量になります。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2018/11-16/true-result.png&#34; alt=&#34;AutoBench の真の結果&#34; /&gt;&lt;figcaption&gt;AutoBench の真の結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MyString を定義するのが面倒な場合は以下のようにすると良いよ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;prop_split &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  xs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; listOf &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; elements ([&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt;[&lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; splitCC xs &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; foldSplitCC xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;splitCC ≥ foldSplitCC (1.00)&lt;/code&gt; っていうのはどういう意味&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitCC ≥ foldSplitCC&lt;/code&gt; の部分は &lt;code&gt;splitCC&lt;/code&gt; よりも &lt;code&gt;foldSplitCC&lt;/code&gt; 関数の方がパフォーマンスが向上していることを示しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1.00)&lt;/code&gt; は QuickCheck によって生成されたテストケースを入力として利用した時に全てのテストケース (&lt;code&gt;100%&lt;/code&gt;) で性能が改善されたという意味です。&lt;code&gt;0.5&lt;/code&gt; などとなっていた場合はテストケースによっては性能が向上していないということです。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://qiita.com/mtsugawa/items/1a1fd5fe331d9c97981a</id><title type="text">いまさら Haskell でボウリング</title><updated>2018-11-15T14:33:00+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mtsugawa/items/1a1fd5fe331d9c97981a"/></entry><entry><id>https://qiita.com/mtsugawa/items/dfcc45070c2e0a036424</id><title type="text">Haskell に python の find みたいなのがない</title><updated>2018-11-14T13:03:27+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mtsugawa/items/dfcc45070c2e0a036424"/></entry><entry><id>https://qiita.com/yumakkt/items/3a580f1fa19e7eba2cab</id><title type="text">すごいH本読んだからまとめ 9 「関数適用($),関数合成(.)」</title><updated>2018-11-14T07:31:05+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/3a580f1fa19e7eba2cab"/></entry><entry><id>https://qiita.com/KNaito/items/782d64fe6866a3ab6667</id><title type="text">足し算プログラムをいくつかの言語で作ってみる</title><updated>2018-11-12T12:58:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/KNaito/items/782d64fe6866a3ab6667"/></entry><entry><id>https://qiita.com/yumakkt/items/10d583e09b4586e73d89</id><title type="text">すごいH本読んだからまとめ 8 「ラムダ式」</title><updated>2018-11-11T20:46:43+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/10d583e09b4586e73d89"/></entry><entry><id>https://qiita.com/yumakkt/items/95554aace5da53cc7e22</id><title type="text">すごいH本読んだからまとめ 7「高階関数」</title><updated>2018-11-11T14:39:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/95554aace5da53cc7e22"/></entry><entry><id>https://qiita.com/yumakkt/items/e2b4379317d9ca5f94e9</id><title type="text">すごいH本読んだからまとめ 6 「カリー化」</title><updated>2018-11-11T00:06:53+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/e2b4379317d9ca5f94e9"/></entry><entry><id>https://qiita.com/yumakkt/items/ecb3244446de17aaa7fa</id><title type="text">すごいH本読んだからまとめ 5 「再帰」</title><updated>2018-11-10T19:49:12+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/ecb3244446de17aaa7fa"/></entry><entry><id>https://qiita.com/lotz/items/bdb04c771efc8919b79c</id><title type="text">gloss: 動かして遊んで学ぶHaskell</title><updated>2018-11-10T16:36:24+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/bdb04c771efc8919b79c"/></entry><entry><id>https://qiita.com/yumakkt/items/c50dcd286cf7521e31a0</id><title type="text">すごいH本読んだからまとめ 4 「関数の構文」</title><updated>2018-11-10T14:18:44+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/c50dcd286cf7521e31a0"/></entry><entry><id>https://qiita.com/TomKid/items/7c69b4c01bcb2858792e</id><title type="text">Haskellの真似した4行で書けるRubyのqsort</title><updated>2018-11-06T14:23:17+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/TomKid/items/7c69b4c01bcb2858792e"/></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-11-06T11:47:03.776+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://qiita.com/SOhtsu/items/83ccb2ff211d79690aa5</id><title type="text">WSLへのHaskellのインストール並びにVisual Studio Codeの環境設定</title><updated>2018-11-05T18:36:19+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/SOhtsu/items/83ccb2ff211d79690aa5"/></entry><entry><id>https://qiita.com/yumakkt/items/f47e8ee810679978869f</id><title type="text">すごいH本読んだからまとめ 3 「型」</title><updated>2018-11-05T08:32:43+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/f47e8ee810679978869f"/></entry><entry><id>https://qiita.com/yumakkt/items/36d95c738a3bc17119bd</id><title type="text">すごいH本読んだからまとめ 2 「リスト,タプル」</title><updated>2018-11-04T12:39:42+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/36d95c738a3bc17119bd"/></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html</id><title type="text">Markdownで書いたテキストをMediumへポストする(mdium)</title><updated>2018-11-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-04-create-mdium.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Markdownで書いたテキストをMediumへポストする(mdium)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-11-04&#34; itemprop=&#34;datePublished&#34;&gt;
        Nov 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;完全な二番煎じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://namaraii.com/markdownで書いたテキストをmediumへポストする-md2mid-60c6ff9efde&#34;&gt;Markdownで書いたテキストをMediumへポストする(md2mid) – namaraii.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記記事は，Go 言語で作った「Markdownで書いたテキストをMediumへポストする」CLIツールです． 弊社の技術記事置き場が Medium だったので，なんとか，ここのように Markdown で書けないかと調べていたら上記記事が出て来ました． もっといいのできないかなと車輪の再発明してみたけど，正直大して変わらなかったと思います．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;md2mid と同様に Markdown で書いた記事を Medium に送信する CLI ツールを作った． 言わずもがな Haskell 製．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/mdium&#34;&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;違いがあるとすれば:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell 製（しつこい）&lt;/li&gt;
&lt;li&gt;環境変数を使ったトークンの管理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/matsubara0507/mdium/&#34;&gt;Docker Image&lt;/a&gt; 化してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;まず CLI ツールをインストールするには，リポジトリをクローンして Haskell Stack で直接ビルド・インストールする:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/matsubara0507/mdium.git
$ cd mdium
$ stack install mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは，Docker Image をプルしてくる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker pull matsubara0507/mdium&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドを使うには，まず Medium のトークンを&lt;a href=&#34;https://medium.com/me/settings&#34;&gt;設定&lt;/a&gt;から生成する．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-mdium/generate-token.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これを環境変数 &lt;code&gt;MEDIUM_TOKEN&lt;/code&gt; にセットする． 直接でも良いし，&lt;code&gt;./.env&lt;/code&gt; か &lt;code&gt;~/.env&lt;/code&gt; に描いても良い． 下記のコマンドを実行することでトークンをチェックできる:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mdium --me
Hi MATSUBARA Nobutada!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker イメージを使う場合にはこう:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm --env-file=&amp;quot;$HOME/.env&amp;quot; matsubara0507/mdium /bin/bash -c &amp;quot;mdium --me&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;トークンを渡すのは &lt;code&gt;--env-file&lt;/code&gt; オプションでも &lt;code&gt;-e&lt;/code&gt; オプションでも何でも良い． 実際に送信するには引数に送信したいファイルのパスを渡すだけ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ medium example.md
post success, browse to: https://medium.com/@nobutada/e31f70013b36&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうすることで指定した Markdown ファイルを draft として記事にしてくれる． ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/mdium/blob/master/example/example.md&#34;&gt;これ&lt;/a&gt;が下記のようになる．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/matsubara0507/mdium/raw/master/example/example.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;medium-api&#34;&gt;Medium API&lt;/h2&gt;
&lt;p&gt;こっからは中身の話を少し． 中では Medium の API を使っている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Medium/medium-api-docs#readme&#34;&gt;Medium’s API documentation - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その中に記事を送信する API があるのだが，驚いたことに送信できるファイルフォーマットに HTML と &lt;strong&gt;Markdown&lt;/strong&gt; があったのだ． つまり，特別な処理をせずともこの API を使ってマークダウンを送信すれば良い．&lt;/p&gt;
&lt;h2 id=&#34;dockerise&#34;&gt;Dockerise&lt;/h2&gt;
&lt;p&gt;Haskell Stack には Docker integration というのがある（あんまりドキュメントにまとまっていない機能）． これを使うことで，指定した Docker image 内で Haskell プロジェクトをビルドしたり，ビルドした実行ファイルを突っ込んだ Docker image を作成したりできる．&lt;/p&gt;
&lt;p&gt;今回は次のような設定を書き:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/mdium&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行することで Docker image を作成している:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack docker pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成した Image は &lt;code&gt;docker push&lt;/code&gt; コマンドでアップロードしている． また，この一連の流れを TravisCI で自動化している．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;p&gt;突貫で作ったのでいくつかやり残しがある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーハンドリング : 特に何も例外処理していないので&lt;/li&gt;
&lt;li&gt;記事の更新 : 今はひたすら新しい記事を生成してしまう&lt;/li&gt;
&lt;li&gt;タグやファイルフォーマットなどの細かい指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;だいたい1日とちょっとでサクッと作った割にはいい感じのものができて満足． どんどん再発明していこ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://qiita.com/yumakkt/items/ce82eb3ffae874faf249</id><title type="text">すごいH本読んだからまとめ 1 「関数の呼び方、関数の定義の仕方」</title><updated>2018-11-03T18:50:47+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yumakkt/items/ce82eb3ffae874faf249"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-10-29-join-hacktoberfest-2018.html</id><title type="text">Hacktoberfest 2018 なので PR を5つ以上出してみた</title><updated>2018-10-29T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-10-29-join-hacktoberfest-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Hacktoberfest 2018 なので PR を5つ以上出してみた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-10-29&#34; itemprop=&#34;datePublished&#34;&gt;
        Oct 29, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;去年に引き続き，Hacktoberfest に参加しました． 2017 は PR を4つでしたが，2018 は5つになったようです．&lt;/p&gt;
&lt;p&gt;ちなみに Hacktoberfest がなんなのかや，参加方法については&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-10-11-join-hacktoberfest-2017.html&#34;&gt;過去記事&lt;/a&gt;を見てください（多分変わってなかったはず）．&lt;/p&gt;
&lt;h2 id=&#34;マイステータス&#34;&gt;マイステータス&lt;/h2&gt;
&lt;p&gt;10月29日時点のステータスはこんな感じ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/join-hacktoberfest-2018/status.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/stats/matsubara0507&#34;&gt;ここから見れる&lt;/a&gt;が，毎年同じリンクを使ってるっぽいので，2019年にこの記事を見にきた人は役に立たないリンクです(笑)&lt;/p&gt;
&lt;h2 id=&#34;出した-pr&#34;&gt;出した PR&lt;/h2&gt;
&lt;p&gt;自分のリポジトリに対する PR もカウントされてしまうので，それを除くと4リポジトリ7PRです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/10&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/14&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/16&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/pull/30&#34;&gt;haskell-jp/makeMistakesToLearnHaskell ＃30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stackage/pull/4078&#34;&gt;commercialhaskell/stackage ＃4078&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Hacktoberfest-2018/Hello-world/pull/2483&#34;&gt;Hacktoberfest-2018/Hello-world ＃2483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stackbuilders/dotenv-hs/pull/101&#34;&gt;stackbuilders/dotenv-hs ＃101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とはいえ，haskell-jp は僕が活動しているコミュニティだし，stackage は Haskell 版 Gem の登録申請みたいなものだし，Hacktoberfest-2018/Hello-world はただの遊びだし． ちゃんと OSS に出した PR は一つだ…&lt;/p&gt;
&lt;h3 id=&#34;haskell-jpmakemistakestolearnhaskell&#34;&gt;haskell-jp/makeMistakesToLearnHaskell&lt;/h3&gt;
&lt;p&gt;このリポジトリは，2018/11/10 に開催予定の &lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;Haskell Day 2018&lt;/a&gt; の午前中で行われる予定のハンズオンで使うものです． &lt;a href=&#34;https://github.com/igrep&#34;&gt;igrep&lt;/a&gt; 氏がメインで作っており，僕は CI を設定したり，Cabal から hpack に移行したり，コンテンツをいじるより環境周りをいじった．&lt;/p&gt;
&lt;h3 id=&#34;commercialhaskellstackage&#34;&gt;commercialhaskell/stackage&lt;/h3&gt;
&lt;p&gt;このリポジトリは Haskell のパッケージマネージャーである &lt;a href=&#34;https://www.stackage.org/&#34;&gt;Stackage&lt;/a&gt; の管理リポジトリだ． &lt;a href=&#34;http://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt; というのもあるが，Hackage はパッケージストレージで，Stackage は Hackage にある各パッケージのバージョンのリゾルバを提供している（ビルド可能な組み合わせのこと）． 他の言語と異なり，リゾルバがあることで Haskell アプリケーションの作者が常に各パッケージ間のバージョンなどを細かく管理する必要はなく，特定のリゾルバを設定するだけで良い．&lt;/p&gt;
&lt;p&gt;最近，Haskell のデファクトスタンダードなコンパイラ，GHC の最新バージョンである GHC 8.6 がリリースされた． それに伴い，Stackage の Nightly 版が GHC 8.6 へ移行され，多くのパッケージが disable された． 徐々にメジャーパッケージが reenable されたので，&lt;a href=&#34;http://hackage.haskell.org/package/servant-kotlin&#34;&gt;僕の作成したパッケージ&lt;/a&gt;も reenable する PR を送ったのだ．&lt;/p&gt;
&lt;h3 id=&#34;hacktoberfest-2018hello-world&#34;&gt;Hacktoberfest-2018/Hello-world&lt;/h3&gt;
&lt;p&gt;これは Hacktoberfest が作ったお遊びリポジトリだ（多分）． いろんな言語の &lt;code&gt;Hello, world!&lt;/code&gt; と出力するプログラムを集めるリポジトリのようだ．&lt;/p&gt;
&lt;p&gt;僕は &lt;a href=&#34;https://hacktoberfest.digitalocean.com/stats&#34;&gt;Hacktoberfest のグローバルステータス&lt;/a&gt;の「Highest Pull Request Count Repos」で見かけた（今は read-only になっているので PR は出せない）． 面白そうだったので，まだ無かった &lt;a href=&#34;https://www.egison.org/&#34;&gt;Egison&lt;/a&gt; のプログラムを PR として出した．&lt;/p&gt;
&lt;pre class=&#34;egison&#34;&gt;&lt;code&gt;(define $main
  (lambda [$args]
    (write &amp;quot;Hello, world!\n&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Egison は江木さんという方が学生のころから作ってるパターンマッチ志向という独特のパラダイムを持つプログラミング言語だ． 全然関係ない話だが，今度&lt;a href=&#34;https://connpass.com/event/102061/&#34;&gt;ワークショップ&lt;/a&gt;も行われる．&lt;/p&gt;
&lt;h3 id=&#34;stackbuildersdotenv-hs&#34;&gt;stackbuilders/dotenv-hs&lt;/h3&gt;
&lt;p&gt;唯一のまともな OSS な PR． &lt;a href=&#34;http://hackage.haskell.org/package/dotenv&#34;&gt;dotenv&lt;/a&gt; という Haskell パッケージのリポジトリだ． 自分が作ってる &lt;a href=&#34;https://github.com/matsubara0507/stack-tpls&#34;&gt;CLI ツール&lt;/a&gt;に使おうと思って README に書いてある通りに書いて見たら，動かなかったので，その修正 PR を出した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Configuration.Dotenv&lt;/span&gt; (loadFile, defaultConfig)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;loadFile defaultConfig&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こう書くと &lt;code&gt;defaultConfig&lt;/code&gt; が無いと怒られる．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Main.hs:17:42: error:
    Module ‘Configuration.Dotenv’ does not export ‘defaultConfig’
   |                             
17 | import           Configuration.Dotenv   (defaultConfig, loadFile)
   |                                          ^^^^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを見に行ったら &lt;code&gt;defaultConfig&lt;/code&gt; を Reexport し忘れていたので，Reexport し直す PR を出した． 無事マージされ，最新バージョンでリリースされたので，もし同じバグを踏んだ人がいた場合はバージョン &lt;code&gt;0.6.0.3&lt;/code&gt; 以上を試してほしい．&lt;/p&gt;
&lt;h2 id=&#34;t-shirt&#34;&gt;T-shirt&lt;/h2&gt;
&lt;p&gt;去年と同様に「You’ve completed the Hacktoberfest challenge!」というメールが届いた（10/27に）． メール本文にあるユニークなリンクを踏んでTシャツのリクエストを出せる． Tシャツのサイズと，自分の住所などを英語で記載するだけだ．&lt;/p&gt;
&lt;p&gt;アメリカ以外はだいたいひと月ほどで届くらしい． ちなみに，去年は12月20日ぐらいに届いてた．&lt;/p&gt;
&lt;h3 id=&#34;おしまい&#34;&gt;おしまい&lt;/h3&gt;
&lt;p&gt;あんまり OSS っぽい PR を出せなくて残念…&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-10-28-ghc-8-6-error-no-gmp.html</id><title type="text">GHC 8.6 がインストールできなかった</title><updated>2018-10-28T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-10-28-ghc-8-6-error-no-gmp.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;GHC 8.6 がインストールできなかった&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-10-28&#34; itemprop=&#34;datePublished&#34;&gt;
        Oct 28, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;対したことではないんだけど，日本語の記事が無っかたのでメモ． ちなみに OS は macOS Sierra (10.12.6) です．&lt;/p&gt;
&lt;h2 id=&#34;ghc-8.6-でビルドできない&#34;&gt;GHC 8.6 でビルドできない&lt;/h2&gt;
&lt;p&gt;現在 stackage の Nightly は最新の GHC バージョンである 8.6 がインストールされる． 結構パッケージも揃ってきたので，自分のパッケージもビルドしてみようかなと思って，resolver を Nightly に変えて &lt;code&gt;stack build&lt;/code&gt; したら下記のようなエラーが出た．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
Downloaded nightly-2018-10-26 build plan.    
Preparing to install GHC to an isolated location.
This will not interfere with any system-level installation.
Downloaded ghc-8.6.1.                                      
Installing GHC ...                                                                         
Received ExitFailure 2 when running
Raw command: /usr/bin/make install
Run from: /Users/username/.stack/programs/x86_64-osx/ghc-8.6.1.temp/ghc-8.6.1/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--vebose&lt;/code&gt; を付けて詳細を見てみる．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --verbose
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
2018-10-28 13:31:22.068195: [debug] Checking for project config at: /Users/username/git/haskell/servant-kotlin/stack.yaml
2018-10-28 13:31:22.069706: [debug] Loading project config file stack.yaml
 .
 .
 .
2018-10-28 13:32:21.355443: [debug] /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/username/.stack/programs/x86_64-osx/ghc-8.6.1/lib/ghc-8.6.1/rts/libHSrts_thr_p.a(Select.thr_p_o) has no symbols
2018-10-28 13:32:21.621133: [debug] &amp;quot;utils/ghc-cabal/dist-install/build/tmp/ghc-cabal-bindist&amp;quot; copy libraries/ghc-prim dist-install &amp;quot;strip&amp;quot; &amp;#39;&amp;#39; &amp;#39;/Users/username/.stack/programs/x86_64-osx/ghc-8.6.1&amp;#39; &amp;#39;/Users/username/.stack/programs/x86_64-osx/ghc-8.6.1/lib/ghc-8.6.1&amp;#39; &amp;#39;/Users/username/.stack/programs/x86_64-osx/ghc-8.6.1/share/doc/ghc-8.6.1/html/libraries&amp;#39; &amp;#39;v p dyn&amp;#39;  
2018-10-28 13:32:21.841900: [debug] dyld: Library not loaded: /usr/local/opt/gmp/lib/libgmp.10.dylib
2018-10-28 13:32:21.842003: [debug]   Referenced from: /Users/username/.stack/programs/x86_64-osx/ghc-8.6.1.temp/ghc-8.6.1/libraries/base/dist-install/build/libHSbase-4.12.0.0-ghc8.6.1.dylib
2018-10-28 13:32:21.842062: [debug]   Reason: image not found
2018-10-28 13:32:21.842273: [debug] make[1]: *** [install_packages] Abort trap: 6
2018-10-28 13:32:21.844303: [debug] make: *** [install] Error 2
Installing GHC ...
Received ExitFailure 2 when running
Raw command: /usr/bin/make install
Run from: /Users/username/.stack/programs/x86_64-osx/ghc-8.6.1.temp/ghc-8.6.1/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どうやら &lt;code&gt;/usr/local/opt/gmp/lib/libgmp.10.dylib&lt;/code&gt; が無いみたいだ．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ls /usr/local/opt/gmp/lib/libgmp.10.dylib
ls: /usr/local/opt/gmp/lib/libgmp.10.dylib: No such file or directory&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで検索すると，Ruby に関することだが &lt;a href=&#34;https://stackoverflow.com/questions/34912946&#34;&gt;StackOverflow があった&lt;/a&gt;． 曰く，&lt;code&gt;gmp&lt;/code&gt; パッケージを入れれば良いらしい（多くの人は他のどこかのタイミングで入ってるのかも）．&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ brew reinstall gmp
==&amp;gt; Reinstalling gmp
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/gmp-6.1.2_2.sierra.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring gmp-6.1.2_2.sierra.bottle.tar.gz
🍺  /usr/local/Cellar/gmp/6.1.2_2: 18 files, 3.1MB

$ ls /usr/local/opt/gmp/lib/libgmp.10.dylib
/usr/local/opt/gmp/lib/libgmp.10.dylib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで GHC 8.6 で &lt;code&gt;stack build&lt;/code&gt; できるようになった．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;まぁ一応ね，一応メモした．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html</id><title type="text">Stack 1.9.1 がリリースされました。</title><updated>2018-10-22T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;10月18日に Stack version 1.9.1 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.1/ChangeLog.md#v191&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
Current Stack version: 1.7.1, available download version: 1.9.1
Newer version detected, downloading
Querying for archive location for platform: linux-x86_64-static
Downloading from: https://github.com/commercialhaskell/stack/releases/download/v1.9.1/stack-1.9.1-linux-x86_64-static.tar.gz
Download complete, testing executable
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
New stack executable available at /home/guchi/.local/bin/stack
Also copying stack executable to /usr/local/bin/stack
Permission error when trying to copy: /usr/local/bin: copyFile:atomicCopyFileContents:withReplacementFile:openBinaryTempFile: permission denied (Permission denied)
Should I try to perform the file copy using sudo? This may fail
Try using sudo? (y/n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルは &lt;code&gt;~/.local/bin/stack&lt;/code&gt; と &lt;code&gt;/usr/local/bin&lt;/code&gt; にインストールされます。&lt;/p&gt;
&lt;p&gt;ただし、権限が無いと上記のように &lt;code&gt;/usr/local/bin&lt;/code&gt; へのコピーに失敗するため &lt;code&gt;sudo&lt;/code&gt; で再実行するか聞かれます。必要であれば &lt;code&gt;y&lt;/code&gt; でインストールしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;Try using sudo? (y/n) y
Going to run the following commands:

-  sudo cp /home/guchi/.local/bin/stack /usr/local/bin/stack.tmp
-  sudo mv /usr/local/bin/stack.tmp /usr/local/bin/stack

sudo file copy worked!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされるバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack --version
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;気になる更新内容まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static binary の復活&lt;/li&gt;
&lt;li&gt;Cabal 2.4 への対応&lt;/li&gt;
&lt;li&gt;internal-library 関連のバグ修正&lt;/li&gt;
&lt;li&gt;namespaced template&lt;/li&gt;
&lt;li&gt;stack run&lt;/li&gt;
&lt;li&gt;ghci に -fobject-code を渡した際にちゃんとキャッシュされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;さんのおかげで、静的にリンクされた Linux バイナリが再び利用できるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c34f11190302b2db9bab44ac6e45ca2c5f7810ce/doc/maintainers/releases.md#build-linux-static-binary-distribution-with-nix&#34;&gt;Build Linux static binary distribution with Nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nh2/static-haskell-nix/tree/upstream-nixpkgs-musl-1.1.19/static-stack&#34;&gt;Fully statically linked stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;download.fpcomplete.com&lt;/code&gt; から Ubuntu, Debian, CentOS, Fedora, Arch のパッケージリポジトリを削除する予定です。これらは既に1年以上前から非推奨となっており、新しいリリースにも対応していませんでしたが、過去のスクリプトとの互換性のために残していました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;大きな変更点&#34;&gt;大きな変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cabal 2.4 にアップグレードしました。
&lt;ul&gt;
&lt;li&gt;注意点: ファイル名のパターンマッチの動作が変わりました。Cabal spec 2.4 より前のバージョンでは &lt;code&gt;*.txt&lt;/code&gt; は &lt;code&gt;foo.txt&lt;/code&gt; にマッチしていましたが、&lt;code&gt;foo.2.txt&lt;/code&gt; にはマッチしませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4317&#34;&gt;Use Cabal 2.4 for the 1.9 branch #4317&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/blob/master/Cabal/ChangeLog.md#2400-mikhail-glushenkov-september-2018&#34;&gt;ChangeLog (Cabal 2.4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5372&#34;&gt;Multi-dot globbing #5372&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/784&#34;&gt;Wildcards in data-files don’t work with filenames containing multiple dots #784&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5057&#34;&gt;&lt;code&gt;cabal sdist&lt;/code&gt; does not pick up files with multiple dots #5057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; のサポートが &lt;code&gt;experimental (実験的)&lt;/code&gt; へ降格しました。また、&lt;code&gt;GHCJS&lt;/code&gt; が実験段階であることをユーザに知らせるための警告が表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4086&#34;&gt;DISCUSSION: Mark GHCJS support as deprecated? #4086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4154&#34;&gt;Warning about GHCJS use when constructing a build plan #4154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/729a052cede11855644bf00c4b7661a89148bdc7#diff-e705c8fadf1193ab59443a5e6c8cbe8b&#34;&gt;commit@729a052cede11855644bf00c4b7661a89148bdc7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;変更点&#34;&gt;変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; と &lt;code&gt;config.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようにしました。今までは置き換えていました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;グローバルな &lt;code&gt;~/.stack/.config.yaml&lt;/code&gt; とプロジェクト固有の &lt;code&gt;stack.yaml&lt;/code&gt; の話で &lt;code&gt;package.yaml&lt;/code&gt; は関係しません。&lt;/p&gt;
&lt;p&gt;例として、それぞれファイルの内容を以下のように設定しておきます。(&lt;code&gt;$everything&lt;/code&gt; は全てのパッケージを指定)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パッケージの指定が重複していたときに今までは、&lt;code&gt;stack.yaml&lt;/code&gt; (プロジェクト固有) の &lt;code&gt;ghc-options&lt;/code&gt; で上書きされていましたが、 &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;ghc-options&lt;/code&gt; を結合するようになりました。以下は動作例です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# stack v1.9.1 の動作
$ stack build
... --ghc-options aaa --ghc-options bbb

# stack v1.7.1 の動作
$ stack build
... --ghc-options bbb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc-options&lt;/code&gt; の内容が重複する場合は両方とも引数に与えられますが、後ろの値で上書きされるようなのでプロジェクト固有の設定が優先されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ~/.stack/config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-config&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ghc-options:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;quot;$everything&amp;quot;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;-dumpdir=./respect-stack&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に試してみると、以下のようになると思います。&lt;/p&gt;
&lt;pre class=&#34;sell&#34;&gt;&lt;code&gt;$ stack build -v
... --ghc-options -dumpdir=./respect-config --ghc-options -dumpdir=./respect-stack

$ ls  -l
...
drwxrwxr-x 5 guchi guchi 4096 10月 21 13:35 respect-stack
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3753&#34;&gt;Stack does not respect ghc-options in user config #3753&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3781&#34;&gt;Fix inheritance of category ghc-options from config.yaml #3753 #3781&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4089&#34;&gt;Have project ghc-options append to config.yaml ghc-options #3753&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはパッケージのサブライブラリをビルドする際に executables, test, benchmarks, libraries などと同様の方法でアナウンスを行うようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111/commits/4a4b63f59130bb66477d155dcb401d50fac02fab&#34;&gt;commit@4a4b63f59130bb66477d155dcb401d50fac02fab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドはサニティチェックの結果にかかわらず、生成された tarball の場所をアナウンスするようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4117&#34;&gt;Mention tarball earlier in sdist #4117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4112&#34;&gt;stack sdist fails when modules are exposed based on a flag in the cabal file #4112&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack setup&lt;/code&gt; コマンドの &lt;code&gt;--upgrade-cabal&lt;/code&gt; オプションは廃止されます。この機能は GHC 8.2 以降では動作しません。また、このフラグが実装された当初の動機は Stack がカスタムセットアップのためにスナップショットの &lt;code&gt;Cabal&lt;/code&gt; ライブラリを利用し始めたことでほとんど無くなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4118&#34;&gt;Deprecate the –upgrade-cabal flag (fixes #4070) #4118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;&lt;code&gt;stack setup --upgrade-cabal&lt;/code&gt; doesn’t work for Cabal-2.2.0.1 + ghc-8.2.2 #4070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たに namespaced template 機能が実装されたため、&lt;code&gt;stack templates&lt;/code&gt; コマンドは利用可能な全てのテンプレートの一覧を良い感じに表示できなくなりました。代わりに、テンプレートを見つける方法についての&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;ヘルプファイル&lt;/a&gt;をダウンロードし、表示します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4129&#34;&gt;Get stack templates help from Github file #4039 #4129&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;ビルドツールを &lt;code&gt;cabal-install&lt;/code&gt; と同様の方法で取り扱うようになりました。また、レガシーな &lt;code&gt;build-tools&lt;/code&gt; フィールドに対しては、ツールマップの中からビルドツールパッケージを調べるのではなく、ハードコードされたビルドツールのリストを利用します。この変更により Stack の動作は &lt;code&gt;cabal-install&lt;/code&gt; に近づいたため、いくつかのバグを回避し、最適化/遅延性の恩恵を得られる可能性があります。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;stack 1.7.1 still has problems finding build tools (“The program ‘happy’ is required”) #4125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4132&#34;&gt;Use a hard-coded tool dependency map (fixes #4125) #4132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/595&#34;&gt;Build-tools not detected when not using Stackage snapshot #595&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3178&#34;&gt;Stack cannot find happy during build #3178&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3249&#34;&gt;Extensible snapshots #3249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの低下を避けるため、Mustache テンプレートに (50kb を超える) 大きなファイルを適用できなくなりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4134&#34;&gt;Do not apply Mustache to large files (fixes #4133) #4134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;stack new is very slow at compiling Mustache templates #4133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; はデフォルトでパッケージに署名を行うようになりました。また、&lt;code&gt;--no-signature&lt;/code&gt; オプションで署名をスキップできます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートダウンロード時のネットワーク接続問題に備えて、事前にチェックを行うようになりました。もし、問題があればキャッシュ済みのテンプレートを利用します。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3850&#34;&gt;stack new requires network to work #3850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4173&#34;&gt;Use cached template if template download fails #4173&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;その他の改良点&#34;&gt;その他の改良点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 より前の Windows 環境では、ターミナルのデフォルト値が &lt;code&gt;--color=never&lt;/code&gt; となります。エミュレーションによる出力のみ ANSI カラーコードが利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4106&#34;&gt;Re #4091: Pre-Windows 10, default –color=never #4106&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Windows 環境では、デフォルトのターミナルを ‘mintty’ (false) として認識するように変更しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4015&#34;&gt;Windows: use ‘hIsTerminalDevice or isMinTTYHandle’ #4015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは &lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に &lt;code&gt;base&lt;/code&gt; が明示的に記載されているとき、警告を出すようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3940&#34;&gt;Warn when upgrading base #3940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、ビルドプランで達成不可能な &lt;code&gt;base&lt;/code&gt; バージョンが要求された際に、別の GHC バージョンを試すように提案するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3993&#34;&gt;Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;新たなサブコマンド &lt;code&gt;run&lt;/code&gt; が導入されました。このコマンドは &lt;code&gt;cabal run&lt;/code&gt; のように、指定された executable をビルド&amp;amp;実行します。executable が省略された場合は、プロジェクト内で最初に利用可能な executable が指定されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3952&#34;&gt;Introduce &lt;code&gt;stack run&lt;/code&gt; command line option #3952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/233&#34;&gt;Wishlist: &lt;code&gt;stack run&lt;/code&gt; #233&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-25-stack-run.html&#34;&gt;stack run コマンド – BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドは、依存関係が足りない旨を伝えるメッセージにパッケージの最新の cabal ファイルリビジョンハッシュを含めるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-1&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;こんな感じで表示されるようです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
  * Recommended action: try adding the following to your extra-deps in /home/thomas/github/stack/stack.yaml:
rio-0.1.2.0@sha256:cb2a65cee1c0450815002ca890633215e4544b5c1c9f7091a950142c6efe8f3f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;Add cabal-hash revision info when displaying recommended packages when failing to construct buildplan #4068&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3925&#34;&gt;Modify “recommended packages” output to include revision info #3925&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; コマンドに新しく &lt;code&gt;--tar-dir&lt;/code&gt; オプションを追加しました。このオプションにより指定したディレクトリに生成された tarball をコピーできるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3621&#34;&gt;3568 add tar files option to sdist #3621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3568&#34;&gt;Stack sdist option to place build artefacts elsewhere #3568&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/9a58d5bf5346bedb0d460335c7018c256591966d&#34;&gt;commit@9a58d5bf5346bedb0d460335c7018c256591966d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--interleaved-output&lt;/code&gt; オプションと &lt;code&gt;build.interleaved-output&lt;/code&gt; 設定値が導入されました。これにより、複数の並行ビルドの出力が &lt;code&gt;packagename&amp;gt;&lt;/code&gt; プレフィックス付きで同時に標準エラー出力にダンプされます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4097&#34;&gt;Add the interleaved-output option/config value #3225 #4097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;Add flag to print GHC output to stdout #3225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3508&#34;&gt;Report progress on STDOUT/STDERR during compilation of individual modules #3508&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの再接続戦略を exponential backoff に変更しました。これにより &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt; の問題が緩和されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4109&#34;&gt;Changed the default retry strategy #4109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;Stack does not retry effectively when S3 is being flaky. #3510&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.14/retry-0.7.7.0/Control-Retry.html#v:exponentialBackoff&#34;&gt;exponentialBackoff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; コマンドは &lt;code&gt;username/foo&lt;/code&gt; という形式で、&lt;code&gt;commercialstack&lt;/code&gt; 以外のリポジトリからテンプレートをダウンロードできるようになりました。また &lt;code&gt;github:&lt;/code&gt; という形式でプレフィックスを付けることでサービスを指定することもできます。現状は &lt;code&gt;github:&lt;/code&gt; の他に &lt;code&gt;gitlab:&lt;/code&gt; と &lt;code&gt;bitbucket:&lt;/code&gt; が利用可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4103&#34;&gt;4039 namespaced templates #4103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;Namespaced templates #4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html&#34;&gt;namespaced templates - BIGMOON Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitrev&lt;/code&gt; から &lt;code&gt;githash&lt;/code&gt; に切り替えました。このパッケージには &lt;code&gt;gitrev&lt;/code&gt; にマージされていないバグフィックスが含まれています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; を追加するファイルがわかりづらいため、ユーザ設定ファイルへのパスをエラーメッセージに含めるようにしました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;allow-newer in global-project doesn’t work #3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4127&#34;&gt;Point to user’s config.yaml when advising ‘allow-newer: true’ #4127&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; コマンドはビルド後ではなく、ビルド前にどのメインターゲットを読み込むか質問するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4138&#34;&gt;‘stack ghci’ now asks which main module to load before building #4138&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;hpack のバージョンを 0.29.0 に更新しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4151&#34;&gt;Bump to hpack 0.29 #4151&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC 8.4 以降のバージョンを利用したとき、自動的に Haddock へ &lt;code&gt;--quickjump&lt;/code&gt; オプションが渡されるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4163&#34;&gt;Pass –quickjump to Haddock for GHC 8.4 and later #4163&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hackage-base-url&lt;/code&gt; 設定オプションを利用することで、パッケージアップロード時の Hackage ベースURL に任意のURLを指定できるようになりました。(デフォルトは &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt; です)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4167&#34;&gt;Fix behavior of –no-signature to turn signing off #4167&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Nix 利用時に GHC のマイナーバージョンを省略した場合、メジャーブランチの最新のマイナーバージョンを自動的に利用するようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4189&#34;&gt;Do not hardcode GHC versions for Nixpkgs #4189&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; を繰り返し実行したときに &lt;code&gt;.o&lt;/code&gt; ファイルを無効化しなくなりました。これにより、&lt;code&gt;-fobject-code&lt;/code&gt; でコンパイルされた全てのモジュールは ghci を実行する度にキャッシュされます。 詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;Set cabal_macros.h work directory in stack ghci to something non-temporary #4038&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3344&#34;&gt;stack ghci recompiles all modules on every startup, even when invoked with “-fobject-code” or “–no-build” #3344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; の最後に改行が追加されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3983&#34;&gt;fixed: terminating is newline #3983&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;前回のリリースで &lt;code&gt;ghc-pkg&lt;/code&gt; コマンドの出力が &lt;code&gt;stderr&lt;/code&gt; に出力されてしまう問題が再発したので修正しました。現在の出力はとても静かになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4028&#34;&gt;Make ghc-pkg calls less noisy #4028&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1.7.1&lt;/code&gt; で導入された再コンパイルチェックの問題を修正し、回帰テストを追加しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4003&#34;&gt;4001 excess recompilation #4003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;–file-watch is watching test suites again #4001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; は internal library を含むパッケージの処理で internal libray に対応する間違ったパッケージを探し、モジュールの読み込みに失敗していました。この問題は現在修正済みで、ライブラリとサブライブラリが適切に追跡されるようにコードが変更されました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;&lt;code&gt;stack ghci&lt;/code&gt; does not recognise internal libraries #3926&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/3982&#34;&gt;Handle internal libraries in GHCi. #3982&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存していないパッケージを &lt;code&gt;stack build&lt;/code&gt; すると、internal library をビルドしていないのにも関わらず登録しようとするため、ビルドに失敗していました。この問題は internal library を常にビルドすることで解決しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4033&#34;&gt;Handle internal libs not listed as dependencies #4033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;Build fails with internal libraries that aren’t dependencies #3996&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;NixOS 環境では &lt;code&gt;--no-nix&lt;/code&gt; オプションの影響を受けなくなりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4021&#34;&gt;Allow Nix mode to be disabled under NixOS #4021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4002&#34;&gt;stack does not honor –no-nix under NixOS #4002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;RAM を大量に消費してしまう問題が再発していたので修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;Regression in 1.7.1 (compared to 1.6.5) in getPackageFiles RAM usage #4027&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4066&#34;&gt;Fix RAM usage upon big dump-hi files parsing #4066&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインの引数の順序によって動作が異なる問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;It should not matter if flags given before command or after #3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4067&#34;&gt;Change parsers to use &lt;code&gt;flag&#39;&lt;/code&gt; instead of &lt;code&gt;switch&lt;/code&gt; #4067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パッケージをアップロードする際の Hackage クレデンシャル保存プロンプトで、ユーザの入力前に表示されなければならないメッセージが入力後に表示されてしまっていた問題を修正しました。ghci のターゲット選択プロンプトでも同様の問題が発生していたので修正しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4063&#34;&gt;Flush after prompt #4063&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4162&#34;&gt;Stack Upload waits for confirmation BEFORE printing confirmation message #4162&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack solver&lt;/code&gt; コマンドで、PATH に &lt;code&gt;cabal&lt;/code&gt; が存在しない場合、ユーザに対して &lt;code&gt;stack install cabal-install&lt;/code&gt; の実行を促すためのメッセージが表示されるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4100&#34;&gt;Solver cabal install hint #4100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3841&#34;&gt;stack solver complains there’s no cabal in path. #3841&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; コマンドはサブライブラリを含むパッケージが executable, test, benchmark などの依存関係になっている場合でも、正しくビルドできるようになりました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解説-2&#34;&gt;解説&lt;/h4&gt;
&lt;p&gt;Cabal 2.0 から &lt;code&gt;internal Libraries&lt;/code&gt; が追加され、stack 側も対応したという感じです。&lt;/p&gt;
&lt;p&gt;例として以下のような &lt;code&gt;package.yaml&lt;/code&gt; があった場合&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# package.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test-internal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;internal-libraries:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;internal-foo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動生成される &lt;code&gt;cabal&lt;/code&gt; ファイルは以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           test-internal
version:        0.0.0
build-type:     Simple
cabal-version:  &amp;gt;= 2.0

library internal-foo
  other-modules:
      Paths_test_internal
  build-depends:
      base
  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態でビルドした結果は次のとおりです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# v1.7.1
$ stack build
Package has buildable sublibraries but no buildable libraries, I&amp;#39;m giving up
CallStack (from HasCallStack):
  error, called at src/Stack/Package.hs:280:30 in stack-1.7.1-JqFYW3fz7If7um4NzPRwPj:Stack.Package

# v1.9.1
$ stack build
test-internal-0.0.0: configure (internal-lib)
Configuring test-internal-0.0.0...
test-internal-0.0.0: build (internal-lib)
Preprocessing library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
Building library &amp;#39;internal-foo&amp;#39; for test-internal-0.0.0..
[1 of 1] Compiling Paths_test_internal ( .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/autogen/Paths_test_internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/Paths_test_internal.o )
ignoring (possibly broken) abi-depends field for packages
test-internal-0.0.0: copy/register
Installing internal library internal-foo in /home/guchi/Desktop/stack-191-working/test-internal/.stack-work/install/x86_64-linux/lts-12.14/8.4.3/lib/x86_64-linux-ghc-8.4.3/test-internal-0.0.0-6jijyMwb8IH16YEILzaUQW-internal-foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3787&#34;&gt;Internal libraries does not work if there’s no main library #3787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#sublibs&#34;&gt;Internal Libraries - Cabal document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sol/hpack#library-fields&#34;&gt;hpack Top-level fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;internal library に依存したテストスイートのカバレッジレポートで、サブライブラリが適切に処理されるようになりました。以前まではカバレッジレポートを生成するときにエラーとなっていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;Error running test coverage when tests depend on internal lbraries. #4105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スナップショット更新時にサブライブラリがプリコンパイルキャシュに追加されるようになりました。以前まではスナップショットにサブライブラリを含むパッケージが存在するようなスナップショットを更新するとビルドが壊れていました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4111&#34;&gt;Consistent handling of internal libraries #4111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;haddock-library’s internal attoparsec library cannot be found - broken package #4071&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Stack は &lt;code&gt;warning&lt;/code&gt; の代わりに適切な &lt;code&gt;error&lt;/code&gt; ログレベルでエラーメッセージをプリティプリントするようになりました。これにより self-executing scripts で runhaskell のプラン構築エラーがターミナルに出力されない問題も修正されます。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;#4114&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4114&#34;&gt;Fixes self-executing scripts not piping plan construction errors from runhaskell to terminal, issue #3942 #4114&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3942&#34;&gt;Self-executing scripts don’t pipe plan construction errors from runhaskell to terminal #3942&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Cabal の呼び出しに失敗した際に “While building Setup.hs” という間違ったメッセージが表示されていた問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4131&#34;&gt;Fix invalid “While building Setup.hs” #3934 #4131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;Invalid “While building Setup.hs” error message #3934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;release-notes&#34;&gt;Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically linked Linux bindists are back again, thanks to &lt;a href=&#34;https://github.com/nh2&#34;&gt;@nh2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We will be deleting the Ubuntu, Debian, CentOS, Fedora, and Arch package repos from &lt;code&gt;download.fpcomplete.com&lt;/code&gt; soon. These have been deprecated for over a year and have not received new releases, but were left in place for compatibility with older scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;major-changes&#34;&gt;Major changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade to Cabal 2.4
&lt;ul&gt;
&lt;li&gt;Note that, in this process, the behavior of file globbing has been modified to match that of Cabal. In particular, this means that for Cabal spec versions less than 2.4, &lt;code&gt;*.txt&lt;/code&gt; will match &lt;code&gt;foo.txt&lt;/code&gt;, but not &lt;code&gt;foo.2.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GHCJS&lt;/code&gt; support is being downgraded to ‘experimental’. A warning notifying the user of the experimental status of &lt;code&gt;GHCJS&lt;/code&gt; will be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;behavior-changes&#34;&gt;Behavior changes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;stack.yaml&lt;/code&gt; are now appended to &lt;code&gt;ghc-options&lt;/code&gt; from &lt;code&gt;config.yaml&lt;/code&gt;, whereas before they would be replaced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; will now announce when sublibraries of a package are being build, in the same way executables, tests, benchmarks and libraries are announced&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack sdist&lt;/code&gt; will now announce the destination of the generated tarball, regardless of whether or not it passed the sanity checks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--upgrade-cabal&lt;/code&gt; option to &lt;code&gt;stack setup&lt;/code&gt; has been deprecated. This feature no longer works with GHC 8.2 and later. Furthermore, the reason for this flag originally being implemented was drastically lessened once Stack started using the snapshot’s &lt;code&gt;Cabal&lt;/code&gt; library for custom setups. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4070&#34;&gt;#4070&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;With the new namespaced template feature, &lt;code&gt;stack templates&lt;/code&gt; is no longer able to meaningfully display a list of all templates available. Instead, the command will download and display a &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md&#34;&gt;help file&lt;/a&gt; with more information on how to discover templates. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build tools are now handled in a similar way to &lt;code&gt;cabal-install&lt;/code&gt;. In particular, for legacy &lt;code&gt;build-tools&lt;/code&gt; fields, we use a hard-coded list of build tools in place of looking up build tool packages in a tool map. This both brings Stack’s behavior closer into line with &lt;code&gt;cabal-install&lt;/code&gt;, avoids some bugs, and opens up some possible optimizations/laziness. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4125&#34;&gt;#4125&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mustache templating is not applied to large files (over 50kb) to avoid performance degredation. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4133&#34;&gt;#4133&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In case there is a network connectivity issue while trying to download a template, stack will check whether that template had been downloaded before. In that case, the cached version will be used. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3850&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-enhancements&#34;&gt;Other enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On Windows before Windows 10, –color=never is the default on terminals that can support ANSI color codes in output only by emulation&lt;/li&gt;
&lt;li&gt;On Windows, recognise a ‘mintty’ (false) terminal as a terminal, by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; issues a warning when &lt;code&gt;base&lt;/code&gt; is explicitly listed in &lt;code&gt;extra-deps&lt;/code&gt; of &lt;code&gt;stack.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; suggests trying another GHC version should the build plan end up requiring unattainable &lt;code&gt;base&lt;/code&gt; version.&lt;/li&gt;
&lt;li&gt;A new sub command &lt;code&gt;run&lt;/code&gt; has been introduced to build and run a specified executable similar to &lt;code&gt;cabal run&lt;/code&gt;. If no executable is provided as the first argument, it defaults to the first available executable in the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; missing dependency suggestions (on failure to construct a valid build plan because of missing deps) are now printed with their latest cabal file revision hash. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4068&#34;&gt;#4068&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new &lt;code&gt;--tar-dir&lt;/code&gt; option to &lt;code&gt;stack sdist&lt;/code&gt;, that allows to copy the resulting tarball to the specified directory.&lt;/li&gt;
&lt;li&gt;Introduced the &lt;code&gt;--interleaved-output&lt;/code&gt; command line option and &lt;code&gt;build.interleaved-output&lt;/code&gt; config value which causes multiple concurrent builds to dump to stderr at the same time with a &lt;code&gt;packagename&amp;gt;&lt;/code&gt; prefix. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3225&#34;&gt;#3225&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The default retry strategy has changed to exponential backoff. This should help with &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3510&#34;&gt;#3510&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack new&lt;/code&gt; now allows template names of the form &lt;code&gt;username/foo&lt;/code&gt; to download from a user other than &lt;code&gt;commercialstack&lt;/code&gt; on Github, and can be prefixed with the service &lt;code&gt;github:&lt;/code&gt;, &lt;code&gt;gitlab:&lt;/code&gt;, or &lt;code&gt;bitbucket:&lt;/code&gt;. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4039&#34;&gt;#4039&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch to &lt;code&gt;githash&lt;/code&gt; to include some unmerged bugfixes in &lt;code&gt;gitrev&lt;/code&gt; Suggestion to add &lt;code&gt;&#39;allow-newer&#39;: true&lt;/code&gt; now shows path to user config file where this flag should be put into &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3685&#34;&gt;#3685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now asks which main target to load before doing the build, rather than after&lt;/li&gt;
&lt;li&gt;Bump to hpack 0.29.0&lt;/li&gt;
&lt;li&gt;With GHC 8.4 and later, Haddock is given the &lt;code&gt;--quickjump&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;It is possible to specify the Hackage base URL to upload packages to, instead of the default of &lt;code&gt;https://hackage.haskell.org/&lt;/code&gt;, by using &lt;code&gt;hackage-base-url&lt;/code&gt; configuration option.&lt;/li&gt;
&lt;li&gt;When using Nix, if a specific minor version of GHC is not requested, the latest minor version in the given major branch will be used automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now does not invalidate &lt;code&gt;.o&lt;/code&gt; files on repeated runs, meaning any modules compiled with &lt;code&gt;-fobject-code&lt;/code&gt; will be cached between ghci runs. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4038&#34;&gt;#4038&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.stack/config.yaml&lt;/code&gt; and &lt;code&gt;stack.yaml&lt;/code&gt; terminating by newline&lt;/li&gt;
&lt;li&gt;The previous released caused a regression where some &lt;code&gt;stderr&lt;/code&gt; from the &lt;code&gt;ghc-pkg&lt;/code&gt; command showed up in the terminal. This output is now silenced.&lt;/li&gt;
&lt;li&gt;A regression in recompilation checking introduced in v1.7.1 has been fixed. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4001&#34;&gt;#4001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; on a package with internal libraries was erroneously looking for a wrong package corresponding to the internal library and failing to load any module. This has been fixed now and changes to the code in the library and the sublibrary are properly tracked. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3926&#34;&gt;#3926&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For packages with internal libraries not depended upon, &lt;code&gt;stack build&lt;/code&gt; used to fail the build process since the internal library was not built but it was tried to be registered. This is now fixed by always building internal libraries. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3996&#34;&gt;#3996&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-nix&lt;/code&gt; was not respected under NixOS&lt;/li&gt;
&lt;li&gt;Fix a regression which might use a lot of RAM. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4027&#34;&gt;#4027&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Order of commandline arguments does not matter anymore. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3959&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When prompting users about saving their Hackage credentials on upload, flush to stdout before waiting for the response so the prompt actually displays. Also fixes a similar issue with ghci target selection prompt.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;cabal&lt;/code&gt; is not on PATH, running &lt;code&gt;stack solver&lt;/code&gt; now prompts the user to run &lt;code&gt;stack install cabal-install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build&lt;/code&gt; now succeeds in building packages which contain sublibraries which are dependencies of executables, tests or benchmarks but not of the main library. See &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3959&#34;&gt;#3787&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now properly considered for coverage reports when the test suite depends on the internal library. Before, stack was erroring when trying to generate the coverage report, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4105&#34;&gt;#4105&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sublibraries are now added to the precompiled cache and recovered from there when the snapshot gets updated. Previously, updating the snapshot when there was a package with a sublibrary in the snapshot resulted in broken builds. This is now fixed, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4071&#34;&gt;#4071&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[#4114] Stack pretty prints error messages with proper &lt;code&gt;error&lt;/code&gt; logging level instead of &lt;code&gt;warning&lt;/code&gt; now. This also fixes self-executing scripts not piping plan construction errors from runhaskell to terminal (issue #3942).&lt;/li&gt;
&lt;li&gt;Fix invalid “While building Setup.hs” when Cabal calls fail. See: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3934&#34;&gt;#3934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack upload&lt;/code&gt; signs the package by default, as documented. &lt;code&gt;--no-signature&lt;/code&gt; turns the signing off. &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3739&#34;&gt;#3739&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-10-20T19:31:17.645+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-10-14-collect-stack-templates.html</id><title type="text">stack-templates を集める with GraphQL</title><updated>2018-10-14T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-10-14-collect-stack-templates.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;stack-templates を集める with GraphQL&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-10-14&#34; itemprop=&#34;datePublished&#34;&gt;
        Oct 14, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/GraphQL.html&#34;&gt;GraphQL&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Haskell Day の仕込みパート1です(2があるかは知らない)． stack の次期バージョン v1.9 で追加される namespaced template を試してみました．&lt;/p&gt;
&lt;p&gt;ちなみに，現在 v1.9 はプレリリースになったので，下記コマンドで簡単にアップデートできます．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack upgrade --binary-version 1.9.0.1&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;namespaced-template&#34;&gt;namespaced template&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack new&lt;/code&gt; で指定できるテンプレートを，GitHub などのオンラインからも取ってこれるようになった機能． 詳しくは開発段階からキャッチアップしてる e-bigmoon さんの記事を読むと良い．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html&#34;&gt;namespaced templates - BIGMOON haskellers blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作ってみた&#34;&gt;作ってみた&lt;/h3&gt;
&lt;p&gt;GitHub などで &lt;code&gt;stack-templates&lt;/code&gt; という名前のリポジトリを作り，&lt;code&gt;hsfiles&lt;/code&gt; という拡張子のテンプレートファイルをトップレベルに置く． 今回ぼくは &lt;a href=&#34;https://github.com/matsubara0507/stack-templates&#34;&gt;matsubara0507/stack-templates&lt;/a&gt; というリポジトリを作り，２つ程作ってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get-opt-cli.hsfiles&lt;/code&gt; : &lt;a href=&#34;http://hackage.haskell.org/package/base/docs/System-Console-GetOpt.html&#34;&gt;&lt;code&gt;System.Console.GetOpt&lt;/code&gt;&lt;/a&gt; を用いたCLIのテンプレート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optparse-applicative-cli.hsfiles&lt;/code&gt; : &lt;a href=&#34;http://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を用いたCLIのテンプレート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どちらも，よくCLIを作るときの書き方をテンプレートとして起こしたもの． 普段は &lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; と &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; を使っているので，単純に optparse-applicative などを使ったテンプレートという訳でもない．&lt;/p&gt;
&lt;h3 id=&#34;テストする&#34;&gt;テストする&lt;/h3&gt;
&lt;p&gt;できれば，テンプレートを &lt;code&gt;stack new&lt;/code&gt; して &lt;code&gt;stack build&lt;/code&gt; した時点ではコンパイルを通ってほしい． ということで &lt;code&gt;stack new&lt;/code&gt; して &lt;code&gt;stack build&lt;/code&gt; を試してくれるテストを &lt;a href=&#34;https://github.com/matsubara0507/stack-templates/blob/7abc95184241c2df9f81ec1a45f9a662a98db05a/.travis.yml&#34;&gt;TravisCI&lt;/a&gt; に書いた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;matrix:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; TEMPLATE=&amp;quot;get-opt-cli&amp;quot; ARGS=&amp;quot;--resolver lts-12&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;compiler:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;: #stack 8.4.3&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;addons:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;apt:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;libgmp-dev&lt;span class=&#34;kw&#34;&gt;]}}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; TEMPLATE=&amp;quot;optparse-applicative-cli&amp;quot; ARGS=&amp;quot;--resolver lts-12&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;compiler:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;: #stack 8.4.3&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;addons:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;apt:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;libgmp-dev&lt;span class=&#34;kw&#34;&gt;]}}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;before_install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;co&#34;&gt;# install stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack new sample &lt;span class=&#34;st&#34;&gt;&amp;quot;./$TEMPLATE&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  set -ex&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  cd sample&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;  stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;  set +ex&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;kw&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;  set -ex&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;  stack --no-terminal $ARGS test --bench --no-run-benchmarks --no-haddock-deps&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;  set +ex&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates/blob/879f95dc44b24201bc64fcf8f4b9e2192c23dad4/test-templates.hs&#34;&gt;commercialhaskell/stack-templates でもテストは書いてある&lt;/a&gt;がぼくのはすごいシンプルだ．&lt;/p&gt;
&lt;h2 id=&#34;stack-templates-を集める&#34;&gt;stack-templates を集める&lt;/h2&gt;
&lt;p&gt;さて，これだけでは完全に e-bigmoon さんの劣化記事だ． なので，stack-templates を GitHub から集めてくる CLI ツールを作ることにした．&lt;/p&gt;
&lt;p&gt;試したところ，GitHub の検索で &lt;code&gt;stack-template in:name&lt;/code&gt; と検索すれば，それなりにヒットすることがわかった(間違いも多いが)． なので，ざっくりとした手順は:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;検索系の GitHub API を叩く&lt;/li&gt;
&lt;li&gt;stack-templates という名前のリポジトリの &lt;code&gt;*.hsfiles&lt;/code&gt; というファイルだけ抽出&lt;/li&gt;
&lt;li&gt;それらを出力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここで GitHub API v3 (RESTful API)を利用すると，リポジトリのファイル群を取得するのに検索系の API を叩いてから，各リポジトリの API を叩く必要がある． それは面倒だ． なので，ここ数年注目を集めている(？) GraphQL API (GitHub API v4)を試してみることにした．&lt;/p&gt;
&lt;h3 id=&#34;graphql&#34;&gt;GraphQL&lt;/h3&gt;
&lt;p&gt;ちょうどこの前に，友人から「GraphQL はいいぞ，API をなんども叩く必要がない．」と紹介されたので試してみた．&lt;/p&gt;
&lt;p&gt;GitHub の API では &lt;code&gt;api.github.com/graphql&lt;/code&gt; というエンドポイントに対し，POST メソッドでクエリを送信する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;curl&lt;/span&gt; \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;  -H &lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization: bearer token&amp;quot;&lt;/span&gt; \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;  -X POST \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  -d &lt;span class=&#34;st&#34;&gt;&amp;quot;{ &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; ... &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; }&amp;quot;&lt;/span&gt; \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  https://api.github.com/graphql&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt; のところにクエリを記述する． クエリは簡単な DSL のようになっており，クエリによってどんな形の JSON が返ってくるか(型のようなもの)やどんな値が返ってくるかが決まる． 例えば &lt;code&gt;stack-template in:name&lt;/code&gt; 検索してヒットしたリポジトリの名前だけを取得してみよう． その場合は次のようなクエリを書く．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query{
  search(query: &amp;quot;stack-template in:name&amp;quot;, type: REPOSITORY, first: 2) {
    repositoryCount,
    edges{
      node{ ... on Repository{ nameWithOwner } }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; は検索にヒットした最初の2つを返すという意味． 上限は 100 で，&lt;code&gt;first&lt;/code&gt; ないしは逆の意味の &lt;code&gt;last&lt;/code&gt; のどちらかは指定をする必要がある(そういうエラーが返ってくる)． &lt;code&gt;repositoryCount&lt;/code&gt; は検索でヒットしたリポジトリの総数で，&lt;code&gt;edges&lt;/code&gt; のところはリポジトリの &lt;code&gt;nameWithOwner&lt;/code&gt; を返すように指定している． このように &lt;code&gt;{}&lt;/code&gt; の中ではカンマ区切りで，返す JSON の形を指定できる． 具体的に何が指定できるかは &lt;a href=&#34;https://developer.github.com/v4/query/&#34;&gt;GitHub API v4 のドキュメント&lt;/a&gt;を見ると良い． 試しに curl で叩いてみる(クエリ内の &lt;code&gt;&amp;quot;&lt;/code&gt; をエスケープすることを忘れずに):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -H &amp;quot;Authorization: bearer XXX&amp;quot; -X POST -d &amp;quot;{ \&amp;quot;query\&amp;quot;: \&amp;quot; ... \&amp;quot; }&amp;quot; https://api.github.com/graphql
{&amp;quot;data&amp;quot;:{&amp;quot;search&amp;quot;:{&amp;quot;repositoryCount&amp;quot;:76,&amp;quot;edges&amp;quot;:[{&amp;quot;node&amp;quot;:{&amp;quot;nameWithOwner&amp;quot;:&amp;quot;Azure/AzureStack-QuickStart-Templates&amp;quot;}},{&amp;quot;node&amp;quot;:{&amp;quot;nameWithOwner&amp;quot;:&amp;quot;commercialhaskell/stack-templates&amp;quot;}}]}}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Connection とか Fields とかの用語については自分もよくわかってないので自分で調べてください． 今のところ，雰囲気で使ってる(笑)&lt;/p&gt;
&lt;h3 id=&#34;ファイルを集める&#34;&gt;ファイルを集める&lt;/h3&gt;
&lt;p&gt;さて，前述した結果(リポジトリ名)だけが欲しいなら GitHub API v3 でも十分だ． さらに，ファイルも取得してみよう． &lt;a href=&#34;https://developer.github.com/v4/object/repository/&#34;&gt;Repository のドキュメント&lt;/a&gt; を眺めると &lt;code&gt;object&lt;/code&gt; という Field がある． 察するに，リポジトリの任意のブランチ(&lt;code&gt;expression&lt;/code&gt; で指定したもの)のコミットオブジェクトを返してくれるのだろう． (たぶん)stack-templates は全部 master が前提なので，master のコミットオブジェクトを取ってくる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;... on Repository{
  nameWithOwner,
  object(expression:&amp;quot;master&amp;quot;){
    ... on Commit { }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに &lt;code&gt;... on Commit&lt;/code&gt; というのは Inline Fragments と呼ばれるもので，object の型(サブタイプ？)が &lt;code&gt;Commit&lt;/code&gt; だった場合に &lt;code&gt;Commit{}&lt;/code&gt; 以下の Field を返すそうだ． git オブジェクトなので他にも &lt;code&gt;Tree&lt;/code&gt; や &lt;code&gt;Blob&lt;/code&gt; がある．&lt;/p&gt;
&lt;p&gt;さて，あとは git オブジェクトの知識があれば簡単にかける． コミットオブジェクトにはツリーオブジェクト，要するにトップレベルのディレクトリのハッシュが記載されているので&lt;a href=&#34;https://developer.github.com/v4/object/commit/&#34;&gt;ドキュメント&lt;/a&gt;からそれっぽいのを見つける． ツリーオブジェクトには，そのディレクトリに含まれるブロブオブジェクト(ファイル)とツリーオブジェクト(ディレクトリ)のハッシュが記載されてる． stack-templates は(今のところ)トップレベルに &lt;code&gt;*.hsfiles&lt;/code&gt; を置かないといけないので，トップレベルのオブジェクトたちの名前を取得しよう:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;... on Repository{
  nameWithOwner,
  object(expression:&amp;quot;master&amp;quot;){
    ... on Commit { tree{ entries{ name, type } } }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; には &lt;code&gt;blob&lt;/code&gt; やら &lt;code&gt;tree&lt;/code&gt; やらが入る． これで，検索にヒットした全てのリポジトリから &lt;code&gt;master&lt;/code&gt; のトップレベルにあるファイルを取得するクエリが出来上がった．&lt;/p&gt;
&lt;h3 id=&#34;ページネーション&#34;&gt;ページネーション&lt;/h3&gt;
&lt;p&gt;今のところ，検索にヒットするリポジトリ数は76個なので &lt;code&gt;first: 100&lt;/code&gt; とすれば全て取得できるが，今後ヒット数が100を超えたときようにページネーションの仕組みを整えておく． やり方は簡単で，&lt;code&gt;search&lt;/code&gt; Connection のところで &lt;a href=&#34;&#34;&gt;&lt;code&gt;pageInfo&lt;/code&gt;&lt;/a&gt; という Field を追加する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;search(query: &amp;quot;stack-template in:name&amp;quot;, type: REPOSITORY, first: 1) {
  repositoryCount,
  pageInfo{
    endCursor,
    hasNextPage
  },
  edges{
    node{ ... on Repository{ .... } }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hasNextPage&lt;/code&gt; は次のページが存在するかどうかを真偽値で返してくれる． &lt;code&gt;endCursor&lt;/code&gt; はこのページの最後を表すハッシュ値？で，&lt;code&gt;search&lt;/code&gt; Connection の引数(&lt;code&gt;type&lt;/code&gt; とか &lt;code&gt;first&lt;/code&gt; とかのとこ)に &lt;code&gt;after&lt;/code&gt; で指定することで，それ以降の結果を取ってくる． このような &lt;code&gt;pageInfo&lt;/code&gt; の情報さえあれば，プログラム内でループさせることは容易だろう．&lt;/p&gt;
&lt;h3 id=&#34;まとめると&#34;&gt;まとめると&lt;/h3&gt;
&lt;p&gt;次のようなクエリになった:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query{
  search(query: &amp;quot;stack-template in:name&amp;quot;, type: REPOSITORY, first: 100) {
    repositoryCount,
    pageInfo{
      endCursor,
      hasNextPage
    },
    edges{
      node{ ... on Repository{
        nameWithOwner,
        object(expression:&amp;quot;master&amp;quot;){
          ... on Commit { tree{ entries{ name, type } } }
        }
      } }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを curl の引数に与えて叩くだけで 100 個分のリポジトリの全てのトップレベルファイル群を取得できる．&lt;/p&gt;
&lt;h3 id=&#34;stack-tpls&#34;&gt;stack-tpls&lt;/h3&gt;
&lt;p&gt;実際に作った CLI ツールは &lt;a href=&#34;https://github.com/matsubara0507/stack-tpls&#34;&gt;&lt;code&gt;matsubara0507/stack-tpls&lt;/code&gt;&lt;/a&gt; というリポジトリに置いてある． 使い方は README に書いてある． 一覧を取得するには &lt;code&gt;stack-tpls --list&lt;/code&gt; と打てば良い．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack-tpls --list
github:commercialhaskell/chrisdone.hsfiles
github:commercialhaskell/foundation.hsfiles
 .
 .
 .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この結果を &lt;code&gt;stack new&lt;/code&gt; の引数に与えることでそのまま利用できる． また，テンプレートの中身を確認したい場合は，&lt;code&gt;stack-tpls github:commercialhaskell/chrisdone.hsfiles&lt;/code&gt; と引数に与えることで Raw を取ってきてくれる． リンクだけが欲しい場合は &lt;code&gt;--link&lt;/code&gt; オプションを指定すると良い．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack-tpls --link github:commercialhaskell/rio.hsfiles
https://github.com/commercialhaskell/stack-templates/blob/master/rio.hsfiles&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo&#34;&gt;ToDo&lt;/h3&gt;
&lt;p&gt;一週間ほど前の思いつきからの突貫で作ったのでイロイロと抜けてる箇所があって:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーハンドリングが雑&lt;/li&gt;
&lt;li&gt;GitLab と BitBucket には対応していない&lt;/li&gt;
&lt;li&gt;GraphQL の使い方がエレガントじゃない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に最後のがすごい気になっていて，現状は完全に文字列を埋め込んでいるだけなのだ． できれば，強力な型システムを利用した GitHub GraphQL Client ライブラリを作りたい(なんか昔に Haskell-jp で話題に上がったなぁ)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;GraphQL，クライアント側に取ってすごい便利．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/tech-book-fest-5.html</id><title type="text">技術書典 5 での Haskell 関連サークルのまとめ</title><updated>2018-10-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/tech-book-fest-5.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;来たる&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日（月・祝）に池袋にて技術系同人誌即売会「技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;」が開催されます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を題材にした同人誌もいくつかあるようですのでまとめてみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;技術書典とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-a-la-carte-vol.1&#34; title=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;矢澤にこ先輩といっしょに代数！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;それでは当日に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;技術書典とは？&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/tech-book-fest-5-banner.png&#34; alt=&#34;技術書典 5 バナー&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（バナー画像は技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;サイトよりの引用です。）&lt;/p&gt;
&lt;p&gt;技術書典とは技術系同人誌即売会としておそらく日本最大のもので、今回で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回目の開催となります。（ニコニコ超会議内での超技術書典があったのでナンバリングがずれています。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05&#34;&gt;サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.techbookfest.org/&#34;&gt;ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/techbookfest&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは秋葉原での開催でしたが、今回はなんと場所を&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;倍の広さに拡張して池袋で開催されます。&lt;/p&gt;
&lt;p&gt;それにともないサークル数もどどんと&lt;span class=&#34;ascii&#34;&gt;470&lt;/span&gt;超となり、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;サークル&lt;span class=&#34;ascii&#34;&gt;45&lt;/span&gt;秒で回っても全サークルは見て回れないことになります。&lt;/p&gt;
&lt;p&gt;事前準備の重要性が高まった今回、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;向けに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;サークルをまとめてみました。&lt;/p&gt;
&lt;h1 id=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/32370012&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#data-a-la-carte-vol.1&#34; title=&#34;data-a-la-carte-vol.1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
あと技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;に、鴨川書房というサークル名で合同本を出品します。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による&lt;span class=&#34;ascii&#34;&gt;NN&lt;/span&gt;実装&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://twitter.com/lotz84_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;lotz84_&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@lotz84_&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; や、&lt;span class=&#34;ascii&#34;&gt;FPGA&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;auto encoder&lt;/span&gt;実装に関する苦労話等が掲載される予定です。ぜひに🙏……
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1027501210494853120?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
形態素解析ライブラリ&lt;span class=&#34;ascii&#34;&gt;nagisa&lt;/span&gt;については，技術書典の合同本に寄稿してもらえるよう作成者に依頼中なので興味ある方は是非&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;表紙は鋭意作成中&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 &lt;a href=&#34;https://t.co/zUtngAS23t&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/zUtngAS23t&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1042018372207108099?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;268&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥2500&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/09/techbookfest5/&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代数的数（整数係数多項式の根として表される数）を実装するためのアルゴリズムを解説します。代数的数を使うと、ルートを含むような数に関して、浮動小数点数の誤差に煩わされることなく正確な演算が行えます。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によるサンプルコードを掲載しています。&lt;/p&gt;
&lt;p&gt;この本は、&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;連載していた「週刊 代数的実数を作る」 &lt;span class=&#34;ascii&#34;&gt;https://miz-ar.info/math/algebraic-real/&lt;/span&gt; の書籍化です。本文の加筆修正の他、「付録&lt;span class=&#34;ascii&#34;&gt;A&lt;/span&gt; ユークリッドの互除法と拡張された互除法」「付録&lt;span class=&#34;ascii&#34;&gt;B&lt;/span&gt; 部分分数分解」を追加しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt;で「代数的数を作る 多項式の根と因数分解のアルゴリズム」を頒布します。よろしくお願いします。 &lt;a href=&#34;https://t.co/HkLF1YFDuN&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/HkLF1YFDuN&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/V17ZIj2Iub&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/V17ZIj2Iub&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— だめぽラボ&lt;span class=&#34;ascii&#34;&gt;@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;mod_poppo&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mod_poppo&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/mod_poppo/status/1045885679232737281?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/h1&gt;
&lt;p&gt;私のサークルです。新刊落としました……&lt;/p&gt;
&lt;h2 id=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;28&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doujin.kakkun61.com/procedural-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://doujin.kakkun61.com/procedural-haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;での手続きプログラミングの側面について解説します。&lt;/p&gt;
&lt;p&gt;対象読者 &lt;span class=&#34;ascii&#34;&gt;- Haskell&lt;/span&gt;入門書程度が読める &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 特に読めるが書こうとすると悩む人に読んでほしいです &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミングのプログラマー &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 厳密に本書を読むためには&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を読めた方がよいですが、手続きプログラミングですのでプログラマーなら雰囲気で読めると思います&lt;/p&gt;
&lt;p&gt;書かれてあること &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 書き換え可能な変数 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミング的な制御構造 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 配列 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; サンプルプログラム &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続き的な実装と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;的な実装の対比&lt;/p&gt;
&lt;p&gt;電子版（&lt;span class=&#34;ascii&#34;&gt;PDF&lt;/span&gt;）はこちらで販売中です。 &lt;span class=&#34;ascii&#34;&gt;https://kakkun61.booth.pm/items/829369&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;商業誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;76&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://nextpublishing.jp/book/9979.html&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書！】&lt;/p&gt;
&lt;p&gt;本書は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書レベルの知識をもつ読者を対象とした、ウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書です。比較的学習コストの高い&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;ですが、本書を通じて&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の基本的な知識と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのウェブアプリケーション開発に挑んで見ましょう！ 〈本書の対象読者〉 &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書は既に読みこなしているプログラマ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でウェブアプリを作ってみたいプログラマ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;出版社ページ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみにこんな本を作るつもりでした。欲しい方いらっしゃったら次で書けとお伝えください。はげみになります。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;にサークル「趣味はデバッグ……」として参加申込をしました！ &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; 技術書典 &lt;a href=&#34;https://t.co/nD4eBo9622&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/nD4eBo9622&lt;/span&gt;&lt;/a&gt; 「自作静的型付け言語を作ってそれに対して型推論する方法を解説する」書籍を作るぞ！
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;kakkun61@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;61 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;kakkun61&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@kakkun61&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/kakkun61/status/1009271813107474432?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;矢澤にこ先輩といっしょに代数！&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;84&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1000&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://aiya000.github.io/posts/2018-09-12-techbookfest5.html&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゆるふわにこまき数学！&lt;/p&gt;
&lt;p&gt;以下のような人に向けて、頒布します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学・代数の雰囲気をゆるく知りたい&lt;/li&gt;
&lt;li&gt;軽い&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知りたい&lt;/li&gt;
&lt;li&gt;なんでもいいから技術系にこまきが読みたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;の「か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt;」で、矢澤にこ先輩が簡単な&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で代数（半群・モノイド・群・環・体）を教えてくれる本を頒布します。&lt;br&gt;よろしくお願いします🐕&lt;a href=&#34;https://t.co/KBFxqX69m3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/KBFxqX69m3&lt;/span&gt;&lt;/a&gt;&lt;br&gt;☝サークルページ&lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B85?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/HvD5ql4gFl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/HvD5ql4gFl&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— あいや🤘🙄🤘技術書典&lt;span class=&#34;ascii&#34;&gt;5@&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;public_ai000ya&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@public_ai000ya&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/public_ai000ya/status/1045946096327962624?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでは当日に&lt;/h1&gt;
&lt;p&gt;当日は安全に配慮しつつ楽しんでいきましょう！！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1000&lt;/span&gt;円札と&lt;span class=&#34;ascii&#34;&gt;500&lt;/span&gt;円玉の準備はしっかりとね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html</id><title type="text">time パッケージの使い方</title><updated>2018-09-17T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell で時間や日付を扱う際に良く利用されるのは &lt;a href=&#34;https://www.stackage.org/lts-12.9/package/time&#34;&gt;time&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;このパッケージが使いやすいかどうかは人それぞれですが、使い方を知っておくと便利なのでよく使いそうな関数を簡単に解説しようと思います。&lt;/p&gt;
&lt;p&gt;これからの例は以下のコマンドを実行していると仮定して話を進めます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack repl --package time --resolver lts-12.9
$ import Data.Time&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;time-パッケージのモジュール構造&#34;&gt;Time パッケージのモジュール構造&lt;/h2&gt;
&lt;p&gt;基本的には &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time.html&#34;&gt;Data.Time&lt;/a&gt; を import して使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data.Time は以下のモジュールを再エクスポートしています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;モジュール名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html&#34;&gt;Data.Time.Clock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全然使わないので良くわからない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-LocalTime.html&#34;&gt;Data.Time.LocalTime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日本の現在時刻を取得など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html&#34;&gt;Data.Time.Format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力の整形&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;rio-を利用している場合&#34;&gt;rio を利用している場合&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/lts-12.9/package/rio&#34;&gt;rio&lt;/a&gt; を利用している場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/rio-0.1.5.0/RIO-Time.html&#34;&gt;RIO.Time&lt;/a&gt; を import します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Time&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;data.time.localtime&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;現在時刻を取得する場合にこのモジュールを使います。現在時刻を取得したいからと言って &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:getCurrentTime&#34;&gt;getCurrentTime&lt;/a&gt; を利用すると日本時間にならないので注意してください。&lt;/p&gt;
&lt;h3 id=&#34;getzonedtime&#34;&gt;getZonedTime&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンに応じた現在時刻を返します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getZonedTime
getZonedTime :: IO ZonedTime

&amp;gt; getZonedTime
2018-09-17 13:41:05.512522063 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;getcurrenttimezone&#34;&gt;getCurrentTimeZone&lt;/h3&gt;
&lt;p&gt;システムのタイムゾーンを取得します。このタイムゾーンに基づいて &lt;code&gt;getZonedTime&lt;/code&gt; が計算されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t getCurrentTimeZone
getCurrentTimeZone :: IO TimeZone

&amp;gt; getCurrentTimeZone
JST&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zonedtimetoutc&#34;&gt;zonedTimeToUTC&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ZonedTime&lt;/code&gt; を &lt;code&gt;UTCTime&lt;/code&gt; に変換するために使います。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t zonedTimeToUTC
zonedTimeToUTC :: ZonedTime -&amp;gt; UTCTime

&amp;gt; zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 04:41:27.907476307 UTC&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;utctozonedtime&#34;&gt;utcToZonedTime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zonedTimeToUTC&lt;/code&gt; の逆で &lt;code&gt;UTCTime&lt;/code&gt; を &lt;code&gt;ZonedTime&lt;/code&gt; に変換する関数です。タイムゾーンのための引数を余分に取ります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t utcToZonedTime
utcToZonedTime :: TimeZone -&amp;gt; UTCTime -&amp;gt; ZonedTime

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; getCurrentTime
2018-09-17 13:41:37.955641567 JST&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日後の時間を計算するには&#34;&gt;1日後の時間を計算するには？&lt;/h2&gt;
&lt;p&gt;ここで、取得した時間の1日後を計算してみましょう。&lt;/p&gt;
&lt;p&gt;そのためには Data.Time.Clock で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:addUTCTime&#34;&gt;addUTCTime&lt;/a&gt; を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addUTCTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数に &lt;code&gt;NominalDiffTime&lt;/code&gt; という謎の型を取りますが、&lt;code&gt;nominalDay&lt;/code&gt; の実装を見れば &lt;code&gt;60 * 60 * 24&lt;/code&gt; っぽいことがわかるので、そんな感じで値を作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;nominalDay ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NominalDiffTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;nominalDay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;86400&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、上記の実装でなぜ &lt;code&gt;NominalDiffTime&lt;/code&gt; の値になるかと言うと、&lt;code&gt;NominalDiffTime&lt;/code&gt; は &lt;code&gt;Num&lt;/code&gt; クラスのインスタンスになっているため、自動的に &lt;code&gt;fromInteger&lt;/code&gt; が呼ばれて変換されるという仕組みです。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。1日後を計算してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime nominalDay . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime
2018-09-17 10:32:56.880362453 UTC

&amp;gt; getZonedTime
2018-09-17 13:49:09.279378323 JST

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-18 13:49:16.211737218 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に1時間後も計算してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; t = addUTCTime (60 * 60) . zonedTimeToUTC &amp;lt;$&amp;gt; getZonedTime

&amp;gt; getZonedTime
2018-09-17 13:49:33.169797528 JST

&amp;gt; t
2018-09-17 05:49:36.757498845 UTC

&amp;gt; utcToZonedTime &amp;lt;$&amp;gt; getCurrentTimeZone &amp;lt;*&amp;gt; t
2018-09-17 14:49:40.930944714 JST&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上手くいってますね！&lt;/p&gt;
&lt;h2 id=&#34;data.time.localtime-1&#34;&gt;Data.Time.LocalTime&lt;/h2&gt;
&lt;p&gt;時刻の取得・計算ができたら、あとは整形して出力するだけです！&lt;/p&gt;
&lt;p&gt;Data.Time.LocalTime モジュールの関数を使って出力を整形してみましょう！&lt;/p&gt;
&lt;h3 id=&#34;formattime&#34;&gt;formatTime&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;formatTime&lt;/a&gt; 関数の使い方がわかれば、任意の形式で出力できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t formatTime
formatTime :: FormatTime t =&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; t -&amp;gt; String&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで &lt;code&gt;FormatTime t&lt;/code&gt; の &lt;code&gt;t&lt;/code&gt; は &lt;code&gt;UTCTime&lt;/code&gt; や &lt;code&gt;ZonedTime&lt;/code&gt;、&lt;code&gt;Day&lt;/code&gt; などの型が使えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;formatTime ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型に応じて第三引数が変わるということです。&lt;/p&gt;
&lt;p&gt;実際に使えばすぐに慣れます。(第一引数の値は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:defaultTimeLocale&#34;&gt;defaultTimeLocale&lt;/a&gt; を指定しておけば良いのですが、自分でカスタマイズしたものを使うこともあります)&lt;/p&gt;
&lt;p&gt;第二引数がフォーマット文字列なので、空文字列を与えれば当然結果も空になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フォーマットの指定方法については &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime&#34;&gt;haddock&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%D&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%x&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;09/17/18&amp;quot;

&amp;gt; formatTime defaultTimeLocale &amp;quot;%Y/%m/%d-%T&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018/09/17-13:52:21&amp;quot;

&amp;gt; formatTime defaultTimeLocale rfc822DateFormat &amp;lt;$&amp;gt; getZonedTime
&amp;quot;Sun, 16 Sep 2018 19:53:10 JST&amp;quot;

&amp;gt; formatTime defaultTimeLocale (iso8601DateFormat Nothing) &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-16&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文字列をパーズして-zonedtime-や-day-の値を作る&#34;&gt;文字列をパーズして ZonedTime や Day の値を作る&lt;/h2&gt;
&lt;p&gt;ここまでは現在時刻を元に時刻の計算や出力結果の整形を行いました。&lt;/p&gt;
&lt;p&gt;しかし、実際のプログラムでは文字列をパーズして &lt;code&gt;ZonedTime&lt;/code&gt; や &lt;code&gt;Day&lt;/code&gt; の値に変換したいこともあるでしょう。そのような場合は &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:parseTimeM&#34;&gt;parseTimeM&lt;/a&gt; を使うと便利です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; :t parseTimeM
parseTimeM
  :: (Monad m, ParseTime t) =&amp;gt;
     Bool -&amp;gt; TimeLocale -&amp;gt; String -&amp;gt; String -&amp;gt; m t&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;型がわかりづらいですが、具体的にはこんな型で利用することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Day&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseTimeM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ZonedTime&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一引数は &lt;strong&gt;空白&lt;/strong&gt; を許容するかどうかのフラグです (True だと空白OK)&lt;/li&gt;
&lt;li&gt;第二引数は気にせず &lt;strong&gt;defaultTimeLocale&lt;/strong&gt; を指定しておきましょう&lt;/li&gt;
&lt;li&gt;第三引数は &lt;strong&gt;パーズで利用するフォーマット&lt;/strong&gt; を指定します&lt;/li&gt;
&lt;li&gt;第四引数は &lt;strong&gt;入力の文字列&lt;/strong&gt; です&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具体例&#34;&gt;具体例&lt;/h3&gt;
&lt;p&gt;実際にいくつか使ってみましょう。以下の通り &lt;code&gt;%F&lt;/code&gt; は &lt;code&gt;YYYY-MM-DD&lt;/code&gt; の書式になります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; formatTime defaultTimeLocale &amp;quot;%F&amp;quot; &amp;lt;$&amp;gt; getZonedTime
&amp;quot;2018-09-17&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モナドを &lt;code&gt;IO&lt;/code&gt; や &lt;code&gt;Maybe&lt;/code&gt; などに変化させた基本的な例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: Maybe ZonedTime
Just 2018-09-17 00:00:00 +0000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一引数を変化させて、入力文字列の空白の有無について確認する例。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot;2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入力文字列とパーズの書式がマッチしない例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM False defaultTimeLocale &amp;quot;%x&amp;quot; &amp;quot; 2018-09-17 &amp;quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &amp;quot; 2018-09-17 &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Day 型の値をとしてパーズする例&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day
2018-09-17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにして日付を取得できれば、今回は説明していませんが &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html&#34;&gt;Data.Time.Calendar&lt;/a&gt; の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html#v:addDays&#34;&gt;addDays&lt;/a&gt; 関数などを使って日付の計算を行うこともできるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; d = parseTimeM True defaultTimeLocale &amp;quot;%F&amp;quot; &amp;quot;2018-09-17&amp;quot; :: IO Day

&amp;gt; addDays 1 &amp;lt;$&amp;gt; d
2018-09-18

&amp;gt; addDays 35 &amp;lt;$&amp;gt; d
2018-10-22&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;time パッケージを使うと時刻や日付の計算ができる&lt;/li&gt;
&lt;li&gt;現在の&lt;strong&gt;日本&lt;/strong&gt;時間を取得した場合は &lt;strong&gt;getCurrentTime&lt;/strong&gt; ではなく、&lt;strong&gt;getZonedTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;整形には &lt;strong&gt;formatTime&lt;/strong&gt; を使う&lt;/li&gt;
&lt;li&gt;文字列から &lt;strong&gt;ZonedTime&lt;/strong&gt; や &lt;strong&gt;Day&lt;/strong&gt; に変換する際は &lt;strong&gt;parseTimeM&lt;/strong&gt; を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell入門の &lt;strong&gt;7.7 日付・時刻を扱う&lt;/strong&gt; にも3ページほど &lt;strong&gt;time&lt;/strong&gt; パッケージの解説があるので、気になる人はそちらも確認してみると良いかもしれません。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;getZonedTime&lt;/code&gt; に対して &lt;code&gt;formatTime defaultTimeLocale &amp;lt;フォーマット文字&amp;gt;&lt;/code&gt; の対応表です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; getZonedTime
2018-09-17 14:44:52.052040178 JST&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;narrow-table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;出力結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%_z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+ 900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%0z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%^z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%#z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%8z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+00000900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%_12z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+         900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+0900&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JST&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon Sep 17 14:39:34 JST 2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:39&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:12&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14:40:31&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02:40:55 PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;02&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;43&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;49&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;903244678000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%Q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.28084722&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1537163079&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018-09-17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09/17/18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2018&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;18&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;September&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;09&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;260&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Monday&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;37&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;%w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;%W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;38&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/substring-parser.html</id><title type="text">substring-parserで「タイプセーフプリキュア！」を移行した話</title><updated>2018-09-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/substring-parser.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日私は&lt;a href=&#34;https://cure-hack.connpass.com/event/91157/&#34;&gt;プリキュアハッカソン &lt;span class=&#34;ascii&#34;&gt;NewStage&lt;/span&gt;&lt;/a&gt;というちょっと変わったイベントで、「&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;」の最近の更新について発表いたしました。&lt;br /&gt;
今回は&lt;a href=&#34;http://the.igreque.info/slides/2018-08-18-substring-parser.html&#34;&gt;その際使用したスライド&lt;/a&gt;を、ブログ記事として拡大して共有させていただきたいと思います！&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;予告編（はじめにまとめ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;これまでのあらすじ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;「タイプセーフプリキュア！」とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;どうやって修正する？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;パーサーコンビネーターとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;👎記述が冗長&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;👎文字列の先頭からのマッチしかできない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;結果、できたもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;その他の似たソリューション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;次のゴール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#予告編はじめにまとめ&#34; title=&#34;予告編はじめにまとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;予告編（はじめにまとめ）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#これまでのあらすじ&#34; title=&#34;これまでのあらすじ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;これまでのあらすじ&lt;/h1&gt;
&lt;h2 id=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#タイプセーフプリキュアとは&#34; title=&#34;タイプセーフプリキュアとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「タイプセーフプリキュア！」とは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;https://github.com/kan/p5-acme-prettycure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ACME::PrettyCure&lt;/span&gt;&lt;/a&gt;のような「&lt;a href=&#34;https://qiita.com/sue445/items/b41a4f5bdca46f1736c3&#34;&gt;プリキュア実装&lt;/a&gt;」の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つです。&lt;br /&gt;
詳しくはこれから挙げる過去の記事をご覧ください、と言いたいところですが、よくよく見たら「プリキュア実装」が何かを明記してる記事ではないようなので😅、ここで軽く説明しましょう。&lt;br /&gt;
「プリキュア実装」とは一言で言うと「プリキュアやプリキュアに変身する女の子たち、変身時の台詞など諸々のプリキュアの設定をソースコードに収録したライブラリー」です。&lt;/p&gt;
&lt;p&gt;例えば、今回取り上げます私の「タイプセーフプリキュア！」は（もちろん）&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書かれたプリキュア実装で、次のように書くことで、キュアアンジュが変身する際の台詞を取得することができます。&lt;br /&gt;
&lt;small&gt;（出力されるリストは、手で整形しています）&lt;/small&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- キュアアンジュには、薬師寺さあやが「ミライクリスタル・ブルー」を&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- セットした「プリハート」を使うことで変身します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; transformationSpeech &lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalBlue&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;ミライクリスタル！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ハートキラっと！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;は～ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ぎゅ～～！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;輝く未来をー、抱きしめて！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;みんなを癒す！知恵のプリキュア！キュアアンジュ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で上記のコードを試す場合は、下記のコードで&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;と&lt;a href=&#34;https://github.com/haskell-jp/unicode-show&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unicode-show&lt;/span&gt;&lt;/a&gt;をインストールした上で起動するとよいでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build typesafe-precure unicode-show&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec ghci -- -interactive-print=&lt;span class=&#34;st&#34;&gt;&amp;quot;Text.Show.Unicode.uprint&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その他の機能や、使っている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張などについては下記の記事をご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://the.igreque.info/posts/2016/06-type-safe-precure.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;igreque : Info -&amp;gt; Haskell&lt;/span&gt;でプリキュアを作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;「タイプセーフプリキュア！」を支える技術 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cure-index.jsonとは&#34; title=&#34;cure-index.jsonとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;とは？&lt;/h2&gt;
&lt;p&gt;そんな「タイプセーフプリキュア！」ですが、前述の&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の記事の最後で「&lt;span class=&#34;ascii&#34;&gt;typesafe-precure&lt;/span&gt;は現状非常に冗長で、非実用的な実装になってしまっています」と述べているとおり、ほかのプリキュア実装と異なり、&lt;del&gt;実用性を度外視して&lt;/del&gt;「設定の正しさ」を最優先事項とした結果、変身時の台詞や浄化技（「必殺技」ともしばしば呼ばれます）の台詞を取得するのに、非常に冗長なコードが必要になってしまいました。&lt;br /&gt;
それではせっかく&lt;span class=&#34;ascii&#34;&gt;YouTube&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Wikipedia&lt;/span&gt;やら&lt;span class=&#34;ascii&#34;&gt;Blu-ray&lt;/span&gt;やらを見直してせっせと集めた情報が勿体ないので、集めた情報を、コンパイル時に&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;として出力することにしました。&lt;br /&gt;
そうして生まれたのが&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;&lt;/a&gt;とそれをプリティープリントした&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/master/gen/pretty-cure-index.json&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pretty-cure-index.json&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
将来的には、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を書き直すのに使用しようかと考えています。&lt;/p&gt;
&lt;p&gt;作るに当たって新たに「タイプセーフプリキュア！」のソースコードに仕込んだ仕組みについては、&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;ANN&lt;/code&gt;という機能を濫用することで達成しました。😎&lt;/p&gt;
&lt;h1 id=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今回のプリキュアハッカソンに向けて行ったこと&#34; title=&#34;今回のプリキュアハッカソンに向けて行ったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今回のプリキュアハッカソンに向けて行ったこと&lt;/h1&gt;
&lt;p&gt;従来の&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;には、最新作である「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と、その一つ前の作品である「キラキラ☆プリキュアアラモード」の情報しか収録されていませんでした。&lt;br /&gt;
前述の&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;去年の&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;の記事&lt;/a&gt;でも触れましたが、収録のためにはプリキュアの設定の書式を大幅に変更しなければならず、面倒なのでひとまず後回しにしていたのです。&lt;/p&gt;
&lt;p&gt;そこで今年のプリキュアハッカソンにて発表するのによいネタだろうと思い、あの手この手を使って、全シリーズを&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に含める対応を行いました&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;🎉。&lt;/p&gt;
&lt;h2 id=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正前の書式&#34; title=&#34;修正前の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔴修正&lt;strong&gt;前&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;それでは、具体的にどんな修正を行ったのか紹介しましょう。&lt;br /&gt;
修正前は、プリキュアの設定を収録した各モジュール（&lt;code&gt;ACME.PreCure.Textbook&lt;/code&gt;以下にあるので、今後は「&lt;strong&gt;各&lt;code&gt;Textbook&lt;/code&gt;モジュール&lt;/strong&gt;」と呼びます）には&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Types.hs#L71&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;がたくさん&lt;/a&gt;ありました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureMiracle&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;transformedInstance&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  [t| CureMiracle |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;  introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;  variation_Dia&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記はキュアミラクルを表す型の定義と、その日本語での名前、変身時の名乗りといったプロフィールを設定しているコードです。&lt;br /&gt;
このほかにも、プリキュアに変身する女の子の設定や、変身の際に必要な変身アイテムなどの型定義がたくさんあります。&lt;br /&gt;
&lt;code&gt;transformedInstance&lt;/code&gt;で始まる行は、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を使った、型クラスのインスタンス宣言です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types/TH.hs#L151-L158&#34;&gt;&lt;code&gt;transformedInstance&lt;/code&gt;というマクロ&lt;/a&gt;が、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Types.hs#L15-L19&#34;&gt;&lt;code&gt;Transformed&lt;/code&gt;という型クラス&lt;/a&gt;のインスタンスを生成することで、プリキュアを表す型と、日本語での名前、変身時の名乗りを実際に紐付けているのです。&lt;br /&gt;
&lt;small&gt;（実際の日本語での名前はご覧のとおり&lt;code&gt;cureName_Miracle&lt;/code&gt;といった変数に束縛されております。&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/MahoGirls/Words.hs#L18&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Words.hs&lt;/span&gt;&lt;/a&gt;というファイルから参照しています）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;修正前はこのように、あくまでも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとして、プリキュアの設定を書いていたため、このままでは&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;のデータとして扱うのが難しい状態でした。&lt;/p&gt;
&lt;h2 id=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#修正後の書式&#34; title=&#34;修正後の書式&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔵修正&lt;strong&gt;後&lt;/strong&gt;の書式&lt;/h2&gt;
&lt;p&gt;そのため、今回修正した後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/fd5f89797372f616a551e07251c0fcd2ca1531c2/src/ACME/PreCure/Textbook/MahoGirls/Profiles.hs#L20&#34;&gt;👇こんな感じの&lt;span class=&#34;ascii&#34;&gt;Profiles.hs&lt;/span&gt;&lt;/a&gt;で、各種の設定を宣言することにしました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;transformees ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Transformee&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;transformees &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;  [ mkTransformee&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;Cure Miracle&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;      &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;      cureName_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;      variation_Dia&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;      introducesHerselfAs_Miracle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;  , &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; data-line-number=&#34;10&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkTransformee&lt;/code&gt;関数で作っている&lt;code&gt;Transformee&lt;/code&gt;型の値は、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;の一部として、&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する中間データです。もちろん&lt;code&gt;ToJSON&lt;/code&gt;のインスタンスになっております。&lt;br /&gt;
このように新しい各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、直接&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードとしてプリキュアの設定を書く代わりに、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換する用の中間データを設けることで、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録しやすい状態に&lt;/strong&gt;しています。&lt;/p&gt;
&lt;p&gt;こうして作られた&lt;code&gt;Transformee&lt;/code&gt;などの中間データ用の値は、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのルートに当たるモジュールで、型クラスのインスタンス宣言を行ったり、&lt;code&gt;ANN&lt;/code&gt;という機能でモジュールに紐付けられます。&lt;br /&gt;
以下は「魔法つかいプリキュア！」のルートに当たるモジュール&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/477fc23a018020fe67895e79361520016fd844bf/src/ACME/PreCure/Textbook/MahoGirls.hs&#34;&gt;&lt;code&gt;MahoGirls.hs&lt;/code&gt;&lt;/a&gt;からの抜粋です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Textbook.MahoGirls.Profiles&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# ANN module transformees #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(declareTransformees transformees)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Profiles.hs&lt;/code&gt;で定義した&lt;code&gt;transformees&lt;/code&gt;というリストを、&lt;code&gt;ANN&lt;/code&gt;で&lt;code&gt;MahoGirls&lt;/code&gt;モジュールに紐付け、&lt;code&gt;declareTransformees&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロで型宣言やインスタンス宣言を生成するのに使っています。&lt;br /&gt;
&lt;code&gt;ANN&lt;/code&gt;については&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;前回の「タイプセーフプリキュア！を支える技術」&lt;/a&gt;をご覧ください&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;修正前との違いにおける要点を繰り返しましょう。修正後の各&lt;code&gt;Textbook&lt;/code&gt;モジュールでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリキュアの情報を、
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;として書き出すためのデータ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;で型や型クラスのインスタンスとして生成するためのデータ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;両方で扱えるようにするために、専用の型の値として保存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;するようにしています。&lt;/p&gt;
&lt;h2 id=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうやって修正する&#34; title=&#34;どうやって修正する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうやって修正する？&lt;/h2&gt;
&lt;p&gt;それではここからは、各&lt;code&gt;Textbook&lt;/code&gt;モジュールの書式を、どうやって前節で説明したような、「修正前」から「修正後」の書式に移行したのか説明します。&lt;/p&gt;
&lt;p&gt;当然、手で修正するには大変な量です。&lt;br /&gt;
従来より「タイプセーフプリキュア！」では&lt;span class=&#34;ascii&#34;&gt;TV&lt;/span&gt;シリーズ&lt;span class=&#34;ascii&#34;&gt;15&lt;/span&gt;作品に加えてキュアエコーが出てくる映画もサポートしているため、各&lt;code&gt;Textbook&lt;/code&gt;モジュールは&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;作品分存在しています。&lt;br /&gt;
すでに「修正後」の書式に移行済みの「&lt;span class=&#34;ascii&#34;&gt;HUG&lt;/span&gt;っと！プリキュア」と「キラキラ☆プリキュアアラモード」を除いても、&lt;span class=&#34;ascii&#34;&gt;14&lt;/span&gt;作品分書き換えないといけません。&lt;br /&gt;
シリーズごとに定義されている型やインスタンス宣言の数にはばらつきがありますが、すべて移行してから数えてみたところ、型の数だけで&lt;span class=&#34;ascii&#34;&gt;313&lt;/span&gt;個、変身や浄化技のインスタンス宣言だけで&lt;span class=&#34;ascii&#34;&gt;211&lt;/span&gt;個ありました。&lt;br /&gt;
プリキュアやプリキュアに変身する女の子、変身アイテムだけでなく、それぞれの変種も別の型として定義しているため、実際のプリキュアの数よりも遙かに多いのです😵。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim&lt;/span&gt;のマクロなどを駆使すれば決して人間の手でも移行できない規模ではありませんが、そこは「タイプセーフプリキュア！」です。&lt;br /&gt;
始まって以来私が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の拡張を始めいろいろな技術を試すための実験場としても機能していたので、ここは是非ちょっと凝ったことをしてぱーっと書き換えてみたいものでしょう😏。&lt;br /&gt;
そこで思いついたのがパーサーコンビネーター、並びに拙作のライブラリー&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;だったのです💡！&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターとは&#34; title=&#34;パーサーコンビネーターとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターとは&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の紹介の前に、パーサーコンビネーターについて簡単に紹介しておきましょう。&lt;br /&gt;
&lt;small&gt;（「すでに知ってるよ！」という方はこの節は飛ばした方が良いかと思います）&lt;/small&gt;&lt;br /&gt;
パーサーコンビネーターは、例えば正規表現のような、文字列を解析する技術の一つです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;attoparsec&lt;/span&gt;&lt;/a&gt;をはじめ、多くのプログラミング言語にライブラリーとして提供されています。&lt;/p&gt;
&lt;p&gt;実装はいろいろありますが、本質的にパーサーコンビネーターは「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」として表現されます。&lt;br /&gt;
加えて、それらを簡単に組み合わせるための&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を提供することで、複雑な文字列から複雑なデータ構造を抽出できるようにしてくれます。&lt;/p&gt;
&lt;p&gt;実際のパーサーコンビネーターのライブラリーを単純化して例を挙げましょう。&lt;br /&gt;
例えば、通例パーサーコンビネーターのライブラリーは&lt;code&gt;decimal&lt;/code&gt;という、「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取って、整数を返すパーサー」を提供していることが多いです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt;関数に、解析したい文字列と一緒に渡すことで、「文字列を解析した結果」と、「残りの文字列」を取得することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;123abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆上記の例では「解析したい文字列」として&lt;code&gt;123abc&lt;/code&gt;を渡したので、パースした結果の整数&lt;code&gt;123&lt;/code&gt;と、その残りの文字列&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;を返しています。&lt;/p&gt;
&lt;p&gt;これだけではつまらないので、ほかのパーサーの例も挙げましょう。&lt;br /&gt;
👇今度は「文字 セミコロン &lt;code&gt;;&lt;/code&gt; を受け取って、そのまま返すパーサー」です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;;aaa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;(&lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「パースした結果」がセミコロン &lt;code&gt;;&lt;/code&gt; で、「残りの文字列」が&lt;code&gt;&amp;quot;aaa&amp;quot;&lt;/code&gt;となっていますね。&lt;/p&gt;
&lt;p&gt;それでは以上&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つのパーサーを組み合わせて、&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー&lt;/strong&gt;を作ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; decimalAndSemicolon &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;    n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decimal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;    char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;    return n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimalAndSemicolon &lt;span class=&#34;st&#34;&gt;&amp;quot;123;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;(&lt;span class=&#34;dv&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 結果にセミコロンが含まれてない点に注意&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;におけるパーサーコンビネーターのライブラリーは、パーサーを&lt;code&gt;Monad&lt;/code&gt;として提供することで、上記のように&lt;code&gt;do&lt;/code&gt;記法でパーサーを組み合わせることができるようになっています。&lt;br /&gt;
ここでは詳細は割愛しますが、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;で整数をパースしたあと、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char &#39;;&#39;&lt;/code&gt; で文字セミコロン &lt;code&gt;;&lt;/code&gt;をパース（でも結果は無視）し&lt;/li&gt;
&lt;li&gt;パースした結果として「&lt;code&gt;decimal&lt;/code&gt;がパースした整数」&lt;code&gt;n&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という処理を行っているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;ちなみに、パーサーコンビネーターに慣れた読者の方なら、いわゆる&lt;span class=&#34;ascii&#34;&gt;Applicative&lt;/span&gt;スタイルを使って、次のようにも書けると気づくでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;decimalAndSemicolon &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; decimal &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これならパースした結果をいちいち変数に束縛する必要もなく、より簡潔に書くことができますね！&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターのパワーを実感していただくために、もう一つ例を紹介します。&lt;br /&gt;
&lt;code&gt;many&lt;/code&gt;という関数にパーサーコンビネーターを渡すと、「受け取ったパーサーコンビネーターで失敗するまで繰り返しパースして、その結果をリストとして返す」パーサーが作れます。&lt;br /&gt;
例えば先ほどの「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列を受け取った後、セミコロンを受け取り、整数を返すパーサー」から、「セミコロンが末尾に着けられた整数のリストを返すパーサー」を作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;parse (many decimalAndSemicolon) &lt;span class=&#34;st&#34;&gt;&amp;quot;12;34;56;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;([&lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;34&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;56&lt;/span&gt;], &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにパーサーコンビネーターは、小さなパーサーをどんどん組み合わせることで、複雑な文字列から複雑なデータ構造を取り出すパーサーを、クールに作れるようにしてくれます。&lt;/p&gt;
&lt;h3 id=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーサーコンビネーターが正規表現より良いところ悪いところ&#34; title=&#34;パーサーコンビネーターが正規表現より良いところ悪いところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パーサーコンビネーターが正規表現より良いところ・悪いところ&lt;/h3&gt;
&lt;p&gt;そんなパーサーコンビネーターについて、正規表現と比べた場合の長所短所を明確にしておきましょう。&lt;br /&gt;
まずはよいところから。&lt;/p&gt;
&lt;h4 id=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パーツとしてパーサーを組み合わせるのが簡単&#34; title=&#34;パーツとしてパーサーを組み合わせるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パーツとしてパーサーを組み合わせるのが簡単&lt;/h4&gt;
&lt;p&gt;前節で示したように、複雑なパーサーも、小さなパーサーの組み合わせからコツコツと作れるようになっています。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34; title=&#34;パースした結果を文字列から複雑なデータ構造に割り当てるのが簡単&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果を、文字列から複雑なデータ構造に割り当てるのが簡単&lt;/h4&gt;
&lt;p&gt;さっきの&lt;code&gt;decimal&lt;/code&gt;は、パースした結果を直接整数&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;として返していたことにお気づきでしょうか？&lt;br /&gt;
正規表現で欲しい文字列からデータ構造を取り出したい際は、通常グルーピング機能を使うことになりますが、必ず一旦文字列として取り出すことになります。&lt;br /&gt;
それに対してパーサーコンビネーターには、取り出した文字列を対象のデータ構造に変換する仕組みが組み込まれています。&lt;br /&gt;
再帰的なパーサーを書いて再帰的なデータ構造に割り当てるのも楽ちんです。&lt;/p&gt;
&lt;h4 id=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パースした結果に基づいてパーサーの挙動を変えることができる&#34; title=&#34;パースした結果に基づいてパーサーの挙動を変えることができる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍パースした結果に基づいて、パーサーの挙動を変えることができる&lt;/h4&gt;
&lt;p&gt;今回の例にはありませんでしたが、例えばパースして取り出した整数の数だけ、続きの文字列を繰り返しパースする、といったことも簡単にできます。&lt;/p&gt;
&lt;p&gt;一方、正規表現と比べて悪いところもあります。&lt;/p&gt;
&lt;h4 id=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#記述が冗長&#34; title=&#34;記述が冗長&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎記述が冗長&lt;/h4&gt;
&lt;p&gt;正規表現はいわゆる「外部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」、すなわちプログラミング言語から独立した構文で提供されています。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Ruby&lt;/span&gt;などの構文で言えば、&lt;code&gt;/.../&lt;/code&gt;の中は別世界ですよね。&lt;br /&gt;
パーサーコンビネーターは、本質的に「文字列を受け取って『文字列を解析した結果』と、『残りの文字列』を返す関数」であるとおり、あくまでプログラミング言語標準の関数&lt;small&gt;（のうち、文字列の解析に特化したもの）&lt;/small&gt;として提供されます。「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」なんて呼ばれることもあります。&lt;/p&gt;
&lt;p&gt;そのため、正規表現とは異なり、あくまでもプログラミング言語の構文の中で使えなければならないため、使用できる文字列に限りがあり、必然的に長くなります。&lt;br /&gt;
例えば先ほどの&lt;code&gt;many&lt;/code&gt;は正規表現で言うところの&lt;code&gt;*&lt;/code&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;回以上の量指定子）&lt;/small&gt;とちょっと似てますが、正規表現の方が&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;文字も短いですよね。&lt;/p&gt;
&lt;p&gt;しかしながら、冗長であることはメリットにもなり得ます👍。&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt;をはじめ、正規表現の特殊な機能を使うには、専用の記号（メタキャラクター）をその数だけ覚えなければなりません。&lt;br /&gt;
片やパーサーコンビネーターは&lt;code&gt;many&lt;/code&gt;のような機能も普通の関数として提供されるため、冗長である分分かりやすい名前をつけやすいのです。&lt;/p&gt;
&lt;h4 id=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ユーザーからの入力として直接受け取ることは難しい&#34; title=&#34;ユーザーからの入力として直接受け取ることは難しい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎ユーザーからの入力として直接受け取ることは難しい。&lt;/h4&gt;
&lt;p&gt;パーサーコンビネーターは先ほども触れた「内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;」です。&lt;br /&gt;
つまり、プログラミング言語の普通の関数として使用されるものです。&lt;br /&gt;
したがって、例えば正規表現をエディターの検索機能に利用すると言ったような、「ユーザーからの入力として受け取る」と言ったことは、不可能ではないものの、正規表現に比べれば難しいです。&lt;/p&gt;
&lt;h4 id=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34; title=&#34;正規表現でいうところの-にあたるmanyが必ず強欲なマッチになる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が、必ず強欲なマッチになる&lt;/h4&gt;
&lt;p&gt;こちらについてはちょっと難しいので後述します。&lt;/p&gt;
&lt;h4 id=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#文字列の先頭からのマッチしかできない&#34; title=&#34;文字列の先頭からのマッチしかできない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎文字列の先頭からのマッチしかできない&lt;/h4&gt;
&lt;p&gt;この問題は、パーサーコンビネーターをベター正規表現として使おうと思った場合に、しばしばパーサー作りを面倒くさくします。&lt;br /&gt;
パーサーコンビネーターは、原理上必ず文字列の先頭から解析するよう作られています。&lt;br /&gt;
例えば先ほど紹介したパーサー&lt;code&gt;decimal&lt;/code&gt;の場合、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; parse decimal &lt;span class=&#34;st&#34;&gt;&amp;quot;abc123&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても、&lt;code&gt;&amp;quot;abc123&amp;quot;&lt;/code&gt;は先頭が「&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数の文字列」ではないので、失敗してしまいます&lt;small&gt;（実際の戻り値はライブラリーによって異なります。試してみましょう！）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターはそもそもの用途が&lt;span class=&#34;ascii&#34;&gt;0&lt;/span&gt;からプログラミング言語などのマシンリーダブルな構文を作るところにあるので、妥当と言えば妥当な制限です。&lt;br /&gt;
その場合は必ず、文字列を頭から読んでパースすることになるでしょうから。&lt;/p&gt;
&lt;p&gt;とはいえ、これは正規表現で例えるなら、常に先頭に&lt;code&gt;\A&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;あるいは &lt;code&gt;^&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を付けなければならない、あるいは自動的に付いてしまう、というような制限です。&lt;br /&gt;
正規表現は行の中にある一部の文字列を抽出したり置換したりするのによく使われるので、役に立たないケースがたくさん出てきてしまいます。&lt;/p&gt;
&lt;p&gt;パーサーコンビネーターでこの問題に対応するには、マッチさせたい文字列に到達するまで、スキップするための処理を書かないといけません。&lt;br /&gt;
残念ながらこれは、正規表現で言うところの &lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt; と書けばよい話&lt;strong&gt;ではありません&lt;/strong&gt;。&lt;br /&gt;
&lt;code&gt;\A(マッチさせたくない文字列)*(本当にマッチさせたい文字列)&lt;/code&gt; という書き方をしなければならないのです。&lt;br /&gt;
なぜなら、先ほど触れた「正規表現でいうところの &lt;code&gt;*&lt;/code&gt; にあたる&lt;code&gt;many&lt;/code&gt;が強欲なマッチになる」という問題があるためです。&lt;br /&gt;
正規表現で言うところの&lt;code&gt;\A.*(本当にマッチさせたい文字列)&lt;/code&gt;を書くと、&lt;code&gt;.*&lt;/code&gt;が「マッチさせたくない文字列」だけでなく「本当にマッチさせたい文字列」までマッチしてしまい、結果肝心の「本当にマッチさせたい文字列」を扱うことができなくなってしまうのです。&lt;/p&gt;
&lt;h3 id=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ソースコードの書き換えとsubstring-parser&#34; title=&#34;ソースコードの書き換えとsubstring-parser&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ソースコードの書き換えと&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;さて、今回の目的は「『タイプセーフプリキュア！』のソースコードの書式を書き換えることで、全シリーズのプリキュアの情報を&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;に収録する」ことでした。&lt;br /&gt;
そのためには、各&lt;code&gt;Textbook&lt;/code&gt;モジュールのソースコードにおいて&lt;strong&gt;途中&lt;/strong&gt;に含まれている、プリキュアを表す型の定義や、型クラスのインスタンス宣言を集める必要があります。&lt;br /&gt;
しかもそれらは、一つの定義が行をまたいでいたりまたいでなかったりするので、よくある行単位で処理するツールを使うのも、なかなか難しいと思います。&lt;br /&gt;
また、抽出したいデータ構造も多様かつそこそこに複雑で、中には再帰的なデータ構造もあります。正規表現を用いてのパースも、かなり困難なことでしょう。&lt;br /&gt;
とはいえパーサーコンビネーターを通常のとおりに使うと、これまでに述べたとおり、「文字列の先頭からしかマッチできない」という制限が、考えることを複雑にします。&lt;/p&gt;
&lt;p&gt;こうした状況は今回の問題に限らず、このように、ソースコードの多くの類似箇所を書き換える場面において、しばしば発生するでしょう。&lt;br /&gt;
そこで今回は&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;こうした問題全般に対応するライブラリーとして、&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを作りました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を使えば、任意のパーサーコンビネーター&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;を&lt;strong&gt;文字列の中間でも&lt;/strong&gt;マッチさせることができます。&lt;br /&gt;
残念ながらドキュメントらしいドキュメントが全く書けてない状況ではありますが、一応動きます。&lt;br /&gt;
&lt;a href=&#34;https://gitlab.com/igrep/substring-parser/blob/master/test/Spec.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Spec.hs&lt;/span&gt;&lt;/a&gt;が動作を知る際の参考になるかも知れません。&lt;/p&gt;
&lt;h4 id=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#substring-parserの仕組み&#34; title=&#34;substring-parserの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;の仕組み&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;はどのようにして、任意のパーサーコンビネーターを文字列の中間でもマッチできるようにしているのでしょう？&lt;br /&gt;
仕組みは単純です。&lt;br /&gt;
引数として受け取ったパーサーを、&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;とりあえず先頭からマッチさせてみる。&lt;/li&gt;
&lt;li&gt;失敗したら先頭の一文字をスキップして、次の文字からまたマッチさせてみる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という手順を繰り返すだけです。 結果として文字列の先頭にある「マッチさせたくない文字列」をスキップすることができるのです。&lt;/p&gt;
&lt;p&gt;⚠️残念ながら決して効率のいい方法ではないので、真面目なパーサーを書くときはおすすめしません！&lt;br /&gt;
あくまでも今回のような、書き捨てだけど、それなりに複雑な文字列を解析する必要がある場合のみ使うべきでしょう。&lt;/p&gt;
&lt;h2 id=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果できたもの&#34; title=&#34;結果できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果、できたもの&lt;/h2&gt;
&lt;p&gt;ここまで説明した&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;を駆使することで、私は無事、各&lt;code&gt;Textbook&lt;/code&gt;モジュールを半自動で古い書式から新しい書式に書き換えることに成功しました。&lt;br /&gt;
&lt;small&gt;（残念ながら古い&lt;code&gt;Textbook&lt;/code&gt;モジュールには存在しない情報を補ったり、体裁を整えたりする必要があったため、完全に自動で書き換えられたわけではありません）&lt;/small&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/igrep/typesafe-precure/pull/25&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure#25&lt;/span&gt;&lt;/a&gt;という大きな&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;に、移行したもののほぼすべてが刻まれています。&lt;/p&gt;
&lt;p&gt;なお、上記の&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;では消してしまってますが、実際に実行した、移行用スクリプトは&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/ed038aa57a4df6b1fcc23fb071253888ebd7d477/app/migrate2cure-index.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;typesafe-precure/app/migrate2cure-index.hs&lt;/span&gt;&lt;/a&gt;にあります。&lt;br /&gt;
ご興味のある方はご覧になってみてください。&lt;/p&gt;
&lt;p&gt;また、もう少し小さいサンプルとして、プリキュアハッカソンの成果発表でデモをした時点のコミットも載せておきます。&lt;br /&gt;
👇のコマンドを実行すれば、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/app/migrate2cure-index.hs#L101-L118&#34;&gt;こちらのコミット時点のパーサー&lt;/a&gt;で、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Textbook/Dokidoki/Types.hs#L19-L23&#34;&gt;同時点の&lt;span class=&#34;ascii&#34;&gt;Types.hs&lt;/span&gt;&lt;/a&gt;から、&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;で使用する&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/73948fb4a82baaf4e33900d77326791c7703f786/src/ACME/PreCure/Index/Types.hs#L44-L46&#34;&gt;&lt;code&gt;Girl&lt;/code&gt;&lt;/a&gt;という型の値を取り出すことができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; git clone https&lt;span class=&#34;fu&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; cd typesafe&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; git checkout 73948fb4a82baaf4e33900d77326791c7703f786&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; stack build &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;migrate2cure&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;index&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; stack exec migrate2cure&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;index&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt; 略 &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- src/ACME/PreCure/Textbook/Dokidoki --&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Mana\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Rikka\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Alice\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Makoto\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Girl&lt;/span&gt; {girlId &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameEn &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;Aguri\&amp;quot; ++ error \&amp;quot;Need family name!\&amp;quot;&amp;quot;&lt;/span&gt;, girlNameJa &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;girlName&amp;quot;&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#その他の似たソリューション&#34; title=&#34;その他の似たソリューション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;その他の似たソリューション&lt;/h1&gt;
&lt;p&gt;今回は、自前で作ったライブラリーと一から書いたパーサーを組み合わせることで「ソースコードの多くの類似箇所を書き換える」問題に対応しましたが、似たようなことを行うツールはほかにもあります。&lt;br /&gt;
いずれも私はほぼ使ったことがないので詳しい解説はできませんが、軽く紹介しておきます。&lt;/p&gt;
&lt;h2 id=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#codemod&#34; title=&#34;codemod&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/codemod&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;製の一括置換ツールです。指定したディレクトリーのファイル群を、正規表現で一括置換できます。&lt;br /&gt;
ここまで書くと&lt;code&gt;perl&lt;/code&gt;や&lt;code&gt;sed&lt;/code&gt;、&lt;code&gt;awk&lt;/code&gt;などで十分できそうにも聞こえますが、修正前後の状態を色つきで見ながら対話的に修正できるそうです。&lt;br /&gt;
正規表現での単純な修正が気に入らなければ、その場で該当箇所だけをエディタで修正できるとのこと。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Python 2&lt;/span&gt;に依存しているのがちょっとつらいところでしょうか…😨。&lt;/p&gt;
&lt;h2 id=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#jscodeshift&#34; title=&#34;jscodeshift&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/facebook/jscodeshift&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;jscodeshift&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同じく&lt;span class=&#34;ascii&#34;&gt;Facebook&lt;/span&gt;が作った、名前のとおり&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;に特化したソースコードの修正ツールです。&lt;br /&gt;
こちらは正規表現は使用せず、「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」と呼ばれる、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;を変換するための専用のスクリプトを実行することで修正するそうです。&lt;br /&gt;
様々な状況に特化した「&lt;span class=&#34;ascii&#34;&gt;Transform module&lt;/span&gt;」を別パッケージとしても提供しているようです。&lt;/p&gt;
&lt;p&gt;📝以上の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つについては「&lt;a href=&#34;https://www.webprofessional.jp/getting-started-with-codemods/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;疲れに効く！ &lt;span class=&#34;ascii&#34;&gt;codemod&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;JSCodeshift&lt;/span&gt;でリファクタリングが捗る &lt;span class=&#34;ascii&#34;&gt;- WPJ&lt;/span&gt;&lt;/a&gt;」も参考にしました。&lt;/p&gt;
&lt;h2 id=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#refactorio&#34; title=&#34;refactorio&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;refactorio&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.superpowerscorp.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperPowers Corp&lt;/span&gt;&lt;/a&gt;という会社が開発中の、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;をはじめとする&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のパワーを集大成させた、ソースコードの一括置換ツールです。&lt;br /&gt;
&lt;code&gt;ByteString -&amp;gt; ByteString&lt;/code&gt;という型の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を渡すことで、指定したディレクトリーのファイルすべてに対して関数を適用し、書き換えます。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;--haskell&lt;/code&gt;や&lt;code&gt;--html&lt;/code&gt;、&lt;code&gt;--javascript&lt;/code&gt;など、各言語に特化したオプションを渡すと、各言語のソースコードを修正する&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ベースの&lt;span class=&#34;ascii&#34;&gt;module&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;した状態で、関数を作れるようにしてくれます。&lt;br /&gt;
具体的には、例えば&lt;code&gt;--haskell&lt;/code&gt;オプションを渡すと、&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts&lt;/span&gt;&lt;/a&gt;と&lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts-prisms&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-src-exts-prisms&lt;/span&gt;&lt;/a&gt;パッケージのモジュールを&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;AST&lt;/span&gt;の各トークンに対応した&lt;code&gt;Prism&lt;/code&gt;などが使えるようになります。&lt;/p&gt;
&lt;p&gt;後は&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;など&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのコンビネーターと組み合わせれば、一気に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードを編集することができます。 「任意のデータ構造に対する&lt;span class=&#34;ascii&#34;&gt;jQuery&lt;/span&gt;」とも言われる&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーのパワーを存分に生かしたツールなのです。&lt;/p&gt;
&lt;p&gt;残念なところは、今でも開発中である点と、&lt;span class=&#34;ascii&#34;&gt;lens&lt;/span&gt;ライブラリーに習熟していなければ使いこなせないという点でしょうか。&lt;br /&gt;
よく使う&lt;code&gt;Lens&lt;/code&gt;型や&lt;code&gt;Prism&lt;/code&gt;型だけでなく、&lt;code&gt;Traversal&lt;/code&gt;も使えなければなりません。&lt;br /&gt;
特に&lt;a href=&#34;https://github.com/SuperpowersCorp/refactorio#haskell-via-haskell-src-exts-and-haskell-src-exts-prisms&#34;&gt;サンプル&lt;/a&gt;で紹介されているような&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/lens-4.16.1/Data-Data-Lens.html#v:biplate&#34;&gt;&lt;code&gt;biplate&lt;/code&gt;&lt;/a&gt;を使った場合において、指定した&lt;code&gt;Prism&lt;/code&gt;がマッチしなかった場合、何事もなかったかのようにソースが書き換えられないため、デバッグが面倒なところもつらいです。&lt;/p&gt;
&lt;h1 id=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次のゴール&#34; title=&#34;次のゴール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次のゴール&lt;/h1&gt;
&lt;p&gt;「タイプセーフプリキュア！」の開発は、これからもプリキュアハッカソンの前後とプリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;の前後を中心に、今後も続ける予定です。&lt;br /&gt;
先にも触れましたが、次回は今回完成させた&lt;span class=&#34;ascii&#34;&gt;cure-index.json&lt;/span&gt;を使用することで、&lt;a href=&#34;http://the.igreque.info/posts/2014-12-25-unite-precure.vim.html&#34;&gt;かつて&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;で作ったユナイトプリキュア&lt;/a&gt;を「ユナイトプリキュア」を「ディナイトプリキュア」として書き直すかも知れません。&lt;br /&gt;
ただ、それ以外にももうちょっと&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で遊びたいことがあるので、後回しにするかも知れません。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Vim script&lt;/span&gt;、あんまり書きたくないんですよね…😥&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界に伝わる伝説のアイテム「パーサーコンビネーター」を応用して、「タイプセーフプリキュア！」の古いソースコードを半自動で変換しました。&lt;/li&gt;
&lt;li&gt;「パーサーコンビネーター」は正規表現よりいいところたくさんですが、文字列の先頭からのマッチしかできないのがつらいです。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/igrep/substring-parser&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;substring-parser&lt;/span&gt;&lt;/a&gt;というライブラリーを書いて、対応しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パーサーコンビネーター最高！ ✌️😆✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それではこの秋もパーサーコンビネーターで&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Hacking!!&lt;/span&gt;✌️✌️✌️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;プリキュアハッカソンは「ハッカソン」の名を冠してはいるものの、実態としてはプリキュアの映画を観ながら好き勝手に開発するというゆるい会です。&lt;br /&gt;
また、そもそもそれほど時間もないので、私は当日の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;～&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;週間ほど前から今回の対応を始めておりました。「今回のプリキュアハッカソンに&lt;strong&gt;向けて&lt;/strong&gt;行ったこと」なる見出しなのは、そのためです。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;当時は各&lt;code&gt;Textbook&lt;/code&gt;モジュールの&lt;code&gt;Types.hs&lt;/code&gt;というファイルで&lt;code&gt;ANN&lt;/code&gt;や&lt;code&gt;declareTransformees&lt;/code&gt;などを使っていましたが、現在は「ルートに当たるモジュール」で行うことにしました。ファイル数を減らすのと、&lt;span class=&#34;ascii&#34;&gt;export&lt;/span&gt;する識別子を型に絞ることで、&lt;code&gt;transformeesHugtto&lt;/code&gt;のような、あまりかっこよくない識別子を隠す、というのがその目的です。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;実際には、前職時代に同様の問題に遭遇した際作成しました。今後も必要になったときにちょっとずつ開発していく予定です。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;一応&lt;a href=&#34;http://hackage.haskell.org/package/parsers&#34;&gt;&lt;code&gt;parsers&lt;/code&gt;&lt;/a&gt;パッケージを使って様々なパーサーコンビネーターのライブラリーをサポートするように作りましたが、現状&lt;a href=&#34;http://hackage.haskell.org/package/attoparsec&#34;&gt;&lt;code&gt;attoparsec&lt;/code&gt;&lt;/a&gt;でのみテストしています。用途を考えれば多分十分じゃないかと思っています。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html</id><title type="text">stack でアプリケーションのバックトレースを取得する (デバッグ)</title><updated>2018-09-01T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell のデバッグ手法については、以下の記事がとても詳しく参考になります。素晴らしい記事です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はHaskellアプリケーションをデバックする際に、バックトレースのとても簡単な取得方法があったのでご紹介したいと思います。&lt;/p&gt;
&lt;p&gt;まとめると以下の2行です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
$ stack exec -- &amp;lt;exe_name&amp;gt; +RTS -xc&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;バックトレースの取得方法&#34;&gt;バックトレースの取得方法&lt;/h2&gt;
&lt;p&gt;まず、バックトレースを取得するために &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html&#34;&gt;GHC.Stack&lt;/a&gt; で定義されている &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html#t:HasCallStack&#34;&gt;HasCallStack&lt;/a&gt; をクラス制約として追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記の例を雛形として、&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加するとどうなるのか確認していきましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Main.hs&lt;/code&gt; はこんな感じで &lt;strong&gt;f1&lt;/strong&gt; を呼び出します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しない場合は以下のような出力となります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f3&lt;/strong&gt; でエラーが発生したことはわかりますが、それ以外は何もわかりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-f2-f3-に-hascallstack-を追加した場合&#34;&gt;f1, f2, f3 に HasCallStack を追加した場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドしてみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと呼び出しの関係が &lt;code&gt;error&lt;/code&gt; -&amp;gt; &lt;code&gt;f3&lt;/code&gt; -&amp;gt; &lt;code&gt;f2&lt;/code&gt; -&amp;gt; &lt;code&gt;f1&lt;/code&gt; と表示されていますね！&lt;/p&gt;
&lt;h3 id=&#34;f2-f3-にのみ-hascallstack-を追加する&#34;&gt;f2, f3 にのみ HasCallStack を追加する&lt;/h3&gt;
&lt;p&gt;では、ここで &lt;code&gt;f1&lt;/code&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除くとどうなるか確認してみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f1&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いた影響により、先程出力されていた &lt;code&gt;f1, called at app/Main.hs:6:8 in main:Main&lt;/code&gt; が出なくなりました。&lt;/p&gt;
&lt;p&gt;しかし、依然として &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f3&lt;/strong&gt; のバックトレースは取得できています。そのため、本当に全てのバックトレースを取得したい場合は全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加しなけばなりません。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f3-にのみ-hascallstack-制約を追加する&#34;&gt;f1 と f3 にのみ HasCallStack 制約を追加する&lt;/h3&gt;
&lt;p&gt;次に中間の &lt;strong&gt;f2&lt;/strong&gt; の &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を取り除いてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今度は &lt;strong&gt;f2&lt;/strong&gt; と &lt;strong&gt;f1&lt;/strong&gt; の両方の情報がが抜け落ちてしまいました。&lt;strong&gt;f2&lt;/strong&gt; で &lt;strong&gt;HasCallStack&lt;/strong&gt; の伝搬がストップしてしまったということです。&lt;/p&gt;
&lt;h3 id=&#34;f1-と-f2-のみに-hascallstack-を追加する&#34;&gt;f1 と f2 のみに HasCallStack を追加する&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasCallStack&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予想通り &lt;strong&gt;f1&lt;/strong&gt;, &lt;strong&gt;f2&lt;/strong&gt;, &lt;strong&gt;f3&lt;/strong&gt; の全ての情報が途絶えましたね・・・。&lt;/p&gt;
&lt;h2 id=&#34;hascallstack-を省略したままバックトレースを取りたい&#34;&gt;HasCallStack を省略したままバックトレースを取りたい&lt;/h2&gt;
&lt;p&gt;先程の結果を見たとおり、正確な情報を取得するためには全ての関数に &lt;strong&gt;HasCallStack&lt;/strong&gt; 制約を追加する必要がありそうです。&lt;/p&gt;
&lt;p&gt;しかしながら、規模が大きくなってくるとそんなの不可能ですよね。&lt;/p&gt;
&lt;p&gt;そんな時には &lt;code&gt;stack&lt;/code&gt; の &lt;code&gt;--profile&lt;/code&gt; オプションと &lt;code&gt;+RTS -xc&lt;/code&gt; オプションを利用します。(&lt;code&gt;--profile&lt;/code&gt; オプションは &lt;strong&gt;ghc&lt;/strong&gt; のオプションを良い感じに追加してくれます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;f1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; title=&#34;7&#34;&gt;f2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; title=&#34;10&#34;&gt;f3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような素のコードに対しても、同様にバックトレースが取得できるようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --profile
...
$ stack exec -- example +RTS -xc
*** Exception (reporting due to +RTS -xc): (THUNK_2_0), stack trace:
  Lib.f3,
  called from Lib.CAF:f3
  --&amp;gt; evaluated by: Lib.CAF:f2
  --&amp;gt; evaluated by: Lib.CAF:f1
  --&amp;gt; evaluated by: Main.CAF:main
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
CallStack (from -prof):
  Lib.f3 (src/Lib.hs:10:1-15)
  Lib.CAF:f3 (src/Lib.hs:10:1-2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なんか沢山表示されますが、&lt;code&gt;reporting due to +RTS -xc&lt;/code&gt; の部分を見ると、しっかりとバックトレースが取得できています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HasCallStack&lt;/strong&gt; を使うとバックトレースが取得できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack build --profile&lt;/code&gt; でビルドする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack exec -- &amp;lt;exe&amp;gt; +RTS -xc&lt;/code&gt; を使えば、明示的に &lt;strong&gt;HasCallStack&lt;/strong&gt; を追加しなくても、バックトレースが取得できる&lt;/li&gt;
&lt;li&gt;アプリケーションのコードに対して有効&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/01/debugging-haskell-program/#HasCallStack&#34;&gt;Haskell でのデバッグ手法あれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md#debugging&#34;&gt;Debugging – stack document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-flag--xc&#34;&gt;-xc option – GHC Users Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html</id><title type="text">stack-1.11 から location に extra-dep を指定できなくなります。</title><updated>2018-08-31T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;まだまだ先の話ですが、&lt;code&gt;extra-dep&lt;/code&gt; の書き方が &lt;strong&gt;Legacy syntax&lt;/strong&gt; になりました。&lt;code&gt;stack-1.11&lt;/code&gt; からはビルドできなくなります。&lt;/p&gt;
&lt;p&gt;以下の設定例は&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/master/doc/yaml_configuration.md#packages&#34;&gt;公式ドキュメント&lt;/a&gt;の例を少し変更したものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;location:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;extra-dep:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;subdirs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正方法は、設定ファイルの &lt;code&gt;packages&lt;/code&gt; に &lt;code&gt;extra-dep: true&lt;/code&gt; と指定している部分を、以下のように &lt;code&gt;extra-deps&lt;/code&gt; へ追加するだけです。また、 &lt;code&gt;subdirs&lt;/code&gt; を指定している場合は単純に分割して指定します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/bitemyapp/esqueleto.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 08c9b4cdf977d5bcd1baba046a007940c1940758&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./submodules/haskell-lsp/haskell-lsp-types&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; streaming-commons-0.2.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;extra-deps&lt;/code&gt; の構文は従来の &lt;code&gt;stack&lt;/code&gt; でも使えるので、今から対応しておいても問題ないと思います。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
&lt;!--more--&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html</id><title type="text">RecordWildCards と Reader モナド</title><updated>2018-08-26T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Twitter&lt;/code&gt; で &lt;code&gt;RecordWildCards&lt;/code&gt; の話が流れて来たので &lt;code&gt;Reader&lt;/code&gt; モナドと組み合わせた例を1つご紹介します。&lt;/p&gt;
&lt;p&gt;この書き方は &lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さんが使っていてカッコイイ書き方だなぁと思った記憶があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;func &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- personName, personAge という名前でそのまま値を利用できる&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RecordWildCards&lt;/code&gt; に関しては既に色んな方が記事にしてくれているので、そちらをご参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rf0444.hatenablog.jp/entry/20120617/1339910411&#34;&gt;Haskellの言語拡張たち 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2016/12/18/181540&#34;&gt;波打たせるものの正体(エクステンシブル・タングル)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-wildcards&#34;&gt;GHC user guide 10.5.5. Record wildcards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;p&gt;あまり良い例が思いつかなかったのですが、 &lt;code&gt;Env&lt;/code&gt; に必要な情報を持たせておけば任意のタイミングで利用できて便利です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.IO.Class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Monad.Trans.Reader&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.IORef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Time.LocalTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; envCounter  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IORef&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envLogPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; envUserName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;  counter &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;        { envCounter  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;        , envLogPath  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;./output.log&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;        , envUserName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;wado&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;  runReaderT (access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; access) env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;  n &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef counter&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;counter = &amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; n]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;ot&#34;&gt;access ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;access &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ask &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;  modifyIORef envCounter (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-35&#34; title=&#34;35&#34;&gt;  now &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getZonedTime&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-36&#34; title=&#34;36&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;appendFile&lt;/span&gt; (toFilePath envLogPath)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [envUserName, &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;access&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot; (&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; now, &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs
counter = 3

$ cat ./output.log
wado: access (2018-08-26 14:04:07.132813451 JST)
wado: access (2018-08-26 14:04:07.133330363 JST)
wado: access (2018-08-26 14:04:07.133389916 JST)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;missing-fields-警告&#34;&gt;missing-fields 警告&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;    personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のようにフィールドが全て初期化されていないコードはコンパイル時に &lt;code&gt;missing-fields&lt;/code&gt; 警告が出ます。&lt;/p&gt;
&lt;p&gt;この警告を無視すると実行時エラーになる可能性があります。無視せずにしっかり修正しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;warning&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Wmissing&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;fields]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;’ &lt;span class=&#34;fu&#34;&gt;not&lt;/span&gt; initialised&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; personAge&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘f’&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;          f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; {&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;                personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dv&#34;&gt;46&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、通常のレコード構文でもフィールドが部分的にしか初期化されていない場合は、同様の警告がでます。(&lt;span class=&#34;citation&#34; data-cites=&#34;fumieval&#34;&gt;@fumieval&lt;/span&gt; さん、ご指摘ありがとうございます)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; personName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; personAge  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; { personName &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bigmoon&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/5334&#34;&gt;record wildcards: field not initialised reported as type error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RecordWildCards 言語拡張は現実世界ではとても便利 (レコードのフィールドがかなり沢山あったりするので)&lt;/li&gt;
&lt;li&gt;Reader とかと組み合わせるとオシャレ&lt;/li&gt;
&lt;li&gt;GHC の &lt;code&gt;missing-fields&lt;/code&gt; 警告は絶対に無視しない (実行時エラーが発生する可能性がある)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html</id><title type="text">path ＆ path-io パッケージ</title><updated>2018-08-21T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-21-path-and-path-io.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Haskell でファイルやディレクトリを扱うプログラムを書く時によく使うパッケージとして &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/filepath-1.4.2&#34;&gt;filepath&lt;/a&gt; パッケージや &lt;a href=&#34;https://www.stackage.org/lts-12.7/package/directory-1.3.1.5&#34;&gt;directory&lt;/a&gt; パッケージがあります。(Haskell入門の「4.4 ファイルシステム」に &lt;strong&gt;directory&lt;/strong&gt; パッケージの話が少し載っています。)&lt;/p&gt;
&lt;p&gt;これらのパッケージは結局のところただの文字列操作なので、バグを出さないためにはパッケージ利用者がかなり注意深く使わなければなりません。&lt;/p&gt;
&lt;p&gt;例えば、以下のようなパスは型レベルでは同じ文字列 (&lt;strong&gt;FilePath&lt;/strong&gt;) ですが&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathRel ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;pathRel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathAbs ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;pathAbs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;user&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;bbb&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;ccc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ファイルへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;pathFile &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;png&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ディレクトリへのパス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pathDir ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;pathDir &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;./&lt;/span&gt;aaa&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、&lt;strong&gt;FilePath&lt;/strong&gt; 型では&lt;strong&gt;相対パス&lt;/strong&gt;なのか&lt;strong&gt;絶対パス&lt;/strong&gt;なのか型レベルで判断する方法が無かったり、そもそもパスが&lt;strong&gt;ファイル&lt;/strong&gt;なのか&lt;strong&gt;ディレクトリ&lt;/strong&gt;なのかすらわからなかったりします。&lt;/p&gt;
&lt;p&gt;今回紹介するのは、型レベルでこれらをちゃんと分類できるようにしている &lt;a href=&#34;https://github.com/commercialhaskell/path&#34;&gt;path&lt;/a&gt; と &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージです。&lt;/p&gt;
&lt;p&gt;型レベルで &lt;strong&gt;相対パス&lt;/strong&gt; or &lt;strong&gt;絶対パス&lt;/strong&gt; と &lt;strong&gt;ファイル&lt;/strong&gt; or &lt;strong&gt;ディレクトリ&lt;/strong&gt; を表現するため、不正な操作はコンパイル時にチェックできるようになります。&lt;/p&gt;
&lt;p&gt;また、&lt;strong&gt;stack&lt;/strong&gt; の内部でも利用していたので、実用しても大丈夫だと思います。&lt;/p&gt;
&lt;p&gt;パッケージのバージョンは以下のとおりです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path-0.6.1&lt;/li&gt;
&lt;li&gt;path-io-1.3.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだまだ更新が活発なパッケージなので、path-0.7 では破壊的変更を含む更新があるようです。(&lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt;)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;path-パッケージ&#34;&gt;path パッケージ&lt;/h2&gt;
&lt;p&gt;ドキュメントが充実しているので &lt;a href=&#34;https://github.com/commercialhaskell/path/blob/master/README.md&#34;&gt;Readme&lt;/a&gt; を読めば使い方はすぐにわかると思います。&lt;/p&gt;
&lt;h3 id=&#34;データ型&#34;&gt;データ型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; の型は &lt;code&gt;FilePath&lt;/code&gt; を幽霊型 (Phantom type) を使ってラップしているだけです。(幽霊型については &lt;a href=&#34;https://qiita.com/nobkz/items/5926257a375a4a181dde&#34;&gt;ElmでPhantom Type (幽霊型)入門&lt;/a&gt; や &lt;a href=&#34;https://qiita.com/HirotoShioi/items/3444e215070144b8ca0f&#34;&gt;で、出たー！幽霊型だー！(Phantom Type)&lt;/a&gt; などが日本語のわかりやすい解説だと思います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで2つの型変数の意味は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - 相対パス or 絶対パス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; - ファイル or ディレクトリ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型変数 &lt;code&gt;b&lt;/code&gt; は実際には以下の型のどちらかを取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同様に型変数 &lt;code&gt;t&lt;/code&gt; は以下の型を取ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的なパスの型は以下の4種類のどれかになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの絶対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ファイルへの相対パス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ディレクトリへの相対パス&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型を見るだけでどんなパスなのか一目瞭然なので、めっちゃ良いですね。&lt;/p&gt;
&lt;h3 id=&#34;値の作り方&#34;&gt;値の作り方&lt;/h3&gt;
&lt;p&gt;型については説明したので、次は実際に &lt;code&gt;Path&lt;/code&gt; 型の値を作っていきましょう！&lt;/p&gt;
&lt;h4 id=&#34;パースする方法&#34;&gt;パースする方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型は4種類あるので、パーズする関数も4種類あります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MonadThrow m&lt;/code&gt; がついていますが、この &lt;code&gt;m&lt;/code&gt; は &lt;code&gt;IO&lt;/code&gt; だと思えば以下の型と同じですし&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; であれば、以下の型と同じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelDir  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseAbsFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Abs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parseRelFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;難しいことはあまり気にせず、(&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/exceptions-0.10.0/Control-Monad-Catch.html#t:MonadThrow&#34;&gt;MonadThrow&lt;/a&gt; 型クラスのインスタンスになっている) 色んなモナドで使えるんだなと思えば良いと思います。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;ghci&lt;/code&gt; を使って動作を確認してみましょう！&lt;/p&gt;
&lt;pre class=&#34;shel&#34;&gt;&lt;code&gt;$ stack repl --package path
&amp;gt; import Path

# 型のチェック
&amp;gt; :t parseAbsDir &amp;quot;/&amp;quot;
parseAbsDir &amp;quot;/&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)
&amp;gt; :t parseAbsDir &amp;quot;./&amp;quot;
parseAbsDir &amp;quot;./&amp;quot; :: MonadThrow m =&amp;gt; m (Path Abs Dir)

# IO モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot;
&amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./&amp;quot;

# Maybe モナドの文脈
&amp;gt; parseAbsDir &amp;quot;/&amp;quot; :: Maybe (Path Abs Dir)
Just &amp;quot;/&amp;quot;
&amp;gt; parseAbsDir &amp;quot;./&amp;quot; :: Maybe (Path Abs Dir)
Nothing

# 以下のような &amp;quot;../&amp;quot; を含むパスはパーズできない
&amp;gt; parseAbsDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;
&amp;gt; parseRelDir &amp;quot;./../a/b/&amp;quot;
*** Exception: InvalidAbsDir &amp;quot;./../a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで文字列から &lt;code&gt;Path&lt;/code&gt; 型に変換する方法がわかりましたね！結構簡単です。&lt;/p&gt;
&lt;h4 id=&#34;template-haskell-quasiquotes&#34;&gt;Template Haskell &amp;amp; QuasiQuotes&lt;/h4&gt;
&lt;p&gt;コンパイル時にすでにファイルパスが決まっている時はテンプレートHaskellや準クォートを使うこともできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsDir &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;chris&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkAbsFile &lt;span class=&#34;st&#34;&gt;&amp;quot;/home/chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelFile &lt;span class=&#34;st&#34;&gt;&amp;quot;chris/x.txt&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;[absdir|/home/chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;[reldir|chris|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;[absfile|/home/chris/x.txt|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;[relfile|chris/x.txt|]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで不正なパスはコンパイル時エラーとなるため、かなり安全ですね。&lt;/p&gt;
&lt;h3 id=&#34;path-から-filepath-への変換&#34;&gt;Path から FilePath への変換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 型の値を &lt;code&gt;FilePath&lt;/code&gt; に変換するためには &lt;code&gt;toFilePath&lt;/code&gt; 関数を利用します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
&amp;quot;a/b/&amp;quot;

&amp;gt; toFilePath &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a////b//////&amp;quot;
&amp;quot;a/b/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じで期待している文字列に変換されているか確かめることができます。&lt;/p&gt;
&lt;h3 id=&#34;パスの等価性&#34;&gt;パスの等価性&lt;/h3&gt;
&lt;p&gt;2つの &lt;code&gt;Path&lt;/code&gt; の等しさは単純に文字列の等価性として定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  (&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; x) (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にいくつか試してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot;
True

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/c&amp;quot;
False

&amp;gt; (==) &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;./a/b/&amp;quot;
True&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パスの操作&#34;&gt;パスの操作&lt;/h3&gt;
&lt;p&gt;関数と実行結果のみを紹介していきます。&lt;/p&gt;
&lt;h4 id=&#34;つのパスの結合&#34;&gt;2つのパスの結合&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;/&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一引数は &lt;strong&gt;Dir&lt;/strong&gt; で第二引数は &lt;strong&gt;Rel&lt;/strong&gt; が指定されている点に注意してください。そのため、第一引数にファイルへのパスを与えようとするとコンパイルエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelFile &amp;quot;a.png&amp;quot;
&amp;quot;a/b/c/a.png&amp;quot;

&amp;gt; (&amp;lt;/&amp;gt;) &amp;lt;$&amp;gt; parseRelDir &amp;quot;a/b/c&amp;quot; &amp;lt;*&amp;gt; parseRelDir &amp;quot;d&amp;quot;
&amp;quot;a/b/c/d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスの先頭部分からディレクトリパスを除去&#34;&gt;パスの先頭部分から、ディレクトリパスを除去&lt;/h4&gt;
&lt;p&gt;Data.List の &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.7/base-4.11.1.0/Data-List.html#v:stripPrefix&#34;&gt;stripPrefix&lt;/a&gt; 関数と同じように利用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;stripProperPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; t)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/usr/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
&amp;quot;stack&amp;quot;

&amp;gt; join $ stripProperPrefix &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/local/bin/&amp;quot; &amp;lt;*&amp;gt; parseAbsFile &amp;quot;/usr/local/bin/stack&amp;quot;
*** Exception: NotAProperPrefix &amp;quot;/local/bin/&amp;quot; &amp;quot;/usr/local/bin/stack&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;パスから親ディレクトリパスを取得&#34;&gt;パスから親ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;parent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;ab&amp;quot;
&amp;quot;./&amp;quot;

&amp;gt; parent &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;a/b/c/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ディレクトリパスから相対ディレクトリパスを取得&#34;&gt;ディレクトリパスから、相対ディレクトリパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dirname ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dir&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; dirname &amp;lt;$&amp;gt; parseAbsDir &amp;quot;/a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;

&amp;gt; dirname &amp;lt;$&amp;gt; parseRelDir &amp;quot;./a/b/c/d&amp;quot;
&amp;quot;d/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから相対ファイルパスを取得&#34;&gt;ファイルパスから相対ファイルパスを取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;filename ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; filename &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;

&amp;gt; filename &amp;lt;$&amp;gt; parseRelFile &amp;quot;./a/b/c/d.png&amp;quot;
&amp;quot;d.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスから拡張子を取得&#34;&gt;ファイルパスから拡張子を取得&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; fileExtension &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;

&amp;gt; fileExtension &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.png&amp;quot;
&amp;quot;.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加&#34;&gt;ファイルパスに拡張子を追加&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;addFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ addFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ addFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;

&amp;gt; join $ (&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.rs.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;既に拡張子があっても、追加する点に注意。&lt;/p&gt;
&lt;h4 id=&#34;ファイルパスに拡張子を追加-既に拡張子がある場合は置き換える&#34;&gt;ファイルパスに拡張子を追加 (既に拡張子がある場合は置き換える)&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;setFileExtension ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 演算子バージョンとして (-&amp;lt;.&amp;gt;) が定義されている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(-&amp;lt;.&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadThrow&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; join $ setFileExtension &amp;quot;hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseAbsFile &amp;quot;/a/b/c&amp;quot;
&amp;quot;/a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ setFileExtension &amp;quot;.hs&amp;quot; &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;

&amp;gt; join $ (-&amp;lt;.&amp;gt; &amp;quot;.hs&amp;quot;) &amp;lt;$&amp;gt; parseRelFile &amp;quot;a/b/c.rs&amp;quot;
&amp;quot;a/b/c.hs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;path-io&#34;&gt;path-io&lt;/h2&gt;
&lt;p&gt;ここまでで &lt;code&gt;Path&lt;/code&gt; 型の定義や値の作り方、操作する関数などを見てきました。&lt;/p&gt;
&lt;p&gt;しかしながら、これだけでは実際にファイルを作ったり削除したりすることはできません。文字列に変換して &lt;code&gt;directory&lt;/code&gt; パッケージを利用することもできますが、やはり &lt;code&gt;Path&lt;/code&gt; 型のまま使いたいですよね。&lt;/p&gt;
&lt;p&gt;そのためには &lt;a href=&#34;https://github.com/mrkkrp/path-io&#34;&gt;path-io&lt;/a&gt; パッケージを利用すると良いです。内部的には &lt;code&gt;directory&lt;/code&gt; パッケージを再利用していますが、&lt;code&gt;Path&lt;/code&gt; 型で使えるようにラップしてくれています。(また、便利な関数もいくつか追加されています)&lt;/p&gt;
&lt;h3 id=&#34;サンプルプログラム&#34;&gt;サンプルプログラム&lt;/h3&gt;
&lt;p&gt;例えばこんな感じで使えます。以下の例はコマンドライン引数から受け取った文字列に拡張子 &lt;code&gt;.hs&lt;/code&gt; を追加して適当な内容で保存し、最後にディレクトリを再帰的にコピーする例です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.7&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Path.IO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt; (when)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-12&#34; title=&#34;12&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-13&#34; title=&#34;13&#34;&gt;  args &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getArgs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-15&#34; title=&#34;15&#34;&gt;  when (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; args &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; src  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./src&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-17&#34; title=&#34;17&#34;&gt;        dest &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkRelDir &lt;span class=&#34;st&#34;&gt;&amp;quot;./.backup&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- 安全にディレクトリを作成&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; ensureDir [src, dest]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-22&#34; title=&#34;22&#34;&gt;    rawName &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; parseRelFile &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-23&#34; title=&#34;23&#34;&gt;    fn &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (src &lt;span class=&#34;fu&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; rawName) &lt;span class=&#34;fu&#34;&gt;-&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;writeFile&lt;/span&gt; (toFilePath fn) &lt;span class=&#34;st&#34;&gt;&amp;quot;main :: IO ()\nmain = undefined\n&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ディレクトリを再帰的にコピー&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-28&#34; title=&#34;28&#34;&gt;    copyDirRecur&amp;#39; src dest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ./Sample.hs aaa

$ tree -a .
.
├── .backup
│   └── aaa.hs
├── Sample.hs
└── src
    └── aaa.hs

2 directories, 3 files

$ cat src/aaa.hs
main :: IO ()
main = undefined

$ cat .backup/aaa.hs
main :: IO ()
main = undefined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;動いているようです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filepath&lt;/code&gt; や &lt;code&gt;directory&lt;/code&gt; パッケージでは文字列の操作となってしまうため、コンパイル時に不正な利用方法をチェックできない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; や &lt;code&gt;path-io&lt;/code&gt; は幽霊型を使って不正な利用をコンパイル時にチェックする&lt;/li&gt;
&lt;li&gt;実際に &lt;code&gt;stack&lt;/code&gt; でも利用されているパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-08-18-haskell-github-webhook.html</id><title type="text">Haskell Servant で GitHub Webhook</title><updated>2018-08-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-08-18-haskell-github-webhook.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell Servant で GitHub Webhook&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-08-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Aug 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/rio.html&#34;&gt;rio&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;久々の投稿． とある事情で GitHub Webhook 用のサーバーを Haskell で書いたのでそのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; のロガーを Servant で使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/servant-github-webhook&#34;&gt;servant-github-webhook&lt;/a&gt; を使って Webhook 用の Servant サーバーの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際に書いたコードは&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/commit/b93ed3398b30dbba105a580d58e947f131cf1a9a&#34;&gt;この辺り&lt;/a&gt;を見ると良いかな． 色々と途中のうえ，そもそも GitHub Webhook がメインではないリポジトリなので見にくい気がするけど．&lt;/p&gt;
&lt;h2 id=&#34;servant-で-rio-モナド&#34;&gt;Servant で rio モナド&lt;/h2&gt;
&lt;p&gt;これはまぁおまけですね． rio はロギングとかが便利なので，先に紹介して以降で利用する．&lt;/p&gt;
&lt;h3 id=&#34;ロガーの準備&#34;&gt;ロガーの準備&lt;/h3&gt;
&lt;p&gt;まずはロギング用のモナドを定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasLogFunc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;  logFuncL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lens (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger) (\x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;ot&#34;&gt;`set`&lt;/span&gt; y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いわゆる Has パターンというやつ． これで &lt;code&gt;RIO Env&lt;/code&gt; というのがロガーを扱えるモナドとなる．&lt;/p&gt;
&lt;h3 id=&#34;servant-でカスタムモナド&#34;&gt;Servant でカスタムモナド&lt;/h3&gt;
&lt;p&gt;Servent Server のメイン関数は下記のように定義できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Network.Wai.Handler.Warp&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Warp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;  logOpts &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;  withLogFunc logOpts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \logger &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; logger&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; nil ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    hPutBuilder stdout &lt;span class=&#34;st&#34;&gt;&amp;quot;Listening on port 8080&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;    Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; app env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，問題はこの &lt;code&gt;app&lt;/code&gt; 関数だ． 普通は &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#t:Server&#34;&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; 型と &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#v:serve&#34;&gt;&lt;code&gt;serve&lt;/code&gt;&lt;/a&gt; 関数を用いて次のように書く．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;api ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;api &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;  serve api server&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; 型の代わりに，カスタムモナドを利用するには &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#t:ServerT&#34;&gt;&lt;code&gt;ServerT&lt;/code&gt;&lt;/a&gt; 型と &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#v:hoistServer&#34;&gt;&lt;code&gt;hoistServer&lt;/code&gt;&lt;/a&gt; 関数を用いる． それぞれの型定義は次のようになっている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; api &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; api &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;serve ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasServer&lt;/span&gt; api &amp;#39;[] &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; api &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hoistServer ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasServer&lt;/span&gt; api &amp;#39;[] &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; m x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; n x) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; api m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; api n&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さぁあとは型パズルだ！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;app env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; serve api &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; hoistServer api (runRIO env) server&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで　&lt;code&gt;server&lt;/code&gt; 関数で呼び出す， API ごとの関数で &lt;code&gt;logInfo&lt;/code&gt; のような rio のロギング関数を呼ぶことができる．&lt;/p&gt;
&lt;h2 id=&#34;servant-で-github-webhhok&#34;&gt;Servant で GitHub Webhhok&lt;/h2&gt;
&lt;p&gt;さて色々準備ができたので，いよいよ GitHub Webhook の方に話を移す． Haskell Servant で GitHub Webhook を使うには &lt;a href=&#34;http://hackage.haskell.org/package/servant-github-webhook&#34;&gt;servant-github-webhook&lt;/a&gt;というパッケージを使う． 意外と，このパッケージの使い方を書いた記事がなく手間取ったのでまとめる．&lt;/p&gt;
&lt;h3 id=&#34;ping-api-を作る&#34;&gt;ping API を作る&lt;/h3&gt;
&lt;p&gt;ping API は GitHub Webhook の設定がうまくできてるかを確認する API だ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-github-webhook/ping-event.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ping API は次のように設定すれば良い．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;GitHub.Data.Webhooks.Events&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hook&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;&amp;#39;WebhookPingEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pingWebhook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pingWebhook ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;RepoWebhookEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ((), &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plant&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; title=&#34;17&#34;&gt;pingWebhook _ (_, ev) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; title=&#34;18&#34;&gt;  logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hook Ping Event: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; displayShow ev&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub Webhook を使うには Servant の Context 機能でシークレットキーを渡す必要がある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt;       (getEnv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gitHubKey &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_SECRET&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;    Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; app env key&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;app env key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;  serveWithContext api (key &lt;span class=&#34;fu&#34;&gt;:.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmptyContext&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;    hoistServerWithContext api context (runRIO env) server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;context ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;context &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行するときは &lt;code&gt;GH_SECRET&lt;/code&gt; 環境変数に設定した文字列を GitHub Webhook の設定の Secret に書き込む．&lt;/p&gt;
&lt;h3 id=&#34;push-api-を加える&#34;&gt;push API を加える&lt;/h3&gt;
&lt;p&gt;もう一個 API を生やしてみよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;&amp;#39;WebhookPingEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;&amp;#39;WebhookPushEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;PushEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pingWebhook &lt;span class=&#34;fu&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; pushWebhook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pushWebhook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RepoWebhookEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ((), &lt;span class=&#34;dt&#34;&gt;PushEvent&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plant&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;pushWebhook _ (_, ev) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;  logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hook Push Event: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; displayShow ev&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでビルドすると次のようなエラーが出てくる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Main.hs:38:3: error:
    • No instance for (HasContextEntry &amp;#39;[] (GitHubKey&amp;#39; () PushEvent))
        arising from a use of ‘serveWithContext’
    • In the expression: serveWithContext api (key :. EmptyContext)
      In the expression:
        serveWithContext api (key :. EmptyContext)
          $ hoistServerWithContext api context (runRIO env) server
      In an equation for ‘app’:
          app env key
            = serveWithContext api (key :. EmptyContext)
                $ hoistServerWithContext api context (runRIO env) server
   |
38 |   serveWithContext api (key :. EmptyContext) $ hoistServerWithContext api context (runRIO env) server
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tsani/servant-github-webhook/issues/13#issuecomment-408463124&#34;&gt;ググった結果&lt;/a&gt;，こうするといいらしい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;    &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;, gitHubKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;   (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;, gitHubKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;app env key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;context ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;context &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- HACK&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; result&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook.GitHubKey&lt;/span&gt; result)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;gitHubKey ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;gitHubKey k &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; (Servant.GitHub.Webhook.gitHubKey k)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasContextEntry&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;] (&lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook.GitHubKey&lt;/span&gt; result) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;  getContextEntry (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;:.&lt;/span&gt; _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;ちなみに，手元で試すときには ngrok を使った． 便利．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-12-quiz-16.html</id><title type="text">二分木の操作 (Haskell Quiz No.16)</title><updated>2018-08-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-12-quiz-16.html"/><summary type="html">&lt;h2 id=&#34;haskell-quiz-no.16&#34;&gt;Haskell Quiz No.16&lt;/h2&gt;
&lt;p&gt;難易度: λλ&lt;/p&gt;
&lt;p&gt;以下のような二分木の定義があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下の操作を定義してみましょう！&lt;/p&gt;
&lt;h3 id=&#34;部分木を左右反転させた木を返す関数&#34;&gt;(1) 部分木を左右反転させた木を返す関数&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mirror ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;mirror &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;mirror 関数適用前&#34;&gt; → &lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_after.svg&#34; alt=&#34;mirror 関数適用後&#34;&gt;&lt;/p&gt;
&lt;p&gt;左の木に &lt;strong&gt;mirror&lt;/strong&gt; 関数を適用すると、右の木を返します。&lt;/p&gt;
&lt;h3 id=&#34;木の高さを計算する関数&#34;&gt;(2) 木の高さを計算する関数&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;depth ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;depth &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;depth&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;depth&lt;/strong&gt; 関数で上記の木の高さを計算すると &lt;strong&gt;3&lt;/strong&gt; になります。&lt;/p&gt;
&lt;h3 id=&#34;木が平衡かチェックする関数&#34;&gt;(3) 木が平衡かチェックする関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;平衡の定義: 左右の部分木の高さが高々1しか違わない&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isBalanced ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;isBalanced &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img style=&#34;width: 45%&#34; src=&#34;/images/2018/08-12/mirror_before.svg&#34; alt=&#34;isBalanced&#34;&gt;&lt;/p&gt;
&lt;p&gt;上記の木は &lt;strong&gt;平衡&lt;/strong&gt; です。&lt;/p&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#t:Functor&#34;&gt;Functor&lt;/a&gt; と &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#t:Foldable&#34;&gt;Foldable&lt;/a&gt; のインスタンスを定義してみましょう！(ここでは &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#v:fmap&#34;&gt;fmap&lt;/a&gt; と &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Prelude.html#v:foldMap&#34;&gt;foldMap&lt;/a&gt; を定義することにします。)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  fmap ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  foldMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答えは次回。&lt;/p&gt;
&lt;p&gt;※ 図の作成には &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt;というツールを使っています。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programming in Haskell (14.2 Foldables and friends)&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 Haskell で学ぶ原理と技法 (8.3.2 木による表現)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cis.syr.edu/courses/cis623/p2.html&#34;&gt;CIS 623&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;./07-24-quiz-15.html&#34;&gt;前回&lt;/a&gt;の問題と答えは以下の通りです。&lt;/p&gt;
&lt;h3 id=&#34;問題&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;難易度: λ&lt;/p&gt;
&lt;p&gt;葉に&lt;strong&gt;だけ&lt;/strong&gt;値を持つような&lt;strong&gt;二分木&lt;/strong&gt;を定義してみてください！&lt;/p&gt;
&lt;p&gt;図で書くとこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/2018/07-24/tree.svg&#34; alt=&#34;木の図&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;こたえ&#34;&gt;こたえ&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- より一般的な定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;解説&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;この定義を使って図の木を作るとこんな感じになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;t ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;t &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; t1 t3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;    t1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) t2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    t2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;    t3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;where&lt;/strong&gt; を使わない場合はこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;intTree ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;intTree &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;    (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Leaf&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/08-07-arrow-operators.html</id><title type="text">(^&gt;&gt;) と (&gt;&gt;^)</title><updated>2018-08-07T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/08-07-arrow-operators.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Control-Arrow.html#&#34;&gt;Control.Arrow&lt;/a&gt; モジュールに &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Control-Arrow.html#v:-94--62--62-&#34;&gt;(^&amp;gt;&amp;gt;)&lt;/a&gt; と &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.5/base-4.11.1.0/Control-Arrow.html#v:-62--62--94-&#34;&gt;(&amp;gt;&amp;gt;^)&lt;/a&gt; という演算子が定義されています。&lt;/p&gt;
&lt;p&gt;ちょっとだけ面白かったので紹介しようと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;
&lt;p&gt;例として、文字列を全て&lt;strong&gt;大文字&lt;/strong&gt;に変換する関数を考えてみましょう。&lt;/p&gt;
&lt;p&gt;素朴に書けばこんな感じでしょうか。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (toUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toAllUpper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;toAllUpper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toUpper&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は以下のように期待通りに動きます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;*Main&amp;gt; toAllUpper &amp;quot;B|g0on&amp;quot;
&amp;quot;B|G0ON&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではここで、同じように &lt;code&gt;Text&lt;/code&gt; バージョンを作りたいと思います。何も考えずに pack と unpack を使えばすぐ定義できますね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt; (toUpper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toAllUpper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;toAllUpper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toUpper&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toAllUpperText ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;toAllUpperText &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; toAllUpper &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; T.unpack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数も同様にちゃんと動きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; toAllUpperText &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; T.pack &lt;span class=&#34;st&#34;&gt;&amp;quot;B|g0on&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;B|G0ON&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;と-を無理矢理使ってみる&#34;&gt;(^&amp;gt;&amp;gt;) と (&amp;gt;&amp;gt;^) を無理矢理使ってみる&lt;/h2&gt;
&lt;p&gt;先程定義した &lt;code&gt;toAllUpperText&lt;/code&gt; 関数は &lt;code&gt;(^&amp;gt;&amp;gt;)&lt;/code&gt; と &lt;code&gt;(&amp;gt;&amp;gt;^)&lt;/code&gt; を使って、以下のように書き直すことができます。(&lt;code&gt;Control.Arrow&lt;/code&gt; をインポートする必要があります。)&lt;/p&gt;
&lt;p&gt;左から右バージョン&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toAllUpperText&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;toAllUpperText&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; T.unpack &lt;span class=&#34;fu&#34;&gt;^&amp;gt;&amp;gt;&lt;/span&gt; toAllUpper &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;^&lt;/span&gt; T.pack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;右から左バージョン&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toAllUpperText&amp;#39;&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;toAllUpperText&amp;#39;&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;lt;^&lt;/span&gt; toAllUpper &lt;span class=&#34;fu&#34;&gt;^&amp;lt;&amp;lt;&lt;/span&gt; T.unpack&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数合成 (&lt;code&gt;.&lt;/code&gt;) を単純に置き換えただけです・・・。&lt;/p&gt;
&lt;h3 id=&#34;型&#34;&gt;型&lt;/h3&gt;
&lt;p&gt;この演算子の何が面白いかと言うと、&lt;strong&gt;入力&lt;/strong&gt;と&lt;strong&gt;出力&lt;/strong&gt;をそれぞれ変換できるんですね！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(^&amp;gt;&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a c d &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;^) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b d&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;&amp;lt;^) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a c d &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(^&amp;lt;&amp;lt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b d&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先程の例は &lt;code&gt;Arrow a&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; を関数型 &lt;code&gt;(-&amp;gt;)&lt;/code&gt; として具体化したものになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(^&amp;gt;&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a c d &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a b d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- a = (-&amp;gt;) として具体化した&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;    (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;) c d &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;) b d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数の順番を逆にすれば関数合成の型と同じですね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- 引数を逆にした&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;  (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; d)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;co&#34;&gt;-- 変数名の変更&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(.) ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;現実世界で Arrow をバリバリ使っているコードをみかけることは (僕は) 全く無いです。(Hakyll は過去に Arrow ベースで定義されていたようですが、Monad ベースに切り替わりました)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;たぶん使うことは無いですが、パズルみたいで楽しい。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/07-31-yesodsecurity.html</id><title type="text">Yesod には脆弱性があるのかな？</title><updated>2018-07-31T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/07-31-yesodsecurity.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yesodweb.com/&#34;&gt;Yesod&lt;/a&gt; は Haskell で書かれた Web アプリケーションフレームワークです。&lt;/p&gt;
&lt;p&gt;WordPress や Drupal と違って、セキュリティはかなり万全です。(ユーザが気にしなければならない部分が非常に少ないです)&lt;/p&gt;
&lt;p&gt;最近、&lt;a href=&#34;https://www.sbcr.jp/products/4797393163.html&#34;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 (通称: 徳丸本)&lt;/a&gt; が発売されました。&lt;/p&gt;
&lt;p&gt;勉強のため、本書の内容を Yesod で確認しているのですが、その中で面白い例を見つけました。&lt;/p&gt;
&lt;p&gt;今回はその内容について紹介したいと思います。(セキュリティの専門家ではないので間違いがあればご指摘ください)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;脆弱性のあるコード&#34;&gt;脆弱性のあるコード&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- stack script --resolver lts-12.4&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE QuasiQuotes           #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell       #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies          #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Yesod&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;mkYesod &lt;span class=&#34;st&#34;&gt;&amp;quot;App&amp;quot;&lt;/span&gt; [parseRoutes|&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;/ HomeR GET&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;|]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Yesod&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getHomeR ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;getHomeR &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; defaultLayout &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;  mname &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookupGetParam &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  [whamlet|&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;$maybe&lt;/span&gt; name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mname&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; onload=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;#{name}&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.yesodweb.com/static/logo-home2-no-esod-smaller2.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;$nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;      パラメータが設定されていません。&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;  |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;  toWidget [julius|&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(text) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;co&#34;&gt;// 何かしらの処理&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;  |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; warp &lt;span class=&#34;dv&#34;&gt;3000&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードには脆弱性があります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yesod&lt;/strong&gt; の変数展開 &lt;code&gt;#{..}&lt;/code&gt; は、このような &lt;strong&gt;JavaScript&lt;/strong&gt; の動的生成でも大丈夫だろうと思っていたのですが、そうではありませんでした。&lt;/p&gt;
&lt;h3 id=&#34;正常系&#34;&gt;正常系&lt;/h3&gt;
&lt;p&gt;期待する動作として、例えば &lt;code&gt;http://localhost/?name=bigmoon&lt;/code&gt; いう形式の &lt;strong&gt;URL&lt;/strong&gt; にアクセスすると、以下のような URL が組み立てられます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; onload=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;bigmoon&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは予定通りです。&lt;/p&gt;
&lt;h3 id=&#34;異常系&#34;&gt;異常系&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;URL&lt;/strong&gt; の形式を &lt;code&gt;http://localhost/?name=%27),alert(XSS)//&lt;/code&gt; とするとインジェクションが発生します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; onload=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;%27),alert(XSS)//&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;読みやすさのため、パーセントエンコーディングを元に戻します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; onload=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;&amp;#39;),alert(XSS)//&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;alert&lt;/code&gt; が出てきてしまいましたね・・・。&lt;/p&gt;
&lt;p&gt;余談ですが &lt;strong&gt;Yesod&lt;/strong&gt; ではパラメータ中に出現する &lt;code&gt;;&lt;/code&gt; をパラメータの区切り文字として認識するようです。そのため &lt;code&gt;http://localhost/?name=%27);alert(XSS)//&lt;/code&gt; ではインジェクションは発生しません。&lt;/p&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;
&lt;p&gt;問題はどこにあるのでしょうか？&lt;/p&gt;
&lt;p&gt;パラメータを取得しているコードはこの部分です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;mname &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookupGetParam &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-12.4/yesod-core-1.6.6/Yesod-Core-Handler.html#v:lookupGetParam&#34;&gt;lookupGetParam&lt;/a&gt; の型は以下の通りです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;lookupGetParam ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadHandler&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、&lt;code&gt;mname :: Maybe Text&lt;/code&gt; 型となってしまいます。ここが問題の原因です。&lt;/p&gt;
&lt;p&gt;ただの &lt;strong&gt;Text&lt;/strong&gt; 型なので変数展開時に &lt;strong&gt;HTMLのエスケープ処理&lt;/strong&gt; が行われます。本来ならば &lt;strong&gt;JavaScript&lt;/strong&gt; 用のエスケープ処理が必要なのです。&lt;/p&gt;
&lt;h2 id=&#34;展開部分を改良してみる&#34;&gt;展開部分を改良してみる&lt;/h2&gt;
&lt;p&gt;では &lt;strong&gt;Javascript&lt;/strong&gt; 型に変換すれば問題は解決するのでしょうか？&lt;/p&gt;
&lt;p&gt;試しに以下のようにコードを変更してみました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;img onload&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;#{renderJavascript $ toJavascript $ rawJS $ name}&amp;#39;)&amp;quot;&lt;/span&gt; src&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ですが、やはり結果は同じです。&lt;/p&gt;
&lt;h2 id=&#34;エスケープ処理&#34;&gt;エスケープ処理&lt;/h2&gt;
&lt;p&gt;ソースコードを追いかけてみるとどうやら &lt;strong&gt;Value&lt;/strong&gt; の値については &lt;a href=&#34;https://www.stackage.org/haddock/lts-12.4/shakespeare-2.0.15/src/Text.Julius.html#string&#34;&gt;string&lt;/a&gt; というサニタイザーが適用されるようです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;string ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T.Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Builder&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;string s &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;{-# SCC &amp;quot;string&amp;quot; #-}&lt;/span&gt; singleton &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; quote s &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; singleton &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    quote q &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; T.uncons t &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;      &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fromText h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;c,t&amp;#39;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fromText h &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; escape c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; quote t&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; (h,t) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;{-# SCC &amp;quot;break&amp;quot; #-}&lt;/span&gt; T.break isEscape q&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;    isEscape c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;                 c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;                 c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;                 c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;                 c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;                 c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\x20&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u003c&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u003e&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;    escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u0026&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;    escape c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\x20&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;replicate&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; h) &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; singleton c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; h &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; showHex (&lt;span class=&#34;fu&#34;&gt;fromEnum&lt;/span&gt; c) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なので、先程のコードを少し修正してこの &lt;code&gt;string&lt;/code&gt; を適用してみました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;img onload&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;init(&amp;#39;#{renderJavascript $ toJavascript $ rawJS $ string $ name}&amp;#39;)&amp;quot;&lt;/span&gt; src&lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、これでもやっぱりだめです。なぜなら &lt;code&gt;&#39;&lt;/code&gt; に対してはサニタイズしていないからだと思います。&lt;/p&gt;
&lt;h3 id=&#34;string-関数の修正&#34;&gt;string 関数の修正&lt;/h3&gt;
&lt;p&gt;以下のように &lt;code&gt;&#39;&lt;/code&gt; のエスケープ処理を追加したところ、インジェクションが発生しなくなりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;isEscape c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;             c &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\x20&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u003c&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u003e&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u0026&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;escape &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;#39;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; を動的に組み立てない&lt;/li&gt;
&lt;li&gt;ユーザが気をつけなけば &lt;strong&gt;Yesod&lt;/strong&gt; でも脆弱性が発生する&lt;/li&gt;
&lt;li&gt;変数展開で全てがエスケープされると思っていたが、場所によってはそれだけでは不十分な場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html</id><title type="text">deriveJsonNoPrefixをリリースしました</title><updated>2018-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;前回の更新からちょっと時間が空いてしまいました 💦&lt;br /&gt;
小ネタです。掲題の通り&lt;a href=&#34;http://hackage.haskell.org/package/deriveJsonNoPrefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;というパッケージをリリースしました。&lt;br /&gt;
地味に有用だと思うので、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/master/README.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をやや意訳気味に翻訳して記事にします。&lt;br /&gt;
十分に単純なので、仕様が変わることもまさかないでしょうし。&lt;/p&gt;
&lt;p&gt;以下、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/6114e0fc55cf5b57a771871e53971a51592f618b/README.md&#34;&gt;こちらのコミットの時点の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;の翻訳です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;同じ問題を解決するほかのライブラリー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;プレフィックスに優しい&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを定義する&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロを提供します。&lt;/p&gt;
&lt;h2 id=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;例&lt;/h2&gt;
&lt;p&gt;こんな感じの&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;を作りたいとしましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode json&#34;&gt;&lt;code class=&#34;sourceCode json&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ID STRING&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;max&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.789&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;min&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.123&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きっと&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ToJSON&lt;/span&gt;&lt;/a&gt;（おそらくそれに加えて&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:FromJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;FromJSON&lt;/span&gt;&lt;/a&gt;も）のインスタンスを自動的に定義するための、次のようなレコード型を定義したくなるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.TH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; id ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; max ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; min ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveToJSON defaultOptions &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、こんなレコード型は定義すべきではありません。&lt;br /&gt;
&lt;code&gt;id&lt;/code&gt;も&lt;code&gt;max&lt;/code&gt;も&lt;code&gt;min&lt;/code&gt;も、&lt;code&gt;Prelude&lt;/code&gt;に定義済みなのですから！&lt;/p&gt;
&lt;p&gt;この問題を回避するために、レコードラベルに型の名前をプレフィックスとして加える、ということをわれわれはよくやります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; someRecordId ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMax ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして、&lt;code&gt;deriveToJSON&lt;/code&gt;にデフォルトと異なるオプションを渡して実行します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;st&#34;&gt;&amp;quot;SomeRecord&amp;quot;&lt;/span&gt;) } &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fieldLabelModifier&lt;/code&gt;オプションは文字通り、対象のレコードを&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換するとき、あるいは&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;から対象のレコードの値に変換する時、レコードのラベルを変換する関数を設定するために使います。&lt;br /&gt;
👆の場合、プレフィックスである&lt;code&gt;SomeRecord&lt;/code&gt;の文字数分レコードラベルから&lt;code&gt;drop&lt;/code&gt;して、先頭の文字&lt;small&gt;（&lt;code&gt;someRecordId&lt;/code&gt;で言えば&lt;code&gt;Id&lt;/code&gt;の&lt;code&gt;I&lt;/code&gt;に相当します）&lt;/small&gt;を小文字に変換しているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;そう、これが&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;がやっていることとほぼ同等のことです。&lt;br /&gt;
&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;は、実質次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;deriveToJsonNoTypeNamePrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Q&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;deriveToJsonNoTypeNamePrefix deriver name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;  deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; dropPrefix name } name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dropPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;dropPrefix name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nameBase name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果、これからは&lt;code&gt;fieldLabelModifier&lt;/code&gt;をもう自分で定義する必要がありません！🙌&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.DeriveNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveJsonNoTypeNamePrefix &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆 の&lt;code&gt;deriveJsonNoTypeNamePrefix&lt;/code&gt; は &lt;a href=&#34;https://hackage.haskell.org/package/aeson/docs/Data-Aeson-TH.html#v:deriveJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJSON&lt;/span&gt;&lt;/a&gt;と同様に、&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンス、両方を生成します。&lt;br /&gt;
もちろん、&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを生成するときのオプションとしても、プレフィックスを削除するための&lt;code&gt;fieldLabelModifier&lt;/code&gt;を渡してくれます！&lt;/p&gt;
&lt;h2 id=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;同じ問題を解決するほかのライブラリー&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;など、&lt;code&gt;ToJSON&lt;/code&gt;・&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスが定義された&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので、そうした&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリーが学習コストや依存関係などの事情で「重たい」と感じたときにこのパッケージを使ってください。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-07-01-join-ruby-hack-challenge4.html</id><title type="text">Ruby Hack Challenge ＃4 に参加してきた</title><updated>2018-07-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-07-01-join-ruby-hack-challenge4.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Ruby Hack Challenge ＃4 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-07-01&#34; itemprop=&#34;datePublished&#34;&gt;
        Jul 1, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Ruby.html&#34;&gt;Ruby&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先週 &lt;a href=&#34;https://cookpad.connpass.com/event/88471/&#34;&gt;Ruby Hack Cavalage #4&lt;/a&gt; に参加してきたので，そのメモ書きです．&lt;/p&gt;
&lt;p&gt;ちなみに，Ruby は自分が最初に触ったスクリプト言語で，現在仕事で使っているメインの言語です． 推し言語(Haskell)とは異なり，動的型付けではありますが，「&lt;a href=&#34;http://i.loveruby.net/ja/rhg/book/&#34;&gt;Rubyソースコード完全解説&lt;/a&gt;」や「&lt;a href=&#34;https://tatsu-zine.com/books/ruby-under-a-microscope-ja&#34;&gt;Rubyのしくみ&lt;/a&gt;」のような処理系内部を紹介してる読み物も多く，かなり好きな方な言語です.&lt;/p&gt;
&lt;h2 id=&#34;ruby-hack-challenge&#34;&gt;Ruby Hack Challenge&lt;/h2&gt;
&lt;p&gt;Ruby 処理系をハックしようというイベントで，コアコミッタの &lt;a href=&#34;https://github.com/mame&#34;&gt;mame&lt;/a&gt; 氏と &lt;a href=&#34;https://github.com/ko1&#34;&gt;ko1&lt;/a&gt; 氏が講師として企画してくれている． ふたりが在籍しているということで，会場はクックパッドで行っている．&lt;/p&gt;
&lt;p&gt;毎回，前半に講義的なものがあり，後半で実際に手を動かして Ruby にコミットするといった感じらしい． ただし，2日開催だったり，半日だったり時間はまちまち(今回は半日だった)． イベント名的に Ruby のハッカソンみたいだが，Ruby 処理系はC言語で書かれているためC言語を書くことになる(笑)&lt;/p&gt;
&lt;h3 id=&#34;カバレッジ特別会&#34;&gt;カバレッジ特別会&lt;/h3&gt;
&lt;p&gt;しかし，4回目(となっているが3回目が見当たらないので3回目かも？？)となる今回は，カバレッジ特別会ということで多くの人たちが Ruby を読み書きしていた． なぜかというと，標準ライブラリは Ruby で書かれており，今回は標準ライブラリのテストカバレッジをあげても良かったからだ． というか，C で書かれているコア部分は mame 氏が昔に大分カバレッジをあげてしまったため，そっちをやるのは難しいと言っていた．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;C言語の部分で残っているとすれば本質的に難しい部分(副作用とか並行並列とか)か最近追加された部分か(JITとか？)だそうだ．&lt;/p&gt;
&lt;h3 id=&#34;資料&#34;&gt;資料&lt;/h3&gt;
&lt;p&gt;今までのも含め，資料は(いくつか？)公開されているので誰でも見れる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ko1/rubyhackchallenge&#34;&gt;ko1/rubyhackchallenge - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/mametter/ruby-hack-challenge-4&#34;&gt;Ruby Hack Challenge #4 カバレッジ特別回 資料 - SlideShare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また Gitter で連絡を取り合っており，実は誰でも参加できる(たぶん)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/rubyhackchallenge/Lobby&#34;&gt;rubyhackchallenge/Lobby - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，ボクはもともとこのイベントは参加したいなぁと思っていた(言語好きなので)．&lt;/p&gt;
&lt;h2 id=&#34;ruby-のテストカバレッジ&#34;&gt;Ruby のテストカバレッジ&lt;/h2&gt;
&lt;p&gt;Ruby のテストカバレッジは Web から確認できる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rubyci.s3.amazonaws.com/debian8-coverage/ruby-trunk/lcov/index.html&#34;&gt;LCOV - code coverage report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを見てカバレッジの低いところにねらい目を付けてテストを追加する(ないしは不要な実装なら削る)． 標準ライブラリのいくつかは個別に GitHub で管理されているので，GitHub で管理されてる場合はそっちに PR を投げれば良いようだ(今回は事情が共有されてたせいかすぐマージされた)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/ruby/ruby/blob/trunk/doc/maintainers.rdoc&#34;&gt;ココ&lt;/a&gt;を見ると誰がメンテナーで，どこに報告すれば良いかが書いてある．&lt;/p&gt;
&lt;h3 id=&#34;環境構築&#34;&gt;環境構築&lt;/h3&gt;
&lt;p&gt;は事前にやっとくと，当日はすんなりコミットできた(構築方法はスライドに書いてある)． 事前にって言ってもぼくは行きの電車でやったけど(笑)&lt;/p&gt;
&lt;p&gt;Windows と Mac を持ってるけど，どっちも素でやるのは難しいので，Debian の Docker コンテナの上で構築した． Docker ありがとう！ ビルドがめっちゃ遅いけどね！&lt;/p&gt;
&lt;h2 id=&#34;当日やったこと&#34;&gt;当日やったこと&lt;/h2&gt;
&lt;p&gt;すっっっごい簡単にカバレッジをあげれそうなのがあったのサクッと直して PR をだした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruby/cmath/pull/2&#34;&gt;Add test for coverage by matsubara0507 · Pull Request #2 · ruby/cmath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;CMath&lt;/code&gt; モジュールは &lt;code&gt;Math&lt;/code&gt; モジュールをラップして複素数(Complex number)にまで対応させたものだ． そのため，虚数を含む複素数に関するテストしかなく，実数に関するテストが無かったためカバレッジが低かった． 愚直に全部書いたら100%まで行きましたちゃんちゃんってだけです．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，他にも4,5個ほど PR が出ていた． すごいね！&lt;/p&gt;
&lt;h2 id=&#34;もくもく会&#34;&gt;もくもく会&lt;/h2&gt;
&lt;p&gt;あと，Ruby Hack Challenge もくもく会というのがあるらしいので行ってみたい(&lt;a href=&#34;https://connpass.com/event/93131/&#34;&gt;次回はこれ&lt;/a&gt;)． MJIT のコードとか読んでみたいよね． それと型検査(はどうなるかまだ分からないらしいけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;そういえば，ko1 氏がお子さんと奥さんを連れてきていた(たぶん)． そういう事に理解のある会社っていいなぁと感じた．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-21-challenge-rust-reversi.html</id><title type="text">rust-reversi やってみた</title><updated>2018-06-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-21-challenge-rust-reversi.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;rust-reversi やってみた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-21&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 21, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Rust.html&#34;&gt;Rust&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;現在，会社の同期と週一で Rust の勉強会をやっていまして，普段は &lt;a href=&#34;https://y-yu.github.io/trpl-2nd-pdf/book.pdf&#34;&gt;The Rust Programming Language: 2nd Edition の日本語版&lt;/a&gt; を輪読しているのですが，3月ぐらいにあった &lt;a href=&#34;https://internship.cookpad.com/2018/spring/&#34;&gt;Cookpad Spring 1day Internship 2018&lt;/a&gt; の Rust コースの資料が公開されたため，皆でハッカソンしてみました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KOBA789/rust-reversi&#34;&gt;KOBA789/rust-reversi: Cookpad Spring 1day Internship 2018 Rust プログラミングコースで使用された講義資料 - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は実際にやってみてのメモ書きです． 主に躓いたとこのメモです．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，ぼくの Rust の経験値は上記の本を17章まで読んだだけで，ほとんど書いたことないですね(輪読は7章，自分で少し先を読んでいる)． あと，&lt;a href=&#34;https://github.com/matsubara0507/rust-reversi/tree/reversi-impl&#34;&gt;回答はフォークしてあげてあります&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;躓いたところ&#34;&gt;躓いたところ&lt;/h3&gt;
&lt;p&gt;めちゃくちゃしょーーーーもないところばっかです(笑)&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;固定長配列の map&lt;/li&gt;
&lt;li&gt;パターンマッチの変数&lt;/li&gt;
&lt;li&gt;index の x と y が逆&lt;/li&gt;
&lt;li&gt;既に置いてあるかの検査&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;何を作っているか&#34;&gt;何を作っているか&lt;/h3&gt;
&lt;p&gt;そもそも課題は何かというと，オセロ(リバーシ)です． 試しに実行してみるとこんな感じ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
   Compiling reversi v0.1.0 (file:///Users/nobutada.matsubara/git/rust/rust-reversi)
     Running `target/debug/reversi`
  a b c d e f g h
 +-+-+-+-+-+-+-+-+
1| | | | | | | | |
 +-+-+-+-+-+-+-+-+
2| | | | | | | | |
 +-+-+-+-+-+-+-+-+
3| | | | | | | | |
 +-+-+-+-+-+-+-+-+
4| | | |O|X| | | |
 +-+-+-+-+-+-+-+-+
5| | | |X|O| | | |
 +-+-+-+-+-+-+-+-+
6| | | | | | | | |
 +-+-+-+-+-+-+-+-+
7| | | | | | | | |
 +-+-+-+-+-+-+-+-+
8| | | | | | | | |
 +-+-+-+-+-+-+-+-+

B 2 - 2 W
Turn: Black
  a b c d e f g h
 +-+-+-+-+-+-+-+-+
1| | | | | | | | |
 +-+-+-+-+-+-+-+-+
2| | | | | | | | |
 +-+-+-+-+-+-+-+-+
3| | | | | | | | |
 +-+-+-+-+-+-+-+-+
4| | |X|X|X| | | |
 +-+-+-+-+-+-+-+-+
5| | | |X|O| | | |
 +-+-+-+-+-+-+-+-+
6| | | | | | | | |
 +-+-+-+-+-+-+-+-+
7| | | | | | | | |
 +-+-+-+-+-+-+-+-+
8| | | | | | | | |
 +-+-+-+-+-+-+-+-+

B 4 - 1 W
Turn: White
0) c3
1) c5
2) e3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全部一から作れではなく，リポジトリをクローンして &lt;code&gt;src/coord.rs&lt;/code&gt; と &lt;code&gt;src/board.rs&lt;/code&gt; の &lt;code&gt;unimplemented!();&lt;/code&gt; となっている個所の実装を与えるだけ． ご丁寧なことにテストも用意してあるので，&lt;code&gt;cargo test&lt;/code&gt; を実行しまくってオールグリーンになれば出来上がり(たぶん)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，クライアントの同期が &lt;code&gt;unimplemented();&lt;/code&gt; に感動していたので，調子に乗って &lt;a href=&#34;https://matthew.brecknell.net/post/hole-driven-haskell/&#34;&gt;Hole driven Programming&lt;/a&gt; について語ってしまった．&lt;/p&gt;
&lt;h3 id=&#34;関数が呼べない&#34;&gt;0. 関数が呼べない&lt;/h3&gt;
&lt;p&gt;ゼロ引数関数は &lt;code&gt;xxx.method&lt;/code&gt; はダメで，&lt;code&gt;xxx.method()&lt;/code&gt; しなきゃいけないってのが何度もあった(笑) 普段は Haskell を書いているせいですね．&lt;/p&gt;
&lt;h3 id=&#34;固定長配列の-map&#34;&gt;1. 固定長配列の map&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたとき、指定の方向へひっくり返せる石の数を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたときの `Move` を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 戻り値の `Move` には8方向分の `get_flip` の結果が含まれる&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_move(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord) -&amp;gt; Move &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;pp&#34;&gt;unimplemented!&lt;/span&gt;();&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とあり&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Move &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; pos: Coord,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;    flips: &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; DIRECTIONS: &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;Coord; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; = &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;co&#34;&gt;//左上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//真上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//右上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//真左&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//真右&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//左下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//真下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//右下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なので，&lt;code&gt;move.flips = DIRECTIONS.map (|dir| self.get_flip(piece, pos, dir))&lt;/code&gt; って具合にいけそうだと思ったのだ． しかし，悲しいことに組み込みでは &lt;strong&gt;固定長配列に対するこのような操作はないようだ&lt;/strong&gt;(間違っていたらゴメンナサイ…)． なので結局諦めて for 文を回した…&lt;/p&gt;
&lt;p&gt;何か良い方法があったら教えて欲しい.&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチの変数&#34;&gt;2. パターンマッチの変数&lt;/h3&gt;
&lt;p&gt;すごい間抜けな話です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたとき、指定の方向へひっくり返せる石の数を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;///&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `piece` - 置く石の色&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `pos` - 石を置く位置&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `dir` - ひっくり返せる石を探す方向。`DIRECTIONS` の要素のいずれかが渡される&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; opponent = piece.opponent();&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; cnt = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;        pos += dir;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;pos&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;           =&amp;gt; &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece)    =&amp;gt; &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; cnt,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(opponent) =&amp;gt; cnt += &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とか書いていたが，全然テストが通らない． それもそのはずで &lt;strong&gt;パターンマッチの中の変数は代入になる&lt;/strong&gt; だけで，&lt;code&gt;if self.matrix[target] == Some(piece) { ... }&lt;/code&gt; とは異なる． シャーディングぅぅぅぅぅとか思ったけど，きっと警告出てたよね…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;warning: unreachable pattern
   --&amp;gt; src/board.rs:165:17
    |
165 |                 Some(opponent) =&amp;gt; cnt += 1,
    |                 ^^^^^^^^^^^^^^
    |
    = note: #[warn(unreachable_patterns)] on by default

warning: unused variable: `opponent`
   --&amp;gt; src/board.rs:158:13
    |
158 |         let opponent = piece.opponent();
    |             ^^^^^^^^ help: consider using `_opponent` instead
    |
    = note: #[warn(unused_variables)] on by default

warning: unused variable: `piece`
   --&amp;gt; src/board.rs:164:22
    |
164 |                 Some(piece)    =&amp;gt; return cnt,
    |                      ^^^^^ help: consider using `_piece` instead

warning: unused variable: `opponent`
   --&amp;gt; src/board.rs:165:22
    |
165 |                 Some(opponent) =&amp;gt; cnt += 1,
    |                      ^^^^^^^^ help: consider using `_opponent` instead&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出てたね…&lt;/p&gt;
&lt;h3 id=&#34;index-の-x-と-y-が逆&#34;&gt;3. index の x と y が逆&lt;/h3&gt;
&lt;p&gt;普段二重配列とかやんないからさ…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// ベクトルを表現する構造体&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Coord(&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;i8&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;i8&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// `[]` 演算子のオーバーロード&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;impl&lt;/span&gt; Index&amp;lt;Coord&amp;gt; &lt;span class=&#34;kw&#34;&gt;for&lt;/span&gt; Matrix &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Output = &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt;&amp;lt;Piece&amp;gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;co&#34;&gt;/// 第一引数に与えられた座標の状態を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;co&#34;&gt;/// 座標が盤面の範囲外であった場合は None が返る。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; index(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, index: Coord) -&amp;gt; &amp;amp;&lt;span class=&#34;kw&#34;&gt;Self&lt;/span&gt;::Output &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.is_in_range(index) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;            &amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;index.&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;usize&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;][&lt;/span&gt;index.&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;usize&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;            &amp;amp;&lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とか最初書いていた． &lt;code&gt;Coord&lt;/code&gt; 型はひとつ目が X 座標でふたつ目が Y 座標． &lt;code&gt;&amp;amp;self.0[index.0 as usize][index.1 as usize]&lt;/code&gt; のところが逆ですね…&lt;/p&gt;
&lt;h3 id=&#34;既に置いてあるかの検査&#34;&gt;4. 既に置いてあるかの検査&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;moves&lt;/code&gt; のテストが何故かとおらない． &lt;code&gt;moves&lt;/code&gt; は盤上の全ての合法手，“手” を表す &lt;code&gt;Move&lt;/code&gt; 型は手を打つ場所(&lt;code&gt;Coord&lt;/code&gt; 型)と各方向のひっくり返す数を持っている，を列挙する関数．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---- board::tests::test_board_moves stdout ----
	thread &amp;#39;board::tests::test_board_moves&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
  left: `6`,
 right: `37`&amp;#39;, src/board.rs:366:9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;めちゃくちゃ多い． テストを読んでイロイロと出力させてみたところ，既にピースが置いてある場合のチェックを忘れていた(バカ)．&lt;/p&gt;
&lt;h3 id=&#34;オールグリーン&#34;&gt;オールグリーン&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cargo test
   Compiling reversi v0.1.0 (file:///Users/nobutada.matsubara/git/rust/rust-reversi)
    Finished dev [unoptimized + debuginfo] target(s) in 1.27 secs
     Running target/debug/deps/reversi-ae2013b8997f878b

running 12 tests
test board::tests::test_board_count_mut ... ok
test board::tests::test_board_get_move ... ok
test board::tests::test_board_get_flip ... ok
test board::tests::test_board_do_move ... ok
test board::tests::test_do_flip ... ok
test board::tests::test_matrix_index ... ok
test board::tests::test_board_moves ... ok
test board::tests::test_matrix_index_mut ... ok
test board::tests::test_matrix_is_in_range ... ok
test board::tests::test_move_is_legal ... ok
test coord::tests::test_coord_add ... ok
test coord::tests::test_coord_add_assign ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;基本構文を覚えてないので，とりあえず雑に書いてビルドして怒られたら直す，的なことをしながら，静的検査さいこ～とか言いながらやってた(疲れてる)． おかげで &lt;code&gt;&amp;amp;&lt;/code&gt; とか &lt;code&gt;*&lt;/code&gt; を雑にあつかってて良くないですね． まぁ楽しかったからいいけど．&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get_flip&lt;/code&gt; 関数のところ，関数型プログラマーらしく(?)再帰にして見た. 速度は変わるんかな？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.go_get_flip(piece, pos, dir).unwrap_or(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; go_get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt;&amp;gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; target = pos + dir;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;target&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; == &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece.opponent()) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.go_get_flip(piece, target, dir).map(|x| x + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;target&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; == &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Haskell 版でも作ってみようかしらん．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html</id><title type="text">Earlang ＆ Elixir Fest 2018 に参加してきた</title><updated>2018-06-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Earlang ＆ Elixir Fest 2018 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elixir.html&#34;&gt;Elixir&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先日(6/16)，&lt;a href=&#34;https://elixir-fest.jp/&#34;&gt;Earlang &amp;amp; Elixir Fest 2018&lt;/a&gt; に参加してきたので，そのメモ書きです． ちなみに，Elixir は普段たいして使ってないけど LT もしてきました．&lt;/p&gt;
&lt;h4 id=&#34;追記2018.06.21&#34;&gt;追記(2018.06.21)&lt;/h4&gt;
&lt;p&gt;本稿公開後に公開してくださった発表スライドのリンクを追記しました．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;今年で2回目らしく，去年は Elixir の作者の &lt;a href=&#34;https://twitter.com/josevalim&#34;&gt;Jose Valim&lt;/a&gt; 氏を呼んで Keynote してもらい，全体のセッション内容としては Elixir を導入し始めた・挑戦中という話がメインだったようだ． 今年はどっちかっていうとプロダクトに実践導入・運用してみてどうだったかという話がメインだそうだ． また，並行してハンズオンがあったらしいが，行ってないのでそっちは良く分からない． ハンズオンの資料は GitHub に公開してあるので，いずれやってみたい(同期とかとハンズオンしてみてもいいかも)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohr486/ErlangElixirFestHandsOn&#34;&gt;ohr486/ErlangElixirFestHandsOn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと &lt;a href=&#34;https://togetter.com/li/1238110&#34;&gt;Togetter にまとめてみました&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;メモ&#34;&gt;メモ&lt;/h2&gt;
&lt;p&gt;各企業での導入した話が多かったので簡単なメモばっかです．&lt;/p&gt;
&lt;h4 id=&#34;らくらく連絡網が-elixir-でリアルタイムメッセージング基盤を刷新した話&#34;&gt;「らくらく連絡網」が Elixir でリアルタイムメッセージング基盤を刷新した話&lt;/h4&gt;
&lt;p&gt;(ネットワーク設定にバタバタしてたのでメモが少ない)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rinosamakanata&#34;&gt;rinosamakanata&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eole-repos.github.io/public/elixirfest/2018/elixirfest2018-eole-rinosamakanata.pdf&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;もともとは RoR らしい&lt;/li&gt;
&lt;li&gt;技術的課題
&lt;ul&gt;
&lt;li&gt;分散の問題&lt;/li&gt;
&lt;li&gt;長い目で見たときの保守・運用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フロントエンドは Elm
&lt;ul&gt;
&lt;li&gt;「関数型良いよね」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;負荷テストのために不可掛けの Docker コンテナを作った&lt;/li&gt;
&lt;li&gt;Elixir のバージョンアップが多い(リリースしてから9回もあった)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asdf-vm/asdf-elixir&#34;&gt;asdf&lt;/a&gt; で難なく&lt;/li&gt;
&lt;li&gt;Ruby や RoR よりぜんぜん簡単&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実質的にメンテナンスフリー&lt;/li&gt;
&lt;li&gt;Erlang は書けなくても導入できる
&lt;ul&gt;
&lt;li&gt;ただし BEAM の知識はいる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/happi/theBeamBook&#34;&gt;The BEAM Book&lt;/a&gt; おすすめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近 Ruby や Ruby のライブラリのバージョンアップで苦しんでいるのを見てたのでバージョンアップがシームレスなの羨ましい．&lt;/p&gt;
&lt;h4 id=&#34;初めてのerlangサーバ開発と運用&#34;&gt;初めてのErlangサーバ開発と運用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mookjp&#34;&gt;mookjp&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/mookjp/chu-metefalseerlangsahakai-fa-toyun-yong?slide=1&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang をどう勉強したかや失敗談などの話&lt;/li&gt;
&lt;li&gt;Node.js から Erlang へ (たぶん)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://erlang.org/doc/man/observer.html&#34;&gt;observer&lt;/a&gt; という Erlang プロセスの可視化ツールが便利&lt;/li&gt;
&lt;li&gt;Erlang サーバーをプロダクションに導入するときの設定
&lt;ul&gt;
&lt;li&gt;思想の記事ばっか！&lt;/li&gt;
&lt;li&gt;実際の設定に関する記事が少ない！！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不必要なプロセスやその監視プロセスが微妙に残ってじわじわ CPU 使用率が上がってしまった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.erlang-in-anger.com/&#34;&gt;Erlang in Anger&lt;/a&gt; を絶対に読む
&lt;ul&gt;
&lt;li&gt;運用に役立ちそうなことがたくさん書いてある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://erlang-slack.herokuapp.com/&#34;&gt;Erlang の Slack ワークスペース&lt;/a&gt;がおススメ！
&lt;ul&gt;
&lt;li&gt;紹介した監視の VMStats もここで教えてもらった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思想の記事が多い話，なんとなく Haskell にも似たようなところがあって笑った&lt;/p&gt;
&lt;h4 id=&#34;keep-phoenix-app-productivity&#34;&gt;Keep Phoenix App Productivity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kanmo_ak&#34;&gt;kanmo_ak&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kanmo/keep-phoenix-app-productivity?slide=1&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix Application 開発1年・運用1年してみた結果の話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixirschool.com/en/lessons/advanced/umbrella-projects/&#34;&gt;Umbrella&lt;/a&gt; によって Project を分割
&lt;ul&gt;
&lt;li&gt;肥大化してきた&lt;/li&gt;
&lt;li&gt;複数のサービスをひとつのリポジトリで別々に開発&lt;/li&gt;
&lt;li&gt;サービス間でコードを共有できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ひとつのファイルを書き換えるだけでコンパイル対象が膨大…
&lt;ul&gt;
&lt;li&gt;ファイル間の依存関係がひどいので切っていく&lt;/li&gt;
&lt;li&gt;マクロを変更するとやり直し&lt;/li&gt;
&lt;li&gt;構造体を変更するとやばい&lt;/li&gt;
&lt;li&gt;プロトコルも依存がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&#34;&gt;&lt;code&gt;mix xref&lt;/code&gt;&lt;/a&gt; タスクが便利&lt;/li&gt;
&lt;li&gt;モジュール名を動的に組み立てて依存を無理やり切る黒魔術(使わない方がいい)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang プロセスだと remsh で起動中のプロセスに接続して調査できる&lt;/li&gt;
&lt;li&gt;Elixir バージョンアップは追いやすい
&lt;ul&gt;
&lt;li&gt;RoR に比べて(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Type Spec を書いておくとドキュメントになる
&lt;ul&gt;
&lt;li&gt;Dializer は使ってない(時間が無かった)&lt;/li&gt;
&lt;li&gt;spec ないとつらいと感じたの私自身です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昔 Type Spec が書いてあったが間違ってるおかげで痛い目にあったので書いたやつを静的にチェックしたいですよね…&lt;/p&gt;
&lt;h4 id=&#34;from-python-to-elixir&#34;&gt;from Python to Elixir&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kenichirow&#34;&gt;kenichirow&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;Python から Elixir に移行
&lt;ul&gt;
&lt;li&gt;Python 2020 年問題(2系のサポートが終わる)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Phoenix は最初は使わないつもりだった
&lt;ul&gt;
&lt;li&gt;Django からだと暗黙的な何某が多い印象(マクロ)&lt;/li&gt;
&lt;li&gt;PubSub いらない&lt;/li&gt;
&lt;li&gt;なので自作 FW を作ってた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;突然 Phoenix 宣言
&lt;ul&gt;
&lt;li&gt;「お前 Dis れるほど Phoenix 知ってるのかよ」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ecto にはいくつかの問題&lt;/li&gt;
&lt;li&gt;なのでライブラリを作った &lt;a href=&#34;https://github.com/gumi/yacto&#34;&gt;Yacto&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;DB分割・XAトランザクションなど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各ゲームの基盤を Template にしていたがバージョン管理がつらいのでライブラリに&lt;/li&gt;
&lt;li&gt;Elixir のサポートチーム
&lt;ul&gt;
&lt;li&gt;ググる前に聞け&lt;/li&gt;
&lt;li&gt;最近しんどいので Stack Overflow Team を導入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言語変えて解決した問題は少しだけ
&lt;ul&gt;
&lt;li&gt;ただ整備するきっかけにはなった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基盤チームカッコいい&lt;/p&gt;
&lt;h4 id=&#34;ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる&#34;&gt;ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ne-sachirou&#34;&gt;さっちゃん&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ne_sachirou/sutetohurudeda-gui-mo-akusesufalsearusoft-realtimenagemusabawoeasynitukuru&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix でゲーム作って運用したはなし&lt;/li&gt;
&lt;li&gt;AWS + Kube + Phoenix&lt;/li&gt;
&lt;li&gt;Real time PvP がメインなのに RoR は大変&lt;/li&gt;
&lt;li&gt;どっちみちイロイロ知見が無いので新しい技術使っても苦労はするでしょ
&lt;ul&gt;
&lt;li&gt;Elixir の知見はある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/inner_cotton/readme.html&#34;&gt;InnerCotton&lt;/a&gt; を作った&lt;/li&gt;
&lt;li&gt;FP は知ってた&lt;/li&gt;
&lt;li&gt;Channel と Redis で PvP&lt;/li&gt;
&lt;li&gt;ホットデプロイはあきらめた&lt;/li&gt;
&lt;li&gt;優先度付きキューを自作 &lt;a href=&#34;https://hex.pm/packages/pqueue2&#34;&gt;queue2&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;既存のモノは間違ってるものが多かったので&lt;/li&gt;
&lt;li&gt;スタックになっているものもあった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/nesachirou/elixir/&#34;&gt;docker image&lt;/a&gt; を作った(Elixir と Erlang の両方が指定できる)&lt;/li&gt;
&lt;li&gt;Elixir の監視つらい&lt;/li&gt;
&lt;li&gt;もっと publish していこうぜ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;社内でやったことドンドン Publish できるのいいなぁ．&lt;/p&gt;
&lt;h4 id=&#34;channel先生-pubsubがしたいです&#34;&gt;Channel先生…!! PubSubがしたいです…&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohr486&#34;&gt;ohrdev&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ohr486/erlangelixirfest2018-ohr486-session&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;~Erlang in Anger~ PubSub in Channel&lt;/li&gt;
&lt;li&gt;「PubSub しない Phoenix はただの Rails だ」&lt;/li&gt;
&lt;li&gt;Phoenix Channel + PubSub&lt;/li&gt;
&lt;li&gt;PubSub は2種類ある
&lt;ul&gt;
&lt;li&gt;ローカル PubSub ・リモート PubSub&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「これカッコよくないっすか、見るたびにすごいぞくぞくする」&lt;/li&gt;
&lt;li&gt;PubSub バックエンドは選択できる&lt;/li&gt;
&lt;li&gt;どれだけ知っといた方がいいか？
&lt;ul&gt;
&lt;li&gt;基本は知らなくても&lt;/li&gt;
&lt;li&gt;新しい Adaptar を作る場合は知ってないといけない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PubSub 完全に理解した(嘘)&lt;/p&gt;
&lt;h4 id=&#34;antikythera-framework-an-elixir-framework-for-multiple-web-services&#34;&gt;Antikythera Framework: An Elixir framework for multiple web services&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skirino&#34;&gt;skirino&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skirino.github.io/slides/antikythera_framework.html#/&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;社内で作ったフレームワークの紹介 : &lt;a href=&#34;https://github.com/access-company/antikythera&#34;&gt;antikythera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Antikythera メカニズム
&lt;ul&gt;
&lt;li&gt;ギリシャ時代のオーパーツ&lt;/li&gt;
&lt;li&gt;なにかよくわからない&lt;/li&gt;
&lt;li&gt;星の動き？？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;複数のサービスをひとつのフレームワークで管理&lt;/li&gt;
&lt;li&gt;Gear : Webサービスの単位・他の Gear に依存しうる
&lt;ul&gt;
&lt;li&gt;instance より細かい単位&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コア機能
&lt;ul&gt;
&lt;li&gt;リソースコントロール&lt;/li&gt;
&lt;li&gt;自動オペレーション(ホットデプロイなど)&lt;/li&gt;
&lt;li&gt;ログなどビルドインに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gear はマイクロサービスで疎結合だが管理は統一&lt;/li&gt;
&lt;li&gt;リソース管理は ErlangVM なので一長一短&lt;/li&gt;
&lt;li&gt;DB はどうするか？
&lt;ul&gt;
&lt;li&gt;DB は知らない(Gear にしない)&lt;/li&gt;
&lt;li&gt;ふつうに Ecto とかで&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜ Erlang じゃないか？
&lt;ul&gt;
&lt;li&gt;mix が優秀&lt;/li&gt;
&lt;li&gt;mix compiler でフックできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mix すごいのはよくわかる．&lt;/p&gt;
&lt;h4 id=&#34;任意のbeam系言語でプラグインを書ける安定したフレームワークの作りかた&#34;&gt;任意のBEAM系言語でプラグインを書ける安定したフレームワークの作りかた&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/niku&#34;&gt;niku&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://niku.name/2018/06/16/slide.html&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BEAM系プラグインを作る上でのノウハウ&lt;/li&gt;
&lt;li&gt;また PubSub の話ですいません&lt;/li&gt;
&lt;li&gt;フレームワークとプラグイン&lt;/li&gt;
&lt;li&gt;プラグイン機構を持つ FW には登場人物が3人
&lt;ul&gt;
&lt;li&gt;フレームワークとプラグインを使う人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プラグインでエラーが起きたときフレームワークはどうするか&lt;/li&gt;
&lt;li&gt;「絵にかくとこんな感じ」&lt;/li&gt;
&lt;li&gt;Supervisor は他の言語ではあまりない
&lt;ul&gt;
&lt;li&gt;こいつのおかげで別粒度間のプロセス管理が楽&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゆかいに学ぼうの Supervisor の章は良くできている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;絵に書くとこんな感じってのがじわじわ来る．&lt;/p&gt;
&lt;h4 id=&#34;erlang-事例紹介-メディアストリーム中継システム&#34;&gt;Erlang 事例紹介: メディアストリーム中継システム&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amutake&#34;&gt;amutake&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://niconare.nicovideo.jp/watch/kn3115&#34;&gt;発表スライドはコチラ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ニコニコのスライド置き場あったんだ(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ニコ生で使われる(予定)のシステムの話(Erlang 製)&lt;/li&gt;
&lt;li&gt;生放送の中継ツリー&lt;/li&gt;
&lt;li&gt;生放送に求められる性質&lt;/li&gt;
&lt;li&gt;ストリーム中継システム : sluicegate の作成
&lt;ul&gt;
&lt;li&gt;いつか OSS になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学術的に研究されたアルゴリズム(独自ではなく)
&lt;ul&gt;
&lt;li&gt;HyParView&lt;/li&gt;
&lt;li&gt;Plumtree&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡単にできるけど無駄にメッセージパッシングすると遅くなる
&lt;ul&gt;
&lt;li&gt;軽い処理をメッセージパッシングするとだめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang クラスタは組まない&lt;/li&gt;
&lt;li&gt;Plumtree の性質があれだった
&lt;ul&gt;
&lt;li&gt;なので自分たちで改造&lt;/li&gt;
&lt;li&gt;根幹なので定理証明(Coq で実装)
&lt;ul&gt;
&lt;li&gt;PPLにて発表した&lt;/li&gt;
&lt;li&gt;生放送ストリーム中継システムのCoqによる形式化と検証&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ぱぶさぶくん(検証ツール)&lt;/li&gt;
&lt;li&gt;水道局(可視化ツール)
&lt;ul&gt;
&lt;li&gt;水路という自作ライブラリを使っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分散アルゴリズムを書きやすい&lt;/li&gt;
&lt;li&gt;調査しやすい
&lt;ul&gt;
&lt;li&gt;reduction の取得のしやすさは Erlang in Anger&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coq のコードから Erlang に変換するものがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか研究の話聞いてるみたいで聞きやすかった(笑)&lt;/p&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT&lt;/h3&gt;
&lt;p&gt;自分も LT したので細かいメモは無い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOC の話
&lt;ul&gt;
&lt;li&gt;朝にアクシデントがあったようで…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;個人で Elixir してきた話(日本一 Elixir 本を書いている)&lt;/li&gt;
&lt;li&gt;Elixir 完全に理解した(ちょっとできる人がいればいい)&lt;/li&gt;
&lt;li&gt;Elixir Programming with Type checking (自分)&lt;/li&gt;
&lt;li&gt;ElixirScript の話&lt;/li&gt;
&lt;li&gt;PubSub Redis
&lt;ul&gt;
&lt;li&gt;phoenix_pubusu_redis_z&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dialyzer のすすめ&lt;/li&gt;
&lt;li&gt;Erlang on ARM サーバー
&lt;ul&gt;
&lt;li&gt;未発表のもの&lt;/li&gt;
&lt;li&gt;秒間40まんリクエストをさばいてる&lt;/li&gt;
&lt;li&gt;ミドルウェアの世界に来い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どうやら MVP は「Elixirを2週間で完全に理解した」新卒の子．&lt;/p&gt;
&lt;h3 id=&#34;keynote&#34;&gt;Keynote&lt;/h3&gt;
&lt;h4 id=&#34;共有からメッセージパッシングへ-erlangotpやelixirと歩んだこの10年&#34;&gt;共有からメッセージパッシングへ: Erlang/OTPやElixirと歩んだこの10年&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/jj1bdx&#34;&gt;力武健次&lt;/a&gt;氏&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/jj1bdx/erlang-and-elixir-fest-2018-keynote?slide=1&#34;&gt;発表資料はコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BIND ??? 脆弱性の多い DNS サーバーについて昔やってた
&lt;ul&gt;
&lt;li&gt;1000行マクロ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang に出会う
&lt;ul&gt;
&lt;li&gt;うるう秒の修正パッチを送る&lt;/li&gt;
&lt;li&gt;SSH のセキュリティの研究&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ICFP’11 の Erlang Workshop の実行委員長&lt;/li&gt;
&lt;li&gt;Erlang in Anger のサイン本もらった&lt;/li&gt;
&lt;li&gt;Elixir のロゴは商標登録されている&lt;/li&gt;
&lt;li&gt;Catalyze Changes
&lt;ul&gt;
&lt;li&gt;Erlang は読みにくい！&lt;/li&gt;
&lt;li&gt;レコードが難しい！&lt;/li&gt;
&lt;li&gt;ドキュメントがない！&lt;/li&gt;
&lt;li&gt;何とかっしようぜ！&lt;/li&gt;
&lt;li&gt;by Dave Tomas&lt;/li&gt;
&lt;li&gt;大変だった…(jose)&lt;/li&gt;
&lt;li&gt;有言実行しててElixir本を7冊も出版している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby コミュニティをちらほら見かけるようになった&lt;/li&gt;
&lt;li&gt;2018/2 大事件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codesync.global/conferences/code-beam-sf-2018/&#34;&gt;Code BEAM 2018&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Open Erlang 20周年&lt;/li&gt;
&lt;li&gt;BEAM コミュニティの融合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;共通してどこがおいしいのか&lt;/li&gt;
&lt;li&gt;Immutability ディープコピー 参照を使わない
&lt;ul&gt;
&lt;li&gt;自分が思う Erlang のすばらしさ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;従来は実態を共有(はやい？)&lt;/li&gt;
&lt;li&gt;「安全よりも効率」&lt;/li&gt;
&lt;li&gt;C++ の愚痴
&lt;ul&gt;
&lt;li&gt;参照なの？値なの？&lt;/li&gt;
&lt;li&gt;const の話が大変&lt;/li&gt;
&lt;li&gt;コンストラクタいつ動く？？&lt;/li&gt;
&lt;li&gt;shared_ptr と unique_ptr (参照カウンタと所有権)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;例外: ETSやプロセス辞書&lt;/li&gt;
&lt;li&gt;「効率より安全」
&lt;ul&gt;
&lt;li&gt;とても遅い&lt;/li&gt;
&lt;li&gt;型検査は無いけど非常に厳格&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Joe (Erlang の作者)「processes messgae and links が重要な部分(gen_server は後から)」
&lt;ul&gt;
&lt;li&gt;他はどうでもいい&lt;/li&gt;
&lt;li&gt;軽量並行プロセスとエラーハンドリング&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;綺麗に落とすのは大変
&lt;ul&gt;
&lt;li&gt;プロセスキューが詰まると終了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;link and monitor
&lt;ul&gt;
&lt;li&gt;昔のSDの自分の記事を読み返した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後
&lt;ul&gt;
&lt;li&gt;基本理念 「ほどほどなのが一番良い」&lt;/li&gt;
&lt;li&gt;手を抜かずに高速化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code BEAM で話題にあがったもの
&lt;ul&gt;
&lt;li&gt;組込み分野えの応用&lt;/li&gt;
&lt;li&gt;大規模クラスタ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/josefs/Gradualizer&#34;&gt;Gradual Type System&lt;/a&gt; (ツールの発表があった)&lt;/li&gt;
&lt;li&gt;Language Server Protcol&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;英語圏で発表しよう
&lt;ul&gt;
&lt;li&gt;Code BEAM 2018 は日本人一人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クライアントの同期の子が，不変性のすばらしさの話を指して「Rust や Elixir を勉強したとに同じことを感じた！」と喜んでいた．&lt;/p&gt;
&lt;h2 id=&#34;自分の話&#34;&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Elchemy の紹介話をしてきました． スライドはこちら&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ocbuQdsbw2EmG5&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;実は前日(6/15)に別の LT で Elchemy の Docker image を作る話をしてきた． その時のスライドはこちら．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/al30fSfPGB5HGN&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;section-4&#34;&gt;&lt;/h2&gt;
&lt;p&gt;実は以下の記事でもっと詳しくまとめてあるので，プレゼンを見る必要は無いんです(笑)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html&#34;&gt;Elchemy 入門 : その１&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html&#34;&gt;Elchemy 入門 : その２&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;来年はもっと型のハナシができるといいなぁ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html</id><title type="text">Elchemy 入門 : その２</title><updated>2018-06-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elchemy 入門 : その２&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-16&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 16, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elchemy.html&#34;&gt;Elchemy&lt;/a&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/Elixir.html&#34;&gt;Elixir&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Elm から Elixir のトランスパイラ，&lt;a href=&#34;https://github.com/wende/elmchemy&#34;&gt;Elchemy&lt;/a&gt; についてイロイロと調べたのでまとめていきます． &lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html&#34;&gt;前回はコチラ&lt;/a&gt;． 今回は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-2-our-own-rpg-character-module-cedbf7da138d&#34;&gt;Tutorial その２&lt;/a&gt;をやってみた&lt;/li&gt;
&lt;li&gt;Phoenix で ToDo アプリを作る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2本立てです． ちなみに，現在のバージョンは 0.7.4 です．&lt;/p&gt;
&lt;h2 id=&#34;tutorial-そのをやってみた&#34;&gt;Tutorial その２をやってみた&lt;/h2&gt;
&lt;p&gt;Tutorial その２では Elchemy を利用した独自ライブラリを作成する． 以下の手順で行うそうだ．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;エイリアス型を定義&lt;/li&gt;
&lt;li&gt;ユニオン型を定義&lt;/li&gt;
&lt;li&gt;関数としてエイリアスやタグを用いる&lt;/li&gt;
&lt;li&gt;ユニオン型でのパターンマッチ&lt;/li&gt;
&lt;li&gt;関数として演算子を使う・独自の演算子を定義する&lt;/li&gt;
&lt;li&gt;別のモジュールから型やエイリアス型をインポートする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本的に Elm の書き方講座みたいなものなので，最悪っ困ったら Elm を勉強してください(丸投げ)． ちなみに，元記事の全てを細かく追従せず，ざっくりと掻い摘んで書き出している． なので細かくは元記事を読んでね．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;あと，&lt;a href=&#34;https://github.com/wende/elmchemy-article-example&#34;&gt;このコードは全て作者さんが GitHub に挙げている&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;その前に&#34;&gt;その前に&lt;/h3&gt;
&lt;p&gt;テストを書こう，ということでテストを Elixir で書いている． 今回の作成するライブラリはどうやら，ゲームか何かのキャラを制御する物らしい&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# character_test.exs&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;CharacterTest&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ExUnit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Elchemy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Character has name, last name and such&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;      gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;surname &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gender &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Has stats&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;    stats &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;va&#34;&gt;:strength&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;&amp;lt;-&lt;/span&gt; stats &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;      assert is_integer(gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;stats[s]), &lt;span class=&#34;st&#34;&gt;&amp;quot;No &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;s&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; stat in &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;inspect gordon&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    assert &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;stats&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;vitality &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Boosting visality boosts health&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;    { hp, packed_gordon_max } &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;health&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    { _, weak_gordon_max }    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;health&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;    assert packed_gordon_max &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; weak_gordon_max&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;    assert hp &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; packed_gordon_max&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Can equip weapon only if intelligence is enough&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    weapon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Weapon&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Sci fi blaster thingy&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt; ,&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;    dumb_gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;    smart_gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-41&#34; title=&#34;41&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-42&#34; title=&#34;42&#34;&gt;    assert {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Too dumb&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;equip(weapon, dumb_gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-43&#34; title=&#34;43&#34;&gt;    assert {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, equipped_gordon} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;equip(weapon, smart_gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-44&#34; title=&#34;44&#34;&gt;    assert equipped_gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;arm &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; {weapon}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-45&#34; title=&#34;45&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-46&#34; title=&#34;46&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;キャラクターを定義&#34;&gt;キャラクターを定義&lt;/h3&gt;
&lt;h4 id=&#34;型エイリアス&#34;&gt;1. 型エイリアス&lt;/h4&gt;
&lt;p&gt;関数型なのでまずはドメインモデルの型を定義する． テストより，&lt;code&gt;name&lt;/code&gt; &lt;code&gt;surname&lt;/code&gt; &lt;code&gt;gender&lt;/code&gt; をフィールドとして持っているのが分かるので次のような型を定義した．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Character exposing (..)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;何故エイリアスなのかというと，構造的サブタイピイングが出来るようにだと思う(たぶん)．&lt;/p&gt;
&lt;h4 id=&#34;ユニオン型&#34;&gt;2. ユニオン型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Gender&lt;/code&gt; 型が無いので定義する． こっちは列挙型みたいなのが欲しいので、ユニオン型を用いる．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type Gender
    = Male
    | Female
    | Other&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;関数としての型エイリアス&#34;&gt;3. 関数としての型エイリアス&lt;/h4&gt;
&lt;p&gt;Elixir っぽい &lt;code&gt;new&lt;/code&gt; 関数を定義してやろう． Elm の場合，エイリアス型を定義すれば同名の値コンストラクタができるので，それをラップすればよい&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;キャラクターにステータスを持たせる&#34;&gt;キャラクターにステータスを持たせる&lt;/h3&gt;
&lt;p&gt;キャラクターにいくつかのステータスを持たせよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    }

type alias Stats =
    { strength : Int
    , intelligence : Int
    , vitality : Int
    }

new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;health&lt;/code&gt; はどうやら HP みたいなものらしい(現在のHPと上限)．&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチ&#34;&gt;4. パターンマッチ&lt;/h3&gt;
&lt;p&gt;ステータスを更新する関数を定義しよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type Stat
    = Strength
    | Intelligence
    | Vitality

setStat : Stat -&amp;gt; Int -&amp;gt; Character -&amp;gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        Strength -&amp;gt;
            { character | stats = { stats | strength = value } }
        Intelligence -&amp;gt;
            { character | stats = { stats | intelligence = value } }
        Vitality -&amp;gt;
            { character | stats = { stats | vitality = value } }        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;残念ながらこの &lt;code&gt;setStat&lt;/code&gt; は正しくない． テストを見ればわかるが &lt;code&gt;Vitality&lt;/code&gt; を更新した場合は &lt;code&gt;health&lt;/code&gt; も更新する必要がある．&lt;/p&gt;
&lt;h4 id=&#34;演算子&#34;&gt;5. 演算子&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;health&lt;/code&gt; はタプル型だ． タプルの更新をいい感じにするために，カスタム演算子を定義してみよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;(&amp;lt;$) : (a, b) -&amp;gt; (a -&amp;gt; c) -&amp;gt; (c, b)
(&amp;lt;$) tuple f = Tuple.mapFirst f tuple

($&amp;gt;) : (a, b) -&amp;gt; (b -&amp;gt; c) -&amp;gt; (a, c)
($&amp;gt;) tuple f = Tuple.mapSecond f tuple&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを使って &lt;code&gt;setStat&lt;/code&gt; の &lt;code&gt;Vitality&lt;/code&gt; の部分を正しく修正する．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;setStat : Stat -&amp;gt; Int -&amp;gt; Character -&amp;gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        ...
        Vitality -&amp;gt;
            { character
                | stats = { stats | vitality = value }
                , health =
                    character.health
                      &amp;lt;$ (+) ((value - stats.vitality) * 10)
                      $&amp;gt; always (100 + 10 * value)
            }                &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ウェポンを持たせる&#34;&gt;ウェポンを持たせる&lt;/h3&gt;
&lt;h4 id=&#34;インポート&#34;&gt;インポート&lt;/h4&gt;
&lt;p&gt;新しく &lt;code&gt;Weapon.elm&lt;/code&gt; ファイルを作り，新しいモジュール定義する．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Weapon exposing (..)

type alias Weapon =
    { name : String
    , level : Int
    , damage : Int
    }

new : String -&amp;gt; Int -&amp;gt; Int -&amp;gt; Weapon
new name level damage = Weapon name level damage&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このモジュールをインポートして &lt;code&gt;Character&lt;/code&gt; 型を拡張しよう&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;import Weapon exposing (Weapon)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    , arm : Maybe Weapon
    }

new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)
      Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後に &lt;code&gt;equip&lt;/code&gt; 関数を作って完成． これで全てのテストが通るはずだ．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;equip : Weapon -&amp;gt; Character -&amp;gt; Result String Character
equip weapon character =
    if weapon.level &amp;lt; character.status.intelligence then
        Ok { character | arm = Just weapon }
    else
        Err &amp;quot;Too dumb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「頭悪すぎ」ってひどい(笑)&lt;/p&gt;
&lt;h2 id=&#34;phoenix-で-todo-アプリを作る&#34;&gt;Phoenix で ToDo アプリを作る&lt;/h2&gt;
&lt;p&gt;Elchemy が実際にどの程度有用かを感じるために，Elchemy + Elm + Phoenix で超簡易的な Todo アプリを作ってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app&#34;&gt;MATSUBARA Nobutada / elchemy_todo_app · GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過去に &lt;a href=&#34;https://github.com/matsubara0507/patissier-test&#34;&gt;Elm + Phoenix で社内ツールを作ったり&lt;/a&gt;，&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html&#34;&gt;Elm + Haskell で Todo アプリを書いてみたり&lt;/a&gt;したので，その辺りからコードや構成はパクッて来てます． GitLab に置いてるのは，モノは試しってやつ(笑)．&lt;/p&gt;
&lt;h3 id=&#34;phoenix-をインストール&#34;&gt;Phoenix をインストール&lt;/h3&gt;
&lt;p&gt;Elchemy (および Elixir・Elm・npm) はインストールされているとする． &lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html&#34;&gt;Phoenix のサイト&lt;/a&gt;にある通りにやればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix archive.install https://github.com/phoenixframework/archives/raw/master/phx_new.ez&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;project-を作成&#34;&gt;Project を作成&lt;/h3&gt;
&lt;p&gt;こんな時のために &lt;code&gt;elchemy init&lt;/code&gt; というコマンドがある(？)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix phx.new elchemy_todo_app --no-ecto
$ cd elchemy_todo_app
$ elchemy init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;elchemy new&lt;/code&gt; との違いは，&lt;code&gt;mix.exs&lt;/code&gt; の Elixir のバージョンが古いのと &lt;code&gt;.formatter.exs&lt;/code&gt; ぐらいかな？ 今回は DB をわざわざ使うのがめんどくさいので，ストレージっぽい GenServer を定義する(なので &lt;code&gt;--no-ecto&lt;/code&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;crud-を作る&#34;&gt;CRUD を作る&lt;/h3&gt;
&lt;p&gt;Phoenix に CRUD を追加するには，まず&lt;code&gt;router.ex&lt;/code&gt; にルーティングを足す.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Router&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:router&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; title=&#34;6&#34;&gt;  pipeline &lt;span class=&#34;va&#34;&gt;:api&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; title=&#34;7&#34;&gt;    plug(&lt;span class=&#34;va&#34;&gt;:accepts&lt;/span&gt;, [&lt;span class=&#34;st&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; title=&#34;10&#34;&gt;  scope &lt;span class=&#34;st&#34;&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; title=&#34;11&#34;&gt;    pipe_through(&lt;span class=&#34;va&#34;&gt;:api&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; title=&#34;12&#34;&gt;    resources(&lt;span class=&#34;st&#34;&gt;&amp;quot;/todos&amp;quot;&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;TodoController&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;only:&lt;/span&gt; [&lt;span class=&#34;va&#34;&gt;:index&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:create&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:update&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:delete&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にコントロラーを定義し，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;TodoController&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Models&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:controller&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; index(conn, _params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; create(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; update(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; delete(conn, %{&lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; id}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;...&lt;/code&gt; の部分は後で埋める) そして View を定義する。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;TodoView&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:view&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; render(&lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; todos}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: todos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さてここから　Elchemy だ。 モデルを Elchemy で定義する. というかモデル以外はマクロ色が強過ぎてうまくいかなかった.&lt;/p&gt;
&lt;h3 id=&#34;elchemy-でモデルを&#34;&gt;Elchemy でモデルを&lt;/h3&gt;
&lt;p&gt;まずは型を定義.&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Data.Todo exposing (..)
import Dict

type alias Todo =
    { id : String
    , title : String
    , done : Bool
    }

type alias Todos =
    Dict.Dict String Todo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここはフロント共有したいので別途切り出しておく. DBをサボるために GenServer なモデルを定義する.&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Models.Todo exposing (..)

import Data.Todo exposing (Todo, Todos)
import Dict
import Elchemy exposing (..)

{- ex
   use GenServer

   def start_link(init \\ %{ todos: %{}, cnt: 0 }), do: GenServer.start_link(__MODULE__, init, name: :todos)

   def init(state), do: {:ok, state}

   def handle_call(:get, _client, state), do: {:reply, state, state}

   def handle_cast({:set, new_state}, _state), do: {:noreply, new_state}

   def gen_(params) do
     %{
       id: params[&amp;quot;id&amp;quot;],
       title: params[&amp;quot;title&amp;quot;],
       done: params[&amp;quot;done&amp;quot;]
     }
   end
-}

type alias State =
    { todos : Todos
    , cnt : Int
    }

type Name
    = Todos

type Action
    = Get
    | Set State

gen : params -&amp;gt; Todo
gen = ffi &amp;quot;Models.Todo&amp;quot; &amp;quot;gen_&amp;quot;

getState : State
getState = call_ Todos Get

setState : State -&amp;gt; State
setState state = cast_ Todos (Set state) |&amp;gt; always state

call_ : Name -&amp;gt; Action -&amp;gt; a
call_ = ffi &amp;quot;GenServer&amp;quot; &amp;quot;call&amp;quot;

cast_ : Name -&amp;gt; Action -&amp;gt; a
cast_ = ffi &amp;quot;GenServer&amp;quot; &amp;quot;cast&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Todos&lt;/code&gt; と削除された &lt;code&gt;Todo&lt;/code&gt; も含めた総数を表した &lt;code&gt;Int&lt;/code&gt; を持った &lt;code&gt;State&lt;/code&gt; 型を状態として GenServer に保持して欲しい． 出力した Elixir コードにだけモジュールをインポートさせたり，うまく型付けできない関数を Elixir コードに張り付けるには，コメントアウト &lt;code&gt;{- ex ... -}&lt;/code&gt; 使う． この中に書いた Elixir コードはそのまま出力先に貼り付けられる(濫用厳禁！)．&lt;/p&gt;
&lt;p&gt;Elixir モジュールの関数を呼び出すには &lt;code&gt;Elchemy&lt;/code&gt; モジュールにある &lt;code&gt;ffi&lt;/code&gt; 関数を使う． ただし，&lt;code&gt;ffi&lt;/code&gt; 関数をファーストクラスには扱えない． 次のようなエラーが出る．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ffi inside function body is deprecated since Elchemy 0.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; 型や &lt;code&gt;Action&lt;/code&gt; 型は Elchemy が代数的データ型をアトムとタプルに変換することと，GenServer の使い方を知っていれば意図するところが分かるだろう． 逆にそれらを知っていなければ読みとれないと思う…&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;コントローラーから呼ばれるインターフェースは &lt;code&gt;getState&lt;/code&gt; と &lt;code&gt;setState&lt;/code&gt; を用いることで簡単に書けた．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;gets : List Todo
gets = Dict.values (.todos getState)

add : Todo -&amp;gt; List Todo
add todo =
    let
        { todos, cnt } = getState
        newId   = toString cnt
        newTodo = { todo | id = newId }
        state   = { todos = Dict.insert newId newTodo todos, cnt = cnt + 1 }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values

update : Todo -&amp;gt; List Todo
update todo =
    let
        { todos, cnt } = getState
        state = { todos = Dict.update todo.id (Maybe.map &amp;lt;| always todo) todos, cnt = cnt }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values

remove : String -&amp;gt; List Todo
remove todoId =
    let
        { todos, cnt } =
            getState
        state =
            { todos = Dict.remove todoId todos, cnt = cnt }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コントローラーの &lt;code&gt;...&lt;/code&gt; を書き換えてやれば完成だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; title=&#34;1&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; index(conn, _params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gets()})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; create(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;add(&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gen(params))})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; update(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;update(&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gen(params))})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; delete(conn, %{&lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; id}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;remove(id)})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに出力された Elixir コードは&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/data/todo.elchemy.ex&#34;&gt;ココ&lt;/a&gt;と&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/models/todo.elchemy.ex&#34;&gt;ココ&lt;/a&gt;です． 興味がある人は見てください．&lt;/p&gt;
&lt;h3 id=&#34;elm-brunch&#34;&gt;Elm Brunch&lt;/h3&gt;
&lt;p&gt;Brunch 設定が難しかったので，本質的には Elchemy と関係ないけど残しておく．&lt;/p&gt;
&lt;p&gt;Phoenix 1.3 系ではトップレベルに &lt;code&gt;assets&lt;/code&gt; というディレクトリがあり，HTML/JS/CSS/画像 のような静的ファイルはここに置いておく． Brunch を使って複数の JS や CSS を合わせることが出来る． &lt;a href=&#34;https://github.com/madsflensted/elm-brunch&#34;&gt;elm-brunch&lt;/a&gt; を使うことで Elm を JS にコンパイルしてくれる．&lt;/p&gt;
&lt;p&gt;branch-config に次のような設定を書き加えてあげる． Elm のフロントコードは &lt;code&gt;lib/web/elm&lt;/code&gt; に置いてある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;va&#34;&gt;exports&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; title=&#34;2&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;watched&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;css&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;vendor&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../lib/web/elm&amp;quot;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../priv/static&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;elmBrunch&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;elmFolder&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../lib/web/elm&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;mainModules&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;Main.elm&amp;quot;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;outputFolder&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;vendor&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-14&#34; title=&#34;14&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-16&#34; title=&#34;16&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;フロント部分&#34;&gt;フロント部分&lt;/h3&gt;
&lt;p&gt;ほんの少しだがコードを再利用できる． API クライアントは以下のようになる．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module TodoAPI exposing (..)

import Data.Todo exposing (Todo)
import Http

getTodos : Http.Request (List Todo)
getTodos =
    Http.request
        { method =
            &amp;quot;GET&amp;quot;
        , headers =
            []
        , url =
            String.join &amp;quot;/&amp;quot;
                [ baseUrl
                , &amp;quot;todos&amp;quot;
                ]
        , body =
            Http.emptyBody
        , expect =
            Http.expectJson (list decodeTodo)
        , timeout =
            Nothing
        , withCredentials =
            False
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ホントはこの当たりも Elchemy を使って生成できるとよいのだが… もしかして &lt;a href=&#34;https://github.com/saschatimme/elm-phoenix&#34;&gt;elm-phoenix&lt;/a&gt; なるものを使えばよかったのかな？ また，The Elm Architecture 部分は長いので割愛．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ホントは assets 回りが他にもたくさんあるが,本質的な部分はこれで完成． あとはモロモロインストールして &lt;code&gt;mix phx.server&lt;/code&gt; とすれば動作するはずだ．&lt;/p&gt;
&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;うれしみ&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;静的検査は神&lt;/li&gt;
&lt;li&gt;フロントとコードを共有できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;つらみ&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Phoenix のいくつかは型付けできない
&lt;ul&gt;
&lt;li&gt;ルーティングの引数&lt;/li&gt;
&lt;li&gt;へテロリストのようなモノ&lt;/li&gt;
&lt;li&gt;結局ここで良く分からんエラーに…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンパイルが遅い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;今度は処理系の中身でも追ってみようかな．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/windows-gotchas-en.html</id><title type="text">Errors and the workarounds frequently encountered when dealing with Haskell on Windows</title><updated>2018-05-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/windows-gotchas-en.html"/><summary type="html">
&lt;article lang=&#34;en&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;This is the English version of &lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法&lt;/a&gt;.&lt;br /&gt;
The original article is the 4th article of &lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell4&#34;&gt;Haskell (その4) Advent Calendar 2017 (Japanese)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I’m going to tell is summarized as &lt;a href=&#34;https://twitter.com/igrep/status/938056578934042626&#34;&gt;just one tweet (originally in Japanese)&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I’ve learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chcp65001 if ‘Invalid character’&lt;/li&gt;
&lt;li&gt;rebuild if ‘Permission Denied’&lt;/li&gt;
&lt;li&gt;Don’t mix Japanese characters in file paths.&lt;/li&gt;
&lt;li&gt;Some libraries in C are available, and others are not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps they’re helpful in other languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me add more details.&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;chcp 65001 if “Invalid character”&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;Workaround&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;If you encounter as a user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;Rebuild if “Permission Denied”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;Try hard to build libraries in C…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;chcp 65001 if “Invalid character”&lt;/h1&gt;
&lt;p&gt;You would have encountered this frequently, especially if you don’t know how to avoid/fix this.&lt;br /&gt;
Oh, it’s caused again by building with hakyll!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; stack exec -- site rebuild
...
  [ERROR] preprocessed-site\posts/2017/01-first.md: hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The object called &lt;a href=&#34;https://www.stackage.org/haddock/lts-10.0/base-4.10.1.0/System-IO.html#t:Handle&#34;&gt;&lt;code&gt;Handle&lt;/code&gt;&lt;/a&gt;, used by GHC to read and write a file, knows its character encoding.&lt;/p&gt;
&lt;p&gt;This resembles Ruby’s &lt;a href=&#34;https://ruby-doc.org/core-2.5.0/IO.html&#34;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; and Perl’s file handler.&lt;br /&gt;
Both of them represent the “gateway” of data, and assigning character encoding to them enables us to handle the only, consistently encoded strings by converting the incoming data.&lt;br /&gt;
In Haskell’s type &lt;code&gt;Char&lt;/code&gt;, the only default encoding is UTF-32 (is this the right name in this case?).&lt;/p&gt;
&lt;p&gt;The character encoding assigned to a &lt;code&gt;Handle&lt;/code&gt; by default depends on the locale settings of the OS: in Japanese Windows, Windows-31J (a.k.a CP932).&lt;br /&gt;
But it’s now soon becoming 2018 (when writing the original article). Most files you create should be in UTF-8 unless you write programs in notepad.exe&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
It doesn’t work to read a UTF-8 file as a Windows-31J file because they’re very different encoding system.&lt;br /&gt;
The &lt;code&gt;invalid byte sequence&lt;/code&gt; error, shown at the head of this section, is caused by that inconsistency.&lt;br /&gt;
Remember this kind of errors are often caused when reading or writing stdout/stdin, as well as plain files.&lt;/p&gt;
&lt;h2 id=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Workaround&lt;/h2&gt;
&lt;h3 id=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If you encounter as a user&lt;/h3&gt;
&lt;p&gt;In many cases you can avoid these kind of errors by running the below command in advance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 65001
&amp;gt; stack exec -- site rebuild
... Should work!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command temporarily changes the character encoding in the current Command Prompt session.&lt;br /&gt;
The number &lt;code&gt;65001&lt;/code&gt; seems to stand for UTF-8.&lt;br /&gt;
To roll it back, run &lt;code&gt;chcp 932&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 932&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that the “932” of “CP932” is the same “932” entered here!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;chcp&lt;/code&gt; command is available in MSYS2’s bash (Surprises me a little. Wondering how it works…😕).&lt;br /&gt;
But you should know that &lt;code&gt;chcp&lt;/code&gt; exists at &lt;code&gt;C:\Windows\System32\&lt;/code&gt;, which MSYS2 users usually don’t want to include in the &lt;code&gt;PATH&lt;/code&gt;.&lt;br /&gt;
The directory contains many incompatible commands whose names conflict with the tools loved by Unix people (e.g. &lt;code&gt;find.exe&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;So I’ve dropped &lt;code&gt;C:\Windows\System32\&lt;/code&gt; from &lt;code&gt;PATH&lt;/code&gt; when using MSYS2.&lt;br /&gt;
If you’ve done like me, run by full path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/c/Windows/System32/chcp.com 932&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/h3&gt;
&lt;p&gt;Unfortunately, the error can often persist even after running &lt;code&gt;chcp 65001&lt;/code&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
According to my guess, the &lt;code&gt;chcp 65001&lt;/code&gt; command doesn’t affect the grandchild processes of the Command Prompt (or bash etc.) on which the &lt;code&gt;chcp&lt;/code&gt; is run (i.e. the child processes of the command you enter).&lt;/p&gt;
&lt;p&gt;If the error still happens you can either report to the developer, or fix it yourself!&lt;br /&gt;
When reporting; asking the developer to run after doing &lt;code&gt;chcp 932&lt;/code&gt; could help him/her reproduce the bug (Sorry, I’ve never tried it).&lt;br /&gt;
When fixing by yourself, perhaps the best and most certain way would be to switch the character encoding of the &lt;code&gt;Handle&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;This problem is caused by the inconsistency between the &lt;code&gt;Handle&lt;/code&gt;&#39;s character encoding and the encoding of the bytes that are actually transferred. So switching into the proper encoding should fix it.&lt;br /&gt;
If the error happens when reading/writing a common UTF-8 file via the &lt;code&gt;Handle&lt;/code&gt;, writing like below can avoid it:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding&lt;/span&gt; (utf8)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;hSetEncoding handle utf8&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a bonus, I’ll show you an example of how &lt;a href=&#34;https://github.com/haskell/haddock/pull/566&#34;&gt;I myself addressed a problem caused by the standard output (or standard error output), and fixed a bug in haddock&lt;/a&gt;. In short, it can at least suppress the error to paste the code below before your program uses the &lt;code&gt;Handle&lt;/code&gt; (Copied from &lt;a href=&#34;https://github.com/haskell/haddock/pull/566/commits/855118ee45e323fd9b2ee32103c7ba3eb1fbe4f2&#34;&gt;this commit&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding, stdout)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.CodePage&lt;/span&gt; (mkLocaleEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.Failure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CodingFailureMode&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; hSetEncoding stdout &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mkLocaleEncoding &lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPP macros to &lt;code&gt;import&lt;/code&gt; modules only available on Windows makes this code hard to read, so let’s cut out the verbose part:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hSetEncoding stdout $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’re the details:&lt;br /&gt;
First of all, &lt;code&gt;hSetEncoding&lt;/code&gt; is the function to change the &lt;code&gt;Handle&lt;/code&gt;‘s character encoding, as I referred before.&lt;br /&gt;
Then &lt;code&gt;stdout&lt;/code&gt; is the &lt;code&gt;Handle&lt;/code&gt; for the standard output as its name.&lt;br /&gt;
The last function call &lt;code&gt;mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; returns a character encoding object for the current Windows’ character encoding (i.e. &lt;code&gt;chcp&lt;/code&gt;ed character encoding), configured as “Even if the &lt;code&gt;Handle&lt;/code&gt; detects any characters which can’t be converted into/from a Unicode character, don’t raise an error, convert it into some likable character instead.”.&lt;/p&gt;
&lt;p&gt;As the result of the &lt;code&gt;hSetEncoding&lt;/code&gt; above, and the current character encoding is Windows-31J, the character used in the compilation error of GHC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;↓This character
• No instance for (Transformation Nagisa CardCommune_Mepple)
↑&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is converted into&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? No instance for (Transformation Nagisa CardCommune_Mepple)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the question mark. Yeah, this is the “?” I bet most users of GHC on Japanese Windows have seen at least once 😅&lt;br /&gt;
This makes me guess GHC executes &lt;code&gt;hSetEncoding stderr $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; by default before printing out the compilation error.&lt;br /&gt;
Anyway, it’s good that the program doesn’t abort due to the error!&lt;/p&gt;
&lt;p&gt;As the last note of this section: Read &lt;a href=&#34;https://hackage.haskell.org/package/base-4.10.1.0/docs/GHC-IO-Encoding.html&#34;&gt;the document of GHC.IO.Encoding&lt;/a&gt; for the details of how GHC handles various character encodings.&lt;/p&gt;
&lt;h1 id=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Rebuild if “Permission Denied”&lt;/h1&gt;
&lt;p&gt;I’ve made the first section too long for “Quick-and-dirty checklist”, but I’ll tell you in short from this section.&lt;br /&gt;
We often encounter some errors like “Permission Denied”, “Directory not empty” and similar ones when running &lt;code&gt;stack build&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt;, &lt;code&gt;elm-make&lt;/code&gt;, and any other commands written in Haskell.&lt;br /&gt;
To tell the truth, I’m completely not sure of the cause, but those errors disappear by running the same command several times.&lt;br /&gt;
The key is to repeat many times. Never give up only by once or twice 😅&lt;br /&gt;
Turning off your antivirus software’s scanning of the problematic directory, Dropbox’s synchronisation, etc. might also fix such errors.&lt;/p&gt;
&lt;h1 id=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Try hard to build libraries in C…&lt;/h1&gt;
&lt;p&gt;On Windows, it frequently troubles us to install libraries which depend on libraries written in C (registered as &lt;code&gt;lib***&lt;/code&gt; in your OS’s package manager).&lt;br /&gt;
But this is not the case only for Haskell.&lt;/p&gt;
&lt;p&gt;The way to fix depends on the case, so let me give you some examples as external links (Sorry, all pages are written in Japanese!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDBC-sqlite3:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/d947ab871eb5b20b57e4&#34;&gt;Windows版stackでもHDBC-sqlite3をビルドする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2017/01/29/110100&#34;&gt;MSYS2でHDBC-sqlite3をコンパイル - 北海道苫小牧市出身の初老PGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://teratail.com/questions/102462&#34;&gt;Haskell - Haskellにてstackでiconvパッケージを利用する方法【Windows環境】(102462)｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s all!&lt;br /&gt;
Then, Happy Hacking in Haskell on Windows 10!! I don’t know WSL!🏁🏁🏁&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Translator’s note: In Japanese locale, notepad.exe saves the file in Windows-31J. This will be changed (into UTF-8) in the future release of Windows 10.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;By the way, when I once tried to build the compiler of &lt;a href=&#34;http://eta-lang.org/&#34;&gt;Eta&lt;/a&gt;, (as far as I remember) &lt;code&gt;chcp 65001&lt;/code&gt; didn’t fix the problem, but &lt;code&gt;chcp 20127&lt;/code&gt; did.&lt;br /&gt;
As &lt;code&gt;chcp 20127&lt;/code&gt; switches into US-ASCII, I suspect the local environment of the developer of Eta is US-ASCII…&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html</id><title type="text">GHC拡張ノック(Part 1)</title><updated>2018-05-15T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;では各処理系で言語拡張を提供し，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものを利用することで，言語拡張を利用することが許容されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準的な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も多くの言語拡張を提供しており，その拡張は&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/strong&gt;と呼ばれています．&lt;/p&gt;
&lt;p&gt;今回は，この&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と，個人的に良く使う拡張についての簡単な紹介を，全&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;回に分けて行いたいと思います．対象としては，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングをしたことがあり，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の構文や動作方法が分かっている人を考えています．また，この記事はあくまで簡単な紹介に留めるもので，付随する留意点や詳細な機能説明は，大事な箇所は漏らさないよう注意するつもりですが，全てを網羅するつもりはありませんのでその点は注意してください．もし，実際に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;便利な構文の導入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;新たなリテラル表記を可能にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;空のデータ型に対するより強力なサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;新たな基本構文を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;正格化に対するサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;パターンマッチをより柔軟に扱えるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;レコードに対するサポートを強化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;型演算子を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;型クラスを拡張する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;型ワイルドカードをより柔軟に扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;新たな表記法の導入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;次回予告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/h1&gt;
&lt;h2 id=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，言語拡張を取り込む方法が標準で提供されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，コンパイラプラグマというものが策定されており，これを通してコンパイラに追加情報を提供することができます．コンパイラプラグマは&lt;code&gt;{-#&lt;/code&gt;と&lt;code&gt;#-}&lt;/code&gt;で囲まれ，字句的にはコメントとして扱われます．標準では，インラインプラグマや特殊化プラグマの他に，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものが策定されており，このプラグマを通して言語拡張を指定することができます．&lt;/p&gt;
&lt;p&gt;例えば，実装によって&lt;code&gt;CPP&lt;/code&gt;と&lt;code&gt;ScopedTypeVariables&lt;/code&gt;という名前の言語拡張が提供されており，それを使いたい場合，次のような文をモジュールの開始前に指定することで，言語拡張が有効になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP, ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを複数指定することもできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP                 #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この機能を通して，多くの&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;処理系では言語拡張を提供しています．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も，多数の拡張を提供しており，この拡張が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張と呼ばれるものです．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は，バージョン&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;現在，以下の数が提供されています&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; --supported-extensions &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;wc&lt;/span&gt; -l&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;235&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--supported-extensions&lt;/code&gt;オプションは，現在の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で使用できる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を表示してくれるオプションです．ただ，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は全てが独立した拡張ではなく，互いに依存しあった拡張が多く存在します．また，先頭に&lt;code&gt;No&lt;/code&gt;がついている拡張は，その&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を無効にするような拡張になっています &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;（例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張は&lt;code&gt;ImplicitPrelude&lt;/code&gt;拡張を無効にする拡張です&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;．&lt;/p&gt;
&lt;p&gt;また，デフォルトで有効になっている拡張などもあります．例えば，&lt;code&gt;ImplicitPrelude&lt;/code&gt;という拡張はデフォルトで有効になります．現在デフォルトの&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;をベースにしたモードで&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2&lt;/span&gt;を使用する場合，以下の拡張が&lt;a href=&#34;https://github.com/ghc/ghc/blob/ghc-8.4.2-release/compiler/main/DynFlags.hs#L2022&#34;&gt;デフォルトで有効になります&lt;/a&gt; &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/NondecreasingIndentation&#34;&gt;&lt;code&gt;NondecreasingIndentation&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;のレイアウトルールを変更する拡張です．この拡張を有効にすると，ネストされた&lt;code&gt;do&lt;/code&gt;式の場合，インデントをしなくていいようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#rebindable-syntax-and-the-implicit-prelude-import&#34;&gt;&lt;code&gt;ImplicitPrelude&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 暗黙的に&lt;code&gt;Prelude&lt;/code&gt;モジュールがインポートされるようになる拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#switching-off-the-dreaded-monomorphism-restriction&#34;&gt;&lt;code&gt;MonomorphismRestriction&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-930004.5.5&#34;&gt;単相性制限&lt;/a&gt;を課すようにする拡張です．この制限により，関数束縛でなく型注釈もない束縛変数の型は，デフォルティングルールによって単相化されます．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#traditional-record-syntax&#34;&gt;&lt;code&gt;TraditionalRecordSyntax&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; レコード構文を有効にする拡張です．この拡張では，名前付きのフィールドを持つデータ型を定義し，それを使用することが可能になります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyDataDecls&#34;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; コンストラクタを持たないデータ型の定義を許容する拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html#extension-ForeignFunctionInterface&#34;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: FFI&lt;/span&gt;が使えるようになる拡張です．この拡張により，&lt;code&gt;foreign import&lt;/code&gt;構文を使用することで，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;の関数を読み込むことができるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-guards&#34;&gt;&lt;code&gt;PatternGuards&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;case&lt;/code&gt;式において，通常のパターンに加えて，&lt;code&gt;&amp;lt;-&lt;/code&gt;を使用してガードの中でさらにマッチした条件下でパターンマッチができるようになる拡張です．例えば，&lt;code&gt;case (x, y) of { (True, y) | False &amp;lt;- y -&amp;gt; True; _ -&amp;gt; False }&lt;/code&gt;というような式が書けるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/DoAndIfThenElse&#34;&gt;&lt;code&gt;DoAndIfThenElse&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;if&lt;/code&gt;式の構文を，&lt;code&gt;then&lt;/code&gt;と&lt;code&gt;else&lt;/code&gt;の前に&lt;code&gt;;&lt;/code&gt;を許容するよう変更する拡張です．これにより，&lt;code&gt;do&lt;/code&gt;式において&lt;code&gt;then&lt;/code&gt;や&lt;code&gt;else&lt;/code&gt;をインデントする必要がなくなります．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;歴史的経緯で生まれ，互換性のために残されているものの，現状使用が推奨されていない拡張もあります．他に実験的な拡張やかなり大胆な拡張も存在するため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する方法は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用する他に，幾つかあります．まず，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;にオプションを渡して有効にする方法です．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で&lt;code&gt;Main.hs&lt;/code&gt;をコンパイルしたい場合，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; -XNoImplicitPrelude -XStrict --make Main.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では&lt;code&gt;-X&lt;/code&gt;の後に拡張名を続けることで，言語拡張を有効にしてコンパイルすることができます．通常は，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用するのが良いですが，何らかの事情で&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用できない場合や，デフォルトで有効にしたい言語拡張がある場合などに便利でしょう．特に&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で言語拡張を有効にしたくなった場合，このオプションを&lt;code&gt;set&lt;/code&gt;コマンドで指定すると良いでしょう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoImplicitPrelude&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を有効にする方法として，&lt;code&gt;Cabal&lt;/code&gt;の機能を活用する方法があります．&lt;code&gt;cabal&lt;/code&gt;ファイルのビルド情報欄には，&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-default-extensions&#34;&gt;&lt;code&gt;default-extensions&lt;/code&gt;というフィールド&lt;/a&gt;を指定することができ，そこにデフォルトで有効にしたい言語拡張のリストを書くことで，その拡張を有効にした状態で&lt;code&gt;Cabal&lt;/code&gt;がビルドを行ってくれます．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張をデフォルトで有効にしてビルドしたい場合，次のように書きます．&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           TestPackage
version:        0.0
synopsis:       Small package with a program
author:         Angela Author
license:        BSD3
build-type:     Simple
cabal-version:  &amp;gt;= 1.2

executable program1
  build-depends:      base
  main-is:            Main.hs
  default-extensions: NoImplicitPrelude, Strict&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h1&gt;
&lt;p&gt;以下では，個人的にデフォルトで有効化して使っている拡張を幾つか紹介します．なお，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;モードで使用することを前提にしています．&lt;/p&gt;
&lt;h2 id=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/h2&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoImplicitPrelude&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NoImplicitPrelude&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NoImplicitPrelude&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;が暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;されます．つまり，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムは暗黙に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いてあると，解釈されるということです．&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;には，&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;IO&lt;/code&gt;といった基本的なデータ型や，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Functor&lt;/code&gt;といった基本的な型クラス，&lt;code&gt;zip&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;putStrLn&lt;/code&gt;といった基本的な関数が含まれています．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;の暗黙的な&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムを簡潔に書く上では便利ですが，これを無効にしたい場合もあります．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;にあるデータ型や関数と同じ名前の，別モジュールの関数を使いたい時&lt;/li&gt;
&lt;li&gt;別の代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージを使う時&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった場合です．&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張はまさしくこのような場合に，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;を暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;しないようにする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張です．&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;番目の理由の場合，この拡張をデフォルトで入れずモジュール度に指定すればいいと思いますが，私的には&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目の理由でこの拡張を使うためデフォルトで有効にしています．代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージは幾つか存在しますが，主に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;classy-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/classy-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;protolude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/protolude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;universum:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/universum&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;basic-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/basic-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などがあります&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;．これらのパッケージを探すには&lt;a href=&#34;https://hackage.haskell.org/packages/#cat:Prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;カテゴリ&lt;/a&gt;を参照するといいでしょう．&lt;/p&gt;
&lt;p&gt;私の場合，&lt;span class=&#34;ascii&#34;&gt;classy-prelude&lt;/span&gt;を使っていますが，それも生で使用しているわけではなく，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作って使用しています．&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;は，最もよく使うものが提供されているモジュールですから，&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の変更の影響を最も強く受けます．それを外部パッケージに依存させると，パッケージ保守が結構大変です．もし，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作っておけば，パッケージ側や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン変更の影響などで&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が変更されても，そのモジュール内でフォールバックを設定することで他のモジュールに変更を持ち越す必要がなくなります．これを&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と組み合わせ，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE NoImplicitPrelude #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyPrelude&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くことで，保守がかなりしやすくなります．&lt;/p&gt;
&lt;h2 id=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;便利な構文の導入&lt;/h2&gt;
&lt;h3 id=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たなリテラル表記を可能にする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BinaryLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BinaryLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BinaryLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NagativeLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NegativeLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NagativeLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HexFloatLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XHexFloatLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- HexFloatLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には幾つかのリテラルが存在します．例えば，&lt;code&gt;&#39;c&#39;&lt;/code&gt;は文字&lt;span class=&#34;ascii&#34;&gt;c&lt;/span&gt;を表す&lt;span class=&#34;ascii&#34;&gt;Char&lt;/span&gt;型のリテラルです．&lt;code&gt;100&lt;/code&gt;は整数&lt;span class=&#34;ascii&#34;&gt;100&lt;/span&gt;を表す&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルで，&lt;code&gt;100.1&lt;/code&gt;は浮動小数点数&lt;span class=&#34;ascii&#34;&gt;100.1&lt;/span&gt;を表す&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルになります．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準には他にも幾つかリテラルが存在しますが，特に数値は非常に多様な使われ方がなされるため，他の多くの言語はより強力なリテラル表現を持つことがあります．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張ではこの背景を元に，リテラルに対する幾つかの拡張を提供しています．&lt;code&gt;BinaryLiterals&lt;/code&gt;は&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;HexFloatLiterals&lt;/code&gt;は&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;NegativeLiterals&lt;/code&gt;はどちらに対してもの拡張を，それぞれ提供します．&lt;/p&gt;
&lt;p&gt;数値型に対するリテラルは，既存のものでも数種類存在します．通常の数値表現&lt;code&gt;20&lt;/code&gt;，オクテット&lt;span class=&#34;ascii&#34;&gt;(8&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0o24&lt;/code&gt;，ヘックス&lt;span class=&#34;ascii&#34;&gt;(16&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0x14&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つです．&lt;code&gt;BinaryLiterals&lt;/code&gt;拡張は，これに加え&lt;code&gt;0b&lt;/code&gt;を接頭辞に付けることでバイナリ&lt;span class=&#34;ascii&#34;&gt;(2&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0b10100&lt;/code&gt;を可能にする拡張です．&lt;/p&gt;
&lt;p&gt;これらのオクテット表現やヘックス，バイナリ表現は浮動小数点数の表現はできません．しかし，浮動小数点数は実際には&lt;span class=&#34;ascii&#34;&gt;IEEE&lt;/span&gt;の規格に則ったデータ表現になりますから，&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数表現よりも&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;進数表現の方が実態として分かりやすい場合があります．このため&lt;code&gt;HexFloatLiterals&lt;/code&gt;拡張では，接頭に&lt;code&gt;0x&lt;/code&gt;の付くヘックス表現でも浮動小数点数のリテラルを記述できるようにしています．この拡張によって，&lt;code&gt;0.25&lt;/code&gt;は&lt;code&gt;0x0.4&lt;/code&gt;と表記できるようになります．また，指数表記も&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進方式のものではなく，ビット方式のものになります．指数表記には&lt;code&gt;e&lt;/code&gt;ではなく&lt;code&gt;p&lt;/code&gt;を使い，何ビット移動させるか&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つまり，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;の何乗を掛けるか&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を書くようにします．例えば，&lt;code&gt;1.0&lt;/code&gt;は&lt;code&gt;0x0.4p2&lt;/code&gt;と表記できます．また，&lt;code&gt;0.125&lt;/code&gt;は&lt;code&gt;0x0.4p-1&lt;/code&gt;と表記できます．&lt;/p&gt;
&lt;p&gt;さて，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には唯一の単項演算子&lt;code&gt;-&lt;/code&gt;があります．この演算子を使用することで&lt;code&gt;negate 1&lt;/code&gt;の代わりに&lt;code&gt;-1&lt;/code&gt;という表記が可能になります．しかし，この演算子の結合度は非常に弱く，また二項演算子の&lt;code&gt;-&lt;/code&gt;も存在することから&lt;code&gt;f -1&lt;/code&gt;という表記は&lt;code&gt;(f) - (1)&lt;/code&gt;というように解釈されてしまうなどの問題があり，非常に使い勝手が悪い演算子となっていました．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の仕様上，&lt;code&gt;-128&lt;/code&gt;という表現は最終的に&lt;code&gt;negate (fromInteger 128)&lt;/code&gt;という式に&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-280003.4&#34;&gt;脱糖されます&lt;/a&gt;が，例えば&lt;code&gt;Int8&lt;/code&gt;などの，負数は&lt;code&gt;-128&lt;/code&gt;まで扱えるが正数は&lt;code&gt;+127&lt;/code&gt;までしか扱えないといったデータ型の場合に，この式は&lt;code&gt;fromInteger&lt;/code&gt;で一度&lt;code&gt;+128&lt;/code&gt;の値になってしまいオーバーフローを起こしてしまうという問題がありました．これを解決するため導入されたのが&lt;code&gt;NagativeLiterals&lt;/code&gt;拡張です．この拡張を導入することで空白を挟まない&lt;code&gt;-1.0&lt;/code&gt;などは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのリテラルと解釈されるようになります．この拡張を導入後は，次のようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; max &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; max (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: max -1 2 == max - (1 2)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromInteger i &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; i &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fractional&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromRational r &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;空のデータ型に対するより強力なサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyDataDeriving&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyDataDeriving&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，コンストラクタを一切持たない型を定義できます．これは空のデータ型と呼ばれ，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような型は&lt;code&gt;base&lt;/code&gt;パッケージの&lt;code&gt;Data.Void&lt;/code&gt;モジュールでも提供されており，有用な場合があります．しかし，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではこのようなデータ型に対するサポートが薄く，使用する上で不便な場面があります．このサポートを強化する拡張が，&lt;code&gt;EmptyCase&lt;/code&gt;拡張と&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EmptyCase&lt;/code&gt;拡張は，空のパターンマッチを書けるようにする拡張です．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，空のパターンマッチは書けません．つまり，&lt;code&gt;case x of {}&lt;/code&gt;というような式が書けないということです．通常はデータ型は何らかのコンストラクタを持っていますから，このようなパターンマッチを書きたいと思う場面はないでしょう．しかし，空のデータ型においてこのようなパターンマッチを書きたいと思うことがあります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような表記を可能にするのが&lt;code&gt;EmptyCase&lt;/code&gt;拡張です．なお，このケース式は次のように書くのと同値になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;Non-exhaustive patterns in case&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張は，空のデータ型に対して&lt;code&gt;deriving&lt;/code&gt;構文を使用できるようにする拡張です．空のデータ型は，通常のデータ型と違い&lt;code&gt;Eq&lt;/code&gt;や&lt;code&gt;Show&lt;/code&gt;などの型クラスインスタンスを&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch11.html#x18-182014x6&#34;&gt;&lt;code&gt;deriving&lt;/code&gt;することができません&lt;/a&gt;．つまり以下のようなことができません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これでは不便な場合があります．それを可能にするのが&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．この拡張では，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Show&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Read&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つが&lt;code&gt;deriving&lt;/code&gt;可能になり，それぞれは次のようなインスタンスを生成します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  _ &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;  compare _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;  readPrec &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pfail&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;  showsPrec _ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな基本構文を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TupleSections&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TupleSections&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiWayIf&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiWayIf&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-LambdaCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- LambdaCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，タプルやラムダ抽象，セクション，&lt;code&gt;if&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式といった構文が導入されていますが，これらを組み合わせて多用する場合，幾つか冗長な表現が生まれる場合があります．その中でも頻出する表現に対して，新たな構文を提供する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張があります．それが，&lt;code&gt;TupleSections&lt;/code&gt;，&lt;code&gt;MultiWayIf&lt;/code&gt;，&lt;code&gt;LambdaCase&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，セクションと呼ばれる二項演算子の部分適用を表す構文があります．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではタプルにも独自の構文が充てがわれています．このタプルを使用する際，セクションのように部分適用を簡潔に書きたい場合があります．例えば，&lt;code&gt;\x -&amp;gt; (1, x)&lt;/code&gt;という表現をもっと簡潔に書きたい場合があります．この場合は&lt;code&gt;(,) 1&lt;/code&gt;というな表記が可能ですが，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目に部分適用したい場合や，&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ組のタプルに部分適用したい場合などは非常に面倒です．このため，&lt;code&gt;TupleSections&lt;/code&gt;拡張は&lt;code&gt;(1, )&lt;/code&gt;という表記でタプルの部分適用を書ける構文を提供します．&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ以上空きがある場合は，左から引数を受け取っていくようになります．例えば，&lt;code&gt;(True, , &amp;quot;str&amp;quot;, )&lt;/code&gt;は&lt;code&gt;\x y -&amp;gt; (True, x, &amp;quot;str&amp;quot;, y)&lt;/code&gt;と同等です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;は名前の通り複数の条件をガード構文のように指定できる&lt;code&gt;if&lt;/code&gt;式を提供する拡張です．つまり，以下のようなことがかけます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;MultiWayIf&lt;/code&gt;は次のように&lt;code&gt;case&lt;/code&gt;式で書き換えることが可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ目の&lt;code&gt;LambdaCase&lt;/code&gt;拡張は，ラムダ抽象と&lt;code&gt;case&lt;/code&gt;式を組み合わせた際に良く使う表現をより簡潔に書けるようにする拡張です．この拡張を使うと，&lt;code&gt;\x -&amp;gt; case x of (a, b) -&amp;gt; a + b&lt;/code&gt;というようなラムダ抽象を，&lt;code&gt;\case (a, b) -&amp;gt; a + b&lt;/code&gt;と書けるようになります．もちろんレイアウトルールも&lt;code&gt;case-of&lt;/code&gt;式と同じように作用するため，改行を含んだ式も書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; negate &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;正格化に対するサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BangPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BangPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-StrictData&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- StrictData&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Strict&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Strict&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;はデフォルトの評価戦略として，グラフ簡約の遅延評価を採用しています．これはリストや再帰に関する表現を非常に豊かにする反面，パフォーマンスを悪化させたりデバッグを困難にさせる場面が多いなどの負の面もあります．このため&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，&lt;code&gt;seq&lt;/code&gt;関数や正格フラグといった正格評価へのサポートも提供しています．しかし，このサポートは表現が冗長な場合が多く，使い勝手が悪い側面があります．この面を解決するための拡張が，&lt;code&gt;BangPatterns&lt;/code&gt;，&lt;code&gt;StrictData&lt;/code&gt;，&lt;code&gt;Strict&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;再帰関数において，累積引数は多くの場合正格に計算した方が効率が良いですが，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では以下のように書く必要がありました．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;sum xs y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような&lt;code&gt;seq&lt;/code&gt;による評価をより簡潔に書けるよう，&lt;code&gt;BangPatterns&lt;/code&gt;拡張というものが提供されています．これはパターンを拡張し，バンパターンというものを導入します．このバンパターンは，通常のパターンに&lt;code&gt;!&lt;/code&gt;を付けることで書けます．例えば，上の例はバンパターンを使うと以下のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;sum xs &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バンパターンはパターンの&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つですから，もちろん&lt;code&gt;let&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式でも&lt;code&gt;let !y = f x in y&lt;/code&gt;や&lt;code&gt;case f x of !y -&amp;gt; y&lt;/code&gt;というように使えます．また，&lt;code&gt;case x of (!y, z) -&amp;gt; y + z&lt;/code&gt;というように部分パターンとしても有効です．バンパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;≡ v &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，データ型の宣言において，コンストラクタの引数に正格フラグというものを付けることが許容されています．このフラグをつけた引数は，正格に評価された後コンストラクタに渡されます．ただ，一般にデータ型の引数は正格な方が効率が良いため，データ型宣言時に正格フラグを付けるという慣習がありました．この慣習を打破するために導入されたのが，&lt;code&gt;StrictData&lt;/code&gt;拡張です．&lt;code&gt;StrictData&lt;/code&gt;拡張下のモジュールでは，データ型宣言時，コンストラクタの引数は全て正格フラグをつけているものとして扱われます．また，&lt;code&gt;~&lt;/code&gt;というフラグが新たに導入され，このフラグをつけた引数の場合は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準化のデフォルトの動作，つまり引数は正格に評価されず遅延されるようになります．&lt;code&gt;StrictData&lt;/code&gt;下で宣言された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というデータ型は，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下のデータ型と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt;拡張は，&lt;code&gt;StrictData&lt;/code&gt;拡張に加え，ほとんどのパターンを暗黙的にバンパターンにする拡張です．つまり，殆どの評価を正格にする拡張です．バンパターンに変わる箇所は，関数の引数，&lt;code&gt;let&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;where&lt;/code&gt;句の束縛変数，&lt;code&gt;case&lt;/code&gt;式のパターンマッチなどです．これらのパターンには，最外の場所に&lt;code&gt;!&lt;/code&gt;が暗黙的に付与されます．例えば，&lt;code&gt;Strict&lt;/code&gt;拡張下で定義された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; data-line-number=&#34;2&#34;&gt;f x (z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数は，&lt;code&gt;BangPatterns&lt;/code&gt;拡張下の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下の関数と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;(z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意して欲しいのは，このバンパターンは&lt;code&gt;seq&lt;/code&gt;に置き換わるため，&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;までしか評価されないということです．つまり，&lt;code&gt;!(z, y)&lt;/code&gt;というパターンは単なる&lt;code&gt;(z, y)&lt;/code&gt;と完全に同じです．またトップレベルの束縛にバンパターンを付与することは許されておらず，遅延されるということにも注意が必要です．&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パターンマッチをより柔軟に扱えるようにする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ViewPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- ViewPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-PatternSynonyms&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- PatternSynonyms&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張では，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準のパターンをさらに強力なものにする拡張があります．&lt;code&gt;ViewPatterns&lt;/code&gt;はビューパターンという新たなパターンを導入します．また，&lt;code&gt;PatternSynonyms&lt;/code&gt;はパターンの別名を付けることができるようにする拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にあるパターンガードは，非常に強力ですが，表現が非常に冗長になる場合があります．これを短縮して書けるように，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張はビューパターンというものを導入します．ビューパターンは，&lt;code&gt;-&amp;gt;&lt;/code&gt;の左側に式を，右側にパターンを書くことで，左の式に対象を適用して結果が右側のパターンにマッチした時，マッチするようなパターンです．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; data-line-number=&#34;1&#34;&gt;f ((&lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; data-line-number=&#34;2&#34;&gt;f x                &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように使用でき，&lt;code&gt;f 0&lt;/code&gt;は&lt;code&gt;Nothing&lt;/code&gt;を，&lt;code&gt;f 3&lt;/code&gt;は&lt;code&gt;Just 3&lt;/code&gt;をそれぞれ返すようになります．この関数宣言は，以下のパターンガードを用いて書いた関数と一致します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; data-line-number=&#34;1&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; data-line-number=&#34;2&#34;&gt;f x                  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビューパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; p) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; data-line-number=&#34;2&#34;&gt;≡ &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; (e v) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { p &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は，非常に強力で大きな拡張です&lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;．&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は名前の通り，パターンに別名を与えるパターンシノニム機能を提供します．パターンシノニムは通常の関数と同じように，次のように定義できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; data-line-number=&#34;4&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; x xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# COMPLETE Nil, Cons #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように定義したパターンは，以下のように使用できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;len ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; data-line-number=&#34;2&#34;&gt;len (&lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; _ xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; len xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; data-line-number=&#34;3&#34;&gt;len &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは非常に便利な機能ですが，一方で注意する事項も幾つかあります．&lt;/p&gt;
&lt;p&gt;まず，パターンシノニムの定義は関数定義と非常に似ていますが，パターンの別名であることに注意してください．パターンシノニムの定義において変数が出現する場合，関数の引数のように錯覚してしまいがちですが，この変数にはパターンにマッチした時そのマッチした部分が当てがわれます．つまり，右の式でマッチしたものが左の変数に束縛されるため，左の変数に束縛された後右の式を実行する関数と，流れが逆になるということです．このため，パターンシノニムの引数の変数は必ず右に出現する必要があります．また，パターンシノニムの右側には変数を含むパターンしかかけません．そのため，式を書きたい場合，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張などを用いなければなりません．さらにパターンシノニムは，デフォルトではパターンの網羅性検査が非常に難しいため，網羅性検査を行わないようになっています．ただし，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#complete-pragma&#34;&gt;&lt;code&gt;COMPLETE&lt;/code&gt;プラグマ&lt;/a&gt;を用いてパターンシノニムの網羅条件を与えることで，その範囲で網羅性検査を行うようになります．&lt;/p&gt;
&lt;p&gt;パターンシノニムはパターンの種類に応じて&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の書き方が存在します．上の単純なパターンシノニムは，双方向&lt;span class=&#34;ascii&#34;&gt;(bidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，暗黙的にパターンの名前と等しい関数が作られます．この関数を用いることで，&lt;code&gt;[0, 1, 2]&lt;/code&gt;の代わりに&lt;code&gt;Cons 0 (Cons 1 (Cons 2 Nil))&lt;/code&gt;といった式も書くことができるようになります．ただし，このような関数が単純には作れないパターンも存在します．例えば，&lt;code&gt;(x, _)&lt;/code&gt;というパターンに，&lt;code&gt;First x&lt;/code&gt;というパターンシノニムを与えたい場合，この&lt;code&gt;First&lt;/code&gt;に対する関数は&lt;code&gt;_&lt;/code&gt;の部分に入れるべき値が分からないため，作りようがありません．このような関数が単純に作れないパターンシノニムは単方向&lt;span class=&#34;ascii&#34;&gt;(unidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，双方向パターンシノニムが&lt;code&gt;=&lt;/code&gt;を使って定義されるのに対し，次のように&lt;code&gt;&amp;lt;-&lt;/code&gt;を使って書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このパターンシノニムは&lt;code&gt;First&lt;/code&gt;という関数は作らず，単純にパターンの別名だけを提供します．ただし，&lt;code&gt;First&lt;/code&gt;関数の定義を次のように与えることが可能になっています．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，パターンシノニムはパターンの評価順序にも注意する必要があります．例えば，次の例をみてください．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; b c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-6&#34; data-line-number=&#34;6&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; x y z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-9&#34; data-line-number=&#34;9&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-10&#34; data-line-number=&#34;10&#34;&gt;f _                      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-13&#34; data-line-number=&#34;13&#34;&gt;f&amp;#39; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-14&#34; data-line-number=&#34;14&#34;&gt;f&amp;#39; _                            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;f&lt;/code&gt;と&lt;code&gt;f&#39;&lt;/code&gt;は評価順が異なり，&lt;code&gt;f (Pair False undefined)&lt;/code&gt;が例外を投げるのに対し，&lt;code&gt;f&#39; (Pair False undefined)&lt;/code&gt;は&lt;code&gt;False&lt;/code&gt;を返します．これは，パターンシノニムを使ったパターンマッチでは，自身のパターンを先に調べ，次に引数のパターンマッチを行うからです．つまり，&lt;code&gt;f&lt;/code&gt;は以下と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; data-line-number=&#34;2&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)) &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; y, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; data-line-number=&#34;3&#34;&gt;f _                                                     &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは，モジュールエクスポートを書く際にも注意が必要で，&lt;code&gt;module A (pattern Cons, pattern Nil) where ...&lt;/code&gt;というように接頭に&lt;code&gt;pattern&lt;/code&gt;をつける必要があります．&lt;/p&gt;
&lt;h3 id=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;レコードに対するサポートを強化する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DuplicateRecordFields&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DuplicateRecordFields&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- DuplicateRecordFields&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-OverloadedLabels&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- OverloadedLabels&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedFieldPuns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedFieldPuns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecordWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecordWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のレコード構文は，便利な反面幾つか機能が劣る場面もあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，レコードをより扱いやすくするための拡張を幾つか提供しています．それが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;，&lt;code&gt;OverloadedLabels&lt;/code&gt;，&lt;code&gt;NamedFieldPuns&lt;/code&gt;，&lt;code&gt;RecordWildCards&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です&lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，同じモジュール内で同じフィールド名を持つ複数のレコード構文を使用したデータ型の定義を行うことができません．これはどのデータ型のフィールドかが曖昧であるようなプログラムを書けてしまうからですが，そういう状況に遭遇するとこの制約は非常に不便です．これを解決するのが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張です．&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張は，曖昧になるような式を書けなくする代わりに，同一モジュールの複数のデータ型が同じフィールド名を持つことを許容する拡張です．つまり，以下のようなことが可能になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，この拡張下では，曖昧なフィールドを用いたレコードのアップデート構文やフィールドの選択関数の使用の際は型を明記する必要があったり，モジュールのエクスポートリストで選択関数をエクスポートすることが出来なくなったりします．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張は，&lt;code&gt;#foo&lt;/code&gt;というような&lt;code&gt;#&lt;/code&gt;から始まる新たな構文を導入します．&lt;code&gt;#foo&lt;/code&gt;は&lt;code&gt;GHC.OverloadedLabels&lt;/code&gt;モジュールの&lt;code&gt;fromLabel&lt;/code&gt;メソッドにおいて&lt;code&gt;IsLabel &amp;quot;foo&amp;quot; a =&amp;gt; a&lt;/code&gt;というような型を持つ場合と同等になります．これを用いることで，同じフィールドを持つデータ型に対する選択関数を次のように書けます&lt;a href=&#34;#fn11&#34; class=&#34;footnote-ref&#34; id=&#34;fnref11&#34;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels       #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- the main extension&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds              #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for Symbol kind&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE KindSignatures         #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField&amp;#39;s `l` parameter&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField and IsLabel classes&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FunctionalDependencies #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances      #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField instances&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables    #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for the IsLabel instance&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DuplicateRecordFields  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for A and B data types&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.OverloadedLabels&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a (&lt;span class=&#34;ot&#34;&gt;l ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;) b &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; a l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  selectField ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-21&#34; data-line-number=&#34;21&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-24&#34; data-line-number=&#34;24&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-25&#34; data-line-number=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-26&#34; data-line-number=&#34;26&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a l b &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt; l (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-27&#34; data-line-number=&#34;27&#34;&gt;  fromLabel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; selectField (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使うことで，&lt;code&gt;#d A { d = 0 }&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;を，&lt;code&gt;#d B { d = True }&lt;/code&gt;は&lt;code&gt;True&lt;/code&gt;を返してくるようになります．また，&lt;code&gt;#d&lt;/code&gt;には型を明記しなくても型推論が働くようになります．&lt;/p&gt;
&lt;p&gt;さて他にレコードのパターンマッチやコンストラクトを非常に便利にしてくれる拡張として，&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張と&lt;code&gt;RecordWildCards&lt;/code&gt;拡張があります．レコードのパターンマッチは多くの場合冗長になりがちで，次のようなボイラープレートを書きがちです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; y ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; data-line-number=&#34;4&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張は，同等のことを次のように書けるようにする拡張です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，このパターンは旧来の書き方と合わせて書くこともできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x, y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x }            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらにこの拡張は，コンストラクトの際も役に立ちます．&lt;code&gt;let x = 1 in A { x, y = True }&lt;/code&gt;と書くとこの式は，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張ではフィールド名を明記する必要がありましたが，&lt;code&gt;RecordWildCards&lt;/code&gt;拡張はさらにフィールド名を明記する必要がなくなります．以下のように&lt;code&gt;{..}&lt;/code&gt;と書くことで，全てのフィールドを展開してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，部分的に明記することも可能で，その場合以下のように書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}             &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コンストラクトの際も，この拡張は有効です．&lt;code&gt;let x = 1 in A { y = True, ..}&lt;/code&gt;と書いた場合，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;h3 id=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型演算子を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeOperators&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeOperators&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TypeOperators&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではユーザー定義の関数やデータ型のコンストラクタにおいて，演算子表記のものも定義できるようになっています．例えば，以下のようにです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;amp;) ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-5&#34; data-line-number=&#34;5&#34;&gt;x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型を定義する場合そのようなことはできません．これを可能にするのが，&lt;code&gt;TypeOperators&lt;/code&gt;拡張です．この拡張の有効下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixr&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということが可能になります．ただし，このように定義した型演算子は，同じ名前の値としての演算子があった場合区別ができません．このため，モジュールのエクスポートリストを書く際，型演算子か値レベルの演算子かの区別が付かなくなった場合，値レベルの方が優先されます．この時，型演算子を明示したい場合，&lt;code&gt;type&lt;/code&gt;を付けます&lt;a href=&#34;#fn12&#34; class=&#34;footnote-ref&#34; id=&#34;fnref12&#34;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-4&#34; data-line-number=&#34;4&#34;&gt;  ( &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-5&#34; data-line-number=&#34;5&#34;&gt;  ) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型クラスを拡張する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiParamTypeClasses&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiParamTypeClasses&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleContexts&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleContexts&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleInstances&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleInstances&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InstanceSigs&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-InstanceSigs&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- InstanceSigs&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型クラスは非常に強力な機構です．しかしながら，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の型クラスの構文は非常に制約がきつく，これらを緩和したいと思うことがよくあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では制約を緩和する拡張をいくつか提供しています．それが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;，&lt;code&gt;FlexibleContexts&lt;/code&gt;，&lt;code&gt;FlexibleInstances&lt;/code&gt;，&lt;code&gt;InstanceSigs&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，クラスは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの変数しか持てません．なので，次のような型クラスは作れません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは非常に不便な制約なため，複数のパラメータを使うような型クラスを許容する拡張が&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張です．この拡張により，上のコードが許容されるようになる他，以下のように変数が全くない型クラスも宣言することができるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullary&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，メソッドにおいてクラスの型変数に型制約をかけるということも許容されていませんが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張ではこれも可能にします&lt;a href=&#34;#fn13&#34; class=&#34;footnote-ref&#34; id=&#34;fnref13&#34;&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt;．これによって以下のようなクラス定義も書けるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Setable&lt;/span&gt; s a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  elem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型制約の解決を安全に，しかも単純にするために，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-660004.1.3&#34;&gt;型注釈における制約の書き方&lt;/a&gt;や&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-760004.3.1&#34;&gt;クラス定義，インスタンス定義の際の制約の書き方&lt;/a&gt;を大きく制限しています．しかし，より複雑な型制約を書きたい時が往々にしてあります．そこで，この制限を緩め，クラス階層が非循環である場合には許容するようにする拡張が，&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張です．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (t m)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Transform&lt;/span&gt; t m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (t m) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-7&#34; data-line-number=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張も&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張と同じく，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準での&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-770004.3.2&#34;&gt;型クラスインスタンスの書き方&lt;/a&gt;の制限を，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination&#34;&gt;停止制限&lt;/a&gt;を守る場合に許容するというように緩和する拡張です．停止制限は簡単に言ってしまえば，インスタンス宣言において，型制約がインスタンスより小さく&lt;a href=&#34;#fn14&#34; class=&#34;footnote-ref&#34; id=&#34;fnref14&#34;&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;，型関数を使っていないというものです&lt;a href=&#34;#fn15&#34; class=&#34;footnote-ref&#34; id=&#34;fnref15&#34;&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; [a])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; [a] [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C3&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (s a)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; s a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; [] &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．また，この拡張下では，型シノニムをインスタンスにすることもできます&lt;a href=&#34;#fn16&#34; class=&#34;footnote-ref&#34; id=&#34;fnref16&#34;&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Instead of `instance C [a]`&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，型シノニムを使う場合そのシノニムの引数は全て適用しなければならないことに注意が必要です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型クラスインスタンスの定義時，そのメソッドの型注釈は書けないようになっています．しかし，複雑な型クラスインスタンスを書く際，メソッドの型注釈を書きたい場合があります&lt;a href=&#34;#fn17&#34; class=&#34;footnote-ref&#34; id=&#34;fnref17&#34;&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;．これを可能にするのが&lt;code&gt;InstanceSigs&lt;/code&gt;拡張です．&lt;code&gt;InstanceSigs&lt;/code&gt;拡張の元では，以下のようなインスタンス宣言が書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  (==) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型ワイルドカードをより柔軟に扱う&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には型ワイルドカードという機能があります．この機能は，&lt;code&gt;_&lt;/code&gt;と型シグネチャ上で書いておくと，そこの部分の型を推論してエラーメッセージとして表示してくれる機能です．この機能は，以下のように部分的に記述したり複数指定したりすることも可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb51&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, b) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを活用すれば，複雑な型をある程度ヒントを与えた状態で推論してもらい，型を追記するプログラミングスタイルや，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が実際に型をどう推論するかを見るための補助に応用できます．しかし，例えば&lt;code&gt;ignoreSecond&lt;/code&gt;が引数と返り値で型が同じであるという情報が分かっていた場合に，これをヒントとして伝えたい場合がありますが，型ワイルドカードでそれを伝える方法はありません．これを解決するのが&lt;code&gt;NamedWildCards&lt;/code&gt;拡張です．この拡張を使うと，以下のようなプログラムに対しても，接頭に&lt;code&gt;_&lt;/code&gt;が付いている型をワイルドカードとみなして，エラーメッセージで型の推論結果を表示してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb52&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, Maybe a1) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな表記法の導入&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Arrows&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Arrows&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecursiveDo&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecursiveDo&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，モナドを扱いやすくするための，&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文という専用の構文が用意されています．この構文は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングにおいて広く利用されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，これに加え&lt;code&gt;Arrow&lt;/code&gt;と&lt;code&gt;MonadFix&lt;/code&gt;というクラスに対しての専用の構文も提供しています．これは&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張で実装されており，それぞれ&lt;code&gt;Arrows&lt;/code&gt;拡張，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張を有効にすることで使用可能です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arrow&lt;/code&gt;クラスは，モナドの一般化として導入されました&lt;a href=&#34;#fn18&#34; class=&#34;footnote-ref&#34; id=&#34;fnref18&#34;&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;．このクラスには，モナドの&lt;code&gt;do&lt;/code&gt;構文と同様に，クラスメソッドだけの式に脱糖できる構文が考案され，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張として実装されています．それが&lt;code&gt;Arrows&lt;/code&gt;拡張で利用できる&lt;code&gt;proc&lt;/code&gt;構文です．&lt;/p&gt;
&lt;p&gt;例えば，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドを使った次のような関数は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb53&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;   arr (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, x))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; first (f &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (arr (\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g) &lt;span class=&#34;fu&#34;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr snd)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(y, x) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x, x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(x, z) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (z, x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; second h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(z, t) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文を使うと，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb54&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-3&#34; data-line-number=&#34;3&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-4&#34; data-line-number=&#34;4&#34;&gt;  g &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-6&#34; data-line-number=&#34;6&#34;&gt;  t &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-7&#34; data-line-number=&#34;7&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように書けます&lt;a href=&#34;#fn19&#34; class=&#34;footnote-ref&#34; id=&#34;fnref19&#34;&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;．また，&lt;code&gt;ArrowLoop&lt;/code&gt;クラスの&lt;code&gt;loop&lt;/code&gt;メソッドに変換される，&lt;code&gt;rec&lt;/code&gt;構文も搭載されており次のようなフィードバック制御を相互再帰で行うプログラムを書くことができます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb55&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;counter ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ArrowLoop&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-2&#34; data-line-number=&#34;2&#34;&gt;counter delay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc reset &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-3&#34; data-line-number=&#34;3&#34;&gt;  rec output &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; reset &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; next&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-4&#34; data-line-number=&#34;4&#34;&gt;      next &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; delay &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-5&#34; data-line-number=&#34;5&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文については&lt;a href=&#34;https://www.haskell.org/arrows/syntax.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Arrow syntax&lt;/span&gt;&lt;/a&gt;のページにまとめられている他，&lt;a href=&#34;http://www.staff.city.ac.uk/~ross/papers/notation.html&#34;&gt;提案論文&lt;/a&gt;にて変換規則を確認することが可能です．&lt;/p&gt;
&lt;p&gt;さて，もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;MonadFix&lt;/code&gt;クラスは，モナドを拡張し，再帰的なバインディングを許すようなものです．このクラスを元に，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張は&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文をさらに拡張します．具体的には，次のように使用できる&lt;code&gt;rec&lt;/code&gt;という構文を新たに導入します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb56&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-3&#34; data-line-number=&#34;3&#34;&gt;  rec x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-4&#34; data-line-number=&#34;4&#34;&gt;      y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は，次のように&lt;code&gt;MonadFix&lt;/code&gt;クラスのメソッド&lt;code&gt;mfix&lt;/code&gt;を使った関数と同等です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb57&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-3&#34; data-line-number=&#34;3&#34;&gt;  (x, y) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(x, y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-4&#34; data-line-number=&#34;4&#34;&gt;    x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-5&#34; data-line-number=&#34;5&#34;&gt;    y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-6&#34; data-line-number=&#34;6&#34;&gt;    pure (x, y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-7&#34; data-line-number=&#34;7&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;rec&lt;/code&gt;を省略して書ける&lt;code&gt;mdo&lt;/code&gt;という構文も提供されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb58&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-4&#34; data-line-number=&#34;4&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mdo&lt;/code&gt;構文は，それぞれの文と変数の依存関係を解析し，自動的に&lt;code&gt;rec&lt;/code&gt;ブロックに分けてくれます．後は，その分けられた&lt;code&gt;rec&lt;/code&gt;文を&lt;code&gt;mfix&lt;/code&gt;に翻訳することで，通常の&lt;code&gt;do&lt;/code&gt;構文に翻訳することができます．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb59&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-1&#34; data-line-number=&#34;1&#34;&gt;mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-3&#34; data-line-number=&#34;3&#34;&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-4&#34; data-line-number=&#34;4&#34;&gt;  c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-5&#34; data-line-number=&#34;5&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-6&#34; data-line-number=&#34;6&#34;&gt;  d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-7&#34; data-line-number=&#34;7&#34;&gt;  e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-8&#34; data-line-number=&#34;8&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb60&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-3&#34; data-line-number=&#34;3&#34;&gt;  (b, c) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(b, c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-4&#34; data-line-number=&#34;4&#34;&gt;    b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-5&#34; data-line-number=&#34;5&#34;&gt;    c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-6&#34; data-line-number=&#34;6&#34;&gt;    pure (b, c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-7&#34; data-line-number=&#34;7&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-8&#34; data-line-number=&#34;8&#34;&gt;  (d, e) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(d, e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-9&#34; data-line-number=&#34;9&#34;&gt;    d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-10&#34; data-line-number=&#34;10&#34;&gt;    e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-11&#34; data-line-number=&#34;11&#34;&gt;    pure (d, e)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-12&#34; data-line-number=&#34;12&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式に翻訳されます．&lt;code&gt;mdo&lt;/code&gt;と&lt;code&gt;rec&lt;/code&gt;の変換規則は，&lt;a href=&#34;https://dl.acm.org/citation.cfm?doid=581690.581693&#34;&gt;提案論文&lt;/a&gt;にて確認が可能です．&lt;/p&gt;
&lt;h1 id=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次回予告&lt;/h1&gt;
&lt;p&gt;今回は，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と使い方について，それから個人的にデフォルトで有効化している，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的なインポートを抑制する拡張，新たな構文を導入する拡張を紹介しました．&lt;/p&gt;
&lt;p&gt;次回は，他のデフォルトで有効化している拡張について紹介したいと思います．&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/glasgow_exts.html#options-language&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 9. GHC Language Features&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/ffi-chap.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 10. Foreign function interface (FFI)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/#language-extensions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;What I Wish I Knew When Learning Haskell - Language Extensions&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/language-standards&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Guide to GHC Extensions - Language Standards&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell 2010 Language Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/cabal-projectindex.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cabal reference&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この記事では特に断らない限り，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;&lt;/a&gt;を「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準」または「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;」と呼称します．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;このオプションは，拡張を無効にする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;も含めて表示します．実際には&lt;code&gt;No&lt;/code&gt;が付いている拡張を抜くと，提供されている数は&lt;span class=&#34;ascii&#34;&gt;120&lt;/span&gt;個になります．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，ある拡張を無効にするといった機能は提供されていません．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では無効にする機能を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの拡張として，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準に則った形で提供しています．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;有効にする拡張と無効にする拡張を両方指定した場合，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は指定された順番に沿って最後に指定された方を拡張として採用します．&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;標準では，&lt;code&gt;Haskell2010&lt;/code&gt;というプラグマをサポートすること，また&lt;span class=&#34;ascii&#34;&gt;Haskell98&lt;/span&gt;から新たに&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;までに取り込まれた機能を切り離した&lt;code&gt;PatternGuards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;NoNPlusKPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;RelaxedPolyRec&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;という拡張をそれぞれサポートすることが望ましいと規定されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も&lt;code&gt;Haskell2010&lt;/code&gt;という拡張を指定できるようになっており，ここにあるほとんどはこの拡張を有効にした場合にも有効になります．&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;デフォルトで有効になる拡張のほとんどは，&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;を元にしたものです．ただし全てがそうというわけではありません．&lt;code&gt;NondecreasingIndentation&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にはない機能です．また&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;で規定されている仕様を全てデフォルトで取り込んでいる訳でもありません．特に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではデータ型の宣言に型制約を書くことができますが，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;ではデフォルトではできません．これを有効にする場合，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DatatypeContexts&#34;&gt;&lt;code&gt;DatatypeContexts&lt;/code&gt;拡張&lt;/a&gt;を有効にする必要があります．&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の内部では&lt;code&gt;RelaxedPolyRec&lt;/code&gt;という拡張も一緒に有効になります．しかし，現在この拡張は実装上の問題で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;上で無効にすることができないため，ドキュメント上からも削除されています．この記事でも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の方針に従って，この拡張は特に扱いませんのでご留意ください．&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;現在，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の代替を目指す，&lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;というパッケージが作成されています．このパッケージは現在まだ&lt;span class=&#34;ascii&#34;&gt;prerelease&lt;/span&gt;の段階で，&lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;において実験的に使用されています．様々な最新の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングの知見を取り入れており，標準の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;に大きく拡張を施しているため，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で大規模な開発を行う場合注目する価値があるかもしれません．&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.2.2&lt;/span&gt;の段階では，パターンシノニムはコンパイラがクラッシュするなどの非常に多くのバグを抱えていました．私は&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;をまだあまり試していませんが，パターンシノニムの仕様が非常に複雑なため，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．パターンシノニムをプロダクトで多用する場合，その点に注意した方が良いでしょう．&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のレコードシステムの拡張は非常に強力ですが，その反面システムが非常に複雑になっています．このため，&lt;span class=&#34;ascii&#34;&gt;8.2.2&lt;/span&gt;の段階でコンパイラがクラッシュするなど非常に多くのバグを抱えていました．レコードシステムの仕様の改良は現在も進んでいますが，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．これらの拡張をプロダクトで多用する場合，その点に注意した方が良いでしょう．特に，&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;以降に導入された拡張には注意が必要です．&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn11&#34;&gt;&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張はかなり最近入った拡張で，多数の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張，特に強力な型システムを前提にして書かれています．このため，選択関数の実装にもかなり多くの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用しています．ここでは，特に解説しないのでそういうものだと思っておいてください．なお，このプログラムはプロダクションで使うことを前提にしていませんので，そこはご注意ください．&lt;a href=&#34;#fnref11&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn12&#34;&gt;&lt;p&gt;この機能は型演算子を定義しないで再エクスポートなどをする場合にも使用されるため，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ExplicitNamespaces&#34;&gt;&lt;code&gt;ExplicitNamespaces&lt;/code&gt;拡張&lt;/a&gt;として切り離されています．&lt;a href=&#34;#fnref12&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn13&#34;&gt;&lt;p&gt;この機能は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ConstrainedClassMethods&#34;&gt;&lt;code&gt;ConstrainedClassMethods&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref13&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn14&#34;&gt;&lt;p&gt;型制約が小さいとは，型変数とコンストラクタと変数の組の出現が少ないということです．&lt;a href=&#34;#fnref14&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn15&#34;&gt;&lt;p&gt;より正確には，&lt;code&gt;FunctionalDependencies&lt;/code&gt;に対する制限もありますが，ここでは割愛します．&lt;a href=&#34;#fnref15&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn16&#34;&gt;&lt;p&gt;この拡張は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeSynonymInstances&#34;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref16&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn17&#34;&gt;&lt;p&gt;特に&lt;code&gt;ScopedTypeVariables&lt;/code&gt;拡張を指定する場合，型注釈は必要です．&lt;a href=&#34;#fnref17&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn18&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=347246&#34;&gt;“&lt;span class=&#34;ascii&#34;&gt;Generalising Monads to Arrows&lt;/span&gt;”&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;, John Hughes, in Science of Computer Programming 37, pp. 67&lt;/span&gt;–&lt;span class=&#34;ascii&#34;&gt;111, May 2000&lt;/span&gt;&lt;a href=&#34;#fnref18&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn19&#34;&gt;&lt;p&gt;一見，この構文は単純な脱糖を行うと脱糖後のプログラムが非常に冗長になるように思えます．しかし，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドに設けられている書き換え規則によって，最終的に妥当な大きさまで脱糖後のプログラムが小さくなってくれます．&lt;a href=&#34;#fnref19&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/main-tester.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/main-tester.html</id><title type="text">CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました</title><updated>2018-04-09T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/main-tester.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;こんにちは。みなさん、テストは書いてますか？&lt;br /&gt;
「&lt;a href=&#34;http://syocy.hatenablog.com/entry/haskell-library-2016#%E3%83%86%E3%82%B9%E3%83%88&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;&lt;/a&gt;」という記事でも紹介されているとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;にも様々なテスト用ライブラリーがあります。&lt;br /&gt;
今回は、「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;」でも紹介されている&lt;a href=&#34;https://hackage.haskell.org/package/silently&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;&lt;/a&gt;というパッケージにインスパイアされた、新しいテスト用ライブラリーを作りました。&lt;br /&gt;
タイトルにも書きましたが&lt;a href=&#34;https://hackage.haskell.org/package/main-tester&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;&lt;/a&gt;といいます。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;ほかのライブラリーとの違い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;使い方・バグ報告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は名前の通り、&lt;code&gt;main&lt;/code&gt;関数のテストをサポートするライブラリーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製のプログラムを起動すると最初に実行される、あの&lt;code&gt;main&lt;/code&gt;関数です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数は&lt;code&gt;IO ()&lt;/code&gt;という型であるとおり、原則として必ず入出力を伴うので、自動テストがしにくい関数です。&lt;br /&gt;
一般的なベストプラクティスとしては、できるだけ&lt;code&gt;IO&lt;/code&gt;でない、純粋な関数を中心にテストを書いていくのが普通でしょう。&lt;br /&gt;
それでも敢えて&lt;code&gt;main&lt;/code&gt;関数の自動テストを書くのには、以下のメリットがあります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数をテストすると言うことは、作っているコマンドの、ユーザーの要求に最も近いレベルのテスト、&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テスト（&lt;span class=&#34;ascii&#34;&gt;end-to-end&lt;/span&gt; テスト）をすることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数（や、その他の&lt;code&gt;IO&lt;/code&gt;を伴う関数）に対するテストは、データベースやファイルシステムなど、外部のソフトウェアとの「組み合わせ」で起こるバグを検出できる。
&lt;ul&gt;
&lt;li&gt;経験上、特に単純なアプリケーションでは、そうした外部のソフトウェアに対する「誤解」が原因となったバグが比較的多いように感じています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;私の個人的な都合ですが、趣味では小さなアプリケーションを書くことが多いので、そうした&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストの方が効果的だったりする。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このように、&lt;code&gt;main&lt;/code&gt;関数をはじめとする、&lt;code&gt;IO&lt;/code&gt;な関数に対して敢えて自動テストを書くことには、様々なメリットがあります。&lt;br /&gt;
&lt;code&gt;main-tester&lt;/code&gt;はそうした&lt;code&gt;IO&lt;/code&gt;な関数をテストする際に伴う、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの問題を解決しました。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;標準出力・標準エラー出力に出力した文字列がテストしにくい
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;captureProcessResult&lt;/code&gt;という関数で、標準出力・標準エラー出力に出力した文字列をそれぞれ&lt;code&gt;ByteString&lt;/code&gt;として取得することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;標準入力から文字列を読み出そうとすると、テストの実行が停止してしまう。
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;withStdin&lt;/code&gt;という関数で、標準入力に与えたい文字列を&lt;code&gt;ByteString&lt;/code&gt;として与えることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここに書いたことは、ビルドした実行ファイルを子プロセスとして呼び出すことによってもできます。&lt;br /&gt;
入出力の順番など、標準出力や標準エラー出力のより細かい挙動をテストするにはその方がいいでしょう&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
しかし、テストのために&lt;code&gt;PATH&lt;/code&gt;を分離させる必要があったり、そのために&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/2885&#34;&gt;&lt;code&gt;stack exec&lt;/code&gt;を使ったらめっちゃ遅い&lt;/a&gt;という問題があったり、そもそも子プロセス呼び出しはそれだけでオーバーヘッドがあったりと、様々な問題があります。&lt;br /&gt;
物事をよりシンプルにするには、&lt;code&gt;main&lt;/code&gt;関数を直接呼び出した方がよいでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;アプリケーションの&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストにおける、そうした子プロセスの呼び出しの問題と、より大きな関数をテストしたいというニーズに応えるためのライブラリーなのです。&lt;/p&gt;
&lt;h1 id=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ほかのライブラリーとの違い&lt;/h1&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;というパッケージにインスパイアされた」と冒頭で申しましたとおり、前節で紹介した機能は、実はすでにほかのライブラリーに似たものがあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;に加え、&lt;a href=&#34;https://hackage.haskell.org/package/imperative-edsl-0.7.1/docs/System-IO-Fake.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;imperative-edsl&lt;/span&gt;というパッケージに含まれる、&lt;code&gt;System.IO.Fake&lt;/code&gt;というモジュール&lt;/a&gt;です&lt;small&gt;（ほかにもあったらすみません！🙇🙇🙇）&lt;/small&gt;。&lt;br /&gt;
これらと&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;との違いは何でしょう？&lt;/p&gt;
&lt;p&gt;第一に、先ほども触れましたが、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数や&lt;code&gt;withStdin&lt;/code&gt;関数は、標準出力・標準エラー出力・標準入力でやりとりする文字列を&lt;span class=&#34;ascii&#34;&gt;strict&lt;/span&gt;な&lt;code&gt;ByteString&lt;/code&gt;でやりとりします。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;や&lt;code&gt;System.IO.Fake&lt;/code&gt;は、&lt;code&gt;String&lt;/code&gt;なのです。&lt;br /&gt;
&lt;code&gt;ByteString&lt;/code&gt;は文字通り任意のバイト列を扱うことができるので、「&lt;span class=&#34;ascii&#34;&gt;Unicode&lt;/span&gt;の文字のリスト」である&lt;code&gt;String&lt;/code&gt;よりも、多様なデータを扱うことができます。&lt;/p&gt;
&lt;p&gt;これは、特に複数の種類の文字コードを扱うとき、非常に重要な機能となります。&lt;br /&gt;
&lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;以前の記事で取り上げた、&lt;code&gt;Invalid character&lt;/code&gt;というエラー&lt;/a&gt;を再現させる場合も、ないと大変やりづらいでしょう。&lt;/p&gt;
&lt;p&gt;第二に、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数は、&lt;code&gt;main&lt;/code&gt;関数の終了コードも&lt;a href=&#34;https://hackage.haskell.org/package/base-4.11.0.0/docs/System-Exit.html#t:ExitCode&#34;&gt;&lt;code&gt;ExitCode&lt;/code&gt;型&lt;/a&gt;の値として取得できます。&lt;br /&gt;
&lt;code&gt;main&lt;/code&gt;関数の中で&lt;code&gt;exitFailure&lt;/code&gt;等の関数を呼び出すと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として投げられます。&lt;br /&gt;
既存のライブラリーでこれを行うと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として処理されるため、テストしたい&lt;code&gt;main&lt;/code&gt;関数の実行が終了してしまいます。&lt;br /&gt;
結果、&lt;code&gt;main&lt;/code&gt;関数が標準出力・標準エラー出力に書き込んだ文字列を取得することができないのです。&lt;br /&gt;
「○○というエラーメッセージを出力して異常終了する」といったことをテストしたい場合、これでは使いづらいでしょう。&lt;br /&gt;
&lt;strong&gt;「&lt;code&gt;main&lt;/code&gt;関数の&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストを行うためのライブラリーである」&lt;/strong&gt;という観点から、必須の機能であると判断し、実装しました。 ちなみに、&lt;code&gt;ExitCode&lt;/code&gt;以外の例外についてはそのまま投げられます。仕様を単純にするために、これはユーザーのテストコードの中で処理することとしています。&lt;/p&gt;
&lt;h1 id=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・バグ報告&lt;/h1&gt;
&lt;p&gt;機能は非常にシンプルなので、使い方については&lt;a href=&#34;https://hackage.haskell.org/package/main-tester-0.1.0.0/docs/Test-Main.html&#34;&gt;ドキュメント&lt;/a&gt;のサンプルコードを読めば大体わかるかなぁと思いますが、簡単にサンプルを載せておきましょう。&lt;/p&gt;
&lt;p&gt;例えばこんなソース👇のプログラムがあった場合、&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleMain.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;  putStr &lt;span class=&#34;st&#34;&gt;&amp;quot;What&amp;#39;s your name?: &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`isInfixOf`&lt;/span&gt; name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; die &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; name &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;? Sorry I don&amp;#39;t know such a guy!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;を使えば、次のように&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleSpec.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hspec &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;your-cool-command&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given &amp;#39;Yuji&amp;#39; to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints a string including &amp;#39;Nice name&amp;#39; without an error&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitSuccess&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; B.null&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;        prStdout result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given other name to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints an error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;other name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitFailure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (not &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; B.null)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれのファイルを同じディレクトリーに置いた上で、次のように実行すれば試せるはずです &lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;ユーザーの皆さんは適当に読み替えてください…）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build hspec main-tester&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- --ghc-arg=-i. ExampleSpec.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ex&#34;&gt;your-cool-command&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Yuji&amp;#39;&lt;/span&gt; to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; a string including &lt;span class=&#34;st&#34;&gt;&amp;#39;Nice name&amp;#39;&lt;/span&gt; without an error&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; other name to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; an error message&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;ex&#34;&gt;Finished&lt;/span&gt; in 0.0130 seconds&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; examples, 0 failures&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バグを見つけたら&lt;a href=&#34;https://gitlab.com/igrep/main-tester/issues&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;に報告してください&lt;small&gt;（最近の個人的な判官贔屓により、敢えて&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;にしております 😏）&lt;/small&gt;。&lt;br /&gt;
それではこの春は&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Testing!!&lt;/span&gt; 💚💚💚&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数を子スレッドとして&lt;code&gt;forkIO&lt;/code&gt;することで同じことが恐らくできますが、テスト結果の報告に使うべき、標準出力・標準エラー出力を食い合うことになってしまうので、非常にやりづらいと思います。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/renew-haskell-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Antenna をリニューアルしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html</id><title type="text">Haskell Antenna をリニューアルしました</title><updated>2018-03-21T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;は&lt;a href=&#34;https://github.com/lotz84&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;lotz84&lt;/span&gt;&lt;/a&gt;氏が作った&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の日本語情報を収集するウェブサイトです。 下記の記事を読むと、動機付けなどが分かると思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/03-haskell-antenna.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt; を公開しました &lt;span class=&#34;ascii&#34;&gt;- Haskell-jp&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残念なことに&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;は動作が重く、なかなか満足に閲覧することが出来ませんでした。 そこで、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;をリニューアルしました！&lt;/p&gt;
&lt;p&gt;正確には、&lt;a href=&#34;https://planet.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Planet Haskell&lt;/span&gt;&lt;/a&gt;の日本語版として作成した&lt;a href=&#34;https://github.com/matsubara0507/planet-haskell-jp-demo&#34;&gt;もの&lt;/a&gt;を、新しい&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;として置き換えました。 新&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;は旧&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;と比べると見た目も機能も更新頻度も残念なことになってしまいましたが、各サイトのフィードから記事の一覧を取得し静的サイトとして生成しているだけなので動作は軽快です。&lt;/p&gt;
&lt;p&gt;旧&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;同様に新&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;でも配信する情報源&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;今のところ&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;RSS2.0&lt;/span&gt;形式のフィード&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;をいつでも募集しています。 もし追加すべき情報源にアイデアがあれば&lt;a href=&#34;https://github.com/haskell-jp/antenna#サイトの追加方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;レポジトリの&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;にかかれている方法を参考に&lt;span class=&#34;ascii&#34;&gt;Pull Request&lt;/span&gt;を送っていただくことが可能です。 また、&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;を送るのは面倒だという方は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;#antenna&lt;/span&gt;チャンネルを通じて提案を行ってもらうことも大歓迎です。 &lt;span class=&#34;ascii&#34;&gt;(Planet Haskell&lt;/span&gt;がそうであるように&lt;span class=&#34;ascii&#34;&gt;)Haskell&lt;/span&gt;中心でなくても良いので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の情報を発信しているブログを持っている方は是非、追加提案をしていただけると助かります。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/main-tester.html&#34; lang=&#34;ja&#34;&gt;CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-long-path.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2018-03-20T22:47:14+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/windows-long-path.html</id><title type="text">WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</title><updated>2018-03-13T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/windows-long-path.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;去年、&lt;a href=&#34;/posts/2017/windows-gotchas.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を扱う時によく遭遇するエラーと対処法&lt;/a&gt;という記事で、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;ユーザーが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で開発したとき、あるいは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製のプログラムを使用した際によく遭遇するエラーやその回避方法を紹介しました。&lt;br /&gt;
今回は、そこに追記したい内容として、最近私がよく出遭うようになったエラーを紹介します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34; title=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;code&gt;openFile: does not exist (No such file or directory)&lt;/code&gt;といわれたら短いパスに移そう&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;回避方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34; title=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34; title=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;のユニコード版の関数に、&lt;code&gt;\\?\&lt;/code&gt;というプレフィックスを着けた絶対パスを渡す。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考url&#34; title=&#34;参考url&#34;&gt;参考&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34; title=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;openFile: does not exist (No such file or directory)&lt;/code&gt;といわれたら短いパスに移そう&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;というエラーは、本当に読んで字のごとく、開こうとしたファイルが存在しないためのエラーであることとがもちろん多いのですが、エラーメッセージに反して違う原因である場合もあります。&lt;/p&gt;
&lt;p&gt;例えば、最近私はとあるプロジェクトを数文字長い名前にリネームしたのですが、たったそれだけで、&lt;code&gt;stack test&lt;/code&gt;した際必ず問題のエラーが発生するようになってしまいました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack test
a-little-longer-name-project-0.1.0.0: build (lib + exe + test)
Preprocessing library for a-little-longer-name-project-0.1.0.0..
Building library for a-little-longer-name-project-0.1.0.0..
Preprocessing executable &amp;#39;mmlh&amp;#39; for a-little-longer-name-project-0.1.0.0..
Building executable &amp;#39;mmlh&amp;#39; for a-little-longer-name-project-0.1.0.0..
Preprocessing test suite &amp;#39;a-little-longer-name-project-test&amp;#39; for a-little-longer-name-project-0.1.0.0..
Building test suite &amp;#39;a-little-longer-name-project-test&amp;#39; for a-little-longer-name-project-0.1.0.0..
[1 of 5] Compiling Paths_aLittleLongerNameProject ( .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.hs, .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\Paths_aLittleLongerNameProject.o )
.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.dump-hi: openFile: does not exist (No such file or directory)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どういうことかと悩んでいたところ、&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3649&#34;&gt;こんな&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;を見つけました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3649#issuecomment-351612621&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Snoyman&lt;/span&gt;の指摘&lt;/a&gt;のとおり、こちらの問題は&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で使えるパスの長さが原因のエラーのようです。&lt;br /&gt;
どういうことかというと、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;MSDN&lt;/span&gt;のこちらのページ&lt;/a&gt;でも触れているとおり、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の（&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語レベルでの）各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;では、一度に扱えるパスの長さが&lt;span class=&#34;ascii&#34;&gt;260&lt;/span&gt;文字までと決められていて、その制限にかかったためのエラーだというのです！&lt;br /&gt;
&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;なんてエラーメッセージで表されるのでわかりづらい！&lt;small&gt;（おそらく&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;のエラーコードの出し方に問題があるんじゃないかと思います）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;DOS&lt;/span&gt;時代から残るこの制限、完全に時代錯誤なものでしかないのですが、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;でパッケージマネージャーなどが自動的に作ったパスを扱っていると、しばしば出くわすことがあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;においても、&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3285&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;で同じ問題が議論されていたり、&lt;a href=&#34;https://github.com/commercialhaskell/stack/releases/tag/v1.6.5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ver. 1.6.5&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ChangeLog&lt;/span&gt;&lt;/a&gt;でも言及されていたりと、至る所で格闘している跡があります。&lt;/p&gt;
&lt;h2 id=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;回避方法&lt;/h2&gt;
&lt;p&gt;そんな&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;ですが、残念ながら私が知る限り、プロジェクトなどのパスを（&lt;code&gt;C:\&lt;/code&gt;などのよりルートに近い場所に置いて）より短くする以外の回避方法はありません。&lt;br /&gt;
&lt;a href=&#34;https://github.com/haskell/haskell-ide-engine#installation-on-windows&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-ide-engine&lt;/span&gt;のインストール方法のページ&lt;/a&gt;曰く、（新しめの）&lt;span class=&#34;ascii&#34;&gt;Windows 10&lt;/span&gt;であれば、グループポリシーを編集して、「&lt;span class=&#34;ascii&#34;&gt;Win32&lt;/span&gt;の長いパスを有効にする」を「有効」にすれば回避できるとのことですが、残念ながら手元で試した限りうまくいきませんでした。何かやり方がまずかったのかもしれませんが。&lt;br /&gt;
いずれにしても、&lt;code&gt;stack build&lt;/code&gt;コマンドなどを実行したときに問題のエラーに遭遇した場合、ビルドしたいもののパスをなんとかして短くする以上の方法はありません。&lt;br /&gt;
&lt;code&gt;C:\&lt;/code&gt;直下をホームディレクトリのように使う人が今でもたくさんいるわけです。&lt;/p&gt;
&lt;p&gt;一方、あなたが問題のエラーが発生するプログラムを&lt;strong&gt;修正する&lt;/strong&gt;ことができる立場にある場合、次の方法で回避できるかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34; title=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。&lt;/h3&gt;
&lt;p&gt;本件はあくまでも、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回の呼び出しで渡せる長さの制限ですので、制限を超えてしまうような場合はパスを分割すればよいのです。&lt;br /&gt;
&lt;a href=&#34;https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitFileName&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;filepath&lt;/span&gt;パッケージの&lt;code&gt;splitFileName&lt;/code&gt;関数&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitPath&#34;&gt;&lt;code&gt;splitPath&lt;/code&gt;関数&lt;/a&gt;を駆使してパスを分割した上で、対象のファイルの親ディレクトリーまで&lt;a href=&#34;https://hackage.haskell.org/package/directory-1.3.2.1/docs/System-Directory.html#v:setCurrentDirectory&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;directory&lt;/span&gt;パッケージの&lt;code&gt;setCurrentDirectory&lt;/code&gt;関数&lt;/a&gt;で移動すれば、制限に引っかからないはずです&lt;small&gt;（時間の都合でこちらについては試すコードを用意しておりません。あしからず）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;残念ながらカレントディレクトリーはプロセス全体で共有される情報ですので、マルチスレッドなプログラムでは頭の痛い問題が出てきてしまいますが、一番確実に回避できる方法のはずです。&lt;br /&gt;
マルチスレッドである場合を考慮したくない場合は、次に紹介する方法を検討するとよいでしょう。&lt;/p&gt;
&lt;h3 id=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34; title=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;のユニコード版の関数に、&lt;code&gt;\\?\&lt;/code&gt;というプレフィックスを着けた絶対パスを渡す。&lt;/h3&gt;
&lt;p&gt;ここまでに出てきた、「&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;」は、すべて「&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;」と呼ばれる&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;固有の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;群の一部です。&lt;br /&gt;
この「&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;」に含まれる関数の多くは、「ユニコード版」とそうでないものに分かれます&lt;small&gt;（詳細は&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317766(v=vs.85).aspx&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Conventions for Function Prototypes (Windows)&lt;/span&gt;&lt;/a&gt;をご覧ください）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;このうち、「ユニコード版」の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;には、この制限を緩和する専用の機能が含まれています。&lt;br /&gt;
先ほども触れた&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;MSDN&lt;/span&gt;のページ&lt;/a&gt;曰く、なんと&lt;code&gt;\\?\&lt;/code&gt;という変な文字列を絶対パスの頭に着けると、最大約&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字のパスまで受け付けるようになるというのです！&lt;br /&gt;
なんともアドホックな感じのする解決方法ですが、&lt;span class=&#34;ascii&#34;&gt;Microsoft&lt;/span&gt;が言うんだから間違いありません。&lt;br /&gt;
いずれにしても&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字という微妙な最大文字数ができてしまいますが、&lt;span class=&#34;ascii&#34;&gt;UTF-16&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字なので、そう簡単に超えることはないでしょう。&lt;br /&gt;
いちいち絶対パスに変えて変なプレフィックスを加えないといけないという面倒くささはありますが、いちいち分割して相対パスに変換するよりは簡単なはずですので、検討する価値があります。&lt;/p&gt;
&lt;p&gt;この、&lt;code&gt;\\?\&lt;/code&gt;機能を試す場合、下記のコードを適当なファイルに貼り付けて保存し、&lt;code&gt;stack runghc file.hs&lt;/code&gt;などと実行してみてください &lt;span class=&#34;ascii&#34;&gt;(Thanks,&lt;/span&gt; &lt;span class=&#34;citation&#34; data-cites=&#34;matsubara0507&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@matsubara0507&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;!)&lt;/span&gt;。&lt;br /&gt;
&lt;code&gt;catch&lt;/code&gt;関数を使って例外を捕捉している箇所では、実際にパスが長すぎるためにエラーが発生し、&lt;code&gt;catch&lt;/code&gt;されているはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Exception&lt;/span&gt; (catch, &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;        (replicate)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Directory&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  crDir &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getCurrentDirectory&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;    path1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; replicate &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdefgh/&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ok&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;    path2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; replicate &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdefgh/&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    path3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; crDir &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; path2 &lt;span class=&#34;co&#34;&gt;-- error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;    path4 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\?\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; path3 &lt;span class=&#34;co&#34;&gt;-- ok&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path1: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path2: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path2 &lt;span class=&#34;ot&#34;&gt;`catch`&lt;/span&gt; (\e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show (&lt;span class=&#34;ot&#34;&gt;e ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path3: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path3 &lt;span class=&#34;ot&#34;&gt;`catch`&lt;/span&gt; (\e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show (&lt;span class=&#34;ot&#34;&gt;e ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; data-line-number=&#34;23&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path4: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; data-line-number=&#34;24&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path4&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;さて、またしても&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;固有の面倒な問題を紹介することとなってしまいましたが、俗世の喜び（主にゲーム）と簡単にインストールできる&lt;span class=&#34;ascii&#34;&gt;GUI&lt;/span&gt;に慣らされてしまった私は、今後も&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;を使い続けるつもりです。&lt;br /&gt;
いろいろ困難は尽きませんがこれからも&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Life&lt;/span&gt;を！🏁🏁🏁&lt;/p&gt;
&lt;h1 id=&#34;参考url&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参考url&#34; title=&#34;参考url&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参考&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;※本文中で言及していないもののみ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kkamegawa.hatenablog.jp/entry/2016/07/27/220014&#34;&gt;プログラマ的に&lt;span class=&#34;ascii&#34;&gt;Windows 10 Anniversary Update&lt;/span&gt;のうれしいところ &lt;span class=&#34;ascii&#34;&gt;- kkamegawa&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s weblog&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10&lt;/span&gt; “&lt;span class=&#34;ascii&#34;&gt;Enable NTFS long paths policy&lt;/span&gt;” &lt;span class=&#34;ascii&#34;&gt;option missing - Super User&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/renew-haskell-antenna.html&#34; lang=&#34;ja&#34;&gt;Haskell Antenna をリニューアルしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/topic-request.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell-jp Blogで書いてほしいネタを募集します！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/topic-request.html</id><title type="text">Haskell-jp Blogで書いてほしいネタを募集します！</title><updated>2018-02-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/topic-request.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;では、設立当初より&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する記事を幅広く募集してきました。&lt;br /&gt;
このたびはそれに加え、この&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;で「書いて欲しい！」「読んでみたい！」&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する話題も募集することにしました！ 例えば、下記のような話題が考えられるでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;○○パッケージの解説記事が欲しい&lt;/li&gt;
&lt;li&gt;数学用語と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;用語の対応関係が知りたい&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;を今読むならの注意点&lt;/li&gt;
&lt;li&gt;そのほか、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する話題であれば何でも！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ただし、提案していただいたネタに関する知見の持ち主が居ないかもしれませんし、誰かの負担になるものなので必ず記事になるとは限りません。&lt;/strong&gt; また、場合によっては既に記事があるため、既存の記事を薦められるかもしれません。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ネタを提案してくれる場合&#34; title=&#34;ネタを提案してくれる場合&#34;&gt;ネタを提案してくれる場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#書いてもいいよって場合&#34; title=&#34;書いてもいいよって場合&#34;&gt;書いてもいいよって場合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ネタを提案してくれる場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ネタを提案してくれる場合&#34; title=&#34;ネタを提案してくれる場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ネタを提案してくれる場合&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/blog/issues/new?template=topic-request.md&amp;amp;labels=Topic+Request&#34;&gt;この&lt;span class=&#34;ascii&#34;&gt;Blog&lt;/span&gt;のリポジトリの&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;からお願いします。 既に提案されていたら、その&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;に対して 👍 するといいと思います。&lt;/p&gt;
&lt;h2 id=&#34;書いてもいいよって場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#書いてもいいよって場合&#34; title=&#34;書いてもいいよって場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;書いてもいいよって場合&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TopicRequest&lt;/code&gt; というラベルを作ったので、&lt;a href=&#34;https://github.com/haskell-jp/blog/issues?q=is:issue+is:Aopen+label:%22Topic+Request%22&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;をそのラベルで検索&lt;/a&gt;してください。 書いてもいいという提案があった場合は、&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;に「書いてもいいよ」という旨をコメントしていただけるとバッティングが無くて助かります。&lt;/p&gt;
&lt;p&gt;それでは、今後は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関するあなたの記事だけでなく、あなたが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;について読みたい記事も募集していきますので、どしどし応募してください！ 🙏&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/windows-long-path.html&#34; lang=&#34;ja&#34;&gt;WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/ghc-proposal-and-patch.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHCへの変更提案とパッチ送付の手順例&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/02/13/175220</id><title type="text">すごい JVM 言語 Frege をたのしく学ぼう！</title><updated>2016-02-13T17:52:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/02/13/175220"/><summary type="html">言わずと知れた Haskell の定番教科書『すごい Haskell たのしく学ぼう！』に登場するサンプルコードを、プログラミング言語 Frege に翻訳してみました。 github.com Frege について Frege は、JVM 上で動く純粋関数型プログラミング言語です。 github.com 最近、JVM 用 Lisp である Clojure の存在感を増してきている気がしますが、Frege はいわばその Haskell 版ですね。 文法的には Haskell + Java のメソッドを呼び出すための追加構文、といった感じ。細かな違いはありますが、Haskell が読める人間であれば…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/23/190729</id><title type="text">Alloy で自動定理証明っぽいやつ</title><updated>2015-12-23T19:42:18+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/23/190729"/><summary type="html">このエントリは Theorem Prover Advent Calendar 2015 - Qiita の 23 日目です。 とは言ってみたものの、内容はいわゆる定理証明器の話ではありません。モデル検査器 Alloy を利用して古典命題論理のシークエント計算をモデル化し、証明図を自動生成させることを目標にします。 なお、以下で部分的に引用しているモデル定義の完全版は alloy_sequent.als · GitHub にアップロードしてあります。 モデル化してみる 命題論理式の実装 まず対象となる論理式を Alloy で記述します。 abstract sig Formula {} sig A…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/13/193508</id><title type="text">NGK2015B で AWS + Alloy について話してきました</title><updated>2015-12-13T19:35:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/13/193508"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2015B / 名古屋合同懇親会 2015 忘年会 で発表してきました。 AWS は形式手法の夢を見るか？ - モデル検査器 Alloy によるインフラ設計 from y_taka_23 www.slideshare.net 当日の動画は [3] NGK2015B（名古屋合同懇親会 2015 忘年会） - YouTube から見ることができます。 TL;DR AWS でインフラ運用中 でも設定が大人の都合でカオスになりがちだったりして辛い よろしい、ならば形式手法だ サンプルコードを動かしてみよう！ まずはインストールしてみる 公式ページ Alloy …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/08/01/203751</id><title type="text">第十二回渋谷 Java で Featherweight Java の話をしてきました</title><updated>2015-08-01T20:37:51+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/08/01/203751"/><summary type="html">8 月 1 日に行われた第十二回渋谷 Java で Java の型システムについて LT をしてきました。以下が使用したスライドです。 Hello, Type Systems! - Introduction to Featherweight Java from y_taka_23 ちなみに Featherweight Java を導入した論文はここで読めます。今回の LT では時間の都合上細かい内容をほとんど述べていないので、もし興味があればぜひ元論文に目を通してみると面白いと思います。なお LT で扱ったのは第 2 章で述べられている（ジェネリクスを持たない）FJ の部分です。 スライドの補…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/07/26/174136</id><title type="text">稼働中の Docker コンテナ内にファイルを転送するツール Docker Inject を作ってみました</title><updated>2015-07-26T17:41:36+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/07/26/174136"/><summary type="html">ホスト側から run 中の Docker コンテナ内へ、ディレクトリごとコピーします。 y-taka-23/docker-injectgithub.com 背景 Docker を運用している上で、動いているコンテナの中にファイルを送り込みたくなったことはないでしょうか。ないですか？ 残念ながらあるところにはあるのです。とりあえず今回はあるということにして進みます。 docker cp コマンドを使用すれば「コンテナからホストへ」のファイル転送は可能ですが、逆に「ホストからコンテナへ」の転送手段は公式では提供されていないはずです。docker run 時に -v オプションを付けておいて、マウン…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/06/22/162833</id><title type="text">Haskellの型クラスを活用する</title><updated>2015-06-22T16:30:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/06/22/162833"/><summary type="html">Haskellの型クラスは、うまく使えば高いパフォーマンスと抽象度を両立できる、優れた仕組みである。その使い方のコツは、決して理解の難しいものではない。 小さな性質、大きな恩恵 プログラマは大きなものを小さく見せがちだ。オブジェクト指向プログラミングに慣れている人がやりがちなアンチパターンとして、欲しい機能と、それを分割する基準が現実に寄りすぎていて、一つ一つが巨大というものがある。 普通のプログラミングではありえない例かもしれないが、たとえば家を作りたいことを考える。「ベッド」「箪笥」「台所」「冷蔵庫」「トイレ」「風呂」のように設備ごとに分けた抽象化をしたいと考えるだろう。確かにこれは理に適…</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/17/125213</id><title type="text">最近やったこと</title><updated>2015-04-20T18:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/17/125213"/><summary type="html">最近やったことのまとめ。 CPSのモナド変換子 モナド変換子の速さを測ってみる - モナドとわたしとコモナドfumieval.hatenablog.com で作ったmtl-cの塵を払い、Hackageにリリースした。 StateTやWriterTは中でタプルを作ったり壊したりしているが、CPS変換するとそれがなくなり、しかも(&gt;&gt;=)も最適化されるためそれなりのパフォーマンスの向上が期待できる。モナドガチユーザにおすすめだ。 補足 GHC 7.10.1現在、StateTに関しては最適化がうまく効くらしく、Lazy、Strict、CPS版のパフォーマンスはほぼ同じだった。一方、CPS版Write…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/173848</id><title type="text">Haskellでいかに多態を表すか</title><updated>2015-04-06T17:46:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/173848"/><summary type="html">オブジェクト指向を行使する心 ではオブジェクト指向の必要性と仕組みについて議論した。 インスタンスは言語によって様々な実装方法があるが、大きく分けて「クラス(処理)のインデックス」か「処理そのもの」のどちらかがインスタンスの内部に隠れている。 と述べたが、Haskellの場合、クラスのインデックスに基づいた表現では、インターフェイスは型クラス、クラスはインスタンス、インスタンスは存在量化された型の値に対応する。…といってもややこしいことこの上ないので、実装例を考えてみよう。 まず、問題となっている愚直な実装は、Haskellではこんな感じだ。 data World = World { … } …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/141523</id><title type="text">オブジェクト指向を行使する心</title><updated>2015-04-06T14:16:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/141523"/><summary type="html">今日、とあるツイートでプログラミングにおけるよくある問題が顕現していた。 プログラミングしてそうなサークル探したら、ゲーム公開してて、ソースコード公開されてたから見た。 pic.twitter.com/7W09sb9DFa— タコス(祭り) (@tacosufestival) 2015, 4月 4 奇妙な行コメントには目を瞑るとして、このコードは要約すれば以下のような処理を実現していることが窺える。 ゲームプログラミングでは、現在のシーンによって処理を切り替える必要がある。メニュー画面ならメニューの処理を、戦闘画面なら戦闘を、マップならマップの表示をそれぞれ行う。 現在のシーンの種類は変数によ…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
&#34;Haslell Platform 2014.2.0.0&#34;を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/20/155326</id><title type="text">モノイドと継続渡しの道具箱</title><updated>2015-03-21T06:54:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/20/155326"/><summary type="html">関数型言語Haskellにおいて、普通は計算の結果は関数の戻り値として扱うが、「結果を受け取る関数」 に渡すという継続渡しというスタイルもある。これは単なる冗長なやり方ではなく、様々な興味深い性質を持つ。 基本形は、aという値を渡すところを ∀r. (a -&gt; r) -&gt; r のような表現にする。たとえば、与えられた数の42倍を渡したいとき、そのまま\x -&gt; x * 42ではなく、\x f -&gt; f (x * 42)と書く。もちろんこれだけではありがたみが分からない。 さて、与えられた文字列の中のうち、大文字のアルファベットを取り出し、それがアルファベットの何番目か計算するプログラムを作りた…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/08/214505</id><title type="text">Haskellにおけるたった一つのデザインパターン</title><updated>2015-03-08T21:45:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/08/214505"/><summary type="html">デザインパターンを作らないこと。型とクラスがあんたの武器だ。</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/02/05/174342</id><title type="text">出、出～～ｗｗｗｗｗ銀行員待行列解説奴～ｗｗｗｗｗｗｗ</title><updated>2015-02-06T14:16:34+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/02/05/174342"/><summary type="html">銀行員待行列(Banker&#39;s deque)、二つのリストで構成奴～～ｗｗｗｗｗ 入奴と出奴～ｗｗｗｗｗｗｗｗｗ ↓入奴 三(^o^)ノ [(^o^)ノ, (^o^)ノ, (^o^)ノ] ヽ(^o^)三 [ヽ(^o^), ヽ(^o^), ヽ(^o^)] ↑出奴 追加は入奴にcons、取り出しは出奴にuncons奴～ｗｗｗリストなので基本定数時間奴～ｗｗｗｗｗｗ リスト枯渇防止の為、リストの長さに以下の条件課奴～～～ｗｗｗｗｗｗ length (入奴) &lt;= length (出奴) * 3 + 1 length (出奴) &lt;= length (入奴) * 3 + 1 条件充足不能場合、|leng…</summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2019-08-20T14:41:18+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/norkron/items/f0de364cc980171b1db7</id><title type="text">圏論以前の準備運動―圏と関手―</title><updated>2019-08-20T14:41:18+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/norkron/items/f0de364cc980171b1db7"/></entry><entry><id>https://qiita.com/matoruru/items/0e9334388eca3ef9e999</id><title type="text">Haskellのヒアドキュメントもどき</title><updated>2019-08-19T09:33:59+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/matoruru/items/0e9334388eca3ef9e999"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/08-19-extensible-migration.html</id><title type="text">extensible-0.6.1 マイグレーションガイド</title><updated>2019-08-19T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/08-19-extensible-migration.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; のバージョンを最新の &lt;strong&gt;0.6.1&lt;/strong&gt; に更新した際にいくつかコードの修正が必要になったので、メモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;今回の記事では一部の変更点にしか触れないため、完全な変更点については &lt;a href=&#34;https://github.com/fumieval/extensible/blob/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id=&#34;section&#34;&gt;0.5&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.10.1/docs/Data-Extensible-Wrapper.html#t:Const-39-&#34;&gt;Const’&lt;/a&gt; が削除されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Applicative.html#t:Const&#34;&gt;Control.Applicative.Const&lt;/a&gt; を利用しましょう。&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34;&gt;0.5.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/membership&#34;&gt;membership&lt;/a&gt; パッケージが依存関係に追加されました。(&lt;code&gt;Data.Extensible.HList&lt;/code&gt; と &lt;code&gt;Data.Extensible.Internal&lt;/code&gt; が membership パッケージに移動した形です)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssocKey&lt;/code&gt;, &lt;code&gt;AssocValue&lt;/code&gt;, &lt;code&gt;ValueIs&lt;/code&gt;, &lt;code&gt;KeyValue&lt;/code&gt; が廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の型を利用しましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.5.1 より前&lt;/th&gt;
&lt;th&gt;0.5.1 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:AssocKey&#34;&gt;AssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyOf&#34;&gt;KeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:AssocValue&#34;&gt;AssocValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:TargetOf&#34;&gt;TargetOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:ValueIs&#34;&gt;ValueIs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:TargetIs&#34;&gt;TargetIs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyValue&#34;&gt;KeyValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyTargetAre&#34;&gt;KeyTargetAre&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;proxyAssocKey&lt;/code&gt;, &lt;code&gt;stringAssocKey&lt;/code&gt;, &lt;code&gt;proxyAssocValue&lt;/code&gt; も同様に廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の関数を利用しましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.5.1 より前&lt;/th&gt;
&lt;th&gt;0.5.1 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyAssocKey&#34;&gt;proxyAssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyKeyOf&#34;&gt;proxyKeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:stringAssocKey&#34;&gt;stringAssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:stringKeyOf&#34;&gt;stringKeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyAssocValue&#34;&gt;proxyAssocValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyTargetOf&#34;&gt;proxyTargetOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Class.html#t:Associate&#34;&gt;Associate&lt;/a&gt; が廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Class.html#t:Lookup&#34;&gt;Lookup&lt;/a&gt; を利用しましょう。&lt;/p&gt;
&lt;p&gt;引数の順番が変わる点に注意してください。そのままではコンパイルエラーになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Associate&lt;/span&gt; k v xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lookup&lt;/span&gt; xs k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;section-2&#34;&gt;0.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(:*)&lt;/code&gt; と &lt;code&gt;(:|)&lt;/code&gt; がそれぞれ廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の関数を利用しましょう。その際、引数の順番が逆になっているので注意してください。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.6 より前&lt;/th&gt;
&lt;th&gt;0.6 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Struct.html#t::-42-&#34;&gt;(:*)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Struct.html#t::-38-&#34;&gt;(:&amp;amp;)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Sum.html#t::-124-&#34;&gt;(:|)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Sum.html#t::-47-&#34;&gt;(:/)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;:*&lt;/span&gt;) h xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs &lt;span class=&#34;op&#34;&gt;:&amp;amp;&lt;/span&gt; h&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt;) h xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs &lt;span class=&#34;op&#34;&gt;:/&lt;/span&gt; h&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Tangle.html#t:TangleT&#34;&gt;TangleT&lt;/a&gt; の引数の順番が入れ替わりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6 より前の定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; h xs m a&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6 以降の定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; xs h m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;section-3&#34;&gt;0.6.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.5.1&lt;/code&gt; で廃止予定となっていた &lt;code&gt;deriveIsRecord&lt;/code&gt; が削除されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;code&gt;Generics&lt;/code&gt; のインスタンスであれば導出可能です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6.1 より前&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;deriveIsRecord &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;Foo&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6.1 以降の定義 (Foo が Generics のインスタンスであればOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsRecord&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;extensible-0.6.1&lt;/code&gt; に一気に更新しましたが、特にハマることも無くスムーズに更新が完了しました。&lt;/p&gt;
&lt;p&gt;いくつか新しい関数などが追加されているので、その辺りも要チェックですね。&lt;/p&gt;
&lt;h2 id=&#34;宣伝&#34;&gt;宣伝&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf07&#34;&gt;技術書典7&lt;/a&gt;に初参加します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/2019/08-19/circle.png&#34; alt =&#34;サークルカット&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;
&lt;p&gt;サークルカットは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%AB%E3%83%95%E3%82%A9%E3%83%B3%E3%82%B9%E3%83%BB%E3%83%9F%E3%83%A5%E3%82%B7%E3%83%A3&#34;&gt;アルフォンス・ミュシャ&lt;/a&gt;っぽい感じを意識しています。ミュシャ風のポスターは至る所で目にしますが、ミュシャの最高傑作は「スラヴ叙事詩」なので興味のある人は是非調べてみてください。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;現時点で Haskell 本を「2冊」販売予定です。(値段や配布数については未定です)&lt;/p&gt;
&lt;h3 id=&#34;すごいhaskell自分で作ろう-write-your-haskell-for-great-good&#34;&gt;(1) すごいHaskell自分で作ろう！ Write Your Haskell for Great Good!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/images/2019/08-19/main.jpg&#34; alt =&#34;表紙&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;
&lt;p&gt;【著者】 &lt;span class=&#34;citation&#34; data-cites=&#34;gotoki_no_joe&#34;&gt;@gotoki_no_joe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【概要】 Haskell でプログラミングするのは楽しい。ところで「Haskell&lt;em&gt;を&lt;/em&gt;プログラミングする」のも楽しいのでは？じゃあやってみよう。というわけで、Haskell からヒラヒラを全て削り落して削りすぎたような関数型言語を作ります。&lt;/p&gt;
&lt;p&gt;構文を設計し、意味を定義し、それらに従ってインタプリタを &lt;strong&gt;Haskell&lt;/strong&gt; と &lt;strong&gt;TypeScript&lt;/strong&gt; で実装します。&lt;/p&gt;
&lt;p&gt;Haskell といいつつ普通でわかりやすい&lt;strong&gt;正格評価な処理系&lt;/strong&gt;から始めて、その後で&lt;strong&gt;遅延評価をする処理系&lt;/strong&gt;に取り組みます。必要になった部分だけを計算する遅延評価の仕組みが、組み込み演算やパターンマッチと協調する様子を自作して理解します。&lt;/p&gt;
&lt;p&gt;おまけに TypeScript によるパーサコンビネータの作り方が付いています。&lt;/p&gt;
&lt;p&gt;ごめんなさい！Haskell らしさの重要な柱である型システムについて執筆が間に合いませんでした。インデント構文、JavaScript を出力するコンパイラとともに、後編での執筆を予定しています。&lt;/p&gt;
&lt;p&gt;【目次 (仮)】&lt;/p&gt;
&lt;p&gt;クリックすると &lt;code&gt;pdf&lt;/code&gt; が開きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/images/2019/08-19/toc1.pdf&#34;&gt; &lt;img src=&#34;/images/2019/08-19/toc1.png&#34; alt =&#34;目次1&#34; width=&#34;400px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;/images/2019/08-19/toc2.pdf&#34;&gt; &lt;img src=&#34;/images/2019/08-19/toc2.png&#34; alt =&#34;目次2&#34; width=&#34;400px&#34;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ghc-api-入門-仮&#34;&gt;(2) GHC API 入門 (仮)&lt;/h3&gt;
&lt;p&gt;【著者】 &lt;span class=&#34;citation&#34; data-cites=&#34;waddlaw&#34;&gt;@waddlaw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【概要】 GHC API を使って具体的に動く何かを作る予定ですが、全然筆が進んでいないので内容未定・・・。(上記の書籍と比べると宣伝できるものが何も・・・)&lt;/p&gt;
&lt;p&gt;頑張ります！&lt;/p&gt;
&lt;h3 id=&#34;おすすめポイント&#34;&gt;おすすめポイント&lt;/h3&gt;
&lt;p&gt;Haskell の処理系を作ってみたいなーって思っている人は「すごいHaskell自分で作ろう！ Write Your Haskell for Great Good!」がおすすめです！！！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; と &lt;code&gt;Haskell&lt;/code&gt; という異なるパラダイムの言語による実装が一冊に収まっているので、とてもお得ですね。&lt;/p&gt;
&lt;p&gt;応援よろしくお願いします〜。&lt;/p&gt;</summary></entry><entry><id>https://qiita.com/yutasth/items/e7c45372c8f8c062f39d</id><title type="text">Multiplicative Persistence</title><updated>2019-08-16T10:01:15+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yutasth/items/e7c45372c8f8c062f39d"/></entry><entry><id>https://qiita.com/ymmy02/items/3fbab0ca3518ae19b7d6</id><title type="text">Haskellでクイックソートとマージソート</title><updated>2019-08-15T21:09:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ymmy02/items/3fbab0ca3518ae19b7d6"/></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 &#34;Village and Pillage&#34;は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://qiita.com/ukyo-su/items/8a9952da483aeca99e99</id><title type="text">（非Haskellerのための）わかったつもりなモナド</title><updated>2019-08-15T17:43:53+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ukyo-su/items/8a9952da483aeca99e99"/></entry><entry><id>https://qiita.com/Stakumi/items/6b6c7c0803d69b2ba702</id><title type="text">すごいH本覚え書き</title><updated>2019-08-13T18:14:29+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Stakumi/items/6b6c7c0803d69b2ba702"/></entry><entry><id>https://qiita.com/show2214/items/1643d123521d2f58f3dc</id><title type="text">System.Randomがimportできない</title><updated>2019-08-12T16:33:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/show2214/items/1643d123521d2f58f3dc"/></entry><entry><id>https://qiita.com/yakotokay/items/0003cef60e2f8700a320</id><title type="text">NixOSことはじめ　</title><updated>2019-08-10T22:58:00+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/yakotokay/items/0003cef60e2f8700a320"/></entry><entry><id>https://qiita.com/norkron/items/7a5ebf3525efdce7229b</id><title type="text">プログラミングにおける変数について</title><updated>2019-08-08T13:45:25+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/norkron/items/7a5ebf3525efdce7229b"/></entry><entry><id>https://qiita.com/sio-funmatsu/items/16bc8125d2ce27b8e90f</id><title type="text">中国でStackを使うには？</title><updated>2019-08-07T17:14:24+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/sio-funmatsu/items/16bc8125d2ce27b8e90f"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/0ffbcc2e6e5dca35f6a0</id><title type="text">O(n)時間でソートが終了するバケットソートをHaskellで実装する (1)</title><updated>2019-08-07T16:53:18+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/0ffbcc2e6e5dca35f6a0"/></entry><entry><id>https://qiita.com/ayase/items/7aa7df036025987d87a5</id><title type="text">Haskellで自然言語処理100本ノックの第2章を解いてみる。【後編】</title><updated>2019-08-06T14:13:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ayase/items/7aa7df036025987d87a5"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/58a5f9bb2921c14617bb</id><title type="text">O(n)時間でソートが完了するバケットソートをHaskellで実装する (2)</title><updated>2019-08-06T05:07:58+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/58a5f9bb2921c14617bb"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id><title type="text">elmap.hs プロジェクトを作りました</title><updated>2019-08-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは &lt;a href=&#34;http://hackage.haskell.org/package/elm-export&#34;&gt;elm-export&lt;/a&gt; と &lt;a href=&#34;http://hackage.haskell.org/package/servant-elm&#34;&gt;servant-elm&lt;/a&gt; というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．&lt;/p&gt;
&lt;p&gt;elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から &lt;a href=&#34;http://hackage.haskell.org/package/elm-bridge&#34;&gt;elm-bridge&lt;/a&gt; に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs&#34;&gt;&lt;/iframe&gt;&lt;/h2&gt;
&lt;p&gt;この記事は elmap.hs を作る上で色々したことのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;なぜ-elm-bridgeservant-elm-ではダメか&#34;&gt;なぜ elm-bridge/servant-elm ではダメか&lt;/h2&gt;
&lt;p&gt;を説明するためにまずは elm-bridge パッケージについて紹介する．&lt;/p&gt;
&lt;h3 id=&#34;elm-bridge-パッケージ&#34;&gt;elm-bridge パッケージ&lt;/h3&gt;
&lt;p&gt;elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．&lt;/p&gt;
&lt;p&gt;仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の型定義そのもの&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;-- レコードの型エイリアス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypePrimAlias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EPrimAlias&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 普通の型エイリアス&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeSum&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ESum&lt;/span&gt;             &lt;span class=&#34;co&#34;&gt;-- 直和型&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の型自身&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETVar&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- 型変数&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- コンストラクタ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 型適用&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyTuple&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- タプル型&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm での型定義の構文を表したのが &lt;code&gt;ETypeDef&lt;/code&gt; 型で，関数の型を書くときなどの型を表現する構文を表したのが &lt;code&gt;EType&lt;/code&gt; 型だ． &lt;code&gt;toElmType&lt;/code&gt; 関数を使うことで任意の型の &lt;code&gt;EType&lt;/code&gt; を &lt;code&gt;Typeable&lt;/code&gt; で機械的に導出したり，&lt;code&gt;deriveElmDef&lt;/code&gt; と TemplateHaskell で &lt;code&gt;ETypeDef&lt;/code&gt; への変換を導出することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toElmType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ETypeDef への変換は型クラスで定義する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  compileElmDef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;deriveElmDef defaultOptions &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;Hoge&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに &lt;code&gt;deriveElmDef&lt;/code&gt; の代わりに &lt;code&gt;deriveBoth&lt;/code&gt; を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして &lt;code&gt;ETypeDef&lt;/code&gt; などに変換したあとは，&lt;code&gt;renderElm&lt;/code&gt; 関数や &lt;code&gt;makeElmModule&lt;/code&gt; 関数を使うことで Elm のコードに変換できる．&lt;/p&gt;
&lt;h3 id=&#34;都合の悪い部分&#34;&gt;都合の悪い部分&lt;/h3&gt;
&lt;p&gt;問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で &lt;code&gt;toElmType&lt;/code&gt; 関数を使っている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasForeignType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  typeFor _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getEndpoints ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;HasForeign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api, &lt;span class=&#34;dt&#34;&gt;GenerateList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foreign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Req&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;getEndpoints &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; listFromAPI (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで，extensible パッケージの拡張可能レコード型に &lt;code&gt;toElmType&lt;/code&gt; を使ってみると…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;amp;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;id\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;})))) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;name\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;})))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;[]&amp;quot;&lt;/span&gt;}))))) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Field&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Identity&amp;quot;&lt;/span&gt;})))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．&lt;/p&gt;
&lt;h2 id=&#34;elmap.hs-プロジェクト&#34;&gt;elmap.hs プロジェクト&lt;/h2&gt;
&lt;p&gt;elm-bridge と servant-elm には生成した &lt;code&gt;ETypeDef&lt;/code&gt; や &lt;code&gt;EType&lt;/code&gt; を再変換する関数を指定することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- servant-elm&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ElmOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ElmOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; urlPrefix             ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlPrefix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; elmTypeAlterations    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 生成した ETypes を変換しなおす&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; elmAlterations        ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 生成した ETypeDef を変換しなおす&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; emptyResponseElmTypes ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; stringElmTypes        ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これで extensible の型を変換しなおすのは大変なので &lt;code&gt;toElmType&lt;/code&gt; のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．&lt;/p&gt;
&lt;h3 id=&#34;elmap-パッケージ&#34;&gt;elmap パッケージ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;toElmType&lt;/code&gt; が扱いにくい理由は，&lt;code&gt;Typeable&lt;/code&gt; 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  compileElmType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;  compileElmType _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;  compileElmType _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toElmTypeWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の場合 `Order` という型名になっている&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  compileElmType _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toElmTypeWith &lt;span class=&#34;st&#34;&gt;&amp;quot;Order&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;servant-elmap-パッケージ&#34;&gt;servant-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;servant 側では elmap パッケージで定義した &lt;code&gt;IsElmType&lt;/code&gt; 型クラスを利用するようにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasForeignType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;  typeFor _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; compileElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getEndpoints ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;HasForeign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api, &lt;span class=&#34;dt&#34;&gt;GenerateList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foreign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Req&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;getEndpoints &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; listFromAPI (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getEndpoints&lt;/code&gt; 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．&lt;/p&gt;
&lt;h3 id=&#34;extensible-elmap-パッケージ&#34;&gt;extensible-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;最後に，extensible の拡張可能レコード型に対して &lt;code&gt;IsElmType&lt;/code&gt; 型クラスのインスタンスを定義すれば完成． 完成品はこちら:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;compileElmRecordTypeWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;compileElmRecordTypeWith name _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;  compileElmType &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; compileElmRecordTypeWith &lt;span class=&#34;st&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ElmType&lt;/code&gt; 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに &lt;code&gt;IsElmDefinition&lt;/code&gt; 型クラスのインスタンスも定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;compileElmRecordAliasWith ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; xs h &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt;) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;compileElmRecordAliasWith name _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  { ea_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeName&lt;/span&gt; name []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;  , ea_fields &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fields&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  , ea_omit_null &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;  , ea_newtype &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  , ea_unwrap_unary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;    fields &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;      (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; xs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;      (\m acc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (stringKeyOf m, compileElmType &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; proxyTargetOf m) &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; acc)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;  compileElmDef &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; compileElmRecordAliasWith &lt;span class=&#34;st&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-普通のレコードに対応する&#34;&gt;おまけ: 普通のレコードに対応する&lt;/h2&gt;
&lt;p&gt;僕はほとんど使わないからいいんだけど，普通のレコード型も &lt;code&gt;IsElmType&lt;/code&gt; に対応しやすいようなヘルパー関数を定義しておこう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toElmAlias ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Rep&lt;/span&gt; a), &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;toElmAlias proxy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;  { ea_name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeName&lt;/span&gt; (renderElm &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; compileElmType proxy) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;  , ea_fields &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Rep&lt;/span&gt; a))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;  , ea_omit_null &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  , ea_newtype &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;  , ea_unwrap_unary &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;rep ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  gcompileElmFields ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; rep &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [(&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;    {&lt;span class=&#34;ot&#34;&gt; userId   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;    ,&lt;span class=&#34;ot&#34;&gt; userName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;    } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;  compileElmType _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;  compileElmDef &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; toElmAlias&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toElmAlias&lt;/code&gt; 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 D` はデータ型を表現&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; x a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; title=&#34;3&#34;&gt;  gcompileElmFields _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 C` はコンストラクタを表現&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; x a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; title=&#34;7&#34;&gt;  gcompileElmFields _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Selector&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;K1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;R&lt;/span&gt; a)) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; title=&#34;11&#34;&gt;  gcompileElmFields _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; [(selName (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S1&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;K1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;R&lt;/span&gt; a) ()), compileElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; a))]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;--- `:*:` は型の直積を表現&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (a &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt; b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; title=&#34;15&#34;&gt;  gcompileElmFields _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; a) &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/YoshikuniJujo/items/7a7601375af1dc4f2516</id><title type="text">［ネタ］ 要素数が変化しないO(n)のソートアルゴリズム</title><updated>2019-08-04T19:02:25+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/7a7601375af1dc4f2516"/></entry><entry><id>https://qiita.com/gimKondo/items/8328840eaa2b2fb44109</id><title type="text">「スターリンソート」を改善したオートクラシーソート</title><updated>2019-08-01T12:29:27+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/gimKondo/items/8328840eaa2b2fb44109"/></entry><entry><id>https://qiita.com/Tatsuki-I/items/380d6bd06515b872b2b2</id><title type="text">計算量O(n)の画期的なソートアルゴリズムであるスターリンソートをHaskell で実装してみた #Haskell</title><updated>2019-07-30T13:37:58+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Tatsuki-I/items/380d6bd06515b872b2b2"/></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2019-07-30T11:26:34+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました。 当日の Twitter でも…</summary></entry><entry><id>https://qiita.com/show2214/items/df8c37c8dd2115f49a06</id><title type="text">haskell-ide-engineの導入</title><updated>2019-07-29T00:11:28+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/show2214/items/df8c37c8dd2115f49a06"/></entry><entry><id>https://qiita.com/kwhrstr1206/items/eaf266820e09c14f1fba</id><title type="text">Haskell ListモナドのBindについて</title><updated>2019-07-22T19:41:21+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kwhrstr1206/items/eaf266820e09c14f1fba"/></entry><entry><id>https://qiita.com/tezca686/items/f6c62caae9cc189a7902</id><title type="text">sortByMを実装して、ぼくの好きなお酒ランキングを作る</title><updated>2019-07-20T12:08:10+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tezca686/items/f6c62caae9cc189a7902"/></entry><entry><id>https://haskell.jp/blog/posts/2019/fallible.html</id><title type="text">fallibleというパッケージをリリースしました</title><updated>2019-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/fallible.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;タイトルの通り、&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;というパッケージを紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/fallible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;matsubara0507/fallible: interface for fallible data type like Maybe and Either. - GitHub&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/fallible/slack.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;と質問したところ、該当するようなパッケージは無さそうだったので作ったという経緯があります。 その際に助言をくれた &lt;a href=&#34;https://github.com/fumieval&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;&lt;/a&gt;氏のコードをほとんど引用した形になったので、&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;に紹介記事を載せることにしました&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;僕は普段、自分のブログに自作したパッケージを書いています&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fallibleパッケージ&#34; title=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;パッケージ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#やってること&#34; title=&#34;やってること&#34;&gt;やってること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基本演算子&#34; title=&#34;基本演算子&#34;&gt;基本演算子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#サンプルコード&#34; title=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方&#34; title=&#34;使い方&#34;&gt;使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おしまい&#34; title=&#34;おしまい&#34;&gt;おしまい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#fallibleパッケージ&#34; title=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;パッケージ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でアプリケーションを記述してると次のようなコードを書くことがありますよね？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;run targetName token verbose &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  users &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getUsers token&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; users &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; us &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; userId &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; L.find isTarget us &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; emsg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; tid &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;          channels &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getChannels token&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;          &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; channels &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; chs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;              &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; chs&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt; tid &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelMembers) chs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;              &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; (logDebug&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelName) chs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;    logDebug&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; logDebug verbose&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    emsg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;user not found: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; targetName&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;    isTarget user &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; userName user &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; targetName&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;logDebug ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;logDebug verbose msg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; verbose &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;のようなチャットツールをイメージしてください。 該当の名前&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;targetName&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を持つユーザーを与えると、そのユーザーが参加しているチャンネルの一覧を表示するというような振る舞いです。 こう段々になってしまうのは気持ち悪いですよね。 &lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;の目的はこの段々を次のように平坦にすることです&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;where&lt;/code&gt; などは割愛&lt;span class=&#34;ascii&#34;&gt;):&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Fallible&lt;/span&gt; (evalContT, exit, lift, (!?=), (???))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;run targetName token verbose &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; evalContT &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  users    &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (getUsers token) &lt;span class=&#34;op&#34;&gt;!?=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; logDebug&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  targetId &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; userId &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; L.find isTarget users &lt;span class=&#34;op&#34;&gt;???&lt;/span&gt; exit (logDebug&amp;#39; emsg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  channels &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (getChannels token) &lt;span class=&#34;op&#34;&gt;!?=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; logDebug&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; (logDebug&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelName) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt; targetId &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelMembers) channels&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;やってること&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#やってること&#34; title=&#34;やってること&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;やってること&lt;/h3&gt;
&lt;p&gt;というか、もともとのアイデアは下記のブログです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ContT&lt;/span&gt; を使ってコードを綺麗にしよう！ &lt;span class=&#34;ascii&#34;&gt;- BIGMOON Haskeller&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s BLOG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを一般化&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Maybe a&lt;/code&gt; 固有ではなく &lt;code&gt;Either e a&lt;/code&gt; でも使う&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;できないかなぁというのがもともとの発想です。&lt;/p&gt;
&lt;h3 id=&#34;基本演算子&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#基本演算子&#34; title=&#34;基本演算子&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;基本演算子&lt;/h3&gt;
&lt;p&gt;次の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの演算子を利用します&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!?=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!??) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(??=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(???) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし、内部実装的には &lt;code&gt;Maybe a&lt;/code&gt; や &lt;code&gt;Either e a&lt;/code&gt; は &lt;code&gt;Fallible&lt;/code&gt; 型クラスで一般化されています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; f &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; f ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  tryFallible ::&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; f) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  tryFallible &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; ()) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  tryFallible &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; t) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (t a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(???) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f, &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; t) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらを継続モナドと組み合わせることで&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;と失敗系モナド&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Maybe a&lt;/code&gt; や &lt;code&gt;Either e a&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を、モナドトランスフォーマーなしに&lt;span class=&#34;ascii&#34;&gt;Do&lt;/span&gt;記法で書くことができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 継続モナドに関する関数&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;evalConstT ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;exit ::&lt;/span&gt; m r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;exit &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;サンプルコード&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#サンプルコード&#34; title=&#34;サンプルコード&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;サンプルコード&lt;/h2&gt;
&lt;p&gt;疑似的な&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;で良いなら&lt;a href=&#34;https://github.com/matsubara0507/fallible/tree/master/example&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;リポジトリの&lt;span class=&#34;ascii&#34;&gt;example&lt;/span&gt;ディレクトリ&lt;/a&gt;にあります&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;上述の例はそれです&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;実際の利用例であれば、最近自作した&lt;a href=&#34;https://github.com/matsubara0507/mixlogue&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;matsubara0507/mixlogue&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーションで多用しています&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://github.com/matsubara0507/mixlogue/blob/8afd16ab4048ff62976b8e38347078fdaa7417dd/src/Mixlogue/Cmd.hs#L81-L93&#34;&gt;ココ&lt;/a&gt;とか&lt;a href=&#34;https://github.com/matsubara0507/mixlogue/blob/8afd16ab4048ff62976b8e38347078fdaa7417dd/src/Mixlogue/Message.hs#L15-L25&#34;&gt;ココ&lt;/a&gt;とか&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 ちなみに、&lt;span class=&#34;ascii&#34;&gt;mixlogue&lt;/span&gt;は特定の&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の分報チャンネル&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;times_hoge&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;の発言を収集するというだけのツールです。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方&#34; title=&#34;使い方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;現状&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;にはあげてないので、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリから参照する方法を利用してください。&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おしまい&#34; title=&#34;おしまい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;氏のコードをほとんど引用するだけになったので自分でリリースするか迷ったんですけど、リリースしてくれというのも丸投げがひどいので自分でリリースしました。 まぁこういう結果が生まれるのも&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;コミュニティの醍醐味ということで。 &lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;氏、いつもアドバイスをくれてありがとう！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;もちろん他の&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の皆さんも！&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/strip-ansi-escape.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;strip-ansi-escapeというパッケージをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://qiita.com/tezca686/items/596ed7673a078170551f</id><title type="text">カタンの最長交易路(Longest Road)を探すために半環を考える</title><updated>2019-07-14T12:28:20+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tezca686/items/596ed7673a078170551f"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/07-14-megaparsec-tutorial.html</id><title type="text">Megaparsec tutorial from IH book</title><updated>2019-07-14T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/07-14-megaparsec-tutorial.html"/><summary type="html">&lt;p&gt;Great original post: &lt;a href=&#34;https://markkarpov.com/megaparsec/megaparsec.html&#34;&gt;Megaparsec tutorial from IH book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この Megaparsec のチュートリアルは、元々は &lt;a href=&#34;https://intermediatehaskell.com/&#34;&gt;Intermediate Haskell&lt;/a&gt; という本の１つの章のために書かれました。 ここ一年で本が進展していないため、 他の著者は私がスタンドアロンのチュートリアルとしてテキストを公表し、 人々が少なくとも私たちの仕事のこの部分から恩恵を受けることができるようにする ことに同意しました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ParsecT&#34;&gt;&lt;code&gt;ParsecT&lt;/code&gt; と &lt;code&gt;Parsec&lt;/code&gt; モナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Character&#34;&gt;文字 とバイナリストリーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MonaAp&#34;&gt;モナディック構文とアプリカティブ構文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Eof&#34;&gt;&lt;code&gt;Eof&lt;/code&gt; による入力の強制消費&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Alt&#34;&gt;選択肢を使った動作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Try&#34;&gt;&lt;code&gt;try&lt;/code&gt; によるバックトラックの制御&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Debug&#34;&gt;パーサのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Label&#34;&gt;ラベル付けと隠蔽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Run&#34;&gt;パーサの実行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MonadParsec&#34;&gt;&lt;code&gt;MonadParsec&lt;/code&gt; 型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Lexing&#34;&gt;字句解析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#White&#34;&gt;空白&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Char&#34;&gt;文字と文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Numbers&#34;&gt;数字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookAhead&#34;&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; と &lt;code&gt;lookAhead&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Expr&#34;&gt;式のパース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Indentation&#34;&gt;Indentation-sensitiveなパース&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nonIndented&#34;&gt;&lt;code&gt;nonIndented&lt;/code&gt; と &lt;code&gt;indentBlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#SimpleIndented&#34;&gt;単純なインデントされたリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#NestedIndented&#34;&gt;ネストされたインデントのあるリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#LineFolds&#34;&gt;折り返しの追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Efficient&#34;&gt;効率のよいパーサを書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Error&#34;&gt;パースエラー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ErrDef&#34;&gt;パースエラーの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#SigErr&#34;&gt;パースエラーを通知する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#DispErr&#34;&gt;パースエラーの表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CatchErr&#34;&gt;パーサ実行時にパースエラーをキャッチする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Testing&#34;&gt;Megaparsecパーサのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CustomInput&#34;&gt;カスタム入力ストリームの操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「例：あなた自身のパーサコンビネータを書く」の章で開発されたトイパーサコンビネータは、実際の使用には適していないので、 同じ問題を解決するHaskellエコシステムのライブラリを見ていきましょう。 そして、それらがなすさまざまなトレードオフに注意してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;parsec&lt;/a&gt; は長い間 Haskellの「デフォルト」のパーサライブラリでした。このライブラリは、エラーメッセージの品質に焦点を当てていると言われています。ただし、テストカバレッジは良くなく、現在メンテナンスモードになっています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/attoparsec&#34;&gt;attoparsec&lt;/a&gt; は、パフォーマンスを重視した堅牢で高速なパーサライブラリです。このリストの中で、インクリメンタルパージングを完全にサポートしているのはこれだけです。欠点はエラーメッセージの質が悪いこと、モナド変換子として使用できないこと、および入力ストリームとして使用できる型の組み合わせが限られていることです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/trifecta&#34;&gt;trifecta&lt;/a&gt; は優れたエラーメッセージを特徴としていますが、あまり文書化されておらず、理解するのが難しいです。 &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;ByteString&lt;/code&gt; はそのままではパースできますが、&lt;code&gt;Text&lt;/code&gt; はパースできません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/megaparsec&#34;&gt;megaparsec&lt;/a&gt; は、ここ数年で積極的に開発されてきた &lt;code&gt;parsec&lt;/code&gt; のフォークです。現在のバージョンは、速度、エラーメッセージの品質、そして柔軟性の間で素晴らしいバランスを取っています。 &lt;code&gt;parsec&lt;/code&gt; の非公式の後継者として、&lt;code&gt;parsec&lt;/code&gt; ライブラリを使用したことがあるか、チュートリアルを読んだことがあるユーザにとっては慣習的でなじみのあるものです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらすべてのライブラリを網羅しようとするのは実用的ではないため、 &lt;code&gt;megaparsec&lt;/code&gt; に焦点を当てます。より正確には、この本が出版される時までにはほとんどどこでも古いバージョンに取って代わるであろうバージョン7をカバーするつもりです。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ParsecT&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;parsect-と-parsec-モナド&#34;&gt;ParsecT と Parsec モナド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt;は、主要なパーサモナド変換子であり、&lt;code&gt;megaparsec&lt;/code&gt; の中心的なデータ型です。 &lt;code&gt;ParsecT e s m a&lt;/code&gt; は、次のようにパラメータ化されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;e&lt;/code&gt; はエラーメッセージのカスタムコンポーネントの型です。もし私たちが何もカスタムを望まないのであれば（そして今のところ私たちはしません）、 &lt;code&gt;Data.Void&lt;/code&gt; モジュールの &lt;code&gt;Void&lt;/code&gt; を使うだけです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;s&lt;/code&gt; は入力ストリームの型です。 &lt;code&gt;megaparsec&lt;/code&gt; は、&lt;code&gt;String&lt;/code&gt;、正格または遅延 &lt;code&gt;Text&lt;/code&gt; 、 正格または遅延 &lt;code&gt;ByteStrings&lt;/code&gt; をそのまま使用して動作します。カスタム入力ストリームを扱うことも可能です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m&lt;/code&gt; は &lt;code&gt;ParsecT&lt;/code&gt; モナド変換子の内部モナドです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; はパース結果であるモナディック値です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ほとんどの場合、&lt;code&gt;m&lt;/code&gt; は &lt;code&gt;Identity&lt;/code&gt; に他ならないので、&lt;code&gt;Parsec&lt;/code&gt; 型シノニムは非常に便利です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parsec&lt;/code&gt; は、単なる &lt;code&gt;ParsecT&lt;/code&gt;の変換子を使わないバージョンです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のモナド変換子と MTL のモナド変換子およびクラスの間の類似点を示すこともできます。 確かに、&lt;code&gt;MonadState&lt;/code&gt; や &lt;code&gt;MonadReader&lt;/code&gt; などの型クラスと目的が似ている &lt;code&gt;MonadParsec&lt;/code&gt; 型クラスがあります。 後で &lt;code&gt;MonadParsec&lt;/code&gt; に戻り、詳細について説明します。&lt;/p&gt;
&lt;p&gt;カスタムした型シノニムを定義することは &lt;code&gt;megaparsec&lt;/code&gt; を使ってパーサを書くことを始める最も良い方法です。 これは次の2つの理由から良い考えです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;あなたのパーサモナドとして &lt;code&gt;Parser&lt;/code&gt; があれば、&lt;code&gt;Parser Int&lt;/code&gt; のようなトップレベルのシグネチャを追加することがより簡単になります。シグネチャがないと、&lt;code&gt;e&lt;/code&gt; のようなものが曖昧になることがよくあります。これはライブラリの多相APIの反面です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;すべての型変数を具体的な方に固定して操作すると、GHCの最適化が大幅に向上します。パーサが多相性を保っている場合、GHCは最適化の観点からそれほど多くのことはできません。&lt;code&gt;megaparsec&lt;/code&gt; APIは多相ですが、エンドユーザーは具体的にパーサモナドの型を固定することが予想されます。そのため、インライン展開と、ほとんどの関数の定義がインターフェイスファイルと呼ばれるファイルに出力されているという事実により、GHCは非常に効率的な非多相的なコードを生成できます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次のように型シノニム（通常は &lt;code&gt;Parser&lt;/code&gt; と呼ばれる）を定義しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ype &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--                   ^    ^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--                   |    ┗━━━━┓&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- カスタムエラーコンポーネント  入力ストリームの型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カスタムパースエラーを扱い始めるまでは、この章で &lt;code&gt;Parser&lt;/code&gt;が表示されているときは、この型を想定してください。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Character&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文字とバイナリストリーム&#34;&gt;文字とバイナリストリーム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、5種類の入力ストリーム（&lt;code&gt;String&lt;/code&gt;、正格または遅延 &lt;code&gt;Text&lt;/code&gt; 、 正格または遅延 &lt;code&gt;ByteStrings&lt;/code&gt;）をそのまま使用できると言われています。 これが可能なのは、ライブラリでこれらの型が &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスになっているからです。 &lt;code&gt;Stream&lt;/code&gt; 型クラスはそれぞれのデータ型が &lt;code&gt;megaparsec&lt;/code&gt; のパーサへの入力として使用するために必要な関数を抽象化したものです。&lt;/p&gt;
&lt;p&gt;シンプルにしたバージョンの &lt;code&gt;Stream&lt;/code&gt; は、次のようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;  s ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; s ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  take1_ ::&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s, s) &lt;span class=&#34;co&#34;&gt;-- aka uncons&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  tokensToChunk ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際の &lt;code&gt;Stream&lt;/code&gt; の定義にはもっと多くのメソッドがありますが、それらを知ることはライブラリを使うために必要ではありません。&lt;/p&gt;
&lt;p&gt;型クラスには2つの型関数が関連付けられています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ストリーム &lt;code&gt;s&lt;/code&gt; における &lt;code&gt;Token s&lt;/code&gt; は単一トークンの型です。一般的な例は &lt;code&gt;Char&lt;/code&gt; と &lt;code&gt;Word8&lt;/code&gt; ですが、カスタムストリームのために何か他のものになるかもしれません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ストリーム &lt;code&gt;s&lt;/code&gt; における &lt;code&gt;Tokens s&lt;/code&gt; はストリームの「チャンク」の型です。チャンクの概念はパフォーマンス上の理由から導入されただけです。確かに、トークンのリスト &lt;code&gt;[Token s]&lt;/code&gt; と同型であるストリームの一部のより効率的な表現が可能です。例えば、 &lt;code&gt;Text&lt;/code&gt; 型の入力ストリームは &lt;code&gt;Tokens s ~ Text&lt;/code&gt; であり、&lt;code&gt;Text&lt;/code&gt; のチャンクは &lt;code&gt;Text&lt;/code&gt; です。型の等価性 &lt;code&gt;Tokens s ~ s&lt;/code&gt; はしばしば成り立ちますが、 &lt;code&gt;Tokens s&lt;/code&gt; と &lt;code&gt;s&lt;/code&gt; はカスタムストリームでは異なる可能性があるため、&lt;code&gt;megaparsec&lt;/code&gt; ではこれらの型を分離します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デフォルトの入力ストリームの型を以下の表に示します。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;s&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Token s&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Tokens s&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Word8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Word8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Token&lt;/code&gt; および &lt;code&gt;Tokens&lt;/code&gt; 型関数は &lt;code&gt;megaparsec&lt;/code&gt; API の型にて 多く出現するため、慣れることが重要です。&lt;/p&gt;
&lt;p&gt;お気づきかもしれませんが、デフォルト入力ストリームを&lt;code&gt;Token&lt;/code&gt;型でグループ化すると、2つのグループになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Token s ~ Char&lt;/code&gt; となる文字ストリーム : &lt;code&gt;String&lt;/code&gt; および 正格・遅延 &lt;code&gt;Text&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Token s ~ Word8&lt;/code&gt; となるバイナリストリーム : 正格・遅延 &lt;code&gt;ByteString&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; では、それぞれの型の入力ストリームに対して同じパーサをコーディングする必要はないことがわかりました。 (&lt;code&gt;attoparsec&lt;/code&gt; ライブラリではする必要があります) しかし、それぞれの &lt;code&gt;Token s&lt;/code&gt; ごとに異なるコードが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文字ストリームの共通のコンビネータを得るには、&lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; モジュールをインポートしてください。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バイナリストリームで同じようにするには、&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt;をインポートします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのモジュールには、次のような2つの類似したヘルパーパーサのセットが含まれています。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Text.Megaparsec.Char&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;newline&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;eol&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このモジュールを構築するプリミティブをいくつか紹介しましょう。そうすれば、これから使用するツールを理解できます。&lt;/p&gt;
&lt;p&gt;最初のプリミティブは&lt;code&gt;token&lt;/code&gt;と呼ばれ、&lt;code&gt;Token s&lt;/code&gt;をパースすることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;token ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ Matching function for the token to parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s))&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ Expected items (in case of an error)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;token&lt;/code&gt; の最初の引数はパースしたいトークンのマッチング関数です。 関数が&lt;code&gt;Just&lt;/code&gt;で何かを返す場合、その値はパース結果になります。 &lt;code&gt;Nothing&lt;/code&gt; はパーサがトークンを受理しなかったことによりプリミティブが失敗したこと示します。&lt;/p&gt;
&lt;p&gt;2番目の引数は、（&lt;code&gt;container&lt;/code&gt;パッケージの）&lt;code&gt;Set&lt;/code&gt; であり、失敗した場合にユーザーに表示されるすべての予想されるErrorItemを含みます。 パースエラーについて議論するときに、&lt;code&gt;ErrorItem&lt;/code&gt; 型を詳しく調べます。&lt;/p&gt;
&lt;p&gt;トークンがどのように機能するのかをよりよく理解するために、 &lt;code&gt;Text.Megaparsec&lt;/code&gt; モジュールの定義を見てみましょう。 これにはあらゆる種類の入力ストリームで 機能するコンビネータが含まれています。 &lt;code&gt;satisfy&lt;/code&gt;はかなり一般的なコンビネータです。 マッチさせたいトークンを与えると &lt;code&gt;True&lt;/code&gt; を返す述語を与え、 パーサは結果を返します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;satisfy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- ^ Predicate to apply&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;satisfy f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token testToken Set.empty&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    testToken x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f x &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;testToken&lt;/code&gt; は &lt;code&gt;Bool&lt;/code&gt; を返す関数 &lt;code&gt;f&lt;/code&gt; を 期待するトークン &lt;code&gt;Maybe (Token s)&lt;/code&gt; を返す関数に変えます。 &lt;code&gt;satisfy&lt;/code&gt; では、 一致すると予想される正確なトークン列がわからないため、 2番目の引数として &lt;code&gt;Set.empty&lt;/code&gt; を渡します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;satisfy&lt;/code&gt; を理解するために、機能するか見てみましょう。 パーサで遊ぶためには、それを実行するヘルパー関数が必要です。 GHCiでテストするために &lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;parseTest&lt;/code&gt; を提供します。&lt;/p&gt;
&lt;p&gt;まず、GHCiを起動していくつかのモジュールをインポートしましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Text.Megaparsec&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Text.Megaparsec.Char&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Data.Text (Text)&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Data.Void&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサの型のあいまいさを解決するために、 使用する &lt;code&gt;Parser&lt;/code&gt; 型シノニムを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;type&lt;/span&gt; Parser = Parsec Void Text&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、文字列リテラルを &lt;code&gt;Text&lt;/code&gt; の値として使用できるように、&lt;code&gt;OverloadedStrings&lt;/code&gt; 言語拡張を有効にする必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;ex&#34;&gt;set&lt;/span&gt; -XOverloadedStrings&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;satisfy&lt;/code&gt; の多相性により、 &lt;code&gt;parseTest&lt;/code&gt; は &lt;code&gt;MonadParsec e s m&lt;/code&gt; で &lt;code&gt;e&lt;/code&gt; と &lt;code&gt;s&lt;/code&gt; に何を使うべきかわからないため、 アノテーション &lt;code&gt;:: Parser Char&lt;/code&gt; は必要です (&lt;code&gt;m&lt;/code&gt; はこれらのヘルパーにより &lt;code&gt;Identity&lt;/code&gt; と仮定されます)。 型シグネチャを持つ既存のパーサを使う場合、 パーサの型を明示的に説明する必要はありません。&lt;/p&gt;
&lt;p&gt;うまくいきそうです。 &lt;code&gt;satisfy&lt;/code&gt; の問題は、 それが失敗したときに何が期待されるのかを述べないということです。 なぜなら、 &lt;code&gt;satisfy&lt;/code&gt; の呼び出し元が提供する関数を分析することができないからです。 あまり一般的ではないですが、 代わりにもっと有用なエラーメッセージを生成することができる 他のコンビネータがあります。 例えば、&lt;code&gt;single&lt;/code&gt; (&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; と &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; では &lt;code&gt;char&lt;/code&gt; と呼ばれる型制約のあるシノニムを使用する) は特定のトークン値にマッチします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;single&lt;/span&gt; :: MonadParsec e s m&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;Token&lt;/span&gt; s           -- ^ Token to match&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; m (Token s)&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;single&lt;/span&gt; t = token testToken expected&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;testToken&lt;/span&gt; x = if x == t then Just x else Nothing&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;expected&lt;/span&gt;    = E.singleton (Tokens (t:&lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;[]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Tokens&lt;/code&gt; 値コンストラクタは、前に説明した型関数 &lt;code&gt;Tokens&lt;/code&gt; と何の共通点もありません。 実際、 &lt;code&gt;Tokens&lt;/code&gt; は &lt;code&gt;ErrorItem&lt;/code&gt; のコンストラクタの1つであり、 一致すると予想される具体的なトークン列 を指定するために使用されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; :: Parser Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; :: Parser Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のようにの改行を定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;newline&lt;/span&gt; :: (MonadParsec e s m, Token s ~ Char) =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;m&lt;/span&gt; (Token s)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;newline&lt;/span&gt; = single &lt;span class=&#34;st&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2つ目のプリミティブは&lt;code&gt;tokens&lt;/code&gt;と呼ばれ、 &lt;code&gt;Tokens&lt;/code&gt; をパースすることを可能にします。 つまり、入力の固定されたチャンクに一致させるために使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;tokens&lt;/span&gt; :: MonadParsec e s m&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;  =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Tokens&lt;/span&gt; s -&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Tokens s -&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Bool&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt; ^ チャンクの等価性をチェックする述語&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Tokens s&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt; ^ 入力にマッチさせたいチャンク&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; m (Tokens s)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tokens&lt;/code&gt; に関して定義された2つのパーサがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- from &amp;quot;Text.Megaparsec&amp;quot;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;chunk ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;chunk &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tokens (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- from &amp;quot;Text.Megaparsec.Char&amp;quot; and &amp;quot;Text.Megaparsec.Byte&amp;quot;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;string&amp;#39; ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;CI.FoldCase&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s))&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;string&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tokens ((&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`on`&lt;/span&gt; CI.mk)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それらは入力の一定のチャンクにマッチします。 &lt;code&gt;chunk&lt;/code&gt; (&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; と &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; では &lt;code&gt;string&lt;/code&gt; と呼ばれる型制約のあるシノニムを使用する) は大文字と小文字を区別しますが、 &lt;code&gt;string&#39;&lt;/code&gt; は大文字と小文字を区別しません。 大文字と小文字を区別しない場合のマッチには &lt;code&gt;case-insensitive&lt;/code&gt; パッケージが使われているため、 &lt;code&gt;FoldCase&lt;/code&gt; 制約があります。&lt;/p&gt;
&lt;p&gt;新しいコンビネータも使ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FOO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;FOO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FoO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;FoO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FoZ&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FoZ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;st&#34;&gt;&amp;quot;FoZ&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK、単一のトークンと入力のチャンクをマッチできました。 次のステップは、より興味深いパーサを書くために 基本的なパーサを組み合わせる方法を学びます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;MonaAp&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;モナディック構文とアプリカティブ構文&#34;&gt;モナディック構文とアプリカティブ構文&lt;/h2&gt;
&lt;p&gt;パーサを組み合わせる最も簡単な方法は、それらを逐次実行することです。 &lt;code&gt;ParsecT&lt;/code&gt;と&lt;code&gt;Parsec&lt;/code&gt;はモナドであり、 モナドでの束縛はパーサを連続で使用することとまったく同じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mySequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;mySequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;  c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a, b, c)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行すると、すべてが期待通りに機能することを確認できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;bcd&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;bcd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;adc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;adc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すべてのモナドがアプリカティブファンクターでもあることを覚えていれば、 逐次実行のための代替構文が可能であり、 アプリカティブ構文を使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mySequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;mySequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;  (,,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目のバージョンは最初のバージョンとまったく同じように機能します。 どちらのスタイルを使うかは、しばしば好みの問題です。 モナディックスタイルは間違いなく冗長で、ときにはより明確ですが、 一方アプリカティブスタイルはより簡潔です。 そうは言っても、モナドはアプリカティブファンクターよりも強力であるため、 モナディックスタイルはもちろんより強力です。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Eof&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;eof-による入力の強制消費&#34;&gt;eof による入力の強制消費&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Applicative&lt;/code&gt; はとてもおもしろいことをするのに十分強力です。 単位元を持つ結合演算子を備えることで、 Haskell では &lt;code&gt;Alternative&lt;/code&gt; 型クラスとして表現される アプリカティブファンクタのモノイドを得ます。 &lt;code&gt;parser-combinators&lt;/code&gt; パッケージは &lt;code&gt;Applicative&lt;/code&gt; と &lt;code&gt;Alternative&lt;/code&gt; の概念に基づき構築された かなりの数の抽象的なコンビネータを提供します。 &lt;code&gt;Text.Megaparsec&lt;/code&gt; モジュールはそれらを &lt;code&gt;Control.Applicative.Combinators&lt;/code&gt; から再エクスポートします。&lt;/p&gt;
&lt;p&gt;最も一般的なコンビネータの1つに、&lt;code&gt;many&lt;/code&gt; と呼ばれるものがあります。 それは与えられたパーサを0回以上実行することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aabbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目の結果は少し驚くかもしれません。 パーサは &lt;code&gt;a&lt;/code&gt; が一致したとして消費しましたが、その後停止しました。 &lt;code&gt;many (char &#39;a&#39;)&lt;/code&gt; の後に何をしたいのか何も言っていませんでした！&lt;/p&gt;
&lt;p&gt;ほとんどの場合は、パーサに入力全体の消費を強制させ、 恥ずかしがり屋で黙ってやめるのではなく、 パースエラーを報告させたいです。 これは、入力の終わりに達することを 要求することによって行われます。 入力の終わりは概念にすぎませんが、 幸いにも &lt;code&gt;eof :: MonadParsec e m =&amp;gt; m ()&lt;/code&gt;と呼ばれるプリミティブがあり、 これは何も消費せず、入力の終わりでのみ成功します。 これをパーサに追加してもう一度試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;*&lt;/span&gt; eof :: Parser [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aabbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;aabbb&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-5&#34;&gt;&lt;a href=&#34;#cb19-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb19-6&#34;&gt;&lt;a href=&#34;#cb19-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-7&#34;&gt;&lt;a href=&#34;#cb19-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサで&lt;code&gt;b&lt;/code&gt;について何も言わなかったことにより、 それらは確かに予想外となりました。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Alt&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;選択肢を使った動作&#34;&gt;選択肢を使った動作&lt;/h2&gt;
&lt;p&gt;これから、次の形式のURIのパースが可能である実用的なパーサを開発します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;角括弧 &lt;code&gt;[]&lt;/code&gt; の中はオプションであり、それらは有効なURIに現れても現れなくてもよいことを覚えておくべきです。 &lt;code&gt;[]&lt;/code&gt; は、ある可能性を別の可能性の中で表現するためにネストすることさえできます。私たちはこのすべてを処理します&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scheme&lt;/code&gt; から始めましょう。 &lt;code&gt;data&lt;/code&gt;、&lt;code&gt;file&lt;/code&gt;、&lt;code&gt;ftp&lt;/code&gt;、&lt;code&gt;http&lt;/code&gt;、&lt;code&gt;https&lt;/code&gt;、&lt;code&gt;irc&lt;/code&gt;、&lt;code&gt;mailto&lt;/code&gt; など、私たちが知っているスキームのみを受け入れます。&lt;/p&gt;
&lt;p&gt;一定の文字列と一致させるために、&lt;code&gt;string&lt;/code&gt; を使います。 選択を表現するために、&lt;code&gt;Alternative&lt;/code&gt; 型クラスの &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; メソッドを使います。 次のように書くことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;dat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;dat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;dat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-19&#34;&gt;&lt;a href=&#34;#cb22-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-20&#34;&gt;&lt;a href=&#34;#cb22-20&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-21&#34;&gt;&lt;a href=&#34;#cb22-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見栄えは良いですが、&lt;code&gt;pScheme&lt;/code&gt;の定義は少し反復的です。 &lt;code&gt;choice&lt;/code&gt; コンビネータを使って &lt;code&gt;pScheme&lt;/code&gt; を書く方法があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;  [ string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-9&#34;&gt;&lt;a href=&#34;#cb23-9&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;choice&lt;/code&gt; は要素間に &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を入れてリストを畳み込む操作である &lt;code&gt;asum&lt;/code&gt; の単なるシノニムであり、&lt;code&gt;pScheme&lt;/code&gt; の2つの定義は実際には同じです。 &lt;code&gt;choice&lt;/code&gt; を使用したほうがが少し良く見えるかもしれません。&lt;/p&gt;
&lt;p&gt;スキームの後にはコロン&lt;code&gt;:&lt;/code&gt;があるはずです。 何かした後で別の何かを要求するために、 モナドでの束縛またはdo記法を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb24-1&#34;&gt;&lt;a href=&#34;#cb24-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-2&#34;&gt;&lt;a href=&#34;#cb24-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-3&#34;&gt;&lt;a href=&#34;#cb24-3&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb24-4&#34;&gt;&lt;a href=&#34;#cb24-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-5&#34;&gt;&lt;a href=&#34;#cb24-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-6&#34;&gt;&lt;a href=&#34;#cb24-6&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-7&#34;&gt;&lt;a href=&#34;#cb24-7&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb24-8&#34;&gt;&lt;a href=&#34;#cb24-8&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-9&#34;&gt;&lt;a href=&#34;#cb24-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; r)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pUri&lt;/code&gt;を実行しようとすると、スキーム名の後に &lt;code&gt;:&lt;/code&gt; が必要であることがわかります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb25-1&#34;&gt;&lt;a href=&#34;#cb25-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-2&#34;&gt;&lt;a href=&#34;#cb25-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb25-3&#34;&gt;&lt;a href=&#34;#cb25-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-4&#34;&gt;&lt;a href=&#34;#cb25-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;irc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-5&#34;&gt;&lt;a href=&#34;#cb25-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb25-6&#34;&gt;&lt;a href=&#34;#cb25-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb25-7&#34;&gt;&lt;a href=&#34;#cb25-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-8&#34;&gt;&lt;a href=&#34;#cb25-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-9&#34;&gt;&lt;a href=&#34;#cb25-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;irc:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-10&#34;&gt;&lt;a href=&#34;#cb25-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、このスキームのパーサは完成していません。 良い Haskell のプログラマーは、 正しくないデータを単純に表現できないように型を定義しようとします。 すべての &lt;code&gt;Text&lt;/code&gt; の値が有効なスキームであるとは限りません。 スキームを表すためにデータ型を定義し、 &lt;code&gt;pScheme&lt;/code&gt; パーサにその型の値を返させます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb26-1&#34;&gt;&lt;a href=&#34;#cb26-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-2&#34;&gt;&lt;a href=&#34;#cb26-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-3&#34;&gt;&lt;a href=&#34;#cb26-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-4&#34;&gt;&lt;a href=&#34;#cb26-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-5&#34;&gt;&lt;a href=&#34;#cb26-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-6&#34;&gt;&lt;a href=&#34;#cb26-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-7&#34;&gt;&lt;a href=&#34;#cb26-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-8&#34;&gt;&lt;a href=&#34;#cb26-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-9&#34;&gt;&lt;a href=&#34;#cb26-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb26-10&#34;&gt;&lt;a href=&#34;#cb26-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-11&#34;&gt;&lt;a href=&#34;#cb26-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-12&#34;&gt;&lt;a href=&#34;#cb26-12&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb26-13&#34;&gt;&lt;a href=&#34;#cb26-13&#34;&gt;&lt;/a&gt;  [ &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-14&#34;&gt;&lt;a href=&#34;#cb26-14&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-15&#34;&gt;&lt;a href=&#34;#cb26-15&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-16&#34;&gt;&lt;a href=&#34;#cb26-16&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-17&#34;&gt;&lt;a href=&#34;#cb26-17&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-18&#34;&gt;&lt;a href=&#34;#cb26-18&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-19&#34;&gt;&lt;a href=&#34;#cb26-19&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb26-20&#34;&gt;&lt;a href=&#34;#cb26-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-21&#34;&gt;&lt;a href=&#34;#cb26-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-22&#34;&gt;&lt;a href=&#34;#cb26-22&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-23&#34;&gt;&lt;a href=&#34;#cb26-23&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;$)&lt;/code&gt; 演算子は、左側にある値をただちに関数型コンテキストに入れて、 その時点で存在しているものはすべて置き換えます。 &lt;code&gt;a &amp;lt;$ f&lt;/code&gt; は &lt;code&gt;const a &amp;lt;$&amp;gt; f&lt;/code&gt; と同じですが、 関数によってはより効率的な場合があります。&lt;/p&gt;
&lt;p&gt;引き続きパーサを使ってみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &amp;quot;https:&amp;quot;
1:5:
  |
1 | https:
  |     ^
unexpected &amp;#39;s&amp;#39;
expecting &amp;#39;:&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;うーん、&lt;code&gt;https&lt;/code&gt; は有効なスキームであるべきです。 何がいけないのかわかりますか？ パーサは選択肢を一つずつ試し、 &lt;code&gt;http&lt;/code&gt; で一致し、 &lt;code&gt;https&lt;/code&gt; を試すことはありません。 解決策は、&lt;code&gt;SchemeHttp &amp;lt;$ string &#34;https&#34;&lt;/code&gt; という行を &lt;code&gt;SchemeHttp &amp;lt;$ string &#34;http&#34;&lt;/code&gt; という行の前に置くことです。 選択肢は順序が重要であることを覚えておいてください！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pUri&lt;/code&gt; は正しく動作するようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb28-1&#34;&gt;&lt;a href=&#34;#cb28-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;http:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-2&#34;&gt;&lt;a href=&#34;#cb28-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeHttp}&lt;/span&gt;
&lt;span id=&#34;cb28-3&#34;&gt;&lt;a href=&#34;#cb28-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-4&#34;&gt;&lt;a href=&#34;#cb28-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;https:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-5&#34;&gt;&lt;a href=&#34;#cb28-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeHttps}&lt;/span&gt;
&lt;span id=&#34;cb28-6&#34;&gt;&lt;a href=&#34;#cb28-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-7&#34;&gt;&lt;a href=&#34;#cb28-7&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-8&#34;&gt;&lt;a href=&#34;#cb28-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeMailto}&lt;/span&gt;
&lt;span id=&#34;cb28-9&#34;&gt;&lt;a href=&#34;#cb28-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-10&#34;&gt;&lt;a href=&#34;#cb28-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;foo:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-11&#34;&gt;&lt;a href=&#34;#cb28-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb28-12&#34;&gt;&lt;a href=&#34;#cb28-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-13&#34;&gt;&lt;a href=&#34;#cb28-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb28-14&#34;&gt;&lt;a href=&#34;#cb28-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb28-15&#34;&gt;&lt;a href=&#34;#cb28-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-16&#34;&gt;&lt;a href=&#34;#cb28-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Try&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;try-によるバックトラックの制御&#34;&gt;&lt;code&gt;try&lt;/code&gt; によるバックトラックの制御&lt;/h2&gt;
&lt;p&gt;次に扱う部分は &lt;code&gt;[//[user:password@]host[:port]]&lt;/code&gt; つまり認証情報です。 オプション部分のネストが含まれるので、 これを反映するように &lt;code&gt;Uri&lt;/code&gt; 型 を更新しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb29-1&#34;&gt;&lt;a href=&#34;#cb29-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-2&#34;&gt;&lt;a href=&#34;#cb29-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-3&#34;&gt;&lt;a href=&#34;#cb29-3&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriAuthority ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-4&#34;&gt;&lt;a href=&#34;#cb29-4&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb29-5&#34;&gt;&lt;a href=&#34;#cb29-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-6&#34;&gt;&lt;a href=&#34;#cb29-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-7&#34;&gt;&lt;a href=&#34;#cb29-7&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; authUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (user, password)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-8&#34;&gt;&lt;a href=&#34;#cb29-8&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authHost ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-9&#34;&gt;&lt;a href=&#34;#cb29-9&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authPort ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-10&#34;&gt;&lt;a href=&#34;#cb29-10&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで、バックトラックと呼ばれる重要な概念について議論する必要があります。 バックトラックは、入力を「消費しない」処理により時間を遡る方法です。 これは主に分岐で重要です。ここに一例を示します。&lt;/p&gt;
&lt;pre class=&#34;haskel&#34;&gt;&lt;code&gt;alternatives :: Parser (Char, Char)
alternatives = foo &amp;lt;|&amp;gt; bar
  where
    foo = (,) &amp;lt;$&amp;gt; char &amp;#39;a&amp;#39; &amp;lt;*&amp;gt; char &amp;#39;b&amp;#39;
    bar = (,) &amp;lt;$&amp;gt; char &amp;#39;a&amp;#39; &amp;lt;*&amp;gt; char &amp;#39;c&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;合理的に見えますが、これを試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb31-1&#34;&gt;&lt;a href=&#34;#cb31-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-2&#34;&gt;&lt;a href=&#34;#cb31-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-3&#34;&gt;&lt;a href=&#34;#cb31-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-4&#34;&gt;&lt;a href=&#34;#cb31-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ac&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-5&#34;&gt;&lt;a href=&#34;#cb31-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb31-6&#34;&gt;&lt;a href=&#34;#cb31-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-7&#34;&gt;&lt;a href=&#34;#cb31-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;ac&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-8&#34;&gt;&lt;a href=&#34;#cb31-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb31-9&#34;&gt;&lt;a href=&#34;#cb31-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-10&#34;&gt;&lt;a href=&#34;#cb31-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで起きたことは、 &lt;code&gt;foo&lt;/code&gt; の &lt;code&gt;char &#39;a&#39;&lt;/code&gt; の部分(これが最初に試行されます)の成功と、 入力ストリームからの &lt;code&gt;a&lt;/code&gt; の消費です。 &lt;code&gt;char &#39;b&#39;&lt;/code&gt; は &lt;code&gt;&#39;c&#39;&lt;/code&gt;とのマッチに失敗したため、エラーになりました。 ここで重要なことは、 &lt;code&gt;foo&lt;/code&gt; が何らかの入力を消費しているので &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; は &lt;code&gt;bar&lt;/code&gt; を試していないということです！&lt;/p&gt;
&lt;p&gt;これはパフォーマンス上の理由から行われており、 また、&lt;code&gt;foo&lt;/code&gt; の残り物を &lt;code&gt;bar&lt;/code&gt; に与えて実行するのは意味が無いです。 &lt;code&gt;bar&lt;/code&gt; は &lt;code&gt;foo&lt;/code&gt; と同じ場所の入力ストリームから実行したいです。 &lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;attoparsec&lt;/code&gt; や前の章のトイコンビネータとは異なり、 自動で戻りません。そのため、&lt;code&gt;try&lt;/code&gt; と呼ばれるプリミティブを使用して、 明示的にバックトラックしたいという願望を表現する必要があります。 &lt;code&gt;try p&lt;/code&gt; は、 &lt;code&gt;p&lt;/code&gt; が入力の消費に失敗した場合、 入力が消費されていないかのように失敗します (実際、パーサの状態全体をバックトラックします)。 これにより &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; で右側の選択肢を試すことが可能になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb32-1&#34;&gt;&lt;a href=&#34;#cb32-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;alternatives ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb32-2&#34;&gt;&lt;a href=&#34;#cb32-2&#34;&gt;&lt;/a&gt;alternatives &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; try foo &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb32-3&#34;&gt;&lt;a href=&#34;#cb32-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-4&#34;&gt;&lt;a href=&#34;#cb32-4&#34;&gt;&lt;/a&gt;    foo &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-5&#34;&gt;&lt;a href=&#34;#cb32-5&#34;&gt;&lt;/a&gt;    bar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb33-1&#34;&gt;&lt;a href=&#34;#cb33-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ac&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb33-2&#34;&gt;&lt;a href=&#34;#cb33-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に入力を消費するすべてのプリミティブ （&lt;code&gt;try&lt;/code&gt; などの既存のパーサの動作を変更するプリミティブもあります）は、 入力の消費という点で「アトミック」です。 これは、失敗した場合に自動的にバックトラックするため、 入力を消費して途中で失敗することはできないことを意味します。 これが、&lt;code&gt;pScheme&lt;/code&gt; の選択肢のリストが機能する理由です。 つまり、&lt;code&gt;string&lt;/code&gt; は &lt;code&gt;tokens&lt;/code&gt; の上に定義され、&lt;code&gt;tokens&lt;/code&gt; はプリミティブです。 文字列全体を &lt;code&gt;string&lt;/code&gt; でマッチさせるか、 入力ストリームをまったく消費せずに失敗します。&lt;/p&gt;
&lt;p&gt;URIのパースに戻ると、 &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を使った &lt;code&gt;optional&lt;/code&gt; という便利なコンビネータを作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb34-1&#34;&gt;&lt;a href=&#34;#cb34-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;optional ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb34-2&#34;&gt;&lt;a href=&#34;#cb34-2&#34;&gt;&lt;/a&gt;optional p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; p) &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;optional p&lt;/code&gt; の &lt;code&gt;p&lt;/code&gt; でマッチすれば、結果は &lt;code&gt;Just&lt;/code&gt; になります。 そうでなければ &lt;code&gt;Nothing&lt;/code&gt; が返されます。 ちょうど欲ほしかったものです！ &lt;code&gt;optional&lt;/code&gt; を定義する必要はありません、 &lt;code&gt;Text.Megaparsec&lt;/code&gt; はこのコンビネータを再エクスポートします。 これを &lt;code&gt;pUri&lt;/code&gt; で使うことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb35-1&#34;&gt;&lt;a href=&#34;#cb35-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-2&#34;&gt;&lt;a href=&#34;#cb35-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-3&#34;&gt;&lt;a href=&#34;#cb35-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb35-4&#34;&gt;&lt;a href=&#34;#cb35-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-5&#34;&gt;&lt;a href=&#34;#cb35-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-6&#34;&gt;&lt;a href=&#34;#cb35-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-7&#34;&gt;&lt;a href=&#34;#cb35-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;              &lt;span class=&#34;co&#34;&gt;-- (2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-8&#34;&gt;&lt;a href=&#34;#cb35-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar       &lt;span class=&#34;co&#34;&gt;-- (3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-9&#34;&gt;&lt;a href=&#34;#cb35-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-10&#34;&gt;&lt;a href=&#34;#cb35-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb35-11&#34;&gt;&lt;a href=&#34;#cb35-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-12&#34;&gt;&lt;a href=&#34;#cb35-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb35-13&#34;&gt;&lt;a href=&#34;#cb35-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-14&#34;&gt;&lt;a href=&#34;#cb35-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal) &lt;span class=&#34;co&#34;&gt;-- (4)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-15&#34;&gt;&lt;a href=&#34;#cb35-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}                        &lt;span class=&#34;co&#34;&gt;-- (5)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-16&#34;&gt;&lt;a href=&#34;#cb35-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}                                &lt;span class=&#34;co&#34;&gt;-- (6)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ユーザー名とパスワードとして 任意の英数字の文字列を受け入れることができるようにし、 同様にホストの形式を単純化しました。&lt;/p&gt;
&lt;p&gt;以下に重要な点を挙げます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;と (2) では、 &lt;code&gt;optional&lt;/code&gt; の引数を &lt;code&gt;try&lt;/code&gt; でラップする必要があります。 これは複合パーサであり、プリミティブではないためです。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;3&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;some&lt;/code&gt; は &lt;code&gt;many&lt;/code&gt; に似ていますが、その引数のパーサが少なくとも一度はマッチすることを要求します(&lt;code&gt;some p =（:) &amp;lt;$&amp;gt; p &amp;lt;*&amp;gt; many p&lt;/code&gt;)。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;必要でない限り &lt;code&gt;try&lt;/code&gt; を使わないでください！ここでは &lt;code&gt;char &#39;:&#39;&lt;/code&gt; が成功すると (&lt;code&gt;token&lt;/code&gt; の上に構築されているので, &lt;code&gt;try&lt;/code&gt; は必要はありません)、そのあとに必ずポートが続かなければならないことがわかっているので、&lt;code&gt;L.decimal&lt;/code&gt; により 10進数を要求します。&lt;code&gt;:&lt;/code&gt; にマッチした後は、後戻りできないので、戻る方法は必要ありません。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;5&#34; type=&#34;1&#34;&gt;
&lt;li&gt;と (6) では、&lt;code&gt;RecordWildCards&lt;/code&gt; 言語拡張を使用して &lt;code&gt;Authority&lt;/code&gt; と &lt;code&gt;Uri&lt;/code&gt; の値を作り上げます。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GHCiで &lt;code&gt;pUri&lt;/code&gt; を試し、それが機能することを確認してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb36-1&#34;&gt;&lt;a href=&#34;#cb36-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:secret@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-2&#34;&gt;&lt;a href=&#34;#cb36-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-3&#34;&gt;&lt;a href=&#34;#cb36-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-4&#34;&gt;&lt;a href=&#34;#cb36-4&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-5&#34;&gt;&lt;a href=&#34;#cb36-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Just (&lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb36-6&#34;&gt;&lt;a href=&#34;#cb36-6&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-7&#34;&gt;&lt;a href=&#34;#cb36-7&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Nothing &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-8&#34;&gt;&lt;a href=&#34;#cb36-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-9&#34;&gt;&lt;a href=&#34;#cb36-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:secret@example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-10&#34;&gt;&lt;a href=&#34;#cb36-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-11&#34;&gt;&lt;a href=&#34;#cb36-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-12&#34;&gt;&lt;a href=&#34;#cb36-12&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-13&#34;&gt;&lt;a href=&#34;#cb36-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Just (&lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb36-14&#34;&gt;&lt;a href=&#34;#cb36-14&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-15&#34;&gt;&lt;a href=&#34;#cb36-15&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Just 123 &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-16&#34;&gt;&lt;a href=&#34;#cb36-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-17&#34;&gt;&lt;a href=&#34;#cb36-17&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-18&#34;&gt;&lt;a href=&#34;#cb36-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-19&#34;&gt;&lt;a href=&#34;#cb36-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-20&#34;&gt;&lt;a href=&#34;#cb36-20&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-21&#34;&gt;&lt;a href=&#34;#cb36-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Nothing&lt;/span&gt;
&lt;span id=&#34;cb36-22&#34;&gt;&lt;a href=&#34;#cb36-22&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-23&#34;&gt;&lt;a href=&#34;#cb36-23&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Just 123 &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-24&#34;&gt;&lt;a href=&#34;#cb36-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-25&#34;&gt;&lt;a href=&#34;#cb36-25&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark@example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-26&#34;&gt;&lt;a href=&#34;#cb36-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:13:&lt;/span&gt;
&lt;span id=&#34;cb36-27&#34;&gt;&lt;a href=&#34;#cb36-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-28&#34;&gt;&lt;a href=&#34;#cb36-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark@example.com:123&lt;/span&gt;
&lt;span id=&#34;cb36-29&#34;&gt;&lt;a href=&#34;#cb36-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;             ^&lt;/span&gt;
&lt;span id=&#34;cb36-30&#34;&gt;&lt;a href=&#34;#cb36-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-31&#34;&gt;&lt;a href=&#34;#cb36-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;, alphanumeric character, or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Debug&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パーサのデバッグ&#34;&gt;パーサのデバッグ&lt;/h2&gt;
&lt;p&gt;面白いことが起こっていることに気付くかもしれません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb37-1&#34;&gt;&lt;a href=&#34;#cb37-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-2&#34;&gt;&lt;a href=&#34;#cb37-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-3&#34;&gt;&lt;a href=&#34;#cb37-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-4&#34;&gt;&lt;a href=&#34;#cb37-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;mark&lt;span class=&#34;op&#34;&gt;:@&lt;/span&gt;example&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;/span&gt;
&lt;span id=&#34;cb37-5&#34;&gt;&lt;a href=&#34;#cb37-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-6&#34;&gt;&lt;a href=&#34;#cb37-6&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-7&#34;&gt;&lt;a href=&#34;#cb37-7&#34;&gt;&lt;/a&gt;expecting end &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パースエラーを改善できそうです。何をすればいいでしょうか？ 何が起きているのかを知る最も簡単な方法は、 組み込みのヘルパー &lt;code&gt;dbg&lt;/code&gt; を使うことです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb38-1&#34;&gt;&lt;a href=&#34;#cb38-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;dbg ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;ShowToken&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s), &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; e, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb38-2&#34;&gt;&lt;a href=&#34;#cb38-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ デバッグ用のラベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb38-3&#34;&gt;&lt;a href=&#34;#cb38-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ デバッグするパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb38-4&#34;&gt;&lt;a href=&#34;#cb38-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ デバッグメッセージを出力するパーサ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;pUri&lt;/code&gt; で使ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb39-1&#34;&gt;&lt;a href=&#34;#cb39-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-2&#34;&gt;&lt;a href=&#34;#cb39-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-3&#34;&gt;&lt;a href=&#34;#cb39-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;scheme&amp;quot;&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb39-4&#34;&gt;&lt;a href=&#34;#cb39-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-5&#34;&gt;&lt;a href=&#34;#cb39-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-6&#34;&gt;&lt;a href=&#34;#cb39-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-7&#34;&gt;&lt;a href=&#34;#cb39-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-8&#34;&gt;&lt;a href=&#34;#cb39-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb39-9&#34;&gt;&lt;a href=&#34;#cb39-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-10&#34;&gt;&lt;a href=&#34;#cb39-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb39-11&#34;&gt;&lt;a href=&#34;#cb39-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-12&#34;&gt;&lt;a href=&#34;#cb39-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb39-13&#34;&gt;&lt;a href=&#34;#cb39-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt; (some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb39-14&#34;&gt;&lt;a href=&#34;#cb39-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb39-15&#34;&gt;&lt;a href=&#34;#cb39-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb39-16&#34;&gt;&lt;a href=&#34;#cb39-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それでは、その不幸な入力に対してもう一度 &lt;code&gt;pUri&lt;/code&gt; を実行してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb40-1&#34;&gt;&lt;a href=&#34;#cb40-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-2&#34;&gt;&lt;a href=&#34;#cb40-2&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-3&#34;&gt;&lt;a href=&#34;#cb40-3&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;COK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-4&#34;&gt;&lt;a href=&#34;#cb40-4&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-5&#34;&gt;&lt;a href=&#34;#cb40-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-6&#34;&gt;&lt;a href=&#34;#cb40-6&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-7&#34;&gt;&lt;a href=&#34;#cb40-7&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EOK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-8&#34;&gt;&lt;a href=&#34;#cb40-8&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-9&#34;&gt;&lt;a href=&#34;#cb40-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-10&#34;&gt;&lt;a href=&#34;#cb40-10&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-11&#34;&gt;&lt;a href=&#34;#cb40-11&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;COK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-12&#34;&gt;&lt;a href=&#34;#cb40-12&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-13&#34;&gt;&lt;a href=&#34;#cb40-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-14&#34;&gt;&lt;a href=&#34;#cb40-14&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-15&#34;&gt;&lt;a href=&#34;#cb40-15&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CERR&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-16&#34;&gt;&lt;a href=&#34;#cb40-16&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-17&#34;&gt;&lt;a href=&#34;#cb40-17&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-18&#34;&gt;&lt;a href=&#34;#cb40-18&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-19&#34;&gt;&lt;a href=&#34;#cb40-19&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; expecting integer&lt;/span&gt;
&lt;span id=&#34;cb40-20&#34;&gt;&lt;a href=&#34;#cb40-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-21&#34;&gt;&lt;a href=&#34;#cb40-21&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;//mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-22&#34;&gt;&lt;a href=&#34;#cb40-22&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EOK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-23&#34;&gt;&lt;a href=&#34;#cb40-23&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-24&#34;&gt;&lt;a href=&#34;#cb40-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-25&#34;&gt;&lt;a href=&#34;#cb40-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-26&#34;&gt;&lt;a href=&#34;#cb40-26&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-27&#34;&gt;&lt;a href=&#34;#cb40-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;mark&lt;span class=&#34;op&#34;&gt;:@&lt;/span&gt;example&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;/span&gt;
&lt;span id=&#34;cb40-28&#34;&gt;&lt;a href=&#34;#cb40-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-29&#34;&gt;&lt;a href=&#34;#cb40-29&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-30&#34;&gt;&lt;a href=&#34;#cb40-30&#34;&gt;&lt;/a&gt;expecting end &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; の内部で何が起こっているのか正確にわかります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scheme&lt;/code&gt; のマッチに成功します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;user&lt;/code&gt; は失敗します。&lt;code&gt;mark&lt;/code&gt; の所にユーザー名がありますが、&lt;code&gt;:&lt;/code&gt; の後にパスワードはありません（ここではパスワードを空にしないことを要求します）。失敗し、&lt;code&gt;try&lt;/code&gt; のおかげでバックトラックします。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; は &lt;code&gt;user&lt;/code&gt; と同じ場所から開始し、入力をホスト名として解釈しようとします。これは成功し、ホスト名として &lt;code&gt;mark&lt;/code&gt; を返すことがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; の後にポート番号があるかもしれないので、&lt;code&gt;port&lt;/code&gt; は機会を得ます。それは &lt;code&gt;:&lt;/code&gt; を見ますが、その後に整数がないので &lt;code&gt;port&lt;/code&gt; は失敗します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そのため、&lt;code&gt;auth&lt;/code&gt; パーサ全体が失敗します（&lt;code&gt;port&lt;/code&gt; は &lt;code&gt;auth&lt;/code&gt; の内側にあり、失敗しました）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;auth&lt;/code&gt; パーサは、何もパースできなかったため、&lt;code&gt;Nothing&lt;/code&gt;を返します。&lt;code&gt;eof&lt;/code&gt; は入力の終わりに達したことを要求しますが、そうではないので、最終的なエラーメッセージが表示されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何をすべきでしょうか？これは、&lt;code&gt;try&lt;/code&gt; を使用してコードの大部分を囲むと、 パースエラーが悪化する可能性がある場合の例です。 パースしたい構文をもう一度見てみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私たちは何を探していますか？ パースのある特定の分岐にコミットできるようにするための何か。 &lt;code&gt;:&lt;/code&gt; を見たときにポート番号が続かなければならないポートのように。 注意深く見れば、二重スラッシュ&lt;code&gt;//&lt;/code&gt;が、URIに認証情報の部分があることを示す記号であることがわかります。 &lt;code&gt;//&lt;/code&gt; のマッチはアトミックパーサ（&lt;code&gt;string&lt;/code&gt;）が使われていることにより、 マッチは自動的にバックトラックするので、 &lt;code&gt;//&lt;/code&gt; にマッチした後は恐れずに、認証情報の部分を要求することができます。 最初の&lt;code&gt;try&lt;/code&gt;を&lt;code&gt;pUri&lt;/code&gt;から削除しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb42-1&#34;&gt;&lt;a href=&#34;#cb42-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-2&#34;&gt;&lt;a href=&#34;#cb42-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-3&#34;&gt;&lt;a href=&#34;#cb42-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb42-4&#34;&gt;&lt;a href=&#34;#cb42-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-5&#34;&gt;&lt;a href=&#34;#cb42-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- この行から try を削除した&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-6&#34;&gt;&lt;a href=&#34;#cb42-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-7&#34;&gt;&lt;a href=&#34;#cb42-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-8&#34;&gt;&lt;a href=&#34;#cb42-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb42-9&#34;&gt;&lt;a href=&#34;#cb42-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-10&#34;&gt;&lt;a href=&#34;#cb42-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb42-11&#34;&gt;&lt;a href=&#34;#cb42-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-12&#34;&gt;&lt;a href=&#34;#cb42-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb42-13&#34;&gt;&lt;a href=&#34;#cb42-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-14&#34;&gt;&lt;a href=&#34;#cb42-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb42-15&#34;&gt;&lt;a href=&#34;#cb42-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb42-16&#34;&gt;&lt;a href=&#34;#cb42-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、より良いパースエラーを得られるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb43-1&#34;&gt;&lt;a href=&#34;#cb43-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-2&#34;&gt;&lt;a href=&#34;#cb43-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:14:&lt;/span&gt;
&lt;span id=&#34;cb43-3&#34;&gt;&lt;a href=&#34;#cb43-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-4&#34;&gt;&lt;a href=&#34;#cb43-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark:@example.com&lt;/span&gt;
&lt;span id=&#34;cb43-5&#34;&gt;&lt;a href=&#34;#cb43-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;              ^&lt;/span&gt;
&lt;span id=&#34;cb43-6&#34;&gt;&lt;a href=&#34;#cb43-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-7&#34;&gt;&lt;a href=&#34;#cb43-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; integer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まだ少し誤解を招くようですが、まあ、それは私が選んだトリッキーな例です。 たくさんの&lt;code&gt;optional&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Label&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ラベル付けと隠蔽&#34;&gt;ラベル付けと隠蔽&lt;/h2&gt;
&lt;p&gt;時には期待されるアイテムのリストがかなり長くなるかもしれません。 認識されていないスキームを使用しようとしたときに得られるものを覚えていますか？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb44-1&#34;&gt;&lt;a href=&#34;#cb44-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-2&#34;&gt;&lt;a href=&#34;#cb44-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb44-3&#34;&gt;&lt;a href=&#34;#cb44-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-4&#34;&gt;&lt;a href=&#34;#cb44-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;://example.com&lt;/span&gt;
&lt;span id=&#34;cb44-5&#34;&gt;&lt;a href=&#34;#cb44-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb44-6&#34;&gt;&lt;a href=&#34;#cb44-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-7&#34;&gt;&lt;a href=&#34;#cb44-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、一般的に&lt;em&gt;ラベル&lt;/em&gt;と呼ばれるカスタムで、期待されるアイテムを上書きする方法を提供します。これは、&lt;code&gt;label&lt;/code&gt; プリミティブ(&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; 演算子の形式のシノニムを持つ)を使用して行われます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb45-1&#34;&gt;&lt;a href=&#34;#cb45-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-2&#34;&gt;&lt;a href=&#34;#cb45-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-3&#34;&gt;&lt;a href=&#34;#cb45-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-4&#34;&gt;&lt;a href=&#34;#cb45-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- 残りの部分は同じ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb46-1&#34;&gt;&lt;a href=&#34;#cb46-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-2&#34;&gt;&lt;a href=&#34;#cb46-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb46-3&#34;&gt;&lt;a href=&#34;#cb46-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-4&#34;&gt;&lt;a href=&#34;#cb46-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;://example.com&lt;/span&gt;
&lt;span id=&#34;cb46-5&#34;&gt;&lt;a href=&#34;#cb46-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb46-6&#34;&gt;&lt;a href=&#34;#cb46-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-7&#34;&gt;&lt;a href=&#34;#cb46-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; valid scheme&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージを読みやすくするために、ラベルを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb47-1&#34;&gt;&lt;a href=&#34;#cb47-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-2&#34;&gt;&lt;a href=&#34;#cb47-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-3&#34;&gt;&lt;a href=&#34;#cb47-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-4&#34;&gt;&lt;a href=&#34;#cb47-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-5&#34;&gt;&lt;a href=&#34;#cb47-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-6&#34;&gt;&lt;a href=&#34;#cb47-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-7&#34;&gt;&lt;a href=&#34;#cb47-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-8&#34;&gt;&lt;a href=&#34;#cb47-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-9&#34;&gt;&lt;a href=&#34;#cb47-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-10&#34;&gt;&lt;a href=&#34;#cb47-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-11&#34;&gt;&lt;a href=&#34;#cb47-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-12&#34;&gt;&lt;a href=&#34;#cb47-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb47-13&#34;&gt;&lt;a href=&#34;#cb47-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-14&#34;&gt;&lt;a href=&#34;#cb47-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; label &lt;span class=&#34;st&#34;&gt;&amp;quot;port number&amp;quot;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb47-15&#34;&gt;&lt;a href=&#34;#cb47-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb47-16&#34;&gt;&lt;a href=&#34;#cb47-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb48-1&#34;&gt;&lt;a href=&#34;#cb48-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-2&#34;&gt;&lt;a href=&#34;#cb48-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:14:&lt;/span&gt;
&lt;span id=&#34;cb48-3&#34;&gt;&lt;a href=&#34;#cb48-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-4&#34;&gt;&lt;a href=&#34;#cb48-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark:@example.com&lt;/span&gt;
&lt;span id=&#34;cb48-5&#34;&gt;&lt;a href=&#34;#cb48-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;              ^&lt;/span&gt;
&lt;span id=&#34;cb48-6&#34;&gt;&lt;a href=&#34;#cb48-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-7&#34;&gt;&lt;a href=&#34;#cb48-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; port number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう1つのプリミティブは &lt;code&gt;hidden&lt;/code&gt; と呼ばれます。 &lt;code&gt;label&lt;/code&gt; が名前の変更であることに対し、 hiddenは単にそれらを完全に削除します。 比較しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb49-1&#34;&gt;&lt;a href=&#34;#cb49-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;many&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;eof&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-2&#34;&gt;&lt;a href=&#34;#cb49-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb49-3&#34;&gt;&lt;a href=&#34;#cb49-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-4&#34;&gt;&lt;a href=&#34;#cb49-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-5&#34;&gt;&lt;a href=&#34;#cb49-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb49-6&#34;&gt;&lt;a href=&#34;#cb49-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-7&#34;&gt;&lt;a href=&#34;#cb49-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, or end of input&lt;/span&gt;
&lt;span id=&#34;cb49-8&#34;&gt;&lt;a href=&#34;#cb49-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-9&#34;&gt;&lt;a href=&#34;#cb49-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;hidden&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;eof&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-10&#34;&gt;&lt;a href=&#34;#cb49-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb49-11&#34;&gt;&lt;a href=&#34;#cb49-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-12&#34;&gt;&lt;a href=&#34;#cb49-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-13&#34;&gt;&lt;a href=&#34;#cb49-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb49-14&#34;&gt;&lt;a href=&#34;#cb49-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-15&#34;&gt;&lt;a href=&#34;#cb49-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージのノイズを少なくすることが望ましい場合は、 &lt;code&gt;hidden&lt;/code&gt; を使用してください。 例えば、プログラミング言語をパースするときは、通常、各トークンの後に空白文字がある可能性があるため、“expecting white space” というメッセージを削除することをお勧めします。&lt;/p&gt;
&lt;p&gt;演習 : &lt;code&gt;pUri&lt;/code&gt; パーサを完成させることは読者のための課題として残されています。完成に必要なすべてのツールは説明されました。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Run&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パーサの実行&#34;&gt;パーサの実行&lt;/h2&gt;
&lt;p&gt;パーサを構築する方法を詳細に調べました。 しかし、 &lt;code&gt;parseTest&lt;/code&gt; を除いて、 それらを実行できる関数を調べていませんでした。&lt;/p&gt;
&lt;p&gt;慣習的に、あなたがプログラムしたパーサを実行するための “デフォルト”の関数は &lt;code&gt;parse&lt;/code&gt; でした。 しかし、&lt;code&gt;parse&lt;/code&gt; は実際には &lt;code&gt;runParser&lt;/code&gt; のシノニムです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb50-1&#34;&gt;&lt;a href=&#34;#cb50-1&#34;&gt;&lt;/a&gt;runParser&lt;/span&gt;
&lt;span id=&#34;cb50-2&#34;&gt;&lt;a href=&#34;#cb50-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-3&#34;&gt;&lt;a href=&#34;#cb50-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ ソースファイルの名前&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-4&#34;&gt;&lt;a href=&#34;#cb50-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s          &lt;span class=&#34;co&#34;&gt;-- ^ パーサへの入力&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-5&#34;&gt;&lt;a href=&#34;#cb50-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目の引数は、生成されたパースエラーに含まれる単なるファイル名です。 実際の入力は関数の3番目の引数として渡されるため、 &lt;code&gt;megaparsec&lt;/code&gt; はそのファイルから何も読みません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;runParser&lt;/code&gt; を使用すると、&lt;code&gt;Parsec&lt;/code&gt; モナドを実行できます。 これは、既にご存知のとおり、変換子を使わないバージョンの &lt;code&gt;ParsecT&lt;/code&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb51&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb51-1&#34;&gt;&lt;a href=&#34;#cb51-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;runParser&lt;/code&gt; には、&lt;code&gt;runParser&#39;&lt;/code&gt;、&lt;code&gt;runParserT&lt;/code&gt;、 および &lt;code&gt;runParserT&#39;&lt;/code&gt; の3つの姉妹がいます。 接尾辞 &lt;code&gt;T&lt;/code&gt; の付いたバージョンは &lt;code&gt;PrasecT&lt;/code&gt; モナド変換子を実行し、 「プライム」バージョンはパーサの状態を受け取り、返します。 すべての関数を表にまとめましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;引数&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Parsec&lt;/code&gt; の実行&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;ParsecT&lt;/code&gt; の実行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;入力とファイル名&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParser&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParserT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;カスタム初期状態&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParser&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParserT&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;タブの幅を標準以外の値(デフォルトの値は8)に設定したい場合など、 カスタム初期状態が必要な場合があります。 &lt;code&gt;runParser&#39;&lt;/code&gt; はこのようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb52&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb52-1&#34;&gt;&lt;a href=&#34;#cb52-1&#34;&gt;&lt;/a&gt;runParser&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb52-2&#34;&gt;&lt;a href=&#34;#cb52-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb52-3&#34;&gt;&lt;a href=&#34;#cb52-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s    &lt;span class=&#34;co&#34;&gt;-- ^ 初期状態&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb52-4&#34;&gt;&lt;a href=&#34;#cb52-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手動で状態を変更することはライブラリの高度な使用法であり、 ここでは説明しません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParseErrorBundle&lt;/code&gt; とは何かについて疑問に思う場合は、 &lt;a href=&#34;#Error&#34;&gt;この後の章のいずれか&lt;/a&gt;で説明します。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;MonadParsec&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;monadparsec-型クラス&#34;&gt;&lt;code&gt;MonadParsec&lt;/code&gt; 型クラス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のすべてのツールは、 &lt;code&gt;MonadParsec&lt;/code&gt; 型クラスの任意のインスタンスと連携します。 型クラスは、プリミティブコンビネータ、 つまりすべての &lt;code&gt;megaparsec&lt;/code&gt; のパーサの基本的な構成要素、 他のコンビネータでは表現できないコンビネータを抽象化します。&lt;/p&gt;
&lt;p&gt;プリミティブコンビネータを型クラスに持つことで、 &lt;code&gt;megaarsec&lt;/code&gt; の &lt;code&gt;ParsecT&lt;/code&gt; の主要なモナド変換子を、 MTL系のよく知られている変換子にラップして、 モナドスタックのレイヤー間でさまざまな相互作用を実現することができます。 動機をよりよく理解するために、 モナドスタック内のレイヤーの順序が重要であることを思い出してください。 このように &lt;code&gt;ReaderT&lt;/code&gt; と &lt;code&gt;State&lt;/code&gt; を組み合わせると、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb53&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb53-1&#34;&gt;&lt;a href=&#34;#cb53-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyContext&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;外側のレイヤー &lt;code&gt;ReaderT&lt;/code&gt; はその下のレイヤー &lt;code&gt;m&lt;/code&gt; の内部構造を検査できません。 &lt;code&gt;ReaderT&lt;/code&gt; の &lt;code&gt;Monad&lt;/code&gt; インスタンスはバインディングの戦略を記述しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb54&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb54-1&#34;&gt;&lt;a href=&#34;#cb54-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runReaderT ::&lt;/span&gt; r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a }&lt;/span&gt;
&lt;span id=&#34;cb54-2&#34;&gt;&lt;a href=&#34;#cb54-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-3&#34;&gt;&lt;a href=&#34;#cb54-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-4&#34;&gt;&lt;a href=&#34;#cb54-4&#34;&gt;&lt;/a&gt;  m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-5&#34;&gt;&lt;a href=&#34;#cb54-5&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; runReaderT m r&lt;/span&gt;
&lt;span id=&#34;cb54-6&#34;&gt;&lt;a href=&#34;#cb54-6&#34;&gt;&lt;/a&gt;    runReaderT (k a) r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際、&lt;code&gt;m&lt;/code&gt; について私たちが知っている唯一のことは、 それが &lt;code&gt;Monad&lt;/code&gt;のインスタンスであり、 したがって &lt;code&gt;m&lt;/code&gt; の状態はモナディックバインドを介してのみ &lt;code&gt;k&lt;/code&gt; に渡すことができるということです。 とにかくそれが &lt;code&gt;ReaderT&lt;/code&gt; の &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; から私たちが通常欲しいものです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Alternative&lt;/code&gt; 型クラスの &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; メソッドは異なった働きをします。 それは状態を「分割」し、パーサの2つの分岐はもう接触しません。 そのため、最初の分岐が破棄されるとその状態への変更も破棄され、 2番目の分岐に影響を与えることはできないという意味で バックトラックした状態になります (最初の分岐が失敗したときの状態を「バックトラック」します。)。&lt;/p&gt;
&lt;p&gt;説明のために、ReaderTのAlternativeの定義を見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb55&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb55-1&#34;&gt;&lt;a href=&#34;#cb55-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb55-2&#34;&gt;&lt;a href=&#34;#cb55-2&#34;&gt;&lt;/a&gt;  empty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftReaderT empty&lt;/span&gt;
&lt;span id=&#34;cb55-3&#34;&gt;&lt;a href=&#34;#cb55-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ReaderT&lt;/code&gt; は「ステートレス」なモナド変換子であり、 (何を持っていない) &lt;code&gt;ReaderT&lt;/code&gt; 自体に関連するモナドの状態を組み合わせる必要なしに(ここで &lt;code&gt;m&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; インスタンスが役に立ちます。) 実際の作業を内部のモナドに委任するのは簡単なので、 これはすべて非常に素晴らしいことです。&lt;/p&gt;
&lt;p&gt;それでは、Stateを見てみましょう。 &lt;code&gt;State s a&lt;/code&gt; は &lt;code&gt;StateT s Identity a&lt;/code&gt; の単なるシノニムなので、 &lt;code&gt;StateT s m&lt;/code&gt; 自体の &lt;code&gt;Alternative&lt;/code&gt; インスタンスを見てください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb56&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb56-1&#34;&gt;&lt;a href=&#34;#cb56-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; s m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb56-2&#34;&gt;&lt;a href=&#34;#cb56-2&#34;&gt;&lt;/a&gt;  empty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb56-3&#34;&gt;&lt;a href=&#34;#cb56-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m s &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは、reader のコンテキスト &lt;code&gt;r&lt;/code&gt; の共有を見たように、 状態 &lt;code&gt;s&lt;/code&gt; の分割を見ることができます。 ただし、&lt;code&gt;m s&lt;/code&gt; と &lt;code&gt;n s&lt;/code&gt; の式はステートフルな結果を生成するため、 モナディック値と一緒に、新しい状態をタプルで返すという違いがあります。 ここでは、&lt;code&gt;m s&lt;/code&gt; か &lt;code&gt;n s&lt;/code&gt; のどちらかで進み、 自然にバックトラックを達成します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; はどうですか？ &lt;code&gt;State&lt;/code&gt; を &lt;code&gt;ParsecT&lt;/code&gt; の中に次のように置くことを考えてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb57&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb57-1&#34;&gt;&lt;a href=&#34;#cb57-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; は &lt;code&gt;ReaderT&lt;/code&gt; よりも複雑で、&lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;の実装にはもっと多くのことが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パーサ自体の状態管理&lt;/li&gt;
&lt;li&gt;起こるべき（適切な）パースエラーのマージ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; のインスタンスへの&lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;の実装は、 その基盤となる &lt;code&gt;State MyState&lt;/code&gt; モナドの &lt;code&gt;Alternative&lt;/code&gt;インスタンスに その作業を委任することができないので、&lt;code&gt;MyState&lt;/code&gt;の分割は発生せず、 バックトラックはありません。&lt;/p&gt;
&lt;p&gt;例を挙げて説明しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb58&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb58-1&#34;&gt;&lt;a href=&#34;#cb58-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-2&#34;&gt;&lt;a href=&#34;#cb58-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-3&#34;&gt;&lt;a href=&#34;#cb58-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-4&#34;&gt;&lt;a href=&#34;#cb58-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-5&#34;&gt;&lt;a href=&#34;#cb58-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-6&#34;&gt;&lt;a href=&#34;#cb58-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.State.Strict&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-7&#34;&gt;&lt;a href=&#34;#cb58-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-8&#34;&gt;&lt;a href=&#34;#cb58-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-9&#34;&gt;&lt;a href=&#34;#cb58-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-10&#34;&gt;&lt;a href=&#34;#cb58-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-11&#34;&gt;&lt;a href=&#34;#cb58-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-12&#34;&gt;&lt;a href=&#34;#cb58-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-13&#34;&gt;&lt;a href=&#34;#cb58-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser0 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-14&#34;&gt;&lt;a href=&#34;#cb58-14&#34;&gt;&lt;/a&gt;parser0 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb58-15&#34;&gt;&lt;a href=&#34;#cb58-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-16&#34;&gt;&lt;a href=&#34;#cb58-16&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-17&#34;&gt;&lt;a href=&#34;#cb58-17&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-18&#34;&gt;&lt;a href=&#34;#cb58-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-19&#34;&gt;&lt;a href=&#34;#cb58-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-20&#34;&gt;&lt;a href=&#34;#cb58-20&#34;&gt;&lt;/a&gt;parser1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb58-21&#34;&gt;&lt;a href=&#34;#cb58-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-22&#34;&gt;&lt;a href=&#34;#cb58-22&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb58-23&#34;&gt;&lt;a href=&#34;#cb58-23&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-24&#34;&gt;&lt;a href=&#34;#cb58-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-25&#34;&gt;&lt;a href=&#34;#cb58-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb58-26&#34;&gt;&lt;a href=&#34;#cb58-26&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-27&#34;&gt;&lt;a href=&#34;#cb58-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; run p          &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runState (runParserT p &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-28&#34;&gt;&lt;a href=&#34;#cb58-28&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; a0, s0) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; run parser0&lt;/span&gt;
&lt;span id=&#34;cb58-29&#34;&gt;&lt;a href=&#34;#cb58-29&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; a1, s1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; run parser1&lt;/span&gt;
&lt;span id=&#34;cb58-30&#34;&gt;&lt;a href=&#34;#cb58-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-31&#34;&gt;&lt;a href=&#34;#cb58-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;Parser 0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-32&#34;&gt;&lt;a href=&#34;#cb58-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a0)&lt;/span&gt;
&lt;span id=&#34;cb58-33&#34;&gt;&lt;a href=&#34;#cb58-33&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s0)&lt;/span&gt;
&lt;span id=&#34;cb58-34&#34;&gt;&lt;a href=&#34;#cb58-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-35&#34;&gt;&lt;a href=&#34;#cb58-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;Parser 1&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-36&#34;&gt;&lt;a href=&#34;#cb58-36&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a1)&lt;/span&gt;
&lt;span id=&#34;cb58-37&#34;&gt;&lt;a href=&#34;#cb58-37&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これがプログラムを実行した結果です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parser 0
Result:      &amp;quot;foo&amp;quot;
Final state: &amp;quot;branch A&amp;quot;
Parser 1
Result:      &amp;quot;branch A&amp;quot;
Final state: &amp;quot;branch B&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;parser0&lt;/code&gt; を使うと、分岐 &lt;code&gt;b&lt;/code&gt; が試行されていないことがわかります。 しかしparser1では、&lt;code&gt;empty&lt;/code&gt; によって失敗し、 成功したのは分岐 &lt;code&gt;b&lt;/code&gt; であるにもかかわらず、 最終結果（&lt;code&gt;get&lt;/code&gt; によって返される値）が分岐 &lt;code&gt;a&lt;/code&gt;から得られることは明らかです。 (パーサの文脈では &lt;code&gt;empty&lt;/code&gt; は 「即座に失敗し、何が起こったのかについての情報がない」 という意味です。) バックトラックは発生しません。&lt;/p&gt;
&lt;p&gt;パーサーでカスタム状態をバックトラックしたい場合はどうしますか？ &lt;code&gt;ParsecT&lt;/code&gt; を &lt;code&gt;StateT&lt;/code&gt; 内にラップすることを許可するならば、それを提供することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb60&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb60-1&#34;&gt;&lt;a href=&#34;#cb60-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MyStack&lt;/code&gt; で &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を使用すると、 使用されるインスタンスは &lt;code&gt;StateT&lt;/code&gt; のインスタンスになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb61&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb61-1&#34;&gt;&lt;a href=&#34;#cb61-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m s &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは状態をバックトラックさせ、 それから残りの作業をその内部モナド&lt;code&gt;ParsecT&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; インスタンスに委任します。 この動作はまさに私たちが望むものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb62&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb62-1&#34;&gt;&lt;a href=&#34;#cb62-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-2&#34;&gt;&lt;a href=&#34;#cb62-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-3&#34;&gt;&lt;a href=&#34;#cb62-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-4&#34;&gt;&lt;a href=&#34;#cb62-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-5&#34;&gt;&lt;a href=&#34;#cb62-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-6&#34;&gt;&lt;a href=&#34;#cb62-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-7&#34;&gt;&lt;a href=&#34;#cb62-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.State.Strict&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-8&#34;&gt;&lt;a href=&#34;#cb62-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-9&#34;&gt;&lt;a href=&#34;#cb62-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-10&#34;&gt;&lt;a href=&#34;#cb62-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-11&#34;&gt;&lt;a href=&#34;#cb62-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-12&#34;&gt;&lt;a href=&#34;#cb62-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-13&#34;&gt;&lt;a href=&#34;#cb62-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-14&#34;&gt;&lt;a href=&#34;#cb62-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-15&#34;&gt;&lt;a href=&#34;#cb62-15&#34;&gt;&lt;/a&gt;parser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb62-16&#34;&gt;&lt;a href=&#34;#cb62-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-17&#34;&gt;&lt;a href=&#34;#cb62-17&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb62-18&#34;&gt;&lt;a href=&#34;#cb62-18&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-19&#34;&gt;&lt;a href=&#34;#cb62-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-20&#34;&gt;&lt;a href=&#34;#cb62-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb62-21&#34;&gt;&lt;a href=&#34;#cb62-21&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-22&#34;&gt;&lt;a href=&#34;#cb62-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; p            &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runStateT parser &lt;span class=&#34;st&#34;&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-23&#34;&gt;&lt;a href=&#34;#cb62-23&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; (a, s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runParser p &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-24&#34;&gt;&lt;a href=&#34;#cb62-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb62-25&#34;&gt;&lt;a href=&#34;#cb62-25&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プログラムは次のように出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Result:      &amp;quot;initial&amp;quot;
Final state: &amp;quot;branch B&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このアプローチを実行可能にするために、 &lt;code&gt;StateT&lt;/code&gt; はプリミティブパーサのセット全体をサポートするべきであり、 そうすることで &lt;code&gt;ParsecT&lt;/code&gt; と同じようにそれを扱うことができます。 言い換えれば、 内部モナドが(MTLの)&lt;code&gt;MonadWriter&lt;/code&gt;のインスタンスである場合は &lt;code&gt;MonadState&lt;/code&gt; だけではなく、&lt;code&gt;MonadWriter&lt;/code&gt;も &lt;code&gt;MonadParsec&lt;/code&gt;のインスタンスである必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb64&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb64-1&#34;&gt;&lt;a href=&#34;#cb64-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadWriter&lt;/span&gt; w m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadWriter&lt;/span&gt; w (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; s m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに、&lt;code&gt;MonadParsec&lt;/code&gt; の内部インスタンスから &lt;code&gt;StateT&lt;/code&gt; に プリミティブを持ち上げることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb65&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb65-1&#34;&gt;&lt;a href=&#34;#cb65-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; st m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt;は MTL のすべてのモナド変換子に対して &lt;code&gt;MonadParsec&lt;/code&gt; のインスタンスを定義しているので、 ユーザーは変換子を &lt;code&gt;ParsecT&lt;/code&gt; の内側に挿入したり、 それらの変換子で &lt;code&gt;ParsecT&lt;/code&gt; をラップしたりして、 モナドスタックの層間で異なる種類の相互作用を実現できます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Lexing&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;字句解析&#34;&gt;字句解析&lt;/h2&gt;
&lt;p&gt;字句解析は、入力ストリームを整数、キーワード、シンボルなどのトークン のストリームに変換するプロセスです。 これらは、生の入力を直接パースするよりもパースが容易であるか、 またはパーサジェネレータで生成されたパーサへの入力として期待されます。 字句解析は、&lt;code&gt;alex&lt;/code&gt;などの外部ツールを使用して別のパスで実行できますが、 &lt;code&gt;megaparsec&lt;/code&gt;はパーサの一部として、シームレスに字句解析プログラムを書くことを簡単にする関数も提供します。&lt;/p&gt;
&lt;p&gt;文字ストリーム用の &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; と バイトストリーム用の &lt;code&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; の 2つの字句解析モジュールがあります。 正格な &lt;code&gt;Text&lt;/code&gt; を入力ストリームとして扱うので &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; を使いますが、 &lt;code&gt;ByteStrings&lt;/code&gt; を使いたい場合はほとんどの関数は &lt;code&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; にも反映されます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;White&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;空白&#34;&gt;空白&lt;/h2&gt;
&lt;p&gt;最初に取り上げる必要があるトピックは、空白の扱いです。 すべてのトークンの前またはすべてのトークンの後に、 一貫した方法で空白を消費することが役立ちます。 Megaparsec の字句解析モジュールは、 「トークンの前に空白を入れず、トークンの後にすべての空白を消費する」 という戦略に従います。&lt;/p&gt;
&lt;p&gt;空白を消費するには、&lt;em&gt;スペースコンシューマ&lt;/em&gt; と呼ばれる特別なパーサが必要です。 &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; モジュールは、 一般的なスペースコンシューマを構築するためのヘルパーを提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb66&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb66-1&#34;&gt;&lt;a href=&#34;#cb66-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;space ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb66-2&#34;&gt;&lt;a href=&#34;#cb66-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ 空の入力を受け入れない空白文字のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-3&#34;&gt;&lt;a href=&#34;#cb66-3&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;co&#34;&gt;-- (e.g. &amp;#39;space1&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-4&#34;&gt;&lt;a href=&#34;#cb66-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ 行コメントのパーサ (e.g. &amp;#39;skipLineComment&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-5&#34;&gt;&lt;a href=&#34;#cb66-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ ブロックコメントのパーサ (e.g. &amp;#39;skipBlockComment&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-6&#34;&gt;&lt;a href=&#34;#cb66-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;space&lt;/code&gt; 関数のドキュメンテーションはそれ自体で非常に包括的ですが、 例を挙げて補足しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb67&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb67-1&#34;&gt;&lt;a href=&#34;#cb67-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-2&#34;&gt;&lt;a href=&#34;#cb67-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-3&#34;&gt;&lt;a href=&#34;#cb67-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-4&#34;&gt;&lt;a href=&#34;#cb67-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-5&#34;&gt;&lt;a href=&#34;#cb67-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb67-6&#34;&gt;&lt;a href=&#34;#cb67-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-7&#34;&gt;&lt;a href=&#34;#cb67-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-8&#34;&gt;&lt;a href=&#34;#cb67-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-9&#34;&gt;&lt;a href=&#34;#cb67-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-10&#34;&gt;&lt;a href=&#34;#cb67-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-11&#34;&gt;&lt;a href=&#34;#cb67-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-12&#34;&gt;&lt;a href=&#34;#cb67-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-13&#34;&gt;&lt;a href=&#34;#cb67-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb67-14&#34;&gt;&lt;a href=&#34;#cb67-14&#34;&gt;&lt;/a&gt;sc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space&lt;/span&gt;
&lt;span id=&#34;cb67-15&#34;&gt;&lt;a href=&#34;#cb67-15&#34;&gt;&lt;/a&gt;  space1                         &lt;span class=&#34;co&#34;&gt;-- (2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-16&#34;&gt;&lt;a href=&#34;#cb67-16&#34;&gt;&lt;/a&gt;  (L.skipLineComment &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- (3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-17&#34;&gt;&lt;a href=&#34;#cb67-17&#34;&gt;&lt;/a&gt;  (L.skipBlockComment &lt;span class=&#34;st&#34;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*/&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (4)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いくつかのメモ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt;は、修飾付きでインポートされることを意図されています。なぜなら、Text.Megaparsec.Charの&lt;code&gt;space&lt;/code&gt;のように衝突する名前を含んでいるからです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の最初の引数は空白を拾うために使用されることになっているパーサであるべきです。重要な点は、&lt;code&gt;L.space&lt;/code&gt;が無限ループに入ってしまうので、空の入力を受け入れてはいけないということです。&lt;code&gt;space1&lt;/code&gt;は、要件を完全に満たす &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; のパーサです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の2番目の引数は、行コメント、すなわち、与えられたトークンのシーケンスで始まり行の終わりで終わるコメントをスキップする方法を定義します。&lt;code&gt;skipLineComment&lt;/code&gt; ヘルパーを使用すると、行コメント用の補助パーサを簡単に作成できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の3番目の引数は、ブロックコメント、つまりトークンの開始シーケンスと終了シーケンスの間のすべてのものをを受け取る方法を定義します。&lt;code&gt;skipBlockComment&lt;/code&gt; ヘルパーは、ネストされていないブロックコメントを扱うことができます。ネストされたブロックコメントをサポートする場合は、代わりに &lt;code&gt;skipBlockCommentNested&lt;/code&gt; を使用してください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作的には、&lt;code&gt;L.space&lt;/code&gt; は3つすべてのパーサを適用できなくなるまで、順番に試行します。つまり、空白がすべて消費されたことになります。 これを知っていれば、文法にブロックコメントや行コメントが含まれていない場合は、&lt;code&gt;L.space&lt;/code&gt;の2番目または3番目の引数として&lt;code&gt;empty&lt;/code&gt;を渡すことができます。 &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; の単位元である &lt;code&gt;empty&lt;/code&gt; は、&lt;code&gt;L.space&lt;/code&gt; が次の空白要素のためにパーサを試みるようにします。まさに望んでいたことです。&lt;/p&gt;
&lt;p&gt;スペースコンシューマ &lt;code&gt;sc&lt;/code&gt; を持っているなら、 さまざまな空白関連のヘルパーを定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb68&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb68-1&#34;&gt;&lt;a href=&#34;#cb68-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lexeme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb68-2&#34;&gt;&lt;a href=&#34;#cb68-2&#34;&gt;&lt;/a&gt;lexeme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lexeme sc &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb68-3&#34;&gt;&lt;a href=&#34;#cb68-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb68-4&#34;&gt;&lt;a href=&#34;#cb68-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;symbol ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb68-5&#34;&gt;&lt;a href=&#34;#cb68-5&#34;&gt;&lt;/a&gt;symbol &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.symbol sc &lt;span class=&#34;co&#34;&gt;-- (2)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lexeme&lt;/code&gt; は、供給されたスペースコンシューマを使用してすべての末尾の空白を取る、語彙素のラッパーです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;symbol&lt;/code&gt; は内部で &lt;code&gt;string&lt;/code&gt; を使って与えられたテキストにマッチさせ、そして同様にすべての末尾の空白を拾うパーサです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私たちはすぐにそれがすべて一緒に動作する方法を見ますが、 最初に &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; からさらに2,3のヘルパーを 導入する必要があります。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Chara&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文字と文字列リテラル&#34;&gt;文字と文字列リテラル&lt;/h2&gt;
&lt;p&gt;エスケープ規則はさまざまなので、 文字リテラルおよび文字列リテラルのパースは難しい場合があります。 簡単にするために、&lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;charLiteral&lt;/code&gt; パーサを提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb69&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb69-1&#34;&gt;&lt;a href=&#34;#cb69-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;charLiteral ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;charLiteral&lt;/code&gt; の仕事は、Haskellレポートに記述されている文字リテラルの構文に従ってエスケープされる可能性がある単一の文字をパースすることです。 ただし、次の2つの理由から、リテラルを囲む引用符はパースされません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザーは文字リテラルの引用方法を制御できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そのため、charLiteralを使用して文字列リテラルもパースできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;charLiteral&lt;/code&gt;の上に構築されたパーサの例をいくつか示します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb70&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb70-1&#34;&gt;&lt;a href=&#34;#cb70-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;charLiteral ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-2&#34;&gt;&lt;a href=&#34;#cb70-2&#34;&gt;&lt;/a&gt;charLiteral &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; between (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;) (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;) L.charLiteral&lt;/span&gt;
&lt;span id=&#34;cb70-3&#34;&gt;&lt;a href=&#34;#cb70-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-4&#34;&gt;&lt;a href=&#34;#cb70-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;stringLiteral ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-5&#34;&gt;&lt;a href=&#34;#cb70-5&#34;&gt;&lt;/a&gt;stringLiteral &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; manyTill L.charLiteral (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.charLiteral&lt;/code&gt; を文字リテラルのパーサに変えるには、囲む引用符を追加するだけです。ここではHaskellの構文に従い、シングルクオートを使います。&lt;code&gt;between&lt;/code&gt;コンビネータは、単純に&lt;code&gt;between open close p = open *&amp;gt; p &amp;lt;* close&lt;/code&gt;ように定義されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stringLiteral&lt;/code&gt;はダブルクオートで囲まれた文字列リテラル内の個々の文字をパースするために &lt;code&gt;L.charLiteral&lt;/code&gt; を使用します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2番目の関数も、&lt;code&gt;manyTill&lt;/code&gt; コンビネータを使用しているため興味深いです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb71&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb71-1&#34;&gt;&lt;a href=&#34;#cb71-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;manyTill ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m end &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [a]&lt;/span&gt;
&lt;span id=&#34;cb71-2&#34;&gt;&lt;a href=&#34;#cb71-2&#34;&gt;&lt;/a&gt;manyTill p end &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go&lt;/span&gt;
&lt;span id=&#34;cb71-3&#34;&gt;&lt;a href=&#34;#cb71-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb71-4&#34;&gt;&lt;a href=&#34;#cb71-4&#34;&gt;&lt;/a&gt;    go &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ([] &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; end) &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; p &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; go)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;manyTill&lt;/code&gt; は繰り返しごとにパーサ &lt;code&gt;end&lt;/code&gt; を適用しようとし、 失敗するとパーサ &lt;code&gt;p&lt;/code&gt; を実行して &lt;code&gt;p&lt;/code&gt; の結果をリストに蓄積します。&lt;/p&gt;
&lt;p&gt;少なくとも1つのアイテムが存在することを要求する &lt;code&gt;someTill&lt;/code&gt; もあります。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Numbers&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字&#34;&gt;数字&lt;/h2&gt;
&lt;p&gt;最後に、非常に一般的なニーズは数値をパースすることです。 整数の場合、10進数、8進数、および16進数の表現で 値をパースできる3つのヘルパーがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb72&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb72-1&#34;&gt;&lt;a href=&#34;#cb72-1&#34;&gt;&lt;/a&gt;decimal, octal, hexadecimal&lt;/span&gt;
&lt;span id=&#34;cb72-2&#34;&gt;&lt;a href=&#34;#cb72-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Integral&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それらを使うのは簡単です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb73&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb73-1&#34;&gt;&lt;a href=&#34;#cb73-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;integer ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb73-2&#34;&gt;&lt;a href=&#34;#cb73-2&#34;&gt;&lt;/a&gt;integer &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme L.decimal&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb74&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb74-1&#34;&gt;&lt;a href=&#34;#cb74-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (integer &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123  &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-2&#34;&gt;&lt;a href=&#34;#cb74-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;123&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-3&#34;&gt;&lt;a href=&#34;#cb74-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-4&#34;&gt;&lt;a href=&#34;#cb74-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (integer &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;12a  &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-5&#34;&gt;&lt;a href=&#34;#cb74-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb74-6&#34;&gt;&lt;a href=&#34;#cb74-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-7&#34;&gt;&lt;a href=&#34;#cb74-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;12a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-8&#34;&gt;&lt;a href=&#34;#cb74-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb74-9&#34;&gt;&lt;a href=&#34;#cb74-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-10&#34;&gt;&lt;a href=&#34;#cb74-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; end of input or the rest of integer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scientific&lt;/code&gt; と &lt;code&gt;float&lt;/code&gt; は整数と小数の文法を受け入れます。 &lt;code&gt;scientific&lt;/code&gt; は&lt;code&gt;scientific&lt;/code&gt;パッケージの &lt;code&gt;Scientific&lt;/code&gt;型を返しますが、 &lt;code&gt;float&lt;/code&gt; はその結果の型が多相的であり、 &lt;code&gt;RealFloat&lt;/code&gt; の任意のインスタンスを返すことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb75&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb75-1&#34;&gt;&lt;a href=&#34;#cb75-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;scientific ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)              &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb75-2&#34;&gt;&lt;a href=&#34;#cb75-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;float      ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RealFloat&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb76&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb76-1&#34;&gt;&lt;a href=&#34;#cb76-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;float ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb76-2&#34;&gt;&lt;a href=&#34;#cb76-2&#34;&gt;&lt;/a&gt;float &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme L.float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb77&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb77-1&#34;&gt;&lt;a href=&#34;#cb77-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-2&#34;&gt;&lt;a href=&#34;#cb77-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb77-3&#34;&gt;&lt;a href=&#34;#cb77-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-4&#34;&gt;&lt;a href=&#34;#cb77-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;123&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-5&#34;&gt;&lt;a href=&#34;#cb77-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb77-6&#34;&gt;&lt;a href=&#34;#cb77-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb77-7&#34;&gt;&lt;a href=&#34;#cb77-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, or digit&lt;/span&gt;
&lt;span id=&#34;cb77-8&#34;&gt;&lt;a href=&#34;#cb77-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-9&#34;&gt;&lt;a href=&#34;#cb77-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123.45&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-10&#34;&gt;&lt;a href=&#34;#cb77-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;123.45&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-11&#34;&gt;&lt;a href=&#34;#cb77-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-12&#34;&gt;&lt;a href=&#34;#cb77-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-13&#34;&gt;&lt;a href=&#34;#cb77-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb77-14&#34;&gt;&lt;a href=&#34;#cb77-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-15&#34;&gt;&lt;a href=&#34;#cb77-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;123d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-16&#34;&gt;&lt;a href=&#34;#cb77-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb77-17&#34;&gt;&lt;a href=&#34;#cb77-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-18&#34;&gt;&lt;a href=&#34;#cb77-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, or digit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらすべてのパーサは符号付き数値をパースしないことに注意してください。 符号付き数値用のパーサを作成するには、 既存のパーサを &lt;code&gt;signed&lt;/code&gt; コンビネータでラップする必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb78&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb78-1&#34;&gt;&lt;a href=&#34;#cb78-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;signedInteger ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-2&#34;&gt;&lt;a href=&#34;#cb78-2&#34;&gt;&lt;/a&gt;signedInteger &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.signed sc integer&lt;/span&gt;
&lt;span id=&#34;cb78-3&#34;&gt;&lt;a href=&#34;#cb78-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-4&#34;&gt;&lt;a href=&#34;#cb78-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;signedFloat ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-5&#34;&gt;&lt;a href=&#34;#cb78-5&#34;&gt;&lt;/a&gt;signedFloat &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.signed sc float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;signed&lt;/code&gt; の最初の引数(スペースコンシューマ)は、符号と実際の数字の間の空白の消費を制御します。スペースを入れたくない場合は、代わりに&lt;code&gt;return ()&lt;/code&gt;を渡してください。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;lookAhead&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;notfollowedby-と-lookahead&#34;&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; と &lt;code&gt;lookAhead&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;実際にはパーサの位置を進めずに入力ストリームの 先読みを実行できる(&lt;code&gt;try&lt;/code&gt; に加えて)さらに2つのプリミティブがあります。&lt;/p&gt;
&lt;p&gt;１つめは &lt;code&gt;notFollowedBy&lt;/code&gt; と呼ばれるものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb79&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb79-1&#34;&gt;&lt;a href=&#34;#cb79-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;notFollowedBy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数のパーサが失敗したときにのみ成功し、 入力を消費したり、パーサの状態を変更することはありません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; を使いたいと思うかもしれない例として、 キーワードのパースを考えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb80&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb80-1&#34;&gt;&lt;a href=&#34;#cb80-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb80-2&#34;&gt;&lt;a href=&#34;#cb80-2&#34;&gt;&lt;/a&gt;pKeyword keyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (string keyword)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このパーサは問題を抱えています。 マッチさせるキーワードが単に識別子の接頭辞であるならどうでしょうか？ その場合、それは間違いなくキーワードではありません。 したがって、&lt;code&gt;notFollowedBy&lt;/code&gt; を使用して そのようなケースを排除する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb81&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb81-1&#34;&gt;&lt;a href=&#34;#cb81-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb81-2&#34;&gt;&lt;a href=&#34;#cb81-2&#34;&gt;&lt;/a&gt;pKeyword keyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (string keyword &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; notFollowedBy alphaNumChar)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう1つのプリミティブは&lt;code&gt;lookAhead&lt;/code&gt;です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb82&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb82-1&#34;&gt;&lt;a href=&#34;#cb82-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lookAhead ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lookAhead&lt;/code&gt; の引数 &lt;code&gt;p&lt;/code&gt; が成功すると、&lt;code&gt;lookAhead p&lt;/code&gt; 全体も成功しますが、 入力ストリーム（およびパーサの状態全体）はそのまま残ります。 つまり、何も消費されません。&lt;/p&gt;
&lt;p&gt;これが有用である可能性がある場所の一例は、 すでにパースされた入力に対してチェックを実行し、 失敗または正常に継続することです。 慣用表現として、次のようなコードで表すことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb83&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb83-1&#34;&gt;&lt;a href=&#34;#cb83-1&#34;&gt;&lt;/a&gt;withPredicate1&lt;/span&gt;
&lt;span id=&#34;cb83-2&#34;&gt;&lt;a href=&#34;#cb83-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パース後の入力の振る舞いの確認&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-3&#34;&gt;&lt;a href=&#34;#cb83-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗した時に表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-4&#34;&gt;&lt;a href=&#34;#cb83-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-5&#34;&gt;&lt;a href=&#34;#cb83-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 振る舞いを確認したパーサの結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-6&#34;&gt;&lt;a href=&#34;#cb83-6&#34;&gt;&lt;/a&gt;withPredicate1 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-7&#34;&gt;&lt;a href=&#34;#cb83-7&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookAhead p&lt;/span&gt;
&lt;span id=&#34;cb83-8&#34;&gt;&lt;a href=&#34;#cb83-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb83-9&#34;&gt;&lt;a href=&#34;#cb83-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb83-10&#34;&gt;&lt;a href=&#34;#cb83-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;code&gt;lookAhead&lt;/code&gt; を使用した例ですが、 チェックが成功した場合に2回パーサを実行しており、 良くないことにも注意してください。 ここに &lt;code&gt;getOffset&lt;/code&gt; 関数を使用した代わりの解決方法があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb84&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb84-1&#34;&gt;&lt;a href=&#34;#cb84-1&#34;&gt;&lt;/a&gt;withPredicate2&lt;/span&gt;
&lt;span id=&#34;cb84-2&#34;&gt;&lt;a href=&#34;#cb84-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パース後の入力の振る舞いの確認&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-3&#34;&gt;&lt;a href=&#34;#cb84-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗した時に表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-4&#34;&gt;&lt;a href=&#34;#cb84-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-5&#34;&gt;&lt;a href=&#34;#cb84-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 振る舞いを確認したパーサの結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-6&#34;&gt;&lt;a href=&#34;#cb84-6&#34;&gt;&lt;/a&gt;withPredicate2 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-7&#34;&gt;&lt;a href=&#34;#cb84-7&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb84-8&#34;&gt;&lt;a href=&#34;#cb84-8&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb84-9&#34;&gt;&lt;a href=&#34;#cb84-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb84-10&#34;&gt;&lt;a href=&#34;#cb84-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb84-11&#34;&gt;&lt;a href=&#34;#cb84-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-12&#34;&gt;&lt;a href=&#34;#cb84-12&#34;&gt;&lt;/a&gt;      setOffset o&lt;/span&gt;
&lt;span id=&#34;cb84-13&#34;&gt;&lt;a href=&#34;#cb84-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにして、入力ストリームの &lt;code&gt;offset&lt;/code&gt; を &lt;code&gt;p&lt;/code&gt; を実行する前の状態に設定してから失敗します。 未消費の残りとオフセットの位置に不一致がありますが、 &lt;code&gt;fail&lt;/code&gt; を呼び出してすぐにパースを終了するので、 この場合は問題になりません。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Expr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;式のパース&#34;&gt;式のパース&lt;/h2&gt;
&lt;p&gt;「式」とは、 項とそれらの項に適用される演算子から形成される構造を意味します。 演算子は、 異なる優先順位で、前置、中置、後置、左と右の結合にすることができます。 このような構文の例として、学校でよく知られている算術式があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a * (b + 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2種類の項、変数(&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt;)と整数(&lt;code&gt;2&lt;/code&gt;)を見ることができます。 2つの演算子、&lt;code&gt;*&lt;/code&gt;と&lt;code&gt;+&lt;/code&gt;もあります。&lt;/p&gt;
&lt;p&gt;式のパーサを書くには時間がかかるかもしれません。 これ手助けするために、 &lt;code&gt;megaparsec&lt;/code&gt; には &lt;code&gt;Text.Megaparsec.Expr&lt;/code&gt; モジュールが付属しています。 これは、&lt;code&gt;Operator&lt;/code&gt;データ型と&lt;code&gt;makeExprParser&lt;/code&gt;ヘルパーの 2つのだけをエクスポートします。&lt;/p&gt;
&lt;p&gt;両方ともよくドキュメント化されているので、 このセクションではドキュメント化を繰り返すことはせず、 代わりに単純だが完全に機能する式のパーサを書くつもりです。&lt;/p&gt;
&lt;p&gt;式を表すデータ型を &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%A7%8B%E6%96%87%E6%9C%A8&#34;&gt;AST&lt;/a&gt;として定義することから始めましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb86&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb86-1&#34;&gt;&lt;a href=&#34;#cb86-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-2&#34;&gt;&lt;a href=&#34;#cb86-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-3&#34;&gt;&lt;a href=&#34;#cb86-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-4&#34;&gt;&lt;a href=&#34;#cb86-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Negation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-5&#34;&gt;&lt;a href=&#34;#cb86-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt;      &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-6&#34;&gt;&lt;a href=&#34;#cb86-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Subtr&lt;/span&gt;    &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-7&#34;&gt;&lt;a href=&#34;#cb86-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-8&#34;&gt;&lt;a href=&#34;#cb86-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Division&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-9&#34;&gt;&lt;a href=&#34;#cb86-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;makeExprParser&lt;/code&gt; を使用するには、 項のパーサと演算子テーブルを指定する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb87&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb87-1&#34;&gt;&lt;a href=&#34;#cb87-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;makeExprParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb87-2&#34;&gt;&lt;a href=&#34;#cb87-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 項のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb87-3&#34;&gt;&lt;a href=&#34;#cb87-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; m a]]  &lt;span class=&#34;co&#34;&gt;-- ^ 演算子テーブル, &amp;#39;Operator&amp;#39;を参照&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb87-4&#34;&gt;&lt;a href=&#34;#cb87-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 式のパーサの結果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それでは項のパーサから始めましょう。 結合性や優先順位のようなものを扱う場合、式をパースするアルゴリズムでは、 項をボックスとみなし、分割できない全体として考えることをお勧めします。 この場合、このカテゴリに分類されるものが3つあります。 変数、整数、および括弧内の式全体です。 前の章の定義を使用して、項のパーサを次のように定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb88&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb88-1&#34;&gt;&lt;a href=&#34;#cb88-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pVariable ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-2&#34;&gt;&lt;a href=&#34;#cb88-2&#34;&gt;&lt;/a&gt;pVariable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lexeme&lt;/span&gt;
&lt;span id=&#34;cb88-3&#34;&gt;&lt;a href=&#34;#cb88-3&#34;&gt;&lt;/a&gt;  ((&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; letterChar &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;variable&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb88-4&#34;&gt;&lt;a href=&#34;#cb88-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-5&#34;&gt;&lt;a href=&#34;#cb88-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pInteger ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-6&#34;&gt;&lt;a href=&#34;#cb88-6&#34;&gt;&lt;/a&gt;pInteger &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lexeme L.decimal&lt;/span&gt;
&lt;span id=&#34;cb88-7&#34;&gt;&lt;a href=&#34;#cb88-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-8&#34;&gt;&lt;a href=&#34;#cb88-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parens ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb88-9&#34;&gt;&lt;a href=&#34;#cb88-9&#34;&gt;&lt;/a&gt;parens &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; between (symbol &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) (symbol &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb88-10&#34;&gt;&lt;a href=&#34;#cb88-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-11&#34;&gt;&lt;a href=&#34;#cb88-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pTerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-12&#34;&gt;&lt;a href=&#34;#cb88-12&#34;&gt;&lt;/a&gt;pTerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb88-13&#34;&gt;&lt;a href=&#34;#cb88-13&#34;&gt;&lt;/a&gt;  [ parens pExpr&lt;/span&gt;
&lt;span id=&#34;cb88-14&#34;&gt;&lt;a href=&#34;#cb88-14&#34;&gt;&lt;/a&gt;  , pVariable&lt;/span&gt;
&lt;span id=&#34;cb88-15&#34;&gt;&lt;a href=&#34;#cb88-15&#34;&gt;&lt;/a&gt;  , pInteger ]&lt;/span&gt;
&lt;span id=&#34;cb88-16&#34;&gt;&lt;a href=&#34;#cb88-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-17&#34;&gt;&lt;a href=&#34;#cb88-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pExpr ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-18&#34;&gt;&lt;a href=&#34;#cb88-18&#34;&gt;&lt;/a&gt;pExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; makeExprParser pTerm operatorTable&lt;/span&gt;
&lt;span id=&#34;cb88-19&#34;&gt;&lt;a href=&#34;#cb88-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-20&#34;&gt;&lt;a href=&#34;#cb88-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;operatorTable ::&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb88-21&#34;&gt;&lt;a href=&#34;#cb88-21&#34;&gt;&lt;/a&gt;operatorTable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- TODO&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pVariable&lt;/code&gt;、&lt;code&gt;pInteger&lt;/code&gt;、および&lt;code&gt;parens&lt;/code&gt;の定義は、 ここまでで問題なく進むはずです。 文法が重ならないので &lt;code&gt;pTerm&lt;/code&gt; に &lt;code&gt;try&lt;/code&gt; が必要ないという点も、 ここではとてもラッキーです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開き括弧 &lt;code&gt;(&lt;/code&gt; がある場合は、括弧内に式が続くことを知っているので、そのブランチにコミットします。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文字を見れば、それが識別子の始まりであることがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字が見えれば、それが整数の始まりであることがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、&lt;code&gt;pExpr&lt;/code&gt; を終了するために、 &lt;code&gt;operatorTable&lt;/code&gt; を定義する必要があります。 型からネストされたリストであることがわかります。 すべての内部リストはサポートしたい演算子のリストです。 それらはすべて同じ優先順位を持っています。 外側のリストは優先順位の降順で並べられているので、 高い位置に演算子のグループを配置するほど、 それらはより強く結合されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb89&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb89-1&#34;&gt;&lt;a href=&#34;#cb89-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; m a &lt;span class=&#34;co&#34;&gt;-- 注意&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-2&#34;&gt;&lt;a href=&#34;#cb89-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixN&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 非結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-3&#34;&gt;&lt;a href=&#34;#cb89-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixL&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 左結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-4&#34;&gt;&lt;a href=&#34;#cb89-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixR&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 右結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-5&#34;&gt;&lt;a href=&#34;#cb89-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prefix&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a))      &lt;span class=&#34;co&#34;&gt;-- ^ 前置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-6&#34;&gt;&lt;a href=&#34;#cb89-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Postfix&lt;/span&gt; (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a))      &lt;span class=&#34;co&#34;&gt;-- ^ 後置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-7&#34;&gt;&lt;a href=&#34;#cb89-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-8&#34;&gt;&lt;a href=&#34;#cb89-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;operatorTable ::&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb89-9&#34;&gt;&lt;a href=&#34;#cb89-9&#34;&gt;&lt;/a&gt;operatorTable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-10&#34;&gt;&lt;a href=&#34;#cb89-10&#34;&gt;&lt;/a&gt;  [ [ prefix &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Negation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-11&#34;&gt;&lt;a href=&#34;#cb89-11&#34;&gt;&lt;/a&gt;    , prefix &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb89-12&#34;&gt;&lt;a href=&#34;#cb89-12&#34;&gt;&lt;/a&gt;  , [ binary &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-13&#34;&gt;&lt;a href=&#34;#cb89-13&#34;&gt;&lt;/a&gt;    , binary &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Division&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb89-14&#34;&gt;&lt;a href=&#34;#cb89-14&#34;&gt;&lt;/a&gt;  , [ binary &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-15&#34;&gt;&lt;a href=&#34;#cb89-15&#34;&gt;&lt;/a&gt;    , binary &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Subtr&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb89-16&#34;&gt;&lt;a href=&#34;#cb89-16&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb89-17&#34;&gt;&lt;a href=&#34;#cb89-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-18&#34;&gt;&lt;a href=&#34;#cb89-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;binary ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-19&#34;&gt;&lt;a href=&#34;#cb89-19&#34;&gt;&lt;/a&gt;binary  name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixL&lt;/span&gt;  (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;
&lt;span id=&#34;cb89-20&#34;&gt;&lt;a href=&#34;#cb89-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-21&#34;&gt;&lt;a href=&#34;#cb89-21&#34;&gt;&lt;/a&gt;prefix,&lt;span class=&#34;ot&#34;&gt; postfix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-22&#34;&gt;&lt;a href=&#34;#cb89-22&#34;&gt;&lt;/a&gt;prefix  name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prefix&lt;/span&gt;  (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;
&lt;span id=&#34;cb89-23&#34;&gt;&lt;a href=&#34;#cb89-23&#34;&gt;&lt;/a&gt;postfix name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Postfix&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;binary&lt;/code&gt; で &lt;code&gt;InfixL&lt;/code&gt; 内部の &lt;code&gt;Parser (Expr -&amp;gt; Expr -&amp;gt; Expr)&lt;/code&gt; を どのように配置し、 同様に&lt;code&gt;prefix&lt;/code&gt; と &lt;code&gt;postfix&lt;/code&gt; に &lt;code&gt;Parser (Expr -&amp;gt; Expr)&lt;/code&gt; を どのように配置しているのか注意してください。 すなわち、&lt;code&gt;symbol name&lt;/code&gt; を実行し、 &lt;code&gt;Expr&lt;/code&gt; 型の最終結果を得るために項に適用する関数を返します。&lt;/p&gt;
&lt;p&gt;これでパーサを試すことができます。準備は完了です！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb90&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb90-1&#34;&gt;&lt;a href=&#34;#cb90-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * (b + 2)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-2&#34;&gt;&lt;a href=&#34;#cb90-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Product&lt;/span&gt; (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Sum&lt;/span&gt; (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb90-3&#34;&gt;&lt;a href=&#34;#cb90-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-4&#34;&gt;&lt;a href=&#34;#cb90-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * b + 2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-5&#34;&gt;&lt;a href=&#34;#cb90-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Sum&lt;/span&gt; (Product (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-6&#34;&gt;&lt;a href=&#34;#cb90-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-7&#34;&gt;&lt;a href=&#34;#cb90-7&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * b / 2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-8&#34;&gt;&lt;a href=&#34;#cb90-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Division&lt;/span&gt; (Product (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-9&#34;&gt;&lt;a href=&#34;#cb90-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-10&#34;&gt;&lt;a href=&#34;#cb90-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * (b $ 2)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-11&#34;&gt;&lt;a href=&#34;#cb90-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:8:&lt;/span&gt;
&lt;span id=&#34;cb90-12&#34;&gt;&lt;a href=&#34;#cb90-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-13&#34;&gt;&lt;a href=&#34;#cb90-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;a&lt;/span&gt; * (b $ 2)&lt;/span&gt;
&lt;span id=&#34;cb90-14&#34;&gt;&lt;a href=&#34;#cb90-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;        ^&lt;/span&gt;
&lt;span id=&#34;cb90-15&#34;&gt;&lt;a href=&#34;#cb90-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-16&#34;&gt;&lt;a href=&#34;#cb90-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; or operator&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Text.Megaparsec.Expr&lt;/code&gt; モジュールのドキュメントには、 あまり標準的ではない状況で役立つヒントがいくつか含まれているので、 それを読むことをお勧めします。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Indentation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;indentation-sensitiveなパース&#34;&gt;Indentation-sensitiveなパース&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; モジュールには、 Indentation-sensitive な文法をパースするときに役立つツールが含まれています。 最初に利用可能なコンビネータを見直し、 次にIndentation-sensitiveなパーサを書くことによって それらを使えるようにします。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;nonIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nonindented-と-indentblock&#34;&gt;&lt;code&gt;nonIndented&lt;/code&gt; と &lt;code&gt;indentBlock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;最も単純な&lt;code&gt;nonIndented&lt;/code&gt; から始めましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb91&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb91-1&#34;&gt;&lt;a href=&#34;#cb91-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;nonIndented ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb91-2&#34;&gt;&lt;a href=&#34;#cb91-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m ()              &lt;span class=&#34;co&#34;&gt;-- ^ インデント (スペース) の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb91-3&#34;&gt;&lt;a href=&#34;#cb91-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 内側のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb91-4&#34;&gt;&lt;a href=&#34;#cb91-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それはその内側のパーサが インデントされていない入力を消費することを確認できます。 これは、Indentation-sensitiveな入力による 高レベルなパーサの背後にあるモデルの一部です。 インデントされていないトップレベルの項目があり、 すべてのインデントされたトークンはそれらのトップレベル定義の 直接的または間接的な子であると述べます。 &lt;code&gt;megaparsec&lt;/code&gt;では、これを表現するために追加の状態を必要としません。 インデントは常に相対的なので、 私たちの考えは、参照トークンとインデントトークンのために パーサを明示的に結び付けることです。 そして、パーサの純粋な組み合わせによって Indentation-sensitiveな文法を定義することです。&lt;/p&gt;
&lt;p&gt;それでは、インデントブロックのパーサを どのように定義すればよいのでしょうか。 &lt;code&gt;indentBlock&lt;/code&gt;のシグネチャを見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb92&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb92-1&#34;&gt;&lt;a href=&#34;#cb92-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;indentBlock ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb92-2&#34;&gt;&lt;a href=&#34;#cb92-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m ()              &lt;span class=&#34;co&#34;&gt;-- ^ インデント (スペース) の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb92-3&#34;&gt;&lt;a href=&#34;#cb92-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;IndentOpt&lt;/span&gt; m a b) &lt;span class=&#34;co&#34;&gt;-- ^ 「参照」トークン の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb92-4&#34;&gt;&lt;a href=&#34;#cb92-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はじめに、インデントの消費方法を指定します。 ここで注意すべき重要なことは、 このスペースを消費するパーサは改行も消費しなければならないのに対し、 トークン(参照トークンとインデントトークン)は 通常改行をそれらの後に消費するべきではないということです。&lt;/p&gt;
&lt;p&gt;ご覧のとおり、2番目の引数を使用すると参照トークンをパースし、 次に&lt;code&gt;indentBlock&lt;/code&gt;に何をするかを指示するデータ構造を返すことができます。 いくつかのオプションがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb93&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb93-1&#34;&gt;&lt;a href=&#34;#cb93-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentOpt&lt;/span&gt; m a b&lt;/span&gt;
&lt;span id=&#34;cb93-2&#34;&gt;&lt;a href=&#34;#cb93-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentNone&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb93-3&#34;&gt;&lt;a href=&#34;#cb93-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ インデントトークンを消費せず、値を返すだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-4&#34;&gt;&lt;a href=&#34;#cb93-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentMany&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;) ([b] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) (m b)&lt;/span&gt;
&lt;span id=&#34;cb93-5&#34;&gt;&lt;a href=&#34;#cb93-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 多くの(0個の場合を含む)インデントトークンをパースし, 与えられたインデント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-6&#34;&gt;&lt;a href=&#34;#cb93-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- レベルを使う (&amp;#39;Nothing&amp;#39; の場合は最初にインデントされたトークンのレベルを使う)。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-7&#34;&gt;&lt;a href=&#34;#cb93-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 2番目の引数は最終結果を取得する方法を示し、三番目の&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-8&#34;&gt;&lt;a href=&#34;#cb93-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 引数はインデントされたトークンをパースする方法を示す。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-9&#34;&gt;&lt;a href=&#34;#cb93-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentSome&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;) ([b] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) (m b)&lt;/span&gt;
&lt;span id=&#34;cb93-10&#34;&gt;&lt;a href=&#34;#cb93-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;IndentMany&amp;#39;に似ているが、少なくとも1つのインデントトークンが&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-11&#34;&gt;&lt;a href=&#34;#cb93-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 出現することを要求する。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;考えを変えてインデントのないトークンをパースすることができます。 多くの（つまり、場合によっては0個の）インデントトークンをパースするか、 少なくとも1つのそのようなトークンを要求することができます。 &lt;code&gt;indentBlock&lt;/code&gt;が最初のインデントトークンのインデントレベルを検出して それを使用するか、手動でインデントレベルを指定することができます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;SimpleIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;単純なインデントされたリストのパース&#34;&gt;単純なインデントされたリストのパース&lt;/h2&gt;
&lt;p&gt;いくつかの項目の単純なインデントされたリストをパースしましょう。 インポートセクションから始めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb94&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb94-1&#34;&gt;&lt;a href=&#34;#cb94-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-2&#34;&gt;&lt;a href=&#34;#cb94-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TupleSections     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-3&#34;&gt;&lt;a href=&#34;#cb94-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-4&#34;&gt;&lt;a href=&#34;#cb94-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-5&#34;&gt;&lt;a href=&#34;#cb94-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-6&#34;&gt;&lt;a href=&#34;#cb94-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-7&#34;&gt;&lt;a href=&#34;#cb94-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt; (void)&lt;/span&gt;
&lt;span id=&#34;cb94-8&#34;&gt;&lt;a href=&#34;#cb94-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb94-9&#34;&gt;&lt;a href=&#34;#cb94-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-10&#34;&gt;&lt;a href=&#34;#cb94-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-11&#34;&gt;&lt;a href=&#34;#cb94-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-12&#34;&gt;&lt;a href=&#34;#cb94-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-13&#34;&gt;&lt;a href=&#34;#cb94-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-14&#34;&gt;&lt;a href=&#34;#cb94-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2種類のスペースコンシューマが必要になります。 1つは改行を消費する&lt;code&gt;scn&lt;/code&gt;、もう1つは消費しない&lt;code&gt;sc&lt;/code&gt;です（実際にはここではスペースとタブのみをパースします）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb95&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb95-1&#34;&gt;&lt;a href=&#34;#cb95-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lineComment ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-2&#34;&gt;&lt;a href=&#34;#cb95-2&#34;&gt;&lt;/a&gt;lineComment &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.skipLineComment &lt;span class=&#34;st&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-3&#34;&gt;&lt;a href=&#34;#cb95-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-4&#34;&gt;&lt;a href=&#34;#cb95-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;scn ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-5&#34;&gt;&lt;a href=&#34;#cb95-5&#34;&gt;&lt;/a&gt;scn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space space1 lineComment empty&lt;/span&gt;
&lt;span id=&#34;cb95-6&#34;&gt;&lt;a href=&#34;#cb95-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-7&#34;&gt;&lt;a href=&#34;#cb95-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-8&#34;&gt;&lt;a href=&#34;#cb95-8&#34;&gt;&lt;/a&gt;sc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space (void &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;)) lineComment empty&lt;/span&gt;
&lt;span id=&#34;cb95-9&#34;&gt;&lt;a href=&#34;#cb95-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-10&#34;&gt;&lt;a href=&#34;#cb95-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lexeme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb95-11&#34;&gt;&lt;a href=&#34;#cb95-11&#34;&gt;&lt;/a&gt;lexeme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lexeme sc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;楽しみのために、&lt;code&gt;#&lt;/code&gt;で始まる行のコメントを許可します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pItemList&lt;/code&gt; は、それ自体が参照トークン（リストのヘッダー） とインデントトークン（リストの項目）の組み合わせである トップレベルの形式です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb96&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb96-1&#34;&gt;&lt;a href=&#34;#cb96-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItemList ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]) &lt;span class=&#34;co&#34;&gt;-- ヘッダとアイテムのリスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-2&#34;&gt;&lt;a href=&#34;#cb96-2&#34;&gt;&lt;/a&gt;pItemList &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb96-3&#34;&gt;&lt;a href=&#34;#cb96-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-4&#34;&gt;&lt;a href=&#34;#cb96-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-5&#34;&gt;&lt;a href=&#34;#cb96-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb96-6&#34;&gt;&lt;a href=&#34;#cb96-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentMany&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pItem)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;私たちの目的であるアイテムは、英数字とハイフンのシーケンスです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb97&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb97-1&#34;&gt;&lt;a href=&#34;#cb97-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb97-2&#34;&gt;&lt;a href=&#34;#cb97-2&#34;&gt;&lt;/a&gt;pItem &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;list item&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GHCiでコードをロードし、 組み込みの&lt;code&gt;parseTest&lt;/code&gt;の助けを借りて試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb98&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb98-1&#34;&gt;&lt;a href=&#34;#cb98-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-2&#34;&gt;&lt;a href=&#34;#cb98-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb98-3&#34;&gt;&lt;a href=&#34;#cb98-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-4&#34;&gt;&lt;a href=&#34;#cb98-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-5&#34;&gt;&lt;a href=&#34;#cb98-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb98-6&#34;&gt;&lt;a href=&#34;#cb98-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb98-7&#34;&gt;&lt;a href=&#34;#cb98-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; list item&lt;/span&gt;
&lt;span id=&#34;cb98-8&#34;&gt;&lt;a href=&#34;#cb98-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-9&#34;&gt;&lt;a href=&#34;#cb98-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-10&#34;&gt;&lt;a href=&#34;#cb98-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-11&#34;&gt;&lt;a href=&#34;#cb98-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-12&#34;&gt;&lt;a href=&#34;#cb98-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;  something&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-13&#34;&gt;&lt;a href=&#34;#cb98-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb98-14&#34;&gt;&lt;a href=&#34;#cb98-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-15&#34;&gt;&lt;a href=&#34;#cb98-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;ex&#34;&gt;something&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-16&#34;&gt;&lt;a href=&#34;#cb98-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb98-17&#34;&gt;&lt;a href=&#34;#cb98-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 3, should be equal to 1)&lt;/span&gt;
&lt;span id=&#34;cb98-18&#34;&gt;&lt;a href=&#34;#cb98-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-19&#34;&gt;&lt;a href=&#34;#cb98-19&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\none\ntwo\nthree&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-20&#34;&gt;&lt;a href=&#34;#cb98-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb98-21&#34;&gt;&lt;a href=&#34;#cb98-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-22&#34;&gt;&lt;a href=&#34;#cb98-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;one&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-23&#34;&gt;&lt;a href=&#34;#cb98-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb98-24&#34;&gt;&lt;a href=&#34;#cb98-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-25&#34;&gt;&lt;a href=&#34;#cb98-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IndentMany&lt;/code&gt; オプションを使用しているので、 空のリストでも問題ありませんが、 組み込みのコンビネータ&lt;code&gt;space&lt;/code&gt;はエラーメッセージから 「より多くのスペースを期待する」というフレーズを隠しているので、 このエラーメッセージは完全に妥当です。&lt;/p&gt;
&lt;p&gt;続けましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb99&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb99-1&#34;&gt;&lt;a href=&#34;#cb99-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n    two\n  three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-2&#34;&gt;&lt;a href=&#34;#cb99-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;3&lt;/span&gt;:5:&lt;/span&gt;
&lt;span id=&#34;cb99-3&#34;&gt;&lt;a href=&#34;#cb99-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-4&#34;&gt;&lt;a href=&#34;#cb99-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;ex&#34;&gt;two&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-5&#34;&gt;&lt;a href=&#34;#cb99-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;     ^&lt;/span&gt;
&lt;span id=&#34;cb99-6&#34;&gt;&lt;a href=&#34;#cb99-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 5, should be equal to 3)&lt;/span&gt;
&lt;span id=&#34;cb99-7&#34;&gt;&lt;a href=&#34;#cb99-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-8&#34;&gt;&lt;a href=&#34;#cb99-8&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n  two\n three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-9&#34;&gt;&lt;a href=&#34;#cb99-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;4&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb99-10&#34;&gt;&lt;a href=&#34;#cb99-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-11&#34;&gt;&lt;a href=&#34;#cb99-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;ex&#34;&gt;three&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-12&#34;&gt;&lt;a href=&#34;#cb99-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb99-13&#34;&gt;&lt;a href=&#34;#cb99-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 2, should be equal to 3)&lt;/span&gt;
&lt;span id=&#34;cb99-14&#34;&gt;&lt;a href=&#34;#cb99-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-15&#34;&gt;&lt;a href=&#34;#cb99-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n  two\n  three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-16&#34;&gt;&lt;a href=&#34;#cb99-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;st&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは確かにうまくいきそうです。 &lt;code&gt;IndentMany&lt;/code&gt; を &lt;code&gt;IndentSome&lt;/code&gt; に、&lt;code&gt;Nothing&lt;/code&gt; を&lt;code&gt;Just (mkPos 5)&lt;/code&gt;に 置き換えます（インデントレベルは1から数えられるため、 インデントされる項目の前に4つのスペースが必要になります）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb100&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb100-1&#34;&gt;&lt;a href=&#34;#cb100-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItemList ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb100-2&#34;&gt;&lt;a href=&#34;#cb100-2&#34;&gt;&lt;/a&gt;pItemList &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb100-3&#34;&gt;&lt;a href=&#34;#cb100-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb100-4&#34;&gt;&lt;a href=&#34;#cb100-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb100-5&#34;&gt;&lt;a href=&#34;#cb100-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb100-6&#34;&gt;&lt;a href=&#34;#cb100-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentSome&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (mkPos &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pItem)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb101&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb101-1&#34;&gt;&lt;a href=&#34;#cb101-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-2&#34;&gt;&lt;a href=&#34;#cb101-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb101-3&#34;&gt;&lt;a href=&#34;#cb101-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-4&#34;&gt;&lt;a href=&#34;#cb101-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-5&#34;&gt;&lt;a href=&#34;#cb101-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb101-6&#34;&gt;&lt;a href=&#34;#cb101-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 1, should be greater than 1)&lt;/span&gt;
&lt;span id=&#34;cb101-7&#34;&gt;&lt;a href=&#34;#cb101-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-8&#34;&gt;&lt;a href=&#34;#cb101-8&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-9&#34;&gt;&lt;a href=&#34;#cb101-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb101-10&#34;&gt;&lt;a href=&#34;#cb101-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-11&#34;&gt;&lt;a href=&#34;#cb101-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;ex&#34;&gt;one&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-12&#34;&gt;&lt;a href=&#34;#cb101-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb101-13&#34;&gt;&lt;a href=&#34;#cb101-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 3, should be equal to 5)&lt;/span&gt;
&lt;span id=&#34;cb101-14&#34;&gt;&lt;a href=&#34;#cb101-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-15&#34;&gt;&lt;a href=&#34;#cb101-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n    one&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-16&#34;&gt;&lt;a href=&#34;#cb101-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;st&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初のメッセージは少し驚くかもしれませんが、 リスト内に少なくとも1つの項目がなければならないことを &lt;code&gt;megaparsec&lt;/code&gt;は知っているので、インデントレベルをチェックし、 そしてそれは1であり、間違っているので報告します。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;NestedIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネストされたインデントのあるリスト&#34;&gt;ネストされたインデントのあるリスト&lt;/h2&gt;
&lt;p&gt;リストのアイテムにサブアイテムを含めることを許可しましょう。 これには、新しいパーサ&lt;code&gt;pComplexItem&lt;/code&gt;が必要になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb102&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb102-1&#34;&gt;&lt;a href=&#34;#cb102-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt; :: Parser (String, [String])&lt;/span&gt;
&lt;span id=&#34;cb102-2&#34;&gt;&lt;a href=&#34;#cb102-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt; = L.indentBlock scn p&lt;/span&gt;
&lt;span id=&#34;cb102-3&#34;&gt;&lt;a href=&#34;#cb102-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-4&#34;&gt;&lt;a href=&#34;#cb102-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;p&lt;/span&gt; = do&lt;/span&gt;
&lt;span id=&#34;cb102-5&#34;&gt;&lt;a href=&#34;#cb102-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;- pItem&lt;/span&gt;
&lt;span id=&#34;cb102-6&#34;&gt;&lt;a href=&#34;#cb102-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;bu&#34;&gt;return&lt;/span&gt; (L.IndentMany Nothing (return . (header, )) &lt;span class=&#34;ex&#34;&gt;pItem&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb102-7&#34;&gt;&lt;a href=&#34;#cb102-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-8&#34;&gt;&lt;a href=&#34;#cb102-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pItemList&lt;/span&gt; :: Parser (String, [(String, [String])])&lt;/span&gt;
&lt;span id=&#34;cb102-9&#34;&gt;&lt;a href=&#34;#cb102-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pItemList&lt;/span&gt; = L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb102-10&#34;&gt;&lt;a href=&#34;#cb102-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-11&#34;&gt;&lt;a href=&#34;#cb102-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;p&lt;/span&gt; = do&lt;/span&gt;
&lt;span id=&#34;cb102-12&#34;&gt;&lt;a href=&#34;#cb102-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;- pItem&lt;/span&gt;
&lt;span id=&#34;cb102-13&#34;&gt;&lt;a href=&#34;#cb102-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;bu&#34;&gt;return&lt;/span&gt; (L.IndentSome Nothing (return . (header, )) &lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のような入力を与えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;first-chapter
  paragraph-one
      note-A # an important note here!
      note-B
  paragraph-two
    note-1
    note-2
  paragraph-three&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このような結果が得られます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Right
  ( &amp;quot;first-chapter&amp;quot;
  , [ (&amp;quot;paragraph-one&amp;quot;,   [&amp;quot;note-A&amp;quot;,&amp;quot;note-B&amp;quot;])
    , (&amp;quot;paragraph-two&amp;quot;,   [&amp;quot;note-1&amp;quot;,&amp;quot;note-2&amp;quot;])
    , (&amp;quot;paragraph-three&amp;quot;, []) ] )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは、このアプローチがネストされたインデントのある構造に対して 追加の状態を必要とせずにどのように拡張するかを示しています。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;LineFold&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;行の畳み込みの追加&#34;&gt;行の畳み込みの追加&lt;/h2&gt;
&lt;p&gt;行の畳み込みは、後続の項目のインデントレベルが 最初の項目のインデントレベルよりも大きい限り、 1行または複数行に配置できる複数の要素で構成されます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lineFold&lt;/code&gt; という別のヘルパーを利用しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb105&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb105-1&#34;&gt;&lt;a href=&#34;#cb105-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pComplexItem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb105-2&#34;&gt;&lt;a href=&#34;#cb105-2&#34;&gt;&lt;/a&gt;pComplexItem &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.indentBlock scn p&lt;/span&gt;
&lt;span id=&#34;cb105-3&#34;&gt;&lt;a href=&#34;#cb105-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-4&#34;&gt;&lt;a href=&#34;#cb105-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-5&#34;&gt;&lt;a href=&#34;#cb105-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb105-6&#34;&gt;&lt;a href=&#34;#cb105-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentMany&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pLineFold)&lt;/span&gt;
&lt;span id=&#34;cb105-7&#34;&gt;&lt;a href=&#34;#cb105-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-8&#34;&gt;&lt;a href=&#34;#cb105-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pLineFold ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-9&#34;&gt;&lt;a href=&#34;#cb105-9&#34;&gt;&lt;/a&gt;pLineFold &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lineFold scn &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \sc&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-10&#34;&gt;&lt;a href=&#34;#cb105-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; ps &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`sepBy1`&lt;/span&gt; try sc&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb105-11&#34;&gt;&lt;a href=&#34;#cb105-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; ps &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; scn &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lineFold&lt;/code&gt;は次のように機能します。 改行を受理するスペースコンシューマ&lt;code&gt;scn&lt;/code&gt;を提供し、 行の畳み込みの要素間のスペースを消費するために コールバックで使用できる特別なスペースコンシューマ&lt;code&gt;sc&#39;&lt;/code&gt;を返します。&lt;/p&gt;
&lt;p&gt;なぜ &lt;code&gt;try sc&#39;&lt;/code&gt; と (1) の行で &lt;code&gt;scn&lt;/code&gt;を使うのですか？状況は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;行の畳込みの要素は、開始位置よりもインデントが大きくなります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sc&#39;&lt;/code&gt;は、空白を消費した後の列が最初の列よりも大きくなるように、改行とともに空白を消費します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;停止させるには、&lt;code&gt;sc&#39;&lt;/code&gt; は逆の状況に遭遇する必要があります。つまり、消費後の列は最初の列以下になります。その時点では (tryのおかげで) 入力を消費せずに失敗し、&lt;code&gt;scn&lt;/code&gt; はその列から始まる新しいものの前の空白を取り上げるために使用されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先程使用していた &lt;code&gt;sc&#39;&lt;/code&gt; はすでに改行文字を消費するスペースコンシューマによって空白を調べています。したがって、末尾の空白を拾うときに改行も消費するのは論理的なことです。(1) の行で &lt;code&gt;sc&lt;/code&gt;ではなく&lt;code&gt;scn&lt;/code&gt;が使用されるのはこのためです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;練習問題：私たちのパーサーの最終版で遊ぶことは 読者のための練習として残されています。 複数の単語からなる「項目」を作成することができ、 それらが折り返されている限り、 それらはそれらの間の単一のスペースでパースされ連結されます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Efficient&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;効率のよいパーサを書く&#34;&gt;効率のよいパーサを書く&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のパーサの性能を向上させるために 何を試みるべきか議論しましょう。 プロファイリングとベンチマークによって 改善があるかどうかを常に確認する必要があることに注意してください。 これは、パフォーマンスを調整するときに正しいことを 行っているかどうかを理解するための唯一の方法です。&lt;/p&gt;
&lt;p&gt;一般的なアドバイス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;あなたのパーサが普通の&lt;code&gt;Parsec&lt;/code&gt;モナド (これは&lt;code&gt;Identity&lt;/code&gt;を組み合わせた&lt;code&gt;ParsecT&lt;/code&gt;のモナド変換子であることを思い出してください。これは非常に軽量です) の代わりにモナドスタックを使っている場合、少なくとも&lt;code&gt;transformer&lt;/code&gt;ライブラリのバージョン0.5と、&lt;code&gt;megaparsec&lt;/code&gt; のバージョン7.0以上を必ず使用してください。これらのバージョンでは、どちらのライブラリもパフォーマンスが大幅に向上しているため、何もしなくても優れたパフォーマンスを得ることができます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Parsec&lt;/code&gt; モナドは、 &lt;code&gt;ParsecT&lt;/code&gt; ベースのモナド変換子よりも常に高速になります。どうしても必要な場合以外は、&lt;code&gt;StateT&lt;/code&gt;、&lt;code&gt;WriterT&lt;/code&gt;、およびその他のモナド変換子を使用しないでください。スタックに追加すればするほど遅くなります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックトラックはコストの高い操作です。すべての分岐が失敗する前に入力に深く入り込むことができるような長い分岐の連鎖を作ることを避けてください。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;あなたが本当にそうしたい理由がない限り、パーサの多相性を保ってはいけません。トップレベルの定義ごとに、&lt;code&gt;Parser = Parsec Void Text&lt;/code&gt; などの具体的な型を指定して、パーサの型を修正することをお勧めします。このようにすればGHCはより良く最適化できるでしょう。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;惜しみなくインライン展開しましょう(もちろん、理にかなっているときに)。特に短い関数では、インライン展開による違いを見たとき、あなたは目を疑うでしょう。 これは特に、あるモジュールで定義され、別のモジュールで使用されるパーサに当てはまります。なぜなら&lt;code&gt;INLINE&lt;/code&gt;および&lt;code&gt;INLINEABLE&lt;/code&gt;プラグマはGHCに関数定義をインタフェースファイルにダンプさせるので、特殊化が容易になるからです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能な場合は、&lt;code&gt;takeWhileP&lt;/code&gt;、&lt;code&gt;takeWhile1P&lt;/code&gt;、および&lt;code&gt;takeP&lt;/code&gt;などの高速なプリミティブを使用してください。&lt;a href=&#34;https://markkarpov.com/post/megaparsec-more-speed-more-power.html#there-is-hope&#34;&gt;このブログ記事&lt;/a&gt;では、なぜそれらがとても速いのかを説明します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能であれば &lt;code&gt;oneOf&lt;/code&gt;と&lt;code&gt;noneOf&lt;/code&gt;を避け、&lt;code&gt;satisfy&lt;/code&gt; と &lt;code&gt;notChar&lt;/code&gt; を選択してください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の点のほとんどは追加のコメントを必要としませんが、 新しい高速のプリミティブ、&lt;code&gt;takeWhileP&lt;/code&gt; 、 &lt;code&gt;takeWhile1P&lt;/code&gt; 、 および &lt;code&gt;takeP&lt;/code&gt; を使用する習慣を身に付けることが有益であると思います。 最初の2つは、いくつかの&lt;code&gt;many&lt;/code&gt;と&lt;code&gt;some&lt;/code&gt;ベースの構造を置き換え、 それらを早くし、返されるデータの型を入力ストリームのチャンクに変更すること、つまり以前議論した &lt;code&gt;Tokens s&lt;/code&gt; 型に変更できるため、特に一般的です。&lt;/p&gt;
&lt;p&gt;たとえば、URIをパースしたときに、 認証の構成要素内でユーザ名をパースするための 次のコードがあったことを思い出してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb106&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb106-1&#34;&gt;&lt;a href=&#34;#cb106-1&#34;&gt;&lt;/a&gt;  user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;code&gt;takeWhile1P&lt;/code&gt; に置き換え可能です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb107&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb107-1&#34;&gt;&lt;a href=&#34;#cb107-1&#34;&gt;&lt;/a&gt;user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; takeWhile1P (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;alpha num character&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;isAlphaNum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-2&#34;&gt;&lt;a href=&#34;#cb107-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;--                  ^                            ^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-3&#34;&gt;&lt;a href=&#34;#cb107-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;--                  |                            |&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-4&#34;&gt;&lt;a href=&#34;#cb107-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- マッチさせるトークンのラベル                 述語&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ByteStrings&lt;/code&gt; と &lt;code&gt;Text&lt;/code&gt;をパースすると、 これは元の方法よりはるかに高速になります。 また、&lt;code&gt;takeWhile1P&lt;/code&gt; から直接 &lt;code&gt;Text&lt;/code&gt;を取得するため、 &lt;code&gt;T.pack&lt;/code&gt;は不要になりました。&lt;/p&gt;
&lt;p&gt;以下の式は、&lt;code&gt;takeWhileP&lt;/code&gt; と &lt;code&gt;takeWhile1P&lt;/code&gt; の &lt;code&gt;Maybe String&lt;/code&gt; 引数の意味を理解するのに役立ちます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb108&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb108-1&#34;&gt;&lt;a href=&#34;#cb108-1&#34;&gt;&lt;/a&gt;takeWhileP  (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy f &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb108-2&#34;&gt;&lt;a href=&#34;#cb108-2&#34;&gt;&lt;/a&gt;takeWhileP  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;      f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy f)&lt;/span&gt;
&lt;span id=&#34;cb108-3&#34;&gt;&lt;a href=&#34;#cb108-3&#34;&gt;&lt;/a&gt;takeWhile1P (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (satisfy f &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb108-4&#34;&gt;&lt;a href=&#34;#cb108-4&#34;&gt;&lt;/a&gt;takeWhile1P &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;      f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (satisfy f)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Error&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラー&#34;&gt;パースエラー&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のほとんどの機能の使い方を調べてきたので、 パースエラーの定義する方法、通知する方法、 実行中のパーサ内での処理方法について学びましょう。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ErrDef&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーの定義&#34;&gt;パースエラーの定義&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;ParseError&lt;/code&gt; は次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb109&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb109-1&#34;&gt;&lt;a href=&#34;#cb109-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e&lt;/span&gt;
&lt;span id=&#34;cb109-2&#34;&gt;&lt;a href=&#34;#cb109-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s))) (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)))&lt;/span&gt;
&lt;span id=&#34;cb109-3&#34;&gt;&lt;a href=&#34;#cb109-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ Megaparsecの機構によって生成された自明なエラー。 データコンストラクタには、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-4&#34;&gt;&lt;a href=&#34;#cb109-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- エラーのオフセット、予期しないトークン（存在する場合）、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-5&#34;&gt;&lt;a href=&#34;#cb109-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- および予期するトークンが含まれます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-6&#34;&gt;&lt;a href=&#34;#cb109-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e))&lt;/span&gt;
&lt;span id=&#34;cb109-7&#34;&gt;&lt;a href=&#34;#cb109-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ ファンシーなカスタムエラー。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ParseError&lt;/code&gt;は、多くても1つの予期しないアイテムと 予期するアイテムの（空かもしれない）コレクションを持つ &lt;code&gt;TrivialError&lt;/code&gt;、 または &lt;code&gt;FancyError&lt;/code&gt; のいずれかです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParseError s e&lt;/code&gt; は、2つの型変数によってパラメータ化されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; は入力ストリームの型です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; は、パースエラーのカスタムコンポーネントの型です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ErrorItem&lt;/code&gt; は次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb110&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb110-1&#34;&gt;&lt;a href=&#34;#cb110-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; t&lt;/span&gt;
&lt;span id=&#34;cb110-2&#34;&gt;&lt;a href=&#34;#cb110-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; t)      &lt;span class=&#34;co&#34;&gt;-- ^ 空ではないトークンのストリーム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb110-3&#34;&gt;&lt;a href=&#34;#cb110-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Label&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)    &lt;span class=&#34;co&#34;&gt;-- ^ ラベル (空ではない)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb110-4&#34;&gt;&lt;a href=&#34;#cb110-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EndOfInput&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 入力の終わり&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが&lt;code&gt;ErrorFancy&lt;/code&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb111&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb111-1&#34;&gt;&lt;a href=&#34;#cb111-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb111-2&#34;&gt;&lt;a href=&#34;#cb111-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-3&#34;&gt;&lt;a href=&#34;#cb111-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ パーサモナドで &amp;#39;fail&amp;#39;が使われている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-4&#34;&gt;&lt;a href=&#34;#cb111-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-5&#34;&gt;&lt;a href=&#34;#cb111-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ インデントの誤りによるエラー：参照レベルと実際のレベルの間の&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-6&#34;&gt;&lt;a href=&#34;#cb111-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 望ましい順序、参照インデントレベル、実際のインデントレベル。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-7&#34;&gt;&lt;a href=&#34;#cb111-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb111-8&#34;&gt;&lt;a href=&#34;#cb111-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ カスタムエラーデータ、 &amp;#39;Error Fancy&amp;#39;の&amp;#39;e&amp;#39;を&amp;#39;Void&amp;#39;に&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-9&#34;&gt;&lt;a href=&#34;#cb111-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- することで都合に応じて無効にすることができます。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ErrorFancy&lt;/code&gt;には、2つの一般的なケースのための データコンストラクタが含まれており、 &lt;code&gt;megaparsec&lt;/code&gt;はそのまま使えるようになっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fail&lt;/code&gt;関数の使用により、パーサが任意の&lt;code&gt;String&lt;/code&gt; で失敗の報告をする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前の章で見たインデント関連の問題です。 すぐに使えるindentation-sensitive な文法を扱うためのツールを 提供しているので、インデントの問題に関する正しく型付けされた 情報を保存する方法が必要です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、&lt;code&gt;ErrorCustom&lt;/code&gt;は&lt;code&gt;ErrorFancy&lt;/code&gt;型に任意のデータを 埋め込むことを可能にする一種の「拡張スロット」です。 パースエラーにカスタムデータが必要ない場合は、 &lt;code&gt;ErrorFancy&lt;/code&gt;を&lt;code&gt;Void&lt;/code&gt;でパラメータ化します。 &lt;code&gt;Void&lt;/code&gt;はボトムしか含まないため、&lt;code&gt;ErrorCustom&lt;/code&gt;は「キャンセル」されるか、 または代数データ型と数値の間の類推に従うと「0倍」になります。&lt;/p&gt;
&lt;p&gt;ライブラリの古いバージョンでは、&lt;code&gt;ParseError&lt;/code&gt; は &lt;code&gt;parse&lt;/code&gt;のような 関数によって直接返していました。しかしバージョン7はエラーごとの 行と列の計算が遅れます。 同様にエラーが発生した場合に表示するために入力から関連する行を取得します。 この情報は通常、パーサが失敗した場合にのみ役立つので、 パースを高速化するために行われます。 古いバージョンのライブラリのもう1つの問題は、 一度に複数のパースエラーを表示する場合（高度な使用法の一例）では、 正しい行を取得するために毎回入力を再びトラバースする必要があることです。&lt;/p&gt;
&lt;p&gt;この問題は&lt;code&gt;ParseErrorBundle&lt;/code&gt;データ型で解決されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb112&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb112-1&#34;&gt;&lt;a href=&#34;#cb112-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | エラーの効率的かつ正確なプリティプリントが可能な、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-2&#34;&gt;&lt;a href=&#34;#cb112-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- &amp;#39;PosState&amp;#39;を備えた &amp;#39;ParseError&amp;#39;の空でないコレクション。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-3&#34;&gt;&lt;a href=&#34;#cb112-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-4&#34;&gt;&lt;a href=&#34;#cb112-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-5&#34;&gt;&lt;a href=&#34;#cb112-5&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; bundleErrors ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb112-6&#34;&gt;&lt;a href=&#34;#cb112-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ パースエラーのオフセットでソートされた &amp;#39;ParseError&amp;#39;のコレクション&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-7&#34;&gt;&lt;a href=&#34;#cb112-7&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; bundlePosState ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PosState&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb112-8&#34;&gt;&lt;a href=&#34;#cb112-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 行と列の計算に使用される状態&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-9&#34;&gt;&lt;a href=&#34;#cb112-9&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサを実行するすべての関数は、正しく設定された &lt;code&gt;bundlePosState&lt;/code&gt;と 単一の&lt;code&gt;ParseError&lt;/code&gt;を内部に持つ&lt;code&gt;ParseErrorBundle&lt;/code&gt;を返します。 &lt;code&gt;ParseErrorBundle&lt;/code&gt;をユーザに表示する前に、 内部の&lt;code&gt;ParseError&lt;/code&gt;のコレクションを拡張できます。 &lt;code&gt;ParseErrors&lt;/code&gt;をそれらのオフセットでソートしておくことはユーザーの責任です。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;SigErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーを通知する方法&#34;&gt;パースエラーを通知する方法&lt;/h2&gt;
&lt;p&gt;パースエラーを通知するためのさまざまな方法について説明しましょう。 最も簡単な関数は&lt;code&gt;fail&lt;/code&gt;です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb113&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb113-1&#34;&gt;&lt;a href=&#34;#cb113-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (&lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;I&amp;#39;m failing, help me!&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-2&#34;&gt;&lt;a href=&#34;#cb113-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-3&#34;&gt;&lt;a href=&#34;#cb113-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-4&#34;&gt;&lt;a href=&#34;#cb113-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;empty line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-5&#34;&gt;&lt;a href=&#34;#cb113-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-6&#34;&gt;&lt;a href=&#34;#cb113-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;I&amp;#39;m&lt;/span&gt; failing, help me&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parsec&lt;/code&gt;のような、より単純なパーサライブラリに精通している 多くの人々にとってはこれで十分です。 しかし、パースエラーをユーザーに表示することだけではなく、 それを分析したり操作したりする必要があるかもしれません。 これが&lt;code&gt;String&lt;/code&gt;があまり便利ではないところです。&lt;/p&gt;
&lt;p&gt;自明なパースエラーは通常 &lt;code&gt;megaparsec&lt;/code&gt; によって生成されますが、 プリミティブ&lt;code&gt;failure&lt;/code&gt;を使って自分自身でそのようなエラーを 知らせることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb114&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb114-1&#34;&gt;&lt;a href=&#34;#cb114-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;failure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb114-2&#34;&gt;&lt;a href=&#34;#cb114-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 予期しないアイテム（ある場合）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb114-3&#34;&gt;&lt;a href=&#34;#cb114-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 予期するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb114-4&#34;&gt;&lt;a href=&#34;#cb114-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb115&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb115-1&#34;&gt;&lt;a href=&#34;#cb115-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unfortunateParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb115-2&#34;&gt;&lt;a href=&#34;#cb115-2&#34;&gt;&lt;/a&gt;unfortunateParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; failure (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EndOfInput&lt;/span&gt;) (Set.fromList es)&lt;/span&gt;
&lt;span id=&#34;cb115-3&#34;&gt;&lt;a href=&#34;#cb115-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb115-4&#34;&gt;&lt;a href=&#34;#cb115-4&#34;&gt;&lt;/a&gt;    es &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (NE.fromList &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (NE.fromList &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb116&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb116-1&#34;&gt;&lt;a href=&#34;#cb116-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; unfortunateParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-2&#34;&gt;&lt;a href=&#34;#cb116-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb116-3&#34;&gt;&lt;a href=&#34;#cb116-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-4&#34;&gt;&lt;a href=&#34;#cb116-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-5&#34;&gt;&lt;a href=&#34;#cb116-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb116-6&#34;&gt;&lt;a href=&#34;#cb116-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb116-7&#34;&gt;&lt;a href=&#34;#cb116-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fail&lt;/code&gt;に基づいたアプローチとは異なり、 簡単なパースエラーはパターンマッチによる検査や変更が容易です。&lt;/p&gt;
&lt;p&gt;ファンシーエラーについては、 プリミティブ&lt;code&gt;fancyFaliure&lt;/code&gt;で対応します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb117&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb117-1&#34;&gt;&lt;a href=&#34;#cb117-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fancyFailure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb117-2&#34;&gt;&lt;a href=&#34;#cb117-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ ファンシーエラーのコンポーネント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb117-3&#34;&gt;&lt;a href=&#34;#cb117-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fancyFailure&lt;/code&gt; を使う際には、直接 &lt;code&gt;fancyFailure&lt;/code&gt; を呼び出すのではなく、 字句解析モジュールにある次のようなヘルパーとして定義するのが 望ましいことがよくあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb118&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb118-1&#34;&gt;&lt;a href=&#34;#cb118-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;incorrectIndent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb118-2&#34;&gt;&lt;a href=&#34;#cb118-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ^ 参照レベルと実際のレベル間の望ましい順序&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-3&#34;&gt;&lt;a href=&#34;#cb118-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 参照インデントレベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-4&#34;&gt;&lt;a href=&#34;#cb118-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 実際のインデントレベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-5&#34;&gt;&lt;a href=&#34;#cb118-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb118-6&#34;&gt;&lt;a href=&#34;#cb118-6&#34;&gt;&lt;/a&gt;incorrectIndent &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; ref actual &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; E.singleton &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-7&#34;&gt;&lt;a href=&#34;#cb118-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; ref actual&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あなたのパーサにカスタムパースエラーコンポーネントを追加する例として、 与えられた&lt;code&gt;Text&lt;/code&gt;の値がキーワードではないことを示す、 特別なパースエラーを定義することを通して見てみましょう。&lt;/p&gt;
&lt;p&gt;まず、サポートしたいシナリオを表現するコンストラクタを使用して データ型を定義する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb119&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb119-1&#34;&gt;&lt;a href=&#34;#cb119-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb119-2&#34;&gt;&lt;a href=&#34;#cb119-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そしてそれをパースエラーで表示する方法を&lt;code&gt;megaparsec&lt;/code&gt;に伝えてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb120&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb120-1&#34;&gt;&lt;a href=&#34;#cb120-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb120-2&#34;&gt;&lt;a href=&#34;#cb120-2&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt; txt) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.unpack txt &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; is not a keyword&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;Parser&lt;/code&gt;型シノニムを更新します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb121&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb121-1&#34;&gt;&lt;a href=&#34;#cb121-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その後、&lt;code&gt;notKeyword&lt;/code&gt;ヘルパーを定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb122&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb122-1&#34;&gt;&lt;a href=&#34;#cb122-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;notKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb122-2&#34;&gt;&lt;a href=&#34;#cb122-2&#34;&gt;&lt;/a&gt;notKeyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; customFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;customFailure&lt;/code&gt;は&lt;code&gt;Text.Megaparsec&lt;/code&gt;モジュールの便利なヘルパーです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb123&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb123-1&#34;&gt;&lt;a href=&#34;#cb123-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customFailure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb123-2&#34;&gt;&lt;a href=&#34;#cb123-2&#34;&gt;&lt;/a&gt;customFailure &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; E.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb124&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb124-1&#34;&gt;&lt;a href=&#34;#cb124-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (notKeyword &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-2&#34;&gt;&lt;a href=&#34;#cb124-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb124-3&#34;&gt;&lt;a href=&#34;#cb124-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-4&#34;&gt;&lt;a href=&#34;#cb124-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-5&#34;&gt;&lt;a href=&#34;#cb124-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb124-6&#34;&gt;&lt;a href=&#34;#cb124-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt; is not a keyword&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;DispErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーの表示&#34;&gt;パースエラーの表示&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ParseErrorBundle&lt;/code&gt;の表示は&lt;code&gt;errorBundlePretty&lt;/code&gt;関数で行われます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb125&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb125-1&#34;&gt;&lt;a href=&#34;#cb125-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;ParseErrorBundle&amp;#39;をプリティプリントします。バンドル内のすべての &amp;#39;ParseError&amp;#39;は、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-2&#34;&gt;&lt;a href=&#34;#cb125-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 入力ストリームに対して単一の効率的なパスを実行することによって、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-3&#34;&gt;&lt;a href=&#34;#cb125-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 対応する問題が起きている行とともに順番にプリティプリントされます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-4&#34;&gt;&lt;a href=&#34;#cb125-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- レンダリングされた &amp;#39;String&amp;#39;は常に改行で終わります。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-5&#34;&gt;&lt;a href=&#34;#cb125-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-6&#34;&gt;&lt;a href=&#34;#cb125-6&#34;&gt;&lt;/a&gt;errorBundlePretty&lt;/span&gt;
&lt;span id=&#34;cb125-7&#34;&gt;&lt;a href=&#34;#cb125-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb125-8&#34;&gt;&lt;a href=&#34;#cb125-8&#34;&gt;&lt;/a&gt;     , &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb125-9&#34;&gt;&lt;a href=&#34;#cb125-9&#34;&gt;&lt;/a&gt;     )&lt;/span&gt;
&lt;span id=&#34;cb125-10&#34;&gt;&lt;a href=&#34;#cb125-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e &lt;span class=&#34;co&#34;&gt;-- ^ 表示するパースエラーバンドル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-11&#34;&gt;&lt;a href=&#34;#cb125-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ バンドルのテキスト表現&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;95％のケースで、あなたはこの1つの関数だけを必要とするでしょう。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ChatchErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行中のパーサでパースエラーをチャッチする&#34;&gt;実行中のパーサでパースエラーをチャッチする&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のもう1つの便利な機能は、 パースエラーを「キャッチ」し、それを何らかの方法で変更してから、 例外のように再びスローすることが可能なことです。 これはプリミティブ &lt;code&gt;observing&lt;/code&gt; によって有効になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb126&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb126-1&#34;&gt;&lt;a href=&#34;#cb126-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | @&amp;#39;observing&amp;#39; p@ はパーサ @p@ の失敗を「観察」することを可能にします.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-2&#34;&gt;&lt;a href=&#34;#cb126-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 実際にはパーサを終了せずに、代わりに &amp;#39;Left&amp;#39;の &amp;#39;ParseError&amp;#39;を取得します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-3&#34;&gt;&lt;a href=&#34;#cb126-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 成功すると、パースされた値はいつものように &amp;#39;Right&amp;#39; で返されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-4&#34;&gt;&lt;a href=&#34;#cb126-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- このプリミティブは、発生したパースエラーを観察することを可能にするだけで、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-5&#34;&gt;&lt;a href=&#34;#cb126-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサ @p@ の動作をバックトラックしたり変更したりすることはありません。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-6&#34;&gt;&lt;a href=&#34;#cb126-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-7&#34;&gt;&lt;a href=&#34;#cb126-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;observing ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb126-8&#34;&gt;&lt;a href=&#34;#cb126-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ The parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-9&#34;&gt;&lt;a href=&#34;#cb126-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは、の典型的な &lt;code&gt;observing&lt;/code&gt; の使い方を示す完全なプログラムです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb127&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb127-1&#34;&gt;&lt;a href=&#34;#cb127-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-2&#34;&gt;&lt;a href=&#34;#cb127-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications  #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-3&#34;&gt;&lt;a href=&#34;#cb127-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-4&#34;&gt;&lt;a href=&#34;#cb127-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-5&#34;&gt;&lt;a href=&#34;#cb127-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-6&#34;&gt;&lt;a href=&#34;#cb127-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-7&#34;&gt;&lt;a href=&#34;#cb127-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt; (intercalate)&lt;/span&gt;
&lt;span id=&#34;cb127-8&#34;&gt;&lt;a href=&#34;#cb127-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-9&#34;&gt;&lt;a href=&#34;#cb127-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-10&#34;&gt;&lt;a href=&#34;#cb127-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-11&#34;&gt;&lt;a href=&#34;#cb127-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-12&#34;&gt;&lt;a href=&#34;#cb127-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-13&#34;&gt;&lt;a href=&#34;#cb127-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-14&#34;&gt;&lt;a href=&#34;#cb127-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-15&#34;&gt;&lt;a href=&#34;#cb127-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-16&#34;&gt;&lt;a href=&#34;#cb127-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-17&#34;&gt;&lt;a href=&#34;#cb127-17&#34;&gt;&lt;/a&gt;    [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- 位置スタック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-18&#34;&gt;&lt;a href=&#34;#cb127-18&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb127-19&#34;&gt;&lt;a href=&#34;#cb127-19&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb127-20&#34;&gt;&lt;a href=&#34;#cb127-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-21&#34;&gt;&lt;a href=&#34;#cb127-21&#34;&gt;&lt;/a&gt;    [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- 位置スタック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-22&#34;&gt;&lt;a href=&#34;#cb127-22&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- Custom をネストさせないように Void になっている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-23&#34;&gt;&lt;a href=&#34;#cb127-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-24&#34;&gt;&lt;a href=&#34;#cb127-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-25&#34;&gt;&lt;a href=&#34;#cb127-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-26&#34;&gt;&lt;a href=&#34;#cb127-26&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; stack us es) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-27&#34;&gt;&lt;a href=&#34;#cb127-27&#34;&gt;&lt;/a&gt;    parseErrorTextPretty (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; us es)&lt;/span&gt;
&lt;span id=&#34;cb127-28&#34;&gt;&lt;a href=&#34;#cb127-28&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; showPosStack stack&lt;/span&gt;
&lt;span id=&#34;cb127-29&#34;&gt;&lt;a href=&#34;#cb127-29&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; stack cs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-30&#34;&gt;&lt;a href=&#34;#cb127-30&#34;&gt;&lt;/a&gt;    parseErrorTextPretty (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; (Set.singleton cs))&lt;/span&gt;
&lt;span id=&#34;cb127-31&#34;&gt;&lt;a href=&#34;#cb127-31&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; showPosStack stack&lt;/span&gt;
&lt;span id=&#34;cb127-32&#34;&gt;&lt;a href=&#34;#cb127-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-33&#34;&gt;&lt;a href=&#34;#cb127-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;showPosStack ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-34&#34;&gt;&lt;a href=&#34;#cb127-34&#34;&gt;&lt;/a&gt;showPosStack &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;in &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-35&#34;&gt;&lt;a href=&#34;#cb127-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-36&#34;&gt;&lt;a href=&#34;#cb127-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-37&#34;&gt;&lt;a href=&#34;#cb127-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-38&#34;&gt;&lt;a href=&#34;#cb127-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inside ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb127-39&#34;&gt;&lt;a href=&#34;#cb127-39&#34;&gt;&lt;/a&gt;inside location p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-40&#34;&gt;&lt;a href=&#34;#cb127-40&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; observing p&lt;/span&gt;
&lt;span id=&#34;cb127-41&#34;&gt;&lt;a href=&#34;#cb127-41&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; r &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-42&#34;&gt;&lt;a href=&#34;#cb127-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; _ us es) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-43&#34;&gt;&lt;a href=&#34;#cb127-43&#34;&gt;&lt;/a&gt;      fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-44&#34;&gt;&lt;a href=&#34;#cb127-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; [location] us es&lt;/span&gt;
&lt;span id=&#34;cb127-45&#34;&gt;&lt;a href=&#34;#cb127-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; _ xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-46&#34;&gt;&lt;a href=&#34;#cb127-46&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; f (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-47&#34;&gt;&lt;a href=&#34;#cb127-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg)&lt;/span&gt;
&lt;span id=&#34;cb127-48&#34;&gt;&lt;a href=&#34;#cb127-48&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-49&#34;&gt;&lt;a href=&#34;#cb127-49&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl)&lt;/span&gt;
&lt;span id=&#34;cb127-50&#34;&gt;&lt;a href=&#34;#cb127-50&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; ps us es)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-51&#34;&gt;&lt;a href=&#34;#cb127-51&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) us es&lt;/span&gt;
&lt;span id=&#34;cb127-52&#34;&gt;&lt;a href=&#34;#cb127-52&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; ps cs)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-53&#34;&gt;&lt;a href=&#34;#cb127-53&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) cs&lt;/span&gt;
&lt;span id=&#34;cb127-54&#34;&gt;&lt;a href=&#34;#cb127-54&#34;&gt;&lt;/a&gt;      fancyFailure (Set.map f xs)&lt;/span&gt;
&lt;span id=&#34;cb127-55&#34;&gt;&lt;a href=&#34;#cb127-55&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb127-56&#34;&gt;&lt;a href=&#34;#cb127-56&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-57&#34;&gt;&lt;a href=&#34;#cb127-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;myParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-58&#34;&gt;&lt;a href=&#34;#cb127-58&#34;&gt;&lt;/a&gt;myParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-59&#34;&gt;&lt;a href=&#34;#cb127-59&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-60&#34;&gt;&lt;a href=&#34;#cb127-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb127-61&#34;&gt;&lt;a href=&#34;#cb127-61&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-62&#34;&gt;&lt;a href=&#34;#cb127-62&#34;&gt;&lt;/a&gt;  parseTest (inside &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; myParser) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaacc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-63&#34;&gt;&lt;a href=&#34;#cb127-63&#34;&gt;&lt;/a&gt;  parseTest (inside &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; inside &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; myParser) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaacc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演習: このプログラムがどのように機能するのか詳細に理解しなさい。&lt;/p&gt;
&lt;p&gt;このプログラムを実行すると、次のように出力されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb128&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb128-1&#34;&gt;&lt;a href=&#34;#cb128-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-2&#34;&gt;&lt;a href=&#34;#cb128-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-3&#34;&gt;&lt;a href=&#34;#cb128-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; aaacc&lt;/span&gt;
&lt;span id=&#34;cb128-4&#34;&gt;&lt;a href=&#34;#cb128-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-5&#34;&gt;&lt;a href=&#34;#cb128-5&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-6&#34;&gt;&lt;a href=&#34;#cb128-6&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-7&#34;&gt;&lt;a href=&#34;#cb128-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; foo&lt;/span&gt;
&lt;span id=&#34;cb128-8&#34;&gt;&lt;a href=&#34;#cb128-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-9&#34;&gt;&lt;a href=&#34;#cb128-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-10&#34;&gt;&lt;a href=&#34;#cb128-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; aaacc&lt;/span&gt;
&lt;span id=&#34;cb128-11&#34;&gt;&lt;a href=&#34;#cb128-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-12&#34;&gt;&lt;a href=&#34;#cb128-12&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-13&#34;&gt;&lt;a href=&#34;#cb128-13&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-14&#34;&gt;&lt;a href=&#34;#cb128-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; foo, &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;したがって、この機能を使用してパースエラーに対する位置ラベルの添付や、 実際にパースエラーが何らかの方法で処理される領域を定義できます。 このイディオムは非常に便利なので、 プリミティブ &lt;code&gt;observing&lt;/code&gt; の観点から構築された &lt;code&gt;region&lt;/code&gt; と呼ばれる非プリミティブヘルパーもあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb129&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb129-1&#34;&gt;&lt;a href=&#34;#cb129-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | 内部のラッパーで発生する &amp;#39;ParseError&amp;#39;の処理方法を指定します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-2&#34;&gt;&lt;a href=&#34;#cb129-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 現在の実装の副作用として、このコンビネータで &amp;#39;errorPos&amp;#39; を変更すると、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-3&#34;&gt;&lt;a href=&#34;#cb129-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 最終的にパーサの状態 &amp;#39;statePos&amp;#39;も変更されま(&amp;#39;statePos&amp;#39; が&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-4&#34;&gt;&lt;a href=&#34;#cb129-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 入力ストリームの実際の位置と同期しなくなるので、それを避けてください。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-5&#34;&gt;&lt;a href=&#34;#cb129-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 直後にパースを終了すれば、おそらく問題ありませんが、注意してください)。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-6&#34;&gt;&lt;a href=&#34;#cb129-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-7&#34;&gt;&lt;a href=&#34;#cb129-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;region ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb129-8&#34;&gt;&lt;a href=&#34;#cb129-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb129-9&#34;&gt;&lt;a href=&#34;#cb129-9&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;ParseError&amp;#39; を処理する方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-10&#34;&gt;&lt;a href=&#34;#cb129-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb129-11&#34;&gt;&lt;a href=&#34;#cb129-11&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ 処理を適用する 「領域」&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-12&#34;&gt;&lt;a href=&#34;#cb129-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb129-13&#34;&gt;&lt;a href=&#34;#cb129-13&#34;&gt;&lt;/a&gt;region f m &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-14&#34;&gt;&lt;a href=&#34;#cb129-14&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; observing m&lt;/span&gt;
&lt;span id=&#34;cb129-15&#34;&gt;&lt;a href=&#34;#cb129-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; r &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-16&#34;&gt;&lt;a href=&#34;#cb129-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-17&#34;&gt;&lt;a href=&#34;#cb129-17&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; f err &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-18&#34;&gt;&lt;a href=&#34;#cb129-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; o us ps &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-19&#34;&gt;&lt;a href=&#34;#cb129-19&#34;&gt;&lt;/a&gt;          updateParserState &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \st &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; st { stateOffset &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; o }&lt;/span&gt;
&lt;span id=&#34;cb129-20&#34;&gt;&lt;a href=&#34;#cb129-20&#34;&gt;&lt;/a&gt;          failure us ps&lt;/span&gt;
&lt;span id=&#34;cb129-21&#34;&gt;&lt;a href=&#34;#cb129-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; o xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-22&#34;&gt;&lt;a href=&#34;#cb129-22&#34;&gt;&lt;/a&gt;          updateParserState &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \st &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; st { stateOffset &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; o }&lt;/span&gt;
&lt;span id=&#34;cb129-23&#34;&gt;&lt;a href=&#34;#cb129-23&#34;&gt;&lt;/a&gt;          fancyFailure xs&lt;/span&gt;
&lt;span id=&#34;cb129-24&#34;&gt;&lt;a href=&#34;#cb129-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演習: 上記のプログラムで &lt;code&gt;region&lt;/code&gt; を使用して &lt;code&gt;inside&lt;/code&gt; 関数を書き換えなさい。&lt;/p&gt;
&lt;p&gt;回答例:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb130&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb130-1&#34;&gt;&lt;a href=&#34;#cb130-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inside&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb130-2&#34;&gt;&lt;a href=&#34;#cb130-2&#34;&gt;&lt;/a&gt;inside&amp;#39; location p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; region (processParseError location) p&lt;/span&gt;
&lt;span id=&#34;cb130-3&#34;&gt;&lt;a href=&#34;#cb130-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-4&#34;&gt;&lt;a href=&#34;#cb130-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;processParseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-5&#34;&gt;&lt;a href=&#34;#cb130-5&#34;&gt;&lt;/a&gt;processParseError location (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; i us es) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-6&#34;&gt;&lt;a href=&#34;#cb130-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-7&#34;&gt;&lt;a href=&#34;#cb130-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; [location] us es&lt;/span&gt;
&lt;span id=&#34;cb130-8&#34;&gt;&lt;a href=&#34;#cb130-8&#34;&gt;&lt;/a&gt;processParseError location (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i xs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-9&#34;&gt;&lt;a href=&#34;#cb130-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Set.map (processErrorFancy location) xs&lt;/span&gt;
&lt;span id=&#34;cb130-10&#34;&gt;&lt;a href=&#34;#cb130-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-11&#34;&gt;&lt;a href=&#34;#cb130-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;processErrorFancy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-12&#34;&gt;&lt;a href=&#34;#cb130-12&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-13&#34;&gt;&lt;a href=&#34;#cb130-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg)&lt;/span&gt;
&lt;span id=&#34;cb130-14&#34;&gt;&lt;a href=&#34;#cb130-14&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-15&#34;&gt;&lt;a href=&#34;#cb130-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl)&lt;/span&gt;
&lt;span id=&#34;cb130-16&#34;&gt;&lt;a href=&#34;#cb130-16&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; ps us es)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-17&#34;&gt;&lt;a href=&#34;#cb130-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) us es&lt;/span&gt;
&lt;span id=&#34;cb130-18&#34;&gt;&lt;a href=&#34;#cb130-18&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; ps cs)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-19&#34;&gt;&lt;a href=&#34;#cb130-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) cs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Testing&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;megaparsec-パーサのテスト&#34;&gt;Megaparsec パーサのテスト&lt;/h2&gt;
&lt;p&gt;パーサのテストは、ほとんどの人が遅かれ早かれ直面する実践的なタスクであり、 それをカバーしなければなりません。 &lt;code&gt;megaparsec&lt;/code&gt; のパーサをテストするための推奨される方法は &lt;a href=&#34;https://hackage.haskell.org/package/hspec-megaparsec&#34;&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt;&lt;/a&gt;パッケージを使うことです。 このパッケージは、&lt;code&gt;hspec&lt;/code&gt; テストフレームワークで動作する &lt;code&gt;shouldParse&lt;/code&gt;、 &lt;code&gt;parseSatisfies&lt;/code&gt; などのユーティリティテスト関数のを追加します。&lt;/p&gt;
&lt;p&gt;次の例から見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb131&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb131-1&#34;&gt;&lt;a href=&#34;#cb131-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-2&#34;&gt;&lt;a href=&#34;#cb131-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-3&#34;&gt;&lt;a href=&#34;#cb131-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-4&#34;&gt;&lt;a href=&#34;#cb131-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-5&#34;&gt;&lt;a href=&#34;#cb131-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-6&#34;&gt;&lt;a href=&#34;#cb131-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb131-7&#34;&gt;&lt;a href=&#34;#cb131-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-8&#34;&gt;&lt;a href=&#34;#cb131-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-9&#34;&gt;&lt;a href=&#34;#cb131-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-10&#34;&gt;&lt;a href=&#34;#cb131-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-11&#34;&gt;&lt;a href=&#34;#cb131-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-12&#34;&gt;&lt;a href=&#34;#cb131-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-13&#34;&gt;&lt;a href=&#34;#cb131-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-14&#34;&gt;&lt;a href=&#34;#cb131-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-15&#34;&gt;&lt;a href=&#34;#cb131-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;myParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-16&#34;&gt;&lt;a href=&#34;#cb131-16&#34;&gt;&lt;/a&gt;myParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb131-17&#34;&gt;&lt;a href=&#34;#cb131-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-18&#34;&gt;&lt;a href=&#34;#cb131-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb131-19&#34;&gt;&lt;a href=&#34;#cb131-19&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hspec &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-20&#34;&gt;&lt;a href=&#34;#cb131-20&#34;&gt;&lt;/a&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;myParser&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-21&#34;&gt;&lt;a href=&#34;#cb131-21&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;returns correct result&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-22&#34;&gt;&lt;a href=&#34;#cb131-22&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldParse`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-23&#34;&gt;&lt;a href=&#34;#cb131-23&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;result of parsing satisfies what it should&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb131-24&#34;&gt;&lt;a href=&#34;#cb131-24&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`parseSatisfies`&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;shouldParse&lt;/code&gt; は、パース結果 &lt;code&gt;Either（ParseErrorBundle s e）a&lt;/code&gt; と比較する型 &lt;code&gt;a&lt;/code&gt; の値を引数として受け取ります。 おそらく最も一般的なヘルパーです。 &lt;code&gt;parseSatisfies&lt;/code&gt; は非常に似ていますが、期待される結果と等しいかどうかを比較する代わりに、任意の述語を適用することによって結果をチェックすることができます。&lt;/p&gt;
&lt;p&gt;その他の単純なテスト関数は、 &lt;code&gt;shouldSucceedOn&lt;/code&gt; と &lt;code&gt;shouldFailOn&lt;/code&gt; です（これらはめったに使われません）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb132&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb132-1&#34;&gt;&lt;a href=&#34;#cb132-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;should parse &amp;#39;a&amp;#39;s all right&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-2&#34;&gt;&lt;a href=&#34;#cb132-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldSucceedOn`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-3&#34;&gt;&lt;a href=&#34;#cb132-3&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;should fail on &amp;#39;b&amp;#39;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-4&#34;&gt;&lt;a href=&#34;#cb132-4&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailOn`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; で、パーサが生み出すパースエラーを詳細にテストしたいです。 パースエラーをテストするには &lt;code&gt;shouldFailWith&lt;/code&gt; があります。 これは次のように使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb133&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb133-1&#34;&gt;&lt;a href=&#34;#cb133-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails on &amp;#39;b&amp;#39;s producing correct error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-2&#34;&gt;&lt;a href=&#34;#cb133-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailWith`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-3&#34;&gt;&lt;a href=&#34;#cb133-3&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-4&#34;&gt;&lt;a href=&#34;#cb133-4&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-5&#34;&gt;&lt;a href=&#34;#cb133-5&#34;&gt;&lt;/a&gt;          (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; [])))&lt;/span&gt;
&lt;span id=&#34;cb133-6&#34;&gt;&lt;a href=&#34;#cb133-6&#34;&gt;&lt;/a&gt;          (Set.singleton (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; [])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;TrivialError&lt;/code&gt; を書き出すのは面倒です。 &lt;code&gt;ParseError&lt;/code&gt; の定義には、&lt;code&gt;Set&lt;/code&gt; や &lt;code&gt;NonEmpty&lt;/code&gt; のような 「不便な」型が含まれています。これらは、 今見たとおり直接入力するのには便利ではありません。 幸い、&lt;code&gt;Test.Hspec.Megaparsec&lt;/code&gt; は、 &lt;code&gt;ParserErrors&lt;/code&gt;をより簡単に構築するためのAPIを提供する &lt;code&gt;Text.Megaparsec.Error.Builder&lt;/code&gt; モジュールも再エクスポートします。 代わりに &lt;code&gt;err&lt;/code&gt; ヘルパーを使用しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb134&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb134-1&#34;&gt;&lt;a href=&#34;#cb134-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails on &amp;#39;b&amp;#39;s producing correct error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-2&#34;&gt;&lt;a href=&#34;#cb134-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailWith`&lt;/span&gt; err &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; (utok &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; etok &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;err&lt;/code&gt; の最初の引数は、パースエラーのオフセット（エラーが発生する前に消費されたトークンの数）です。今回はそれは単に0です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;utok&lt;/code&gt; は「期待しないトークン」を表し、同様に &lt;code&gt;etok&lt;/code&gt; は「期待するトークン」を意味します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;演習: ファンシーパースエラーを構築するために、&lt;code&gt;errFancy&lt;/code&gt; と呼ばれる同様のヘルパーがありますので、それをよく理解してください。&lt;/p&gt;
&lt;p&gt;最後に、&lt;code&gt;failsLeaving&lt;/code&gt; と &lt;code&gt;succeedsLeaving&lt;/code&gt; を使用して、 パース後に入力のどの部分が未消費のままであるかをテストすることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb135&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb135-1&#34;&gt;&lt;a href=&#34;#cb135-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;consumes all &amp;#39;a&amp;#39;s but does not touch &amp;#39;b&amp;#39;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-2&#34;&gt;&lt;a href=&#34;#cb135-2&#34;&gt;&lt;/a&gt;      runParser&amp;#39; myParser (initialState &lt;span class=&#34;st&#34;&gt;&amp;quot;aaabbb&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`succeedsLeaving`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-3&#34;&gt;&lt;a href=&#34;#cb135-3&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails without consuming anything&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-4&#34;&gt;&lt;a href=&#34;#cb135-4&#34;&gt;&lt;/a&gt;      runParser&amp;#39; myParser (initialState &lt;span class=&#34;st&#34;&gt;&amp;quot;bbbccc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`failsLeaving`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbbccc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらは、パーサのカスタム初期状態を受け取り、 その最終状態を返す &lt;code&gt;runParser&#39;&lt;/code&gt; または &lt;code&gt;runParserT&#39;&lt;/code&gt; と共に 使用する必要があります（これにより、 パース後に入力ストリームの残りをチェックすることができます）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb136&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb136-1&#34;&gt;&lt;a href=&#34;#cb136-1&#34;&gt;&lt;/a&gt;runParser&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb136-2&#34;&gt;&lt;a href=&#34;#cb136-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a      &lt;span class=&#34;co&#34;&gt;-- ^ Parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-3&#34;&gt;&lt;a href=&#34;#cb136-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s           &lt;span class=&#34;co&#34;&gt;-- ^ Initial state&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-4&#34;&gt;&lt;a href=&#34;#cb136-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;
&lt;span id=&#34;cb136-5&#34;&gt;&lt;a href=&#34;#cb136-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-6&#34;&gt;&lt;a href=&#34;#cb136-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runParserT&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m&lt;/span&gt;
&lt;span id=&#34;cb136-7&#34;&gt;&lt;a href=&#34;#cb136-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ Parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-8&#34;&gt;&lt;a href=&#34;#cb136-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s           &lt;span class=&#34;co&#34;&gt;-- ^ Initial state&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-9&#34;&gt;&lt;a href=&#34;#cb136-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;initialState&lt;/code&gt; 関数は入力ストリームを受け取り、 その入力ストリームとデフォルト値で埋められた レコードフィールドの初期状態を返します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; を使用するためのその他のヒントは次のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/tree/master/megaparsec-tests&#34;&gt;Megaparsec自身のテスト&lt;/a&gt; はhspec-megaparsecを使って書かれています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; 自体に付属している&lt;a href=&#34;https://github.com/mrkkrp/hspec-megaparsec/blob/master/tests/Main.hs&#34;&gt;トイテストスイート&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;CustomInput&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;カスタム入力ストリームの操作&#34;&gt;カスタム入力ストリームの操作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、 &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスである入力をパースできます。 これは、&lt;code&gt;alex&lt;/code&gt;などの字句解析ツールと組み合わせて使用できることを 意味します。&lt;/p&gt;
&lt;p&gt;主題から離れないようにするため、 &lt;code&gt;alex&lt;/code&gt; がどのようにしてトークンのストリーム生成するのかは説明しません。 また、次の形式を想定します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb137&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb137-1&#34;&gt;&lt;a href=&#34;#cb137-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE LambdaCase        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-2&#34;&gt;&lt;a href=&#34;#cb137-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-3&#34;&gt;&lt;a href=&#34;#cb137-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-4&#34;&gt;&lt;a href=&#34;#cb137-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-5&#34;&gt;&lt;a href=&#34;#cb137-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-6&#34;&gt;&lt;a href=&#34;#cb137-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-7&#34;&gt;&lt;a href=&#34;#cb137-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.NonEmpty&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; (..))&lt;/span&gt;
&lt;span id=&#34;cb137-8&#34;&gt;&lt;a href=&#34;#cb137-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-9&#34;&gt;&lt;a href=&#34;#cb137-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-10&#34;&gt;&lt;a href=&#34;#cb137-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-11&#34;&gt;&lt;a href=&#34;#cb137-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DL&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-12&#34;&gt;&lt;a href=&#34;#cb137-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.NonEmpty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NE&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-13&#34;&gt;&lt;a href=&#34;#cb137-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt;           &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-14&#34;&gt;&lt;a href=&#34;#cb137-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-15&#34;&gt;&lt;a href=&#34;#cb137-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-16&#34;&gt;&lt;a href=&#34;#cb137-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-17&#34;&gt;&lt;a href=&#34;#cb137-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-18&#34;&gt;&lt;a href=&#34;#cb137-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-19&#34;&gt;&lt;a href=&#34;#cb137-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-20&#34;&gt;&lt;a href=&#34;#cb137-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OpenParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-21&#34;&gt;&lt;a href=&#34;#cb137-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CloseParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-22&#34;&gt;&lt;a href=&#34;#cb137-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パースエラーを報告するために、 トークンの開始位置と終了位置を知る方法が必要なので、 &lt;code&gt;WithPos&lt;/code&gt; を追加しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb138&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb138-1&#34;&gt;&lt;a href=&#34;#cb138-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-2&#34;&gt;&lt;a href=&#34;#cb138-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; startPos ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-3&#34;&gt;&lt;a href=&#34;#cb138-3&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; endPos   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-4&#34;&gt;&lt;a href=&#34;#cb138-4&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; tokenVal ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb138-5&#34;&gt;&lt;a href=&#34;#cb138-5&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでストリームのデータ型ができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb139&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb139-1&#34;&gt;&lt;a href=&#34;#cb139-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb139-2&#34;&gt;&lt;a href=&#34;#cb139-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unMyStream ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb139-3&#34;&gt;&lt;a href=&#34;#cb139-3&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;MyStream&lt;/code&gt; を &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスにする必要があります。 関連型関数 &lt;code&gt;Token&lt;/code&gt; と &lt;code&gt;Tokens&lt;/code&gt; を定義したいので、 &lt;code&gt;TypeFamilies&lt;/code&gt; の言語拡張が必要です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb140&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb140-1&#34;&gt;&lt;a href=&#34;#cb140-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb140-2&#34;&gt;&lt;a href=&#34;#cb140-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb140-3&#34;&gt;&lt;a href=&#34;#cb140-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb140-4&#34;&gt;&lt;a href=&#34;#cb140-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- …&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt; は &lt;code&gt;Text.Megaparsec.Stream&lt;/code&gt; モジュールに 詳しいドキュメントがあります。 足りないメソッドを定義していきましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb141&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb141-1&#34;&gt;&lt;a href=&#34;#cb141-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- …&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-2&#34;&gt;&lt;a href=&#34;#cb141-2&#34;&gt;&lt;/a&gt;  tokenToChunk &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [x]&lt;/span&gt;
&lt;span id=&#34;cb141-3&#34;&gt;&lt;a href=&#34;#cb141-3&#34;&gt;&lt;/a&gt;  tokensToChunk &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs&lt;/span&gt;
&lt;span id=&#34;cb141-4&#34;&gt;&lt;a href=&#34;#cb141-4&#34;&gt;&lt;/a&gt;  chunkToTokens &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-5&#34;&gt;&lt;a href=&#34;#cb141-5&#34;&gt;&lt;/a&gt;  chunkLength &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-6&#34;&gt;&lt;a href=&#34;#cb141-6&#34;&gt;&lt;/a&gt;  chunkEmpty &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-7&#34;&gt;&lt;a href=&#34;#cb141-7&#34;&gt;&lt;/a&gt;  take1_ (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; []) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-8&#34;&gt;&lt;a href=&#34;#cb141-8&#34;&gt;&lt;/a&gt;  take1_ (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; (t&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ts)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (t, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; ts)&lt;/span&gt;
&lt;span id=&#34;cb141-9&#34;&gt;&lt;a href=&#34;#cb141-9&#34;&gt;&lt;/a&gt;  takeN_ n (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb141-10&#34;&gt;&lt;a href=&#34;#cb141-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ([], &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb141-11&#34;&gt;&lt;a href=&#34;#cb141-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; s    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-12&#34;&gt;&lt;a href=&#34;#cb141-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-13&#34;&gt;&lt;a href=&#34;#cb141-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x, s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;splitAt&lt;/span&gt; n s&lt;/span&gt;
&lt;span id=&#34;cb141-14&#34;&gt;&lt;a href=&#34;#cb141-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb141-15&#34;&gt;&lt;a href=&#34;#cb141-15&#34;&gt;&lt;/a&gt;  takeWhile_ f (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-16&#34;&gt;&lt;a href=&#34;#cb141-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x, s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; DL.span f s&lt;/span&gt;
&lt;span id=&#34;cb141-17&#34;&gt;&lt;a href=&#34;#cb141-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb141-18&#34;&gt;&lt;a href=&#34;#cb141-18&#34;&gt;&lt;/a&gt;  showTokens &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; DL.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-19&#34;&gt;&lt;a href=&#34;#cb141-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; NE.toList&lt;/span&gt;
&lt;span id=&#34;cb141-20&#34;&gt;&lt;a href=&#34;#cb141-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; (showMyToken &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; tokenVal)&lt;/span&gt;
&lt;span id=&#34;cb141-21&#34;&gt;&lt;a href=&#34;#cb141-21&#34;&gt;&lt;/a&gt;  reachOffset o pst&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;PosState&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-22&#34;&gt;&lt;a href=&#34;#cb141-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (o &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; pstateOffset) (unMyStream pstateInput) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-23&#34;&gt;&lt;a href=&#34;#cb141-23&#34;&gt;&lt;/a&gt;      [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-24&#34;&gt;&lt;a href=&#34;#cb141-24&#34;&gt;&lt;/a&gt;        ( pstateSourcePos&lt;/span&gt;
&lt;span id=&#34;cb141-25&#34;&gt;&lt;a href=&#34;#cb141-25&#34;&gt;&lt;/a&gt;        , &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;missing input&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-26&#34;&gt;&lt;a href=&#34;#cb141-26&#34;&gt;&lt;/a&gt;        , pst { pstateInput &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; [] }&lt;/span&gt;
&lt;span id=&#34;cb141-27&#34;&gt;&lt;a href=&#34;#cb141-27&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb141-28&#34;&gt;&lt;a href=&#34;#cb141-28&#34;&gt;&lt;/a&gt;      (x&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-29&#34;&gt;&lt;a href=&#34;#cb141-29&#34;&gt;&lt;/a&gt;        ( startPos x&lt;/span&gt;
&lt;span id=&#34;cb141-30&#34;&gt;&lt;a href=&#34;#cb141-30&#34;&gt;&lt;/a&gt;        , &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;missing input&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-31&#34;&gt;&lt;a href=&#34;#cb141-31&#34;&gt;&lt;/a&gt;        , pst { pstateInput &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; (x&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;xs) }&lt;/span&gt;
&lt;span id=&#34;cb141-32&#34;&gt;&lt;a href=&#34;#cb141-32&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb141-33&#34;&gt;&lt;a href=&#34;#cb141-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-34&#34;&gt;&lt;a href=&#34;#cb141-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;showMyToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-35&#34;&gt;&lt;a href=&#34;#cb141-35&#34;&gt;&lt;/a&gt;showMyToken &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-36&#34;&gt;&lt;a href=&#34;#cb141-36&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; n)    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb141-37&#34;&gt;&lt;a href=&#34;#cb141-37&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-38&#34;&gt;&lt;a href=&#34;#cb141-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-39&#34;&gt;&lt;a href=&#34;#cb141-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-40&#34;&gt;&lt;a href=&#34;#cb141-40&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;OpenParen&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-41&#34;&gt;&lt;a href=&#34;#cb141-41&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;CloseParen&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt; 型クラスに関する詳しい参考資料 (そしてなぜこのようになっているのか)は &lt;a href=&#34;https://markkarpov.com/post/megaparsec-more-speed-more-power.html&#34;&gt;このブログ記事&lt;/a&gt; に書いてあります。 &lt;code&gt;reachOffset&lt;/code&gt; 関数では、元の入力ストリームが不足しているため、 問題のある行を実際に表示することはできません。 これは解決できますが、解決策はこの記事の範囲外です。&lt;/p&gt;
&lt;p&gt;これで &lt;code&gt;Parser&lt;/code&gt; 型が定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb142&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb142-1&#34;&gt;&lt;a href=&#34;#cb142-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のステップは、 &lt;code&gt;token&lt;/code&gt; と (意味があるなら)&lt;code&gt;tokens&lt;/code&gt; のプリミティブを使って、 基本的なパーサを定義することです。 そのまま使用できるストリームには、 &lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; および &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; モジュールが ありますが、カスタムトークンを使用する場合はカスタムヘルパーが必要です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb143&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb143-1&#34;&gt;&lt;a href=&#34;#cb143-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;liftMyToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-2&#34;&gt;&lt;a href=&#34;#cb143-2&#34;&gt;&lt;/a&gt;liftMyToken myToken &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; pos pos myToken&lt;/span&gt;
&lt;span id=&#34;cb143-3&#34;&gt;&lt;a href=&#34;#cb143-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-4&#34;&gt;&lt;a href=&#34;#cb143-4&#34;&gt;&lt;/a&gt;    pos &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; initialPos &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-5&#34;&gt;&lt;a href=&#34;#cb143-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-6&#34;&gt;&lt;a href=&#34;#cb143-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-7&#34;&gt;&lt;a href=&#34;#cb143-7&#34;&gt;&lt;/a&gt;pToken c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token test (Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; nes &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; liftMyToken &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb143-8&#34;&gt;&lt;a href=&#34;#cb143-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-9&#34;&gt;&lt;a href=&#34;#cb143-9&#34;&gt;&lt;/a&gt;    test wpos&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; _ _ x) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-10&#34;&gt;&lt;a href=&#34;#cb143-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb143-11&#34;&gt;&lt;a href=&#34;#cb143-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb143-12&#34;&gt;&lt;a href=&#34;#cb143-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-13&#34;&gt;&lt;a href=&#34;#cb143-13&#34;&gt;&lt;/a&gt;    nes x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb143-14&#34;&gt;&lt;a href=&#34;#cb143-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-15&#34;&gt;&lt;a href=&#34;#cb143-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pInt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-16&#34;&gt;&lt;a href=&#34;#cb143-16&#34;&gt;&lt;/a&gt;pInt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token test Set.empty &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-17&#34;&gt;&lt;a href=&#34;#cb143-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-18&#34;&gt;&lt;a href=&#34;#cb143-18&#34;&gt;&lt;/a&gt;    test (&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; _ _ (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; n)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb143-19&#34;&gt;&lt;a href=&#34;#cb143-19&#34;&gt;&lt;/a&gt;    test _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、足し算をパースするテストパーサを用意しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb144&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb144-1&#34;&gt;&lt;a href=&#34;#cb144-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSum ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb144-2&#34;&gt;&lt;a href=&#34;#cb144-2&#34;&gt;&lt;/a&gt;pSum &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-3&#34;&gt;&lt;a href=&#34;#cb144-3&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pInt&lt;/span&gt;
&lt;span id=&#34;cb144-4&#34;&gt;&lt;a href=&#34;#cb144-4&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pToken &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-5&#34;&gt;&lt;a href=&#34;#cb144-5&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pInt&lt;/span&gt;
&lt;span id=&#34;cb144-6&#34;&gt;&lt;a href=&#34;#cb144-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a, b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入力例は次のようにします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb145&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb145-1&#34;&gt;&lt;a href=&#34;#cb145-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;exampleStream ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-2&#34;&gt;&lt;a href=&#34;#cb145-2&#34;&gt;&lt;/a&gt;exampleStream &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-3&#34;&gt;&lt;a href=&#34;#cb145-3&#34;&gt;&lt;/a&gt;  [ at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb145-4&#34;&gt;&lt;a href=&#34;#cb145-4&#34;&gt;&lt;/a&gt;  , at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-5&#34;&gt;&lt;a href=&#34;#cb145-5&#34;&gt;&lt;/a&gt;  , at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb145-6&#34;&gt;&lt;a href=&#34;#cb145-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-7&#34;&gt;&lt;a href=&#34;#cb145-7&#34;&gt;&lt;/a&gt;    at  l c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; (at&amp;#39; l c) (at&amp;#39; l (c &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb145-8&#34;&gt;&lt;a href=&#34;#cb145-8&#34;&gt;&lt;/a&gt;    at&amp;#39; l c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (mkPos l) (mkPos c)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb146&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb146-1&#34;&gt;&lt;a href=&#34;#cb146-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pSum &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;ex&#34;&gt;exampleStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb146-2&#34;&gt;&lt;a href=&#34;#cb146-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;5&lt;/span&gt;,6&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行(1)の &lt;code&gt;Plus&lt;/code&gt; を &lt;code&gt;Div&lt;/code&gt; に変更すると、正しいパースエラーが発生します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb147&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb147-1&#34;&gt;&lt;a href=&#34;#cb147-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pSum &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;ex&#34;&gt;exampleStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-2&#34;&gt;&lt;a href=&#34;#cb147-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb147-3&#34;&gt;&lt;a href=&#34;#cb147-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-4&#34;&gt;&lt;a href=&#34;#cb147-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;missing&lt;/span&gt; input&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-5&#34;&gt;&lt;a href=&#34;#cb147-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb147-6&#34;&gt;&lt;a href=&#34;#cb147-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; /&lt;/span&gt;
&lt;span id=&#34;cb147-7&#34;&gt;&lt;a href=&#34;#cb147-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言い換えると、カスタムストリームのパースが可能な 十分に機能するパーサができました。&lt;/p&gt;
&lt;h2 id=&#34;演習の回答例puri-を完成させる&#34;&gt;演習の回答例(&lt;code&gt;pUri&lt;/code&gt; を完成させる)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb148&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb148-1&#34;&gt;&lt;a href=&#34;#cb148-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-2&#34;&gt;&lt;a href=&#34;#cb148-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-3&#34;&gt;&lt;a href=&#34;#cb148-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-4&#34;&gt;&lt;a href=&#34;#cb148-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-5&#34;&gt;&lt;a href=&#34;#cb148-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-6&#34;&gt;&lt;a href=&#34;#cb148-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (some,many)&lt;/span&gt;
&lt;span id=&#34;cb148-7&#34;&gt;&lt;a href=&#34;#cb148-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-8&#34;&gt;&lt;a href=&#34;#cb148-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-9&#34;&gt;&lt;a href=&#34;#cb148-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-10&#34;&gt;&lt;a href=&#34;#cb148-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-11&#34;&gt;&lt;a href=&#34;#cb148-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-12&#34;&gt;&lt;a href=&#34;#cb148-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-13&#34;&gt;&lt;a href=&#34;#cb148-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-14&#34;&gt;&lt;a href=&#34;#cb148-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-15&#34;&gt;&lt;a href=&#34;#cb148-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-16&#34;&gt;&lt;a href=&#34;#cb148-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-17&#34;&gt;&lt;a href=&#34;#cb148-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-18&#34;&gt;&lt;a href=&#34;#cb148-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-19&#34;&gt;&lt;a href=&#34;#cb148-19&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-20&#34;&gt;&lt;a href=&#34;#cb148-20&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriAuthority ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-21&#34;&gt;&lt;a href=&#34;#cb148-21&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriPath      ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-22&#34;&gt;&lt;a href=&#34;#cb148-22&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriQuery     ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-23&#34;&gt;&lt;a href=&#34;#cb148-23&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriFlagment  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-24&#34;&gt;&lt;a href=&#34;#cb148-24&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-25&#34;&gt;&lt;a href=&#34;#cb148-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-26&#34;&gt;&lt;a href=&#34;#cb148-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-27&#34;&gt;&lt;a href=&#34;#cb148-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-28&#34;&gt;&lt;a href=&#34;#cb148-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-29&#34;&gt;&lt;a href=&#34;#cb148-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-30&#34;&gt;&lt;a href=&#34;#cb148-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-31&#34;&gt;&lt;a href=&#34;#cb148-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-32&#34;&gt;&lt;a href=&#34;#cb148-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-33&#34;&gt;&lt;a href=&#34;#cb148-33&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-34&#34;&gt;&lt;a href=&#34;#cb148-34&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-35&#34;&gt;&lt;a href=&#34;#cb148-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-36&#34;&gt;&lt;a href=&#34;#cb148-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-37&#34;&gt;&lt;a href=&#34;#cb148-37&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; authUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (user, password)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-38&#34;&gt;&lt;a href=&#34;#cb148-38&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authHost ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-39&#34;&gt;&lt;a href=&#34;#cb148-39&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authPort ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-40&#34;&gt;&lt;a href=&#34;#cb148-40&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-41&#34;&gt;&lt;a href=&#34;#cb148-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-42&#34;&gt;&lt;a href=&#34;#cb148-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-43&#34;&gt;&lt;a href=&#34;#cb148-43&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb148-44&#34;&gt;&lt;a href=&#34;#cb148-44&#34;&gt;&lt;/a&gt;  [ &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-45&#34;&gt;&lt;a href=&#34;#cb148-45&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-46&#34;&gt;&lt;a href=&#34;#cb148-46&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-47&#34;&gt;&lt;a href=&#34;#cb148-47&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-48&#34;&gt;&lt;a href=&#34;#cb148-48&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-49&#34;&gt;&lt;a href=&#34;#cb148-49&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-50&#34;&gt;&lt;a href=&#34;#cb148-50&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb148-51&#34;&gt;&lt;a href=&#34;#cb148-51&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-52&#34;&gt;&lt;a href=&#34;#cb148-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;alternatives ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-53&#34;&gt;&lt;a href=&#34;#cb148-53&#34;&gt;&lt;/a&gt;alternatives &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; try foo &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb148-54&#34;&gt;&lt;a href=&#34;#cb148-54&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-55&#34;&gt;&lt;a href=&#34;#cb148-55&#34;&gt;&lt;/a&gt;    foo &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-56&#34;&gt;&lt;a href=&#34;#cb148-56&#34;&gt;&lt;/a&gt;    bar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-57&#34;&gt;&lt;a href=&#34;#cb148-57&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-58&#34;&gt;&lt;a href=&#34;#cb148-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-59&#34;&gt;&lt;a href=&#34;#cb148-59&#34;&gt;&lt;/a&gt;pPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb148-60&#34;&gt;&lt;a href=&#34;#cb148-60&#34;&gt;&lt;/a&gt;  [ pPathAbempty&lt;/span&gt;
&lt;span id=&#34;cb148-61&#34;&gt;&lt;a href=&#34;#cb148-61&#34;&gt;&lt;/a&gt;  , pPathAbsolute&lt;/span&gt;
&lt;span id=&#34;cb148-62&#34;&gt;&lt;a href=&#34;#cb148-62&#34;&gt;&lt;/a&gt;  , pPathNoScheme&lt;/span&gt;
&lt;span id=&#34;cb148-63&#34;&gt;&lt;a href=&#34;#cb148-63&#34;&gt;&lt;/a&gt;  , pPathRootless&lt;/span&gt;
&lt;span id=&#34;cb148-64&#34;&gt;&lt;a href=&#34;#cb148-64&#34;&gt;&lt;/a&gt;  , pPathEmpty&lt;/span&gt;
&lt;span id=&#34;cb148-65&#34;&gt;&lt;a href=&#34;#cb148-65&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb148-66&#34;&gt;&lt;a href=&#34;#cb148-66&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-67&#34;&gt;&lt;a href=&#34;#cb148-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathAbempty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-68&#34;&gt;&lt;a href=&#34;#cb148-68&#34;&gt;&lt;/a&gt;pPathAbempty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb148-69&#34;&gt;&lt;a href=&#34;#cb148-69&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-70&#34;&gt;&lt;a href=&#34;#cb148-70&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathAbsolute ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-71&#34;&gt;&lt;a href=&#34;#cb148-71&#34;&gt;&lt;/a&gt;pPathAbsolute &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-72&#34;&gt;&lt;a href=&#34;#cb148-72&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-73&#34;&gt;&lt;a href=&#34;#cb148-73&#34;&gt;&lt;/a&gt;  option [] &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-74&#34;&gt;&lt;a href=&#34;#cb148-74&#34;&gt;&lt;/a&gt;    seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNz&lt;/span&gt;
&lt;span id=&#34;cb148-75&#34;&gt;&lt;a href=&#34;#cb148-75&#34;&gt;&lt;/a&gt;    segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt;  many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb148-76&#34;&gt;&lt;a href=&#34;#cb148-76&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb148-77&#34;&gt;&lt;a href=&#34;#cb148-77&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-78&#34;&gt;&lt;a href=&#34;#cb148-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathNoScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-79&#34;&gt;&lt;a href=&#34;#cb148-79&#34;&gt;&lt;/a&gt;pPathNoScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-80&#34;&gt;&lt;a href=&#34;#cb148-80&#34;&gt;&lt;/a&gt;  seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNzNc&lt;/span&gt;
&lt;span id=&#34;cb148-81&#34;&gt;&lt;a href=&#34;#cb148-81&#34;&gt;&lt;/a&gt;  segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb148-82&#34;&gt;&lt;a href=&#34;#cb148-82&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb148-83&#34;&gt;&lt;a href=&#34;#cb148-83&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-84&#34;&gt;&lt;a href=&#34;#cb148-84&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathRootless ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-85&#34;&gt;&lt;a href=&#34;#cb148-85&#34;&gt;&lt;/a&gt;pPathRootless &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-86&#34;&gt;&lt;a href=&#34;#cb148-86&#34;&gt;&lt;/a&gt;  seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNz&lt;/span&gt;
&lt;span id=&#34;cb148-87&#34;&gt;&lt;a href=&#34;#cb148-87&#34;&gt;&lt;/a&gt;  segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb148-88&#34;&gt;&lt;a href=&#34;#cb148-88&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb148-89&#34;&gt;&lt;a href=&#34;#cb148-89&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-90&#34;&gt;&lt;a href=&#34;#cb148-90&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathEmpty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb148-91&#34;&gt;&lt;a href=&#34;#cb148-91&#34;&gt;&lt;/a&gt;pPathEmpty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb148-92&#34;&gt;&lt;a href=&#34;#cb148-92&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-93&#34;&gt;&lt;a href=&#34;#cb148-93&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegment ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-94&#34;&gt;&lt;a href=&#34;#cb148-94&#34;&gt;&lt;/a&gt;pSegment &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many pPchar&lt;/span&gt;
&lt;span id=&#34;cb148-95&#34;&gt;&lt;a href=&#34;#cb148-95&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-96&#34;&gt;&lt;a href=&#34;#cb148-96&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegmentNz ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-97&#34;&gt;&lt;a href=&#34;#cb148-97&#34;&gt;&lt;/a&gt;pSegmentNz &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some pPchar&lt;/span&gt;
&lt;span id=&#34;cb148-98&#34;&gt;&lt;a href=&#34;#cb148-98&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-99&#34;&gt;&lt;a href=&#34;#cb148-99&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegmentNzNc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-100&#34;&gt;&lt;a href=&#34;#cb148-100&#34;&gt;&lt;/a&gt;pSegmentNzNc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (pUnreserved &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pPctEncoded &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pSubDelims &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-101&#34;&gt;&lt;a href=&#34;#cb148-101&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-102&#34;&gt;&lt;a href=&#34;#cb148-102&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPchar ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-103&#34;&gt;&lt;a href=&#34;#cb148-103&#34;&gt;&lt;/a&gt;pPchar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pUnreserved &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pPctEncoded &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pSubDelims &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-104&#34;&gt;&lt;a href=&#34;#cb148-104&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-105&#34;&gt;&lt;a href=&#34;#cb148-105&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUnreserved ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-106&#34;&gt;&lt;a href=&#34;#cb148-106&#34;&gt;&lt;/a&gt;pUnreserved &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-107&#34;&gt;&lt;a href=&#34;#cb148-107&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-108&#34;&gt;&lt;a href=&#34;#cb148-108&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPctEncoded ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-109&#34;&gt;&lt;a href=&#34;#cb148-109&#34;&gt;&lt;/a&gt;pPctEncoded &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-110&#34;&gt;&lt;a href=&#34;#cb148-110&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-111&#34;&gt;&lt;a href=&#34;#cb148-111&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; hexDigitChar&lt;/span&gt;
&lt;span id=&#34;cb148-112&#34;&gt;&lt;a href=&#34;#cb148-112&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; hexDigitChar&lt;/span&gt;
&lt;span id=&#34;cb148-113&#34;&gt;&lt;a href=&#34;#cb148-113&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;digitToInt&lt;/span&gt; a)&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;digitToInt&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb148-114&#34;&gt;&lt;a href=&#34;#cb148-114&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-115&#34;&gt;&lt;a href=&#34;#cb148-115&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSubDelims ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-116&#34;&gt;&lt;a href=&#34;#cb148-116&#34;&gt;&lt;/a&gt;pSubDelims &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; char &lt;span class=&#34;st&#34;&gt;&amp;quot;!$&amp;amp;&amp;#39;()*+,;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-117&#34;&gt;&lt;a href=&#34;#cb148-117&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-118&#34;&gt;&lt;a href=&#34;#cb148-118&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-119&#34;&gt;&lt;a href=&#34;#cb148-119&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-120&#34;&gt;&lt;a href=&#34;#cb148-120&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-121&#34;&gt;&lt;a href=&#34;#cb148-121&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-122&#34;&gt;&lt;a href=&#34;#cb148-122&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-123&#34;&gt;&lt;a href=&#34;#cb148-123&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-124&#34;&gt;&lt;a href=&#34;#cb148-124&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-125&#34;&gt;&lt;a href=&#34;#cb148-125&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-126&#34;&gt;&lt;a href=&#34;#cb148-126&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-127&#34;&gt;&lt;a href=&#34;#cb148-127&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-128&#34;&gt;&lt;a href=&#34;#cb148-128&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-129&#34;&gt;&lt;a href=&#34;#cb148-129&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb148-130&#34;&gt;&lt;a href=&#34;#cb148-130&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb148-131&#34;&gt;&lt;a href=&#34;#cb148-131&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; label &lt;span class=&#34;st&#34;&gt;&amp;quot;port number&amp;quot;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb148-132&#34;&gt;&lt;a href=&#34;#cb148-132&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb148-133&#34;&gt;&lt;a href=&#34;#cb148-133&#34;&gt;&lt;/a&gt;  uriPath &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pPath&lt;/span&gt;
&lt;span id=&#34;cb148-134&#34;&gt;&lt;a href=&#34;#cb148-134&#34;&gt;&lt;/a&gt;  uriQuery &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; many (pPchar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb148-135&#34;&gt;&lt;a href=&#34;#cb148-135&#34;&gt;&lt;/a&gt;  uriFlagment &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; many (pPchar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flagment&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb148-136&#34;&gt;&lt;a href=&#34;#cb148-136&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;RFC 3986 に従ってURIのパースが可能であり Megaparsec パーサを含む &lt;a href=&#34;https://hackage.haskell.org/package/modern-uri&#34;&gt;&lt;code&gt;modern-uri&lt;/code&gt;&lt;/a&gt; パッケージが実際にあります。ただし、パッケージのパーサはここで説明したものよりもはるかに複雑です。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>https://haskell.jp/blog/posts/2019/strip-ansi-escape.html</id><title type="text">strip-ansi-escapeというパッケージをリリースしました</title><updated>2019-07-08T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/strip-ansi-escape.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;現職で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を仕事で書き始めるようになってからというもの、度々小さなパッケージをリリースするようになりました。&lt;br /&gt;
敢えてパッケージにするほどのものでもなさそうなぐらい小さなものが多いですが、もし再利用したくなったらな、という気持ちで書いております。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#なに作ったか&#34; title=&#34;なに作ったか&#34;&gt;なに作ったか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ作ったか&#34; title=&#34;なぜ作ったか&#34;&gt;なぜ作ったか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最近のmmlh&#34; title=&#34;最近のmmlh&#34;&gt;最近の&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;なに作ったか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なに作ったか&#34; title=&#34;なに作ったか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;なに作ったか&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/strip-ansi-escape&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;strip-ansi-escape&lt;/span&gt;&lt;/a&gt;というパッケージです。&lt;br /&gt;
今回もメインの処理は&lt;span class=&#34;ascii&#34;&gt;100&lt;/span&gt;行にも満たないような小さなもので、また用途もニッチです。&lt;br /&gt;
具体的には、名前のとおり&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコード&lt;/a&gt;を文字列から取り除く、ただそれだけです。&lt;br /&gt;
使い方も極めてシンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.String.AnsiEscapeCodes.Strip.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 現状Text型向けにしか作っていないため、OverloadedStringsを有効にした方が使いやすい&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 出力すると下線付きで &amp;quot;hello&amp;quot; と表示されるANSIエスケープコード付きの文字列&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\x001B[4mhello\x001B[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\ESC[4mhello\ESC[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stripAnsiEscapeCodes &lt;span class=&#34;st&#34;&gt;&amp;quot;\x001B[4mhello\x001B[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;なぜ作ったか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ作ったか&#34; title=&#34;なぜ作ったか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;なぜ作ったか&lt;/h1&gt;
&lt;p&gt;通常我々が&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを扱うときは、&lt;strong&gt;ユーザーのために&lt;/strong&gt;端末に文字列を分かりやすく表示したいときで、それをプログラムで再利用することは想定していません。&lt;br /&gt;
そのため&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを出力できるアプリケーションは、大抵の場合出力しないよう設定できる&lt;small&gt;（あるいは、出力先が&lt;span class=&#34;ascii&#34;&gt;tty&lt;/span&gt;でないことを検出して出力しない）&lt;/small&gt;ようになっています。&lt;br /&gt;
なので、プログラムが&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードの混ざった文字列を扱わざるを得ない、という事態は、何かがおかしい事態だと言えるでしょう。&lt;/p&gt;
&lt;p&gt;一体どういう事態なのかというと、それは私がずっと開発中の、対話的&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門コンテンツ — &lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt; — で出遭った事態でした。&lt;br /&gt;
「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」（以下、英語名を略して「&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;」と呼びます）では、ユーザーが書いた&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードを受け取って、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;にコンパイルさせることで、型エラーなどのエラーメッセージを取得しています。&lt;br /&gt;
当初から&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;はそれを簡単にパースしてユーザーへのヒントを出すのに使ったり、ユーザーにそのまま表示したりするのに使うため、&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;というオプションを&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に渡していました。&lt;br /&gt;
これは、エラーメッセージに色を着けるようになった&lt;span class=&#34;ascii&#34;&gt;GHC 8.2&lt;/span&gt;から導入されたオプションで、「エラーメッセージに必ず&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを使って）&lt;/small&gt;色を着ける」というものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出すエラーメッセージを「簡単にパース」しつつ「ユーザーにそのまま表示」する、という&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの要件を満たすためには、このオプションを利用して、強制的にエラーメッセージに色を着ける必要がありました。&lt;/p&gt;
&lt;p&gt;さらに最近、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出したエラーメッセージをファイルに保存して、&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/issues/101&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;で閲覧できるようにする&lt;/a&gt;&lt;small&gt;（正確には、閲覧して各行にコメントできるようにする）&lt;/small&gt;、という機能も追加した結果、&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを取り除かざるを得なくなってしまったのです。&lt;br /&gt;
というのも、&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;を有効にしている限り、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は必ず&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードをエラーメッセージに混ぜるので、ファイルに保存して&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;上で表示する際、下記のように余計な文字として混ざってしまい、エラーメッセージが読みづらくなってしまうためです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;�[;1m16.hs:19:18: �[;1m�[31merror:�[0m�[0m�[;1m�[0m�[0m�[;1m
    • No instance for (Num ([Char], String))
        arising from a use of ‘countWords’
    • In the expression: countWords (concat wordsList)
      In an equation for ‘countMap’:
          countMap = countWords (concat wordsList)
      In the expression:
        do paths &amp;lt;- getArgs
           wordsList &amp;lt;- for paths scrapeWords
           let countMap = countWords (concat wordsList)
           for_ (toList countMap) catCount�[0m�[0m
�[;1m�[34m   |�[0m�[0m
�[;1m�[34m19 |�[0m�[0m   let countMap = �[;1m�[31mcountWords (concat wordsList)�[0m�[0m
�[;1m�[34m   |�[0m�[0m�[;1m�[31m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^�[0m�[0m
�[0m�[0m�[0m&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;を有効にしなければこんな問題は起こらないのですが、そうすると今度はユーザーにエラーメッセージを表示させる際、色が着かなくなってしまいます。&lt;br /&gt;
せっかく&lt;span class=&#34;ascii&#34;&gt;GHC 8.2&lt;/span&gt;以降を使っているのに色つきのエラーメッセージが見られないのは残念ですよね。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回実行することで、ユーザーに表示する用のエラーメッセージとファイルに保存する用のエラーメッセージを分けることもできますが、それでは効率が悪いでしょうし。&lt;/p&gt;
&lt;p&gt;そんなわけで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出力するエラーメッセージを&lt;strong&gt;ユーザーに端末上で表示する用途と、&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを解釈しない箇所で表示する用途&lt;/strong&gt;、両方に使用したくなったため、今回敢えて&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを取り除くライブラリーを作りました。&lt;br /&gt;
もし他に同じような事態に出遭った方がいらっしゃいましたら、試してみてください🙏&lt;/p&gt;
&lt;h1 id=&#34;最近のmmlh&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#最近のmmlh&#34; title=&#34;最近のmmlh&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;最近の&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;ついでにここ数ヶ月弊社でやっている、&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;を使った社内勉強会のお話も書こうかと思いましたが、やっぱり社内でのことなんで、&lt;a href=&#34;https://eng-blog.iij.ad.jp/&#34;&gt;会社のブログ&lt;/a&gt;に書くことにします。&lt;br /&gt;
&lt;del&gt;多分今週中には上げますので乞うご期待！&lt;/del&gt;&lt;br /&gt;
⬇️大分遅くなってしまいましたが公開しました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eng-blog.iij.ad.jp/archives/3467&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;社内勉強会と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;学習ツールの紹介 &lt;span class=&#34;ascii&#34;&gt;| IIJ Engineers Blog&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/fallible.html&#34; lang=&#34;ja&#34;&gt;fallibleというパッケージをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/asterius.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id><title type="text">stack image コマンドなしに Haskell アプリの Docker イメージを作る</title><updated>2019-06-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;自分は Haskell アプリケーションの Docker イメージを作るのに &lt;code&gt;stack image&lt;/code&gt; コマンドを愛用している． しかし悲しいことに &lt;strong&gt;stack v2 からはこの機能が無くなってしまう&lt;/strong&gt; のだ． ということで代替方法を考えてみた，というお話．&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/whoami/pull/6&#34;&gt;Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結論としては stack の &lt;code&gt;--local-bin-path&lt;/code&gt; オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，&lt;code&gt;docker build&lt;/code&gt; でコピーしているだけ．&lt;/p&gt;
&lt;h2 id=&#34;stack-image-コマンド&#34;&gt;stack image コマンド&lt;/h2&gt;
&lt;p&gt;簡単に今は亡き &lt;code&gt;stack image&lt;/code&gt; コマンドを説明する． このコマンドは &lt;code&gt;stack image container&lt;/code&gt; というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． &lt;code&gt;docker&lt;/code&gt; コマンドで普通にイメージを作るのと違い，&lt;code&gt;.stack-work&lt;/code&gt; のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(&lt;code&gt;stack&lt;/code&gt; による初回ビルドはとても時間がかかる…)．&lt;/p&gt;
&lt;p&gt;使い方は簡単で，次のようなのを stack.yaml に記述し &lt;code&gt;stack --docker image container&lt;/code&gt; とするだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/whoami&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/ubuntu-for-haskell:git&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; の方の設定は Docker Integration と呼ばれるもので，&lt;code&gt;repo&lt;/code&gt; で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの &lt;code&gt;.stack-work&lt;/code&gt; を利用する)． &lt;code&gt;image&lt;/code&gt; の方の設定が &lt;code&gt;stack image&lt;/code&gt; の設定で，&lt;code&gt;base&lt;/code&gt; が作成するイメージのベースイメージだ． やってることは実行ファイルを &lt;code&gt;.stack-work&lt;/code&gt; からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さて，冒頭に書いた通り，&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate&#34;&gt;&lt;strong&gt;この機能は stack の新しいバージョンでは無くなってしまう&lt;/strong&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「&lt;a href=&#34;https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker&#34;&gt;Building Haskell Apps with Docker&lt;/a&gt;」という記事を読むと良いらしい．&lt;/p&gt;
&lt;h2 id=&#34;マルチステージビルドする&#34;&gt;マルチステージビルドする&lt;/h2&gt;
&lt;p&gt;上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; fpco/stack-build:lts-13.21 as bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; . /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd /root/work &amp;amp;&amp;amp; stack install --system-ghc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=bin /root/.local/bin /root/.local/bin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stack の Docker Integration は残ってるので &lt;code&gt;stack --docker build&lt;/code&gt; とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは &lt;code&gt;stack install&lt;/code&gt; により &lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルを &lt;code&gt;/root/.local/bin&lt;/code&gt; にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，&lt;code&gt;/root/.local/bin&lt;/code&gt; は stack が決めてるローカル実行ファイルを置くパスで，&lt;code&gt;stack path&lt;/code&gt; で確認できる(OS によって違うはず)．&lt;/p&gt;
&lt;p&gt;でもこれ一つ欠点があって． &lt;code&gt;docker build&lt;/code&gt; するときに，肥大化しがちな &lt;code&gt;.stack-work&lt;/code&gt; をいちいち上げる必要があるので，だんだん &lt;code&gt;docker build&lt;/code&gt; の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． &lt;code&gt;.dockerignore&lt;/code&gt; で無視できれば良いのだが，それだと &lt;code&gt;stack insatll&lt;/code&gt; できない(&lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ &lt;code&gt;.dockerignore&lt;/code&gt; に書くのはめんどくさい)．&lt;/p&gt;
&lt;h2 id=&#34;local-bin-path-オプション&#34;&gt;local-bin-path オプション&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; する時は &lt;code&gt;.stack-work&lt;/code&gt; を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを &lt;code&gt;stack install&lt;/code&gt; を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/730&#34;&gt;Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;stack --local-bin-path=any_path install&lt;/code&gt; とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから &lt;code&gt;docker build&lt;/code&gt; で実行ファイルコピーしてくるように Dockerfile を書くだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path} /root/.local/bin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ARG&lt;/code&gt; を使ったので次のように &lt;code&gt;docker build&lt;/code&gt; コマンドのオプションで指定する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いい感じ！ もちろん &lt;code&gt;.dockerignore&lt;/code&gt; に &lt;code&gt;.stack-work&lt;/code&gt; が書いてあるのでイメージのビルドも速い．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これで心置き無く新しい stack のバージョンを使うことができる．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id><title type="text">rio + extensible なフレームワーク: mix</title><updated>2019-05-27T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近はよく &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．&lt;/p&gt;
&lt;p&gt;ちなみに，それぞれのパッケージを軽く説明すると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude&lt;/li&gt;
&lt;li&gt;extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mix-パッケージ&#34;&gt;mix パッケージ&lt;/h2&gt;
&lt;p&gt;リポジトリはこれ:&lt;/p&gt;
&lt;h5 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;183&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs&#34;&gt;&lt;/iframe&gt;&lt;/h5&gt;
&lt;p&gt;mix パッケージの目的は rio パッケージの &lt;code&gt;RIO env a&lt;/code&gt; モナドの &lt;code&gt;env&lt;/code&gt; の部分を extensible パッケージを用いて簡単に構築することであり，&lt;code&gt;env&lt;/code&gt; をプラグインとして構築する． プラグインで構築という部分は &lt;a href=&#34;https://hackage.haskell.org/package/tonatona&#34;&gt;tonatona&lt;/a&gt; から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，&lt;code&gt;rio&lt;/code&gt; パッケージのロガーを利用して次のような簡易的なプログラムをかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  MixLogger.logDebug &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is debug: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;  MixLogger.logInfo  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;  MixLogger.logWarn  &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is warn: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  MixLogger.logError &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is error: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hoge&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tonatona との違いは &lt;code&gt;RIO env a&lt;/code&gt; の &lt;code&gt;env&lt;/code&gt; に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(&lt;code&gt;#logger &amp;lt;@=&amp;gt; ...&lt;/code&gt; とか)を記述するだけで良い． これの実行結果は次のようになる:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，&lt;code&gt;extensible&lt;/code&gt; の魔法によるものである．&lt;/p&gt;
&lt;h3 id=&#34;extensible-の魔法&#34;&gt;extensible の魔法&lt;/h3&gt;
&lt;p&gt;もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; logFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;  opt &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;  withLogFunc opt &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \logFunc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runRIO &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;    logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;    logDebug &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;withLogFunc opt&lt;/code&gt; の型は &lt;code&gt;MonadUnliftIO m =&amp;gt; (LogFunc -&amp;gt; m a) -&amp;gt; m a&lt;/code&gt; となっている． なぜこのような形になっているのかの秘密は(たぶん) &lt;code&gt;MonadUnliftIO&lt;/code&gt; にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withLogFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 継続(Continuation)のモナドトランスフォーム仕様の型&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runContT ::&lt;/span&gt; ((a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;継続は &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として &lt;strong&gt;レコードのフィールドをモナディックに走査できる！&lt;/strong&gt; というのがある(正確には &lt;code&gt;Applicative&lt;/code&gt; ですが)． 例えば &lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence&#34;&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; という関数が走査する関数だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hsequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; f h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;Plugin&lt;/code&gt; という型はただの継続で，&lt;code&gt;Mix.run plugin&lt;/code&gt; は単純に &lt;code&gt;runContT&lt;/code&gt; した中で &lt;code&gt;runRIO env action&lt;/code&gt; しているだけだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; a m env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; env a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;run plugin act &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;`runRIO`&lt;/span&gt; act) &lt;span class=&#34;ot&#34;&gt;`withPlugin`&lt;/span&gt; plugin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withPlugin ::&lt;/span&gt; (env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;withPlugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; runContT&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toPlugin ::&lt;/span&gt; ((env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;toPlugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．&lt;/p&gt;
&lt;h2 id=&#34;プラグイン&#34;&gt;プラグイン&lt;/h2&gt;
&lt;p&gt;プラグインと言ったもののただの継続だ． 今あるのは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logger&lt;/li&gt;
&lt;li&gt;Config&lt;/li&gt;
&lt;li&gt;API Client (GitHub, Drone)&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．&lt;/p&gt;
&lt;h3 id=&#34;logger-と-config&#34;&gt;Logger と Config&lt;/h3&gt;
&lt;p&gt;この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． &lt;code&gt;&amp;quot;config&amp;quot;&lt;/code&gt; フィールドと任意の型と紐づかせている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; title=&#34;14&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; title=&#34;15&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixConfig.askConfig&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; title=&#34;16&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; config &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; title=&#34;19&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; title=&#34;20&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; title=&#34;21&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; title=&#34;22&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Config は試しに作ってみたけど，いまいち使い道がない．&lt;/p&gt;
&lt;h3 id=&#34;api-client&#34;&gt;API Client&lt;/h3&gt;
&lt;p&gt;API クライアントを利用するのに必要な情報(API トークンなど)を &lt;code&gt;env&lt;/code&gt; に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のものを作った． GitHub のクライアントは &lt;a href=&#34;https://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージを Drone のクライアントは(僕が作った) &lt;a href=&#34;https://hackage.haskell.org/package/drone&#34;&gt;drone&lt;/a&gt; パッケージを使う． 各プラグインのパッケージは &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github&#34;&gt;mix-plugin-github&lt;/a&gt; と &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone&#34;&gt;mix-plugin-drone&lt;/a&gt; として matsubara0507/mix.hs リポジトリに置いてある．&lt;/p&gt;
&lt;p&gt;こんな感じに使える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Drone&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.Endpoints.Users&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Drone&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt;      &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt;     (getEnv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub.Token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;drone&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone.Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;  gToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;  dHost  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_HOST&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;  dToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_TOKEN&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; logConf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;      dClient &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;host &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; dHost &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;port &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;token &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; dToken &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;      plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;            &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logConf&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;github &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;drone  &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixDrone.buildPlugin dClient &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;  Mix.run plugin app&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch GitHub user info:&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;  resp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch GitHub.userInfoCurrent&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; resp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;GitHub fetch error....&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ghLogin user &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch Drone user info:&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; title=&#34;36&#34;&gt;  tryAny (responseBody &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; MixDrone.fetch Drone.getSelf) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;Drone CI fetch error...&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; title=&#34;38&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; user &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;login &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; title=&#34;39&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; title=&#34;40&#34;&gt;    ghLogin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; GitHub.untagName &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; GitHub.userLogin&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行するとこんな感じ:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本来は &lt;code&gt;env&lt;/code&gt; を &lt;code&gt;Reader&lt;/code&gt; モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;shell-コマンド&#34;&gt;Shell コマンド&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;shelly&lt;/a&gt; というパッケージを利用したシェルコマンドの実行を支援する． &lt;code&gt;env&lt;/code&gt; にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを &lt;code&gt;cd&lt;/code&gt; した上で実行してくれる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Shell&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixShell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shelly&lt;/span&gt;            &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;work&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;  paths &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixShell.exec &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; Shell.ls &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;  forM_ paths &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; MixLogger.logInfo (display &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; Shell.toTextIgnore path)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;    plugin &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;work   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id><title type="text">Drone Plugin を作ってみた: slack-notify-log</title><updated>2019-05-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の &lt;a href=&#34;https://github.com/drone-plugins/drone-slack&#34;&gt;&lt;code&gt;plugin/slack&lt;/code&gt;&lt;/a&gt; では出来なそうだったので，Plugin を自作した，というお話．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go&lt;/a&gt; を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/drone/drone-go/drone&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/pkg/errors&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;	log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;golang.org/x/oauth2&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;  config := &lt;span class=&#34;bu&#34;&gt;new&lt;/span&gt;(oauth2.Config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;  client := drone.NewClient(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    p.Config.DroneHost,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;    config.Client(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;      context.Background(),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;      &amp;amp;oauth2.Token{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;        AccessToken: p.Config.DroneToken,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;      },&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    ),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;can&amp;#39;t fetch drone logs: builds/%d/logs/%d/%d&amp;quot;&lt;/span&gt;, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Success: fetch drone logs (lines num is %d)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(logs))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，実際の Plugin の使い方はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; notify drone log to slack&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/slack-notify-log&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;    template:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      {{#success build.status}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;        {{repo.name}} is Success!&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;      {{else}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;        {{repo.name}} is Failure...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      {{/success}}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;token:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; slack_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;channel:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bot-test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;step_number:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;drone_host:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_host&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;drone_token:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;status:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; success&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; failure&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各 &lt;code&gt;settings&lt;/code&gt; は:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; : スニペットのコメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt; : slack にポストするための API トークン
&lt;ul&gt;
&lt;li&gt;個人トークンや &lt;a href=&#34;https://slack.com/apps/A0F7YS25R-bots&#34;&gt;Bots App&lt;/a&gt; などから生成する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channel&lt;/code&gt; : 通知先チャンネル
&lt;ul&gt;
&lt;li&gt;無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step_number&lt;/code&gt; : 何ステップ目のログを通知したいか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step_number: 1&lt;/code&gt; は git clone になる点に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_host&lt;/code&gt; : この CI を実行したい Drone のホスト
&lt;ul&gt;
&lt;li&gt;別にシークレットにする必要はないけど&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cloud.drone.io&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_token&lt;/code&gt; : この CI を実行したい Drone の API トークン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行結果はこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-drone-slack-notify-log/example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;これは matsubara0507/drone-slack-notify-log のビルドステップ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか他に良い方法が絶対にある気がするんだけどな…&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id><title type="text">Ruby のパターンマッチング機能を MinRuby で試す</title><updated>2019-05-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Ruby 2.7 で導入予定で，すでに &lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby リポジトリ&lt;/a&gt;の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．&lt;/p&gt;
&lt;h2 id=&#34;パターンマッチング&#34;&gt;パターンマッチング&lt;/h2&gt;
&lt;p&gt;(わざわざ解説することでもないけど)&lt;/p&gt;
&lt;p&gt;パターンマッチングは &lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文のようなプログラムの分岐に使うプログラミング機能． &lt;code&gt;if&lt;/code&gt; 文が真偽値を返す条件式 (e.g. &lt;code&gt;a &amp;gt; 0 &amp;amp;&amp;amp; x == &amp;#39;hoge&amp;#39;&lt;/code&gt;) の結果により分岐し，&lt;code&gt;case&lt;/code&gt; 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．&lt;/p&gt;
&lt;p&gt;例えば Ruby に導入されたパターンマッチングだと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; var &lt;span class=&#34;co&#34;&gt;# var のデータ構造により分岐&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is empty list&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is singleton: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;a&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 変数 a に値を代入する&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;:hoge&lt;/span&gt;, a, b]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is hoge list: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;[a, b]&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 一要素目が :hoge の3要素リスト&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;No match: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;var&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# else はどれにもマッチしないとき&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．&lt;/p&gt;
&lt;p&gt;ちなみに，パターンマッチングがあれば基本的に &lt;code&gt;if&lt;/code&gt; 文も &lt;code&gt;case&lt;/code&gt; 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．&lt;/p&gt;
&lt;h3 id=&#34;ruby-のパターンマッチング&#34;&gt;Ruby のパターンマッチング&lt;/h3&gt;
&lt;p&gt;ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:&lt;/p&gt;
&lt;iframe class=&#34;embedly-embed&#34; src=&#34;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fspeakerdeck.com%2Fplayer%2Fa853a73bba9d48ae88860f7c9b068334&amp;amp;url=https%3A%2F%2Fspeakerdeck.com%2Fk_tsj%2Fpattern-matching-new-feature-in-ruby-2-dot-7&amp;amp;image=https%3A%2F%2Fspeakerd.s3.amazonaws.com%2Fpresentations%2Fa853a73bba9d48ae88860f7c9b068334%2Fslide_0.jpg%3F510667&amp;amp;key=internal&amp;amp;type=text%2Fhtml&amp;amp;schema=speakerdeck&#34; width=&#34;500&#34; height=&#34;299&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; fullscreen&#34; allowfullscreen=&#34;true&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;すでに &lt;a href=&#34;https://www.youtube.com/watch?v=paBlgsqoKk8&#34;&gt;YouTube で動画も公開された&lt;/a&gt;． ちなみに，2012 ぐらいからずっと作っていたらしい．&lt;/p&gt;
&lt;p&gt;Elixir のピンパターン(&lt;code&gt;^var&lt;/code&gt;)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;001&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;002&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;003&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [b, c] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;004&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;=&amp;gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;005&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; [a,b,c]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;=&amp;gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;in ..&lt;/code&gt; ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文でもこんな感じの挙動)．&lt;/p&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;h3 id=&#34;ruby2.7-dev&#34;&gt;Ruby2.7-dev&lt;/h3&gt;
&lt;p&gt;前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; を使った．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rbenv install 2.7.0-dev&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;minruby&#34;&gt;MinRuby&lt;/h3&gt;
&lt;p&gt;パターンマッチングを試す対象として，「&lt;a href=&#34;https://ascii.jp/elem/000/001/230/1230449/&#34;&gt;Ruby で学ぶ Ruby&lt;/a&gt;」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．&lt;/p&gt;
&lt;p&gt;最終的な処理系は &lt;a href=&#34;https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb&#34;&gt;Ruby コード一枚&lt;/a&gt;でできている(一番めんどくさい構文解析を &lt;a href=&#34;https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper&#34;&gt;ripper&lt;/a&gt; とそのラッパー &lt;a href=&#34;https://github.com/mame/minruby&#34;&gt;minruby&lt;/a&gt; というのに任せているので):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# interp.rb&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;require &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;    tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) + evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) - evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) * evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) / evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) % evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) == evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) != evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;      last = evaluate(tree[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;    last&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-49&#34; title=&#34;49&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-50&#34; title=&#34;50&#34;&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-51&#34; title=&#34;51&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-52&#34; title=&#34;52&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-53&#34; title=&#34;53&#34;&gt;    genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-54&#34; title=&#34;54&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-55&#34; title=&#34;55&#34;&gt;    args = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-56&#34; title=&#34;56&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-58&#34; title=&#34;58&#34;&gt;      args[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-59&#34; title=&#34;59&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-60&#34; title=&#34;60&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-61&#34; title=&#34;61&#34;&gt;    mhd = genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-62&#34; title=&#34;62&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-63&#34; title=&#34;63&#34;&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-64&#34; title=&#34;64&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-65&#34; title=&#34;65&#34;&gt;      new_lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-66&#34; title=&#34;66&#34;&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-67&#34; title=&#34;67&#34;&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-68&#34; title=&#34;68&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-69&#34; title=&#34;69&#34;&gt;        new_lenv[params[i]] = args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-70&#34; title=&#34;70&#34;&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-71&#34; title=&#34;71&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-72&#34; title=&#34;72&#34;&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-73&#34; title=&#34;73&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-74&#34; title=&#34;74&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-75&#34; title=&#34;75&#34;&gt;    ary = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-76&#34; title=&#34;76&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-77&#34; title=&#34;77&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-78&#34; title=&#34;78&#34;&gt;      ary[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-79&#34; title=&#34;79&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-80&#34; title=&#34;80&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-81&#34; title=&#34;81&#34;&gt;    ary&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-82&#34; title=&#34;82&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-83&#34; title=&#34;83&#34;&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-84&#34; title=&#34;84&#34;&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-85&#34; title=&#34;85&#34;&gt;    ary[idx]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-86&#34; title=&#34;86&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-87&#34; title=&#34;87&#34;&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-88&#34; title=&#34;88&#34;&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-89&#34; title=&#34;89&#34;&gt;    val = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-90&#34; title=&#34;90&#34;&gt;    ary[idx] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-91&#34; title=&#34;91&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-92&#34; title=&#34;92&#34;&gt;    hsh = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-93&#34; title=&#34;93&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-94&#34; title=&#34;94&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-95&#34; title=&#34;95&#34;&gt;      key = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-96&#34; title=&#34;96&#34;&gt;      val = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-97&#34; title=&#34;97&#34;&gt;      hsh[key] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-98&#34; title=&#34;98&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-99&#34; title=&#34;99&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-100&#34; title=&#34;100&#34;&gt;    hsh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-101&#34; title=&#34;101&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-102&#34; title=&#34;102&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-103&#34; title=&#34;103&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-104&#34; title=&#34;104&#34;&gt;str = minruby_load()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-105&#34; title=&#34;105&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-106&#34; title=&#34;106&#34;&gt;tree = minruby_parse(str)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-107&#34; title=&#34;107&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-108&#34; title=&#34;108&#34;&gt;genv = {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-109&#34; title=&#34;109&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-110&#34; title=&#34;110&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-111&#34; title=&#34;111&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-112&#34; title=&#34;112&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-113&#34; title=&#34;113&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-114&#34; title=&#34;114&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-115&#34; title=&#34;115&#34;&gt;lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-116&#34; title=&#34;116&#34;&gt;evaluate(tree, genv, lenv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コードを見て分かるように(?)，配列の一引数目のリテラルで &lt;code&gt;case&lt;/code&gt; 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + &lt;code&gt;case&lt;/code&gt; 文による分岐はパターンマッチングにうってつけのユースケースだ．&lt;/p&gt;
&lt;h3 id=&#34;minruby-パターンマッチング&#34;&gt;MinRuby + パターンマッチング&lt;/h3&gt;
&lt;p&gt;作業リポジトリはこれ:&lt;/p&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;code&gt;pattern-match&lt;/code&gt; というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは &lt;code&gt;evaluate&lt;/code&gt; 関数だけなのでそこだけ載せる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;, lit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;    lit&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;    evaluate(exp1, genv, lenv) &amp;lt; evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;    evaluate(exp1, genv, lenv) &amp;lt;= evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;    evaluate(exp1, genv, lenv) &amp;gt;= evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-26&#34; title=&#34;26&#34;&gt;    evaluate(exp1, genv, lenv) &amp;gt; evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;, *stmts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-28&#34; title=&#34;28&#34;&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-29&#34; title=&#34;29&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; stmts[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-31&#34; title=&#34;31&#34;&gt;      last = evaluate(stmts[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-32&#34; title=&#34;32&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-34&#34; title=&#34;34&#34;&gt;    last&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-35&#34; title=&#34;35&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;, var_name, var_value&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-36&#34; title=&#34;36&#34;&gt;    lenv[var_name] = evaluate(var_value, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-37&#34; title=&#34;37&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;, var_name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-38&#34; title=&#34;38&#34;&gt;    lenv[var_name]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-39&#34; title=&#34;39&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;, cond, exp1, exp2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-41&#34; title=&#34;41&#34;&gt;      evaluate(exp1, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-42&#34; title=&#34;42&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-43&#34; title=&#34;43&#34;&gt;      evaluate(exp2, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-45&#34; title=&#34;45&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;, cond, exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-46&#34; title=&#34;46&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-47&#34; title=&#34;47&#34;&gt;      evaluate(exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-48&#34; title=&#34;48&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-49&#34; title=&#34;49&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;, func_name, func_args, func_body&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-50&#34; title=&#34;50&#34;&gt;    genv[func_name] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, func_args, func_body]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-51&#34; title=&#34;51&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;, func_name, *func_args&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-52&#34; title=&#34;52&#34;&gt;    args = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-53&#34; title=&#34;53&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-54&#34; title=&#34;54&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; func_args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-55&#34; title=&#34;55&#34;&gt;      args[i] = evaluate(func_args[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-56&#34; title=&#34;56&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-57&#34; title=&#34;57&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-58&#34; title=&#34;58&#34;&gt;    mhd = genv[func_name]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-59&#34; title=&#34;59&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-60&#34; title=&#34;60&#34;&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-61&#34; title=&#34;61&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-62&#34; title=&#34;62&#34;&gt;      new_lenv = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-63&#34; title=&#34;63&#34;&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-64&#34; title=&#34;64&#34;&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-65&#34; title=&#34;65&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-66&#34; title=&#34;66&#34;&gt;        new_lenv[params[i]] = args[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-67&#34; title=&#34;67&#34;&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-68&#34; title=&#34;68&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-69&#34; title=&#34;69&#34;&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-70&#34; title=&#34;70&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-71&#34; title=&#34;71&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;, ary_values&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-72&#34; title=&#34;72&#34;&gt;    ary = []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-73&#34; title=&#34;73&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-74&#34; title=&#34;74&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; ary_values[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-75&#34; title=&#34;75&#34;&gt;      ary [i] = evaluate(ary_values[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-76&#34; title=&#34;76&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-77&#34; title=&#34;77&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-78&#34; title=&#34;78&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;, ary_exp, idx_exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-79&#34; title=&#34;79&#34;&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-80&#34; title=&#34;80&#34;&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-81&#34; title=&#34;81&#34;&gt;    ary[idx]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-82&#34; title=&#34;82&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;, ary_exp, idx_exp, value_exp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-83&#34; title=&#34;83&#34;&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-84&#34; title=&#34;84&#34;&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-85&#34; title=&#34;85&#34;&gt;    val = evaluate(value_exp, genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-86&#34; title=&#34;86&#34;&gt;    ary[idx] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-87&#34; title=&#34;87&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;, *key_values&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-88&#34; title=&#34;88&#34;&gt;    hsh = {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-89&#34; title=&#34;89&#34;&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-90&#34; title=&#34;90&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; key_values[i]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-91&#34; title=&#34;91&#34;&gt;      key = evaluate(key_values[i], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-92&#34; title=&#34;92&#34;&gt;      val = evaluate(key_values[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-93&#34; title=&#34;93&#34;&gt;      hsh[key] = val&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-94&#34; title=&#34;94&#34;&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-95&#34; title=&#34;95&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-96&#34; title=&#34;96&#34;&gt;    hsh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-97&#34; title=&#34;97&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-98&#34; title=&#34;98&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配列にマッチさせる場合，&lt;code&gt;in [a, b, c]&lt;/code&gt; の &lt;code&gt;[]&lt;/code&gt; を省くことができる． また，&lt;code&gt;in &amp;quot;hoge&amp;quot;, *rest&lt;/code&gt; は配列の残りの要素全てを &lt;code&gt;*rest&lt;/code&gt; にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-minruby-パターンマッチング&#34;&gt;おまけ: minruby + パターンマッチング&lt;/h2&gt;
&lt;p&gt;試しに &lt;code&gt;minruby&lt;/code&gt; もパターンマッチで書き換えてみた． 差分は&lt;a href=&#34;https://github.com/matsubara0507/minruby-gem/pull/1&#34;&gt;これ&lt;/a&gt;． めちゃくちゃやっつけで作ったので穴があるかもしれない．&lt;/p&gt;
&lt;p&gt;ここでは新しく Alternative Pattern を使っている． こういうのだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# Alternative Pattern: hoge | fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt;), exp1, *_&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;    make_stmts(exp1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# Error: illegal variable in alternative pattern&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; exp1, *_ | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt; exp1, *_),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;    make_stmts(exp1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここからは余談． MinRuby は &lt;code&gt;ruby interp.rb interp.rb fizzbuzz.rb&lt;/code&gt; のように自身を自身で評価することが可能だ(そのため &lt;code&gt;map&lt;/code&gt; や &lt;code&gt;foreach&lt;/code&gt; などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って &lt;code&gt;minruby&lt;/code&gt; をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次は型検査も試したいですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id><title type="text">GitHub Card を生成する SPA を Elm で作った</title><updated>2019-05-12T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ということに，だいたい完成してから気づいた orz&lt;/p&gt;
&lt;h3 id=&#34;github-card&#34;&gt;GitHub Card&lt;/h3&gt;
&lt;p&gt;特別定義はないけど，&lt;a href=&#34;https://lab.lepture.com/github-cards/&#34;&gt;こんな感じ&lt;/a&gt;のを iframe で作りたかった．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:&lt;/p&gt;
&lt;h4 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card&#34;&gt;GitHub Pages に置いた&lt;/a&gt;ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…&lt;/p&gt;
&lt;p&gt;こんな感じになる:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/user-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507/github-card&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/repo-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上がユーザーのカードで下がリポジトリのカード． &lt;code&gt;Embed:&lt;/code&gt; の下に書いてある iframe タグをコピペすることで埋め込める．&lt;/p&gt;
&lt;h3 id=&#34;ちょっとした工夫&#34;&gt;ちょっとした工夫&lt;/h3&gt;
&lt;p&gt;Elm の &lt;code&gt;Browser.application&lt;/code&gt; の URL 機能を&lt;del&gt;わざわざ&lt;/del&gt;使って色々工夫してる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://xxxx#name&lt;/code&gt; とすることで直接任意ユーザー/リポジトリのカードのページを開ける
&lt;ul&gt;
&lt;li&gt;実は &lt;code&gt;Build&lt;/code&gt; ボタンで &lt;code&gt;#name&lt;/code&gt; にジャンプしてる笑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://xxx?target=name&lt;/code&gt; とすることで &lt;code&gt;name&lt;/code&gt; のカードだけを表示
&lt;ul&gt;
&lt;li&gt;iframe にはこっちを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; とか&lt;del&gt;わざわざ&lt;/del&gt;してぴったりの &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; を iframe に生成してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…&lt;/p&gt;
&lt;h2 id=&#34;作るパート2&#34;&gt;作る(パート2)&lt;/h2&gt;
&lt;p&gt;ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，&lt;strong&gt;適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??&lt;/strong&gt; と．&lt;/p&gt;
&lt;p&gt;ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．&lt;/p&gt;
&lt;h3 id=&#34;できたもの&#34;&gt;できたもの&lt;/h3&gt;
&lt;p&gt;集める部分と表示する部分を分けた:&lt;/p&gt;
&lt;h4 id=&#34;section-1&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;h4 id=&#34;section-2&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;前回の &lt;a href=&#34;https://github.com/matsubara0507/github-card&#34;&gt;matsubara0507/github-card&lt;/a&gt; と違い自分専用． selfcat という CLI ツールで次のような設定ファイル &lt;code&gt;.selfcat.yaml&lt;/code&gt; にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;owner:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;repos:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mix.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; selfcat&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--compact&lt;/code&gt; オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．&lt;/p&gt;
&lt;h3 id=&#34;selfcat&#34;&gt;selfcat&lt;/h3&gt;
&lt;p&gt;これはやってること単純:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;設定ファイルの YAML を読み込み (&lt;a href=&#34;http://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;GitHub API を叩き (&lt;a href=&#34;http://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;JSON を吐くだけ (&lt;a href=&#34;http://hackage.haskell.org/package/aeson&#34;&gt;aeson&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例のごとく，&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; でサクッと作った．&lt;/p&gt;
&lt;p&gt;中身を見るとわかるのだが &lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;mix&lt;/a&gt; というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．&lt;/p&gt;
&lt;h3 id=&#34;生成した-json-ファイルを読み込む&#34;&gt;生成した JSON ファイルを読み込む&lt;/h3&gt;
&lt;p&gt;Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには &lt;code&gt;init&lt;/code&gt; 関数の &lt;code&gt;Flag&lt;/code&gt; というのを使う。&lt;a href=&#34;https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement&#34;&gt;このあたりが参考になる&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;で，問題はどうやってローカルの JSON を読み込むか． &lt;a href=&#34;https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48&#34;&gt;git-plantation では Haskell で埋め込んでいた&lt;/a&gt;のだが，今回はサーバー側がないのでできない． ググったら出てきた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript&#34;&gt;Load JSON file locally using pure Javascript by Rich on CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて &lt;code&gt;index.html&lt;/code&gt; から読み込むようにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(callback) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xobj &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;XMLHttpRequest&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;       &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;overrideMimeType&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;static/info.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;         &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readyState&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;           &lt;span class=&#34;at&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;responseText&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;         &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;   &lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(response) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;parse&lt;/span&gt;(response)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;va&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;  )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，うまく動作はしている．&lt;/p&gt;
&lt;p&gt;いつも通り，GitHub Pages に置いたので&lt;a href=&#34;https://matsubara0507.github.io/my-github-cards/&#34;&gt;ここ&lt;/a&gt;から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．&lt;/p&gt;
&lt;h3 id=&#34;daily-cron-on-travisci&#34;&gt;Daily cron on TravisCI&lt;/h3&gt;
&lt;p&gt;更新は TravisCI の Daily cron を使う． &lt;a href=&#34;https://hub.docker.com/r/matsubara0507/selfcat/&#34;&gt;selfcat は Docker Image にした&lt;/a&gt;ので selfcat をビルドする必要はない． &lt;code&gt;docker run&lt;/code&gt; で JSON を生成し，差分があったら GitHub に push する．&lt;/p&gt;
&lt;p&gt;知らぬ間に，TravisCI の設定方法に &lt;code&gt;deploy&lt;/code&gt; という設定が増えていたんですね:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;language:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; generic&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;before_install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker pull matsubara0507/selfcat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec selfcat&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &amp;#39;cd app &amp;amp;&amp;amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;deploy:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;provider:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; script&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;skip_cleanup:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bash .travis/deploy.bash&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; master&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; のところで読んでいるスクリプトは以下:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;-eux&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;# setup ssh-agent and provide the GitHub deploy key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;bu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ssh-agent&lt;/span&gt; -s&lt;span class=&#34;va&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ex&#34;&gt;openssl&lt;/span&gt; aes-256-cbc -K &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_key&lt;/span&gt; -iv &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_iv&lt;/span&gt; -in .travis/id_rsa.enc -out .travis/id_rsa -d&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;chmod&lt;/span&gt; 600 .travis/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;ssh-add&lt;/span&gt; .travis/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;# commit the assets in docs/ if changed, and push to GitHub using SSH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_NAME}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.email &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_EMAIL}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; remote set-url origin git@github.com:&lt;span class=&#34;va&#34;&gt;${TRAVIS_REPO_SLUG}&lt;/span&gt;.git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; checkout master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; add docs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; diff --staged --quiet &lt;span class=&#34;kw&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update docs by selfcat&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; push origin master&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929&#34;&gt;Deploy to GitHub Pages using Travis CI and deploy keys - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暗号化/複合の部分は TravisCI の &lt;a href=&#34;https://docs.travis-ci.com/user/encrypting-files/&#34;&gt;Encrypting Files&lt;/a&gt; を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが &lt;code&gt;script: ./.travis-deploy.sh&lt;/code&gt; では呼べなかった． ググったら &lt;a href=&#34;https://github.com/travis-ci/travis-ci/issues/5538&#34;&gt;Issue&lt;/a&gt; があり，&lt;code&gt;script: sh deploy.sh&lt;/code&gt; とすれば良いみたいだったのでそうしたらうまくいった．&lt;/p&gt;
&lt;h1 id=&#34;section-3&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/my-github-cards&#34;&gt;matsubara0507/my-github-cards&lt;/a&gt; をフォークして，selfcat と TravisCI の設定(&lt;code&gt;.travis/id_rsa.enc&lt;/code&gt; と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入力してエンターキーで Build ボタン押したことにしたい&lt;/li&gt;
&lt;li&gt;Embed のところにクリップボードにコピーボタン欲しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/asterius.html</id><title type="text">AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）</title><updated>2019-05-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/asterius.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、&lt;a href=&#34;https://emsn.connpass.com/event/121028/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Emscripten &amp;amp; WebAssembly night !! #7&lt;/span&gt;&lt;/a&gt;というイベントにて、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルするツールについて紹介いたしました。&lt;br /&gt;
資料はこちら👇です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://the.igreque.info/slides/2019-04-19-asterius.html#(1)&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を&lt;span class=&#34;ascii&#34;&gt;JS&lt;/span&gt;から呼べるようにしてみた（けど失敗）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日は、スライドの英語で書いていた箇所を和訳しつつ、いろいろ捕捉してブログ記事の形で共有します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;結果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;✅おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/h1&gt;
&lt;p&gt;冒頭でも触れたとおり、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースを&lt;a href=&#34;https://developer.mozilla.org/ja/docs/WebAssembly&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;&lt;/a&gt;にコンパイルするコンパイラーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;&lt;small&gt;（開発中のバージョン）&lt;/small&gt;を都度フォークして、現在活発に開発中です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）を除いた、すべての機能が利用できるようになっています。&lt;br /&gt;
現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;を実用する上で必要不可欠であろう、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;もサポートされています。&lt;br /&gt;
つまり、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルされた&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を呼んだり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことができます！&lt;br /&gt;
何かしらの&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;処理を行う場合は、基本的にこの&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことになります。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;ahc-cabal&lt;/code&gt;という名前のコマンドで、&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;パッケージを利用することもできます。&lt;br /&gt;
こちらは&lt;code&gt;cabal&lt;/code&gt;コマンドの単純なラッパーです。&lt;code&gt;ahc-cabal new-build&lt;/code&gt;などと実行すれば、外部のパッケージに依存したアプリケーションも、まとめて&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルできます。&lt;br /&gt;
本格的に開発する上では欠かせないツールでしょう。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、“&lt;span class=&#34;ascii&#34;&gt;A linker which performs aggressive dead-code elimination, producing as small WebAssembly binary as possible.&lt;/span&gt;”と謳っているとおり、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムを抱えているにしては、比較的小さい&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;ファイルを生成するそうです。&lt;br /&gt;
というわけで手元で試してみたところ、下記のような結果になりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空っぽのプログラム（&lt;code&gt;main = return ()&lt;/code&gt;しかしないソース）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;36KB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。なかなかいい感じですね。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;168KB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。未圧縮でこれなら確かに十分軽いでしょう。&lt;span class=&#34;ascii&#34;&gt;Webpack&lt;/span&gt;などで結合・&lt;span class=&#34;ascii&#34;&gt;minify&lt;/span&gt;するともっと軽くできますし。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今回私が移植を試みたアプリ（詳細は後ほど）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1.9MB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。うーん、ちょっと苦しいような…😥。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2.1MB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。&lt;code&gt;.mjs&lt;/code&gt;ファイルの内容は特に変わりませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、移植前の元のソースを含むアプリを、&lt;span class=&#34;ascii&#34;&gt;Linux 64bit&lt;/span&gt;向けの&lt;span class=&#34;ascii&#34;&gt;ELF&lt;/span&gt;ファイルとしてビルドして比較してみたところ、&lt;code&gt;.wasm&lt;/code&gt;ファイルよりも少し小さいぐらいでした。&lt;br /&gt;
詳細な内訳が気にはなりますが、今のソースですと大体これぐらいが限界なのかも知れません&lt;small&gt;（でも&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;は現状&lt;span class=&#34;ascii&#34;&gt;32bit&lt;/span&gt;バイナリー相当のはずだし、もう少し小さくならないものか…）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を利用して開発すると、ほぼ最新の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版が使える、というところも、新しもの好きな&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;をわくわくさせるところですね！&lt;small&gt;（今回はあいにく新しい機能について調べる余裕もなかったので、特に恩恵は受けてませんが…😅）&lt;/small&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をフォークしていくつかの機能を追加して作られているものです。&lt;br /&gt;
しかし幸いオリジナルとの差分が十分に小さく、作者が定期的に&lt;span class=&#34;ascii&#34;&gt;rebase&lt;/span&gt;することができています。&lt;br /&gt;
詳細な違いは&lt;a href=&#34;https://tweag.github.io/asterius/custom-ghc/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;About the custom GHC fork&lt;/span&gt;&lt;/a&gt;にまとまっています。近い将来&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;本体に取り込まれそうな修正ばかりではないかと。&lt;/p&gt;
&lt;p&gt;それからこれは、ブラウザーで&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすことができるという点で&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の競合に当たる、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;と比較した場合の話ですが、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を利用して、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;strong&gt;直接&lt;/strong&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶことができるようになっているのも、優れた点と言えるでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;は&lt;a href=&#34;https://github.com/ghcjs/ghcjs/blob/3959a9321a2d3e2ad4b8d4c9cc436fcfece99237/doc/foreign-function-interface.md#calling-haskell-from-javascript&#34;&gt;こちらのドキュメント曰く&lt;/a&gt;、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶ機能は備えてはいるものの、簡単ではないためドキュメントも書かれておらず、推奨されていません。&lt;br /&gt;
これでは状況によってはかなり使いづらいでしょう。&lt;br /&gt;
今回私が試したように、コアとなる処理だけを&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数として書いて、それを&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼び出すということができないのです。&lt;/p&gt;
&lt;p&gt;一方&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;では、例えば👇のように書くことで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;がエクスポートする関数として、&lt;code&gt;func&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにすることができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;foreign export javascript &lt;span class=&#34;st&#34;&gt;&amp;quot;func&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし、実際に今回試してみたところ、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;ではまだバグがあったので、この用途では依然使いにくいという状況ではありますが…（詳細は後で触れます）。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、やっぱりまだまだ開発中で、バグが多いです。&lt;br /&gt;
今回の目的もバグのために果たせませんでした😢。&lt;/p&gt;
&lt;p&gt;先ほども触れたとおり、特に未完成なのが、&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;なら使えるはずの&lt;code&gt;IO&lt;/code&gt;な関数の多くが使えませんし、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に至っては一切利用できません。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;については、現状、&lt;small&gt;（&lt;code&gt;putStrLn&lt;/code&gt;などのよく使われる）&lt;/small&gt;一部を除き、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;&lt;small&gt;（&lt;code&gt;foreign import javascript&lt;/code&gt;）&lt;/small&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数経由でよばなけれなりません。&lt;br /&gt;
これは、入出力関連の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を一切持たないという現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の事情を考えれば、致し方ない仕様だとも言えます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/WebAssembly/WASI&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WASI&lt;/span&gt;&lt;/a&gt;の策定によってこの辺の事情が変わるまでの間に、すべて&lt;code&gt;foreign import javascript&lt;/code&gt;で賄うというのも、なかなか面倒なことでしょうし。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に関しては、現在&lt;a href=&#34;https://github.com/tweag/asterius/pull/81&#34;&gt;こちらのブランチ&lt;/a&gt;で開発中です。…と、思ったらこの&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;、&lt;span class=&#34;ascii&#34;&gt;Close&lt;/span&gt;されてますね…。&lt;br /&gt;
これに関して詳しい事情はわかりません。いずれにしても、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を実装するには、コンパイル時にその場で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を評価するためのインタープリターが別途必要だったりして、結構ハードルが高いのです。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;RTS&lt;/span&gt;&lt;small&gt;（この場合、コンパイルした&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすのに必要な&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイル）&lt;/small&gt;が&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;に依存している関係で、&lt;span class=&#34;ascii&#34;&gt;V8&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SpiderMonkey&lt;/span&gt;でないと動かない点もまだまだ、という感じです。&lt;br /&gt;
ブラウザーで言うと、&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;日時点で&lt;span class=&#34;ascii&#34;&gt;Chrome&lt;/span&gt;か、&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版以降でないと使用できません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のドキュメント「&lt;a href=&#34;https://tweag.github.io/asterius/ir/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IR types and transformation passes&lt;/span&gt;&lt;/a&gt;」をざっくり要約してみると、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は以下のような流れで動くそうです。&lt;br /&gt;
実際には&lt;code&gt;ahc-link&lt;/code&gt;というコマンドがこれらの手順をまとめて実行するので、ユーザーの皆さんはあまり意識する必要はないでしょう。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#frontend-plugins&#34;&gt;フロントエンドプラグイン&lt;/a&gt;という仕組みでラップした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;&lt;small&gt;（のフォーク）&lt;/small&gt;を使い、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が生成した&lt;span class=&#34;ascii&#34;&gt;Cmm&lt;/span&gt;という中間言語で書かれたコードを、&lt;code&gt;AsteriusModule&lt;/code&gt;という独自のオブジェクトに変換します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ahc-ld&lt;/code&gt;という専用のリンカーで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;向けにリンクします。&lt;/li&gt;
&lt;li&gt;最後に、&lt;code&gt;ahc-dist&lt;/code&gt;というコマンドで、リンクしたモジュールを実行できる状態にします。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/binaryen&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;binaryen&lt;/span&gt;&lt;/a&gt;か、&lt;a href=&#34;https://github.com/tweag/asterius/tree/master/wasm-toolkit&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;wasm-toolkit&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;を書く言語内&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;を利用して、&lt;code&gt;ahc-ld&lt;/code&gt;がリンクしたモジュールを検証し、&lt;code&gt;.wasm&lt;/code&gt;ファイルに変換して、&lt;/li&gt;
&lt;li&gt;実行時に必要な&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイルをコピーして、&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースにおける&lt;code&gt;main&lt;/code&gt;関数を実行する、エントリーモジュールを作ります。&lt;br /&gt;
あとはこれを&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;ファイルから&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグで参照すれば、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;が動きます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/h1&gt;
&lt;p&gt;ここからは、私が以前作った&lt;a href=&#34;https://github.com/igrep/igrep-cashbook/tree/master/hs2&#34;&gt;アプリケーション&lt;/a&gt;のコアに当たる関数を&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;でコンパイルすることで、ブラウザー上で動かせるようチャレンジした時の体験談を紹介します。&lt;/p&gt;
&lt;p&gt;今回試みたアプリケーションは、単純なコマンドラインアプリケーションです。&lt;br /&gt;
詳細は省きますが、行単位で書かれたファイルをパースして、項目ごとの合計を計算するだけの、ありふれたものです。&lt;br /&gt;
パーサーは&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;を使って作り、整数の四則演算ができるようなっているのも特徴です。&lt;br /&gt;
そのアプリケーションの処理のほとんどすべてに当たる、ファイル名とその中身を受け取って、計算結果を文字列で返す関数（&lt;code&gt;FilePath -&amp;gt; Text -&amp;gt; Text&lt;/code&gt;）を、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;でエクスポート&lt;small&gt;（&lt;code&gt;foreign export javascript&lt;/code&gt;）&lt;/small&gt;し、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにしてみました。&lt;/p&gt;
&lt;p&gt;アプリケーション自体の書き換えはほとんど必要なかったものの、依存関係を減らしたり、依存するパッケージを書き換えたりするのが大変でした。&lt;br /&gt;
というのも、先ほど触れたとおり、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は現状「&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）」が一切使用できないので、取り除かなければコンパイルエラーになってしまいます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているだけで依存関係の解決すらできないのはなかなかつらいものでした。&lt;br /&gt;
&lt;a href=&#34;https://docs.haskellstack.org/en/stable/dependency_visualization/&#34;&gt;&lt;code&gt;stack dot&lt;/code&gt;&lt;/a&gt;コマンドを使って依存関係のツリーを作り、それを見て&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているパッケージを割り出し、そのパッケージの必要な関数のみを切り出すことでどうにか回避できました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/monoidal-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;monoidal-containers&lt;/span&gt;&lt;/a&gt;パッケージと&lt;a href=&#34;http://hackage.haskell.org/package/foldl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;foldl&lt;/span&gt;&lt;/a&gt;パッケージがそれでした。&lt;br /&gt;
幸い、どちらも依存しているのはごく一部だったで、必要な部分だけをコピペして使うことにしました。&lt;br /&gt;
それから、&lt;code&gt;IO&lt;/code&gt;への依存もなくすために、&lt;a href=&#34;http://hackage.haskell.org/package/text&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;&lt;/a&gt;パッケージから&lt;code&gt;*.IO&lt;/code&gt;なモジュールを取り除いたりもしました。&lt;/p&gt;
&lt;p&gt;当然、元々のアプリケーションも&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;パッケージの&lt;code&gt;*.IO&lt;/code&gt;なモジュールを使ってはいたので、それを使わないよう修正する必要がありました。&lt;br /&gt;
しかしそこは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;。そうした&lt;code&gt;IO&lt;/code&gt;に依存した関数から純粋な関数を切り出すのは、型システムのおかげで大変楽ちんでした！😤&lt;br /&gt;
入出力をするのに&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使わないといけない、という現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の制約が、偶然にもマッチしたわけですね！&lt;br /&gt;
純粋じゃない関数はときめかないので捨て去ってしまいましょう✨&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果&lt;/h2&gt;
&lt;p&gt;ここまで頑張った結果、目的の関数を&lt;code&gt;foreign export javascript&lt;/code&gt;してコンパイルを通すことはできました🎉&lt;br /&gt;
しかし、実際にブラウザー上で動かしてみたところ、&lt;a href=&#34;https://github.com/tweag/asterius/issues/105&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;のバグ&lt;/a&gt;にハマってしまいました…😢 肝心の&lt;code&gt;foreign export javascript&lt;/code&gt;した関数が、返すべき値を返してくれないのです！&lt;br /&gt;
恐らく&lt;code&gt;foreign export javascript&lt;/code&gt;を使わずに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;側から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶようにしていれば、今回の問題は回避できたのではないかと思います。&lt;br /&gt;
しかし、それは今回のゴールではありませんし、あまり便利ではないのでひとまず移植は見送ることにしました。残念！&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✅おわりに&lt;/h1&gt;
&lt;p&gt;今回&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を試したことで、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かす、もう一つの可能性を知ることができました。&lt;br /&gt;
とは言え、バグが多かったり依存関係から&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を抜き出さなければならなかったりで、まだまだ実用的とは言い難いでしょう。&lt;br /&gt;
しかし、今回報告したバグが直れば、ブラウザーによる処理のコアに当たる部分を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書く、という応用が利きそうです。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;Pandoc&lt;/span&gt;など&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製アプリケーションをブラウザーから操作する、なんてアプリケーション作りが捗りそうですね！&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://caniuse.com/#feat=bigint&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Can I use&lt;/span&gt;&lt;/a&gt;曰く安定版でも&lt;code&gt;about:config&lt;/code&gt;を書き換えればすでに使えるとのことなんですが、なぜか手元の&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt; 安定版ではうまくいきませんでした。確かに&lt;code&gt;about:config&lt;/code&gt;にそれらしき設定はあるものの、&lt;code&gt;true&lt;/code&gt;にしても何も変わらず…😰。&lt;br /&gt;
ついでに細かいことを言うと、&lt;span class=&#34;ascii&#34;&gt;Firefox Nightly&lt;/span&gt;は&lt;code&gt;about:config&lt;/code&gt;を書き換えなくても使え、&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版では&lt;code&gt;about:config&lt;/code&gt;を書き換えると使えました。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/strip-ansi-escape.html&#34; lang=&#34;ja&#34;&gt;strip-ansi-escapeというパッケージをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/stack-ghc8.8.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/stack-ghc8.8.html</id><title type="text">GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする</title><updated>2019-05-02T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/stack-ghc8.8.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、我らが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクトスタンダードなコンパイラー、&lt;a href=&#34;https://mail.haskell.org/pipermail/ghc-devs/2019-April/017550.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン&lt;span class=&#34;ascii&#34;&gt;8.8.1-alpha1&lt;/span&gt;がリリースされました&lt;/a&gt;。&lt;br /&gt;
このリリースはまだアルファ版であることからわかるとおり、主にテスト目的で使用するためのものです。&lt;br /&gt;
なのでいち早く試してみて、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のデバッグに貢献してみましょう。&lt;/p&gt;
&lt;p&gt;そこで今回は、最近&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めた方なら使っている方も多いであろう、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使ってこの新しい&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールし、あなたのライブラリー・アプリケーションでテストする方法を紹介いたします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr-cabal-installでやったほうがよさそう&#34; title=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TL;DR cabal-install&lt;/span&gt;でやったほうがよさそう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-infoを作る&#34; title=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; &lt;code&gt;setup-info&lt;/code&gt;を作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#必要ならallow-newerを有効にする&#34; title=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; （必要なら）&lt;span class=&#34;ascii&#34;&gt;allow-newer&lt;/span&gt;を有効にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-indicesを設定してhead.hackageを利用できるようにする&#34; title=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;3. package-indices&lt;/span&gt;を設定して、&lt;span class=&#34;ascii&#34;&gt;head.hackage&lt;/span&gt;を利用できるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stack-buildを実行しつつひたすらextra-depsを追加編集&#34; title=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;4. stack build&lt;/span&gt;を実行しつつ、ひたすら&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;を追加・編集&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#それでもうまくいかない場合-extra-depsを使い倒す&#34; title=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;それでもうまくいかない場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;extra-deps&lt;/code&gt;を使い倒す&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#自分以外の人が対象のパッケージを修正した場合&#34; title=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;自分以外の人が対象のパッケージを修正した場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#自分で対象のパッケージを修正するという場合&#34; title=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;自分で対象のパッケージを修正する、という場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#対象のパッケージがgitリポジトリーで管理されてない場合は&#34; title=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;対象のパッケージが&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーで管理されてない場合は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#番外編-operation-vanguard&#34; title=&#34;番外編-operation-vanguard&#34;&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: Operation Vanguard&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tldr-cabal-installでやったほうがよさそう&#34; title=&#34;tldr-cabal-installでやったほうがよさそう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TL;DR cabal-install&lt;/span&gt;でやったほうがよさそう&lt;/h1&gt;
&lt;p&gt;いきなりやろうとすることを真っ向から否定するようで恐縮ですが…😅&lt;br /&gt;
実際に私が試しにビルドしてみた感じ、普通に&lt;a href=&#34;https://www.haskell.org/cabal/download.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;をこちらから&lt;/a&gt;インストールして、&lt;code&gt;cabal new-build --with-ghc=ghc-8.8.0.20190424&lt;/code&gt;などと実行した方がいいんじゃないかという気がしました…。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールする機能はないので、その場合は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は別途インストールすることになります&lt;small&gt;（&lt;a href=&#34;https://github.com/haskell/ghcup&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt;が使える？）&lt;/small&gt;。&lt;br /&gt;
&lt;a href=&#34;../2017/06-ghc-install.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@takenobu-hs&lt;/span&gt;さんが書いてくれた、こちらの記事&lt;/a&gt;を参考にどうぞ！&lt;/p&gt;
&lt;p&gt;なお、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でやると面倒な理由についての詳細はこれから述べる手順で適宜触れます…。&lt;/p&gt;
&lt;h1 id=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#setup-infoを作る&#34; title=&#34;setup-infoを作る&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; &lt;code&gt;setup-info&lt;/code&gt;を作る&lt;/h1&gt;
&lt;p&gt;まずはじめに、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールする際に参照する、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#setup-info&#34;&gt;&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;を作りましょう。&lt;br /&gt;
&lt;code&gt;setup-info&lt;/code&gt;は&lt;code&gt;stack setup&lt;/code&gt;や&lt;code&gt;stack build&lt;/code&gt;を実行したとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;などの必要なソフトウェアがインストールされていなかった際、自動で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールするために必要な情報です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンや対象となるプラットフォームごとに、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のビルド済み&lt;span class=&#34;ascii&#34;&gt;tarball&lt;/span&gt;への&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;やそのチェックサムが書いてあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はここに書かれた&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;にアクセスすることで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールしているんですね。&lt;/p&gt;
&lt;p&gt;デフォルトでは、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は&lt;a href=&#34;https://raw.githubusercontent.com/commercialhaskell/stackage-content/master/stack/stack-setup-2.yaml&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;&lt;/a&gt;ファイルを&lt;code&gt;setup-info&lt;/code&gt;として扱っています。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;には&lt;a href=&#34;https://www.stackage.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;&lt;/a&gt;が参照している、安定版の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;については書いてあるものの、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;にも&lt;span class=&#34;ascii&#34;&gt;Stackage Nightly&lt;/span&gt;にもまだ採用されていない&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;については、書かれていません。&lt;br /&gt;
当然アルファ版である&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;が書かれることはないため、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;用の&lt;code&gt;setup-info&lt;/code&gt;を作る必要があります。&lt;/p&gt;
&lt;p&gt;それでは書いてみましょう… と、言いたいところですが、この&lt;code&gt;setup-info&lt;/code&gt;、実際のところ自分で直接書く必要はなく、&lt;span class=&#34;ascii&#34;&gt;YAML&lt;/span&gt;ファイルへの&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;やパスを指定するだけで&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は参照しに行ってくれます！&lt;br /&gt;
と、言うわけで、&lt;a href=&#34;https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4&#34;&gt;こちらに&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;向けの&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;を作ってアップロードしておきました！&lt;br /&gt;
&lt;small&gt;（申し訳なくも&lt;span class=&#34;ascii&#34;&gt;Linux&lt;/span&gt;についてはどう書けばいいかわからず、&lt;span class=&#34;ascii&#34;&gt;macOS&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Windows 64bit&lt;/span&gt;のみ対応いたしました… あしからず。🙇）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;ひとまずみなさんは、下記のいずれかの方法で指定するだけでこの手順はクリアできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stack.yaml&lt;/code&gt;に記載する&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ghc-8.8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;setup-info:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://gist.githubusercontent.com/igrep/7298e1e2515059ae332feaf5501c41a4/raw/d69cc0b75d9be6735bdfcca6aa3eb6398d98983f/stack-setup-info.yaml&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ... 以下略 ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ビルドしたいプロジェクトや、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;を試す用のディレクトリーを作って、そこに👆の内容が書かれた&lt;code&gt;stack.yaml&lt;/code&gt;を置きましょう。&lt;br /&gt;
ちょっと試したいだけならそのディレクトリーで&lt;code&gt;stack exec ghci&lt;/code&gt;などと実行すれば&lt;span class=&#34;ascii&#34;&gt;OK&lt;/span&gt;です！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stack setup&lt;/code&gt;コマンドのオプションとして渡す&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stack setup 8.8.0.20190424 --setup-info-yaml https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4/raw/d69cc0b75d9be6735bdfcca6aa3eb6398d98983f/stack-setup-info.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--setup-info-yaml&lt;/code&gt;オプションを指定した上で&lt;code&gt;8.8.0.20190424&lt;/code&gt;という引数を与えるのがポイントです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版の慣習上、&lt;code&gt;8.8.1-alpha1&lt;/code&gt;&lt;strong&gt;ではなく&lt;/strong&gt;&lt;code&gt;8.8.0.20190424&lt;/code&gt;となっている点に注意してください！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;8.8.1-alpha1&lt;/span&gt;じゃなくて、自分でビルドした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を&lt;code&gt;stack&lt;/code&gt;でインストールできるようにしたい！」というマニアなあなたは、&lt;a href=&#34;https://gist.github.com/igrep/7298e1e2515059ae332feaf5501c41a4&#34;&gt;今回私が作った&lt;code&gt;setup-info&lt;/code&gt;&lt;/a&gt;をどうぞ参考にしてください！🙇&lt;/p&gt;
&lt;h1 id=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#必要ならallow-newerを有効にする&#34; title=&#34;必要ならallow-newerを有効にする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; （必要なら）&lt;span class=&#34;ascii&#34;&gt;allow-newer&lt;/span&gt;を有効にする&lt;/h1&gt;
&lt;p&gt;ここからは、何かしら依存するパッケージがあるライブラリー・アプリケーションを&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;で試しにビルドしたいという方向けです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC 8.8.1-alpha1&lt;/span&gt;をちょっと試したいだけという方はこれ以降を読む必要はありません。&lt;/p&gt;
&lt;p&gt;まずは、ひとまず対象となるプロジェクトの&lt;code&gt;stack.yaml&lt;/code&gt;に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;allow-newer:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を追記しましょう。&lt;br /&gt;
これは、依存している&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;パッケージのバージョンの、上限を取っ払うというものです。&lt;br /&gt;
依存パッケージのバージョンの上限は、パッケージの開発者が自身のパッケージを確実にビルドできるよう、「このパッケージはあのパッケージのバージョン&lt;span class=&#34;ascii&#34;&gt;N.M&lt;/span&gt;&lt;strong&gt;以下&lt;/strong&gt;じゃないとビルドできないよ！」と&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;の依存関係リゾルバーに教えてあげるためのものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;&lt;small&gt;（と、恐らく&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;も必要に応じて）&lt;/small&gt;は、通常であればこの上限を見て、どのバージョンのパッケージをインストールするか決めます。&lt;br /&gt;
その上限により、残念ながら依存関係の解決に失敗することがあるのです。&lt;br /&gt;
そこでそうしたエラーを避けるためにも&lt;code&gt;allow-newer: true&lt;/code&gt;と設定して、上限を無視してみましょう。&lt;/p&gt;
&lt;p&gt;というのも、このバージョンの上限はしばしば、予防のために実際より厳しめに設定されることがあるためです&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
そりゃそうですよね。今作っているパッケージが依存している&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が、どのバージョンで使用できなくなるかなんて、大抵のパッケージではわかりませんし。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の世界には&lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;PVP&lt;/span&gt;&lt;/a&gt;という、&lt;a href=&#34;https://semver.org/lang/ja/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semantic Versioning&lt;/span&gt;&lt;/a&gt;と似た思想のバージョン変更ポリシーがありまして、&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の互換性がなくなるような修正が含まれる場合、次のバージョンでは&lt;code&gt;A.B.C&lt;/code&gt;の&lt;code&gt;A.B&lt;/code&gt;の箇所を変更することになっています。&lt;br /&gt;
これを信じて依存バージョンの上限（と下限）を設定してみても、実際にあなたが依存している&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が使用できなくなるとは限らないのです。&lt;/p&gt;
&lt;p&gt;したがって、依存パッケージのバージョンの上限は、実際には無視してもよい場合がしばしばあります。&lt;br /&gt;
もちろん、自分で依存パッケージのバージョンを正しく書き換えて対応するというのもアリですし、将来的にはそうした方がより望ましいやり方です。&lt;br /&gt;
また、&lt;code&gt;allow-newer: true&lt;/code&gt;を設定することにより、&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;とは関係のない原因でビルドが失敗&lt;/strong&gt;する可能性がある点にも注意してください。&lt;br /&gt;
とは言え、今回は手っ取り早くビルドしてみるために、敢えて&lt;code&gt;allow-newer: true&lt;/code&gt;を設定することと致しました。&lt;br /&gt;
「私はバージョンの上限を直してみたいんだー！」という方は、是非チャレンジしてみてください。&lt;/p&gt;
&lt;h1 id=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#package-indicesを設定してhead.hackageを利用できるようにする&#34; title=&#34;package-indicesを設定してhead.hackageを利用できるようにする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;3. package-indices&lt;/span&gt;を設定して、&lt;span class=&#34;ascii&#34;&gt;head.hackage&lt;/span&gt;を利用できるようにする&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;stack.yaml&lt;/code&gt;に書いておいた方が良い設定がもう一つあります。&lt;br /&gt;
それは、&lt;a href=&#34;http://head.hackage.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;&lt;/a&gt;の設定です。&lt;/p&gt;
&lt;p&gt;これからビルドするあなたのパッケージは、きっとたくさんのパッケージに依存していることでしょう。&lt;br /&gt;
残念ながら、その中には&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応できていないものも数多くあるでしょう😰。&lt;br /&gt;
特に今回は&lt;a href=&#34;https://scrapbox.io/haskell-shoen/MonadFail&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Proposal&lt;/span&gt;&lt;/a&gt;による、&lt;code&gt;Monad&lt;/code&gt;型クラスの仕様変更を適切に周知できていなかったこともあり、まだ多くのパッケージが対応できていないようです。&lt;/p&gt;
&lt;p&gt;しかし、まだ希望はあります。&lt;br /&gt;
あなたの依存パッケージに対する必要な修正は、すでに&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチにマージされているかも知れませんし、すでに誰かが&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;を送っているかも知れません。&lt;br /&gt;
さらにラッキーな場合、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にパッチを当てたバージョンが上がっていることでしょう！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;は、今回のように&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版をいち早く試したい人が、新しい&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に向けて修正を加えたパッケージを、いち早くアップロードするサイトです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/hvr/head.hackage&#34;&gt;こちらのリポジトリー&lt;/a&gt;にパッチをアップロードすることで、&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;から、普通の&lt;span class=&#34;ascii&#34;&gt;hackage&lt;/span&gt;にあるパッケージとしてダウンロードできるようにしてくれます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で利用するには、下記のように、&lt;code&gt;package-indices:&lt;/code&gt;という設定を、&lt;code&gt;stack.yaml&lt;/code&gt;に加えてください。&lt;br /&gt;
下記のように記載することで、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にある修正済みのパッケージを優先して取得してくれるようになります&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;package-indices:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; head.hackage&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;download-prefix:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://head.hackage.haskell.org/package/&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;http:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://head.hackage.haskell.org/01-index.tar.gz&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Hackage&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;download-prefix:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://hackage.haskell.org/package/&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;http:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://hackage.haskell.org/01-index.tar.gz&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;対応済みのパッケージを、簡単に取得できるようになります！&lt;/p&gt;
&lt;h1 id=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stack-buildを実行しつつひたすらextra-depsを追加編集&#34; title=&#34;stack-buildを実行しつつひたすらextra-depsを追加編集&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;4. stack build&lt;/span&gt;を実行しつつ、ひたすら&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;を追加・編集&lt;/h1&gt;
&lt;p&gt;ここまで設定できたら、いよいよ&lt;code&gt;stack build&lt;/code&gt;してみましょう&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;！&lt;br /&gt;
とは言え、この状態ではほぼ間違いなく失敗が続くので、&lt;code&gt;stack build --file-watch&lt;/code&gt;と、&lt;strong&gt;&lt;code&gt;--file-watch&lt;/code&gt;オプションを付けて、&lt;code&gt;stack.yaml&lt;/code&gt;を編集する度に再度&lt;/strong&gt;ビルドが実行されるようにするのをおすすめします。&lt;/p&gt;
&lt;p&gt;と、言うのも、恐らく次👇のようなエラーがたくさん出ると思われるからです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
In the dependencies for wss-client-0.2.1.1:
    http-client must match &amp;gt;=0.5.13, but the stack configuration has no specified version  (latest
                matching version is 0.6.4)
    http-client-tls needed, but the stack configuration has no specified version  (latest matching
                    version is 0.3.5.3)
    network-uri needed, but the stack configuration has no specified version  (latest matching
                version is 2.6.1.0)
    websockets must match &amp;gt;=0.12.0 &amp;amp;&amp;amp; &amp;lt;0.13, but the stack configuration has no specified version
               (latest matching version is 0.12.5.3)
needed since wss-client is a build target.

Some different approaches to resolving this:

  * Consider trying &amp;#39;stack solver&amp;#39;, which uses the cabal-install solver to attempt to find some
    working build configuration. This can be convenient when dealing with many complicated
    constraint errors, but results may be unpredictable.

  * Recommended action: try adding the following to your extra-deps
    in C:\Users\igrep\Downloads\direct-hs\stack-ghc-8.8.yaml:

attoparsec-0.13.2.2@sha256:6a0baba19991e84ef939056e7b411ad3a1ea0fb5e1e8fce7ca50e96c84b206c8
base-compat-0.10.5@sha256:d49e174ed0daecd059c52d13d4f4de87b5609c81212a22adbb92431f9cd58fff
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このエラー、見かけたことがある人も多いでしょう。&lt;br /&gt;
そう、指定した&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が使用するパッケージのバージョンの一覧。&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;に登録されている&lt;code&gt;lts-13.12&lt;/code&gt;などもその一つ）&lt;/small&gt;に、必要なバージョンのパッケージが登録されていない場合に起こるエラーです。&lt;br /&gt;
みなさんが普段利用する&lt;code&gt;lts-13.12&lt;/code&gt;などの&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;では、数多くのパッケージが登録されています&lt;small&gt;（&lt;a href=&#34;https://www.stackage.org/lts-13.19&#34;&gt;最新版の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell 13.19&lt;/span&gt;&lt;/a&gt;で&lt;span class=&#34;ascii&#34;&gt;2346&lt;/span&gt;件。&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;をメンテしている皆さんのおかげですね）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;一方、最初の手順で我々が指定した&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;、すなわち&lt;code&gt;resolver: ghc-8.8&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に添付されたパッケージ&lt;small&gt;（&lt;code&gt;base&lt;/code&gt;パッケージや、&lt;code&gt;array&lt;/code&gt;パッケージなど）&lt;/small&gt;しか入っていない、実質空っぽな&lt;span class=&#34;ascii&#34;&gt;resolver&lt;/span&gt;なのです&lt;small&gt;（&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#resolver&#34;&gt;参考&lt;/a&gt;）&lt;/small&gt;。&lt;br /&gt;
そのため、あなたが必要なほとんどのパッケージはないため、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はやむなく「&lt;code&gt;extra-deps&lt;/code&gt;にこれらのパッケージを追加してね！」というエラーを出すことになります。&lt;br /&gt;
これでは&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;の良さを生かせません…。&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;で&lt;code&gt;cabal new-build&lt;/code&gt;していれば、&lt;span class=&#34;ascii&#34;&gt;cabal-install&lt;/span&gt;は黙って必要なパッケージのバージョンを決定し、あとは&lt;code&gt;cabal new-freeze&lt;/code&gt;でもすれば、完全にビルドを再現可能な状態にしてくれます。&lt;br /&gt;
やっぱり&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はあくまでも&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;を活かすためのツールと捉えた方がいいのかも知れません😥。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extra-deps&lt;/code&gt;へのパッケージの追記を何度か繰り返すと、ようやくパッケージのビルドが始まります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;に収録されたパッケージを正しく取得できていれば、現在&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;にアップロードされているバージョンではビルドできない依存パッケージも、無事ビルドできることでしょう。&lt;br /&gt;
依存するパッケージの数にもよりますが、やっぱり時間がかかるかと思います。待ちましょう☕️。&lt;/p&gt;
&lt;h2 id=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでもうまくいかない場合-extra-depsを使い倒す&#34; title=&#34;それでもうまくいかない場合-extra-depsを使い倒す&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでもうまくいかない場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;extra-deps&lt;/code&gt;を使い倒す&lt;/h2&gt;
&lt;p&gt;しかしやっぱり、必要な変更が施されたパッケージが、&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;にもアップロードされていない場合はあります。&lt;br /&gt;
そうした場合、自分で修正して&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;を送りつつ）&lt;/small&gt;パッチを&lt;a href=&#34;https://github.com/hvr/head.hackage&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HEAD.hackage&lt;/span&gt;のリポジトリー&lt;/a&gt;にアップロードすることもできますが、&lt;code&gt;stack.yaml&lt;/code&gt;の&lt;code&gt;extra-deps&lt;/code&gt;を次のように使えば、もっと手っ取り早く修正したバージョンのビルドを試すことができます。&lt;/p&gt;
&lt;h3 id=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#自分以外の人が対象のパッケージを修正した場合&#34; title=&#34;自分以外の人が対象のパッケージを修正した場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;自分以外の人が対象のパッケージを修正した場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;自分以外の人が対象のパッケージを修正したので、すでにどこかのリポジトリーに&lt;span class=&#34;ascii&#34;&gt;push&lt;/span&gt;済みのコミットがある、という場合、下記👇のように書くと、&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーの特定のコミットを直接参照した状態で、依存関係に加えることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/github_user/repository_name.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &amp;lt;修正したコミットのSHA&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#自分で対象のパッケージを修正するという場合&#34; title=&#34;自分で対象のパッケージを修正するという場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;自分で対象のパッケージを修正する、という場合&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;そうでない場合、対象のパッケージのリポジトリーを一旦&lt;code&gt;git submodule add&lt;/code&gt;して、自分のリポジトリーの一部に含めてしまいましょう。&lt;br /&gt;
その上で、&lt;code&gt;extra-deps&lt;/code&gt;には下記のように書けば、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;はローカルのファイルシステムに置かれたディレクトリーも、直接依存するパッケージとして追加してくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./path/to/package&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逐一別のディレクトリーに&lt;code&gt;git clone&lt;/code&gt;して&lt;code&gt;git commit&lt;/code&gt;して&lt;code&gt;git push&lt;/code&gt;して作られたコミットの&lt;span class=&#34;ascii&#34;&gt;SHA&lt;/span&gt;を参照して… なんてのを繰り返していたら、面倒だからです。&lt;/p&gt;
&lt;h3 id=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#対象のパッケージがgitリポジトリーで管理されてない場合は&#34; title=&#34;対象のパッケージがgitリポジトリーで管理されてない場合は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;対象のパッケージが&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;リポジトリーで管理されてない場合は？&lt;/h3&gt;
&lt;p&gt;臨機応変に対応しましょう…😰&lt;br /&gt;
ちなみに、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;のドキュメント&lt;/a&gt;いわく&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Mercurial&lt;/span&gt;もサポートしています。&lt;/p&gt;
&lt;h1 id=&#34;番外編-operation-vanguard&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#番外編-operation-vanguard&#34; title=&#34;番外編-operation-vanguard&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;番外編&lt;span class=&#34;ascii&#34;&gt;: Operation Vanguard&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;以上が&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使った&lt;span class=&#34;ascii&#34;&gt;GHC 8.8-alpha1&lt;/span&gt;のインストール方法や、それを利用したパッケージのビルド手順です。自分で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をビルドしたときなども参考にしてみてください。&lt;br /&gt;
これで終わり…！と、言いたいところですが、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に関連して、非常に意欲的なプロジェクト💪を紹介させてください。&lt;/p&gt;
&lt;p&gt;それは、&lt;a href=&#34;https://github.com/haskell-vanguard/haskell-vanguard&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;&lt;/a&gt;です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fumieval/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;&lt;/a&gt;さんが始めた、「エコシステムの主要なパッケージの最新版を一挙に&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応させる」プロジェクトです。&lt;br /&gt;
一旦&lt;span class=&#34;ascii&#34;&gt;submodule&lt;/span&gt;として対象のパッケージのリポジトリーを&lt;span class=&#34;ascii&#34;&gt;clone&lt;/span&gt;する、という方法は、&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;のリポジトリーを見ていて知りました💡。&lt;/p&gt;
&lt;p&gt;すでに対応のほとんどが終了したとのことですが、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;に対応していないパッケージは恐らくまだたくさんあります。&lt;br /&gt;
ゴールデンウィークももう半分が終わりましたが、時間をとって&lt;span class=&#34;ascii&#34;&gt;Operation Vanguard&lt;/span&gt;のようにチャレンジしてみるのはいかがでしょうか💪💪💪&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;もっとも、私のようにものぐさな人間が作るパッケージには、そもそも上限も何も書いてないことが多いのですが…😰&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;本来であれば&lt;span class=&#34;ascii&#34;&gt;Hackage Security&lt;/span&gt;の設定も必要なはずなんですが、なぜかうまくいかず…😱。&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3844&#34;&gt;こちら&lt;/a&gt;で紹介された&lt;span class=&#34;ascii&#34;&gt;workaround&lt;/span&gt;にしたがって、関連する設定を除くことにしました…。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;code&gt;stack solver&lt;/code&gt;コマンドを使えば、この節で紹介するエラーは簡単にクリアできそうだということを聞いて試した&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Thanks,&lt;/span&gt; &lt;a href=&#34;https://github.com/mizunashi-mana&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mizunashi-mana&lt;/span&gt;&lt;/a&gt;さん！）&lt;/small&gt;のですが、手元のパッケージでは依存関係を解決できず、エラーになってしまいました…。&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/asterius.html&#34; lang=&#34;ja&#34;&gt;AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/string-gap-for-heredoc-like.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell でも heredoc がしたい&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/string-gap-for-heredoc-like.html</id><title type="text">Haskell でも heredoc がしたい</title><updated>2019-04-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/string-gap-for-heredoc-like.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;多くの言語では， &lt;span class=&#34;ascii&#34;&gt;here document (heredoc)&lt;/span&gt; という言語機能が搭載されています．これは，複数行の文字列をコード中に文字列リテラルとして埋め込める機能です．今日は &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; ほど使い勝手がよくないものの，長い文字列を埋め込める， &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準の &lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt; という機能を紹介したいと思います．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#string-gap&#34; title=&#34;string-gap&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp-下での注意事項&#34; title=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; 下での注意事項&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;string-gap&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#string-gap&#34; title=&#34;string-gap&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;bash&lt;/span&gt; では，複数行の文字列を，次の記法で埋め込むことができます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;bu&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;EOS&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;some text&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;is multilined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;EOS&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;va&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは，&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;some text
is multilined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という文字列が出力されます．多くの言語では似たような構文で &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; が採用されていて，特殊な記号の後に終端記号を書いて，その後の終端記号までを文字列リテラルとして扱われます． &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; では残念ながらこのような機能は搭載されていませんが，代わりに次の記法が提供されています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \some text\n\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \is multilined\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この実行結果は，前の &lt;span class=&#34;ascii&#34;&gt;bash&lt;/span&gt; スクリプトの結果と同じになります． &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; より色々ごちゃごちゃしてますが，複数行の文字列リテラルを書けます．この機能は， &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の複数行文字列リテラルまたは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準では &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; と呼ばれています &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;．記法はかなり単純で，文字列中のバックスラッシュ &lt;code&gt;\&lt;/code&gt; で囲まれた空白が無視されるだけです．改行も空白に含まれます．なので，上のプログラムは以下のプログラムと同じです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;some text\nis multilined&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使わないで複数行の文字列リテラルを書くことはできません．また， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; は空白を全て無視するため，改行を含まない長い文字列を複数行に渡って埋め込むのにも使えます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; は &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準でレイアウトルールの処理から除外されているため&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;，インデントを考慮する必要はありません&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;one line&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\multiline\n\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;st&#34;&gt;\text\&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;st&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cpp-下での注意事項&#34; title=&#34;cpp-下での注意事項&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; 下での注意事項&lt;/h2&gt;
&lt;p&gt;ただ， &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt; の &lt;code&gt;CPP&lt;/code&gt; 拡張を使用する際注意が必要です． &lt;code&gt;CPP&lt;/code&gt; では，バックスラッシュで終わる行は，バックスラッシュを除いて次の行と繋げる処理が行われます&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;．この処理のため， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使用した以下のコードは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;  \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cpp&lt;/code&gt; により次のように変換されてしまいます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very   \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このため，結果的にコンパイルエラーになってしまいます．このため， &lt;code&gt;CPP&lt;/code&gt; を使う際は， &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; を使わず &lt;code&gt;CPP&lt;/code&gt; の機能を使う必要があります．例えば，上記のプログラムは，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;This is very very very \&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;st&#34;&gt;\ \long long long long long long long long text.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くと &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; をそのまま使った時のプログラムと同じになります．一番最初の &lt;code&gt;\&lt;/code&gt; は &lt;code&gt;CPP&lt;/code&gt; のためのもの，次の &lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt; つは &lt;span class=&#34;ascii&#34;&gt;gap&lt;/span&gt; になります．&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#まとめ&#34; title=&#34;まとめ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;string gap&lt;/span&gt; は，昔から &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 標準で付いている機能なので，ぜひ使ってみてください．&lt;/p&gt;
&lt;p&gt;ただ， &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; より使い勝手は良くないです．変数展開やもう少し見栄えの良い &lt;span class=&#34;ascii&#34;&gt;heredoc&lt;/span&gt; が欲しい場合は， &lt;a href=&#34;http://hackage.haskell.org/package/here&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;here&lt;/span&gt; パッケージ&lt;/a&gt; や &lt;a href=&#34;http://hackage.haskell.org/package/shakespeare&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Shakespeare&lt;/span&gt;&lt;/a&gt; などの &lt;span class=&#34;ascii&#34;&gt;TemplateHaskell&lt;/span&gt; を使ったテンプレートエンジンの使用を検討してみるといいかもしれませんね．&lt;/p&gt;
&lt;p&gt;では，今日はこれでノシ&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-200002.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;2.6&lt;/span&gt; 節&lt;/a&gt;の最後の方で紹介されています．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch10.html#x17-17800010.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;10.3&lt;/span&gt; 節&lt;/a&gt; で触れられています．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/cpp/Initial-processing.html#index-continued-lines&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;CPP&lt;/span&gt; の仕様の &lt;span class=&#34;ascii&#34;&gt;1.2&lt;/span&gt; 節&lt;/a&gt; で触れられています．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/stack-ghc8.8.html&#34; lang=&#34;ja&#34;&gt;GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hourly-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;DroneでHaskell Antennaを毎時更新する&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id><title type="text">Drone 1.0 を GCE 上に構築する</title><updated>2019-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先月ついに &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！&lt;/p&gt;
&lt;p&gt;で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、&lt;code&gt;.drone.yml&lt;/code&gt; という設定ファイルにパイプラインを使って記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm test&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; database&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mysql&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3306&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．&lt;/p&gt;
&lt;h2 id=&#34;drone-on-gcp&#34;&gt;Drone on GCP&lt;/h2&gt;
&lt;p&gt;Drone 自体は Docker で起動できる(&lt;a href=&#34;https://docs.drone.io/installation&#34;&gt;公式ドキュメント&lt;/a&gt;)． docker-compose を次のように記述することで簡単に起動可能だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;version:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;drone:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/lib/drone:/data&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_GITHUB_CLIENT&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_GITHUB_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_AGENTS_ENABLED=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_HOST=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_HOST&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restart:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; drone&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SERVER=http://drone&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RPC_SECRET=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;DRONE_SECRET&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-34&#34; title=&#34;34&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; DRONE_RUNNER_NAME=$&lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;HOSTNAME&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href=&#34;/posts/2019-01-05-docker-compose-up-drone-1-0.html&#34;&gt;ローカルで試す話は前に書いた&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．&lt;/p&gt;
&lt;h3 id=&#34;gcpでの準備&#34;&gt;GCPでの準備&lt;/h3&gt;
&lt;p&gt;HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/koshilife/items/a75a69d03e2524f33c8e&#34;&gt;GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;GCEインスタンスを立てる
&lt;ul&gt;
&lt;li&gt;スペックは &lt;code&gt;n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk&lt;/code&gt; にした&lt;/li&gt;
&lt;li&gt;HTTPアクセスを許可しておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インスタンスグループを作成&lt;/li&gt;
&lt;li&gt;HTTP(S) LB を作成
&lt;ul&gt;
&lt;li&gt;バックエンド: (2)のインスタンスグループを選んで他はデフォルト値&lt;/li&gt;
&lt;li&gt;ホストとパスのルール: 特になし&lt;/li&gt;
&lt;li&gt;フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DNSのAレコードを作成
&lt;ul&gt;
&lt;li&gt;有効化されるのに長いと1時間ぐらいかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．&lt;/p&gt;
&lt;h3 id=&#34;drone-の準備と起動&#34;&gt;Drone の準備と起動&lt;/h3&gt;
&lt;p&gt;上記手順の(1)で以下のプログラムをインストール:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx の設定は雑に次のような感じ(&lt;a href=&#34;https://angristan.xyz/host-your-own-ci-cd-server-with-drone/&#34;&gt;参考&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode conf&#34;&gt;&lt;code class=&#34;sourceCode ini&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;server {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen 80 default_server;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[::]&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;:80 default_server;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  server_name _;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  return 444;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;dt&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;dt&#34;&gt;server {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  listen 80;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  server_name &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[(4)で設定するドメイン]&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  if ($http_x_forwarded_proto &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &amp;#39;http&amp;#39;) {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    return 301 https://$server_name$request_uri;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  }&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  location / {&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header Host $http_host;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; title=&#34;20&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_set_header X-Forwarded-Proto $scheme;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_pass http://localhost:8000;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_redirect off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    proxy_buffering off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;dt&#34;&gt;    chunked_transfer_encoding off;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;dt&#34;&gt;  }&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; title=&#34;26&#34;&gt;&lt;span class=&#34;dt&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで &lt;code&gt;docker-compose up -d&lt;/code&gt; とすれば良い．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/drone-1-0-in-gce/my-drone-example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;drone-起動時の環境変数&#34;&gt;Drone 起動時の環境変数&lt;/h3&gt;
&lt;p&gt;このあたりのを適宜使った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRONE_USER_FILTER
&lt;ul&gt;
&lt;li&gt;認証後に閲覧できるユーザーを絞る&lt;/li&gt;
&lt;li&gt;ただし Public は誰でも見れる(はず)&lt;/li&gt;
&lt;li&gt;ちなみに Internal はここで指定したユーザー全員が見れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_USER_CREATE
&lt;ul&gt;
&lt;li&gt;Admin ユーザーみたいな感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
&lt;ul&gt;
&lt;li&gt;この二つをオンにしておくと &lt;code&gt;docker logs&lt;/code&gt; でだいたいログを追える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;drone-の情報&#34;&gt;Drone の情報&lt;/h3&gt;
&lt;p&gt;冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.drone.io/&#34;&gt;Drone Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.drone.yml&lt;/code&gt; の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は &lt;a href=&#34;https://github.com/search?q=org%3Adrone&amp;amp;type=Issues&#34;&gt;GitHub Issue&lt;/a&gt; の他に &lt;a href=&#34;https://discourse.org/&#34;&gt;Discourse&lt;/a&gt; というサービスを使っている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.drone.io/&#34;&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/drone/home&#34;&gt;drone/home - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;Haskell の Drone クライアント&lt;/a&gt;を作るときは直接ソースコードを見ていた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;: &lt;code&gt;handler/api&lt;/code&gt; とか見ると良い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go - GitHub&lt;/a&gt;: Drone API の Go クライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid%20copy.html</id><title type="text">Sum Monoid</title><updated>2019-02-13T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid%20copy.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Sum&#34;&gt;Sum&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c))&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (+) の結合律より&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; ((a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;newtype-を使って定義する理由&#34;&gt;newtype を使って定義する理由&lt;/h2&gt;
&lt;p&gt;わざわざ &lt;code&gt;Sum&lt;/code&gt; という新しい型を作ってインスタンスを定義しなくても、&lt;code&gt;Int&lt;/code&gt; を使って直接 &lt;code&gt;Semigroup&lt;/code&gt; と &lt;code&gt;Monoid&lt;/code&gt; のインスタンスを定義すれば良いんじゃないか？と普通は思います。&lt;/p&gt;
&lt;p&gt;実際に以下の定義は問題なく動きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; mempty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、足し算と同様に掛け算もモノイドとして定義したいと思う人もいるでしょう。&lt;/p&gt;
&lt;p&gt;この時 &lt;code&gt;Int&lt;/code&gt; は既に &lt;code&gt;Semigroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt; のインスタンス定義があるため、同じファイルに以下のように定義することはできません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題を解決する方法はいくつかありますが、このような例では &lt;code&gt;newtype&lt;/code&gt; が適切ということです。&lt;/p&gt;
&lt;h2 id=&#34;law-の自動チェック-quickcheck-classes&#34;&gt;Law の自動チェック (quickcheck-classes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-classes&#34;&gt;quickcheck-classes&lt;/a&gt; を使って &lt;code&gt;Semigroup law&lt;/code&gt; と &lt;code&gt;Monoid law&lt;/code&gt; がちゃんと法則を満たすかどうかチェックしてみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Arbitrary&lt;/code&gt; が無いとチェックできないので &lt;code&gt;derive&lt;/code&gt; しています。&lt;/p&gt;
&lt;p&gt;実行はめっちゃ簡単で、&lt;code&gt;lawsCheck&lt;/code&gt; 関数と &lt;code&gt;semigroupLaws&lt;/code&gt; や &lt;code&gt;monoidLaws&lt;/code&gt; などのチェックしたい則に対応する関数を使うだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 99 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity +++ OK, passed 100 tests.
Monoid: Right Identity +++ OK, passed 100 tests.
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考までに &lt;code&gt;mempty&lt;/code&gt; の定義が Law を満たさない場合の例も載せておきます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 113 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend mempty a = a
  a = Sum {getSum = 0}
  mappend mempty a = Sum {getSum = 1}
Monoid: Right Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend a mempty = a
  a = Sum {getSum = 0}
  mappend a mempty = Sum {getSum = 1}
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じでモノイドの左単位元則 (Left Identity law) と右単位元則 (Right Identity law) が満たされていないことを教えてくれます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://people.cs.kuleuven.be/~tom.schrijvers/Research/talks/lhug4.pdf&#34;&gt;Lists and Other Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html</id><title type="text">Last Monoid</title><updated>2019-02-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Last&#34;&gt;Last&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getLast ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b            &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Last&lt;/code&gt; モノイドは &lt;code&gt;First&lt;/code&gt; モノイドとほとんど同じですが、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で結合した時に最後の値を返すという部分が異なります。&lt;/p&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-law-の確認&#34;&gt;Semigroup law の確認&lt;/h2&gt;
&lt;h3 id=&#34;case-1-b-nothing-c-nothing&#34;&gt;Case (1) (b == Nothing, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-b-just-b-c-nothing&#34;&gt;Case (2) (b == Just b’, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-3-c-just-c&#34;&gt;Case (3) (c == Just c’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;monoid-law&#34;&gt;Monoid Law&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing&#34;&gt;Case (1) (a = Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-just-a&#34;&gt;Case (2) (a = Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;具体例-partial-options-monoid&#34;&gt;具体例: Partial Options Monoid&lt;/h2&gt;
&lt;p&gt;コマンドライン引数によりオプションを受け取り、指定されなかったオプションの値に対してはデフォルト値を利用するという場面で &lt;code&gt;Last&lt;/code&gt; モノイドが活用できそうです。&lt;/p&gt;
&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を使った具体的なサンプルはこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; oInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; oOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; oLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; poInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; poOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; poLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;      { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poInputPath  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poInputPath  y&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;      , poOutputPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poOutputPath x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poOutputPath y&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;      , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poLogLevel   x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poLogLevel   y&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;      }&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;defaultPartialOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;defaultPartialOptions &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;  { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;  , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastOption ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;lastOption &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;partialOptionsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;partialOptionsParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-42&#34;&gt;&lt;a href=&#34;#cb11-42&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-43&#34;&gt;&lt;a href=&#34;#cb11-43&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; option auto (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-44&#34;&gt;&lt;a href=&#34;#cb11-44&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-45&#34;&gt;&lt;a href=&#34;#cb11-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastToEither ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb11-46&#34;&gt;&lt;a href=&#34;#cb11-46&#34;&gt;&lt;/a&gt;lastToEither errMsg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; errMsg) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getLast&lt;/span&gt;
&lt;span id=&#34;cb11-47&#34;&gt;&lt;a href=&#34;#cb11-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-48&#34;&gt;&lt;a href=&#34;#cb11-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mkOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-49&#34;&gt;&lt;a href=&#34;#cb11-49&#34;&gt;&lt;/a&gt;mkOptions &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-50&#34;&gt;&lt;a href=&#34;#cb11-50&#34;&gt;&lt;/a&gt;  oInputPath  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing input path&amp;quot;&lt;/span&gt;  poInputPath&lt;/span&gt;
&lt;span id=&#34;cb11-51&#34;&gt;&lt;a href=&#34;#cb11-51&#34;&gt;&lt;/a&gt;  oOutputPath &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing output path&amp;quot;&lt;/span&gt; poOutputPath&lt;/span&gt;
&lt;span id=&#34;cb11-52&#34;&gt;&lt;a href=&#34;#cb11-52&#34;&gt;&lt;/a&gt;  oLogLevel   &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing loglevel&amp;quot;&lt;/span&gt;    poLogLevel&lt;/span&gt;
&lt;span id=&#34;cb11-53&#34;&gt;&lt;a href=&#34;#cb11-53&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb11-54&#34;&gt;&lt;a href=&#34;#cb11-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-55&#34;&gt;&lt;a href=&#34;#cb11-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb11-56&#34;&gt;&lt;a href=&#34;#cb11-56&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-57&#34;&gt;&lt;a href=&#34;#cb11-57&#34;&gt;&lt;/a&gt;  options &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execParser &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; info partialOptionsParser &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-58&#34;&gt;&lt;a href=&#34;#cb11-58&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mkOptions (defaultPartialOptions &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; options) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-59&#34;&gt;&lt;a href=&#34;#cb11-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt;  msg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; msg&lt;/span&gt;
&lt;span id=&#34;cb11-60&#34;&gt;&lt;a href=&#34;#cb11-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; opt &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; opt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;defaultPartialOptions&lt;/code&gt; でオプションの初期値を用意しておきます。ここで指定されなかったフィールドの値はオプションで必ず指定しなければなりません。今回の例では &lt;code&gt;poOutputPath&lt;/code&gt; が必須オプションになっています。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;Last&lt;/code&gt; モノイドが効いている部分は &lt;code&gt;defaultPartialOptions &amp;lt;&amp;gt; options&lt;/code&gt; です。&lt;code&gt;mempty = Last Nothing&lt;/code&gt; となるため、期待通りの動作が得られます。&lt;/p&gt;
&lt;p&gt;デフォルト値の無いオプションが省略された場合にエラーメッセージが表示される理由としては &lt;code&gt;lastToEither&lt;/code&gt; で &lt;code&gt;getLast&lt;/code&gt; した際に &lt;code&gt;Nothing&lt;/code&gt; となるためです。&lt;/p&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;p&gt;実行結果は見やすく整形しています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# オプション無しで実行
λ&amp;gt; stack run ex3
Missing output path

# 必須オプションの -o のみ指定 (他はデフォルト値)
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot;
Options
  { oInputPath  = &amp;quot;input&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# 必須オプションの -o と -i を指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot;
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# オプションを全部指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot; -l 10
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Just 10
  }&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67&#34;&gt;The Partial Options Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2018/11/29/155311&#34;&gt;SemigroupがMonoidに恋するとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/philopon/items/a29717af62831d3c8c07&#34;&gt;optparse-applicativeをふわっと使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-11-first-monoid.html</id><title type="text">First Monoid</title><updated>2019-02-11T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-11-first-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:First&#34;&gt;First&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  a             &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;First&lt;/code&gt; モノイドは &lt;code&gt;Endo&lt;/code&gt; や &lt;code&gt;Dual&lt;/code&gt; モノイドとは定義の雰囲気が少し違いますね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFirst :: a&lt;/code&gt; ではなく &lt;code&gt;getFirst :: Maybe a&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;インスタンス宣言にクラス制約が必要無い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getFirst (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常に最初の値を返すという、一見意味の無さそうな &lt;code&gt;First&lt;/code&gt; モノイドも実は便利に使えたりします。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-law-の確認&#34;&gt;Semigroup law の確認&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing-b-nothing&#34;&gt;Case (1) (a == Nothing, b == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-nothing-b-just-b&#34;&gt;Case (2) (a == Nothing, b == Just b’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-3-a-just-a&#34;&gt;Case (3) (a == Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;monoid-law&#34;&gt;Monoid Law&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing&#34;&gt;Case (1) (a = Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-just-a&#34;&gt;Case (2) (a = Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;なぜ-getfirst-a-にしないのか&#34;&gt;なぜ getFirst :: a にしないのか？&lt;/h2&gt;
&lt;p&gt;普通は他のモノイド同様に以下のように定義したくなりますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ではなぜこのような定義にしないのでしょうか？&lt;/p&gt;
&lt;p&gt;答えは、&lt;code&gt;Monoid law&lt;/code&gt; を満たさないからです。実際に確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように成り立ちません。ちなみに &lt;code&gt;Semigroup law&lt;/code&gt; は満たします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、Semigroup からモノイドにするために &lt;code&gt;Maybe&lt;/code&gt; でラップしてあると考えて差し支えないと思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Semigroup&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Semigroup, Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getFirst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;具体例-コマンドラインパーサー&#34;&gt;具体例: コマンドラインパーサー&lt;/h2&gt;
&lt;p&gt;僕が &lt;code&gt;First&lt;/code&gt; モノイドの存在を認識したのは &lt;code&gt;stack&lt;/code&gt; のコードで &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.6/stack-1.9.3/Stack-Types-Config.html#t:ConfigMonoid&#34;&gt;ConfigMonoid&lt;/a&gt; というデータ型があり、その設定値に &lt;code&gt;First Bool&lt;/code&gt; などの型が使われているという場面でした。&lt;/p&gt;
&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を使った具体的なサンプルはこんな感じです。(Last モノイドは名前の通りです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; poInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; poOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-10&#34;&gt;&lt;a href=&#34;#cb15-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-11&#34;&gt;&lt;a href=&#34;#cb15-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;partialOptionsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-12&#34;&gt;&lt;a href=&#34;#cb15-12&#34;&gt;&lt;/a&gt;partialOptionsParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toPartialOptions&lt;/span&gt;
&lt;span id=&#34;cb15-13&#34;&gt;&lt;a href=&#34;#cb15-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many (optFilePathP &lt;span class=&#34;ch&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-14&#34;&gt;&lt;a href=&#34;#cb15-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many (optFilePathP &lt;span class=&#34;ch&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-15&#34;&gt;&lt;a href=&#34;#cb15-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-16&#34;&gt;&lt;a href=&#34;#cb15-16&#34;&gt;&lt;/a&gt;    toPartialOptions input output &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-17&#34;&gt;&lt;a href=&#34;#cb15-17&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-18&#34;&gt;&lt;a href=&#34;#cb15-18&#34;&gt;&lt;/a&gt;        { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lift input&lt;/span&gt;
&lt;span id=&#34;cb15-19&#34;&gt;&lt;a href=&#34;#cb15-19&#34;&gt;&lt;/a&gt;        , poOutputPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lift output&lt;/span&gt;
&lt;span id=&#34;cb15-20&#34;&gt;&lt;a href=&#34;#cb15-20&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb15-21&#34;&gt;&lt;a href=&#34;#cb15-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-22&#34;&gt;&lt;a href=&#34;#cb15-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lift ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (f a), &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb15-23&#34;&gt;&lt;a href=&#34;#cb15-23&#34;&gt;&lt;/a&gt;lift &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-24&#34;&gt;&lt;a href=&#34;#cb15-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-25&#34;&gt;&lt;a href=&#34;#cb15-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;optFilePathP ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-26&#34;&gt;&lt;a href=&#34;#cb15-26&#34;&gt;&lt;/a&gt;optFilePathP &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; strOption &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; short&lt;/span&gt;
&lt;span id=&#34;cb15-27&#34;&gt;&lt;a href=&#34;#cb15-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-28&#34;&gt;&lt;a href=&#34;#cb15-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb15-29&#34;&gt;&lt;a href=&#34;#cb15-29&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-30&#34;&gt;&lt;a href=&#34;#cb15-30&#34;&gt;&lt;/a&gt;  options &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execParser &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; info partialOptionsParser &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;/span&gt;
&lt;span id=&#34;cb15-31&#34;&gt;&lt;a href=&#34;#cb15-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; options&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;p&gt;実行すると何が起きているかわかります。(手動で改行等を入れて見やすくしています)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# オプション無しで実行
λ&amp;gt; stack run ex2
PartialOptions
  { poInputPath  = First { getFirst = Nothing }
  , poOutputPath = Last  { getLast  = Nothing }
  }

# どちらもオプションを1つずつ指定して実行
λ&amp;gt; stack run ex2 -- -i aaa -o aaa
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;aaa&amp;quot; }
  }

# -i のオプションのみ2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -i bbb -o aaa
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;aaa&amp;quot; }
  }

# -o のオプションのみ2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -o aaa -o bbb
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;bbb&amp;quot; }
  }

# -i, -o のオプションどちらも2つ指定
λ&amp;gt; stack run ex2 -- -i aaa -i bbb -o aaa -o bbb
PartialOptions
  { poInputPath  = First { getFirst = Just &amp;quot;aaa&amp;quot; }
  , poOutputPath = Last  { getLast  = Just &amp;quot;bbb&amp;quot; }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じで &lt;code&gt;First&lt;/code&gt; モノイドや &lt;code&gt;Last&lt;/code&gt; モノイドを使ってオプションが複数指定された場合に最初の値か最後の値かを選ぶことができます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67&#34;&gt;The Partial Options Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2018/11/29/155311&#34;&gt;SemigroupがMonoidに恋するとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/philopon/items/a29717af62831d3c8c07&#34;&gt;optparse-applicativeをふわっと使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html</id><title type="text">Lambdabot for Slack</title><updated>2019-02-11T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近 slack で &lt;a href=&#34;https://github.com/lambdabot/lambdabot&#34;&gt;Lambdabot&lt;/a&gt; というツールを知りました。こいつを導入するとこんな事ができます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Lambdabot と遊んでいる図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;実務で本格的に使えるものではありませんが、入れてみると楽しいですよ。(カスタマイズして改良すれば、かなり使えるかもしれない)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;lambdabot-の導入&#34;&gt;Lambdabot の導入&lt;/h2&gt;
&lt;p&gt;導入はとても簡単で slack app から Lambdabot をインストールするだけです！&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Slack app で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Lambdabot のインストール画面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;検索するのが面倒な人は &lt;a href=&#34;https://lambdabot.brianmckenna.org/slack/install.html&#34;&gt;Add Lambdabot to Slack&lt;/a&gt; の App ボタンからもインストール可能です。&lt;/p&gt;
&lt;p&gt;アプリのソースコード等は &lt;a href=&#34;https://github.com/markandrus/slack-lambdabot&#34;&gt;markandrus/slack-lambdabot&lt;/a&gt; にありますので、気になる方はこちらもご参照ください。&lt;/p&gt;
&lt;p&gt;自分でビルドしてホスティングする場合は fork の &lt;a href=&#34;https://github.com/ezoerner/slack-lambdabot&#34;&gt;ezoerner/slack-lambdabot&lt;/a&gt; の方が良いかもしれません。(要検証)&lt;/p&gt;
&lt;h2 id=&#34;lambdabot-for-slack-でできること&#34;&gt;Lambdabot for Slack でできること&lt;/h2&gt;
&lt;p&gt;どうやら本家の Lambdabot の機能全てが使えるわけではないようです。&lt;/p&gt;
&lt;p&gt;また、利用可能な機能のうち &lt;code&gt;type&lt;/code&gt; や &lt;code&gt;hoogle&lt;/code&gt;等はちゃんと使えるようですが、&lt;code&gt;run&lt;/code&gt; や &lt;code&gt;check&lt;/code&gt; などは結果がおかしい場合があります。&lt;/p&gt;
&lt;h3 id=&#34;hoogle&#34;&gt;hoogle&lt;/h3&gt;
&lt;p&gt;どうやら結果は3件しか返さないようです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;関数名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数有り)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数無し)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;p&gt;どのパッケージが含まれているかわかりませんが、lens の演算子を試したところだめでした。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;関数&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;メソッド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;複雑な式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;演算子&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-5.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;セクション&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-6.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;エラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;run&#34;&gt;run&lt;/h3&gt;
&lt;p&gt;式を実行することができるようですが、全然動かないです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;print はエラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;奇跡的に動いた例&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;文字列を含む場合にはエラーになる&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;無限リストは適当に打ち切り&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;check&#34;&gt;check&lt;/h3&gt;
&lt;p&gt;QuickCheck も実行可能ですが、上手く行く例が作れません・・・。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/check-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;実行時間の制約に引っかかってるっぽい&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;free&#34;&gt;free&lt;/h3&gt;
&lt;p&gt;たぶん実装は &lt;a href=&#34;https://github.com/lambdabot/lambdabot/blob/0b26cb6ca0e0389bcff68d360c18775a787c9d52/lambdabot-haskell-plugins/src/Lambdabot/Plugin/Haskell/Free/FreeTheorem.hs&#34;&gt;FreeTheorem.hs&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;良くわからないので解説できません。実行結果だけ貼っておきます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;reverse&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;const&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;flip&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-5.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;filter&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;pl&#34;&gt;pl&lt;/h3&gt;
&lt;p&gt;ポイントフリーにしてくれます。また fusion もいくつか可能っぽいです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;ポイントフリー化1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;ポイントフリー化2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;f . id = id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;map f . map g = map (f . g)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;ちゃんと作り込んだら結構使えそうな気がします。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html</id><title type="text">Endo Monoid</title><updated>2019-02-04T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Endo&#34;&gt;Endo&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Endo&lt;/code&gt; という名前は &lt;code&gt;自己準同型 (Endomorphism)&lt;/code&gt; に由来します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; appEndo ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [(&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;fu&#34;&gt;negate&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; appEndo f &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; appEndo (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, Haskell!&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; (appEndo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [(&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;), &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;, (&lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)]) &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello, Haskell!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;appEndo&lt;/code&gt; すると関数が出てくるところがポイントですね。2つ目の評価の流れをざっくり追うとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;haskll&#34;&gt;&lt;code&gt;  appEndo (Endo (&amp;quot;Hello, &amp;quot; ++) &amp;lt;&amp;gt; Endo (++ &amp;quot;!&amp;quot;)) &amp;quot;Haskell&amp;quot;
= appEndo (Endo ((&amp;quot;Hello, &amp;quot; ++ ) . (++ &amp;quot;!&amp;quot;))) &amp;quot;Haskell&amp;quot;
= (&amp;quot;Hello, &amp;quot; ++ ) . (++ &amp;quot;!&amp;quot;) $ &amp;quot;Haskell&amp;quot;
= &amp;quot;Hello, &amp;quot; ++ (&amp;quot;Haskell&amp;quot; ++ &amp;quot;!&amp;quot;)
= &amp;quot;Hello, &amp;quot; ++ &amp;quot;Haskell!&amp;quot;
= &amp;quot;Hello, Haskell!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Endo&lt;/code&gt; は意外と色んなところで使える便利なモノイドです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h))&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より f . (g . h) == (f . g) . h&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; ((f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; h&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より f . id == f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f)&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Category の定義より id . f == f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;f-.-g-.-h-f-.-g-.-h&#34;&gt;&lt;code&gt;f . (g . h) == (f . g) . h&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(.)&lt;/code&gt; の定義&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(.) ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;(&lt;span class=&#34;dt&#34;&gt;LHS&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f ((g &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h) x)&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f ((\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g (h y)) x)&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g (h x))&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;(&lt;span class=&#34;dt&#34;&gt;RHS&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;  (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; h&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g) (h x)&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g y)) (h x)&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (g (h x))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;id-.-f-f&#34;&gt;&lt;code&gt;id . f == f&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; の定義&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; (f x)&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f x&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例1-write-endo-パターン&#34;&gt;例1) Write Endo パターン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/yesod-core&#34;&gt;yesod-core&lt;/a&gt; パッケージの &lt;a href=&#34;https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Handler.html#t:ProvidedRep&#34;&gt;ProvideRep&lt;/a&gt; を扱う関数は &lt;code&gt;Endo&lt;/code&gt; を利用しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;selectRep ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadHandler&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;TypedContent&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;provideRep ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;HasContentType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) ()&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;provideRepType ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;ToContent&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Writer&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;ProvidedRep&lt;/span&gt; m]) ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また &lt;code&gt;Yesod&lt;/code&gt; には &lt;a href=&#34;https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Types.html#t:GHState&#34;&gt;GHState&lt;/a&gt; 型がありますが、そこでも &lt;code&gt;Endo&lt;/code&gt; を使っています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHState&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHState&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; ghsSession ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SessionMap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsRBC     ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestBodyContents&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsIdent   ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsCache   ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;TypeMap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsCacheBy ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;KeyedTypeMap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; ghsHeaders ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような &lt;code&gt;Writer&lt;/code&gt; と &lt;code&gt;Endo&lt;/code&gt; を使った実装パターンは &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html&#34;&gt;Quick and Easy DSLs with Writer Endo&lt;/a&gt; で紹介されている &lt;code&gt;Writer Endo&lt;/code&gt; パターンとして知られているようです。&lt;/p&gt;
&lt;h2 id=&#34;例2-データの更新&#34;&gt;例2) データの更新&lt;/h2&gt;
&lt;p&gt;こんな感じで設定等を更新する際にも使えるかもしれません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;update ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;update fs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo (&lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; fs)&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;me ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;me &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;  [ (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;.~&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;guchi&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;  , (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;age &lt;span class=&#34;op&#34;&gt;.~&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;defaultPerson ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;defaultPerson &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;NONAME&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;age  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package extensible --package lens EndoExample.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; defaultPerson&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;NONAME&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; age &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; update me defaultPerson&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;guchi&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; age &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例3-パターンマッチの実装&#34;&gt;例3) パターンマッチの実装&lt;/h2&gt;
&lt;p&gt;僕はあまり &lt;code&gt;Endo&lt;/code&gt; モノイドを使いこなせていませんが、良い感じに使えたと思える例としては TAPL 11章でレコードパターンを実装する際です。&lt;/p&gt;
&lt;p&gt;レコードのパターンマッチは代入の合成で書くことができるので、&lt;code&gt;Endo&lt;/code&gt; がちょうどぴったり適用できました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;match ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pattern&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;match (&lt;span class=&#34;dt&#34;&gt;PtVar&lt;/span&gt; _ n) v &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; subst n v&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;match p&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;PtRecord&lt;/span&gt; fs) v&lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;TmRecord&lt;/span&gt; fs&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; isRecordValue v &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sameFieldLength p v&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;uncurry&lt;/span&gt; match) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;zip&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; fs) (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; fs&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;match: pattern match failure&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;match &lt;span class=&#34;dt&#34;&gt;PtRecord&lt;/span&gt;{} _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;match: v is not Rrcord&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/user/mgsloan/monoids-tour&#34;&gt;Monoids Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html&#34;&gt;Quick and Easy DSLs with Writer Endo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ploeh.dk/2018/04/16/endomorphic-composite-as-a-monoid/&#34;&gt;Endomorphic Composite as a monoid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id><title type="text">Re: Marp のすゝめ</title><updated>2019-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;strong&gt;2019.4.6 Marp-core-0.6.0 での更新を反映した&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://yhatt.github.io/marp/&#34;&gt;Marp&lt;/a&gt; というのは Markdown 記法で書けるスライド作成ツールです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown 記法で手軽に書ける&lt;/li&gt;
&lt;li&gt;見た目が綺麗&lt;/li&gt;
&lt;li&gt;画像の拡縮が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの特徴から個人的にかなり重宝しています． その辺りは昔&lt;a href=&#34;/posts/2016-12-14-recommend-marp.html&#34;&gt;記事にしました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから &lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;Marp Next&lt;/a&gt; というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます&#34;&gt;markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yhatt/items/874d5bfa919c32728403&#34;&gt;Puppeteer &amp;amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，本記事での Marp Next のバージョンは &lt;code&gt;marp-cli-0.6&lt;/code&gt; ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．&lt;/p&gt;
&lt;h2 id=&#34;marp-next&#34;&gt;Marp Next&lt;/h2&gt;
&lt;p&gt;新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;リポジトリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;marp-team/marp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp 全体を取りまとめるリポジトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marpit&#34;&gt;Marpit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core&#34;&gt;Marp Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli&#34;&gt;Marp CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の CLI ツール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-web&#34;&gt;Marp Web&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の Web UI (まだベータっぽい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Marp Desktop&lt;/td&gt;
&lt;td&gt;Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22&#34;&gt;旧 Marp のリポジトリの Issue ラベルに &lt;code&gt;Marp Next&lt;/code&gt; や &lt;code&gt;Supports in Marp Next&lt;/code&gt; というのができている&lt;/a&gt;． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには &lt;code&gt;Support in Marp Next&lt;/code&gt; を付けたようだ．&lt;/p&gt;
&lt;h3 id=&#34;旧-marp-との非互換な機能&#34;&gt;旧 Marp との非互換な機能&lt;/h3&gt;
&lt;p&gt;これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;==AAA==&lt;/code&gt; というハイライト機能がない（辛い）&lt;/li&gt;
&lt;li&gt;打ち消し線記法 &lt;code&gt;~~AAA~~&lt;/code&gt; もない&lt;/li&gt;
&lt;li&gt;画像の拡縮ルール (Marpit)
&lt;ul&gt;
&lt;li&gt;より&lt;a href=&#34;https://marpit.marp.app/image-syntax&#34;&gt;細かいルールができて&lt;/a&gt;書きやすくなった&lt;/li&gt;
&lt;li&gt;しかし前のは記法は非互換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; がないので中央寄せができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- *template: xxx --&amp;gt;&lt;/code&gt; のようなそのページだけ機能追加 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- _class: xxx --&amp;gt;&lt;/code&gt; のように先頭にアンダースコア &lt;code&gt;_&lt;/code&gt; を付けるスタイルになった&lt;/li&gt;
&lt;li&gt;ちなみに &lt;code&gt;&amp;lt;!-- $theme: xxx --&amp;gt;&lt;/code&gt; はあるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマの取り扱い (Marpit ??)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; だけだと中央寄せなどになっていた機能がなくなった&lt;/li&gt;
&lt;li&gt;それらはテーマのイチ &lt;code&gt;class&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;前の &lt;code&gt;template&lt;/code&gt; も &lt;code&gt;class&lt;/code&gt; なので組み合わせれない&lt;/li&gt;
&lt;li&gt;明示的に指定できるようになったのは嬉しい&lt;/li&gt;
&lt;li&gt;class を複数設定できるようになった！ (&lt;a href=&#34;https://github.com/marp-team/marp-core/pull/69&#34;&gt;marp-core-0.6.0~&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KaTeX のバージョンアップ (Marp Core)
&lt;ul&gt;
&lt;li&gt;0.6.0 =&amp;gt; 0.10.0&lt;/li&gt;
&lt;li&gt;0.6.0 だと全然 LaTeX 記法をサポートしていないので&lt;a href=&#34;https://katex.org/docs/supported.html&#34;&gt;助かる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まぁ僕はフォークしてバージョンをあげてたけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドのサイズ・縦横比 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size&#34;&gt;テーマごとになったぽい&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marpit.marp.app/directives?id=tweak-theme-style&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; で上書きすると変な余白ができる&lt;/li&gt;
&lt;li&gt;どっちにせよ前の &lt;code&gt;&amp;lt;!-- size: 4:3 --&amp;gt;&lt;/code&gt; みたいなのはできないっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ちなみに，コードが全部 CoffeScript から TypeScript になってた．&lt;/p&gt;
&lt;h2 id=&#34;cli-を試す&#34;&gt;CLI を試す&lt;/h2&gt;
&lt;p&gt;リッチすぎてビビる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README の通りで動いた (Mac, npx)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx @marp-team/marp-cli slide.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/marpteam/marp-cli/&#34;&gt;Docker もサポートされてる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ただし一部機能に制限があるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown から HTML を生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pdf&lt;/code&gt; オプションで PDF を生成する
&lt;ul&gt;
&lt;li&gt;ただし &lt;strong&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli/pull/10&#34;&gt;セキュリティの関係&lt;/a&gt;でデフォルトではローカルファイルの画像などを埋め込めない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;そのためローカル画像を使うには &lt;code&gt;--allow-local-files&lt;/code&gt; をつける&lt;/li&gt;
&lt;li&gt;日本語フォントも変になっている気がする&lt;/li&gt;
&lt;li&gt;日本語検索もダメっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; オプションで Markdown の変更を検知し再生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--server&lt;/code&gt; オプションで &lt;code&gt;localhost:8080&lt;/code&gt; で閲覧やPDFの生成ができる (watch もされます)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preview&lt;/code&gt; でプレビューモード
&lt;ul&gt;
&lt;li&gt;待望の！！&lt;/li&gt;
&lt;li&gt;ブラウザの全画面モードを使ってるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; でカスタムテーマを設定可能 (CSS)&lt;/li&gt;
&lt;li&gt;CLI のオプションを使わずに&lt;a href=&#34;https://github.com/marp-team/marp-cli#configuration-file&#34;&gt;設定ファイルでも設定可能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;.marprc.yml&lt;/code&gt; &lt;code&gt;marp.config.js&lt;/code&gt; のどれでも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-netlify-を試す&#34;&gt;CLI + Netlify を試す&lt;/h2&gt;
&lt;p&gt;試した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/pub-slides&#34;&gt;matsubara0507/pub-slides - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507-slides.netlify.com/&#34;&gt;&lt;img src=&#34;/assets/re-recommend-marp/pub-slides-with-marp.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試し方: Marp の作者の&lt;a href=&#34;https://github.com/yhatt/marp-cli-example&#34;&gt;リポジトリ&lt;/a&gt;の &lt;code&gt;Deploy to netlify&lt;/code&gt; をクリックするだけ．&lt;/p&gt;
&lt;p&gt;この方法の場合，リポジトリの &lt;code&gt;PITCHME.md&lt;/code&gt; を &lt;code&gt;index.html&lt;/code&gt; に変換する． marp-cli の設定は &lt;code&gt;package.yml&lt;/code&gt; に書いてある． &lt;a href=&#34;https://github.com/marp-team/marp-cli#options&#34;&gt;設定方法&lt;/a&gt;はこれを参照．&lt;/p&gt;
&lt;p&gt;僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt; 以下の &lt;code&gt;*.md&lt;/code&gt; を全部変換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.md&lt;/code&gt; が &lt;code&gt;index.html&lt;/code&gt; のスライドになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後述する自作テーマをサブモジュールで設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides/assets&lt;/code&gt; にある画像を &lt;code&gt;public&lt;/code&gt; にコピーしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように少しだけ設定を書き換えた．&lt;/p&gt;
&lt;h2 id=&#34;web-ui-を試す&#34;&gt;Web UI を試す&lt;/h2&gt;
&lt;p&gt;すでに&lt;a href=&#34;https://web.marp.app/&#34;&gt;ここ&lt;/a&gt;から試せる． 手元で試すなら:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/re-recommend-marp/editing_marp_next.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルの読み込みや保存が可能&lt;/li&gt;
&lt;li&gt;プレゼンテーションモードは(まだ)なかった&lt;/li&gt;
&lt;li&gt;PDFのエクスポートはブラウザの印刷機能を使うようだった&lt;/li&gt;
&lt;li&gt;カスタムテーマの設定などはまだできない？？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;テーマを移植する&#34;&gt;テーマを移植する&lt;/h2&gt;
&lt;p&gt;オリジナルテーマを作ってたので Marp Next にも移植した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;olive&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/marp-themes&#34;&gt;marp-themes&lt;/a&gt; というリポジトリを作り，そこに置いてある． やったことは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss&#34;&gt;gaia の scss&lt;/a&gt; を持ってきて主に色を変更
&lt;ul&gt;
&lt;li&gt;カスタムテーマとして指定できるのは CSS だけなので &lt;code&gt;scss&lt;/code&gt; コマンドで手動変換する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の中央寄せをできるようにした
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ![](path/to/image.jpg)&lt;/code&gt; とすると中央寄せになるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt; から &lt;code&gt;h6&lt;/code&gt; のどれでも良いです&lt;/li&gt;
&lt;li&gt;ただし，雑に &lt;code&gt;img&lt;/code&gt; タグに適用してるので emoji を含ませるとずれる…&lt;/li&gt;
&lt;li&gt;marpit に修正入れてもらった方が良いかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lead&lt;/code&gt; + &lt;code&gt;invert&lt;/code&gt; などの class を作っておいた
&lt;ul&gt;
&lt;li&gt;scss で書いてるので &lt;code&gt;lead&lt;/code&gt; を適当に mixi-in にして include するだけ&lt;/li&gt;
&lt;li&gt;これもできれば &lt;code&gt;class&lt;/code&gt; の組み合わせができるようになって欲しい&lt;/li&gt;
&lt;li&gt;marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;olive&#34;&gt;Olive&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;colors&#34;&gt;Colors&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;haskell&#34;&gt;Haskell&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう既に十分使える状態になっていました． すごい！&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html</id><title type="text">Dual Monoid</title><updated>2019-02-02T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Dual&#34;&gt;Dual&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getDual ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbbaaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;bbbaaa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いつか使う時もあるかもしれないので、適当な例を作ってみます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- a, b, c は Semigroup なので&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (c &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a))&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a))&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- a は Monoid なので&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;headmaybe&#34;&gt;headMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;headMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- First を使った定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;headMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;headMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe []&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; headMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lastmaybe&#34;&gt;lastMaybe&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;lastMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getFirst &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Last を使った定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastMaybe ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;lastMaybe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe []&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; lastMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;last&#34;&gt;last&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;last&amp;#39; ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;last&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getAlt &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; user &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; (mzero)&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reverse&#34;&gt;reverse&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;rev ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;rev &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; getDual &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; rev [&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;[&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; rev &lt;span class=&#34;st&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;dlroW olleH&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;foldl&#34;&gt;foldl&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; f z t &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; appEndo (getDual (&lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dual&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Endo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; f) t)) z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/haskell/example/2555/folding-a-structure-in-reverse&#34;&gt;Folding a structure in reverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@sjsyrek/five-minutes-to-monoid-fe6f364d0bba&#34;&gt;Five Minutes to Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ozark.hendrix.edu/~yorgey/pub/monoid-pearl.pdf&#34;&gt;Monoids: Theme and Variations (Functional Pearl)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-13.5/base-4.12.0.0/Prelude.html#t:Foldable&#34;&gt;Foldable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hourly-antenna.html</id><title type="text">DroneでHaskell Antennaを毎時更新する</title><updated>2019-01-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hourly-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のコンテンツの一つとして&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;という &lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt; ページの開発・運用をしております。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/antenna-page.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;この&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;ページは&lt;a href=&#34;https://github.com/haskell-jp/antenna&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のリポジトリ&lt;/a&gt;で開発し、&lt;span class=&#34;ascii&#34;&gt;GitHub Pages&lt;/span&gt;として公開しています。 更新は&lt;a href=&#34;https://travis-ci.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;Daily Cron&lt;/span&gt;を使って行なっていましたが、なんとかして &lt;strong&gt;毎時更新を実現したい&lt;/strong&gt; と思案していました。 ひょんなことから&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスを見つけ、このサービスでは&lt;span class=&#34;ascii&#34;&gt;Hourly Cron&lt;/span&gt;が可能だったので試しに更新の部分だけ移行してみました。 という話です。&lt;/p&gt;
&lt;p&gt;ちなみに、本稿は全く&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードが出て来ません &lt;span class=&#34;ascii&#34;&gt;;)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;毎時更新を実現するために&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone.io&#34; title=&#34;drone.io&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone.io&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;はパブリックリポジトリであれば無料で利用できる&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;サービスです。 内部では&lt;a href=&#34;https://drone.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームを利用しています。 &lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;は以下のような特徴を持っています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Jenkins&lt;/span&gt;のような&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;である&lt;span class=&#34;ascii&#34;&gt;(Go&lt;/span&gt;言語製&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のようなパイプラインによる設定を行う&lt;span class=&#34;ascii&#34;&gt;(YAML&lt;/span&gt;形式&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;との親和性が高く&lt;span class=&#34;ascii&#34;&gt;k8s&lt;/span&gt;などでの動作もサポートしている&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Plugin&lt;/span&gt;システムによって外部サービスとの連携が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;のためお好みのクラウドサービスなどで自前運用も可能ですし、&lt;span class=&#34;ascii&#34;&gt;Drone Enterprise&lt;/span&gt;という有料のクラウドサービスも提供しています。&lt;/p&gt;
&lt;h1 id=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#毎時更新を実現するために&#34; title=&#34;毎時更新を実現するために&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;毎時更新を実現するために&lt;/h1&gt;
&lt;p&gt;単純に&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;の設定ファイルを記述するだけではなく、次のような作業を行いました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージを自動更新&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;順に説明していきましょう。&lt;/p&gt;
&lt;h2 id=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#antennaのdockerイメージ化&#34; title=&#34;antennaのdockerイメージ化&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;では無償でキャッシュを利用することができません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。 &lt;span class=&#34;ascii&#34;&gt;Haskell(&lt;/span&gt;というか&lt;span class=&#34;ascii&#34;&gt;Stack)&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;をしている方ならわかると思いますが、キャッシュなしにビルドするとすごい時間がかかります。 なので、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の静的ページの生成を行う &lt;code&gt;antenna&lt;/code&gt; コマンドを&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージとしておき、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;内ではこのイメージを利用して静的ページの生成を行う方針でいきます。&lt;/p&gt;
&lt;p&gt;もちろん&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの生成には、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;インテグレーションを使います。 以下のような設定を&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に追記し&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;enable:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;base:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行するだけで&lt;code&gt;antenna&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージが生成されます&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stack docker pull
stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;に&lt;a href=&#34;https://hub.docker.com/r/haskelljp/antenna/&#34;&gt;&lt;code&gt;haskelljp/antenna&lt;/code&gt;&lt;/a&gt;というネームスペースを確保した&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のでここにプッシュしました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker tag antenna haskelljp/antenna
docker push haskelljp/antenna&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに、&lt;code&gt;haskell-jp&lt;/code&gt; ではなく &lt;code&gt;haskelljp&lt;/code&gt; なのは、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の組織アカウント名には &lt;code&gt;-&lt;/code&gt; が使えなかったからです。&lt;/p&gt;
&lt;h2 id=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dockerイメージの自動更新&#34; title=&#34;dockerイメージの自動更新&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージの自動更新&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;には&lt;span class=&#34;ascii&#34;&gt;Automated builds&lt;/span&gt;と呼ばれる&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;などのプッシュによって行う自動ビルドがありますが、&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt;を使うと、その機能を利用することができません。 そこで、&lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt;を使って自動ビルドすることにしました。 この辺りは「&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stack&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;Docker Integration&lt;/span&gt; とイメージの自動更新 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」で記事にしてあるので、細かい話は割愛します。&lt;/p&gt;
&lt;p&gt;今回は次のような設定をして、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt; ブランチにプッシュがあった時にのみ&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;にプッシュします&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; export PATH=$HOME/.local/bin:$PATH&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &lt;span class=&#34;st&#34;&gt;&amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker --install-ghc test --bench --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal --docker build --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type = push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker tag antenna haskelljp/antenna&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class=&#34;st&#34;&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; docker push haskelljp/antenna&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のビルドもするために毎回&lt;span class=&#34;ascii&#34;&gt;Docker Pull&lt;/span&gt;が走るようになり少し遅くなったのが辛いですね&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;今後要検討&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#drone-cloudの設定&#34; title=&#34;drone-cloudの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Cloud&lt;/span&gt;の設定&lt;/h2&gt;
&lt;p&gt;いよいよ&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;による &lt;code&gt;antenna&lt;/code&gt; コマンドの実行を設定します。 元々は &lt;span class=&#34;ascii&#34;&gt;TravisCI&lt;/span&gt; でこんな感じでした&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install anttena&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal install&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git clone -b gh-pages &amp;quot;https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git&amp;quot; temp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;if:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master AND type IN (push, cron)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;after_success:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack exec -- antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack install&lt;/code&gt; で &lt;code&gt;antenna&lt;/code&gt; コマンドの実行ファイルを生成し&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;これはキャッシュされるので早い&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;、&lt;code&gt;gh-pages&lt;/code&gt; ブランチへページの更新をプッシュするために&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;を使って再度クローンしていました。 更新の有無は &lt;code&gt;git diff&lt;/code&gt; を使って確認しています。&lt;/p&gt;
&lt;p&gt;まずはこれをこのまま&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;に移植します&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GH_TOKEN:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github_api_token&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;GIT_NAME:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; BOT&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages &lt;span class=&#34;st&#34;&gt;&amp;quot;https://${GH_TOKEN}@github.com/haskell-jp/antenna.git&amp;quot;&lt;/span&gt; temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;${GIT_NAME}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記法は違うもののそのまま移植ができました。 条件&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;if&lt;/code&gt;や&lt;code&gt;when&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;のところですが、&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;で&lt;code&gt;cron&lt;/code&gt;のイベントを指定する方法がわからなかったので、動作しては困る&lt;code&gt;pull_request&lt;/code&gt;だけ弾くようにしました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Cron&lt;/span&gt;の設定は&lt;span class=&#34;ascii&#34;&gt;Web UI&lt;/span&gt;上で行います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/drone-cron-setting.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;これで毎時間&lt;code&gt;master&lt;/code&gt;ブランチのビルドが実行されます。&lt;/p&gt;
&lt;h2 id=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#personal-tokenからdeploy-keyに移行&#34; title=&#34;personal-tokenからdeploy-keyに移行&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Personal Token&lt;/span&gt;は他の個人のリポジトリも操作できてしまうので、兼ねてからできれば使いたくないなと思っていました&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;特に個人プロジェクトじゃない&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;のプロジェクトでは&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 なので、これを機にリポジトリ固有の&lt;span class=&#34;ascii&#34;&gt;Deploy Key&lt;/span&gt;に移行しました。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;CircleCI&lt;/span&gt;のような書き込み用の&lt;span class=&#34;ascii&#34;&gt;SSH Key&lt;/span&gt;を登録する機能は&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;にはありません。 代わりに次のように書くと良いです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Secret&lt;/span&gt;というのは&lt;span class=&#34;ascii&#34;&gt;Drone&lt;/span&gt;側で保持・秘匿できる環境変数のような機能です&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;名前が違うだけでだいたいどの&lt;span class=&#34;ascii&#34;&gt;CI&lt;/span&gt;プラットフォームにもありますね&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 今回はせっかくなので、これを&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt;として自作した&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;、&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;&lt;code&gt;matsubara0507/git-with-ssh&lt;/code&gt;&lt;/a&gt; というのを使います&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; title=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; title=&#34;19&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; title=&#34;20&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; title=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; title=&#34;22&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskelljp/antenna&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; title=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp sites.yaml temp/sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cp -r image/* temp/image&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; title=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; title=&#34;29&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; antenna sites.yaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; title=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; title=&#34;31&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; title=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; title=&#34;38&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.name  BOT&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git config user.email bot@example.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-41&#34; title=&#34;41&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git status&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-42&#34; title=&#34;42&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git add -A&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-43&#34; title=&#34;43&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || git commit -am &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update planet haskell. See https://haskell.jp/antenna/ for new entries!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; cd temp &amp;amp;&amp;amp; git push origin gh-pages&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-45&#34; title=&#34;45&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-46&#34; title=&#34;46&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-47&#34; title=&#34;47&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-48&#34; title=&#34;48&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-49&#34; title=&#34;49&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-50&#34; title=&#34;50&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd temp &amp;amp;&amp;amp;&lt;/code&gt; というのがダサいですが、そこはおいおい直します&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;git-with-ssh&lt;/code&gt; の方を&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#slackの通知回りを整理&#34; title=&#34;slackの通知回りを整理&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の通知回りを整理&lt;/h2&gt;
&lt;p&gt;元々は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の &lt;code&gt;#antenna&lt;/code&gt; チャンネルに&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の通知設定をしているだけでした。 今回の開発中、ずっとコミットの通知などが来てうるさかったので次のように分けました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#antenna&lt;/code&gt; チャンネルは &lt;code&gt;gh-pages&lt;/code&gt; ブランチのコミットだけ通知
&lt;ul&gt;
&lt;li&gt;ついでに&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;を設定した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#antenna-dev&lt;/code&gt; チャンネルを新しく作り&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の全ての更新はこっちに設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#dockerhub&lt;/code&gt; チャンネルもついでに作って &lt;code&gt;haskelljp&lt;/code&gt; の更新を通知する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近、&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の大リニューアルがあって、いつのまにか&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;を連携できるようになっていました。 なので試しに連携して更新の通知が飛ぶようにしてみました&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/hourly-antenna/dockerhub-slack.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#今後やりたいこと&#34; title=&#34;今後やりたいこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;今後やりたいこと&lt;/h1&gt;
&lt;p&gt;いくつかあります&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;LTS&lt;/span&gt;の更新&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;最新&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;でも動作したらかな&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;の改善
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;RSS&lt;/span&gt;でもちゃんと更新が通知されるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ないしは更新差分の通知
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;App&lt;/span&gt;が満杯なので厳しいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと、&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Feed&lt;/span&gt;がコメントや追記などでも更新され、その通知が &lt;code&gt;#antenna&lt;/code&gt; チャンネルに飛んで来てうるさいので修正したいです&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;キャッシュの導入の仕方は記事にしたので興味のある方は是非「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GCS&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;Drone 1.0&lt;/span&gt; をキャッシュする &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;もし&lt;span class=&#34;ascii&#34;&gt;Docker Hub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;haskelljp&lt;/span&gt;組織アカウントのメンバーになりたい場合は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で声をかけてください&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;チャンネルはどこでも良いですよ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;この話も記事にしておきました「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Drone Plugin&lt;/span&gt; を作ってみた&lt;span class=&#34;ascii&#34;&gt;: git-with-ssh -&lt;/span&gt; ひげメモ&lt;/a&gt;」&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;この修正は &lt;code&gt;haskell-jp/antenna&lt;/code&gt; ではなく、&lt;a href=&#34;https://github.com/matsubara0507/scrapbook&#34;&gt;&lt;code&gt;matsubara0507/scrapbook&lt;/code&gt;&lt;/a&gt; からやる必要があります。&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/string-gap-for-heredoc-like.html&#34; lang=&#34;ja&#34;&gt;Haskell でも heredoc がしたい&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近 &lt;a href=&#34;https://drone.io&#34;&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class=&#34;st&#34;&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; echo -e &lt;span class=&#34;st&#34;&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href=&#34;https://github.com/drone/drone/issues/1891#issuecomment-269629929&#34;&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href=&#34;https://docs.drone.io/plugins&#34;&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id=&#34;drone-plugin&#34;&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id=&#34;main.go-と-plugin.go&#34;&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;package&lt;/span&gt; main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; build = &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; title=&#34;17&#34;&gt;  app := cli.NewApp()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; title=&#34;18&#34;&gt;  app.Name = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; title=&#34;19&#34;&gt;  app.Usage = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-20&#34; title=&#34;20&#34;&gt;  app.Action = run&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-21&#34; title=&#34;21&#34;&gt;  app.Version = fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-22&#34; title=&#34;22&#34;&gt;  app.Flags = []cli.Flag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-23&#34; title=&#34;23&#34;&gt;    cli.StringFlag{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-24&#34; title=&#34;24&#34;&gt;      Name:   &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-25&#34; title=&#34;25&#34;&gt;      Usage:  &lt;span class=&#34;st&#34;&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-26&#34; title=&#34;26&#34;&gt;      EnvVar: &lt;span class=&#34;st&#34;&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-27&#34; title=&#34;27&#34;&gt;    },&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-28&#34; title=&#34;28&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-30&#34; title=&#34;30&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-33&#34; title=&#34;33&#34;&gt;    log.Fatal(err)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-34&#34; title=&#34;34&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-35&#34; title=&#34;35&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-36&#34; title=&#34;36&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-37&#34; title=&#34;37&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-38&#34; title=&#34;38&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-39&#34; title=&#34;39&#34;&gt;    _ = godotenv.Load(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-40&#34; title=&#34;40&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-41&#34; title=&#34;41&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-42&#34; title=&#34;42&#34;&gt;    SSHKey: c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-43&#34; title=&#34;43&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-44&#34; title=&#34;44&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-45&#34; title=&#34;45&#34;&gt;    &lt;span class=&#34;co&#34;&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-46&#34; title=&#34;46&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-47&#34; title=&#34;47&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-48&#34; title=&#34;48&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id=&#34;脱線-vs.改行&#34;&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// plugin.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Plugin &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;  Home     &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;  SSHKey   &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;  Hosts    []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;  Commands []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;  sshDir := fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class=&#34;dv&#34;&gt;0700&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class=&#34;dt&#34;&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class=&#34;dv&#34;&gt;0600&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$&amp;#39;aaa\nbbb&amp;#39;&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href=&#34;https://blog.konboi.com/post/2018/05/01/225336/&#34;&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;    SSHKey: strings.Replace(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;),&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; title=&#34;9&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;docker-イメージ&#34;&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; docker:git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href=&#34;https://hub.docker.com/r/plugins/base/&#34;&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href=&#34;https://hub.docker.com/_/docker&#34;&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;$ &lt;span class=&#34;va&#34;&gt;GOOS=&lt;/span&gt;linux &lt;span class=&#34;va&#34;&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class=&#34;va&#34;&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class=&#34;ex&#34;&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;drone-を設定する&#34;&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; title=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; title=&#34;9&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build docker image (dry_run)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; title=&#34;16&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;dry-run:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# Push をしないフラグ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; title=&#34;19&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-21&#34; title=&#34;21&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-22&#34; title=&#34;22&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-23&#34; title=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-24&#34; title=&#34;24&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-25&#34; title=&#34;25&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-26&#34; title=&#34;26&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;username:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-29&#34; title=&#34;29&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-32&#34; title=&#34;32&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-33&#34; title=&#34;33&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-34&#34; title=&#34;34&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-35&#34; title=&#34;35&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-36&#34; title=&#34;36&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href=&#34;https://github.com/drone-plugins/drone-docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id=&#34;テストをどうするか&#34;&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; go build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;SSH_KEY:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt; --commands &lt;span class=&#34;st&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;  ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id=&#34;おまけ-バッチ&#34;&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md&#34;&gt;&lt;img src=&#34;/assets/create-drone-git-with-ssh/badges.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreportcard.com/&#34;&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microbadger.com/&#34;&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/tidalcycles-stack.html</id><title type="text">TidalCyclesをstackで確実にインストールする</title><updated>2019-01-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/tidalcycles-stack.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;実行した環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;各種依存パッケージのインストール&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;そのままの手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;使い方・動作確認&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;ハマったこと&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#背景&#34; title=&#34;背景&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;背景&lt;/h1&gt;
&lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;タグを眺めていたところ、下記のような質問がありました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://teratail.com/questions/167461?rss&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell - network&lt;/span&gt;パッケージがうまく機能しない｜&lt;span class=&#34;ascii&#34;&gt;teratail&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Welcome&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;でシンセサイザーの演奏ができるライブラリーのインストールがうまくいかない、という質問です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;network&lt;/span&gt;パッケージがインストールできていない、ということなので&lt;span class=&#34;ascii&#34;&gt;cabal hell&lt;/span&gt;にでもハマったのかな、と思ったのですが、&lt;a href=&#34;https://github.com/tidalcycles/tidal-chocolatey/issues/1&#34;&gt;類似しているとおぼしき報告&lt;/a&gt;（と、&lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c#comment-b568fc7ecb423b9bc2ce&#34;&gt;こちら&lt;/a&gt;）を読む限り、どうも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストール自体に何か問題があるように見えました。&lt;/p&gt;
&lt;p&gt;もう当の質問者は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;をインストールすることで解決したそうですが、いずれにしても、我々&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としては、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;なり&lt;span class=&#34;ascii&#34;&gt;cabal new-install&lt;/span&gt;なりといった、慣れた方法でインストールできた方がサポートしやすいですし、きっと確実です。&lt;br /&gt;
というわけで今回は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でのインストールに挑戦してみました。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;をインストールしているという&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は多いでしょうし、そうした方が&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を使いたくなったときの参考になれば幸いです。&lt;/p&gt;
&lt;p&gt;結論から言うとほとんど問題なくできたんですが、以下の&lt;span class=&#34;ascii&#34;&gt;tweet&lt;/span&gt;で述べたポイントにご注意ください。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles, Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;package&lt;/span&gt;の設定で&lt;span class=&#34;ascii&#34;&gt;stack exec ghci&lt;/span&gt;を使うよう設定したら普通に&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で入れた&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;から使えましたわ。&lt;br&gt;ポイントは、&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- hosc-0.17&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;extra-deps&lt;/span&gt;に加えないといけない&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC 8.6.3&lt;/span&gt;は地雷なので&lt;span class=&#34;ascii&#34;&gt;LTS 12.26&lt;/span&gt;を使う&lt;br&gt;&lt;span class=&#34;ascii&#34;&gt;- ~/.ghci&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;:set +m&lt;/span&gt;してるとうまく動かない&lt;br&gt;ぐらいか。
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;Yuji Yamamoto:&lt;/span&gt; 山本悠滋 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;igrep&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@igrep&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/igrep/status/1082475580753207296?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実行した環境&#34; title=&#34;実行した環境&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実行した環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10 Pro 64bit ver. 1809&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack --version&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;: Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles:&lt;/span&gt; &lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.0.6&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider: 3.10.0, 64bit&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom: 1.34.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグイン&lt;span class=&#34;ascii&#34;&gt;: 0.14.0&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#各種依存パッケージのインストール&#34; title=&#34;各種依存パッケージのインストール&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;各種依存パッケージのインストール&lt;/h1&gt;
&lt;p&gt;冒頭に挙げた質問をされた方が参考にしたページ &lt;a href=&#34;https://qiita.com/yoppa/items/fe21d7136f8f3aafd55c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストール&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年版 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt; では、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;を使ったインストール方法を紹介していますが、この方法では、直接&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tarball&lt;/span&gt;をダウンロードしてインストールしているようです。&lt;br /&gt;
私が知る限り特にその方法でも問題はないはずなんですが、なぜか質問者が挙げたようなエラーが発生してしまいます。&lt;br /&gt;
また、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が実行時に依存している&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;といったソフトウェアを、別の&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージに分けることなく、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のインストールスクリプトで直接インストールしているようです&lt;small&gt;（詳細は&lt;a href=&#34;https://chocolatey.org/packages/TidalCycles&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;のパッケージ情報&lt;/a&gt;に書かれた&lt;span class=&#34;ascii&#34;&gt;chocolateyinstall.ps1&lt;/span&gt;を参照されたし）&lt;/small&gt;。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしようとすると、問題のある&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;などの依存パッケージを一緒にインストールしなければなりませんし、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;だけを&lt;span class=&#34;ascii&#34;&gt;Chocolatey&lt;/span&gt;でインストールすることもできません。&lt;/p&gt;
&lt;p&gt;なので、ここは素直に&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;に書かれた方法に従って&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;をインストールしつつ、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;関連のものだけ&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;でインストールしようと思います。&lt;/p&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiそのままの手順&#34; title=&#34;tidalcycles公式のwikiそのままの手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&#34;https://tidalcycles.org/index.php/Windows_installation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;&lt;/a&gt;そのままの手順&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;⚠️行く先々で&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;のファイアウォールの警告が出るかと思います。適当に承認しちゃってください！⚠️&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://supercollider.github.io/download&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を公式サイトからインストール&lt;/a&gt;します。&lt;br /&gt;
今回は「&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;」の箇所に書いてある「&lt;span class=&#34;ascii&#34;&gt;3.10.0, 64-bit (no SuperNova)&lt;/span&gt;」というリンクをクリックしてダウンロードされた実行ファイルでインストールしました。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;&lt;/a&gt;も公式サイトからインストールしました。&lt;br /&gt;
後で触れます&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の対話環境を、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で呼び出すためのプラグインがあるためです。他のエディタ向けのプラグインもありますが、公式サイトで紹介していたのは&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;なので、一番これがサポートされているのでしょう。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Git&lt;/span&gt;も&lt;span class=&#34;ascii&#34;&gt;Prerequisites&lt;/span&gt;として挙げられていますが、すでに私の環境に入っているので今回は特に何もしていません。なければ普通に&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Git for Windows&lt;/span&gt;&lt;/a&gt;を入れるのが無難かと思います。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストール
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;ウィンドウの左側にある「&lt;span class=&#34;ascii&#34;&gt;Untitled&lt;/span&gt;」と書かれた箇所の下が&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタになっているようです&lt;small&gt;（色がわかりづらい！）&lt;/small&gt;。&lt;br /&gt;
そこに&lt;code&gt;include(&#34;SuperDirt&#34;)&lt;/code&gt;と書いて、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押せば、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールが始まります。&lt;/li&gt;
&lt;li&gt;次のセクションで&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動する前に、&lt;strong&gt;一旦&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を終了&lt;/strong&gt;させましょう。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;向け&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインのインストール
&lt;ul&gt;
&lt;li&gt;面倒なので省略します。他のプラグインと変わらないはずなので適当に検索してください！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcycles公式のwikiとは異なる手順&#34; title=&#34;tidalcycles公式のwikiとは異なる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;公式の&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;とは異なる手順&lt;/h2&gt;
&lt;p&gt;ここからはこの記事特有の手順です。&lt;br /&gt;
最近の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;開発者は、&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;というツールを使って開発環境を整えることが多いですので、冒頭の予告通りここでは&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使います。&lt;br /&gt;
ちなみに、現在は&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;にも&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;が添付されていますが、&lt;span class=&#34;ascii&#34;&gt;Haskell Platform&lt;/span&gt;に含まれる、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;を使うことでも簡単にインストールできるため、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のみをインストールすれば十分です。&lt;br /&gt;
なお、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;自体のインストール方法については拙作の&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell#%E3%81%BE%E3%81%A0stack%E3%82%84haskell-platform%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AF&#34;&gt;「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をご覧ください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;ではインストーラーをダウンロードして実行するだけで十分でしょう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;のインストールが終わったら、次の手順を踏んでください。&lt;/p&gt;
&lt;h3 id=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stackでのtidalcyclesのビルド&#34; title=&#34;stackでのtidalcyclesのビルド&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルド&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のビルドをするには、&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;というファイルを、下記でコメントしたように書き換えてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-12.26 &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= ここを編集&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行と、&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hosc-0.17         &lt;span class=&#34;co&#34;&gt;# &amp;lt;= この行を追記&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単に編集した内容について解説させてください。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;resolver:&lt;/code&gt;で始まる行ですが、これは「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」という、パッケージの一覧のバージョンを指定するものです。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;」は、「確実にビルドできるバージョンのパッケージをまとめた一覧」です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のメンテナーの方々は、毎日登録された大量のパッケージをまとめてビルド・テストしてみることで、実際に登録されたバージョンのパッケージのビルドとテストが成功することを確認しています。&lt;br /&gt;
なので、この&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されているバージョンのパッケージを使う限りは、私たちは安心してビルドができると言うことです。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを書き換えたのかというと、それは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;には実際にはパッケージの一覧だけでなく、それらをビルドできる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも含まれているからです。&lt;br /&gt;
したがって、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンを指定する、ということは、そのままインストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンも指定することになります&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
実は特に今回の場合、インストールする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンを指定しなければ、ビルドできない可能性が高かったのです。&lt;br /&gt;
現在の最新の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されている&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは「&lt;span class=&#34;ascii&#34;&gt;8.6.3&lt;/span&gt;」ですが、残念ながらこのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/16057&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;版のみにおいて深刻なバグ&lt;/a&gt;があります。&lt;br /&gt;
実際に&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をビルドする際にこのバグに遭遇するかは確かめてませんが、内容からして遭遇する確率が高そうであるという点と、遭遇するとビルドができないという点を考慮して、念のため確実にビルドできるバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を指定しておきました。&lt;/p&gt;
&lt;p&gt;そして、&lt;code&gt;extra-deps&lt;/code&gt;という項目は、ビルドしようとしているパッケージ&lt;small&gt;（今回の場合&lt;code&gt;tidal&lt;/code&gt;パッケージ）&lt;/small&gt;が依存しているパッケージが、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;に登録されていない場合に指定するものです。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/tidal-1.0.6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージ &lt;span class=&#34;ascii&#34;&gt;ver. 1.0.6&lt;/span&gt;のパッケージ情報&lt;/a&gt;を確認すると、確かに&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;というパッケージに依存していると書かれていますね！&lt;br /&gt;
残念ながらこの&lt;span class=&#34;ascii&#34;&gt;hosc&lt;/span&gt;パッケージは今回指定した、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ver. 12.26&lt;/span&gt;には登録されていないので、上記のとおり&lt;code&gt;extra-deps&lt;/code&gt;に明記しておいてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\sr\global-project\stack.yaml&lt;/code&gt;の編集が終わったら、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build tidal&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と実行しましょう。&lt;br /&gt;
初回は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のインストールも含めて行われるので、結構時間がかかると思います。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;stack install tidal&lt;/code&gt;と実行してもいいですが、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;の仕様上、特に結果は変わりません。&lt;br /&gt;
&lt;code&gt;stack install&lt;/code&gt;は、実行ファイルがついたパッケージをビルドして&lt;code&gt;PATH&lt;/code&gt;にインストールするためのコマンドなので、&lt;code&gt;tidal&lt;/code&gt;のように実行ファイルがないパッケージでは意味がありません。&lt;/p&gt;
&lt;h3 id=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atomのプラグインの設定&#34; title=&#34;atomのプラグインの設定&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定&lt;/h3&gt;
&lt;p&gt;続いて、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインの設定をしましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;は使用する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を、前述の&lt;span class=&#34;ascii&#34;&gt;stack.yaml&lt;/span&gt;に書いた&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;のバージョンに応じて切り替える関係上、&lt;code&gt;PATH&lt;/code&gt;の通ったところに&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をインストールしません。&lt;br /&gt;
そのため、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;プラグインに、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;がインストールした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を認識させるには、下記のように設定を書き換える必要があります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動し、「&lt;span class=&#34;ascii&#34;&gt;File&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」の順にメニューをクリックして、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;の設定画面を開きます。&lt;/li&gt;
&lt;li&gt;画面左側の「📦&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」と書かれた箇所をクリックすると、インストールした&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの一覧が表示されるはずです。&lt;/li&gt;
&lt;li&gt;一覧から「&lt;span class=&#34;ascii&#34;&gt;tidalcycles&lt;/span&gt;」を探して、「⚙️&lt;span class=&#34;ascii&#34;&gt;Settings&lt;/span&gt;」をクリックします。&lt;/li&gt;
&lt;li&gt;「&lt;span class=&#34;ascii&#34;&gt;Ghci Path&lt;/span&gt;」という設定項目があるので、それを&lt;code&gt;stack exec ghci&lt;/code&gt;に書き換えてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方動作確認&#34; title=&#34;使い方動作確認&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・動作確認&lt;/h1&gt;
&lt;h2 id=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#tidalcyclesを起動する度に必要になる手順&#34; title=&#34;tidalcyclesを起動する度に必要になる手順&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する度に必要になる手順&lt;/h2&gt;
&lt;p&gt;※&lt;a href=&#34;https://tidalcycles.org/index.php/Start_tidalcycles_and_superdirt_for_the_first_time&#34;&gt;公式サイトのこちらのページ&lt;/a&gt;に対応しています。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;をスタートメニューから起動します。&lt;/li&gt;
&lt;li&gt;先ほど&lt;code&gt;include(&#34;SuperDirt&#34;)&lt;/code&gt;と入力した、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;のエディタに、今度は&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力して、同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が起動します。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;を起動して、拡張子が&lt;code&gt;.tidal&lt;/code&gt;なファイルを開くか作成します。&lt;/li&gt;
&lt;li&gt;メニューを「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順に選択してください。&lt;/li&gt;
&lt;li&gt;画面下部で&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動し、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を実行するのに必要なパッケージの&lt;code&gt;import&lt;/code&gt;や、&lt;code&gt;import&lt;/code&gt;では賄いきれない関数の定義などが自動的に行われます。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルの中身を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に貼り付けているみたいです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;動作確認のために、適当な&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式 — 例えば公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;どおり&lt;code&gt;d1 $ sound &#34;bd sn&#34;&lt;/code&gt; — を入力して、入力した行にカーソルを置き、「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押しましょう。
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;入力した式が画面下部で起動した&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に送信され、実行されます。うまくいっていれば音が鳴るはずです。&lt;/li&gt;
&lt;li&gt;停止させたいときは、&lt;code&gt;d1 silence&lt;/code&gt;と入力して同じく「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」を押してください。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;より詳しい&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の使い方は、&lt;a href=&#34;https://qiita.com/mk668a/items/6e8e0151817f484a526c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;のチュートリアル&lt;span class=&#34;ascii&#34;&gt;1 - Qiita&lt;/span&gt;&lt;/a&gt;など、他の方が書いた記事を検索してみてください。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ハマったこと&#34; title=&#34;ハマったこと&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ハマったこと&lt;/h1&gt;
&lt;h2 id=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtが見つからないという趣旨のエラーが出た&#34; title=&#34;superdirtが見つからないという趣旨のエラーが出た&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;が見つからない！」という趣旨のエラーが出た&lt;/h2&gt;
&lt;p&gt;正確なエラーメッセージは申し訳なくも忘れてしまったのですが、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;上で&lt;code&gt;SuperDirt.start&lt;/code&gt;と入力した際、エラーになることがあります。&lt;br /&gt;
この場合、&lt;span class=&#34;ascii&#34;&gt;SuperCollider&lt;/span&gt;を再起動するのを忘れている可能性がありますので、再起動してみてください。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のインストールを終えた直後では、まだ&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;は利用できないのです。&lt;/p&gt;
&lt;h2 id=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#atom上でtidalcyclesを起動した際parse-error&#34; title=&#34;atom上でtidalcyclesを起動した際parse-error&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動した際、&lt;code&gt;parse error&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先ほどの「&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上での&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の起動」という手順で、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;というエラーに出遭うことがあります。&lt;br /&gt;
そのまま&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の式を入力して「&lt;span class=&#34;ascii&#34;&gt;Shift + Enter&lt;/span&gt;」しても、&lt;code&gt;Variable not in scope: d1 :: ControlPattern -&amp;gt; t&lt;/code&gt;などというエラーになってしまうでしょう。&lt;br /&gt;
これは、前のセクションで触れた&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む際に、エラーになってしまったからです。&lt;/p&gt;
&lt;p&gt;原因はいろいろあり得るかと思いますが、私の場合、&lt;code&gt;~/.ghci&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定ファイルに&lt;code&gt;:set +m&lt;/code&gt;という行を加えていたためでした。&lt;br /&gt;
まず、&lt;code&gt;~/.ghci&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が起動するときに必ず読み込まれるファイルです。&lt;br /&gt;
必ず有効にしたい言語拡張や、&lt;code&gt;:set +m&lt;/code&gt;のような&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の設定を記載しておくファイルとなっています。要するに&lt;code&gt;~/.vimrc&lt;/code&gt;などと似たようなものですね。&lt;br /&gt;
そして&lt;code&gt;:set +m&lt;/code&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で複数行の入力を有効にするためのものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で&lt;code&gt;:set +m&lt;/code&gt;と実行すると、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;は入力した行を見て「あっ、この入力はまだ続きがありそうだな」と判断したとき、次の行を自動で前の行の続きとして扱うようになります。&lt;br /&gt;
そして、その場合入力の終了を&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に伝えたい場合は、空行を入力しなければなりません。&lt;br /&gt;
結果、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を読み込む際に、空行が入力されないため、意図しない行が「前の行の続き」と&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に認識されてしまい、&lt;code&gt;parse error (possibly incorrect indentation or mismatched brackets)&lt;/code&gt;となってしまうようです。&lt;/p&gt;
&lt;p&gt;仕方ないので、直すために&lt;code&gt;~/.ghci&lt;/code&gt;を開いて&lt;code&gt;:set +m&lt;/code&gt;と書いた行をコメントアウトするか削除しちゃいましょう。&lt;br /&gt;
再び&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;で「&lt;span class=&#34;ascii&#34;&gt;Packages&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;」 &lt;span class=&#34;ascii&#34;&gt;-&amp;gt;&lt;/span&gt; 「&lt;span class=&#34;ascii&#34;&gt;Boot TidalCycles&lt;/span&gt;」の順にメニューをクリックすれば、今度は該当のエラーがなく起動するかと思います😌。&lt;/p&gt;
&lt;p&gt;このエラーは、特にすでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境を導入している方で遭遇するケースが多いかと思います。ご注意ください。&lt;/p&gt;
&lt;h2 id=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#superdirtを起動し忘れていても何もエラーが起きない&#34; title=&#34;superdirtを起動し忘れていても何もエラーが起きない&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れていても何もエラーが起きない&lt;/h2&gt;
&lt;p&gt;表題の通りです。&lt;br /&gt;
困ったことに&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れた状態で&lt;code&gt;d1 $ sound &#34;bd sn&#34;&lt;/code&gt;などの式を実行しても、特に何のエラーもなく、音も鳴りません。&lt;br /&gt;
&lt;small&gt;（サーバーとして起動しているべき）&lt;/small&gt;&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;に接続し損ねたんだから、何かしらエラーが表示されてもいいはずなんですが、困ったことにウンともスンとも言いません😰。&lt;br /&gt;
と、言うわけで、何のエラーもなく音も出なかった場合は、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;を起動し忘れてないか確認しましょう。&lt;/p&gt;
&lt;h1 id=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに-haskell開発者として見たtidalcycles&#34; title=&#34;おわりに-haskell開発者として見たtidalcycles&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;開発者として見た&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;※ここから先はおまけ &lt;span class=&#34;ascii&#34;&gt;+&lt;/span&gt; 宣伝です。&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をインストールしたいだけの方は適当に読み飛ばしてください&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまで、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;という、昨今の&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;の多くが好んで利用するツールで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を利用する方法を説明しました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の公式サイトの&lt;span class=&#34;ascii&#34;&gt;Wiki&lt;/span&gt;にはこの方法は書かれてませんが、より確実なインストール方法として、覚えておいていただけると幸いです。&lt;br /&gt;
すでに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の開発環境をインストールしている方にも参考になるかと思います。&lt;/p&gt;
&lt;p&gt;ところで、ここまで&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を自分でインストールしてみて、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;としていくつか気になった点があります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;としては、ちょっと変わっているように感じました。&lt;/p&gt;
&lt;p&gt;それは、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;が「標準」として提供している関数を実行する際、&lt;span class=&#34;ascii&#34;&gt;tidal&lt;/span&gt;パッケージに含まれるモジュールを&lt;code&gt;import&lt;/code&gt;するだけでなく、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;というファイルを読んで、追加の関数を定義する必要がある、という点です。&lt;br /&gt;
大抵の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;は、そんなことしなくてもモジュールを&lt;code&gt;import&lt;/code&gt;するだけで使えるようになっています&lt;small&gt;（&lt;a href=&#34;http://hspec.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;https://github.com/chrisdone/lucid&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;lucid&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://hackage.haskell.org/package/clay&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;clay&lt;/span&gt;&lt;/a&gt;とか&lt;a href=&#34;http://khibino.github.io/haskell-relational-record/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;relational-record&lt;/span&gt;&lt;/a&gt;とか）&lt;/small&gt;。&lt;br /&gt;
つまり本来ならばわざわざ、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のような、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;が読み込む専用のファイルを用意しなくとも良いはずなのです。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;のプラグインの設定で簡単に切り替えることができるものなので、もし間違ったファイルに設定してしまったら、言語の標準にあたる関数がおかしな動作をすることになりかねませんし、あまり良いやり方だとは思えません。本来なら設定に混ぜて書くべきものではないでしょう。&lt;/p&gt;
&lt;p&gt;なぜ&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;はこんな仕様になっているかというと、それにはある意味&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;らしい制約が絡んでいると推測されます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;上で&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を起動する、というのは、実際には&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を起動して、&lt;a href=&#34;https://github.com/tidalcycles/Tidal/blob/master/BootTidal.hs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;&lt;/a&gt;というファイルを読み込ませる、ということなのでした&lt;small&gt;（事実、&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;などのエディターを介さなくとも、お使いのターミナルエミュレーターから&lt;code&gt;ghci&lt;/code&gt;コマンドを起動して&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;ファイルの中身をコピペするだけで、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;は利用できます）&lt;/small&gt;。&lt;br /&gt;
その&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;の中身を見てみると、サンプルで実行した&lt;code&gt;d1&lt;/code&gt;という関数が、下記のように定義されていることがわかります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sound.Tidal.Context&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- total latency = oLatency + cFrameTimespan&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;tidal &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; startTidal (superdirtTarget {oLatency &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.1&lt;/span&gt;, oAddress &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;, oPort &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;57120&lt;/span&gt;}) (defaultConfig {cFrameTimespan &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; streamReplace tidal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ... 省略 ...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; d3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; p &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;で始まる行で、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の初期化を行っていると思われます。&lt;br /&gt;
初期化の際には、サーバーとして起動している&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続設定&lt;small&gt;（この場合&lt;code&gt;127.0.0.1&lt;/code&gt;の&lt;code&gt;57120&lt;/code&gt;番ポートへ接続している）&lt;/small&gt;を渡しているようです。&lt;br /&gt;
恐らくこの&lt;code&gt;startTidal&lt;/code&gt;関数が、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;へ接続し、代入した&lt;code&gt;tidal&lt;/code&gt;という変数に、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を含んでいるんでしょう。&lt;br /&gt;
そして、&lt;code&gt;let p = streamReplace tidal&lt;/code&gt;という行で、その&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;streamReplace&lt;/code&gt;関数に&lt;a href=&#34;http://capm-network.com/?tag=Haskell-%E9%83%A8%E5%88%86%E9%81%A9%E7%94%A8&#34;&gt;部分適用&lt;/a&gt;することで、&lt;code&gt;p&lt;/code&gt;が&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続を参照できるようにしています。&lt;br /&gt;
さらに、&lt;code&gt;let d1 = p 1&lt;/code&gt;などの行で、前の行で定義した&lt;code&gt;p&lt;/code&gt;に整数&lt;small&gt;（シンセサイザーの番号だそうです）&lt;/small&gt;を部分適用することで、結果、&lt;code&gt;d1&lt;/code&gt;、&lt;code&gt;d2&lt;/code&gt;などの関数へ、間接的に&lt;code&gt;tidal&lt;/code&gt;を渡すことになります。&lt;/p&gt;
&lt;p&gt;つまり&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数は、何らかの形で、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を持っているのです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として、&lt;code&gt;d1&lt;/code&gt;や&lt;code&gt;d2&lt;/code&gt;などの関数に毎回接続情報を渡すのは煩雑だと考えたためでしょう。&lt;br /&gt;
残念ながら、通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;がそうであるように、外部のサーバーに接続した結果取得されるものを、関数が暗黙に参照できるようにしたい場合、 — つまり、今回のようにユーザーが接続情報を明示的に渡すことなく使えるようにしたい場合 — 少なくともパッケージを&lt;code&gt;import&lt;/code&gt;するだけではうまくいきません&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;のように、&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;のような外部に接続する処理を、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の実行時に書かなければならないのです。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;tidal &amp;lt;- startTidal&lt;/code&gt;の行で作られる&lt;span class=&#34;ascii&#34;&gt;SuperDirt&lt;/span&gt;への接続情報を&lt;code&gt;d1&lt;/code&gt;などの関数が暗黙に利用できるようにすることは、実際には&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;で行っているような方法を使わなくともできます。&lt;br /&gt;
そうすることで、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;を変なファイルに切り替えてしまって、&lt;code&gt;d1&lt;/code&gt;などの関数の定義が間違ったものになってしまう&lt;small&gt;（あるいはそもそも定義されなくなってしまう）&lt;/small&gt;リスクを回避できます。&lt;br /&gt;
具体的には、下記のような方法が考えられます。&lt;br /&gt;
申し訳なくも私はこれ以上&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;に入れ込むつもりもないので、誰か&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;を気に入った方が適当に提案するなりパッチを送るなりしてみてください&lt;small&gt;（他力本願😰）&lt;/small&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の中で&lt;code&gt;ReaderT&lt;/code&gt;を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で「関数に渡した引数を暗黙に利用できるようにする」といえば、やはり&lt;code&gt;ReaderT&lt;/code&gt;モナドトランスフォーマーが一番オーソドックスな方法でしょう。&lt;br /&gt;
実は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上では、&lt;code&gt;IO&lt;/code&gt;以外のモナドのアクションで&lt;code&gt;print&lt;/code&gt;することができます。&lt;br /&gt;
&lt;a href=&#34;https://www.reddit.com/r/haskell/comments/87otrn/you_can_override_the_monad_that_ghci_uses/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;You can override the monad that GHCi uses&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Reddit&lt;/span&gt;のスレッドでは、&lt;code&gt;ReaderT&lt;/code&gt;を使ったサンプルが紹介されています。&lt;br /&gt;
これと同じ要領で、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の&lt;code&gt;-interactive-print&lt;/code&gt;というオプションに、&lt;code&gt;tidal&lt;/code&gt;を&lt;code&gt;ReaderT&lt;/code&gt;経由で渡してから結果を&lt;code&gt;print&lt;/code&gt;する関数を設定しましょう。&lt;br /&gt;
あとは&lt;code&gt;d1&lt;/code&gt;などを&lt;code&gt;ReaderT&lt;/code&gt;のアクションにするだけで、それらを&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;から消し去ることができます。&lt;br /&gt;
残念ながらこの方法を使うと、&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;に与えた式の結果がすべて当該のモナドのアクションになっていなければならなくなるため、例えば単純な計算結果でさえ&lt;code&gt;return&lt;/code&gt;をいちいち書かないといけなくなります。しかし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の利用方法を見る限り、大きな問題にはならないだろうと思います。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張を使う
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には、&lt;code&gt;ImplicitParams&lt;/code&gt;という、もっと直接的にこれを実現する言語拡張があります。文字通り、暗黙の引数を実現するための拡張です&lt;small&gt;（&lt;a href=&#34;https://qiita.com/philopon/items/e6d2522f5b514c219a5f&#34;&gt;参考&lt;/a&gt;）&lt;/small&gt;。&lt;br /&gt;
これを利用して、例えば&lt;code&gt;d1&lt;/code&gt;を&lt;code&gt;?tidal :: Stream =&amp;gt; ControlPattern -&amp;gt; IO ()&lt;/code&gt;のように型宣言しておき、&lt;code&gt;?tidal&lt;/code&gt;&lt;small&gt;（頭に&lt;code&gt;?&lt;/code&gt;を付けたものが暗黙の引数となります）&lt;/small&gt;を暗黙の引数として参照するようにしましょう。後は&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;の起動時に&lt;code&gt;?tidal&lt;/code&gt;を定義すれば、&lt;code&gt;?tidal&lt;/code&gt;の後に&lt;code&gt;d1&lt;/code&gt;などを定義する必要がなくなるので、&lt;span class=&#34;ascii&#34;&gt;BootTidal.hs&lt;/span&gt;はもっとコンパクトに済むはずです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他、&lt;code&gt;unsafePerformIO&lt;/code&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;など、ちょっと危ない手段を使う
&lt;ul&gt;
&lt;li&gt;こちらについては詳細を割愛します。&lt;code&gt;d1&lt;/code&gt;などの再利用性が下がるので、おすすめしません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;の技術的な側面で気になった点は以上です。&lt;br /&gt;
ちょっと難しい話になってしまいましたが、これを機会に、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;そのものへの興味を持っていただけると幸いです。&lt;br /&gt;
素晴らしいことに、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;そのものは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知らなくてもそれなりに使えるようになっているようですが、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知った上で使えば、より簡単にトラブルシューティングができるようになりますし、&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をより柔軟に使えるようになるでしょう。&lt;/p&gt;
&lt;p&gt;もし、今回の記事や&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;をきっかけに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を勉強してみたいと思ったら、&lt;a href=&#34;https://wiki.haskell.jp/Links&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Wiki&lt;/span&gt;の日本語のリンク集&lt;/a&gt;を読んで、自分に合う入門コンテンツを見つけてみてください！&lt;br /&gt;
それから、何か困ったことがあれば&lt;a href=&#34;https://haskell-jp.slack.com/messages/C5666B6BB/convo/C4M4TT8JJ-1547294914.091800/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack Workspace&lt;/span&gt;にある、&lt;span class=&#34;ascii&#34;&gt;#questions&lt;/span&gt;チャンネル&lt;/a&gt;で質問してみてください。&lt;br /&gt;
&lt;a href=&#34;https://join.slack.com/t/haskell-jp/shared_invite/enQtNDY4Njc1MTA5MDQxLTAzZGNkZDlkMWYxZDRlODI3NmNlNTQ1ZDc3MjQxNzg3OTg4YzUzNmUyNmU5YWVkMjFmMjFjYzk1OTE3Yzg4ZTM&#34;&gt;登録はこちら&lt;/a&gt;からどうぞ！&lt;/p&gt;
&lt;p&gt;それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;TidalCycles&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Hacking!!&lt;/span&gt; 🎶🎶🎶&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;どのバージョンの&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;でどのバージョンの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がインストールされるかは、&lt;span class=&#34;ascii&#34;&gt;LTS Haskell&lt;/span&gt;を管理している&lt;a href=&#34;https://www.stackage.org/&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;」というウェブサイトのトップページ&lt;/a&gt;にある、「&lt;span class=&#34;ascii&#34;&gt;Latest LTS per GHC version&lt;/span&gt;」というセクションをご覧ください。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;後で軽く触れる、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;という邪悪なテクニックを使わない限りは。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hourly-antenna.html&#34; lang=&#34;ja&#34;&gt;DroneでHaskell Antennaを毎時更新する&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id><title type="text">GCS で Drone 1.0 をキャッシュする</title><updated>2019-01-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．&lt;/p&gt;
&lt;h2 id=&#34;cache-in-drone&#34;&gt;Cache in Drone&lt;/h2&gt;
&lt;p&gt;Drone でキャッシュを利用するには次のような Plugin を使用する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drone-s3-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-s3-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drone-plugins/drone-s3-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-volume-cache: &lt;a href=&#34;https://github.com/drone-plugins/drone-volume-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/drillster/drone-volume-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-gcs-cache: &lt;a href=&#34;https://github.com/hvalle/drone-gcs-cache&#34;&gt;GitHub&lt;/a&gt;・&lt;a href=&#34;http://plugins.drone.io/hvalle/drone-gcs-cache/&#34;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの &lt;code&gt;Trusted&lt;/code&gt; フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．&lt;/p&gt;
&lt;p&gt;ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．&lt;/p&gt;
&lt;h2 id=&#34;drone-gcs-cache&#34;&gt;Drone GCS Cache&lt;/h2&gt;
&lt;h3 id=&#34;認証鍵の設定&#34;&gt;認証鍵の設定&lt;/h3&gt;
&lt;p&gt;GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの &lt;code&gt;APIとサービス&lt;/code&gt; の &lt;code&gt;認証情報&lt;/code&gt; からサービスアカウントを作成し(このときに JSON が DL される)，&lt;code&gt;IAMと管理&lt;/code&gt; の &lt;code&gt;IAM&lt;/code&gt; からさっき作ったアカウントに &lt;code&gt;ストレージ管理者&lt;/code&gt; を追加した IAM を作成する．&lt;/p&gt;
&lt;p&gt;この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら &lt;code&gt;Allow Pull Requests&lt;/code&gt; にチェックする．&lt;/p&gt;
&lt;h3 id=&#34;yaml-の設定&#34;&gt;YAML の設定&lt;/h3&gt;
&lt;p&gt;あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;restore:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; node_modules&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;flush_age:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは Drone の Secret に &lt;code&gt;gcs-access-json-key&lt;/code&gt; という名前で登録している場合である． ちなみに &lt;code&gt;flush_age&lt;/code&gt; は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で試す&#34;&gt;Haskell で試す&lt;/h2&gt;
&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell/pull/3&#34;&gt;導入したPRはこれ&lt;/a&gt;． &lt;code&gt;.stack&lt;/code&gt; と &lt;code&gt;.stack-work&lt;/code&gt; をキャッシュする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;kind:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell:8.6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;pull:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;bucket:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara-drone-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; title=&#34;22&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;from_secret:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; title=&#34;23&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;rebuild:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; title=&#34;25&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; title=&#34;26&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .stack-work&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; title=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; title=&#34;28&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;event:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-30&#34; title=&#34;30&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-31&#34; title=&#34;31&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-32&#34; title=&#34;32&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-33&#34; title=&#34;33&#34;&gt;    ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;flush&lt;/code&gt; は同じなので割愛． &lt;code&gt;$HOME/.stack&lt;/code&gt; だと動作しなかったので，いっそのことカレントディレクトリに &lt;code&gt;.stack&lt;/code&gt; を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/before.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;9分は長い． そんでアフター:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/use-drone-cache-with-gcs/after.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/super-precure-monad.html</id><title type="text">モナドの新しい力！スーパープリキュアモナド！</title><updated>2018-12-27T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/super-precure-monad.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;この記事は&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;できたもの&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#この記事は&#34; title=&#34;この記事は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;この記事は&lt;/h1&gt;
&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2018/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt; その&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;&lt;/a&gt;兼&lt;a href=&#34;https://adventar.org/calendars/2984&#34;&gt;プリキュア&lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2018&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事です。&lt;br /&gt;
毎度同時投稿で失礼します。&lt;br /&gt;
今年は私用で忙しかったので、のんびり書いてできあがったら空いてる日に投稿する、という楽なスタイルで書かせていただきました。なのでタイムスリップして&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;日目の記事と言うことにします&lt;small&gt;（それにしてもずいぶん時間かかってしまってすみません、もうクリスマスも過ぎたし…😥）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;今回も例年の私の&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;どおり、&lt;a href=&#34;https://github.com/igrep/typesafe-precure&#34;&gt;タイプセーフプリキュア！&lt;/a&gt;に、最近追加しようとした機能と、その際使用したもろもろの要素技術についての記事です。&lt;br /&gt;
タイプセーフプリキュア！そのものについては&lt;a href=&#34;https://haskell.jp/blog/posts/2018/substring-parser.html&#34;&gt;今年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月の記事&lt;/a&gt;や、そこで言及しているもっと古い記事をご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34; title=&#34;課題-プリキュアに変身していない状態で浄化技を使おうとした場合型エラーにしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;課題&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; プリキュアに変身していない状態で浄化技を使おうとした場合、型エラーにしたい&lt;/h1&gt;
&lt;p&gt;従来より、タイプセーフプリキュア！には、&lt;code&gt;PreCureMonad&lt;/code&gt;と呼ばれる、プリキュアの台詞を&lt;code&gt;do&lt;/code&gt;記法で組み立てる機能があります。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;上で下記のように書くだけで、&lt;a href=&#34;https://www.youtube.com/watch?v=oQLIyIZ2vk0&#34;&gt;「&lt;span class=&#34;ascii&#34;&gt;Go!&lt;/span&gt; プリンセスプリキュア」のあの名シーン&lt;/a&gt;を再現できます&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       say &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyScarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;名シーンを単純な文字列のリストとして使いたい場合はこう👇しましょう&lt;small&gt;（出力は手で見やすく加工しています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; composeEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！プリンセスエンゲージ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;深紅の炎のプリンセス！キュアスカーレット！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;冷たい檻に閉ざされた夢、返していただきますわ。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;お覚悟を決めなさい！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;エクスチェンジ！モードエレガント！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;スカーレット・バイオリン！フェニックス！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;羽ばたけ炎の翼！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;プリキュア！ フェニックス・ブレイズ！&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ごきげんよう。&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに&lt;code&gt;printEpisode&lt;/code&gt;という関数で実行すれば、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行ごとに間隔を置いてあの台詞を再生できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;この罪を抱いたまま、もう一度、グランプリンセスを目指す！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;プリキュア！プリンセスエンゲージ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;深紅の炎のプリンセス！キュアスカーレット！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;冷たい檻に閉ざされた夢、返していただきますわ。&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;お覚悟を決めなさい！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;エクスチェンジ！モードエレガント！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;スカーレット・バイオリン！フェニックス！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;羽ばたけ炎の翼！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;プリキュア！ フェニックス・ブレイズ！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;ごきげんよう。&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんな&lt;code&gt;PreCureMonad&lt;/code&gt;ですが、先ほどのコードをよく読めばわかるとおり、ちょっと不格好ですよね。&lt;br /&gt;
具体的には下記の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;scarlet &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKey_Scarlet&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;scarletModeElegant &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; transform scarlet (&lt;span class=&#34;dt&#34;&gt;PrincessPerfume&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を返し、さらにその&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;行目の&lt;code&gt;transform&lt;/code&gt;関数に渡すことでキュアスカーレットのモード・エレガント（&lt;code&gt;CureScarlet_ModeElegant&lt;/code&gt;）を取得しています。&lt;br /&gt;
「&lt;code&gt;transform&lt;/code&gt;関数が、変身する女の子である&lt;code&gt;Towa&lt;/code&gt;（赤城トワ）と変身アイテムを受け取って&lt;code&gt;CureScarlet&lt;/code&gt;を」返すという箇所について、&lt;code&gt;Towa&lt;/code&gt;に&lt;strong&gt;加えて&lt;/strong&gt;&lt;code&gt;CureScarlet&lt;/code&gt;を&lt;strong&gt;新しく作っている&lt;/strong&gt;ように聞こえます。&lt;br /&gt;
本来同一人物であるはずの&lt;code&gt;Towa&lt;/code&gt;と&lt;code&gt;CureScarlet&lt;/code&gt;を、あたかも別々のものとして扱っているように捉えられかねません。&lt;br /&gt;
そう、本来プリキュアの「変身」は女の子自身の状態を書き換えるものとして表現した方が自然なのです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でそうした「状態」を表現する場合、名前のとおり&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を使うのが割と一般的な方法です&lt;small&gt;（プログラム全体で状態を管理する場合、&lt;code&gt;IORef&lt;/code&gt;や&lt;code&gt;TVar&lt;/code&gt;などを使う方が例外に強く安全ではありますが、それはさておき）&lt;/small&gt;。&lt;br /&gt;
しかし、従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;でプリキュアの変身や浄化技を表現する場合、&lt;strong&gt;女の子が変身していない状態で浄化技&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;purify&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を使おうとした場合をどのように扱うか&lt;/strong&gt;、という問題があります。&lt;br /&gt;
先ほどの例で言うところの&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;purify scarletModeElegant (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という行でまさにその「浄化技」を実行しているのですが、プリキュアの設定上、特定の浄化技を使うには、特定のプリキュアのフォームに、専用のアイテムを渡さなければなりません。&lt;br /&gt;
タイプセーフプリキュア！ではこの点に強くこだわり、浄化技が使用できる組み合わせごとに型クラスのインスタンスを定義することで、間違った組み合わせを&lt;code&gt;purify&lt;/code&gt;関数に渡すと、型エラーになります&lt;small&gt;（詳しくは&lt;a href=&#34;https://qiita.com/igrep/items/5496fa405fae00b5a737&#34;&gt;タイプセーフプリキュア！を最初に技術的に解説した記事&lt;/a&gt;をご覧ください）&lt;/small&gt;。&lt;br /&gt;
当然、まだ変身していない状態の女の子を&lt;code&gt;purify&lt;/code&gt;関数に渡しても、エラーになってしまいます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; title=&#34;4&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; for (&lt;span class=&#34;dt&#34;&gt;Purification&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; title=&#34;5&#34;&gt;                         &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; title=&#34;6&#34;&gt;        arising from a use &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘purify’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; title=&#34;7&#34;&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; title=&#34;8&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; an equation for ‘scene’&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; title=&#34;9&#34;&gt;          scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; purify &lt;span class=&#34;dt&#34;&gt;Towa&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ScarletViolin&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DressUpKeyPhoenix&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プリキュア実装の大先輩である&lt;a href=&#34;https://github.com/sue445/rubicure&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rubicure&lt;/span&gt;&lt;/a&gt;では、同じようなケースで実行時エラーを出すようにしていますし、&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;においても、&lt;code&gt;ExceptT&lt;/code&gt;を使ってエラーにする、という方法が採れるでしょう。&lt;br /&gt;
しかしそこは「タイプセーフプリキュア！」。どうにかして、変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーにして、従来のこの振る舞いと一貫させたいところですよね。&lt;br /&gt;
というのが今回の課題です。&lt;/p&gt;
&lt;h1 id=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実現方法-indexed-monadと型レベル連想配列を使う&#34; title=&#34;実現方法-indexed-monadと型レベル連想配列を使う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実現方法&lt;span class=&#34;ascii&#34;&gt;: Indexed Monad&lt;/span&gt;と型レベル連想配列を使う&lt;/h1&gt;
&lt;p&gt;今回の課題のとおり、「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラー」としつつ、「変身した状態での&lt;code&gt;purify&lt;/code&gt;を型エラーとしない」ためには、&lt;code&gt;purify&lt;/code&gt;や&lt;code&gt;transform&lt;/code&gt;を実行する前後で、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;内で共有している値の型を変更できるようにする必要があります。&lt;br /&gt;
残念ながら、これは従来の&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;では不可能です。&lt;br /&gt;
&lt;code&gt;State s&lt;/code&gt;に対する&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: State s a -&amp;gt; (a -&amp;gt; State s b) -&amp;gt; State s b&lt;/code&gt;となっていることから察せられるとおり、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の中で共有する型は、アクションの実行前後にかかわらず同じ&lt;code&gt;s&lt;/code&gt;でないといけないためです。&lt;br /&gt;
これはそもそも従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;の仕様上やむを得ないことです。&lt;br /&gt;
従来の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;はそもそもアクションの実行前後で、アクションの実行結果以外の型を変えることができないようになっています。&lt;br /&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の型が&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;となっていることからしても、アクションの実行前後で&lt;code&gt;m&lt;/code&gt;は&lt;code&gt;m&lt;/code&gt;のままであることがわかります。&lt;/p&gt;
&lt;p&gt;この、「アクションの実行前後で、&lt;code&gt;m&lt;/code&gt;の型を変えることができる」ようにしたのが&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は次のような型宣言にすることで、アクションの実行前後で異なる型の “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を挟めるようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxApplicative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxMonad&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  ibind ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m j k b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i j a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m i k b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IxApplicative&lt;/code&gt;は名前のとおり&lt;code&gt;IxMonad&lt;/code&gt;と同様に“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”が付いた&lt;code&gt;Applicative&lt;/code&gt;となっています。&lt;a href=&#34;http://hackage.haskell.org/package/indexed-0.1/docs/Control-Monad-Indexed.html&#34;&gt;詳しい定義はドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;唯一のメソッドである&lt;code&gt;ibind&lt;/code&gt;が、普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;における&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の引数をひっくり返して“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”を追加したものです。&lt;br /&gt;
&lt;code&gt;(&amp;gt;&amp;gt;=) :: Monad m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;の&lt;code&gt;m&lt;/code&gt;に、型引数が&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ追加されていますね？これが“&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;”です。&lt;br /&gt;
ある&lt;code&gt;IxMonad&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;が&lt;code&gt;m i j a&lt;/code&gt;という形で型引数を渡されている時、&lt;code&gt;i&lt;/code&gt;がアクションを実行する&lt;strong&gt;前&lt;/strong&gt;の型、&lt;code&gt;j&lt;/code&gt;がアクションを実行した&lt;strong&gt;後&lt;/strong&gt;の型を表します。&lt;br /&gt;
&lt;code&gt;a&lt;/code&gt;は普通の&lt;code&gt;Monad&lt;/code&gt;と同様、アクションの実行結果となっています。&lt;/p&gt;
&lt;p&gt;さらに&lt;span class=&#34;ascii&#34;&gt;Indexed&lt;/span&gt;な&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad (&lt;/span&gt;&lt;code&gt;IxState&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;で使えるアクションの型宣言を見れば、&lt;code&gt;IxState&lt;/code&gt;で共有している状態の型が、アクションの実行前後で変更できることがよりはっきりとわかるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iget ::&lt;/span&gt;      &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i i i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ igetしてもIxStateが管理している状態は変わらないため、型もやはり変わらず。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;iput ::&lt;/span&gt; j &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IxState&lt;/span&gt; i j ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ iputするとIxStateが管理している状態は、引数で渡した値の型に変わる。&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらもおなじみ&lt;a href=&#34;http://hackage.haskell.org/package/mtl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mtl&lt;/span&gt;パッケージ&lt;/a&gt;にある&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;に、単純に “&lt;span class=&#34;ascii&#34;&gt;index&lt;/span&gt;” を加えただけのものとなっています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2013/05/04/144840&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;の世界 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; モナドとわたしとコモナド&lt;/a&gt;で紹介された際の&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;は、&lt;code&gt;ido&lt;/code&gt;という&lt;span class=&#34;ascii&#34;&gt;Quasi Quote&lt;/span&gt;を使って&lt;code&gt;do&lt;/code&gt;記法を無理矢理シミュレートしていましたが、現在は&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;code&gt;RebindableSyntax&lt;/code&gt;という拡張を使うことで、普通の&lt;code&gt;do&lt;/code&gt;記法をそのまま利用することができるようになりました&lt;small&gt;（例は後で紹介します）&lt;/small&gt;。&lt;br /&gt;
さらに、現在は&lt;code&gt;RebindableSyntax&lt;/code&gt;を使った場合の諸々の問題を回避するべく、&lt;a href=&#34;https://github.com/jbracker/supermonad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を一般化した&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;と、それを簡単に使えるようにした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の型チェッカープラグイン&lt;/a&gt;が作られたり、&lt;a href=&#34;https://github.com/isovector/do-notation&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;という、&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と普通の&lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;を型クラスで抽象化したパッケージ&lt;/a&gt;が作られたりしています。&lt;br /&gt;
今回は純粋に&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使うだけで十分だったので、&lt;span class=&#34;ascii&#34;&gt;Super Monad&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;do-notation&lt;/span&gt;は使用しませんでしたが、今後&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;をもっと実践的に使用する機会があれば、使用してみたいと思います。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;を使用することで、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型を、アクションの実行前後で変更できるようになりました。&lt;br /&gt;
続いて、各女の子の状態を、&lt;code&gt;State&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有している状態の型として、どのように管理するかを検討しましょう。&lt;br /&gt;
というのも、タイプセーフプリキュア！には最新の&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;の時点で&lt;span class=&#34;ascii&#34;&gt;59&lt;/span&gt;人の女の子が収録されている&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;のですが、それらすべてを変身前と変身後に分けて管理するだけでも、&lt;span class=&#34;ascii&#34;&gt;2 ^ 59&lt;/span&gt;通りの状態を型として表現できなければなりません。&lt;br /&gt;
これを直感的に表現できるようにするために、ちょっと型レベルプログラミングの力を借りましょう。そこで登場するのが「型レベル連想配列」です。&lt;br /&gt;
「型レベル連想配列」という言い方はあまりしないのでピンとこないかも知れませんが、要するに型&lt;small&gt;（タイプセーフプリキュア！の場合、プリキュアに変身する女の子一人一人に個別の型を割り当てているので、その個別の型）&lt;/small&gt;と、それに対応する値のペアを含んだ型レベルリストです。&lt;br /&gt;
大雑把に言うと、下記👇のような内容となります&lt;small&gt;（実際にはもう少し違う型で構成されています）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;[ (&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;,   &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ プリキュアに変身する女の子を表す型（この場合「HUGっと！プリキュア」の野乃はな）&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Saaya&lt;/span&gt;,  &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;--         ^ 対応する女の子が変身しているかどうかを表すsingleton type。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           DataKindsで型に持ち上げられたBoolを、普通の値として扱えるよう変換するためのラッパー。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           申し訳なくもsingleton typeについては割愛します。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;co&#34;&gt;--           Haskell-jpのSlack Workspaceあたりでリクエストがあったら書こうかな。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; title=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; title=&#34;10&#34;&gt;, (&lt;span class=&#34;dt&#34;&gt;Homare&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; title=&#34;11&#34;&gt;, &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; title=&#34;12&#34;&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;別の視点で見ると、これはいわゆる&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;とも似ています。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;パッケージ&lt;/a&gt;や&lt;a href=&#34;https://github.com/chrisdone/labels&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;labels&lt;/span&gt;パッケージ&lt;/a&gt;、&lt;a href=&#34;https://www.athiemann.net/2017/07/02/superrecord.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;superrecord&lt;/span&gt;パッケージ&lt;/a&gt;がそうしているように、&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;は、フィールドのラベルを表す&lt;small&gt;（型レベルの、静的な）&lt;/small&gt;文字列をキーとして、それに対応する値を含んだ連想配列として見なすことができるためです。&lt;br /&gt;
事実私は今回、&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;を使ってこの機能を実装しました。他の&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;の実装でも良かったのですが、これ以外のものを全く使ったことがないので😅。&lt;/p&gt;
&lt;h1 id=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#できたもの&#34; title=&#34;できたもの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;できたもの&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Indexed Monad&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Extensible Record&lt;/span&gt;を組み合わせることで、&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;の各種アクションを、次のように置き換えられることがわかりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform &amp;lt;girl&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxState&lt;/code&gt;（実際にはその&lt;span class=&#34;ascii&#34;&gt;Monad Transformer&lt;/span&gt;版である&lt;code&gt;IxStateT&lt;/code&gt;）で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」に更新する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;がすでに変身している状態の場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身した状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、変身時の台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purify &amp;lt;precure&amp;gt; &amp;lt;item&amp;gt;&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキーを取得するため、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;にあらかじめ定義しておいた&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsGirl&lt;/code&gt;で取得した型を、これ以降&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;と呼びます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;が「変身した状態」になっていない場合は、型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値が「変身していない状態」になっているので型エラーとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;をかぶせた&lt;code&gt;Writer&lt;/code&gt; &lt;span class=&#34;ascii&#34;&gt;Monad&lt;/span&gt;で共有しているリストに、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;に対応した、浄化技を使用したときの台詞（文字列）を追記する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように生まれ変わった&lt;span class=&#34;ascii&#34;&gt;PreCure Monad&lt;/span&gt;を&lt;strong&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨&lt;/strong&gt;と呼ぶこととします💪&lt;/p&gt;
&lt;p&gt;下記が&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;のサンプルコードです。&lt;br /&gt;
野乃はながキュアエールに変身して、「ハート・フォー・ユー」という浄化技を放つまでを表しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cureYell ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreCureM&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;StatusTable&lt;/span&gt; &amp;#39;[]) (&lt;span class=&#34;dt&#34;&gt;StatusTable&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasTransformed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;True&lt;/span&gt;]) ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;cureYell &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Hana&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; title=&#34;5&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureYell&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PreHeart&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MiraiCrystalPink&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enter&lt;/code&gt;は、旧&lt;span class=&#34;ascii&#34;&gt;PreCureMonad&lt;/span&gt;にはない、&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;に新しく追加されたアクションです。&lt;br /&gt;
引数で指定された女の子や、女の子が変身したプリキュアを「登場」させます。&lt;br /&gt;
具体的には、以下のように振る舞います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数で指定された値が女の子&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身していない状態」で追加する。&lt;/li&gt;
&lt;li&gt;引数で指定された値がすでに変身したプリキュア&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;であれば、&lt;code&gt;&amp;lt;precure&amp;gt;&lt;/code&gt;に&lt;span class=&#34;ascii&#34;&gt;Type Family&lt;/span&gt; &lt;code&gt;AsGirl&lt;/code&gt;を適用し、女の子を表す値&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;を取得する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IxStateT&lt;/code&gt;で共有している型レベル連想配列のキー&lt;code&gt;&amp;lt;girl&amp;gt;&lt;/code&gt;に対応する値を「変身した状態」で追加する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、&lt;code&gt;transform&lt;/code&gt;するにしても&lt;code&gt;purify&lt;/code&gt;するにしても、事前に変身前の女の子かその変身後のプリキュアが&lt;code&gt;enter&lt;/code&gt;していないといけません。&lt;br /&gt;
これは単純にその方が実装が簡単だから、という理由もありますし、一旦「登場」させたほうがなんとなくかっこいいかな、と感じたからです。&lt;/p&gt;
&lt;h2 id=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#super-precure-monadを試す方法&#34; title=&#34;super-precure-monadを試す方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✨&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;✨を試す方法&lt;/h2&gt;
&lt;p&gt;ここまで述べたような基本的な仕様は実装できたものの、まだ解決すべき技術的な問題が見つかったので、残念ながらリリースはされていません&lt;small&gt;（その詳細は気が向いたら書きます）&lt;/small&gt;。&lt;br /&gt;
なので、試す場合は下記のように実行してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; chcp &lt;span class=&#34;dv&#34;&gt;65001&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- ^ Windowsの方は恐らく必要&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; git clone &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;b super&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;monad https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;github&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;igrep&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;git&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; cd typesafe&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;precure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack build&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack exec ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XRebindableSyntax&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XFlexibleContexts&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XTypeFamilies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((&amp;gt;&amp;gt;), (&amp;gt;&amp;gt;=))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;m &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ACME.PreCure.Monad.Super&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; scene &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       enter &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       transform &lt;span class=&#34;dt&#34;&gt;Makoto&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;       purify &lt;span class=&#34;dt&#34;&gt;CureSword&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneDavi&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; printEpisode scene&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; title=&#34;18&#34;&gt;(ダビィー！)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; title=&#34;19&#34;&gt;プリキュア！ラブリンク！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; title=&#34;20&#34;&gt;(&lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; title=&#34;21&#34;&gt;勇気の刃！ キュアソード！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; title=&#34;22&#34;&gt;このキュアソードが 愛の剣で、あなたの野望を断ち切ってみせる！&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; title=&#34;23&#34;&gt;閃け！ホーリー・ソード！&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「変身していない状態での&lt;code&gt;purify&lt;/code&gt;関数の実行を型エラーとする」といった仕様を試す場合は、&lt;a href=&#34;https://github.com/igrep/typesafe-precure/blob/super-precure-monad/gen/AllPreCureM.hs&#34;&gt;こちらに置いた、全プリキュアの変身と浄化技を列挙したテスト用ファイル&lt;/a&gt;を&lt;span class=&#34;ascii&#34;&gt;ghci&lt;/span&gt;で読んでみるといいでしょう。&lt;br /&gt;
先ほど👆の手順で&lt;code&gt;git clone&lt;/code&gt;したディレクトリーにおいて、あらかじめ&lt;code&gt;stack build&lt;/code&gt;を実行しておくのをお忘れなく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack build
$ stack exec ghci gen/AllPreCureM.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適当に&lt;code&gt;gen/AllPreCureM.hs&lt;/code&gt;を書き換えて&lt;code&gt;:r&lt;/code&gt;してみれば、概ねいい感じに動いていることがわかるはずです。&lt;/p&gt;
&lt;p&gt;例えば冒頭付近にある、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; title=&#34;1&#34;&gt;act_CureDiamond_LovelyCommuneRaquel_CureLoveads &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; printEpisode &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; title=&#34;2&#34;&gt;  enter &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; title=&#34;3&#34;&gt;  transform &lt;span class=&#34;dt&#34;&gt;Rikka&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; title=&#34;4&#34;&gt;  purify &lt;span class=&#34;dt&#34;&gt;CureDiamond&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LovelyCommuneRaquel&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CureLoveads&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という&lt;span class=&#34;ascii&#34;&gt;Super PreCure Monad&lt;/span&gt;によるアクションから、&lt;code&gt;transform Rikka (LovelyCommuneRaquel CureLoveads)&lt;/code&gt;という行を削除した上で&lt;code&gt;:r&lt;/code&gt;してみると、次のようなエラーになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; :r
[1 of 1] Compiling AllPreCureM      ( gen\AllPreCureM.hs, interpreted )

gen\AllPreCureM.hs:22:3: error:
    • Couldn&amp;#39;t match type ‘&amp;#39;False’ with ‘&amp;#39;True’
        arising from a use of ‘purify’
    • In a stmt of a &amp;#39;do&amp;#39; block:
        purify CureDiamond (LovelyCommuneRaquel CureLoveads)
      In the second argument of ‘($)’, namely
        ‘do enter Rikka
            purify CureDiamond (LovelyCommuneRaquel CureLoveads)’
      In the expression:
        printEpisode
          $ do enter Rikka
               purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |
22 |   purify CureDiamond (LovelyCommuneRaquel CureLoveads)
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと、変身していない状態で&lt;code&gt;purify&lt;/code&gt;することを型エラーにできていますね！&lt;/p&gt;
&lt;p&gt;ここまでできていながら残念ですが、リリースは、来年のプリキュアハッカソンか&lt;span class=&#34;ascii&#34;&gt;Advent Calendar&lt;/span&gt;あたりに乞うご期待と言うことで！💦&lt;br /&gt;
それでは&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年も&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Super PreCure Hacking&lt;/span&gt;を❣️❣️❣️&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;リンク先の動画をご覧になればわかるとおり、実際のそのシーンより大幅に省略されているところは突っ込まないでいただきたい…🙏。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;「この間の映画に出ていた人数より多くない？」と思った方へ&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 「プリキュアオールスターズ」に出てくる女の子たちに加え、坂上あゆみ、ペコリン、若宮アンリ、はぐたんの&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;人が、タイプセーフプリキュア！の分類上&lt;code&gt;Girl&lt;/code&gt;として収録されています。ちなみにキュアモフルンも収録されていますが、モフルンはあくまでも変身アイテム&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;SpecialItem&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;という扱いです。&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/tidalcycles-stack.html&#34; lang=&#34;ja&#34;&gt;TidalCyclesをstackで確実にインストールする&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html</id><title type="text">cabal build で package.yaml を使う</title><updated>2018-12-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近少しずつ &lt;code&gt;cabal&lt;/code&gt; を使うようになりました。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; と &lt;code&gt;cabal&lt;/code&gt; のどちらを使ってもビルドできるようにプロジェクトを修正していたのですが、&lt;code&gt;cabal&lt;/code&gt; ファイルの取り扱いが難しかったのでメモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;方針としては &lt;code&gt;cabal&lt;/code&gt; コマンドの実行時にフックを仕掛けて &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;cabal&lt;/code&gt; ファイルを生成しようという感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; cabal &lt;span class=&#34;co&#34;&gt;--numeric-version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fl&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;setup.hs-は何のためにあるのか&#34;&gt;Setup.hs は何のためにあるのか？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; を使ってプロジェクトを作ると &lt;code&gt;Setup.hs&lt;/code&gt; が以下の内容で自動的に生成されると思います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultMain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今まで特に使わなくても困らなかったので、気にせずに放置していましたが、このファイルが今回の主役になります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; には &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-type&#34;&gt;build-type&lt;/a&gt; という設定項目があり、この値はデフォルトでは &lt;code&gt;Simple&lt;/code&gt; か &lt;code&gt;Custom&lt;/code&gt; のどちらかに自動的に推論されます。(他にも &lt;code&gt;Configure&lt;/code&gt;, &lt;code&gt;Make&lt;/code&gt; などもあります。詳しくはドキュメントを参照してください)&lt;/p&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Simple&lt;/code&gt; を指定した場合、&lt;code&gt;cabal&lt;/code&gt; は &lt;code&gt;Setup.hs&lt;/code&gt; に以下の内容が記述されているものとして処理を進めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultMain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため &lt;code&gt;Setup.hs&lt;/code&gt; を削除しても問題なくビルド可能です。&lt;/p&gt;
&lt;h3 id=&#34;custom&#34;&gt;Custom&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-type&lt;/code&gt; に &lt;code&gt;Custom&lt;/code&gt; を指定した場合、&lt;code&gt;Setup.hs&lt;/code&gt; の内容をユーザが自由に書き換えることができます。&lt;/p&gt;
&lt;p&gt;Cabal には &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#v:defaultMainWithHooks&#34;&gt;defaultMainWithHooks&lt;/a&gt; という素晴らしい関数が用意されています。&lt;/p&gt;
&lt;p&gt;この関数を利用することで、コマンドの前後に好きな処理を挟むことができます。(処理の上書きも可能です)&lt;/p&gt;
&lt;p&gt;詳しいドキュメントは &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#more-complex-packages&#34;&gt;3.3.8. More complex packages&lt;/a&gt; を参照ください。&lt;/p&gt;
&lt;h3 id=&#34;userhooks&#34;&gt;UserHooks&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;defaultMainWithHooks&lt;/code&gt; に渡す &lt;a href=&#34;https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#t:UserHooks&#34;&gt;UserHooks&lt;/a&gt; 型はこんな感じで定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    runTests ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    readDesc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;),&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPreProcessors ::&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;PPSuffixHandler&lt;/span&gt; ],&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    hookedPrograms ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preConf  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    confHook ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GenericPackageDescription&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postConf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ConfigFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preBuild  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    buildHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postBuild ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preRepl  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    replHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postRepl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReplFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preClean  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    cleanHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postClean ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CleanFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preCopy  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    copyHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postCopy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CopyFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preInst  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    instHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postInst ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InstallFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preSDist  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    sDistHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postSDist ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SDistFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preReg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    regHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postReg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preUnreg  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    unregHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postUnreg ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RegisterFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preHscolour  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-44&#34;&gt;&lt;a href=&#34;#cb4-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    hscolourHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-45&#34;&gt;&lt;a href=&#34;#cb4-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postHscolour ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HscolourFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-46&#34;&gt;&lt;a href=&#34;#cb4-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-47&#34;&gt;&lt;a href=&#34;#cb4-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preDoctest  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-48&#34;&gt;&lt;a href=&#34;#cb4-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    doctestHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-49&#34;&gt;&lt;a href=&#34;#cb4-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postDoctest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DoctestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-50&#34;&gt;&lt;a href=&#34;#cb4-50&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-51&#34;&gt;&lt;a href=&#34;#cb4-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preHaddock  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-52&#34;&gt;&lt;a href=&#34;#cb4-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    haddockHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-53&#34;&gt;&lt;a href=&#34;#cb4-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postHaddock ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HaddockFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-54&#34;&gt;&lt;a href=&#34;#cb4-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-55&#34;&gt;&lt;a href=&#34;#cb4-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-56&#34;&gt;&lt;a href=&#34;#cb4-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    testHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-57&#34;&gt;&lt;a href=&#34;#cb4-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postTest ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TestFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-58&#34;&gt;&lt;a href=&#34;#cb4-58&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-59&#34;&gt;&lt;a href=&#34;#cb4-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    preBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-60&#34;&gt;&lt;a href=&#34;#cb4-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    benchHook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UserHooks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (),&lt;/span&gt;
&lt;span id=&#34;cb4-61&#34;&gt;&lt;a href=&#34;#cb4-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    postBench ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BenchmarkFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PackageDescription&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LocalBuildInfo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb4-62&#34;&gt;&lt;a href=&#34;#cb4-62&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけあれば、やりたいことはほとんど出来そうですね。&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;p&gt;フックする場所はたくさんあるので問題無さそうです。&lt;/p&gt;
&lt;p&gt;しかし、これだけあると、どこにフックすれば良いのか？ということになるのですが、処理的には &lt;code&gt;package.yaml&lt;/code&gt; から &lt;code&gt;.cabal&lt;/code&gt; ファイルを生成したいので &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込む手前で差し込む必要がありそうです。&lt;/p&gt;
&lt;p&gt;適当に cabal のコードを読んでいると、どうやら &lt;a href=&#34;https://github.com/haskell/cabal/blob/e15d87d542b4b23983aed3d54e0b42585257f453/cabal-install/Distribution/Client/CmdBuild.hs#L119&#34;&gt;establishProjectBaseContext&lt;/a&gt; という関数が &lt;code&gt;.cabal&lt;/code&gt; ファイルを読み込んでコンテキストを作っているっぽいことがわかりました。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;preBuild&lt;/code&gt; にフックすれば良さそうです。(&lt;code&gt;cabal&lt;/code&gt; のコードベースについて全然わからないので、本当に合ってるかどうかは不安)&lt;/p&gt;
&lt;p&gt;最終的に、こんな感じで完成しました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple.Setup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Types.HookedBuildInfo&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;, emptyHookedBuildInfo)&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; myHook &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; simpleUserHooks {&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;    preBuild &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pbHpack&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  defaultMainWithHooks myHook&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pbHpack ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Args&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BuildFlags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HookedBuildInfo&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;pbHpack _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; emptyHookedBuildInfo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/package/hpack&#34;&gt;hpack&lt;/a&gt; パッケージの関数をそのまま使ってます。&lt;/p&gt;
&lt;p&gt;今回は他に何もしないので &lt;code&gt;emptyHookedBuildInfo&lt;/code&gt; で大丈夫でした。(たぶん)&lt;/p&gt;
&lt;h3 id=&#34;extra-source-files&#34;&gt;extra-source-files&lt;/h3&gt;
&lt;p&gt;キャッシュの問題があるので &lt;code&gt;extra-source-files&lt;/code&gt; に &lt;code&gt;package.yaml&lt;/code&gt; を追加しておくと良さそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;extra-source-files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; package.yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;custom-setup&#34;&gt;custom-setup&lt;/h3&gt;
&lt;p&gt;最後に忘れてはいけないのが、&lt;code&gt;custom-setup&lt;/code&gt; の設定です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Setup.hs&lt;/code&gt; で利用する依存関係などは &lt;code&gt;library&lt;/code&gt; や &lt;code&gt;executables&lt;/code&gt;, &lt;code&gt;tests&lt;/code&gt; と同様に &lt;code&gt;custom-setup&lt;/code&gt; を &lt;code&gt;package.yaml&lt;/code&gt; に追記します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;custom-setup&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cabal&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hpack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成です。&lt;/p&gt;
&lt;p&gt;最初の一度だけは &lt;code&gt;hpack&lt;/code&gt; を使って &lt;code&gt;cabal&lt;/code&gt; ファイルを生成する必要がありますが、それ以降は必要ありません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash
$ hpack package.yaml
$ cabal new-build&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;失敗したこと&#34;&gt;失敗したこと&lt;/h2&gt;
&lt;p&gt;最初はフックさせずにこんな感じですぐに実装できるものだと思ってましたが、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Distribution.Simple&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hpack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;  hpack &lt;span class=&#34;dt&#34;&gt;Verbose&lt;/span&gt; defaultOptions&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;  defaultMain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと、あんまり上手くいきません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.yaml&lt;/code&gt; を更新しても実行されなかったり、期待するタイミングで &lt;code&gt;.cabal&lt;/code&gt; ファイルが生成されていないっぽい感じでした。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;とりあえず実装してみたという感じなので、実際どのぐらい使えるのか試してみようと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; も &lt;code&gt;cabal&lt;/code&gt; も両方とも良いビルドツールだと思います。&lt;/p&gt;
&lt;p&gt;もうちょっとしたら、&lt;code&gt;cabal&lt;/code&gt; も同様にオススメしていこうと思います。&lt;/p&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-12-19T09:22:10.151+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html</id><title type="text">Stack 1.9.3 がリリースされました。</title><updated>2018-12-10T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;12月3日に Stack version 1.9.3 が&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/v1.9.3/ChangeLog.md#v193&#34;&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;更新は &lt;code&gt;stack upgrade&lt;/code&gt; コマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
...

$ stack --numeric-version
1.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はバグフィックスが3点のみです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;changelog-翻訳&#34;&gt;Changelog (翻訳)&lt;/h2&gt;
&lt;h3 id=&#34;バグフィックス&#34;&gt;バグフィックス&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack をコンパイルする際に &lt;code&gt;.git&lt;/code&gt; ディレクトリが含まれていない場合、コンパイルに失敗する問題を修正しました。詳細: &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題は &lt;code&gt;Stack&lt;/code&gt; をビルドする人の話なので、普通の人は問題になりませんが、githash を使っている人は自分のアプリケーションでも起こりうる問題なので注意です。&lt;/p&gt;
&lt;p&gt;Stack はバージョン情報に git の情報を含めるために &lt;a href=&#34;https://github.com/acfoltzer/gitrev&#34;&gt;gitrev&lt;/a&gt; を使っていたのですが、現在は開発が止まっているようで &lt;a href=&#34;https://github.com/snoyberg/githash&#34;&gt;githash&lt;/a&gt; に切り替えました。(&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4130&#34;&gt;Switch to githash to include some unmerged bugfixes in gitrev #4130&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回の問題を修正するために実装された &lt;code&gt;tGitInfoCwdTry&lt;/code&gt; 関数を使うことで &lt;code&gt;.git&lt;/code&gt; ディレクトリが存在しない場合でもコンパイルできるようになります。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364&#34;&gt;1.9.1 fails to build from tarball without .git/ #4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4368&#34;&gt;Compile without a Git dir #4364 #4368&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;GHC が生成する hi-dump ファイルの &lt;code&gt;addDependentFile&lt;/code&gt; 関連のフォーマット変更 (ハッシュを含むようになった) に対応しました。詳細: &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yesod で報告された問題に対する修正です。&lt;code&gt;.hi-dump&lt;/code&gt; フォーマットが変わったので、それに対応しました。shakespeare の問題なので主に Yesod ユーザに影響があるかと思われます。以下のバージョンを利用すればこの問題は解決するため、この現象で悩んでいる人は stack と shakespeare の両方を更新しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack &amp;gt;= 1.9.3&lt;/li&gt;
&lt;li&gt;shakespeare &amp;gt;= 2.0.19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stack は GHC が出力する &lt;code&gt;hi&lt;/code&gt; ファイルの情報を内部で利用しているため、このようなことが起きます。(ビルド時にデフォルトで &lt;code&gt;-ddump-hi -ddump-to-file&lt;/code&gt; オプションが追加されています)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ddump-to-file&lt;/code&gt; が自動的に追加されてしまうせいで &lt;code&gt;-ddump-splices&lt;/code&gt; の結果を表示しようとしてもコンソールに出力されなかったりして不便だったので出力先のディレクトリを指定できるようにしました。たぶん次のメジャーリリースで使えるようになると思います。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;Unable to detect file changes on hamlet templates on stack devel for lts-12.5 #1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4369&#34;&gt;Support GHC 8.4 in addDependentFile for 1.9.3 #4369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4360&#34;&gt;qAddDependentFile doesn’t cause re-compilation without extra-source-files #4360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/commit/aae15e3&#34;&gt;commit@aae15e3ae5767febe9fcad36bf5a5e184c635de1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4225&#34;&gt;Can’t display -ddump-splices result. #4225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4242&#34;&gt;Add the ddump-dir option/config value #4225 #4242&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートファイルのファイル名に変数が利用できるようになりました&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じで使えます。&lt;/p&gt;
&lt;pre class=&#34;mastache&#34;&gt;&lt;code&gt;{-# START_FILE {{name}}.cabal #-}
name: {{name}}
version: 0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4397&#34;&gt;Expand mustache variables in template file names #4397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/4381&#34;&gt;Allow variables in filenames in templates #4381&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;changelog-オリジナル&#34;&gt;Changelog (オリジナル)&lt;/h2&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack can now be compiled again inside a directory that does not contain a &lt;code&gt;.git&lt;/code&gt; directory, see &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841&#34;&gt;#4364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle a change in GHC’s hi-dump format around &lt;code&gt;addDependentFile&lt;/code&gt;, which now includes a hash. See &lt;a href=&#34;https://github.com/yesodweb/yesod/issues/1551&#34;&gt;yesodweb/yesod#1551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow variables to appear in template file names.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120502/1335973255</id><title type="text">AtCoder Regular Contest #2</title><updated>2018-11-29T19:16:22+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120502/1335973255"/><summary type="html">AtCoder Regular Contest #2 参加したおーい。 成績は気にするなおーい。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120709/1341769539</id><title type="text">関数合成をいろんな言語で書いてみた。</title><updated>2018-11-29T19:16:05+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120709/1341769539"/><summary type="html">友人に Java で関数合成するプログラムを作れって課題の相談をされて一緒に考えた。で、せっかくだから勉強も兼ねていろんな言語で書いてみた。Java 以外はほとんど書いたことのない言語。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120725/1343186129</id><title type="text">すごい H 本7.10章の「読者への練習問題」</title><updated>2018-11-29T19:15:57+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120725/1343186129"/><summary type="html">大学の教科書とかでよくある「読者への練習問題としましょう」ってやつですよ。考査前、知りたいことが「読者への練習問題」で泣くやつですよ。 今回は API 調べて分かればそんなに難しくなかった。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20120822/1345602358</id><title type="text">Reader モナド（関数モナド）</title><updated>2018-11-29T19:15:37+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20120822/1345602358"/><summary type="html">すごい Haskell たのしく学ぼう！の14.2章331ページの関数モナドを do 記法で書いてあるコード、どういう動作になるかは解説されてあるので分かるのだけどなんでそうなるのかが分からないので書き下してみる。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/haskell-day-2018.html</id><title type="text">Haskell Day 2018 開催レポート</title><updated>2018-11-20T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/haskell-day-2018.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;去る&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;日に&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;が開催されましたので、そのイベントレポートをお送りします。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;セッション&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;懇親会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;アンケート&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-day-2018とは&#34; title=&#34;haskell-day-2018とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/connpass.png&#34; alt=&#34;Connpass&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://haskell-jp.connpass.com/event/92617/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;2012&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;年と不定期に開催しており今回で&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;度目となります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年の今回は「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで」というテーマで開催されました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1173.jpg&#34; alt=&#34;受付&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#セッション&#34; title=&#34;セッション&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;セッション&lt;/h1&gt;
&lt;h2 id=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作りながら学ぶhaskell入門を使ったハンズオン&#34; title=&#34;作りながら学ぶhaskell入門を使ったハンズオン&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」を使ったハンズオン&lt;/h2&gt;
&lt;p&gt;開発中の対話的チュートリアル&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt;を使って、参加者の皆さんにもくもくと入門していただきました。「作りながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」では、簡単な課題を解くことで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の初歩的な使い方を学びつつ、学んだ知識をその場でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/haskell-jp/makeMistakesToLearnHaskell&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1176.jpg&#34; alt=&#34;ハンズオン&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを導入した話とhrrの紹介&#34; title=&#34;haskellを導入した話とhrrの紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を導入した話と&lt;span class=&#34;ascii&#34;&gt;HRR&lt;/span&gt;の紹介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/khibino.png&#34; alt=&#34;Haskell を導入した話と HRR の紹介&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1177.jpg&#34; alt=&#34;khibino&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#servantで実現する高速かつ安全なapi開発&#34; title=&#34;servantで実現する高速かつ安全なapi開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;で実現する高速かつ安全な&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;開発&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;413d120b6bee433c985c1d2b3395ff0e&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1193.jpg&#34; alt=&#34;nakaji-dayo&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#並列並行言語haskell&#34; title=&#34;並列並行言語haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;並列並行言語&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;07d92af9d7aa40bca6cc3959d3f56b28&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1178.jpg&#34; alt=&#34;syocy&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#dhall-haskellの新たなキラーアプリ&#34; title=&#34;dhall-haskellの新たなキラーアプリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Dhall: Haskell&lt;/span&gt;の新たなキラーアプリ&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7a16b1e09882433ca2dac9a6a81eb236&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#semigroupとはmonoid環&#34; title=&#34;semigroupとはmonoid環&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Semigroup&lt;/span&gt;とは？&lt;span class=&#34;ascii&#34;&gt;Monoid&lt;/span&gt;？環？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2018-algebra/#/&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/aiya000.png&#34; alt=&#34;Semigroup とは？Monoid？環？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1179.jpg&#34; alt=&#34;aiya000&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellでcli&#34; title=&#34;haskellでcli&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;
&lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/noob00/haskell-cli&#34; title=&#34;Haskell で CLI&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt; &lt;span class=&#34;ascii&#34;&gt;from&lt;/span&gt; &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/noob00&#34; target=&#34;_blank&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Nobutada Matsubara&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1183.jpg&#34; alt=&#34;matsubara0507&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#gloss-動かして遊んで学ぶhaskell&#34; title=&#34;gloss-動かして遊んで学ぶhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;gloss:&lt;/span&gt; 動かして遊んで学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/lotz/items/bdb04c771efc8919b79c&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/lotz.png&#34; alt=&#34;動かして遊んで学ぶ Haskell&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1186.jpg&#34; alt=&#34;lotz&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lisztあるいは永続データ構造を真に永続させる方法&#34; title=&#34;lisztあるいは永続データ構造を真に永続させる方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Liszt&lt;/span&gt;あるいは永続データ構造を真に永続させる方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1&#34;&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/fumieval.png&#34; alt=&#34;Liszt あるいは永続データ構造を真に永続させる方法&#34; style=&#34;width: 100%; max-width: 600px; border: solid 1px black;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1191.jpg&#34; alt=&#34;fumieval&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#懇親会&#34; title=&#34;懇親会&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;懇親会&lt;/h2&gt;
&lt;p&gt;スポンサーとして&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;に飲食物の提供をしていただきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/_DSC1194.jpg&#34; alt=&#34;懇親会&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート&#34; title=&#34;アンケート&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート&lt;/h1&gt;
&lt;p&gt;約&lt;span class=&#34;ascii&#34;&gt;110&lt;/span&gt;名の方が出席し約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方が回答してくださいました。&lt;/p&gt;
&lt;p&gt;参加できなくなった約&lt;span class=&#34;ascii&#34;&gt;40&lt;/span&gt;名の方は事前のキャンセルをよろしくお願いします。&lt;/p&gt;
&lt;h2 id=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellを始めてどれくらい経ちますか&#34; title=&#34;haskellを始めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を始めてどれくらい経ちますか？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire1.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;ここ&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以内に始めた方が全体の&lt;span class=&#34;ascii&#34;&gt;21.4&lt;/span&gt;％、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方がちょうど半分程度となりました。&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年以上&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年未満前に始めた方の&lt;span class=&#34;ascii&#34;&gt;57%&lt;/span&gt;の方は今でも&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使い続けているようです。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;年以上前に始めた方は全体の&lt;span class=&#34;ascii&#34;&gt;1/4&lt;/span&gt;となりました。&lt;/p&gt;
&lt;h2 id=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語のhaskell本は&#34; title=&#34;読んだことのある日本語のhaskell本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;本は？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/haskell-day-2018/questionnaire2.png&#34; alt=&#34;Haskell を始めてどれくらい経ちますか？&#34; style=&#34;width: 100%; max-width: 600px;&#34;&gt;&lt;/p&gt;
&lt;p&gt;項目は下記となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すごい &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; による並列・並行プログラミング&lt;/li&gt;
&lt;li&gt;関数プログラミング実践入門 ── 完結で正しいコードを書くために&lt;/li&gt;
&lt;li&gt;関数プログラミング入門 ── &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で学ぶ原理と技法&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;関数プログラミング ── 珠玉のアルゴリズムデザイン&lt;/li&gt;
&lt;li&gt;簡約！λカ娘&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── 教養としての関数型プログラミング&lt;/li&gt;
&lt;li&gt;その他（自由記述）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この項目にはアンケートの途中で追加したものもあるので、結果があまり厳密でないことに注意してください。&lt;/p&gt;
&lt;p&gt;その他の選択肢で自由記述では次の票がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門 &lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;ふつうの&lt;span class=&#34;ascii&#34;&gt;Haskell 1&lt;/span&gt;票&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による関数プログラミングの思考法 &lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;票&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#終わりに&#34; title=&#34;終わりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;終わりに&lt;/h1&gt;
&lt;p&gt;参加者の発表者、スタッフのみなさんのおかげで無事開催することができました。ありがとうございました。&lt;/p&gt;
&lt;p&gt;今後とも&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;をよろしくお願いします。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/super-precure-monad.html&#34; lang=&#34;ja&#34;&gt;モナドの新しい力！スーパープリキュアモナド！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/tech-book-fest-5.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;技術書典 5 での Haskell 関連サークルのまとめ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/tech-book-fest-5.html</id><title type="text">技術書典 5 での Haskell 関連サークルのまとめ</title><updated>2018-10-05T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/tech-book-fest-5.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;こんにちは&lt;span class=&#34;ascii&#34;&gt;kakkun61&lt;/span&gt;こと岡本和樹です。&lt;/p&gt;
&lt;p&gt;来たる&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;日（月・祝）に池袋にて技術系同人誌即売会「技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;」が開催されます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を題材にした同人誌もいくつかあるようですのでまとめてみました。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;技術書典とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-a-la-carte-vol.-1&#34; title=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;矢澤にこ先輩といっしょに代数！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;それでは当日に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#技術書典とは&#34; title=&#34;技術書典とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;技術書典とは？&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2018/tech-book-fest-5-banner.png&#34; alt=&#34;技術書典 5 バナー&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（バナー画像は技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;サイトよりの引用です。）&lt;/p&gt;
&lt;p&gt;技術書典とは技術系同人誌即売会としておそらく日本最大のもので、今回で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回目の開催となります。（ニコニコ超会議内での超技術書典があったのでナンバリングがずれています。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05&#34;&gt;サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.techbookfest.org/&#34;&gt;ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/techbookfest&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは秋葉原での開催でしたが、今回はなんと場所を&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;倍の広さに拡張して池袋で開催されます。&lt;/p&gt;
&lt;p&gt;それにともないサークル数もどどんと&lt;span class=&#34;ascii&#34;&gt;470&lt;/span&gt;超となり、&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;サークル&lt;span class=&#34;ascii&#34;&gt;45&lt;/span&gt;秒で回っても全サークルは見て回れないことになります。&lt;/p&gt;
&lt;p&gt;事前準備の重要性が高まった今回、&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;向けに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;サークルをまとめてみました。&lt;/p&gt;
&lt;h1 id=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か36-鴨川書房&#34; title=&#34;か36-鴨川書房&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;36&lt;/span&gt; — 鴨川書房&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/32370012&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#data-a-la-carte-vol.-1&#34; title=&#34;data-a-la-carte-vol.-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Data A la carte vol. 1&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
あと技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;に、鴨川書房というサークル名で合同本を出品します。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による&lt;span class=&#34;ascii&#34;&gt;NN&lt;/span&gt;実装&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://twitter.com/lotz84_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;lotz84_&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@lotz84_&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; や、&lt;span class=&#34;ascii&#34;&gt;FPGA&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;auto encoder&lt;/span&gt;実装に関する苦労話等が掲載される予定です。ぜひに🙏……
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1027501210494853120?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;8&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
形態素解析ライブラリ&lt;span class=&#34;ascii&#34;&gt;nagisa&lt;/span&gt;については，技術書典の合同本に寄稿してもらえるよう作成者に依頼中なので興味ある方は是非&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;表紙は鋭意作成中&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 &lt;a href=&#34;https://t.co/zUtngAS23t&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/zUtngAS23t&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— ✨🤩😝🤪パリピ🤭🤢🤮✨ &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;chaoticCats&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@chaoticCats&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/chaoticCats/status/1042018372207108099?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;18&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か38-だめぽラボ&#34; title=&#34;か38-だめぽラボ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt; — だめぽラボ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#代数的数を作る-多項式の根と因数分解のアルゴリズム&#34; title=&#34;代数的数を作る-多項式の根と因数分解のアルゴリズム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;代数的数を作る 多項式の根と因数分解のアルゴリズム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;268&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥2500&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.miz-ar.info/2018/09/techbookfest5/&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代数的数（整数係数多項式の根として表される数）を実装するためのアルゴリズムを解説します。代数的数を使うと、ルートを含むような数に関して、浮動小数点数の誤差に煩わされることなく正確な演算が行えます。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;によるサンプルコードを掲載しています。&lt;/p&gt;
&lt;p&gt;この本は、&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;連載していた「週刊 代数的実数を作る」 &lt;span class=&#34;ascii&#34;&gt;https://miz-ar.info/math/algebraic-real/&lt;/span&gt; の書籍化です。本文の加筆修正の他、「付録&lt;span class=&#34;ascii&#34;&gt;A&lt;/span&gt; ユークリッドの互除法と拡張された互除法」「付録&lt;span class=&#34;ascii&#34;&gt;B&lt;/span&gt; 部分分数分解」を追加しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/37190001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38&lt;/span&gt;で「代数的数を作る 多項式の根と因数分解のアルゴリズム」を頒布します。よろしくお願いします。 &lt;a href=&#34;https://t.co/HkLF1YFDuN&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/HkLF1YFDuN&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/V17ZIj2Iub&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/V17ZIj2Iub&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— だめぽラボ&lt;span class=&#34;ascii&#34;&gt;@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;38 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;mod_poppo&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@mod_poppo&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/mod_poppo/status/1045885679232737281?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か61-趣味はデバッグ&#34; title=&#34;か61-趣味はデバッグ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;61&lt;/span&gt; — 趣味はデバッグ……&lt;/h1&gt;
&lt;p&gt;私のサークルです。新刊落としました……&lt;/p&gt;
&lt;h2 id=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#手続きhaskell&#34; title=&#34;手続きhaskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;手続き&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;28&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doujin.kakkun61.com/procedural-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;http://doujin.kakkun61.com/procedural-haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;での手続きプログラミングの側面について解説します。&lt;/p&gt;
&lt;p&gt;対象読者 &lt;span class=&#34;ascii&#34;&gt;- Haskell&lt;/span&gt;入門書程度が読める &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 特に読めるが書こうとすると悩む人に読んでほしいです &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミングのプログラマー &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 厳密に本書を読むためには&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を読めた方がよいですが、手続きプログラミングですのでプログラマーなら雰囲気で読めると思います&lt;/p&gt;
&lt;p&gt;書かれてあること &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 書き換え可能な変数 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続きプログラミング的な制御構造 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 配列 &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; サンプルプログラム &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 手続き的な実装と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;的な実装の対比&lt;/p&gt;
&lt;p&gt;電子版（&lt;span class=&#34;ascii&#34;&gt;PDF&lt;/span&gt;）はこちらで販売中です。 &lt;span class=&#34;ascii&#34;&gt;https://kakkun61.booth.pm/items/829369&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/45000003&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34; title=&#34;haskellで作るwebアプリケーション-遠回りして学ぶyesod入門&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション 遠回りして学ぶ&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;商業誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;76&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://nextpublishing.jp/book/9979.html&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書！】&lt;/p&gt;
&lt;p&gt;本書は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書レベルの知識をもつ読者を対象とした、ウェブアプリケーションフレームワーク&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の入門書です。比較的学習コストの高い&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;ですが、本書を通じて&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;の基本的な知識と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのウェブアプリケーション開発に挑んで見ましょう！ 〈本書の対象読者〉 &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の入門書は既に読みこなしているプログラマ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でウェブアプリを作ってみたいプログラマ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nextpublishing.jp/book/9979.html&#34;&gt;出版社ページ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみにこんな本を作るつもりでした。欲しい方いらっしゃったら次で書けとお伝えください。はげみになります。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;にサークル「趣味はデバッグ……」として参加申込をしました！ &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; 技術書典 &lt;a href=&#34;https://t.co/nD4eBo9622&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/nD4eBo9622&lt;/span&gt;&lt;/a&gt; 「自作静的型付け言語を作ってそれに対して型推論する方法を解説する」書籍を作るぞ！
&lt;/p&gt;
— &lt;span class=&#34;ascii&#34;&gt;kakkun61@&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt; か&lt;span class=&#34;ascii&#34;&gt;61 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;kakkun61&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@kakkun61&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/kakkun61/status/1009271813107474432?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;20&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#か74-大宇宙銀河no.1-haskeller-にこにー&#34; title=&#34;か74-大宇宙銀河no.1-haskeller-にこにー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt; — 大宇宙銀河&lt;span class=&#34;ascii&#34;&gt;No.1-Haskeller-&lt;/span&gt;にこにー&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#矢澤にこ先輩といっしょに代数&#34; title=&#34;矢澤にこ先輩といっしょに代数&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;矢澤にこ先輩といっしょに代数！&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同人誌&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;84&lt;/span&gt;ページ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;¥1000&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://aiya000.github.io/posts/2018-09-12-techbookfest5.html&#34;&gt;ブログの告知記事&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゆるふわにこまき数学！&lt;/p&gt;
&lt;p&gt;以下のような人に向けて、頒布します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学・代数の雰囲気をゆるく知りたい&lt;/li&gt;
&lt;li&gt;軽い&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を知りたい&lt;/li&gt;
&lt;li&gt;なんでもいいから技術系にこまきが読みたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/43260001&#34;&gt;カタログ&lt;/a&gt;より&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;の「か&lt;span class=&#34;ascii&#34;&gt;74&lt;/span&gt;」で、矢澤にこ先輩が簡単な&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で代数（半群・モノイド・群・環・体）を教えてくれる本を頒布します。&lt;br&gt;よろしくお願いします🐕&lt;a href=&#34;https://t.co/KBFxqX69m3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://t.co/KBFxqX69m3&lt;/span&gt;&lt;/a&gt;&lt;br&gt;☝サークルページ&lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B85?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;#&lt;/span&gt;技術書典&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://t.co/HvD5ql4gFl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;pic.twitter.com/HvD5ql4gFl&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;
— あいや🤘🙄🤘技術書典&lt;span class=&#34;ascii&#34;&gt;5@&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;74 (&lt;/span&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;public_ai000ya&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@public_ai000ya&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt; &lt;a href=&#34;https://twitter.com/public_ai000ya/status/1045946096327962624?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2018&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;29&lt;/span&gt;日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#それでは当日に&#34; title=&#34;それでは当日に&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;それでは当日に&lt;/h1&gt;
&lt;p&gt;当日は安全に配慮しつつ楽しんでいきましょう！！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;1000&lt;/span&gt;円札と&lt;span class=&#34;ascii&#34;&gt;500&lt;/span&gt;円玉の準備はしっかりとね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/haskell-day-2018.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2018 開催レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/substring-parser.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;substring-parserで「タイプセーフプリキュア！」を移行した話&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>
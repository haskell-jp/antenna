<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2018-08-25T14:41:55+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://qiita.com/Kashiwara/items/67093f4a83f23f817cae</id><title type="text">Haskellのfoldrとfoldl</title><updated>2018-08-25T14:41:55+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Kashiwara/items/67093f4a83f23f817cae"/></entry><entry><id>https://qiita.com/hanyuTransfer/items/082c50049539a68af4bc</id><title type="text">作って理解するモナド</title><updated>2018-08-24T19:48:09+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/hanyuTransfer/items/082c50049539a68af4bc"/></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-08-24T19:26:37.875+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://qiita.com/aiya000/items/7e2efc378e9fabb1af32</id><title type="text">AllowAmbiguousTypesはどこで使える機能なの？ 具体例編</title><updated>2018-08-23T22:41:44+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/aiya000/items/7e2efc378e9fabb1af32"/></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://qiita.com/kyogoku_meta/items/ca77a4ae782875d5be91</id><title type="text">Haskell入門　再帰！</title><updated>2018-08-23T02:05:02+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/kyogoku_meta/items/ca77a4ae782875d5be91"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/3ec1f2a0e3a05859f380</id><title type="text">C--で末尾再帰の最適化を試してみる</title><updated>2018-08-19T17:10:02+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/3ec1f2a0e3a05859f380"/></entry><entry><id>https://qiita.com/dyoshikawa/items/533e172bb215c1fb0f77</id><title type="text">MacでHaskellを始める</title><updated>2018-08-18T02:12:35+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/dyoshikawa/items/533e172bb215c1fb0f77"/></entry><entry><id>https://matsubara0507.github.io/posts/2018-08-18-haskell-github-webhook.html</id><title type="text">Haskell Servant で GitHub Webhook</title><updated>2018-08-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-08-18-haskell-github-webhook.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell Servant で GitHub Webhook&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-08-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Aug 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/rio.html&#34;&gt;rio&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;久々の投稿． とある事情で GitHub Webhook 用のサーバーを Haskell で書いたのでそのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; のロガーを Servant で使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/servant-github-webhook&#34;&gt;servant-github-webhook&lt;/a&gt; を使って Webhook 用の Servant サーバーの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際に書いたコードは&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/commit/b93ed3398b30dbba105a580d58e947f131cf1a9a&#34;&gt;この辺り&lt;/a&gt;を見ると良いかな． 色々と途中のうえ，そもそも GitHub Webhook がメインではないリポジトリなので見にくい気がするけど．&lt;/p&gt;
&lt;h2 id=&#34;servant-で-rio-モナド&#34;&gt;Servant で rio モナド&lt;/h2&gt;
&lt;p&gt;これはまぁおまけですね． rio はロギングとかが便利なので，先に紹介して以降で利用する．&lt;/p&gt;
&lt;h3 id=&#34;ロガーの準備&#34;&gt;ロガーの準備&lt;/h3&gt;
&lt;p&gt;まずはロギング用のモナドを定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;logger&amp;quot; &amp;gt;: LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasLogFunc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;  logFuncL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lens (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger) (\x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;ot&#34;&gt;`set`&lt;/span&gt; y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いわゆる Has パターンというやつ． これで &lt;code&gt;RIO Env&lt;/code&gt; というのがロガーを扱えるモナドとなる．&lt;/p&gt;
&lt;h3 id=&#34;servant-でカスタムモナド&#34;&gt;Servant でカスタムモナド&lt;/h3&gt;
&lt;p&gt;Servent Server のメイン関数は下記のように定義できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Network.Wai.Handler.Warp&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Warp&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;  logOpts &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;  withLogFunc logOpts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \logger &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; logger&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; nil ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;    hPutBuilder stdout &lt;span class=&#34;st&#34;&gt;&amp;quot;Listening on port 8080&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;    Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; app env&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，問題はこの &lt;code&gt;app&lt;/code&gt; 関数だ． 普通は &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#t:Server&#34;&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; 型と &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#v:serve&#34;&gt;&lt;code&gt;serve&lt;/code&gt;&lt;/a&gt; 関数を用いて次のように書く．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;api ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;api &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;app &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;  serve api server&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; 型の代わりに，カスタムモナドを利用するには &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#t:ServerT&#34;&gt;&lt;code&gt;ServerT&lt;/code&gt;&lt;/a&gt; 型と &lt;a href=&#34;http://hackage.haskell.org/package/servant-server-0.14.1/docs/Servant-Server.html#v:hoistServer&#34;&gt;&lt;code&gt;hoistServer&lt;/code&gt;&lt;/a&gt; 関数を用いる． それぞれの型定義は次のようになっている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; api &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; api &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;serve ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasServer&lt;/span&gt; api &lt;span class=&#34;ch&#34;&gt;&amp;#39;[] =&amp;gt; Proxy api -&amp;gt; Server api -&amp;gt; Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hoistServer ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasServer&lt;/span&gt; api &lt;span class=&#34;ch&#34;&gt;&amp;#39;[] =&amp;gt; Proxy api -&amp;gt; (forall x. m x -&amp;gt; n x) -&amp;gt; ServerT api m -&amp;gt; ServerT api n&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さぁあとは型パズルだ！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;app env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; serve api &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; hoistServer api (runRIO env) server&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで　&lt;code&gt;server&lt;/code&gt; 関数で呼び出す， API ごとの関数で &lt;code&gt;logInfo&lt;/code&gt; のような rio のロギング関数を呼ぶことができる．&lt;/p&gt;
&lt;h2 id=&#34;servant-で-github-webhhok&#34;&gt;Servant で GitHub Webhhok&lt;/h2&gt;
&lt;p&gt;さて色々準備ができたので，いよいよ GitHub Webhook の方に話を移す． Haskell Servant で GitHub Webhook を使うには &lt;a href=&#34;http://hackage.haskell.org/package/servant-github-webhook&#34;&gt;servant-github-webhook&lt;/a&gt;というパッケージを使う． 意外と，このパッケージの使い方を書いた記事がなく手間取ったのでまとめる．&lt;/p&gt;
&lt;h3 id=&#34;ping-api-を作る&#34;&gt;ping API を作る&lt;/h3&gt;
&lt;p&gt;ping API は GitHub Webhook の設定がうまくできてるかを確認する API だ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-github-webhook/ping-event.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ping API は次のように設定すれば良い．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;GitHub.Data.Webhooks.Events&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hook&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;WebhookPingEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] PublicEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pingWebhook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pingWebhook ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;RepoWebhookEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ((), &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plant&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; data-line-number=&#34;17&#34;&gt;pingWebhook _ (_, ev) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; data-line-number=&#34;18&#34;&gt;  logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hook Ping Event: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; displayShow ev&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub Webhook を使うには Servant の Context 機能でシークレットキーを渡す必要がある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt;       (getEnv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; gitHubKey &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_SECRET&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;    Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; app env key&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PublicEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; data-line-number=&#34;10&#34;&gt;app env key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; data-line-number=&#34;11&#34;&gt;  serveWithContext api (key &lt;span class=&#34;fu&#34;&gt;:.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmptyContext&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; data-line-number=&#34;12&#34;&gt;    hoistServerWithContext api context (runRIO env) server&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;context ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ GitHubKey PublicEvent ]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; data-line-number=&#34;15&#34;&gt;context &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行するときは &lt;code&gt;GH_SECRET&lt;/code&gt; 環境変数に設定した文字列を GitHub Webhook の設定の Secret に書き込む．&lt;/p&gt;
&lt;h3 id=&#34;push-api-を加える&#34;&gt;push API を加える&lt;/h3&gt;
&lt;p&gt;もう一個 API を生やしてみよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WebhookAPI&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;WebhookPingEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] PublicEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubEvent&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;WebhookPushEvent&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubSignedReqBody&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] PushEvent&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[JSON] ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServerT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;server &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pingWebhook &lt;span class=&#34;fu&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; pushWebhook&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;pushWebhook ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RepoWebhookEvent&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ((), &lt;span class=&#34;dt&#34;&gt;PushEvent&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plant&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;pushWebhook _ (_, ev) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; data-line-number=&#34;14&#34;&gt;  logInfo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hook Push Event: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; displayShow ev&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでビルドすると次のようなエラーが出てくる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Main.hs:38:3: error:
    • No instance for (HasContextEntry &amp;#39;[] (GitHubKey&amp;#39; () PushEvent))
        arising from a use of ‘serveWithContext’
    • In the expression: serveWithContext api (key :. EmptyContext)
      In the expression:
        serveWithContext api (key :. EmptyContext)
          $ hoistServerWithContext api context (runRIO env) server
      In an equation for ‘app’:
          app env key
            = serveWithContext api (key :. EmptyContext)
                $ hoistServerWithContext api context (runRIO env) server
   |
38 |   serveWithContext api (key :. EmptyContext) $ hoistServerWithContext api context (runRIO env) server
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tsani/servant-github-webhook/issues/13#issuecomment-408463124&#34;&gt;ググった結果&lt;/a&gt;，こうするといいらしい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;    &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;, gitHubKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook&lt;/span&gt;   (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;, gitHubKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;app env key &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;context ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ GitHubKey ]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; data-line-number=&#34;10&#34;&gt;context &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- HACK&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; (forall result&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Servant.GitHub.Webhook.GitHubKey&lt;/span&gt; result)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;gitHubKey ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; data-line-number=&#34;17&#34;&gt;gitHubKey k &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; (Servant.GitHub.Webhook.gitHubKey k)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasContextEntry&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[GitHubKey] (Servant.GitHub.Webhook.GitHubKey result) where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; data-line-number=&#34;20&#34;&gt;  getContextEntry (&lt;span class=&#34;dt&#34;&gt;GitHubKey&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;:.&lt;/span&gt; _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;ちなみに，手元で試すときには ngrok を使った． 便利．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-08-15T18:44:19.801+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://qiita.com/watertight/items/a96e2696d5a7a8f53a5b</id><title type="text">curlパッケージにはlibcurl4-gnutls-devが必要</title><updated>2018-08-06T21:25:30+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/watertight/items/a96e2696d5a7a8f53a5b"/></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://qiita.com/ruicc/items/109692ea1df502d20666</id><title type="text">モナド則とプログラミング</title><updated>2018-07-31T01:23:02+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ruicc/items/109692ea1df502d20666"/></entry><entry><id>https://qiita.com/satosystems/items/9666cf6f19bc4bd4437e</id><title type="text">数式と Haskell 式の対応関係をまとめてみた</title><updated>2018-07-29T01:04:28+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/satosystems/items/9666cf6f19bc4bd4437e"/></entry><entry><id>https://qiita.com/lotz/items/3d2f9e3a28b8fdb04590</id><title type="text">servant-stache を作りました</title><updated>2018-07-28T20:41:43+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/3d2f9e3a28b8fdb04590"/></entry><entry><id>https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html</id><title type="text">deriveJsonNoPrefixをリリースしました</title><updated>2018-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/derive-json-no-prefix.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;前回の更新からちょっと時間が空いてしまいました 💦&lt;br /&gt;
小ネタです。掲題の通り&lt;a href=&#34;http://hackage.haskell.org/package/deriveJsonNoPrefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;というパッケージをリリースしました。&lt;br /&gt;
地味に有用だと思うので、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/master/README.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;をやや意訳気味に翻訳して記事にします。&lt;br /&gt;
十分に単純なので、仕様が変わることもまさかないでしょうし。&lt;/p&gt;
&lt;p&gt;以下、&lt;a href=&#34;https://gitlab.com/igrep/deriveJsonNoPrefix/blob/6114e0fc55cf5b57a771871e53971a51592f618b/README.md&#34;&gt;こちらのコミットの時点の&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;の翻訳です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;同じ問題を解決するほかのライブラリー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#derivejsonnoprefix&#34; title=&#34;derivejsonnoprefix&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJsonNoPrefix&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;プレフィックスに優しい&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを定義する&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;のマクロを提供します。&lt;/p&gt;
&lt;h2 id=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#例&#34; title=&#34;例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;例&lt;/h2&gt;
&lt;p&gt;こんな感じの&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;を作りたいとしましょう&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode json&#34;&gt;&lt;code class=&#34;sourceCode json&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ID STRING&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;max&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.789&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;&amp;quot;min&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;0.123&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きっと&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ToJSON&lt;/span&gt;&lt;/a&gt;（おそらくそれに加えて&lt;a href=&#34;http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:FromJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;FromJSON&lt;/span&gt;&lt;/a&gt;も）のインスタンスを自動的に定義するための、次のようなレコード型を定義したくなるでしょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.TH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; id ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; max ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; min ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveToJSON defaultOptions &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、こんなレコード型は定義すべきではありません。&lt;br /&gt;
&lt;code&gt;id&lt;/code&gt;も&lt;code&gt;max&lt;/code&gt;も&lt;code&gt;min&lt;/code&gt;も、&lt;code&gt;Prelude&lt;/code&gt;に定義済みなのですから！&lt;/p&gt;
&lt;p&gt;この問題を回避するために、レコードラベルに型の名前をプレフィックスとして加える、ということをわれわれはよくやります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; someRecordId ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMax ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; someRecordMin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして、&lt;code&gt;deriveToJSON&lt;/code&gt;にデフォルトと異なるオプションを渡して実行します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;st&#34;&gt;&amp;quot;SomeRecord&amp;quot;&lt;/span&gt;) } &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fieldLabelModifier&lt;/code&gt;オプションは文字通り、対象のレコードを&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;に変換するとき、あるいは&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;から対象のレコードの値に変換する時、レコードのラベルを変換する関数を設定するために使います。&lt;br /&gt;
👆の場合、プレフィックスである&lt;code&gt;SomeRecord&lt;/code&gt;の文字数分レコードラベルから&lt;code&gt;drop&lt;/code&gt;して、先頭の文字&lt;small&gt;（&lt;code&gt;someRecordId&lt;/code&gt;で言えば&lt;code&gt;Id&lt;/code&gt;の&lt;code&gt;I&lt;/code&gt;に相当します）&lt;/small&gt;を小文字に変換しているのがわかるでしょうか？&lt;/p&gt;
&lt;p&gt;そう、これが&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;がやっていることとほぼ同等のことです。&lt;br /&gt;
&lt;code&gt;deriveToJsonNoTypeNamePrefix&lt;/code&gt;は、実質次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;deriveToJsonNoTypeNamePrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Q&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;deriveToJsonNoTypeNamePrefix deriver name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;  deriveToJSON Json.defaultOptions { fieldLabelModifier &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; dropPrefix name } name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dropPrefix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;dropPrefix name &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; firstLower &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; drop (length &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; nameBase name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;firstLower ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;firstLower (x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toLower x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;firstLower _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;firstLower: Assertion failed: empty string&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果、これからは&lt;code&gt;fieldLabelModifier&lt;/code&gt;をもう自分で定義する必要がありません！🙌&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.DeriveNoPrefix&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(deriveJsonNoTypeNamePrefix &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;SomeRecord&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👆 の&lt;code&gt;deriveJsonNoTypeNamePrefix&lt;/code&gt; は &lt;a href=&#34;https://hackage.haskell.org/package/aeson/docs/Data-Aeson-TH.html#v:deriveJSON&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;deriveJSON&lt;/span&gt;&lt;/a&gt;と同様に、&lt;code&gt;ToJSON&lt;/code&gt;と&lt;code&gt;FromJSON&lt;/code&gt;のインスタンス、両方を生成します。&lt;br /&gt;
もちろん、&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスを生成するときのオプションとしても、プレフィックスを削除するための&lt;code&gt;fieldLabelModifier&lt;/code&gt;を渡してくれます！&lt;/p&gt;
&lt;h2 id=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#同じ問題を解決するほかのライブラリー&#34; title=&#34;同じ問題を解決するほかのライブラリー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;同じ問題を解決するほかのライブラリー&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;など、&lt;code&gt;ToJSON&lt;/code&gt;・&lt;code&gt;FromJSON&lt;/code&gt;のインスタンスが定義された&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので、そうした&lt;span class=&#34;ascii&#34;&gt;extensible record&lt;/span&gt;を提供するライブラリーが学習コストや依存関係などの事情で「重たい」と感じたときにこのパッケージを使ってください。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://qiita.com/lotz/items/c049f3a94d913ab6ae1b</id><title type="text">Cloud Haskellについて調べてみた</title><updated>2018-07-14T10:33:29+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/c049f3a94d913ab6ae1b"/></entry><entry><id>https://qiita.com/watanany/items/91c5fcb088128e9cabe3</id><title type="text">なぜモナドが必要なのか？</title><updated>2018-07-11T22:23:25+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/watanany/items/91c5fcb088128e9cabe3"/></entry><entry><id>https://qiita.com/0x52_0x4d/items/a446b369bedda564d9e8</id><title type="text">Haskell （と Python3）で最急降下法</title><updated>2018-07-11T08:57:03+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/0x52_0x4d/items/a446b369bedda564d9e8"/></entry><entry><id>https://qiita.com/longtime1116/items/7bdb1f1d88eda7d70832</id><title type="text">Haskell で直角三角形をなす三辺を任意の数出力する</title><updated>2018-07-10T19:26:41+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/longtime1116/items/7bdb1f1d88eda7d70832"/></entry><entry><id>https://qiita.com/watertight/items/9e043303d0bb9183249d</id><title type="text">Yesodでコマンドライン引数や設定ファイルを扱う</title><updated>2018-07-07T20:23:53+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/watertight/items/9e043303d0bb9183249d"/></entry><entry><id>https://qiita.com/eijian/items/fb7f50765012315681fb</id><title type="text">レイトレーシング(12): 集光模様！</title><updated>2018-07-07T10:44:19+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/eijian/items/fb7f50765012315681fb"/></entry><entry><id>https://qiita.com/raviqqe/items/cc8900f93f0e580f2110</id><title type="text">Goで本質的に並列な関数型言語つくった</title><updated>2018-07-04T13:55:29+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/raviqqe/items/cc8900f93f0e580f2110"/></entry><entry><id>https://matsubara0507.github.io/posts/2018-07-01-join-ruby-hack-challenge4.html</id><title type="text">Ruby Hack Challenge ＃4 に参加してきた</title><updated>2018-07-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-07-01-join-ruby-hack-challenge4.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Ruby Hack Challenge ＃4 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-07-01&#34; itemprop=&#34;datePublished&#34;&gt;
        Jul 1, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Ruby.html&#34;&gt;Ruby&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先週 &lt;a href=&#34;https://cookpad.connpass.com/event/88471/&#34;&gt;Ruby Hack Cavalage #4&lt;/a&gt; に参加してきたので，そのメモ書きです．&lt;/p&gt;
&lt;p&gt;ちなみに，Ruby は自分が最初に触ったスクリプト言語で，現在仕事で使っているメインの言語です． 推し言語(Haskell)とは異なり，動的型付けではありますが，「&lt;a href=&#34;http://i.loveruby.net/ja/rhg/book/&#34;&gt;Rubyソースコード完全解説&lt;/a&gt;」や「&lt;a href=&#34;https://tatsu-zine.com/books/ruby-under-a-microscope-ja&#34;&gt;Rubyのしくみ&lt;/a&gt;」のような処理系内部を紹介してる読み物も多く，かなり好きな方な言語です.&lt;/p&gt;
&lt;h2 id=&#34;ruby-hack-challenge&#34;&gt;Ruby Hack Challenge&lt;/h2&gt;
&lt;p&gt;Ruby 処理系をハックしようというイベントで，コアコミッタの &lt;a href=&#34;https://github.com/mame&#34;&gt;mame&lt;/a&gt; 氏と &lt;a href=&#34;https://github.com/ko1&#34;&gt;ko1&lt;/a&gt; 氏が講師として企画してくれている． ふたりが在籍しているということで，会場はクックパッドで行っている．&lt;/p&gt;
&lt;p&gt;毎回，前半に講義的なものがあり，後半で実際に手を動かして Ruby にコミットするといった感じらしい． ただし，2日開催だったり，半日だったり時間はまちまち(今回は半日だった)． イベント名的に Ruby のハッカソンみたいだが，Ruby 処理系はC言語で書かれているためC言語を書くことになる(笑)&lt;/p&gt;
&lt;h3 id=&#34;カバレッジ特別会&#34;&gt;カバレッジ特別会&lt;/h3&gt;
&lt;p&gt;しかし，4回目(となっているが3回目が見当たらないので3回目かも？？)となる今回は，カバレッジ特別会ということで多くの人たちが Ruby を読み書きしていた． なぜかというと，標準ライブラリは Ruby で書かれており，今回は標準ライブラリのテストカバレッジをあげても良かったからだ． というか，C で書かれているコア部分は mame 氏が昔に大分カバレッジをあげてしまったため，そっちをやるのは難しいと言っていた．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;C言語の部分で残っているとすれば本質的に難しい部分(副作用とか並行並列とか)か最近追加された部分か(JITとか？)だそうだ．&lt;/p&gt;
&lt;h3 id=&#34;資料&#34;&gt;資料&lt;/h3&gt;
&lt;p&gt;今までのも含め，資料は(いくつか？)公開されているので誰でも見れる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ko1/rubyhackchallenge&#34;&gt;ko1/rubyhackchallenge - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/mametter/ruby-hack-challenge-4&#34;&gt;Ruby Hack Challenge #4 カバレッジ特別回 資料 - SlideShare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また Gitter で連絡を取り合っており，実は誰でも参加できる(たぶん)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/rubyhackchallenge/Lobby&#34;&gt;rubyhackchallenge/Lobby - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，ボクはもともとこのイベントは参加したいなぁと思っていた(言語好きなので)．&lt;/p&gt;
&lt;h2 id=&#34;ruby-のテストカバレッジ&#34;&gt;Ruby のテストカバレッジ&lt;/h2&gt;
&lt;p&gt;Ruby のテストカバレッジは Web から確認できる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rubyci.s3.amazonaws.com/debian8-coverage/ruby-trunk/lcov/index.html&#34;&gt;LCOV - code coverage report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを見てカバレッジの低いところにねらい目を付けてテストを追加する(ないしは不要な実装なら削る)． 標準ライブラリのいくつかは個別に GitHub で管理されているので，GitHub で管理されてる場合はそっちに PR を投げれば良いようだ(今回は事情が共有されてたせいかすぐマージされた)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/ruby/ruby/blob/trunk/doc/maintainers.rdoc&#34;&gt;ココ&lt;/a&gt;を見ると誰がメンテナーで，どこに報告すれば良いかが書いてある．&lt;/p&gt;
&lt;h3 id=&#34;環境構築&#34;&gt;環境構築&lt;/h3&gt;
&lt;p&gt;は事前にやっとくと，当日はすんなりコミットできた(構築方法はスライドに書いてある)． 事前にって言ってもぼくは行きの電車でやったけど(笑)&lt;/p&gt;
&lt;p&gt;Windows と Mac を持ってるけど，どっちも素でやるのは難しいので，Debian の Docker コンテナの上で構築した． Docker ありがとう！ ビルドがめっちゃ遅いけどね！&lt;/p&gt;
&lt;h2 id=&#34;当日やったこと&#34;&gt;当日やったこと&lt;/h2&gt;
&lt;p&gt;すっっっごい簡単にカバレッジをあげれそうなのがあったのサクッと直して PR をだした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruby/cmath/pull/2&#34;&gt;Add test for coverage by matsubara0507 · Pull Request #2 · ruby/cmath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;CMath&lt;/code&gt; モジュールは &lt;code&gt;Math&lt;/code&gt; モジュールをラップして複素数(Complex number)にまで対応させたものだ． そのため，虚数を含む複素数に関するテストしかなく，実数に関するテストが無かったためカバレッジが低かった． 愚直に全部書いたら100%まで行きましたちゃんちゃんってだけです．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，他にも4,5個ほど PR が出ていた． すごいね！&lt;/p&gt;
&lt;h2 id=&#34;もくもく会&#34;&gt;もくもく会&lt;/h2&gt;
&lt;p&gt;あと，Ruby Hack Challenge もくもく会というのがあるらしいので行ってみたい(&lt;a href=&#34;https://connpass.com/event/93131/&#34;&gt;次回はこれ&lt;/a&gt;)． MJIT のコードとか読んでみたいよね． それと型検査(はどうなるかまだ分からないらしいけど)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;そういえば，ko1 氏がお子さんと奥さんを連れてきていた(たぶん)． そういう事に理解のある会社っていいなぁと感じた．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://qiita.com/S_A_Y_A/items/1a2b1b8d944aefb2dd6d</id><title type="text">Haskellで作るコンソールLife Game</title><updated>2018-06-21T23:48:01+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/S_A_Y_A/items/1a2b1b8d944aefb2dd6d"/></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-21-challenge-rust-reversi.html</id><title type="text">rust-reversi やってみた</title><updated>2018-06-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-21-challenge-rust-reversi.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;rust-reversi やってみた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-21&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 21, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Rust.html&#34;&gt;Rust&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;現在，会社の同期と週一で Rust の勉強会をやっていまして，普段は &lt;a href=&#34;https://y-yu.github.io/trpl-2nd-pdf/book.pdf&#34;&gt;The Rust Programming Language: 2nd Edition の日本語版&lt;/a&gt; を輪読しているのですが，3月ぐらいにあった &lt;a href=&#34;https://internship.cookpad.com/2018/spring/&#34;&gt;Cookpad Spring 1day Internship 2018&lt;/a&gt; の Rust コースの資料が公開されたため，皆でハッカソンしてみました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KOBA789/rust-reversi&#34;&gt;KOBA789/rust-reversi: Cookpad Spring 1day Internship 2018 Rust プログラミングコースで使用された講義資料 - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は実際にやってみてのメモ書きです． 主に躓いたとこのメモです．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，ぼくの Rust の経験値は上記の本を17章まで読んだだけで，ほとんど書いたことないですね(輪読は7章，自分で少し先を読んでいる)． あと，&lt;a href=&#34;https://github.com/matsubara0507/rust-reversi/tree/reversi-impl&#34;&gt;回答はフォークしてあげてあります&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;躓いたところ&#34;&gt;躓いたところ&lt;/h3&gt;
&lt;p&gt;めちゃくちゃしょーーーーもないところばっかです(笑)&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;固定長配列の map&lt;/li&gt;
&lt;li&gt;パターンマッチの変数&lt;/li&gt;
&lt;li&gt;index の x と y が逆&lt;/li&gt;
&lt;li&gt;既に置いてあるかの検査&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;何を作っているか&#34;&gt;何を作っているか&lt;/h3&gt;
&lt;p&gt;そもそも課題は何かというと，オセロ(リバーシ)です． 試しに実行してみるとこんな感じ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
   Compiling reversi v0.1.0 (file:///Users/nobutada.matsubara/git/rust/rust-reversi)
     Running `target/debug/reversi`
  a b c d e f g h
 +-+-+-+-+-+-+-+-+
1| | | | | | | | |
 +-+-+-+-+-+-+-+-+
2| | | | | | | | |
 +-+-+-+-+-+-+-+-+
3| | | | | | | | |
 +-+-+-+-+-+-+-+-+
4| | | |O|X| | | |
 +-+-+-+-+-+-+-+-+
5| | | |X|O| | | |
 +-+-+-+-+-+-+-+-+
6| | | | | | | | |
 +-+-+-+-+-+-+-+-+
7| | | | | | | | |
 +-+-+-+-+-+-+-+-+
8| | | | | | | | |
 +-+-+-+-+-+-+-+-+

B 2 - 2 W
Turn: Black
  a b c d e f g h
 +-+-+-+-+-+-+-+-+
1| | | | | | | | |
 +-+-+-+-+-+-+-+-+
2| | | | | | | | |
 +-+-+-+-+-+-+-+-+
3| | | | | | | | |
 +-+-+-+-+-+-+-+-+
4| | |X|X|X| | | |
 +-+-+-+-+-+-+-+-+
5| | | |X|O| | | |
 +-+-+-+-+-+-+-+-+
6| | | | | | | | |
 +-+-+-+-+-+-+-+-+
7| | | | | | | | |
 +-+-+-+-+-+-+-+-+
8| | | | | | | | |
 +-+-+-+-+-+-+-+-+

B 4 - 1 W
Turn: White
0) c3
1) c5
2) e3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全部一から作れではなく，リポジトリをクローンして &lt;code&gt;src/coord.rs&lt;/code&gt; と &lt;code&gt;src/board.rs&lt;/code&gt; の &lt;code&gt;unimplemented!();&lt;/code&gt; となっている個所の実装を与えるだけ． ご丁寧なことにテストも用意してあるので，&lt;code&gt;cargo test&lt;/code&gt; を実行しまくってオールグリーンになれば出来上がり(たぶん)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，クライアントの同期が &lt;code&gt;unimplemented();&lt;/code&gt; に感動していたので，調子に乗って &lt;a href=&#34;https://matthew.brecknell.net/post/hole-driven-haskell/&#34;&gt;Hole driven Programming&lt;/a&gt; について語ってしまった．&lt;/p&gt;
&lt;h3 id=&#34;関数が呼べない&#34;&gt;0. 関数が呼べない&lt;/h3&gt;
&lt;p&gt;ゼロ引数関数は &lt;code&gt;xxx.method&lt;/code&gt; はダメで，&lt;code&gt;xxx.method()&lt;/code&gt; しなきゃいけないってのが何度もあった(笑) 普段は Haskell を書いているせいですね．&lt;/p&gt;
&lt;h3 id=&#34;固定長配列の-map&#34;&gt;1. 固定長配列の map&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたとき、指定の方向へひっくり返せる石の数を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたときの `Move` を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 戻り値の `Move` には8方向分の `get_flip` の結果が含まれる&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_move(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord) -&amp;gt; Move &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;pp&#34;&gt;unimplemented!&lt;/span&gt;();&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とあり&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Move &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; pos: Coord,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;    flips: &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; DIRECTIONS: &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;Coord; &lt;span class=&#34;dv&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; = &lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;co&#34;&gt;//左上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//真上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//右上&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//真左&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//真右&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;    Coord(-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;co&#34;&gt;//左下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//真下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;    Coord(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;),   &lt;span class=&#34;co&#34;&gt;//右下&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なので，&lt;code&gt;move.flips = DIRECTIONS.map (|dir| self.get_flip(piece, pos, dir))&lt;/code&gt; って具合にいけそうだと思ったのだ． しかし，悲しいことに組み込みでは &lt;strong&gt;固定長配列に対するこのような操作はないようだ&lt;/strong&gt;(間違っていたらゴメンナサイ…)． なので結局諦めて for 文を回した…&lt;/p&gt;
&lt;p&gt;何か良い方法があったら教えて欲しい.&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチの変数&#34;&gt;2. パターンマッチの変数&lt;/h3&gt;
&lt;p&gt;すごい間抜けな話です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// 指定の色の石を指定の位置に置いたとき、指定の方向へひっくり返せる石の数を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;///&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `piece` - 置く石の色&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `pos` - 石を置く位置&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// * `dir` - ひっくり返せる石を探す方向。`DIRECTIONS` の要素のいずれかが渡される&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; opponent = piece.opponent();&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;mut&lt;/span&gt; cnt = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; data-line-number=&#34;10&#34;&gt;        pos += dir;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; data-line-number=&#34;11&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;pos&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; data-line-number=&#34;12&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;           =&amp;gt; &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; data-line-number=&#34;13&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece)    =&amp;gt; &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; cnt,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; data-line-number=&#34;14&#34;&gt;            &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(opponent) =&amp;gt; cnt += &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; data-line-number=&#34;15&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とか書いていたが，全然テストが通らない． それもそのはずで &lt;strong&gt;パターンマッチの中の変数は代入になる&lt;/strong&gt; だけで，&lt;code&gt;if self.matrix[target] == Some(piece) { ... }&lt;/code&gt; とは異なる． シャーディングぅぅぅぅぅとか思ったけど，きっと警告出てたよね…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;warning: unreachable pattern
   --&amp;gt; src/board.rs:165:17
    |
165 |                 Some(opponent) =&amp;gt; cnt += 1,
    |                 ^^^^^^^^^^^^^^
    |
    = note: #[warn(unreachable_patterns)] on by default

warning: unused variable: `opponent`
   --&amp;gt; src/board.rs:158:13
    |
158 |         let opponent = piece.opponent();
    |             ^^^^^^^^ help: consider using `_opponent` instead
    |
    = note: #[warn(unused_variables)] on by default

warning: unused variable: `piece`
   --&amp;gt; src/board.rs:164:22
    |
164 |                 Some(piece)    =&amp;gt; return cnt,
    |                      ^^^^^ help: consider using `_piece` instead

warning: unused variable: `opponent`
   --&amp;gt; src/board.rs:165:22
    |
165 |                 Some(opponent) =&amp;gt; cnt += 1,
    |                      ^^^^^^^^ help: consider using `_opponent` instead&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出てたね…&lt;/p&gt;
&lt;h3 id=&#34;index-の-x-と-y-が逆&#34;&gt;3. index の x と y が逆&lt;/h3&gt;
&lt;p&gt;普段二重配列とかやんないからさ…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// ベクトルを表現する構造体&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Coord(&lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;i8&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;i8&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;/// `[]` 演算子のオーバーロード&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;impl&lt;/span&gt; Index&amp;lt;Coord&amp;gt; &lt;span class=&#34;kw&#34;&gt;for&lt;/span&gt; Matrix &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Output = &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt;&amp;lt;Piece&amp;gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;co&#34;&gt;/// 第一引数に与えられた座標の状態を返す&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;co&#34;&gt;/// 座標が盤面の範囲外であった場合は None が返る。&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; index(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, index: Coord) -&amp;gt; &amp;amp;&lt;span class=&#34;kw&#34;&gt;Self&lt;/span&gt;::Output &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.is_in_range(index) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;            &amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;index.&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;usize&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;][&lt;/span&gt;index.&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;usize&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;            &amp;amp;&lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とか最初書いていた． &lt;code&gt;Coord&lt;/code&gt; 型はひとつ目が X 座標でふたつ目が Y 座標． &lt;code&gt;&amp;amp;self.0[index.0 as usize][index.1 as usize]&lt;/code&gt; のところが逆ですね…&lt;/p&gt;
&lt;h3 id=&#34;既に置いてあるかの検査&#34;&gt;4. 既に置いてあるかの検査&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;moves&lt;/code&gt; のテストが何故かとおらない． &lt;code&gt;moves&lt;/code&gt; は盤上の全ての合法手，“手” を表す &lt;code&gt;Move&lt;/code&gt; 型は手を打つ場所(&lt;code&gt;Coord&lt;/code&gt; 型)と各方向のひっくり返す数を持っている，を列挙する関数．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---- board::tests::test_board_moves stdout ----
	thread &amp;#39;board::tests::test_board_moves&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
  left: `6`,
 right: `37`&amp;#39;, src/board.rs:366:9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;めちゃくちゃ多い． テストを読んでイロイロと出力させてみたところ，既にピースが置いてある場合のチェックを忘れていた(バカ)．&lt;/p&gt;
&lt;h3 id=&#34;オールグリーン&#34;&gt;オールグリーン&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cargo test
   Compiling reversi v0.1.0 (file:///Users/nobutada.matsubara/git/rust/rust-reversi)
    Finished dev [unoptimized + debuginfo] target(s) in 1.27 secs
     Running target/debug/deps/reversi-ae2013b8997f878b

running 12 tests
test board::tests::test_board_count_mut ... ok
test board::tests::test_board_get_move ... ok
test board::tests::test_board_get_flip ... ok
test board::tests::test_board_do_move ... ok
test board::tests::test_do_flip ... ok
test board::tests::test_matrix_index ... ok
test board::tests::test_board_moves ... ok
test board::tests::test_matrix_index_mut ... ok
test board::tests::test_matrix_is_in_range ... ok
test board::tests::test_move_is_legal ... ok
test coord::tests::test_coord_add ... ok
test coord::tests::test_coord_add_assign ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;基本構文を覚えてないので，とりあえず雑に書いてビルドして怒られたら直す，的なことをしながら，静的検査さいこ～とか言いながらやってた(疲れてる)． おかげで &lt;code&gt;&amp;amp;&lt;/code&gt; とか &lt;code&gt;*&lt;/code&gt; を雑にあつかってて良くないですね． まぁ楽しかったからいいけど．&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get_flip&lt;/code&gt; 関数のところ，関数型プログラマーらしく(?)再帰にして見た. 速度は変わるんかな？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode rust&#34;&gt;&lt;code class=&#34;sourceCode rust&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.go_get_flip(piece, pos, dir).unwrap_or(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; go_get_flip(&amp;amp;&lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;, piece: Piece, pos: Coord, dir: Coord) -&amp;gt; &lt;span class=&#34;dt&#34;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&#34;dt&#34;&gt;u8&lt;/span&gt;&amp;gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; target = pos + dir;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;target&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; == &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece.opponent()) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.go_get_flip(piece, target, dir).map(|x| x + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;self&lt;/span&gt;.matrix&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;target&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; == &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(piece) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;cn&#34;&gt;Some&lt;/span&gt;(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;cn&#34;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Haskell 版でも作ってみようかしらん．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html</id><title type="text">Earlang ＆ Elixir Fest 2018 に参加してきた</title><updated>2018-06-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Earlang ＆ Elixir Fest 2018 に参加してきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elixir.html&#34;&gt;Elixir&lt;/a&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先日(6/16)，&lt;a href=&#34;https://elixir-fest.jp/&#34;&gt;Earlang &amp;amp; Elixir Fest 2018&lt;/a&gt; に参加してきたので，そのメモ書きです． ちなみに，Elixir は普段たいして使ってないけど LT もしてきました．&lt;/p&gt;
&lt;h4 id=&#34;追記2018.06.21&#34;&gt;追記(2018.06.21)&lt;/h4&gt;
&lt;p&gt;本稿公開後に公開してくださった発表スライドのリンクを追記しました．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;今年で2回目らしく，去年は Elixir の作者の &lt;a href=&#34;https://twitter.com/josevalim&#34;&gt;Jose Valim&lt;/a&gt; 氏を呼んで Keynote してもらい，全体のセッション内容としては Elixir を導入し始めた・挑戦中という話がメインだったようだ． 今年はどっちかっていうとプロダクトに実践導入・運用してみてどうだったかという話がメインだそうだ． また，並行してハンズオンがあったらしいが，行ってないのでそっちは良く分からない． ハンズオンの資料は GitHub に公開してあるので，いずれやってみたい(同期とかとハンズオンしてみてもいいかも)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohr486/ErlangElixirFestHandsOn&#34;&gt;ohr486/ErlangElixirFestHandsOn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと &lt;a href=&#34;https://togetter.com/li/1238110&#34;&gt;Togetter にまとめてみました&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;メモ&#34;&gt;メモ&lt;/h2&gt;
&lt;p&gt;各企業での導入した話が多かったので簡単なメモばっかです．&lt;/p&gt;
&lt;h4 id=&#34;らくらく連絡網が-elixir-でリアルタイムメッセージング基盤を刷新した話&#34;&gt;「らくらく連絡網」が Elixir でリアルタイムメッセージング基盤を刷新した話&lt;/h4&gt;
&lt;p&gt;(ネットワーク設定にバタバタしてたのでメモが少ない)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rinosamakanata&#34;&gt;rinosamakanata&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eole-repos.github.io/public/elixirfest/2018/elixirfest2018-eole-rinosamakanata.pdf&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;もともとは RoR らしい&lt;/li&gt;
&lt;li&gt;技術的課題
&lt;ul&gt;
&lt;li&gt;分散の問題&lt;/li&gt;
&lt;li&gt;長い目で見たときの保守・運用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フロントエンドは Elm
&lt;ul&gt;
&lt;li&gt;「関数型良いよね」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;負荷テストのために不可掛けの Docker コンテナを作った&lt;/li&gt;
&lt;li&gt;Elixir のバージョンアップが多い(リリースしてから9回もあった)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asdf-vm/asdf-elixir&#34;&gt;asdf&lt;/a&gt; で難なく&lt;/li&gt;
&lt;li&gt;Ruby や RoR よりぜんぜん簡単&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実質的にメンテナンスフリー&lt;/li&gt;
&lt;li&gt;Erlang は書けなくても導入できる
&lt;ul&gt;
&lt;li&gt;ただし BEAM の知識はいる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/happi/theBeamBook&#34;&gt;The BEAM Book&lt;/a&gt; おすすめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近 Ruby や Ruby のライブラリのバージョンアップで苦しんでいるのを見てたのでバージョンアップがシームレスなの羨ましい．&lt;/p&gt;
&lt;h4 id=&#34;初めてのerlangサーバ開発と運用&#34;&gt;初めてのErlangサーバ開発と運用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mookjp&#34;&gt;mookjp&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/mookjp/chu-metefalseerlangsahakai-fa-toyun-yong?slide=1&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang をどう勉強したかや失敗談などの話&lt;/li&gt;
&lt;li&gt;Node.js から Erlang へ (たぶん)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://erlang.org/doc/man/observer.html&#34;&gt;observer&lt;/a&gt; という Erlang プロセスの可視化ツールが便利&lt;/li&gt;
&lt;li&gt;Erlang サーバーをプロダクションに導入するときの設定
&lt;ul&gt;
&lt;li&gt;思想の記事ばっか！&lt;/li&gt;
&lt;li&gt;実際の設定に関する記事が少ない！！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不必要なプロセスやその監視プロセスが微妙に残ってじわじわ CPU 使用率が上がってしまった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.erlang-in-anger.com/&#34;&gt;Erlang in Anger&lt;/a&gt; を絶対に読む
&lt;ul&gt;
&lt;li&gt;運用に役立ちそうなことがたくさん書いてある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://erlang-slack.herokuapp.com/&#34;&gt;Erlang の Slack ワークスペース&lt;/a&gt;がおススメ！
&lt;ul&gt;
&lt;li&gt;紹介した監視の VMStats もここで教えてもらった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思想の記事が多い話，なんとなく Haskell にも似たようなところがあって笑った&lt;/p&gt;
&lt;h4 id=&#34;keep-phoenix-app-productivity&#34;&gt;Keep Phoenix App Productivity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kanmo_ak&#34;&gt;kanmo_ak&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kanmo/keep-phoenix-app-productivity?slide=1&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix Application 開発1年・運用1年してみた結果の話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixirschool.com/en/lessons/advanced/umbrella-projects/&#34;&gt;Umbrella&lt;/a&gt; によって Project を分割
&lt;ul&gt;
&lt;li&gt;肥大化してきた&lt;/li&gt;
&lt;li&gt;複数のサービスをひとつのリポジトリで別々に開発&lt;/li&gt;
&lt;li&gt;サービス間でコードを共有できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ひとつのファイルを書き換えるだけでコンパイル対象が膨大…
&lt;ul&gt;
&lt;li&gt;ファイル間の依存関係がひどいので切っていく&lt;/li&gt;
&lt;li&gt;マクロを変更するとやり直し&lt;/li&gt;
&lt;li&gt;構造体を変更するとやばい&lt;/li&gt;
&lt;li&gt;プロトコルも依存がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&#34;&gt;&lt;code&gt;mix xref&lt;/code&gt;&lt;/a&gt; タスクが便利&lt;/li&gt;
&lt;li&gt;モジュール名を動的に組み立てて依存を無理やり切る黒魔術(使わない方がいい)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang プロセスだと remsh で起動中のプロセスに接続して調査できる&lt;/li&gt;
&lt;li&gt;Elixir バージョンアップは追いやすい
&lt;ul&gt;
&lt;li&gt;RoR に比べて(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Type Spec を書いておくとドキュメントになる
&lt;ul&gt;
&lt;li&gt;Dializer は使ってない(時間が無かった)&lt;/li&gt;
&lt;li&gt;spec ないとつらいと感じたの私自身です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昔 Type Spec が書いてあったが間違ってるおかげで痛い目にあったので書いたやつを静的にチェックしたいですよね…&lt;/p&gt;
&lt;h4 id=&#34;from-python-to-elixir&#34;&gt;from Python to Elixir&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kenichirow&#34;&gt;kenichirow&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;Python から Elixir に移行
&lt;ul&gt;
&lt;li&gt;Python 2020 年問題(2系のサポートが終わる)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Phoenix は最初は使わないつもりだった
&lt;ul&gt;
&lt;li&gt;Django からだと暗黙的な何某が多い印象(マクロ)&lt;/li&gt;
&lt;li&gt;PubSub いらない&lt;/li&gt;
&lt;li&gt;なので自作 FW を作ってた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;突然 Phoenix 宣言
&lt;ul&gt;
&lt;li&gt;「お前 Dis れるほど Phoenix 知ってるのかよ」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ecto にはいくつかの問題&lt;/li&gt;
&lt;li&gt;なのでライブラリを作った &lt;a href=&#34;https://github.com/gumi/yacto&#34;&gt;Yacto&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;DB分割・XAトランザクションなど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各ゲームの基盤を Template にしていたがバージョン管理がつらいのでライブラリに&lt;/li&gt;
&lt;li&gt;Elixir のサポートチーム
&lt;ul&gt;
&lt;li&gt;ググる前に聞け&lt;/li&gt;
&lt;li&gt;最近しんどいので Stack Overflow Team を導入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言語変えて解決した問題は少しだけ
&lt;ul&gt;
&lt;li&gt;ただ整備するきっかけにはなった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基盤チームカッコいい&lt;/p&gt;
&lt;h4 id=&#34;ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる&#34;&gt;ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ne-sachirou&#34;&gt;さっちゃん&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ne_sachirou/sutetohurudeda-gui-mo-akusesufalsearusoft-realtimenagemusabawoeasynitukuru&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix でゲーム作って運用したはなし&lt;/li&gt;
&lt;li&gt;AWS + Kube + Phoenix&lt;/li&gt;
&lt;li&gt;Real time PvP がメインなのに RoR は大変&lt;/li&gt;
&lt;li&gt;どっちみちイロイロ知見が無いので新しい技術使っても苦労はするでしょ
&lt;ul&gt;
&lt;li&gt;Elixir の知見はある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/inner_cotton/readme.html&#34;&gt;InnerCotton&lt;/a&gt; を作った&lt;/li&gt;
&lt;li&gt;FP は知ってた&lt;/li&gt;
&lt;li&gt;Channel と Redis で PvP&lt;/li&gt;
&lt;li&gt;ホットデプロイはあきらめた&lt;/li&gt;
&lt;li&gt;優先度付きキューを自作 &lt;a href=&#34;https://hex.pm/packages/pqueue2&#34;&gt;queue2&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;既存のモノは間違ってるものが多かったので&lt;/li&gt;
&lt;li&gt;スタックになっているものもあった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/nesachirou/elixir/&#34;&gt;docker image&lt;/a&gt; を作った(Elixir と Erlang の両方が指定できる)&lt;/li&gt;
&lt;li&gt;Elixir の監視つらい&lt;/li&gt;
&lt;li&gt;もっと publish していこうぜ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;社内でやったことドンドン Publish できるのいいなぁ．&lt;/p&gt;
&lt;h4 id=&#34;channel先生-pubsubがしたいです&#34;&gt;Channel先生…!! PubSubがしたいです…&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohr486&#34;&gt;ohrdev&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ohr486/erlangelixirfest2018-ohr486-session&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;~Erlang in Anger~ PubSub in Channel&lt;/li&gt;
&lt;li&gt;「PubSub しない Phoenix はただの Rails だ」&lt;/li&gt;
&lt;li&gt;Phoenix Channel + PubSub&lt;/li&gt;
&lt;li&gt;PubSub は2種類ある
&lt;ul&gt;
&lt;li&gt;ローカル PubSub ・リモート PubSub&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「これカッコよくないっすか、見るたびにすごいぞくぞくする」&lt;/li&gt;
&lt;li&gt;PubSub バックエンドは選択できる&lt;/li&gt;
&lt;li&gt;どれだけ知っといた方がいいか？
&lt;ul&gt;
&lt;li&gt;基本は知らなくても&lt;/li&gt;
&lt;li&gt;新しい Adaptar を作る場合は知ってないといけない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PubSub 完全に理解した(嘘)&lt;/p&gt;
&lt;h4 id=&#34;antikythera-framework-an-elixir-framework-for-multiple-web-services&#34;&gt;Antikythera Framework: An Elixir framework for multiple web services&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skirino&#34;&gt;skirino&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skirino.github.io/slides/antikythera_framework.html#/&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;社内で作ったフレームワークの紹介 : &lt;a href=&#34;https://github.com/access-company/antikythera&#34;&gt;antikythera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Antikythera メカニズム
&lt;ul&gt;
&lt;li&gt;ギリシャ時代のオーパーツ&lt;/li&gt;
&lt;li&gt;なにかよくわからない&lt;/li&gt;
&lt;li&gt;星の動き？？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;複数のサービスをひとつのフレームワークで管理&lt;/li&gt;
&lt;li&gt;Gear : Webサービスの単位・他の Gear に依存しうる
&lt;ul&gt;
&lt;li&gt;instance より細かい単位&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コア機能
&lt;ul&gt;
&lt;li&gt;リソースコントロール&lt;/li&gt;
&lt;li&gt;自動オペレーション(ホットデプロイなど)&lt;/li&gt;
&lt;li&gt;ログなどビルドインに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gear はマイクロサービスで疎結合だが管理は統一&lt;/li&gt;
&lt;li&gt;リソース管理は ErlangVM なので一長一短&lt;/li&gt;
&lt;li&gt;DB はどうするか？
&lt;ul&gt;
&lt;li&gt;DB は知らない(Gear にしない)&lt;/li&gt;
&lt;li&gt;ふつうに Ecto とかで&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜ Erlang じゃないか？
&lt;ul&gt;
&lt;li&gt;mix が優秀&lt;/li&gt;
&lt;li&gt;mix compiler でフックできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mix すごいのはよくわかる．&lt;/p&gt;
&lt;h4 id=&#34;任意のbeam系言語でプラグインを書ける安定したフレームワークの作りかた&#34;&gt;任意のBEAM系言語でプラグインを書ける安定したフレームワークの作りかた&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/niku&#34;&gt;niku&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://niku.name/2018/06/16/slide.html&#34;&gt;発表スライドはコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BEAM系プラグインを作る上でのノウハウ&lt;/li&gt;
&lt;li&gt;また PubSub の話ですいません&lt;/li&gt;
&lt;li&gt;フレームワークとプラグイン&lt;/li&gt;
&lt;li&gt;プラグイン機構を持つ FW には登場人物が3人
&lt;ul&gt;
&lt;li&gt;フレームワークとプラグインを使う人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プラグインでエラーが起きたときフレームワークはどうするか&lt;/li&gt;
&lt;li&gt;「絵にかくとこんな感じ」&lt;/li&gt;
&lt;li&gt;Supervisor は他の言語ではあまりない
&lt;ul&gt;
&lt;li&gt;こいつのおかげで別粒度間のプロセス管理が楽&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゆかいに学ぼうの Supervisor の章は良くできている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;絵に書くとこんな感じってのがじわじわ来る．&lt;/p&gt;
&lt;h4 id=&#34;erlang-事例紹介-メディアストリーム中継システム&#34;&gt;Erlang 事例紹介: メディアストリーム中継システム&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amutake&#34;&gt;amutake&lt;/a&gt; 氏の発表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://niconare.nicovideo.jp/watch/kn3115&#34;&gt;発表スライドはコチラ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ニコニコのスライド置き場あったんだ(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ニコ生で使われる(予定)のシステムの話(Erlang 製)&lt;/li&gt;
&lt;li&gt;生放送の中継ツリー&lt;/li&gt;
&lt;li&gt;生放送に求められる性質&lt;/li&gt;
&lt;li&gt;ストリーム中継システム : sluicegate の作成
&lt;ul&gt;
&lt;li&gt;いつか OSS になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学術的に研究されたアルゴリズム(独自ではなく)
&lt;ul&gt;
&lt;li&gt;HyParView&lt;/li&gt;
&lt;li&gt;Plumtree&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡単にできるけど無駄にメッセージパッシングすると遅くなる
&lt;ul&gt;
&lt;li&gt;軽い処理をメッセージパッシングするとだめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang クラスタは組まない&lt;/li&gt;
&lt;li&gt;Plumtree の性質があれだった
&lt;ul&gt;
&lt;li&gt;なので自分たちで改造&lt;/li&gt;
&lt;li&gt;根幹なので定理証明(Coq で実装)
&lt;ul&gt;
&lt;li&gt;PPLにて発表した&lt;/li&gt;
&lt;li&gt;生放送ストリーム中継システムのCoqによる形式化と検証&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ぱぶさぶくん(検証ツール)&lt;/li&gt;
&lt;li&gt;水道局(可視化ツール)
&lt;ul&gt;
&lt;li&gt;水路という自作ライブラリを使っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分散アルゴリズムを書きやすい&lt;/li&gt;
&lt;li&gt;調査しやすい
&lt;ul&gt;
&lt;li&gt;reduction の取得のしやすさは Erlang in Anger&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coq のコードから Erlang に変換するものがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか研究の話聞いてるみたいで聞きやすかった(笑)&lt;/p&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT&lt;/h3&gt;
&lt;p&gt;自分も LT したので細かいメモは無い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOC の話
&lt;ul&gt;
&lt;li&gt;朝にアクシデントがあったようで…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;個人で Elixir してきた話(日本一 Elixir 本を書いている)&lt;/li&gt;
&lt;li&gt;Elixir 完全に理解した(ちょっとできる人がいればいい)&lt;/li&gt;
&lt;li&gt;Elixir Programming with Type checking (自分)&lt;/li&gt;
&lt;li&gt;ElixirScript の話&lt;/li&gt;
&lt;li&gt;PubSub Redis
&lt;ul&gt;
&lt;li&gt;phoenix_pubusu_redis_z&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dialyzer のすすめ&lt;/li&gt;
&lt;li&gt;Erlang on ARM サーバー
&lt;ul&gt;
&lt;li&gt;未発表のもの&lt;/li&gt;
&lt;li&gt;秒間40まんリクエストをさばいてる&lt;/li&gt;
&lt;li&gt;ミドルウェアの世界に来い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どうやら MVP は「Elixirを2週間で完全に理解した」新卒の子．&lt;/p&gt;
&lt;h3 id=&#34;keynote&#34;&gt;Keynote&lt;/h3&gt;
&lt;h4 id=&#34;共有からメッセージパッシングへ-erlangotpやelixirと歩んだこの10年&#34;&gt;共有からメッセージパッシングへ: Erlang/OTPやElixirと歩んだこの10年&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/jj1bdx&#34;&gt;力武健次&lt;/a&gt;氏&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/jj1bdx/erlang-and-elixir-fest-2018-keynote?slide=1&#34;&gt;発表資料はコチラ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BIND ??? 脆弱性の多い DNS サーバーについて昔やってた
&lt;ul&gt;
&lt;li&gt;1000行マクロ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Erlang に出会う
&lt;ul&gt;
&lt;li&gt;うるう秒の修正パッチを送る&lt;/li&gt;
&lt;li&gt;SSH のセキュリティの研究&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ICFP’11 の Erlang Workshop の実行委員長&lt;/li&gt;
&lt;li&gt;Erlang in Anger のサイン本もらった&lt;/li&gt;
&lt;li&gt;Elixir のロゴは商標登録されている&lt;/li&gt;
&lt;li&gt;Catalyze Changes
&lt;ul&gt;
&lt;li&gt;Erlang は読みにくい！&lt;/li&gt;
&lt;li&gt;レコードが難しい！&lt;/li&gt;
&lt;li&gt;ドキュメントがない！&lt;/li&gt;
&lt;li&gt;何とかっしようぜ！&lt;/li&gt;
&lt;li&gt;by Dave Tomas&lt;/li&gt;
&lt;li&gt;大変だった…(jose)&lt;/li&gt;
&lt;li&gt;有言実行しててElixir本を7冊も出版している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby コミュニティをちらほら見かけるようになった&lt;/li&gt;
&lt;li&gt;2018/2 大事件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codesync.global/conferences/code-beam-sf-2018/&#34;&gt;Code BEAM 2018&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Open Erlang 20周年&lt;/li&gt;
&lt;li&gt;BEAM コミュニティの融合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;共通してどこがおいしいのか&lt;/li&gt;
&lt;li&gt;Immutability ディープコピー 参照を使わない
&lt;ul&gt;
&lt;li&gt;自分が思う Erlang のすばらしさ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;従来は実態を共有(はやい？)&lt;/li&gt;
&lt;li&gt;「安全よりも効率」&lt;/li&gt;
&lt;li&gt;C++ の愚痴
&lt;ul&gt;
&lt;li&gt;参照なの？値なの？&lt;/li&gt;
&lt;li&gt;const の話が大変&lt;/li&gt;
&lt;li&gt;コンストラクタいつ動く？？&lt;/li&gt;
&lt;li&gt;shared_ptr と unique_ptr (参照カウンタと所有権)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;例外: ETSやプロセス辞書&lt;/li&gt;
&lt;li&gt;「効率より安全」
&lt;ul&gt;
&lt;li&gt;とても遅い&lt;/li&gt;
&lt;li&gt;型検査は無いけど非常に厳格&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Joe (Erlang の作者)「processes messgae and links が重要な部分(gen_server は後から)」
&lt;ul&gt;
&lt;li&gt;他はどうでもいい&lt;/li&gt;
&lt;li&gt;軽量並行プロセスとエラーハンドリング&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;綺麗に落とすのは大変
&lt;ul&gt;
&lt;li&gt;プロセスキューが詰まると終了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;link and monitor
&lt;ul&gt;
&lt;li&gt;昔のSDの自分の記事を読み返した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後
&lt;ul&gt;
&lt;li&gt;基本理念 「ほどほどなのが一番良い」&lt;/li&gt;
&lt;li&gt;手を抜かずに高速化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code BEAM で話題にあがったもの
&lt;ul&gt;
&lt;li&gt;組込み分野えの応用&lt;/li&gt;
&lt;li&gt;大規模クラスタ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/josefs/Gradualizer&#34;&gt;Gradual Type System&lt;/a&gt; (ツールの発表があった)&lt;/li&gt;
&lt;li&gt;Language Server Protcol&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;英語圏で発表しよう
&lt;ul&gt;
&lt;li&gt;Code BEAM 2018 は日本人一人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クライアントの同期の子が，不変性のすばらしさの話を指して「Rust や Elixir を勉強したとに同じことを感じた！」と喜んでいた．&lt;/p&gt;
&lt;h2 id=&#34;自分の話&#34;&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Elchemy の紹介話をしてきました． スライドはこちら&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ocbuQdsbw2EmG5&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;実は前日(6/15)に別の LT で Elchemy の Docker image を作る話をしてきた． その時のスライドはこちら．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/al30fSfPGB5HGN&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;section-4&#34;&gt;&lt;/h2&gt;
&lt;p&gt;実は以下の記事でもっと詳しくまとめてあるので，プレゼンを見る必要は無いんです(笑)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html&#34;&gt;Elchemy 入門 : その１&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html&#34;&gt;Elchemy 入門 : その２&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;来年はもっと型のハナシができるといいなぁ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html</id><title type="text">Elchemy 入門 : その２</title><updated>2018-06-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elchemy 入門 : その２&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-16&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 16, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elchemy.html&#34;&gt;Elchemy&lt;/a&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/Elixir.html&#34;&gt;Elixir&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Elm から Elixir のトランスパイラ，&lt;a href=&#34;https://github.com/wende/elmchemy&#34;&gt;Elchemy&lt;/a&gt; についてイロイロと調べたのでまとめていきます． &lt;a href=&#34;https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html&#34;&gt;前回はコチラ&lt;/a&gt;． 今回は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-2-our-own-rpg-character-module-cedbf7da138d&#34;&gt;Tutorial その２&lt;/a&gt;をやってみた&lt;/li&gt;
&lt;li&gt;Phoenix で ToDo アプリを作る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2本立てです． ちなみに，現在のバージョンは 0.7.4 です．&lt;/p&gt;
&lt;h2 id=&#34;tutorial-そのをやってみた&#34;&gt;Tutorial その２をやってみた&lt;/h2&gt;
&lt;p&gt;Tutorial その２では Elchemy を利用した独自ライブラリを作成する． 以下の手順で行うそうだ．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;エイリアス型を定義&lt;/li&gt;
&lt;li&gt;ユニオン型を定義&lt;/li&gt;
&lt;li&gt;関数としてエイリアスやタグを用いる&lt;/li&gt;
&lt;li&gt;ユニオン型でのパターンマッチ&lt;/li&gt;
&lt;li&gt;関数として演算子を使う・独自の演算子を定義する&lt;/li&gt;
&lt;li&gt;別のモジュールから型やエイリアス型をインポートする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本的に Elm の書き方講座みたいなものなので，最悪っ困ったら Elm を勉強してください(丸投げ)． ちなみに，元記事の全てを細かく追従せず，ざっくりと掻い摘んで書き出している． なので細かくは元記事を読んでね．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;あと，&lt;a href=&#34;https://github.com/wende/elmchemy-article-example&#34;&gt;このコードは全て作者さんが GitHub に挙げている&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;その前に&#34;&gt;その前に&lt;/h3&gt;
&lt;p&gt;テストを書こう，ということでテストを Elixir で書いている． 今回の作成するライブラリはどうやら，ゲームか何かのキャラを制御する物らしい&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# character_test.exs&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;CharacterTest&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ExUnit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Elchemy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Character has name, last name and such&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;      gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;surname &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;      assert gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gender &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; data-line-number=&#34;14&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Has stats&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; data-line-number=&#34;15&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; data-line-number=&#34;17&#34;&gt;    stats &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;va&#34;&gt;:strength&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; data-line-number=&#34;18&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;&amp;lt;-&lt;/span&gt; stats &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; data-line-number=&#34;19&#34;&gt;      assert is_integer(gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;stats[s]), &lt;span class=&#34;st&#34;&gt;&amp;quot;No &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;s&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; stat in &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;inspect gordon&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; data-line-number=&#34;20&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; data-line-number=&#34;22&#34;&gt;    assert &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;stats&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;vitality &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; data-line-number=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; data-line-number=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; data-line-number=&#34;25&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Boosting visality boosts health&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; data-line-number=&#34;26&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; data-line-number=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; data-line-number=&#34;28&#34;&gt;    { hp, packed_gordon_max } &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;health&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; data-line-number=&#34;29&#34;&gt;    { _, weak_gordon_max }    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:vitality&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, gordon)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;health&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; data-line-number=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; data-line-number=&#34;31&#34;&gt;    assert packed_gordon_max &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; weak_gordon_max&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; data-line-number=&#34;32&#34;&gt;    assert hp &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; packed_gordon_max&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; data-line-number=&#34;33&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; data-line-number=&#34;34&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; data-line-number=&#34;35&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Can equip weapon only if intelligence is enough&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; data-line-number=&#34;36&#34;&gt;    gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Freemonad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:male&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; data-line-number=&#34;37&#34;&gt;    weapon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Weapon&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;new(&lt;span class=&#34;st&#34;&gt;&amp;quot;Sci fi blaster thingy&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt; ,&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; data-line-number=&#34;38&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; data-line-number=&#34;39&#34;&gt;    dumb_gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; data-line-number=&#34;40&#34;&gt;    smart_gordon &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;set_stat(&lt;span class=&#34;va&#34;&gt;:intelligence&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-41&#34; data-line-number=&#34;41&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-42&#34; data-line-number=&#34;42&#34;&gt;    assert {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Too dumb&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;equip(weapon, dumb_gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-43&#34; data-line-number=&#34;43&#34;&gt;    assert {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, equipped_gordon} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;equip(weapon, smart_gordon)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-44&#34; data-line-number=&#34;44&#34;&gt;    assert equipped_gordon&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;arm &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; {weapon}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-45&#34; data-line-number=&#34;45&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-46&#34; data-line-number=&#34;46&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;キャラクターを定義&#34;&gt;キャラクターを定義&lt;/h3&gt;
&lt;h4 id=&#34;型エイリアス&#34;&gt;1. 型エイリアス&lt;/h4&gt;
&lt;p&gt;関数型なのでまずはドメインモデルの型を定義する． テストより，&lt;code&gt;name&lt;/code&gt; &lt;code&gt;surname&lt;/code&gt; &lt;code&gt;gender&lt;/code&gt; をフィールドとして持っているのが分かるので次のような型を定義した．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Character exposing (..)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;何故エイリアスなのかというと，構造的サブタイピイングが出来るようにだと思う(たぶん)．&lt;/p&gt;
&lt;h4 id=&#34;ユニオン型&#34;&gt;2. ユニオン型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Gender&lt;/code&gt; 型が無いので定義する． こっちは列挙型みたいなのが欲しいので、ユニオン型を用いる．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type Gender
    = Male
    | Female
    | Other&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;関数としての型エイリアス&#34;&gt;3. 関数としての型エイリアス&lt;/h4&gt;
&lt;p&gt;Elixir っぽい &lt;code&gt;new&lt;/code&gt; 関数を定義してやろう． Elm の場合，エイリアス型を定義すれば同名の値コンストラクタができるので，それをラップすればよい&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;キャラクターにステータスを持たせる&#34;&gt;キャラクターにステータスを持たせる&lt;/h3&gt;
&lt;p&gt;キャラクターにいくつかのステータスを持たせよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    }

type alias Stats =
    { strength : Int
    , intelligence : Int
    , vitality : Int
    }

new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;health&lt;/code&gt; はどうやら HP みたいなものらしい(現在のHPと上限)．&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチ&#34;&gt;4. パターンマッチ&lt;/h3&gt;
&lt;p&gt;ステータスを更新する関数を定義しよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;type Stat
    = Strength
    | Intelligence
    | Vitality

setStat : Stat -&amp;gt; Int -&amp;gt; Character -&amp;gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        Strength -&amp;gt;
            { character | stats = { stats | strength = value } }
        Intelligence -&amp;gt;
            { character | stats = { stats | intelligence = value } }
        Vitality -&amp;gt;
            { character | stats = { stats | vitality = value } }        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;残念ながらこの &lt;code&gt;setStat&lt;/code&gt; は正しくない． テストを見ればわかるが &lt;code&gt;Vitality&lt;/code&gt; を更新した場合は &lt;code&gt;health&lt;/code&gt; も更新する必要がある．&lt;/p&gt;
&lt;h4 id=&#34;演算子&#34;&gt;5. 演算子&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;health&lt;/code&gt; はタプル型だ． タプルの更新をいい感じにするために，カスタム演算子を定義してみよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;(&amp;lt;$) : (a, b) -&amp;gt; (a -&amp;gt; c) -&amp;gt; (c, b)
(&amp;lt;$) tuple f = Tuple.mapFirst f tuple

($&amp;gt;) : (a, b) -&amp;gt; (b -&amp;gt; c) -&amp;gt; (a, c)
($&amp;gt;) tuple f = Tuple.mapSecond f tuple&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを使って &lt;code&gt;setStat&lt;/code&gt; の &lt;code&gt;Vitality&lt;/code&gt; の部分を正しく修正する．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;setStat : Stat -&amp;gt; Int -&amp;gt; Character -&amp;gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        ...
        Vitality -&amp;gt;
            { character
                | stats = { stats | vitality = value }
                , health =
                    character.health
                      &amp;lt;$ (+) ((value - stats.vitality) * 10)
                      $&amp;gt; always (100 + 10 * value)
            }                &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ウェポンを持たせる&#34;&gt;ウェポンを持たせる&lt;/h3&gt;
&lt;h4 id=&#34;インポート&#34;&gt;インポート&lt;/h4&gt;
&lt;p&gt;新しく &lt;code&gt;Weapon.elm&lt;/code&gt; ファイルを作り，新しいモジュール定義する．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Weapon exposing (..)

type alias Weapon =
    { name : String
    , level : Int
    , damage : Int
    }

new : String -&amp;gt; Int -&amp;gt; Int -&amp;gt; Weapon
new name level damage = Weapon name level damage&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このモジュールをインポートして &lt;code&gt;Character&lt;/code&gt; 型を拡張しよう&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;import Weapon exposing (Weapon)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    , arm : Maybe Weapon
    }

new : String -&amp;gt; String -&amp;gt; Gender -&amp;gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)
      Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後に &lt;code&gt;equip&lt;/code&gt; 関数を作って完成． これで全てのテストが通るはずだ．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;equip : Weapon -&amp;gt; Character -&amp;gt; Result String Character
equip weapon character =
    if weapon.level &amp;lt; character.status.intelligence then
        Ok { character | arm = Just weapon }
    else
        Err &amp;quot;Too dumb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「頭悪すぎ」ってひどい(笑)&lt;/p&gt;
&lt;h2 id=&#34;phoenix-で-todo-アプリを作る&#34;&gt;Phoenix で ToDo アプリを作る&lt;/h2&gt;
&lt;p&gt;Elchemy が実際にどの程度有用かを感じるために，Elchemy + Elm + Phoenix で超簡易的な Todo アプリを作ってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app&#34;&gt;MATSUBARA Nobutada / elchemy_todo_app · GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過去に &lt;a href=&#34;https://github.com/matsubara0507/patissier-test&#34;&gt;Elm + Phoenix で社内ツールを作ったり&lt;/a&gt;，&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html&#34;&gt;Elm + Haskell で Todo アプリを書いてみたり&lt;/a&gt;したので，その辺りからコードや構成はパクッて来てます． GitLab に置いてるのは，モノは試しってやつ(笑)．&lt;/p&gt;
&lt;h3 id=&#34;phoenix-をインストール&#34;&gt;Phoenix をインストール&lt;/h3&gt;
&lt;p&gt;Elchemy (および Elixir・Elm・npm) はインストールされているとする． &lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html&#34;&gt;Phoenix のサイト&lt;/a&gt;にある通りにやればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix archive.install https://github.com/phoenixframework/archives/raw/master/phx_new.ez&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;project-を作成&#34;&gt;Project を作成&lt;/h3&gt;
&lt;p&gt;こんな時のために &lt;code&gt;elchemy init&lt;/code&gt; というコマンドがある(？)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix phx.new elchemy_todo_app --no-ecto
$ cd elchemy_todo_app
$ elchemy init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;elchemy new&lt;/code&gt; との違いは，&lt;code&gt;mix.exs&lt;/code&gt; の Elixir のバージョンが古いのと &lt;code&gt;.formatter.exs&lt;/code&gt; ぐらいかな？ 今回は DB をわざわざ使うのがめんどくさいので，ストレージっぽい GenServer を定義する(なので &lt;code&gt;--no-ecto&lt;/code&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;crud-を作る&#34;&gt;CRUD を作る&lt;/h3&gt;
&lt;p&gt;Phoenix に CRUD を追加するには，まず&lt;code&gt;router.ex&lt;/code&gt; にルーティングを足す.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Router&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:router&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;  pipeline &lt;span class=&#34;va&#34;&gt;:api&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;    plug(&lt;span class=&#34;va&#34;&gt;:accepts&lt;/span&gt;, [&lt;span class=&#34;st&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;  scope &lt;span class=&#34;st&#34;&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;    pipe_through(&lt;span class=&#34;va&#34;&gt;:api&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; data-line-number=&#34;12&#34;&gt;    resources(&lt;span class=&#34;st&#34;&gt;&amp;quot;/todos&amp;quot;&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;TodoController&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;only:&lt;/span&gt; [&lt;span class=&#34;va&#34;&gt;:index&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:create&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:update&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:delete&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にコントロラーを定義し，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;TodoController&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Models&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:controller&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; index(conn, _params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; create(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; update(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; delete(conn, %{&lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; id}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; })&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;...&lt;/code&gt; の部分は後で埋める) そして View を定義する。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;TodoView&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTodoAppWeb&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:view&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; render(&lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; todos}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: todos&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さてここから　Elchemy だ。 モデルを Elchemy で定義する. というかモデル以外はマクロ色が強過ぎてうまくいかなかった.&lt;/p&gt;
&lt;h3 id=&#34;elchemy-でモデルを&#34;&gt;Elchemy でモデルを&lt;/h3&gt;
&lt;p&gt;まずは型を定義.&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Data.Todo exposing (..)
import Dict

type alias Todo =
    { id : String
    , title : String
    , done : Bool
    }

type alias Todos =
    Dict.Dict String Todo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここはフロント共有したいので別途切り出しておく. DBをサボるために GenServer なモデルを定義する.&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module Models.Todo exposing (..)

import Data.Todo exposing (Todo, Todos)
import Dict
import Elchemy exposing (..)

{- ex
   use GenServer

   def start_link(init \\ %{ todos: %{}, cnt: 0 }), do: GenServer.start_link(__MODULE__, init, name: :todos)

   def init(state), do: {:ok, state}

   def handle_call(:get, _client, state), do: {:reply, state, state}

   def handle_cast({:set, new_state}, _state), do: {:noreply, new_state}

   def gen_(params) do
     %{
       id: params[&amp;quot;id&amp;quot;],
       title: params[&amp;quot;title&amp;quot;],
       done: params[&amp;quot;done&amp;quot;]
     }
   end
-}

type alias State =
    { todos : Todos
    , cnt : Int
    }

type Name
    = Todos

type Action
    = Get
    | Set State

gen : params -&amp;gt; Todo
gen = ffi &amp;quot;Models.Todo&amp;quot; &amp;quot;gen_&amp;quot;

getState : State
getState = call_ Todos Get

setState : State -&amp;gt; State
setState state = cast_ Todos (Set state) |&amp;gt; always state

call_ : Name -&amp;gt; Action -&amp;gt; a
call_ = ffi &amp;quot;GenServer&amp;quot; &amp;quot;call&amp;quot;

cast_ : Name -&amp;gt; Action -&amp;gt; a
cast_ = ffi &amp;quot;GenServer&amp;quot; &amp;quot;cast&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Todos&lt;/code&gt; と削除された &lt;code&gt;Todo&lt;/code&gt; も含めた総数を表した &lt;code&gt;Int&lt;/code&gt; を持った &lt;code&gt;State&lt;/code&gt; 型を状態として GenServer に保持して欲しい． 出力した Elixir コードにだけモジュールをインポートさせたり，うまく型付けできない関数を Elixir コードに張り付けるには，コメントアウト &lt;code&gt;{- ex ... -}&lt;/code&gt; 使う． この中に書いた Elixir コードはそのまま出力先に貼り付けられる(濫用厳禁！)．&lt;/p&gt;
&lt;p&gt;Elixir モジュールの関数を呼び出すには &lt;code&gt;Elchemy&lt;/code&gt; モジュールにある &lt;code&gt;ffi&lt;/code&gt; 関数を使う． ただし，&lt;code&gt;ffi&lt;/code&gt; 関数をファーストクラスには扱えない． 次のようなエラーが出る．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ffi inside function body is deprecated since Elchemy 0.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; 型や &lt;code&gt;Action&lt;/code&gt; 型は Elchemy が代数的データ型をアトムとタプルに変換することと，GenServer の使い方を知っていれば意図するところが分かるだろう． 逆にそれらを知っていなければ読みとれないと思う…&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;コントローラーから呼ばれるインターフェースは &lt;code&gt;getState&lt;/code&gt; と &lt;code&gt;setState&lt;/code&gt; を用いることで簡単に書けた．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;gets : List Todo
gets = Dict.values (.todos getState)

add : Todo -&amp;gt; List Todo
add todo =
    let
        { todos, cnt } = getState
        newId   = toString cnt
        newTodo = { todo | id = newId }
        state   = { todos = Dict.insert newId newTodo todos, cnt = cnt + 1 }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values

update : Todo -&amp;gt; List Todo
update todo =
    let
        { todos, cnt } = getState
        state = { todos = Dict.update todo.id (Maybe.map &amp;lt;| always todo) todos, cnt = cnt }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values

remove : String -&amp;gt; List Todo
remove todoId =
    let
        { todos, cnt } =
            getState
        state =
            { todos = Dict.remove todoId todos, cnt = cnt }
    in
    setState state
        |&amp;gt; .todos
        |&amp;gt; Dict.values&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コントローラーの &lt;code&gt;...&lt;/code&gt; を書き換えてやれば完成だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; index(conn, _params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gets()})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; create(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;add(&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gen(params))})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; update(conn, params), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;update(&lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;gen(params))})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; delete(conn, %{&lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; id}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: render(conn, &lt;span class=&#34;st&#34;&gt;&amp;quot;todos.json&amp;quot;&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;todos:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Todo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;remove(id)})&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに出力された Elixir コードは&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/data/todo.elchemy.ex&#34;&gt;ココ&lt;/a&gt;と&lt;a href=&#34;https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/models/todo.elchemy.ex&#34;&gt;ココ&lt;/a&gt;です． 興味がある人は見てください．&lt;/p&gt;
&lt;h3 id=&#34;elm-brunch&#34;&gt;Elm Brunch&lt;/h3&gt;
&lt;p&gt;Brunch 設定が難しかったので，本質的には Elchemy と関係ないけど残しておく．&lt;/p&gt;
&lt;p&gt;Phoenix 1.3 系ではトップレベルに &lt;code&gt;assets&lt;/code&gt; というディレクトリがあり，HTML/JS/CSS/画像 のような静的ファイルはここに置いておく． Brunch を使って複数の JS や CSS を合わせることが出来る． &lt;a href=&#34;https://github.com/madsflensted/elm-brunch&#34;&gt;elm-brunch&lt;/a&gt; を使うことで Elm を JS にコンパイルしてくれる．&lt;/p&gt;
&lt;p&gt;branch-config に次のような設定を書き加えてあげる． Elm のフロントコードは &lt;code&gt;lib/web/elm&lt;/code&gt; に置いてある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;va&#34;&gt;exports&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; data-line-number=&#34;2&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;watched&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;css&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;vendor&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../lib/web/elm&amp;quot;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../priv/static&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;elmBrunch&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;elmFolder&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;../lib/web/elm&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-11&#34; data-line-number=&#34;11&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;mainModules&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;Main.elm&amp;quot;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-12&#34; data-line-number=&#34;12&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;outputFolder&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;vendor&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-14&#34; data-line-number=&#34;14&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-16&#34; data-line-number=&#34;16&#34;&gt;  ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;フロント部分&#34;&gt;フロント部分&lt;/h3&gt;
&lt;p&gt;ほんの少しだがコードを再利用できる． API クライアントは以下のようになる．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;module TodoAPI exposing (..)

import Data.Todo exposing (Todo)
import Http

getTodos : Http.Request (List Todo)
getTodos =
    Http.request
        { method =
            &amp;quot;GET&amp;quot;
        , headers =
            []
        , url =
            String.join &amp;quot;/&amp;quot;
                [ baseUrl
                , &amp;quot;todos&amp;quot;
                ]
        , body =
            Http.emptyBody
        , expect =
            Http.expectJson (list decodeTodo)
        , timeout =
            Nothing
        , withCredentials =
            False
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ホントはこの当たりも Elchemy を使って生成できるとよいのだが… もしかして &lt;a href=&#34;https://github.com/saschatimme/elm-phoenix&#34;&gt;elm-phoenix&lt;/a&gt; なるものを使えばよかったのかな？ また，The Elm Architecture 部分は長いので割愛．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ホントは assets 回りが他にもたくさんあるが,本質的な部分はこれで完成． あとはモロモロインストールして &lt;code&gt;mix phx.server&lt;/code&gt; とすれば動作するはずだ．&lt;/p&gt;
&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;うれしみ&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;静的検査は神&lt;/li&gt;
&lt;li&gt;フロントとコードを共有できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;つらみ&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Phoenix のいくつかは型付けできない
&lt;ul&gt;
&lt;li&gt;ルーティングの引数&lt;/li&gt;
&lt;li&gt;へテロリストのようなモノ&lt;/li&gt;
&lt;li&gt;結局ここで良く分からんエラーに…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンパイルが遅い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;今度は処理系の中身でも追ってみようかな．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html</id><title type="text">Elchemy 入門 : その１</title><updated>2018-06-15T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elchemy 入門 : その１&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-06-15&#34; itemprop=&#34;datePublished&#34;&gt;
        Jun 15, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elchemy.html&#34;&gt;Elchemy&lt;/a&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/Elixir.html&#34;&gt;Elixir&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Elm から Elixir のトランスパイラ，&lt;a href=&#34;https://github.com/wende/elmchemy&#34;&gt;Elchemy&lt;/a&gt; についてイロイロと調べたのでまとめていきます． 今回は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wende/elchemy/blob/9184d758dc1d5d5d3209302f9742c11fe01aa92c/README.md&#34;&gt;README&lt;/a&gt; の意訳&lt;/li&gt;
&lt;li&gt;Dockerイメージ作成&lt;/li&gt;
&lt;li&gt;Tutorial その１をやってみた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の3本立てです． ちなみに，現在のバージョンは 0.7.4 です．&lt;/p&gt;
&lt;h2 id=&#34;readme-意訳&#34;&gt;README 意訳&lt;/h2&gt;
&lt;p&gt;Elchemy は，Elixir の強力なエコシステムと Elm の型安全によって，より簡潔に高速に高品質で型安全なコードを記述するために作られた処理系です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elchemy-live.herokuapp.com&#34;&gt;Elchemy のオンライン環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wende.gitbooks.io/elchemy/content/&#34;&gt;Elchemy の公式ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-1-introduction-8968b76d721d&#34;&gt;Elchemy のチュートリアル&lt;/a&gt; (今のところ Part1 と Part2 がある)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なにか質問がある場合は &lt;a href=&#34;https://github.com/wende/elchemy/labels/Q%26A&#34;&gt;&lt;code&gt;Q&amp;amp;A&lt;/code&gt; ラベルを付けて Issue を書いて&lt;/a&gt;，だそうだ．&lt;/p&gt;
&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;型推論:&lt;/strong&gt; 強力な型推論によって型注釈を付けることはめったにない． コンパイラによって全て検査される．&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;簡単で型安全な呼び出し:&lt;/strong&gt; 余計なボイラープレートなしに Elixir/Erlang のプログラムを呼び出すことが出来る． Elixir の typespec に基づいて可能な限り徹底的に型安全の観点から全ての呼び出しを検査する．&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elm と Elixir のいいとこどり:&lt;/strong&gt; Elchemy は Elm の型安全性と強力な型推論，素晴らしい表現力を継承し，Elixir の Doc-test とツール群，そして BEAM プラットフォームを継承している．&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ほとんどないランタイムエラー:&lt;/strong&gt; Elchemy の型システムは &lt;strong&gt;ほぼ全てのランタイムエラーを排除する&lt;/strong&gt; ． エッジケースが少なくなることで，Elchemy のコードそのものは安全になる． ランタイムエラーが発生した場合，おそらく Elixir のところが起こしているのだろう．&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;美しくて可読性の高い出力:&lt;/strong&gt; 生成されたコードは慣習的で効率的で元のコードが無くとも読みやすく分析可能である．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;h4 id=&#34;どういう人にお勧めか&#34;&gt;どういう人にお勧めか？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;型が好きな人&lt;/li&gt;
&lt;li&gt;実行時エラーよりコンパイルエラーの方が好みな人&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defp add(a, b), do: b + c&lt;/code&gt; より &lt;code&gt;add b c = b + c&lt;/code&gt; な書き方の方が好みな人&lt;/li&gt;
&lt;li&gt;カリー化が好きな人&lt;/li&gt;
&lt;li&gt;さっさと失敗させるより全て失敗しない方が賢いと思う人&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;どういう人にお勧めじゃないか&#34;&gt;どういう人にお勧めじゃないか？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;もしあなたのプロジェクトが徹底的にテストされたライブラリに依存しておりかつ，あなたが 0 から始まるバージョンを嫌う場合&lt;/li&gt;
&lt;li&gt;モナドを学ぶことで口ひげが伸び視力が弱くなることを恐れる場合&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;既にある-elixir-プロジェクトを置き換えるのは可能か&#34;&gt;既にある Elixir プロジェクトを置き換えるのは可能か？&lt;/h4&gt;
&lt;p&gt;可能です． しかし，ナイスでダンディーなコンパイルツールは開発中です．&lt;/p&gt;
&lt;h4 id=&#34;上司に-elchemy-に現を抜かしていることがばれるだろうか&#34;&gt;上司に Elchemy に現を抜かしていることがばれるだろうか？&lt;/h4&gt;
&lt;p&gt;Elchemy の出力はコードの可読性を第一級市民として扱っている． コードは適切にインデントされ，コメントは省略されず，できるだけ最適化されている(例えば，case 節は関数のオーバーロードになる)．&lt;/p&gt;
&lt;h4 id=&#34;elchemy-1.0.0-はまだ&#34;&gt;Elchemy 1.0.0 はまだ？&lt;/h4&gt;
&lt;p&gt;終わったらね．&lt;/p&gt;
&lt;h4 id=&#34;コントリビュートしてもいい&#34;&gt;コントリビュートしてもいい？&lt;/h4&gt;
&lt;p&gt;絶対にしてください．&lt;/p&gt;
&lt;h4 id=&#34;型はどのように表される&#34;&gt;型はどのように表される？&lt;/h4&gt;
&lt;p&gt;Elchemy の全ての値コンストラクタはスネークケースのアトムとして表現され，コンストラクタの引数はタプルで表わされる． つまり，Elchemy で &lt;code&gt;MyType 42 &amp;quot;Forty two&amp;quot; Error&lt;/code&gt; という値は &lt;code&gt;{:my_type, 42, &amp;quot;Forty two&amp;quot;, :error}&lt;/code&gt; という Elixir の値となる．&lt;/p&gt;
&lt;p&gt;(Type constructor と書いてあるが正しくは Data constructor あるいは value constructor のはずで，Type application も間違いだと思われる)&lt;/p&gt;
&lt;h4 id=&#34;elm-の既存のライブラリを-elchemy-で使えるの&#34;&gt;Elm の既存のライブラリを Elchemy で使えるの？&lt;/h4&gt;
&lt;p&gt;Native モジュールや Port，Elm ランタイムを使わない限りは，それらを安全にインポートして使うことが出来る．&lt;/p&gt;
&lt;h4 id=&#34;elixir-の既存のライブラリを-elchemy-で使えるの&#34;&gt;Elixir の既存のライブラリを Elchemy で使えるの？&lt;/h4&gt;
&lt;p&gt;使える． 任意のモジュールの任意の関数を FFI 呼び出しすることが出来る． Elixir モジュール，Erlang モジュール，あるいはマクロであってしても自身の Elchemy コードに含むことが出来る． FFI 呼び出しは Elchemy 内で特別扱いされる． そして，&lt;code&gt;@spec&lt;/code&gt; に基づいた型の解析を行うテストが生成されるため，Elixir コードの型安全性を損なうことは無い． 可読性を向上させるためにも FFI 呼び出しは可能な限り避け，常にドキュメント化と &lt;code&gt;doctest&lt;/code&gt; をすることをお勧めする．&lt;/p&gt;
&lt;h4 id=&#34;テストのような-elixir-のマクロは使えるの&#34;&gt;テストのような Elixir のマクロは使えるの？&lt;/h4&gt;
&lt;p&gt;残念ながら，&lt;code&gt;do...end&lt;/code&gt; ブロックのような任意のマクロを書くことはまだできない． 替わりとして，任意の関数に対して次のような Elixir のインラインコードを書くことが出来る．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;{- ex
  code_here
-}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし，それは最後の手段であり，乱用すべきではない．&lt;/p&gt;
&lt;h4 id=&#34;elchemy-の-.elm-ファイルをコンパイルするのに-elm-処理系をインストールする必要がある&#34;&gt;Elchemy の &lt;code&gt;.elm&lt;/code&gt; ファイルをコンパイルするのに Elm 処理系をインストールする必要がある？&lt;/h4&gt;
&lt;p&gt;(なんとなく解答的に Elixir 処理系だけで完結できないの？という意味っぽい)&lt;/p&gt;
&lt;p&gt;あなたは Elm のようなコードを書いて Elixir のコードを生成したいのに， Elixir コードの生成を Elixir コードを書いて作りたいですか？&lt;/p&gt;
&lt;h4 id=&#34;elchemy-プロジェクト&#34;&gt;Elchemy プロジェクト&lt;/h4&gt;
&lt;p&gt;作者はこの Elchemy プロジェクトそのものを可能な限り Elm で構築したいらしい． &lt;a href=&#34;https://github.com/wende/elchemy#maturity-of-the-project&#34;&gt;README にはその達成度が書かれている&lt;/a&gt;． 処理系そのものは，ほとんど Elm になっているようだ(結果として世にも珍しい Elm で書かれたコンパイラが出来ている)． エフェクトや ErlangVM 回りが厳しいらしい．&lt;/p&gt;
&lt;h2 id=&#34;dockerイメージ作成&#34;&gt;Dockerイメージ作成&lt;/h2&gt;
&lt;p&gt;ココからが本題．&lt;/p&gt;
&lt;p&gt;新しい言語を軽く試すのに最適なのはやはり Docker だ． Elchemy の Docker イメージは見当たらなかったので作った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/matsubara0507/elchemy&#34;&gt;matsubara0507/elchemy - Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;できるまで&#34;&gt;できるまで&lt;/h3&gt;
&lt;p&gt;本家の README を読むとわかるように Elchemy でビルドするのに必要なモノは以下の4つ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node (npm)&lt;/li&gt;
&lt;li&gt;Elixir (ErlangVM)&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;li&gt;elm-github-install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのうち，もっともめんどくさいのは Elixir もとい ErlangVM だと思う． なので base イメージを Elixir にし，ひとつずつ入れていった．&lt;/p&gt;
&lt;p&gt;base イメージにした &lt;a href=&#34;https://hub.docker.com/_/elixir/&#34;&gt;Elixir の Docker イメージは公式のモノ&lt;/a&gt;を使う． &lt;a href=&#34;https://github.com/erlang/docker-erlang-otp/blob/99ab1e150c3708ce81bc08073cf5793ef67c6a1c/20/Dockerfile#L1&#34;&gt;OSは Debian9 だ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;Debian への Node のインストールには以下の記事を参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://atomiyama.com/linux/page/debian-9-2-node-npm/&#34;&gt;debian9.2にNode.jsとnpmをインストールする｜atominux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sL https://deb.nodesource.com/setup_${NODE_VERSION} | bash - \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;  &amp;amp;&amp;amp; apt-get update &amp;amp;&amp;amp; apt-get install -y nodejs \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;  &amp;amp;&amp;amp; apt-get clean \&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;  &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;後は簡単で Elm，elm-github-install，Elchemy は npm からインストールできる． ただし，Elm と elm-github-install には &lt;code&gt;--unsafe-perm=true --allow-root&lt;/code&gt; という&lt;a href=&#34;https://github.com/gdotdesign/elm-github-install/issues/21#issuecomment-332827661&#34;&gt;オプションを付けないといけない&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; npm i -g elm@${ELM_VERSION} --unsafe-perm=true --allow-root&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; npm i -g elm-github-install@${ELM_GITHUB_INSTALL_VERSION} --unsafe-perm=true --allow-root&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; npm i -g elchemy@${ELCHEMY_VERSION}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;auto-build&#34;&gt;Auto Build&lt;/h3&gt;
&lt;p&gt;Elchemy のリリースを眺めてると想像より開発スピードが速かったので，Elchemy の更新を観測して自動ビルドしてくれる仕組みを作ることにした． シェル芸を駆使すればなんとかなりそうだったが，サクッと Haskell 芸をかまして CLI を作った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/dockwright&#34;&gt;matsubara0507/dockwright - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(船大工が &lt;code&gt;shipwright&lt;/code&gt; なので Dockerfile 大工ってことで &lt;code&gt;dockwright&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;以下のような設定を書いておくと &lt;code&gt;dockwright&lt;/code&gt; ってコマンドで GitHub の &lt;code&gt;release&lt;/code&gt; API を叩いてリリースタグを取ってきてくれる． それを Docker 内の環境変数としてテンプレートに書き込む．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;env:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;elchemy_version:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;repo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; wende/elchemy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;hook:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; release&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは git diff で更新をみて更新があればコミットする(コミットさえすれば Docker Hub が自動ビルドしてくれる)． 定期実行は例の如く TravisCI で回す．&lt;/p&gt;
&lt;h2 id=&#34;tutorial-そのをやってみた&#34;&gt;Tutorial その１をやってみた&lt;/h2&gt;
&lt;p&gt;以下の記事をやってみる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-1-introduction-8968b76d721d&#34;&gt;Elmchemy — Write type-safe Elixir code with Elm’s syntax — part 1 — Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずは &lt;code&gt;article_example_elchemy&lt;/code&gt; というプロジェクトを作る． 記事内では &lt;code&gt;mix new&lt;/code&gt; をして &lt;code&gt;elchemy init&lt;/code&gt; をしろと書いてあるが，最新の Elchemy では &lt;code&gt;elchemy new&lt;/code&gt; をすることで一気にやってくれる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elchemy new article_example_elchemy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elchemy をコンパイルするためには，&lt;code&gt;mix.exs&lt;/code&gt; を次のように&lt;a href=&#34;https://wende.gitbooks.io/elchemy/content/INSTALLATION.html&#34;&gt;書き換える必要がある&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;MyProject&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Mixfile&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Mix&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Project&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; project &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;    [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;va&#34;&gt;app:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;:my_project&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;va&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;va&#34;&gt;elixir:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;~&amp;gt; 1.5&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;      &lt;span class=&#34;va&#34;&gt;start_permanent:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Mix&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;env &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;:prod&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;va&#34;&gt;deps:&lt;/span&gt; deps()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;    ] &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;eval_file(&lt;span class=&#34;st&#34;&gt;&amp;quot;elchemy.exs&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;init &lt;span class=&#34;co&#34;&gt;# ココ!&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;|&amp;gt; Code.eval_file(&amp;quot;elchemy.exs&amp;quot;).ini&lt;/code&gt; の部分を書き加えている．&lt;/p&gt;
&lt;h3 id=&#34;ディレクトリ構成&#34;&gt;ディレクトリ構成&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;elchemy new&lt;/code&gt; した結果はこんな感じ(バージョンによっては違うかもしれない)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;projrct_name
  |- .elchemy.exs
  |- .formatter.exs
  |- .gitignore
  |- README.md
  |- config
  |   \- config.exs
  |- elm
  |   \- Hello.elm
  |- elm-package.json
  |- lib
  |   \- project_name.ex
  |- mix.exs
  \- test
      |- elchemy_test.exs
      |- project_name_test.exs
      \- test_helper.exs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.elchemy.exs&lt;/code&gt; は &lt;code&gt;mix&lt;/code&gt; コマンドを Elchemy で上書きするための &lt;code&gt;mix&lt;/code&gt; 設定ファイルで，残りは Elixir と Elm のプロジェクトファイルが混ざっている． ちなみに &lt;code&gt;.formatter.exs&lt;/code&gt; は Elixir 1.6 で追加された Elixir のフォーマッターの設定ファイルだ．&lt;/p&gt;
&lt;h3 id=&#34;関数を定義してみる&#34;&gt;関数を定義してみる&lt;/h3&gt;
&lt;p&gt;試しに，総和を求める &lt;code&gt;sum&lt;/code&gt; 関数を書いてみる． &lt;code&gt;elm/Hello.elm&lt;/code&gt; に書き加えるとして，まずはユニットテストを &lt;code&gt;test\elchemy_test.exs&lt;/code&gt; に Elixir の文脈で書き加えてみる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ElchemyTest&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ExUnit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Elchemy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;  doctest &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;    assert &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;hello() &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;  test &lt;span class=&#34;st&#34;&gt;&amp;quot;Sum of lists&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;     assert &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;sum([]) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;     assert &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;sum([&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;     assert &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;sum([&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-2&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-3&lt;/span&gt;]) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に &lt;code&gt;elm/Hello.elm&lt;/code&gt; に以下の関数を書き加える．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;sum : List a -&amp;gt; Int
sum list =
    case list of
        first :: rest -&amp;gt;
            first + sum rest

        [] -&amp;gt;
            0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とりあえずビルドしてみる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix test
warning: redefining module ElchemyInit (current version defined in memory)
  elchemy.exs:1

==&amp;gt; elchemy
Compiling 24 files (.ex)
warning: unused alias XMaybe
  lib/Elchemy/XRegex.elchemy.ex:28

warning: unused import Elchemy.XBasics
  lib/Elchemy/XChar.elchemy.ex:25

warning: unused import Elchemy.XBasics
  lib/Elchemy/XBitwise.elchemy.ex:6

warning: unused import Elchemy.Macros
  lib/Elchemy/Plugins/Ex_unit.elchemy.ex:7

warning: unused import Elchemy.Macros
  lib/Elchemy/Tests/Ex_unit_test.elchemy.ex:7

Generated elchemy app
==&amp;gt; article_example_elchemy
/usr/bin/elchemy
-- Copying Elixir native files --
-- Compiling Elm files --
----------
Type Checking elm/Hello.elm
-- TYPE MISMATCH ------------------------------------------------- elm/Hello.elm

The left argument of (+) is causing a type mismatch.

21|             first + sum rest
                ^^^^^
(+) is expecting the left argument to be a:

    number

But the left argument is:

    a

Hint: Your type annotation uses type variable `a` which means any type of value
can flow through. Your code is saying it CANNOT be anything though! Maybe change
your type annotation to be more specific? Maybe the code has a problem? More at:
&amp;lt;https://github.com/elm-lang/elm-compiler/blob/0.18.0/hints/type-annotations.md&amp;gt;

Detected errors in 1 module.
Type Check failed
** (Mix) Elchemy failed the compilation with an error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いろいろ出ているが重要なのは &lt;code&gt;The left argument of (+) is causing a type mismatch.&lt;/code&gt; の部分． 型検査した結果，型が合わなかったのだ． 念のため型検査器の言い分を補足しておくと，&lt;code&gt;sum&lt;/code&gt; 関数の引数として &lt;code&gt;List a&lt;/code&gt; 型の値 &lt;code&gt;list&lt;/code&gt; の要素である &lt;code&gt;first&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; 型と推論されるが，加算 &lt;code&gt;(+)&lt;/code&gt; は &lt;code&gt;number&lt;/code&gt; 型じゃないといけない，ということだ(&lt;code&gt;number&lt;/code&gt; 型は加算や乗算が実装されている多相型)．&lt;/p&gt;
&lt;p&gt;言われた通りに変えてみよう．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;sum : List number -&amp;gt; Int
sum list = ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ビルドする．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix test
...
Type Checking elm/Hello.elm
-- TYPE MISMATCH ------------------------------------------------- elm/Hello.elm

The right side of (+) is causing a type mismatch.

21|             first + sum rest
                        ^^^^^^^^
(+) is expecting the right side to be a:

    number

But the right side is:

    Int

Hint: Your type annotation uses type variable `number` which means any type of
value can flow through. Your code is saying it CANNOT be anything though! Maybe
change your type annotation to be more specific? Maybe the code has a problem?
More at:
&amp;lt;https://github.com/elm-lang/elm-compiler/blob/0.18.0/hints/type-annotations.md&amp;gt;

Hint: With operators like (+) I always check the left side first. If it seems
fine, I assume it is correct and check the right side. So the problem may be in
how the left and right arguments interact.

Detected errors in 1 module.
Type Check failed
** (Mix) Elchemy failed the compilation with an error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;(+) is expecting the right side to be a&lt;/code&gt; というエラーメッセージに変わった． これは &lt;code&gt;sum&lt;/code&gt; 関数の返り値の型が &lt;code&gt;Int&lt;/code&gt; なので &lt;code&gt;sum rest&lt;/code&gt; の型は &lt;code&gt;Int&lt;/code&gt; と推論されたが，&lt;code&gt;first&lt;/code&gt; の型が &lt;code&gt;number&lt;/code&gt; なので &lt;code&gt;(+)&lt;/code&gt; 演算子の左右の型が合わない，ということだ． なので， &lt;code&gt;sum : List Int -&amp;gt; Int&lt;/code&gt; とすると無事ビルドが通る．&lt;/p&gt;
&lt;h3 id=&#34;変換された-elixir-コード&#34;&gt;変換された Elixir コード&lt;/h3&gt;
&lt;p&gt;ちなみに，次のような Elixir コードに変換されている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Elchemy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;@spec&lt;/span&gt; sum(list(integer)) :: integer&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;  curry sum&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; sum(list) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; list &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; data-line-number=&#34;8&#34;&gt;      [first &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; rest] &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; data-line-number=&#34;9&#34;&gt;        (first &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; sum(rest))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; data-line-number=&#34;10&#34;&gt;      [] &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-11&#34; data-line-number=&#34;11&#34;&gt;        &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;doctest&#34;&gt;doctest&lt;/h3&gt;
&lt;p&gt;また，次のように書くことで doctest も変換してくれる．&lt;/p&gt;
&lt;pre class=&#34;elm&#34;&gt;&lt;code&gt;{-| Returns a sum of every integer int the function

    sum [1,2,3] == 6
    sum [10] == 10
    sum [] == 0

-}
sum : List Int -&amp;gt; Int
sum list = ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変換先はこうだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;@doc &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;co&#34;&gt;  Returns a sum of every integer int the function&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; import Hello&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; sum([1, 2, 3])&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;co&#34;&gt;      6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; import Hello&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; sum([10])&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;      10&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; import Hello&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;      iex&amp;gt; sum([])&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;co&#34;&gt;      0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;co&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; data-line-number=&#34;18&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;@spec&lt;/span&gt; sum(list(integer)) :: integer&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; data-line-number=&#34;19&#34;&gt;  curry sum&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; data-line-number=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; sum(list) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-21&#34; data-line-number=&#34;21&#34;&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次はアプリケーションを作りたい．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://qiita.com/ta-ka/items/628ee2aa5a73c6e5caa2</id><title type="text">具体例で学ぶHaskell</title><updated>2018-06-12T07:38:15+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ta-ka/items/628ee2aa5a73c6e5caa2"/></entry><entry><id>https://qiita.com/moriiforfun/items/f2598a1d7b242d2ef56b</id><title type="text">AtCoder Beginner&#39;s Contest 099 の振り返りノート</title><updated>2018-06-11T23:18:53+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/moriiforfun/items/f2598a1d7b242d2ef56b"/></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/windows-gotchas-en.html</id><title type="text">Errors and the workarounds frequently encountered when dealing with Haskell on Windows</title><updated>2018-05-25T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/windows-gotchas-en.html"/><summary type="html">
&lt;article lang=&#34;en&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;This is the English version of &lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法&lt;/a&gt;.&lt;br /&gt;
The original article is the 4th article of &lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell4&#34;&gt;Haskell (その4) Advent Calendar 2017 (Japanese)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I’m going to tell is summarized as &lt;a href=&#34;https://twitter.com/igrep/status/938056578934042626&#34;&gt;just one tweet (originally in Japanese)&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I’ve learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chcp65001 if ‘Invalid character’&lt;/li&gt;
&lt;li&gt;rebuild if ‘Permission Denied’&lt;/li&gt;
&lt;li&gt;Don’t mix Japanese characters in file paths.&lt;/li&gt;
&lt;li&gt;Some libraries in C are available, and others are not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps they’re helpful in other languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me add more details.&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;chcp 65001 if “Invalid character”&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;Workaround&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;If you encounter as a user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;Rebuild if “Permission Denied”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;Try hard to build libraries in C…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#chcp-65001-if-invalid-character&#34; title=&#34;chcp-65001-if-invalid-character&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;chcp 65001 if “Invalid character”&lt;/h1&gt;
&lt;p&gt;You would have encountered this frequently, especially if you don’t know how to avoid/fix this.&lt;br /&gt;
Oh, it’s caused again by building with hakyll!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; stack exec -- site rebuild
...
  [ERROR] preprocessed-site\posts/2017/01-first.md: hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The object called &lt;a href=&#34;https://www.stackage.org/haddock/lts-10.0/base-4.10.1.0/System-IO.html#t:Handle&#34;&gt;&lt;code&gt;Handle&lt;/code&gt;&lt;/a&gt;, used by GHC to read and write a file, knows its character encoding.&lt;/p&gt;
&lt;p&gt;This resembles Ruby’s &lt;a href=&#34;https://ruby-doc.org/core-2.5.0/IO.html&#34;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; and Perl’s file handler.&lt;br /&gt;
Both of them represent the “gateway” of data, and assigning character encoding to them enables us to handle the only, consistently encoded strings by converting the incoming data.&lt;br /&gt;
In Haskell’s type &lt;code&gt;Char&lt;/code&gt;, the only default encoding is UTF-32 (is this the right name in this case?).&lt;/p&gt;
&lt;p&gt;The character encoding assigned to a &lt;code&gt;Handle&lt;/code&gt; by default depends on the locale settings of the OS: in Japanese Windows, Windows-31J (a.k.a CP932).&lt;br /&gt;
But it’s now soon becoming 2018 (when writing the original article). Most files you create should be in UTF-8 unless you write programs in notepad.exe&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
It doesn’t work to read a UTF-8 file as a Windows-31J file because they’re very different encoding system.&lt;br /&gt;
The &lt;code&gt;invalid byte sequence&lt;/code&gt; error, shown at the head of this section, is caused by that inconsistency.&lt;br /&gt;
Remember this kind of errors are often caused when reading or writing stdout/stdin, as well as plain files.&lt;/p&gt;
&lt;h2 id=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#workaround&#34; title=&#34;workaround&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Workaround&lt;/h2&gt;
&lt;h3 id=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-you-encounter-as-a-user&#34; title=&#34;if-you-encounter-as-a-user&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If you encounter as a user&lt;/h3&gt;
&lt;p&gt;In many cases you can avoid these kind of errors by running the below command in advance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 65001
&amp;gt; stack exec -- site rebuild
... Should work!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command temporarily changes the character encoding in the current Command Prompt session.&lt;br /&gt;
The number &lt;code&gt;65001&lt;/code&gt; seems to stand for UTF-8.&lt;br /&gt;
To roll it back, run &lt;code&gt;chcp 932&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; chcp 932&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that the “932” of “CP932” is the same “932” entered here!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;chcp&lt;/code&gt; command is available in MSYS2’s bash (Surprises me a little. Wondering how it works…😕).&lt;br /&gt;
But you should know that &lt;code&gt;chcp&lt;/code&gt; exists at &lt;code&gt;C:\Windows\System32\&lt;/code&gt;, which MSYS2 users usually don’t want to include in the &lt;code&gt;PATH&lt;/code&gt;.&lt;br /&gt;
The directory contains many incompatible commands whose names conflict with the tools loved by Unix people (e.g. &lt;code&gt;find.exe&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;So I’ve dropped &lt;code&gt;C:\Windows\System32\&lt;/code&gt; from &lt;code&gt;PATH&lt;/code&gt; when using MSYS2.&lt;br /&gt;
If you’ve done like me, run by full path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/c/Windows/System32/chcp.com 932&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34; title=&#34;if-it-still-doesnt-work-or-youre-the-developer-of-the-libraries-etc.&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;If it still doesn’t work, or you’re the developer of the libraries etc.&lt;/h3&gt;
&lt;p&gt;Unfortunately, the error can often persist even after running &lt;code&gt;chcp 65001&lt;/code&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;br /&gt;
According to my guess, the &lt;code&gt;chcp 65001&lt;/code&gt; command doesn’t affect the grandchild processes of the Command Prompt (or bash etc.) on which the &lt;code&gt;chcp&lt;/code&gt; is run (i.e. the child processes of the command you enter).&lt;/p&gt;
&lt;p&gt;If the error still happens you can either report to the developer, or fix it yourself!&lt;br /&gt;
When reporting; asking the developer to run after doing &lt;code&gt;chcp 932&lt;/code&gt; could help him/her reproduce the bug (Sorry, I’ve never tried it).&lt;br /&gt;
When fixing by yourself, perhaps the best and most certain way would be to switch the character encoding of the &lt;code&gt;Handle&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;This problem is caused by the inconsistency between the &lt;code&gt;Handle&lt;/code&gt;&#39;s character encoding and the encoding of the bytes that are actually transferred. So switching into the proper encoding should fix it.&lt;br /&gt;
If the error happens when reading/writing a common UTF-8 file via the &lt;code&gt;Handle&lt;/code&gt;, writing like below can avoid it:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding&lt;/span&gt; (utf8)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;hSetEncoding handle utf8&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a bonus, I’ll show you an example of how &lt;a href=&#34;https://github.com/haskell/haddock/pull/566&#34;&gt;I myself addressed a problem caused by the standard output (or standard error output), and fixed a bug in haddock&lt;/a&gt;. In short, it can at least suppress the error to paste the code below before your program uses the &lt;code&gt;Handle&lt;/code&gt; (Copied from &lt;a href=&#34;https://github.com/haskell/haddock/pull/566/commits/855118ee45e323fd9b2ee32103c7ba3eb1fbe4f2&#34;&gt;this commit&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.IO&lt;/span&gt; (hSetEncoding, stdout)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.CodePage&lt;/span&gt; (mkLocaleEncoding)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.IO.Encoding.Failure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CodingFailureMode&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#if defined(mingw32_HOST_OS)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  liftIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; hSetEncoding stdout &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mkLocaleEncoding &lt;span class=&#34;dt&#34;&gt;TransliterateCodingFailure&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;#endif&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPP macros to &lt;code&gt;import&lt;/code&gt; modules only available on Windows makes this code hard to read, so let’s cut out the verbose part:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hSetEncoding stdout $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’re the details:&lt;br /&gt;
First of all, &lt;code&gt;hSetEncoding&lt;/code&gt; is the function to change the &lt;code&gt;Handle&lt;/code&gt;‘s character encoding, as I referred before.&lt;br /&gt;
Then &lt;code&gt;stdout&lt;/code&gt; is the &lt;code&gt;Handle&lt;/code&gt; for the standard output as its name.&lt;br /&gt;
The last function call &lt;code&gt;mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; returns a character encoding object for the current Windows’ character encoding (i.e. &lt;code&gt;chcp&lt;/code&gt;ed character encoding), configured as “Even if the &lt;code&gt;Handle&lt;/code&gt; detects any characters which can’t be converted into/from a Unicode character, don’t raise an error, convert it into some likable character instead.”.&lt;/p&gt;
&lt;p&gt;As the result of the &lt;code&gt;hSetEncoding&lt;/code&gt; above, and the current character encoding is Windows-31J, the character used in the compilation error of GHC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;↓This character
• No instance for (Transformation Nagisa CardCommune_Mepple)
↑&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is converted into&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? No instance for (Transformation Nagisa CardCommune_Mepple)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the question mark. Yeah, this is the “?” I bet most users of GHC on Japanese Windows have seen at least once 😅&lt;br /&gt;
This makes me guess GHC executes &lt;code&gt;hSetEncoding stderr $ mkLocaleEncoding TransliterateCodingFailure&lt;/code&gt; by default before printing out the compilation error.&lt;br /&gt;
Anyway, it’s good that the program doesn’t abort due to the error!&lt;/p&gt;
&lt;p&gt;As the last note of this section: Read &lt;a href=&#34;https://hackage.haskell.org/package/base-4.10.1.0/docs/GHC-IO-Encoding.html&#34;&gt;the document of GHC.IO.Encoding&lt;/a&gt; for the details of how GHC handles various character encodings.&lt;/p&gt;
&lt;h1 id=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#rebuild-if-permission-denied&#34; title=&#34;rebuild-if-permission-denied&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Rebuild if “Permission Denied”&lt;/h1&gt;
&lt;p&gt;I’ve made the first section too long for “Quick-and-dirty checklist”, but I’ll tell you in short from this section.&lt;br /&gt;
We often encounter some errors like “Permission Denied”, “Directory not empty” and similar ones when running &lt;code&gt;stack build&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt;, &lt;code&gt;elm-make&lt;/code&gt;, and any other commands written in Haskell.&lt;br /&gt;
To tell the truth, I’m completely not sure of the cause, but those errors disappear by running the same command several times.&lt;br /&gt;
The key is to repeat many times. Never give up only by once or twice 😅&lt;br /&gt;
Turning off your antivirus software’s scanning of the problematic directory, Dropbox’s synchronisation, etc. might also fix such errors.&lt;/p&gt;
&lt;h1 id=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#try-hard-to-build-libraries-in-c&#34; title=&#34;try-hard-to-build-libraries-in-c&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;Try hard to build libraries in C…&lt;/h1&gt;
&lt;p&gt;On Windows, it frequently troubles us to install libraries which depend on libraries written in C (registered as &lt;code&gt;lib***&lt;/code&gt; in your OS’s package manager).&lt;br /&gt;
But this is not the case only for Haskell.&lt;/p&gt;
&lt;p&gt;The way to fix depends on the case, so let me give you some examples as external links (Sorry, all pages are written in Japanese!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDBC-sqlite3:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igrep/items/d947ab871eb5b20b57e4&#34;&gt;Windows版stackでもHDBC-sqlite3をビルドする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2017/01/29/110100&#34;&gt;MSYS2でHDBC-sqlite3をコンパイル - 北海道苫小牧市出身の初老PGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://teratail.com/questions/102462&#34;&gt;Haskell - Haskellにてstackでiconvパッケージを利用する方法【Windows環境】(102462)｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s all!&lt;br /&gt;
Then, Happy Hacking in Haskell on Windows 10!! I don’t know WSL!🏁🏁🏁&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Translator’s note: In Japanese locale, notepad.exe saves the file in Windows-31J. This will be changed (into UTF-8) in the future release of Windows 10.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;By the way, when I once tried to build the compiler of &lt;a href=&#34;http://eta-lang.org/&#34;&gt;Eta&lt;/a&gt;, (as far as I remember) &lt;code&gt;chcp 65001&lt;/code&gt; didn’t fix the problem, but &lt;code&gt;chcp 20127&lt;/code&gt; did.&lt;br /&gt;
As &lt;code&gt;chcp 20127&lt;/code&gt; switches into US-ASCII, I suspect the local environment of the developer of Eta is US-ASCII…&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/derive-json-no-prefix.html&#34; lang=&#34;ja&#34;&gt;deriveJsonNoPrefixをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-05-17T18:04:26+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.9 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod T…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html</id><title type="text">GHC拡張ノック(Part 1)</title><updated>2018-05-15T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;では各処理系で言語拡張を提供し，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものを利用することで，言語拡張を利用することが許容されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準的な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も多くの言語拡張を提供しており，その拡張は&lt;strong&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/strong&gt;と呼ばれています．&lt;/p&gt;
&lt;p&gt;今回は，この&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と，個人的に良く使う拡張についての簡単な紹介を，全&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;回に分けて行いたいと思います．対象としては，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングをしたことがあり，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の構文や動作方法が分かっている人を考えています．また，この記事はあくまで簡単な紹介に留めるもので，付随する留意点や詳細な機能説明は，大事な箇所は漏らさないよう注意するつもりですが，全てを網羅するつもりはありませんのでその点は注意してください．もし，実際に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;便利な構文の導入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;新たなリテラル表記を可能にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;空のデータ型に対するより強力なサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;新たな基本構文を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;正格化に対するサポートを導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;パターンマッチをより柔軟に扱えるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;レコードに対するサポートを強化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;型演算子を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;型クラスを拡張する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;型ワイルドカードをより柔軟に扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;新たな表記法の導入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;次回予告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張について&#34; title=&#34;ghc拡張について&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張について&lt;/h1&gt;
&lt;h2 id=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellの言語拡張&#34; title=&#34;haskellの言語拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の言語拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，言語拡張を取り込む方法が標準で提供されています．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，コンパイラプラグマというものが策定されており，これを通してコンパイラに追加情報を提供することができます．コンパイラプラグマは&lt;code&gt;{-#&lt;/code&gt;と&lt;code&gt;#-}&lt;/code&gt;で囲まれ，字句的にはコメントとして扱われます．標準では，インラインプラグマや特殊化プラグマの他に，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマというものが策定されており，このプラグマを通して言語拡張を指定することができます．&lt;/p&gt;
&lt;p&gt;例えば，実装によって&lt;code&gt;CPP&lt;/code&gt;と&lt;code&gt;ScopedTypeVariables&lt;/code&gt;という名前の言語拡張が提供されており，それを使いたい場合，次のような文をモジュールの開始前に指定することで，言語拡張が有効になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP, ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを複数指定することもできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE CPP                 #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この機能を通して，多くの&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;処理系では言語拡張を提供しています．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張&#34; title=&#34;ghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のデファクト標準な処理系&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も，多数の拡張を提供しており，この拡張が&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張と呼ばれるものです．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は，バージョン&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;現在，以下の数が提供されています&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; --supported-extensions &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;wc&lt;/span&gt; -l&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;235&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--supported-extensions&lt;/code&gt;オプションは，現在の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で使用できる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を表示してくれるオプションです．ただ，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張は全てが独立した拡張ではなく，互いに依存しあった拡張が多く存在します．また，先頭に&lt;code&gt;No&lt;/code&gt;がついている拡張は，その&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を無効にするような拡張になっています &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;（例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張は&lt;code&gt;ImplicitPrelude&lt;/code&gt;拡張を無効にする拡張です&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;．&lt;/p&gt;
&lt;p&gt;また，デフォルトで有効になっている拡張などもあります．例えば，&lt;code&gt;ImplicitPrelude&lt;/code&gt;という拡張はデフォルトで有効になります．現在デフォルトの&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;をベースにしたモードで&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2&lt;/span&gt;を使用する場合，以下の拡張が&lt;a href=&#34;https://github.com/ghc/ghc/blob/ghc-8.4.2-release/compiler/main/DynFlags.hs#L2022&#34;&gt;デフォルトで有効になります&lt;/a&gt; &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/NondecreasingIndentation&#34;&gt;&lt;code&gt;NondecreasingIndentation&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: Haskell&lt;/span&gt;のレイアウトルールを変更する拡張です．この拡張を有効にすると，ネストされた&lt;code&gt;do&lt;/code&gt;式の場合，インデントをしなくていいようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#rebindable-syntax-and-the-implicit-prelude-import&#34;&gt;&lt;code&gt;ImplicitPrelude&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; 暗黙的に&lt;code&gt;Prelude&lt;/code&gt;モジュールがインポートされるようになる拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#switching-off-the-dreaded-monomorphism-restriction&#34;&gt;&lt;code&gt;MonomorphismRestriction&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-930004.5.5&#34;&gt;単相性制限&lt;/a&gt;を課すようにする拡張です．この制限により，関数束縛でなく型注釈もない束縛変数の型は，デフォルティングルールによって単相化されます．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#traditional-record-syntax&#34;&gt;&lt;code&gt;TraditionalRecordSyntax&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; レコード構文を有効にする拡張です．この拡張では，名前付きのフィールドを持つデータ型を定義し，それを使用することが可能になります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyDataDecls&#34;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; コンストラクタを持たないデータ型の定義を許容する拡張です．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html#extension-ForeignFunctionInterface&#34;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;: FFI&lt;/span&gt;が使えるようになる拡張です．この拡張により，&lt;code&gt;foreign import&lt;/code&gt;構文を使用することで，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;の関数を読み込むことができるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-guards&#34;&gt;&lt;code&gt;PatternGuards&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;case&lt;/code&gt;式において，通常のパターンに加えて，&lt;code&gt;&amp;lt;-&lt;/code&gt;を使用してガードの中でさらにマッチした条件下でパターンマッチができるようになる拡張です．例えば，&lt;code&gt;case (x, y) of { (True, y) | False &amp;lt;- y -&amp;gt; True; _ -&amp;gt; False }&lt;/code&gt;というような式が書けるようになります．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prime.haskell.org/wiki/DoAndIfThenElse&#34;&gt;&lt;code&gt;DoAndIfThenElse&lt;/code&gt;&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;code&gt;if&lt;/code&gt;式の構文を，&lt;code&gt;then&lt;/code&gt;と&lt;code&gt;else&lt;/code&gt;の前に&lt;code&gt;;&lt;/code&gt;を許容するよう変更する拡張です．これにより，&lt;code&gt;do&lt;/code&gt;式において&lt;code&gt;then&lt;/code&gt;や&lt;code&gt;else&lt;/code&gt;をインデントする必要がなくなります．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;歴史的経緯で生まれ，互換性のために残されているものの，現状使用が推奨されていない拡張もあります．他に実験的な拡張やかなり大胆な拡張も存在するため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する際は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のユーザーガイド&lt;/a&gt;をよく読んでから使用するのが良いでしょう．&lt;/p&gt;
&lt;h2 id=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc拡張の使い方&#34; title=&#34;ghc拡張の使い方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の使い方&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用する方法は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用する他に，幾つかあります．まず，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;にオプションを渡して有効にする方法です．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張を有効にした状態で&lt;code&gt;Main.hs&lt;/code&gt;をコンパイルしたい場合，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;ghc&lt;/span&gt; -XNoImplicitPrelude -XStrict --make Main.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では&lt;code&gt;-X&lt;/code&gt;の後に拡張名を続けることで，言語拡張を有効にしてコンパイルすることができます．通常は，&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用するのが良いですが，何らかの事情で&lt;code&gt;LANGUAGE&lt;/code&gt;プラグマを使用できない場合や，デフォルトで有効にしたい言語拡張がある場合などに便利でしょう．特に&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;で言語拡張を有効にしたくなった場合，このオプションを&lt;code&gt;set&lt;/code&gt;コマンドで指定すると良いでしょう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoImplicitPrelude&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XStrict&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を有効にする方法として，&lt;code&gt;Cabal&lt;/code&gt;の機能を活用する方法があります．&lt;code&gt;cabal&lt;/code&gt;ファイルのビルド情報欄には，&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-default-extensions&#34;&gt;&lt;code&gt;default-extensions&lt;/code&gt;というフィールド&lt;/a&gt;を指定することができ，そこにデフォルトで有効にしたい言語拡張のリストを書くことで，その拡張を有効にした状態で&lt;code&gt;Cabal&lt;/code&gt;がビルドを行ってくれます．例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と&lt;code&gt;Strict&lt;/code&gt;拡張をデフォルトで有効にしてビルドしたい場合，次のように書きます．&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:           TestPackage
version:        0.0
synopsis:       Small package with a program
author:         Angela Author
license:        BSD3
build-type:     Simple
cabal-version:  &amp;gt;= 1.2

executable program1
  build-depends:      base
  main-is:            Main.hs
  default-extensions: NoImplicitPrelude, Strict&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#主要なghc拡張&#34; title=&#34;主要なghc拡張&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;主要な&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;/h1&gt;
&lt;p&gt;以下では，個人的にデフォルトで有効化して使っている拡張を幾つか紹介します．なお，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンは&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;モードで使用することを前提にしています．&lt;/p&gt;
&lt;h2 id=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#preludeの暗黙的な使用を抑制する&#34; title=&#34;preludeの暗黙的な使用を抑制する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的な使用を抑制する&lt;/h2&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoImplicitPrelude&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NoImplicitPrelude&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NoImplicitPrelude&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;が暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;されます．つまり，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムは暗黙に&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いてあると，解釈されるということです．&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;には，&lt;code&gt;Int&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;IO&lt;/code&gt;といった基本的なデータ型や，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Functor&lt;/code&gt;といった基本的な型クラス，&lt;code&gt;zip&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;putStrLn&lt;/code&gt;といった基本的な関数が含まれています．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;の暗黙的な&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;は，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラムを簡潔に書く上では便利ですが，これを無効にしたい場合もあります．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;にあるデータ型や関数と同じ名前の，別モジュールの関数を使いたい時&lt;/li&gt;
&lt;li&gt;別の代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージを使う時&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった場合です．&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張はまさしくこのような場合に，&lt;a href=&#34;https://www.stackage.org/haddock/lts-10.8/base-4.10.1.0/Prelude.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;モジュール&lt;/a&gt;を暗黙的に&lt;span class=&#34;ascii&#34;&gt;import&lt;/span&gt;しないようにする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張です．&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;番目の理由の場合，この拡張をデフォルトで入れずモジュール度に指定すればいいと思いますが，私的には&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目の理由でこの拡張を使うためデフォルトで有効にしています．代替となる&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;パッケージは幾つか存在しますが，主に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;classy-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/classy-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;protolude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/protolude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;universum:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/universum&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;basic-prelude:&lt;/span&gt; &lt;a href=&#34;https://hackage.haskell.org/package/basic-prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などがあります&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;．これらのパッケージを探すには&lt;a href=&#34;https://hackage.haskell.org/packages/#cat:Prelude&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;カテゴリ&lt;/a&gt;を参照するといいでしょう．&lt;/p&gt;
&lt;p&gt;私の場合，&lt;span class=&#34;ascii&#34;&gt;classy-prelude&lt;/span&gt;を使っていますが，それも生で使用しているわけではなく，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作って使用しています．&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;は，最もよく使うものが提供されているモジュールですから，&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の変更の影響を最も強く受けます．それを外部パッケージに依存させると，パッケージ保守が結構大変です．もし，パッケージごとに&lt;span class=&#34;ascii&#34;&gt;prelude&lt;/span&gt;モジュールを作っておけば，パッケージ側や&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン変更の影響などで&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;が変更されても，そのモジュール内でフォールバックを設定することで他のモジュールに変更を持ち越す必要がなくなります．これを&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張と組み合わせ，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE NoImplicitPrelude #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyPrelude&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くことで，保守がかなりしやすくなります．&lt;/p&gt;
&lt;h2 id=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#便利な構文の導入&#34; title=&#34;便利な構文の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;便利な構文の導入&lt;/h2&gt;
&lt;h3 id=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たなリテラル表記を可能にする&#34; title=&#34;新たなリテラル表記を可能にする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たなリテラル表記を可能にする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BinaryLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BinaryLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BinaryLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NagativeLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NegativeLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NagativeLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HexFloatLiterals&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XHexFloatLiterals&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- HexFloatLiterals&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には幾つかのリテラルが存在します．例えば，&lt;code&gt;&#39;c&#39;&lt;/code&gt;は文字&lt;span class=&#34;ascii&#34;&gt;c&lt;/span&gt;を表す&lt;span class=&#34;ascii&#34;&gt;Char&lt;/span&gt;型のリテラルです．&lt;code&gt;100&lt;/code&gt;は整数&lt;span class=&#34;ascii&#34;&gt;100&lt;/span&gt;を表す&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルで，&lt;code&gt;100.1&lt;/code&gt;は浮動小数点数&lt;span class=&#34;ascii&#34;&gt;100.1&lt;/span&gt;を表す&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルになります．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準には他にも幾つかリテラルが存在しますが，特に数値は非常に多様な使われ方がなされるため，他の多くの言語はより強力なリテラル表現を持つことがあります．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張ではこの背景を元に，リテラルに対する幾つかの拡張を提供しています．&lt;code&gt;BinaryLiterals&lt;/code&gt;は&lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;HexFloatLiterals&lt;/code&gt;は&lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;型のリテラルに対して，&lt;code&gt;NegativeLiterals&lt;/code&gt;はどちらに対してもの拡張を，それぞれ提供します．&lt;/p&gt;
&lt;p&gt;数値型に対するリテラルは，既存のものでも数種類存在します．通常の数値表現&lt;code&gt;20&lt;/code&gt;，オクテット&lt;span class=&#34;ascii&#34;&gt;(8&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0o24&lt;/code&gt;，ヘックス&lt;span class=&#34;ascii&#34;&gt;(16&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0x14&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つです．&lt;code&gt;BinaryLiterals&lt;/code&gt;拡張は，これに加え&lt;code&gt;0b&lt;/code&gt;を接頭辞に付けることでバイナリ&lt;span class=&#34;ascii&#34;&gt;(2&lt;/span&gt;進数&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;表現&lt;code&gt;0b10100&lt;/code&gt;を可能にする拡張です．&lt;/p&gt;
&lt;p&gt;これらのオクテット表現やヘックス，バイナリ表現は浮動小数点数の表現はできません．しかし，浮動小数点数は実際には&lt;span class=&#34;ascii&#34;&gt;IEEE&lt;/span&gt;の規格に則ったデータ表現になりますから，&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進数表現よりも&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;進数表現の方が実態として分かりやすい場合があります．このため&lt;code&gt;HexFloatLiterals&lt;/code&gt;拡張では，接頭に&lt;code&gt;0x&lt;/code&gt;の付くヘックス表現でも浮動小数点数のリテラルを記述できるようにしています．この拡張によって，&lt;code&gt;0.25&lt;/code&gt;は&lt;code&gt;0x0.4&lt;/code&gt;と表記できるようになります．また，指数表記も&lt;span class=&#34;ascii&#34;&gt;10&lt;/span&gt;進方式のものではなく，ビット方式のものになります．指数表記には&lt;code&gt;e&lt;/code&gt;ではなく&lt;code&gt;p&lt;/code&gt;を使い，何ビット移動させるか&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つまり，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;の何乗を掛けるか&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を書くようにします．例えば，&lt;code&gt;1.0&lt;/code&gt;は&lt;code&gt;0x0.4p2&lt;/code&gt;と表記できます．また，&lt;code&gt;0.125&lt;/code&gt;は&lt;code&gt;0x0.4p-1&lt;/code&gt;と表記できます．&lt;/p&gt;
&lt;p&gt;さて，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には唯一の単項演算子&lt;code&gt;-&lt;/code&gt;があります．この演算子を使用することで&lt;code&gt;negate 1&lt;/code&gt;の代わりに&lt;code&gt;-1&lt;/code&gt;という表記が可能になります．しかし，この演算子の結合度は非常に弱く，また二項演算子の&lt;code&gt;-&lt;/code&gt;も存在することから&lt;code&gt;f -1&lt;/code&gt;という表記は&lt;code&gt;(f) - (1)&lt;/code&gt;というように解釈されてしまうなどの問題があり，非常に使い勝手が悪い演算子となっていました．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の仕様上，&lt;code&gt;-128&lt;/code&gt;という表現は最終的に&lt;code&gt;negate (fromInteger 128)&lt;/code&gt;という式に&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-280003.4&#34;&gt;脱糖されます&lt;/a&gt;が，例えば&lt;code&gt;Int8&lt;/code&gt;などの，負数は&lt;code&gt;-128&lt;/code&gt;まで扱えるが正数は&lt;code&gt;+127&lt;/code&gt;までしか扱えないといったデータ型の場合に，この式は&lt;code&gt;fromInteger&lt;/code&gt;で一度&lt;code&gt;+128&lt;/code&gt;の値になってしまいオーバーフローを起こしてしまうという問題がありました．これを解決するため導入されたのが&lt;code&gt;NagativeLiterals&lt;/code&gt;拡張です．この拡張を導入することで空白を挟まない&lt;code&gt;-1.0&lt;/code&gt;などは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つのリテラルと解釈されるようになります．この拡張を導入後は，次のようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; max &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; max (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: max -1 2 == max - (1 2)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromInteger i &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; i &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fractional&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; { fromRational r &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; r &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- before: raise error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;100.10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SamplePZ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;fu&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#空のデータ型に対するより強力なサポートを導入する&#34; title=&#34;空のデータ型に対するより強力なサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;空のデータ型に対するより強力なサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-EmptyCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyDataDeriving&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- EmptyDataDeriving&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，コンストラクタを一切持たない型を定義できます．これは空のデータ型と呼ばれ，次のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような型は&lt;code&gt;base&lt;/code&gt;パッケージの&lt;code&gt;Data.Void&lt;/code&gt;モジュールでも提供されており，有用な場合があります．しかし，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではこのようなデータ型に対するサポートが薄く，使用する上で不便な場面があります．このサポートを強化する拡張が，&lt;code&gt;EmptyCase&lt;/code&gt;拡張と&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EmptyCase&lt;/code&gt;拡張は，空のパターンマッチを書けるようにする拡張です．&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，空のパターンマッチは書けません．つまり，&lt;code&gt;case x of {}&lt;/code&gt;というような式が書けないということです．通常はデータ型は何らかのコンストラクタを持っていますから，このようなパターンマッチを書きたいと思う場面はないでしょう．しかし，空のデータ型においてこのようなパターンマッチを書きたいと思うことがあります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような表記を可能にするのが&lt;code&gt;EmptyCase&lt;/code&gt;拡張です．なお，このケース式は次のように書くのと同値になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; error &lt;span class=&#34;st&#34;&gt;&amp;quot;Non-exhaustive patterns in case&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張は，空のデータ型に対して&lt;code&gt;deriving&lt;/code&gt;構文を使用できるようにする拡張です．空のデータ型は，通常のデータ型と違い&lt;code&gt;Eq&lt;/code&gt;や&lt;code&gt;Show&lt;/code&gt;などの型クラスインスタンスを&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch11.html#x18-182014x6&#34;&gt;&lt;code&gt;deriving&lt;/code&gt;することができません&lt;/a&gt;．つまり以下のようなことができません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これでは不便な場合があります．それを可能にするのが&lt;code&gt;EmptyDataDeriving&lt;/code&gt;拡張です．この拡張では，&lt;code&gt;Eq&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Show&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;Read&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つが&lt;code&gt;deriving&lt;/code&gt;可能になり，それぞれは次のようなインスタンスを生成します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  _ &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;  compare _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;  readPrec &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pfail&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;  showsPrec _ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; {}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな基本構文を導入する&#34; title=&#34;新たな基本構文を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな基本構文を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TupleSections&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TupleSections&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiWayIf&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiWayIf&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-LambdaCase&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- LambdaCase&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，タプルやラムダ抽象，セクション，&lt;code&gt;if&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式といった構文が導入されていますが，これらを組み合わせて多用する場合，幾つか冗長な表現が生まれる場合があります．その中でも頻出する表現に対して，新たな構文を提供する&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張があります．それが，&lt;code&gt;TupleSections&lt;/code&gt;，&lt;code&gt;MultiWayIf&lt;/code&gt;，&lt;code&gt;LambdaCase&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;には，セクションと呼ばれる二項演算子の部分適用を表す構文があります．また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではタプルにも独自の構文が充てがわれています．このタプルを使用する際，セクションのように部分適用を簡潔に書きたい場合があります．例えば，&lt;code&gt;\x -&amp;gt; (1, x)&lt;/code&gt;という表現をもっと簡潔に書きたい場合があります．この場合は&lt;code&gt;(,) 1&lt;/code&gt;というな表記が可能ですが，&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;番目に部分適用したい場合や，&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ組のタプルに部分適用したい場合などは非常に面倒です．このため，&lt;code&gt;TupleSections&lt;/code&gt;拡張は&lt;code&gt;(1, )&lt;/code&gt;という表記でタプルの部分適用を書ける構文を提供します．&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つ以上空きがある場合は，左から引数を受け取っていくようになります．例えば，&lt;code&gt;(True, , &amp;quot;str&amp;quot;, )&lt;/code&gt;は&lt;code&gt;\x y -&amp;gt; (True, x, &amp;quot;str&amp;quot;, y)&lt;/code&gt;と同等です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;は名前の通り複数の条件をガード構文のように指定できる&lt;code&gt;if&lt;/code&gt;式を提供する拡張です．つまり，以下のようなことがかけます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;MultiWayIf&lt;/code&gt;は次のように&lt;code&gt;case&lt;/code&gt;式で書き換えることが可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;f xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sequence_ &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; () &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fail &lt;span class=&#34;st&#34;&gt;&amp;quot;non-positive number&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;    _ &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; otherwise       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; print x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つ目の&lt;code&gt;LambdaCase&lt;/code&gt;拡張は，ラムダ抽象と&lt;code&gt;case&lt;/code&gt;式を組み合わせた際に良く使う表現をより簡潔に書けるようにする拡張です．この拡張を使うと，&lt;code&gt;\x -&amp;gt; case x of (a, b) -&amp;gt; a + b&lt;/code&gt;というようなラムダ抽象を，&lt;code&gt;\case (a, b) -&amp;gt; a + b&lt;/code&gt;と書けるようになります．もちろんレイアウトルールも&lt;code&gt;case-of&lt;/code&gt;式と同じように作用するため，改行を含んだ式も書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; negate &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#正格化に対するサポートを導入する&#34; title=&#34;正格化に対するサポートを導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;正格化に対するサポートを導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-BangPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- BangPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-StrictData&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- StrictData&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Strict&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Strict&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;はデフォルトの評価戦略として，グラフ簡約の遅延評価を採用しています．これはリストや再帰に関する表現を非常に豊かにする反面，パフォーマンスを悪化させたりデバッグを困難にさせる場面が多いなどの負の面もあります．このため&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，&lt;code&gt;seq&lt;/code&gt;関数や正格フラグといった正格評価へのサポートも提供しています．しかし，このサポートは表現が冗長な場合が多く，使い勝手が悪い側面があります．この面を解決するための拡張が，&lt;code&gt;BangPatterns&lt;/code&gt;，&lt;code&gt;StrictData&lt;/code&gt;，&lt;code&gt;Strict&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;再帰関数において，累積引数は多くの場合正格に計算した方が効率が良いですが，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では以下のように書く必要がありました．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;sum xs y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような&lt;code&gt;seq&lt;/code&gt;による評価をより簡潔に書けるよう，&lt;code&gt;BangPatterns&lt;/code&gt;拡張というものが提供されています．これはパターンを拡張し，バンパターンというものを導入します．このバンパターンは，通常のパターンに&lt;code&gt;!&lt;/code&gt;を付けることで書けます．例えば，上の例はバンパターンを使うと以下のように書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;sum&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;sum xs &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;  x&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;xs&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; sum xs&amp;#39; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;  []    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バンパターンはパターンの&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つですから，もちろん&lt;code&gt;let&lt;/code&gt;式や&lt;code&gt;case&lt;/code&gt;式でも&lt;code&gt;let !y = f x in y&lt;/code&gt;や&lt;code&gt;case f x of !y -&amp;gt; y&lt;/code&gt;というように使えます．また，&lt;code&gt;case x of (!y, z) -&amp;gt; y + z&lt;/code&gt;というように部分パターンとしても有効です．バンパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;≡ v &lt;span class=&#34;ot&#34;&gt;`seq`&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { pat &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e&amp;#39; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，データ型の宣言において，コンストラクタの引数に正格フラグというものを付けることが許容されています．このフラグをつけた引数は，正格に評価された後コンストラクタに渡されます．ただ，一般にデータ型の引数は正格な方が効率が良いため，データ型宣言時に正格フラグを付けるという慣習がありました．この慣習を打破するために導入されたのが，&lt;code&gt;StrictData&lt;/code&gt;拡張です．&lt;code&gt;StrictData&lt;/code&gt;拡張下のモジュールでは，データ型宣言時，コンストラクタの引数は全て正格フラグをつけているものとして扱われます．また，&lt;code&gt;~&lt;/code&gt;というフラグが新たに導入され，このフラグをつけた引数の場合は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準化のデフォルトの動作，つまり引数は正格に評価されず遅延されるようになります．&lt;code&gt;StrictData&lt;/code&gt;下で宣言された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というデータ型は，通常の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下のデータ型と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Normal&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Strict&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt;拡張は，&lt;code&gt;StrictData&lt;/code&gt;拡張に加え，ほとんどのパターンを暗黙的にバンパターンにする拡張です．つまり，殆どの評価を正格にする拡張です．バンパターンに変わる箇所は，関数の引数，&lt;code&gt;let&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;where&lt;/code&gt;句の束縛変数，&lt;code&gt;case&lt;/code&gt;式のパターンマッチなどです．これらのパターンには，最外の場所に&lt;code&gt;!&lt;/code&gt;が暗黙的に付与されます．例えば，&lt;code&gt;Strict&lt;/code&gt;拡張下で定義された&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; data-line-number=&#34;2&#34;&gt;f x (z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数は，&lt;code&gt;BangPatterns&lt;/code&gt;拡張下の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の以下の関数と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;(z, y) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;zy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; z &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;z&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; z&amp;#39; &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意して欲しいのは，このバンパターンは&lt;code&gt;seq&lt;/code&gt;に置き換わるため，&lt;span class=&#34;ascii&#34;&gt;WHNF&lt;/span&gt;までしか評価されないということです．つまり，&lt;code&gt;!(z, y)&lt;/code&gt;というパターンは単なる&lt;code&gt;(z, y)&lt;/code&gt;と完全に同じです．またトップレベルの束縛にバンパターンを付与することは許されておらず，遅延されるということにも注意が必要です．&lt;/p&gt;
&lt;h3 id=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パターンマッチをより柔軟に扱えるようにする&#34; title=&#34;パターンマッチをより柔軟に扱えるようにする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パターンマッチをより柔軟に扱えるようにする&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ViewPatterns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- ViewPatterns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-PatternSynonyms&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- PatternSynonyms&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張では，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準のパターンをさらに強力なものにする拡張があります．&lt;code&gt;ViewPatterns&lt;/code&gt;はビューパターンという新たなパターンを導入します．また，&lt;code&gt;PatternSynonyms&lt;/code&gt;はパターンの別名を付けることができるようにする拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にあるパターンガードは，非常に強力ですが，表現が非常に冗長になる場合があります．これを短縮して書けるように，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張はビューパターンというものを導入します．ビューパターンは，&lt;code&gt;-&amp;gt;&lt;/code&gt;の左側に式を，右側にパターンを書くことで，左の式に対象を適用して結果が右側のパターンにマッチした時，マッチするようなパターンです．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; data-line-number=&#34;1&#34;&gt;f ((&lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; data-line-number=&#34;2&#34;&gt;f x                &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように使用でき，&lt;code&gt;f 0&lt;/code&gt;は&lt;code&gt;Nothing&lt;/code&gt;を，&lt;code&gt;f 3&lt;/code&gt;は&lt;code&gt;Just 3&lt;/code&gt;をそれぞれ返すようになります．この関数宣言は，以下のパターンガードを用いて書いた関数と一致します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-1&#34; data-line-number=&#34;1&#34;&gt;f x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;`mod`&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb26-2&#34; data-line-number=&#34;2&#34;&gt;f x                  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビューパターンは&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-610003.17.3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;case&lt;/code&gt;式の翻訳ルール&lt;/a&gt;に次の規則を加えることで実現されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; v &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; p) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb27-2&#34; data-line-number=&#34;2&#34;&gt;≡ &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; (e v) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; { p &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e1; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e2 }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は，非常に強力で大きな拡張です&lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;．&lt;code&gt;PatternSynonyms&lt;/code&gt;拡張は名前の通り，パターンに別名を与えるパターンシノニム機能を提供します．パターンシノニムは通常の関数と同じように，次のように定義できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; data-line-number=&#34;4&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; x xs &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# COMPLETE Nil, Cons #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように定義したパターンは，以下のように使用できます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;len ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; data-line-number=&#34;2&#34;&gt;len (&lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; _ xs) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; len xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; data-line-number=&#34;3&#34;&gt;len &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは非常に便利な機能ですが，一方で注意する事項も幾つかあります．&lt;/p&gt;
&lt;p&gt;まず，パターンシノニムの定義は関数定義と非常に似ていますが，パターンの別名であることに注意してください．パターンシノニムの定義において変数が出現する場合，関数の引数のように錯覚してしまいがちですが，この変数にはパターンにマッチした時そのマッチした部分が当てがわれます．つまり，右の式でマッチしたものが左の変数に束縛されるため，左の変数に束縛された後右の式を実行する関数と，流れが逆になるということです．このため，パターンシノニムの引数の変数は必ず右に出現する必要があります．また，パターンシノニムの右側には変数を含むパターンしかかけません．そのため，式を書きたい場合，&lt;code&gt;ViewPatterns&lt;/code&gt;拡張などを用いなければなりません．さらにパターンシノニムは，デフォルトではパターンの網羅性検査が非常に難しいため，網羅性検査を行わないようになっています．ただし，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#complete-pragma&#34;&gt;&lt;code&gt;COMPLETE&lt;/code&gt;プラグマ&lt;/a&gt;を用いてパターンシノニムの網羅条件を与えることで，その範囲で網羅性検査を行うようになります．&lt;/p&gt;
&lt;p&gt;パターンシノニムはパターンの種類に応じて&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;種類の書き方が存在します．上の単純なパターンシノニムは，双方向&lt;span class=&#34;ascii&#34;&gt;(bidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，暗黙的にパターンの名前と等しい関数が作られます．この関数を用いることで，&lt;code&gt;[0, 1, 2]&lt;/code&gt;の代わりに&lt;code&gt;Cons 0 (Cons 1 (Cons 2 Nil))&lt;/code&gt;といった式も書くことができるようになります．ただし，このような関数が単純には作れないパターンも存在します．例えば，&lt;code&gt;(x, _)&lt;/code&gt;というパターンに，&lt;code&gt;First x&lt;/code&gt;というパターンシノニムを与えたい場合，この&lt;code&gt;First&lt;/code&gt;に対する関数は&lt;code&gt;_&lt;/code&gt;の部分に入れるべき値が分からないため，作りようがありません．このような関数が単純に作れないパターンシノニムは単方向&lt;span class=&#34;ascii&#34;&gt;(unidirectional)&lt;/span&gt;パターンシノニムと呼ばれ，双方向パターンシノニムが&lt;code&gt;=&lt;/code&gt;を使って定義されるのに対し，次のように&lt;code&gt;&amp;lt;-&lt;/code&gt;を使って書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb30-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このパターンシノニムは&lt;code&gt;First&lt;/code&gt;という関数は作らず，単純にパターンの別名だけを提供します．ただし，&lt;code&gt;First&lt;/code&gt;関数の定義を次のように与えることが可能になっています．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-1&#34; data-line-number=&#34;1&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-2&#34; data-line-number=&#34;2&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (x, _)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb31-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;First&lt;/span&gt; x         &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，パターンシノニムはパターンの評価順序にも注意する必要があります．例えば，次の例をみてください．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; b c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-5&#34; data-line-number=&#34;5&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; a b c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-6&#34; data-line-number=&#34;6&#34;&gt;pattern &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; x y z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-9&#34; data-line-number=&#34;9&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-10&#34; data-line-number=&#34;10&#34;&gt;f _                      &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-13&#34; data-line-number=&#34;13&#34;&gt;f&amp;#39; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb32-14&#34; data-line-number=&#34;14&#34;&gt;f&amp;#39; _                            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;f&lt;/code&gt;と&lt;code&gt;f&#39;&lt;/code&gt;は評価順が異なり，&lt;code&gt;f (Pair False undefined)&lt;/code&gt;が例外を投げるのに対し，&lt;code&gt;f&#39; (Pair False undefined)&lt;/code&gt;は&lt;code&gt;False&lt;/code&gt;を返します．これは，パターンシノニムを使ったパターンマッチでは，自身のパターンを先に調べ，次に引数のパターンマッチを行うからです．つまり，&lt;code&gt;f&lt;/code&gt;は以下と同等になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-2&#34; data-line-number=&#34;2&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; y z)) &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; y, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb33-3&#34; data-line-number=&#34;3&#34;&gt;f _                                                     &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンシノニムは，モジュールエクスポートを書く際にも注意が必要で，&lt;code&gt;module A (pattern Cons, pattern Nil) where ...&lt;/code&gt;というように接頭に&lt;code&gt;pattern&lt;/code&gt;をつける必要があります．&lt;/p&gt;
&lt;h3 id=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#レコードに対するサポートを強化する&#34; title=&#34;レコードに対するサポートを強化する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;レコードに対するサポートを強化する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DuplicateRecordFields&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DuplicateRecordFields&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- DuplicateRecordFields&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-OverloadedLabels&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- OverloadedLabels&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedFieldPuns&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedFieldPuns&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecordWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecordWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のレコード構文は，便利な反面幾つか機能が劣る場面もあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，レコードをより扱いやすくするための拡張を幾つか提供しています．それが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;，&lt;code&gt;OverloadedLabels&lt;/code&gt;，&lt;code&gt;NamedFieldPuns&lt;/code&gt;，&lt;code&gt;RecordWildCards&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です&lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，同じモジュール内で同じフィールド名を持つ複数のレコード構文を使用したデータ型の定義を行うことができません．これはどのデータ型のフィールドかが曖昧であるようなプログラムを書けてしまうからですが，そういう状況に遭遇するとこの制約は非常に不便です．これを解決するのが，&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張です．&lt;code&gt;DuplicateRecordFields&lt;/code&gt;拡張は，曖昧になるような式を書けなくする代わりに，同一モジュールの複数のデータ型が同じフィールド名を持つことを許容する拡張です．つまり，以下のようなことが可能になります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb34-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，この拡張下では，曖昧なフィールドを用いたレコードのアップデート構文やフィールドの選択関数の使用の際は型を明記する必要があったり，モジュールのエクスポートリストで選択関数をエクスポートすることが出来なくなったりします．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張は，&lt;code&gt;#foo&lt;/code&gt;というような&lt;code&gt;#&lt;/code&gt;から始まる新たな構文を導入します．&lt;code&gt;#foo&lt;/code&gt;は&lt;code&gt;GHC.OverloadedLabels&lt;/code&gt;モジュールの&lt;code&gt;fromLabel&lt;/code&gt;メソッドにおいて&lt;code&gt;IsLabel &amp;quot;foo&amp;quot; a =&amp;gt; a&lt;/code&gt;というような型を持つ場合と同等になります．これを用いることで，同じフィールドを持つデータ型に対する選択関数を次のように書けます&lt;a href=&#34;#fn11&#34; class=&#34;footnote-ref&#34; id=&#34;fnref11&#34;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels       #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- the main extension&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds              #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for Symbol kind&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE KindSignatures         #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField&amp;#39;s `l` parameter&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField and IsLabel classes&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FunctionalDependencies #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField class&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances      #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for HasField instances&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables    #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for the IsLabel instance&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DuplicateRecordFields  #-}&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- for A and B data types&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.OverloadedLabels&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;(..))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; d ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a (&lt;span class=&#34;ot&#34;&gt;l ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;) b &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; a l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  selectField ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-21&#34; data-line-number=&#34;21&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-24&#34; data-line-number=&#34;24&#34;&gt;  selectField _ (&lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; x) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-25&#34; data-line-number=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-26&#34; data-line-number=&#34;26&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasField&lt;/span&gt; a l b &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsLabel&lt;/span&gt; l (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb35-27&#34; data-line-number=&#34;27&#34;&gt;  fromLabel &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; selectField (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; l)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使うことで，&lt;code&gt;#d A { d = 0 }&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;を，&lt;code&gt;#d B { d = True }&lt;/code&gt;は&lt;code&gt;True&lt;/code&gt;を返してくるようになります．また，&lt;code&gt;#d&lt;/code&gt;には型を明記しなくても型推論が働くようになります．&lt;/p&gt;
&lt;p&gt;さて他にレコードのパターンマッチやコンストラクトを非常に便利にしてくれる拡張として，&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張と&lt;code&gt;RecordWildCards&lt;/code&gt;拡張があります．レコードのパターンマッチは多くの場合冗長になりがちで，次のようなボイラープレートを書きがちです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; x ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; y ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb36-4&#34; data-line-number=&#34;4&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張は，同等のことを次のように書けるようにする拡張です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb37-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，このパターンは旧来の書き方と合わせて書くこともできます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x, y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb38-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ x }            &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらにこの拡張は，コンストラクトの際も役に立ちます．&lt;code&gt;let x = 1 in A { x, y = True }&lt;/code&gt;と書くとこの式は，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;拡張ではフィールド名を明記する必要がありましたが，&lt;code&gt;RecordWildCards&lt;/code&gt;拡張はさらにフィールド名を明記する必要がなくなります．以下のように&lt;code&gt;{..}&lt;/code&gt;と書くことで，全てのフィールドを展開してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb39-2&#34; data-line-number=&#34;2&#34;&gt;f &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，部分的に明記することも可能で，その場合以下のように書きます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-2&#34; data-line-number=&#34;2&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{ y &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb40-3&#34; data-line-number=&#34;3&#34;&gt;g &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;}             &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コンストラクトの際も，この拡張は有効です．&lt;code&gt;let x = 1 in A { y = True, ..}&lt;/code&gt;と書いた場合，&lt;code&gt;A { x = 1, y = True }&lt;/code&gt;と書くのと同等になります．&lt;/p&gt;
&lt;h3 id=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型演算子を導入する&#34; title=&#34;型演算子を導入する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型演算子を導入する&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeOperators&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeOperators&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- TypeOperators&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではユーザー定義の関数やデータ型のコンストラクタにおいて，演算子表記のものも定義できるようになっています．例えば，以下のようにです．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb41&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pair&lt;/span&gt; a b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:*:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;amp;) ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-5&#34; data-line-number=&#34;5&#34;&gt;x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; f x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb41-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixl&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型を定義する場合そのようなことはできません．これを可能にするのが，&lt;code&gt;TypeOperators&lt;/code&gt;拡張です．この拡張の有効下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb42-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;infixr&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということが可能になります．ただし，このように定義した型演算子は，同じ名前の値としての演算子があった場合区別ができません．このため，モジュールのエクスポートリストを書く際，型演算子か値レベルの演算子かの区別が付かなくなった場合，値レベルの方が優先されます．この時，型演算子を明示したい場合，&lt;code&gt;type&lt;/code&gt;を付けます&lt;a href=&#34;#fn12&#34; class=&#34;footnote-ref&#34; id=&#34;fnref12&#34;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-4&#34; data-line-number=&#34;4&#34;&gt;  ( &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-5&#34; data-line-number=&#34;5&#34;&gt;  ) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb43-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型クラスを拡張する&#34; title=&#34;型クラスを拡張する&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型クラスを拡張する&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiParamTypeClasses&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- MultiParamTypeClasses&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleContexts&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleContexts&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleInstances&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- FlexibleInstances&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InstanceSigs&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-InstanceSigs&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- InstanceSigs&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型クラスは非常に強力な機構です．しかしながら，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準の型クラスの構文は非常に制約がきつく，これらを緩和したいと思うことがよくあります．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では制約を緩和する拡張をいくつか提供しています．それが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;，&lt;code&gt;FlexibleContexts&lt;/code&gt;，&lt;code&gt;FlexibleInstances&lt;/code&gt;，&lt;code&gt;InstanceSigs&lt;/code&gt;の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの拡張です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，クラスは&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの変数しか持てません．なので，次のような型クラスは作れません．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb44-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; a b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは非常に不便な制約なため，複数のパラメータを使うような型クラスを許容する拡張が&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張です．この拡張により，上のコードが許容されるようになる他，以下のように変数が全くない型クラスも宣言することができるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb45-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullary&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，メソッドにおいてクラスの型変数に型制約をかけるということも許容されていませんが，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張ではこれも可能にします&lt;a href=&#34;#fn13&#34; class=&#34;footnote-ref&#34; id=&#34;fnref13&#34;&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt;．これによって以下のようなクラス定義も書けるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Setable&lt;/span&gt; s a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb46-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  elem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型制約の解決を安全に，しかも単純にするために，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-660004.1.3&#34;&gt;型注釈における制約の書き方&lt;/a&gt;や&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-760004.3.1&#34;&gt;クラス定義，インスタンス定義の際の制約の書き方&lt;/a&gt;を大きく制限しています．しかし，より複雑な型制約を書きたい時が往々にしてあります．そこで，この制限を緩め，クラス階層が非循環である場合には許容するようにする拡張が，&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張です．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (t m)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Transform&lt;/span&gt; t m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (t m) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-7&#34; data-line-number=&#34;7&#34;&gt;f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb47-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張も&lt;code&gt;FlexibleContexts&lt;/code&gt;拡張と同じく，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準での&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-770004.3.2&#34;&gt;型クラスインスタンスの書き方&lt;/a&gt;の制限を，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination&#34;&gt;停止制限&lt;/a&gt;を守る場合に許容するというように緩和する拡張です．停止制限は簡単に言ってしまえば，インスタンス宣言において，型制約がインスタンスより小さく&lt;a href=&#34;#fn14&#34; class=&#34;footnote-ref&#34; id=&#34;fnref14&#34;&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;，型関数を使っていないというものです&lt;a href=&#34;#fn15&#34; class=&#34;footnote-ref&#34; id=&#34;fnref15&#34;&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;．この拡張下では，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; [a])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; [a] [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C3&lt;/span&gt; a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- valid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (s a)) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; s a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C4&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C2&lt;/span&gt; a a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- invalid&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb48-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; [] &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C1&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となります．また，この拡張下では，型シノニムをインスタンスにすることもできます&lt;a href=&#34;#fn16&#34; class=&#34;footnote-ref&#34; id=&#34;fnref16&#34;&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Instead of `instance C [a]`&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb49-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，型シノニムを使う場合そのシノニムの引数は全て適用しなければならないことに注意が必要です．&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，型クラスインスタンスの定義時，そのメソッドの型注釈は書けないようになっています．しかし，複雑な型クラスインスタンスを書く際，メソッドの型注釈を書きたい場合があります&lt;a href=&#34;#fn17&#34; class=&#34;footnote-ref&#34; id=&#34;fnref17&#34;&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;．これを可能にするのが&lt;code&gt;InstanceSigs&lt;/code&gt;拡張です．&lt;code&gt;InstanceSigs&lt;/code&gt;拡張の元では，以下のようなインスタンス宣言が書けます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  (==) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb50-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型ワイルドカードをより柔軟に扱う&#34; title=&#34;型ワイルドカードをより柔軟に扱う&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型ワイルドカードをより柔軟に扱う&lt;/h3&gt;
&lt;p&gt;この節では，以下の拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-NamedWildCards&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- NamedWildCards&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には型ワイルドカードという機能があります．この機能は，&lt;code&gt;_&lt;/code&gt;と型シグネチャ上で書いておくと，そこの部分の型を推論してエラーメッセージとして表示してくれる機能です．この機能は，以下のように部分的に記述したり複数指定したりすることも可能です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb51&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, b) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb51-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを活用すれば，複雑な型をある程度ヒントを与えた状態で推論してもらい，型を追記するプログラミングスタイルや，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が実際に型をどう推論するかを見るための補助に応用できます．しかし，例えば&lt;code&gt;ignoreSecond&lt;/code&gt;が引数と返り値で型が同じであるという情報が分かっていた場合に，これをヒントとして伝えたい場合がありますが，型ワイルドカードでそれを伝える方法はありません．これを解決するのが&lt;code&gt;NamedWildCards&lt;/code&gt;拡張です．この拡張を使うと，以下のようなプログラムに対しても，接頭に&lt;code&gt;_&lt;/code&gt;が付いている型をワイルドカードとみなして，エラーメッセージで型の推論結果を表示してくれるようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb52&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- Inferred type: (a, Maybe a1) -&amp;gt; (a, Maybe a1)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ignoreSecond ::&lt;/span&gt; _a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; _a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb52-3&#34; data-line-number=&#34;3&#34;&gt;ignoreSecond (x, _) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#新たな表記法の導入&#34; title=&#34;新たな表記法の導入&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;新たな表記法の導入&lt;/h3&gt;
&lt;p&gt;この節では，以下の&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの拡張を紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-Arrows&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- Arrows&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RecursiveDo&#34;&gt;ユーザーガイド &lt;span class=&#34;ascii&#34;&gt;- RecursiveDo&lt;/span&gt;拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;では，モナドを扱いやすくするための，&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文という専用の構文が用意されています．この構文は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングにおいて広く利用されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では，これに加え&lt;code&gt;Arrow&lt;/code&gt;と&lt;code&gt;MonadFix&lt;/code&gt;というクラスに対しての専用の構文も提供しています．これは&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張で実装されており，それぞれ&lt;code&gt;Arrows&lt;/code&gt;拡張，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張を有効にすることで使用可能です．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arrow&lt;/code&gt;クラスは，モナドの一般化として導入されました&lt;a href=&#34;#fn18&#34; class=&#34;footnote-ref&#34; id=&#34;fnref18&#34;&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;．このクラスには，モナドの&lt;code&gt;do&lt;/code&gt;構文と同様に，クラスメソッドだけの式に脱糖できる構文が考案され，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張として実装されています．それが&lt;code&gt;Arrows&lt;/code&gt;拡張で利用できる&lt;code&gt;proc&lt;/code&gt;構文です．&lt;/p&gt;
&lt;p&gt;例えば，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドを使った次のような関数は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb53&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;   arr (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, x))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; first (f &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (arr (\y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g) &lt;span class=&#34;fu&#34;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr snd)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(y, x) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x, x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(x, z) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (z, x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; second h&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb53-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; arr (\(z, t) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文を使うと，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb54&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Arrow&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-2&#34; data-line-number=&#34;2&#34;&gt;doSomething f g h &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-3&#34; data-line-number=&#34;3&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-4&#34; data-line-number=&#34;4&#34;&gt;  g &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-6&#34; data-line-number=&#34;6&#34;&gt;  t &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb54-7&#34; data-line-number=&#34;7&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; t &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というように書けます&lt;a href=&#34;#fn19&#34; class=&#34;footnote-ref&#34; id=&#34;fnref19&#34;&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;．また，&lt;code&gt;ArrowLoop&lt;/code&gt;クラスの&lt;code&gt;loop&lt;/code&gt;メソッドに変換される，&lt;code&gt;rec&lt;/code&gt;構文も搭載されており次のようなフィードバック制御を相互再帰で行うプログラムを書くことができます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb55&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;counter ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ArrowLoop&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-2&#34; data-line-number=&#34;2&#34;&gt;counter delay &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; proc reset &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-3&#34; data-line-number=&#34;3&#34;&gt;  rec output &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; reset &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; next&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-4&#34; data-line-number=&#34;4&#34;&gt;      next &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; delay &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb55-5&#34; data-line-number=&#34;5&#34;&gt;  returnA &lt;span class=&#34;fu&#34;&gt;-&amp;lt;&lt;/span&gt; output&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt;構文については&lt;a href=&#34;https://www.haskell.org/arrows/syntax.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Arrow syntax&lt;/span&gt;&lt;/a&gt;のページにまとめられている他，&lt;a href=&#34;http://www.staff.city.ac.uk/~ross/papers/notation.html&#34;&gt;提案論文&lt;/a&gt;にて変換規則を確認することが可能です．&lt;/p&gt;
&lt;p&gt;さて，もう&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの&lt;code&gt;MonadFix&lt;/code&gt;クラスは，モナドを拡張し，再帰的なバインディングを許すようなものです．このクラスを元に，&lt;code&gt;RecursiveDo&lt;/code&gt;拡張は&lt;span class=&#34;ascii&#34;&gt;do&lt;/span&gt;構文をさらに拡張します．具体的には，次のように使用できる&lt;code&gt;rec&lt;/code&gt;という構文を新たに導入します．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb56&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-3&#34; data-line-number=&#34;3&#34;&gt;  rec x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-4&#34; data-line-number=&#34;4&#34;&gt;      y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb56-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は，次のように&lt;code&gt;MonadFix&lt;/code&gt;クラスのメソッド&lt;code&gt;mfix&lt;/code&gt;を使った関数と同等です．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb57&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-3&#34; data-line-number=&#34;3&#34;&gt;  (x, y) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(x, y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-4&#34; data-line-number=&#34;4&#34;&gt;    x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-5&#34; data-line-number=&#34;5&#34;&gt;    y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-6&#34; data-line-number=&#34;6&#34;&gt;    pure (x, y)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb57-7&#34; data-line-number=&#34;7&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，&lt;code&gt;rec&lt;/code&gt;を省略して書ける&lt;code&gt;mdo&lt;/code&gt;という構文も提供されます．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb58&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;doSomething ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-2&#34; data-line-number=&#34;2&#34;&gt;doSomething &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-3&#34; data-line-number=&#34;3&#34;&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [y, y &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-4&#34; data-line-number=&#34;4&#34;&gt;  y &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb58-5&#34; data-line-number=&#34;5&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mdo&lt;/code&gt;構文は，それぞれの文と変数の依存関係を解析し，自動的に&lt;code&gt;rec&lt;/code&gt;ブロックに分けてくれます．後は，その分けられた&lt;code&gt;rec&lt;/code&gt;文を&lt;code&gt;mfix&lt;/code&gt;に翻訳することで，通常の&lt;code&gt;do&lt;/code&gt;構文に翻訳することができます．例えば，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb59&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-1&#34; data-line-number=&#34;1&#34;&gt;mdo&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-3&#34; data-line-number=&#34;3&#34;&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-4&#34; data-line-number=&#34;4&#34;&gt;  c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-5&#34; data-line-number=&#34;5&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-6&#34; data-line-number=&#34;6&#34;&gt;  d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-7&#34; data-line-number=&#34;7&#34;&gt;  e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb59-8&#34; data-line-number=&#34;8&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式は，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb60&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-2&#34; data-line-number=&#34;2&#34;&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-3&#34; data-line-number=&#34;3&#34;&gt;  (b, c) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(b, c) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-4&#34; data-line-number=&#34;4&#34;&gt;    b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f a c&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-5&#34; data-line-number=&#34;5&#34;&gt;    c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; f b a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-6&#34; data-line-number=&#34;6&#34;&gt;    pure (b, c)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-7&#34; data-line-number=&#34;7&#34;&gt;  z &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; h a b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-8&#34; data-line-number=&#34;8&#34;&gt;  (d, e) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; mfix &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;~&lt;/span&gt;(d, e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-9&#34; data-line-number=&#34;9&#34;&gt;    d &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g d e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-10&#34; data-line-number=&#34;10&#34;&gt;    e &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; g a z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-11&#34; data-line-number=&#34;11&#34;&gt;    pure (d, e)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb60-12&#34; data-line-number=&#34;12&#34;&gt;  pure c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という式に翻訳されます．&lt;code&gt;mdo&lt;/code&gt;と&lt;code&gt;rec&lt;/code&gt;の変換規則は，&lt;a href=&#34;https://dl.acm.org/citation.cfm?doid=581690.581693&#34;&gt;提案論文&lt;/a&gt;にて確認が可能です．&lt;/p&gt;
&lt;h1 id=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#次回予告&#34; title=&#34;次回予告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;次回予告&lt;/h1&gt;
&lt;p&gt;今回は，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の簡単な紹介と使い方について，それから個人的にデフォルトで有効化している，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の暗黙的なインポートを抑制する拡張，新たな構文を導入する拡張を紹介しました．&lt;/p&gt;
&lt;p&gt;次回は，他のデフォルトで有効化している拡張について紹介したいと思います．&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参考文献&#34; title=&#34;参考文献&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/glasgow_exts.html#options-language&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 9. GHC Language Features&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/ffi-chap.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.4.2 User&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s Guide - 10. Foreign function interface (FFI)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/#language-extensions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;What I Wish I Knew When Learning Haskell - Language Extensions&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/language-standards&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Guide to GHC Extensions - Language Standards&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell 2010 Language Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/cabal-projectindex.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cabal reference&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;この記事では特に断らない限り，&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;&lt;/a&gt;を「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準」または「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;」と呼称します．&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;このオプションは，拡張を無効にする&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例えば，&lt;code&gt;NoImplicitPrelude&lt;/code&gt;拡張など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;も含めて表示します．実際には&lt;code&gt;No&lt;/code&gt;が付いている拡張を抜くと，提供されている数は&lt;span class=&#34;ascii&#34;&gt;120&lt;/span&gt;個になります．&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準では，ある拡張を無効にするといった機能は提供されていません．このため，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では無効にする機能を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;つの拡張として，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準に則った形で提供しています．&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;有効にする拡張と無効にする拡張を両方指定した場合，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は指定された順番に沿って最後に指定された方を拡張として採用します．&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;標準では，&lt;code&gt;Haskell2010&lt;/code&gt;というプラグマをサポートすること，また&lt;span class=&#34;ascii&#34;&gt;Haskell98&lt;/span&gt;から新たに&lt;span class=&#34;ascii&#34;&gt;Haskell2010&lt;/span&gt;までに取り込まれた機能を切り離した&lt;code&gt;PatternGuards&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;NoNPlusKPatterns&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;RelaxedPolyRec&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;/&lt;/span&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;という拡張をそれぞれサポートすることが望ましいと規定されています．&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;も&lt;code&gt;Haskell2010&lt;/code&gt;という拡張を指定できるようになっており，ここにあるほとんどはこの拡張を有効にした場合にも有効になります．&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;デフォルトで有効になる拡張のほとんどは，&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;を元にしたものです．ただし全てがそうというわけではありません．&lt;code&gt;NondecreasingIndentation&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準にはない機能です．また&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell 2010&lt;/span&gt;で規定されている仕様を全てデフォルトで取り込んでいる訳でもありません．特に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;標準ではデータ型の宣言に型制約を書くことができますが，&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;ではデフォルトではできません．これを有効にする場合，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DatatypeContexts&#34;&gt;&lt;code&gt;DatatypeContexts&lt;/code&gt;拡張&lt;/a&gt;を有効にする必要があります．&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の内部では&lt;code&gt;RelaxedPolyRec&lt;/code&gt;という拡張も一緒に有効になります．しかし，現在この拡張は実装上の問題で&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;上で無効にすることができないため，ドキュメント上からも削除されています．この記事でも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の方針に従って，この拡張は特に扱いませんのでご留意ください．&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;現在，&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;の代替を目指す，&lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;というパッケージが作成されています．このパッケージは現在まだ&lt;span class=&#34;ascii&#34;&gt;prerelease&lt;/span&gt;の段階で，&lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;&lt;/a&gt;において実験的に使用されています．様々な最新の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プログラミングの知見を取り入れており，標準の&lt;span class=&#34;ascii&#34;&gt;Prelude&lt;/span&gt;に大きく拡張を施しているため，&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で大規模な開発を行う場合注目する価値があるかもしれません．&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.2.2&lt;/span&gt;の段階では，パターンシノニムはコンパイラがクラッシュするなどの非常に多くのバグを抱えていました．私は&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;をまだあまり試していませんが，パターンシノニムの仕様が非常に複雑なため，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．パターンシノニムをプロダクトで多用する場合，その点に注意した方が良いでしょう．&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のレコードシステムの拡張は非常に強力ですが，その反面システムが非常に複雑になっています．このため，&lt;span class=&#34;ascii&#34;&gt;8.2.2&lt;/span&gt;の段階でコンパイラがクラッシュするなど非常に多くのバグを抱えていました．レコードシステムの仕様の改良は現在も進んでいますが，&lt;span class=&#34;ascii&#34;&gt;8.4.2&lt;/span&gt;でもまだバグを多く抱えている可能性があります．これらの拡張をプロダクトで多用する場合，その点に注意した方が良いでしょう．特に，&lt;span class=&#34;ascii&#34;&gt;GHC 8.0&lt;/span&gt;以降に導入された拡張には注意が必要です．&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn11&#34;&gt;&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt;拡張はかなり最近入った拡張で，多数の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張，特に強力な型システムを前提にして書かれています．このため，選択関数の実装にもかなり多くの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張を使用しています．ここでは，特に解説しないのでそういうものだと思っておいてください．なお，このプログラムはプロダクションで使うことを前提にしていませんので，そこはご注意ください．&lt;a href=&#34;#fnref11&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn12&#34;&gt;&lt;p&gt;この機能は型演算子を定義しないで再エクスポートなどをする場合にも使用されるため，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ExplicitNamespaces&#34;&gt;&lt;code&gt;ExplicitNamespaces&lt;/code&gt;拡張&lt;/a&gt;として切り離されています．&lt;a href=&#34;#fnref12&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn13&#34;&gt;&lt;p&gt;この機能は&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ConstrainedClassMethods&#34;&gt;&lt;code&gt;ConstrainedClassMethods&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref13&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn14&#34;&gt;&lt;p&gt;型制約が小さいとは，型変数とコンストラクタと変数の組の出現が少ないということです．&lt;a href=&#34;#fnref14&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn15&#34;&gt;&lt;p&gt;より正確には，&lt;code&gt;FunctionalDependencies&lt;/code&gt;に対する制限もありますが，ここでは割愛します．&lt;a href=&#34;#fnref15&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn16&#34;&gt;&lt;p&gt;この拡張は，&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeSynonymInstances&#34;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;拡張&lt;/a&gt;として切り離されており，&lt;code&gt;FlexibleInstances&lt;/code&gt;拡張を有効にすると一緒に有効になります．&lt;a href=&#34;#fnref16&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn17&#34;&gt;&lt;p&gt;特に&lt;code&gt;ScopedTypeVariables&lt;/code&gt;拡張を指定する場合，型注釈は必要です．&lt;a href=&#34;#fnref17&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn18&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=347246&#34;&gt;“&lt;span class=&#34;ascii&#34;&gt;Generalising Monads to Arrows&lt;/span&gt;”&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;, John Hughes, in Science of Computer Programming 37, pp. 67&lt;/span&gt;–&lt;span class=&#34;ascii&#34;&gt;111, May 2000&lt;/span&gt;&lt;a href=&#34;#fnref18&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn19&#34;&gt;&lt;p&gt;一見，この構文は単純な脱糖を行うと脱糖後のプログラムが非常に冗長になるように思えます．しかし，&lt;code&gt;Arrow&lt;/code&gt;クラスのメソッドに設けられている書き換え規則によって，最終的に妥当な大きさまで脱糖後のプログラムが小さくなってくれます．&lt;a href=&#34;#fnref19&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/windows-gotchas-en.html&#34; lang=&#34;en&#34;&gt;Errors and the workarounds frequently encountered when dealing with Haskell on Windows&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/main-tester.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-05-13-yaml-th.html</id><title type="text">Haskell で型安全に YAML ファイルをビルド時に埋め込む</title><updated>2018-05-13T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-05-13-yaml-th.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Haskell で型安全に YAML ファイルをビルド時に埋め込む&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-05-13&#34; itemprop=&#34;datePublished&#34;&gt;
        May 13, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;ザックリ言えば「&lt;a href=&#34;https://ryota-ka.hatenablog.com/entry/2018/02/14/103000&#34;&gt;Template Haskell でコード中に JSON を埋め込んだりコンパイル時にファイルから型安全に読み込んだりする - ryota-ka’s blog&lt;/a&gt;」という記事の YAML 版です．&lt;/p&gt;
&lt;p&gt;ただし，ryota さんの記事では Template Haskell を解説しながら JSON を読み込む関数を定義していますが， YAML 版は &lt;a href=&#34;https://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt; パッケージに同様の関数が既にあるので特に解説はしません． あくまでも Haskell の型システムとメタプログラミングを感じてもらえたらなぁと．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ソースコードは全てこの&lt;a href=&#34;https://github.com/matsubara0507/sample-yaml-th&#34;&gt;リポジトリ&lt;/a&gt;にまとめてある．&lt;/p&gt;
&lt;h1 id=&#34;yaml-を埋め込む&#34;&gt;YAML を埋め込む&lt;/h1&gt;
&lt;p&gt;次のような設定ファイルに関する型があったとします．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; columns ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; languageExtensions ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yaml パッケージで YAML にデコードするためには &lt;a href=&#34;https://hackage.haskell.org/package/aeson&#34;&gt;aeson&lt;/a&gt; の &lt;a href=&#34;https://hackage.haskell.org/package/aeson-1.3.1.1/docs/Data-Aeson.html#t:FromJSON&#34;&gt;&lt;code&gt;FromJSON&lt;/code&gt;&lt;/a&gt; 型クラスのインスタンスである必要がある． &lt;code&gt;FromJSON&lt;/code&gt; のインスタンスに凝ってもしょうがないので，今回は &lt;code&gt;Generics&lt;/code&gt; を使って適当に定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveGeneric #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.Generics&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; columns ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; languageExtensions ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromJSON&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Config&lt;/code&gt; 型のデフォルト値を YAML ファイルで記述したいとする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# template/.config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;columns:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 80&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;languageExtensions:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをコンパイル時に埋め込んでかつ型検査も行いたい． そのためには Template Haskell と yaml パッケージの &lt;a href=&#34;https://hackage.haskell.org/package/yaml-0.8.30/docs/Data-Yaml-TH.html#v:decodeFile&#34;&gt;&lt;code&gt;Data.Yaml.TH.decodeFile&lt;/code&gt;&lt;/a&gt; 関数を用いる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;decodeFile ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Lift&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;FromJSON&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; FilePath &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Q&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TExp&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TExp a&lt;/code&gt; 型というのは型付きの &lt;code&gt;Exp&lt;/code&gt; 型らしいが，ぼくはあまりよく分からないので割愛． 型を見ればわかるように，&lt;code&gt;Lift&lt;/code&gt; 型クラスのインスタンスにもなってなきゃいけない． &lt;code&gt;DerivingLift&lt;/code&gt; 言語拡張を使えば簡単に定義できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DeriveLift #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; import &lt;span class=&#34;dt&#34;&gt;Language.Haskell.TH.Syntax&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- template-haskell package&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; columns ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; languageExtensions ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Lift&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単で，次のようにすればよい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;defaultConfig ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;defaultConfig &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$$&lt;/span&gt;(decodeFile &lt;span class=&#34;st&#34;&gt;&amp;quot;./template/.config.yaml&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意点として，Template Haskell の制約より &lt;code&gt;Config&lt;/code&gt; 型の定義と &lt;code&gt;defaultConfig&lt;/code&gt; 関数の定義は別ファイルに分けなければいけない．&lt;/p&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ stack ghci
&amp;gt;&amp;gt; defaultConfig
Config {columns = 80, languageExtensions = []}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;試しに間違えてみよう&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat template/.config.yaml
column: 80
languageExtensions: []
$ stack build
sample-yaml-th-0.1.0.0: build (lib)
Preprocessing library for sample-yaml-th-0.1.0.0..
Building library for sample-yaml-th-0.1.0.0..
[1 of 2] Compiling Sample.Config.Internal ( src\Sample\Config\Internal.hs, .stack work\dist\5c8418a7\build\Sample\Config\Internal.o )
[2 of 2] Compiling Sample.Config    ( src\Sample\Config.hs, .stack-work\dist\5c8418a7\build\Sample\Config.o )

C:\Users\hoge\haskell\sample-yaml-th\src\Sample\Config.hs:14:20: error:
    • Aeson exception:
Error in $: key &amp;quot;columns&amp;quot; not present
    • In the Template Haskell splice
        $$(Y.decodeFile &amp;quot;./template/.config.yaml&amp;quot;)
      In the expression: $$(Y.decodeFile &amp;quot;./template/.config.yaml&amp;quot;)
      In an equation for ‘defaultConfig’:
          defaultConfig = $$(Y.decodeFile &amp;quot;./template/.config.yaml&amp;quot;)
   |
14 | defaultConfig = $$(Y.decodeFile &amp;quot;./template/.config.yaml&amp;quot;)
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;おまけ-with-extensible&#34;&gt;おまけ : with Extensible&lt;/h1&gt;
&lt;p&gt;さぁココからが本題！ &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; という神パッケージを使ってリファクタリングをしてみよう！！&lt;/p&gt;
&lt;h2 id=&#34;問題点&#34;&gt;問題点&lt;/h2&gt;
&lt;p&gt;大した問題ではないんだけど&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;ファイルを分けなければいけないのが悲しい&lt;/li&gt;
&lt;li&gt;YAML のキーがキャメルケース(&lt;code&gt;languageExtensions&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;extensible-パッケージ&#34;&gt;extensible パッケージ&lt;/h2&gt;
&lt;p&gt;言わずもがな，拡張可能なレコードやバリアントを提供するパッケージだ． (詳しくは，最近急ピッチで充実されている&lt;a href=&#34;https://wiki.hask.moe/&#34;&gt;攻略Wiki&lt;/a&gt;を読むといいんじゃないんかな？)&lt;/p&gt;
&lt;p&gt;例えば，さっきから使っている &lt;code&gt;Config&lt;/code&gt; 型を &lt;code&gt;extensible&lt;/code&gt; レコード型で書くと次のように書ける&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;root&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;path-format&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;地味にうれしいことに，extensible であれば関数名では許されないハイフンが含んだフィールド名も定義できるのだ．&lt;/p&gt;
&lt;h2 id=&#34;リファクタリング&#34;&gt;リファクタリング&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Data.Yaml.TH.decodeFile&lt;/code&gt; を使うには &lt;code&gt;FromJSON&lt;/code&gt; 型クラスと &lt;code&gt;Lift&lt;/code&gt; 型クラスのインスタンスにしなければいけない． でも安心して欲しい． どちらも最新の extensible-0.4.9 では定義済みだ(そして extensible のレコードは &lt;code&gt;type&lt;/code&gt; 宣言なので追加でインスタンスを定義する必要は無い)．&lt;/p&gt;
&lt;p&gt;ただし，extensible-0.4.9 はまだ Stackage の LTS にも nightly にも追加されていないので &lt;code&gt;stack.yaml&lt;/code&gt; に追加する必要がある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-11.9&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; .&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; extensible-0.4.9&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Lift&lt;/code&gt; 型クラスのインスタンスは extensible で定義済みなので1つ目のファイルを分けるはクリアーだ． 実は2つもクリアーしている． 拡張可能レコードの &lt;code&gt;FromJson&lt;/code&gt; 型クラスのインスタンスは &lt;code&gt;&amp;quot;path-format&amp;quot;&lt;/code&gt; のようなハイフンを含んだ文字列もそのまま扱ってくれる．&lt;/p&gt;
&lt;p&gt;以下が extensible 版の &lt;code&gt;Config&lt;/code&gt; 型に対応する YAML ファイルだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# template/.extensible-config.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;columns:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 80&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;language-extensions:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに実行してみよう！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack ghci
&amp;gt;&amp;gt; Sample.Extensible.Config.defaultConfig
columns @= 80 &amp;lt;: language-extensions @= [] &amp;lt;: nil&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;デフォルトで置き換える&#34;&gt;デフォルトで置き換える&lt;/h2&gt;
&lt;p&gt;最後に簡単な実行ファイルを実装してみる． 設定ファイルのパスを与えると読みに行き，足りない部分は先ほどから埋め込んでるデフォルト値に置き換えて出力するモノだ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;quot;./template/.example.yaml&amp;quot;
columns: 100
$ stack exec -- pconfig &amp;quot;./template/.example.yaml&amp;quot;
columns @= 100 &amp;lt;: language-extensions @= [] &amp;lt;: nil
$ stack exec -- pconfig
columns @= 80 &amp;lt;: language-extensions @= [] &amp;lt;: nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もちろんパスにファイルが無ければデフォルトのモノを出力するだけだ．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さてどうすれば良いだろうか？ 例えば，&lt;code&gt;FromJSON&lt;/code&gt; 型クラスの &lt;code&gt;Meybe a&lt;/code&gt; 型のインスタンスはフィールドが無い場合に &lt;code&gt;Nothing&lt;/code&gt; を与えてくれるので， &lt;code&gt;Config&lt;/code&gt; 型の各フィールドを &lt;code&gt;Maybe&lt;/code&gt; でラップするというのはどうだろう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;root&amp;quot; &amp;gt;: Maybe Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;path-format&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールドが2つなら良いが多くなってきたら辛そうだ…&lt;/p&gt;
&lt;h3 id=&#34;必殺-nullable&#34;&gt;必殺 Nullable&lt;/h3&gt;
&lt;p&gt;全てを &lt;code&gt;Meybe&lt;/code&gt; でラップする場合は &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.9/docs/Data-Extensible-Nullable.html&#34;&gt;&lt;code&gt;Nullable&lt;/code&gt;&lt;/a&gt; を使うと良いだろう(ないしは &lt;code&gt;RecordOf Maybe&lt;/code&gt;)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nullable h :* xs&lt;/code&gt; も既に &lt;code&gt;FromJson&lt;/code&gt; 型クラスのインスタンスになっているのでそのまま YAML を読み込める． あとは次のようなデフォルト値と &lt;code&gt;Nullable&lt;/code&gt; を与えたら &lt;code&gt;Nothing&lt;/code&gt; の部分だけデフォルト値で置き換えた値を返す関数を実装してやればよい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fromNullable ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; h) &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;fromNullable def &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  hmapWithIndex &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \m x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; fromMaybe (hlookup m def) (getNullable x)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extensible ならこうやって全てのフィールドに対し走査する関数が使える．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;あとはこんな感じ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE NoImplicitPrelude #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds         #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO.Directory&lt;/span&gt;      (doesFileExist)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt; (getArgs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; data-line-number=&#34;15&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; data-line-number=&#34;16&#34;&gt;  path &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; listToMaybe &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getArgs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; data-line-number=&#34;17&#34;&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfigWith defaultConfig path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; data-line-number=&#34;18&#34;&gt;  hPutBuilder stdout &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; encodeUtf8Builder (tshow config)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readConfigWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; FilePath &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; data-line-number=&#34;21&#34;&gt;readConfigWith def path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-22&#34; data-line-number=&#34;22&#34;&gt;  file &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readFileBinaryWith &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-23&#34; data-line-number=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; Y.decodeEither file &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y.Null&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-24&#34; data-line-number=&#34;24&#34;&gt;    pure def&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-25&#34; data-line-number=&#34;25&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-26&#34; data-line-number=&#34;26&#34;&gt;    config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; either (error &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; show) pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; Y.decodeEither&amp;#39; file&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-27&#34; data-line-number=&#34;27&#34;&gt;    pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromNullable def config&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-28&#34; data-line-number=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-29&#34; data-line-number=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;readFileBinaryWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; FilePath &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-30&#34; data-line-number=&#34;30&#34;&gt;readFileBinaryWith def path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-31&#34; data-line-number=&#34;31&#34;&gt;  doesFileExist path &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; bool (pure def) (readFileBinary path)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いろいろとインポートするのがめんどくさくて &lt;code&gt;rio&lt;/code&gt; ライブラリを使っているが，あんまり気にしないで．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html&#34;&gt;前回の記事&lt;/a&gt;に書いた &lt;a href=&#34;https://github.com/matsubara0507/taskpad&#34;&gt;&lt;code&gt;taskpad&lt;/code&gt;&lt;/a&gt; にこの機能を追加してる．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html</id><title type="text">オレ的 Haskell で CLI を作る方法 2018</title><updated>2018-05-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;オレ的 Haskell で CLI を作る方法 2018&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-05-10&#34; itemprop=&#34;datePublished&#34;&gt;
        May 10, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt; &lt;a href=&#34;/tags/rio.html&#34;&gt;rio&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;現在 &lt;a href=&#34;https://github.com/matsubara0507/taskpad&#34;&gt;TaskPad&lt;/a&gt; という簡易的なタスク管理(編集)ツールを Haskell で作っていて，少し CLI を作るうえでのオレ的ノウハウが溜まったのでメモっとく．&lt;/p&gt;
&lt;h2 id=&#34;taskpad&#34;&gt;TaskPad&lt;/h2&gt;
&lt;p&gt;先に，何を作ってるかを書いておく． まだ完成していないが，気持ちは次のような Yaml ファイルを編集して自身のタスク管理をしようかなと考えている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;memo:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;tasks:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;1:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;done:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;children:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hello&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;2:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;done:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; false&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;children:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; world&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fu&#34;&gt;date:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;20180504&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現状できている CLI は次のような感じ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ taskpad --help
taskpad - operate daily tasks

Usage: taskpad [-v|--verbose] [-d|--date DATE] COMMAND [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &amp;quot;debug&amp;quot;
  -d,--date DATE           Task&amp;#39;s date
  --version                Show version
  -h,--help                Show this help text

Available commands:
  new                      Create a new task file. Note: if don&amp;#39;t use --date
                           option then use today&amp;#39;s date.
  add                      Add Task
  done                     Done Task
  tasks                    Show Tasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;taskpad new&lt;/code&gt; で Yaml ファイルを生成し，&lt;code&gt;taskpad add &amp;quot;hoge&amp;quot;&lt;/code&gt; “hoge” というタスクを追加し，&lt;code&gt;taskpad done 1&lt;/code&gt; で1番目のタスクを完了したことにし，&lt;code&gt;taskpad tasks&lt;/code&gt; でタスクの一覧を出力する．&lt;/p&gt;
&lt;h2 id=&#34;ノウハウ&#34;&gt;ノウハウ？&lt;/h2&gt;
&lt;p&gt;たぶん他ではあんまり書いてない，いくつかのことを書いておく．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optparse-applicative + extensible を使った CLI のオプションパーサー
&lt;ul&gt;
&lt;li&gt;特にサブコマンドをバリアントで表現しているのが面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;optparse-applicative でバージョンを表示&lt;/li&gt;
&lt;li&gt;バリアントと型クラスを用いた分岐&lt;/li&gt;
&lt;li&gt;rio + extensible で大域変数&lt;/li&gt;
&lt;li&gt;rio を用いてロギング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オプションパーサーに &lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を用いている． オプションパーサーには &lt;a href=&#34;https://hackage.haskell.org/package/optparse-simple&#34;&gt;optparse-simple&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/optparse-generic&#34;&gt;optparse-generics&lt;/a&gt; など他にもいくつかあるが，サブコマンドのような多少込み入ったコトをしようとすると optparse-applicative が欲しくなる． &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; ライブラリは，なんとなく最近使っている alt. Prelude ライブラリ(詳しくは&lt;a href=&#34;https://github.com/commercialhaskell/rio#readme&#34;&gt;本家の README&lt;/a&gt; か&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html&#34;&gt;前の僕の記事&lt;/a&gt;を読んで)． &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; は Haskell の残念なレコード構文や直和型の代わりに，拡張可能なレコード・バリアント型を提供してくれる面白いパッケージだ．&lt;/p&gt;
&lt;h3 id=&#34;import-と言語拡張&#34;&gt;import と言語拡張&lt;/h3&gt;
&lt;p&gt;extensible はかなり言語拡張を用いる． 以降では，めんどくさいので &lt;code&gt;import&lt;/code&gt; も含め明示的に扱わない． 以下のコードが先頭にくっついてるとビルドはできるはずだ(たぶん，試してない)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds             #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts      #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiParamTypeClasses #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels      #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TemplateHaskell       #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications      #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies          #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators         #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Text&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO.Time&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Functor.Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;extensible-で-optparse-applicative&#34;&gt;extensible で optparse-applicative&lt;/h3&gt;
&lt;p&gt;少しだけ &lt;code&gt;optparse-applicative&lt;/code&gt; について説明しておく． optparse-applicative は CLI オプションをパースして任意の型にマッピングしてくれる． 主に次のようにして用いる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; run &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; execParser opts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;    opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; info (options &lt;span class=&#34;fu&#34;&gt;&amp;lt;**&amp;gt;&lt;/span&gt; helper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;         &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fullDesc&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; header &lt;span class=&#34;st&#34;&gt;&amp;quot;taskpad - operate daily tasks&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;options ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;options &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:execParser&#34;&gt;&lt;code&gt;execParser&lt;/code&gt;&lt;/a&gt; 関数は &lt;code&gt;ParserInfo a -&amp;gt; IO a&lt;/code&gt; という型を持つ． &lt;a href=&#34;http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:helper&#34;&gt;&lt;code&gt;helper :: Parser (a -&amp;gt; a)&lt;/code&gt;&lt;/a&gt; は &lt;code&gt;--help&lt;/code&gt; オプションを与えてくれる関数だ． &lt;code&gt;info&lt;/code&gt; 関数と &lt;code&gt;fullDesc&lt;/code&gt; や &lt;code&gt;header&lt;/code&gt; により，&lt;code&gt;Parser a&lt;/code&gt; 型のパーサーに対し &lt;code&gt;--help&lt;/code&gt; で出力する情報を追加して &lt;code&gt;ParserInfo a&lt;/code&gt; 型に変換する．&lt;/p&gt;
&lt;h4 id=&#34;型の定義&#34;&gt;型の定義&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;extensible&lt;/code&gt; で &lt;code&gt;optparse-applicative&lt;/code&gt; を使うとは即ち，任意の型，ここでいう &lt;code&gt;Options&lt;/code&gt; 型が拡張可能レコードや拡張可能バリアントであるというシチュエーションだ． 今回は &lt;code&gt;Options&lt;/code&gt; 型をまずは次のように定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;verbose&amp;quot; &amp;gt;: Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;subcmd&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;new&amp;quot;   &amp;gt;: ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; data-line-number=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; data-line-number=&#34;12&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;SubCmd&lt;/code&gt; 型が拡張可能なバリアント型だ． ちなみに，Haskell のプリミティブな代数型データ構造で記述すると以下のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;  {&lt;span class=&#34;ot&#34;&gt; verbose ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; date    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;  ,&lt;span class=&#34;ot&#34;&gt; subcmd  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;New&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Done&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tasks&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自分的に，extensible を使う利点は3つある．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;フィールド名と関数名の名前空間が別なので衝突が無い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 宣言によりレコードに対しいちいち型クラスのインスタンスを定義する必要が無い(既にあるものは)&lt;/li&gt;
&lt;li&gt;型レベルリストによってフィールド全体に対する走査を行える&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;逆にデメリットは，(2) にも関係するのだが，&lt;code&gt;type&lt;/code&gt; 宣言のためインスタンスの定義が衝突することがしばしばある(これはインスタンスのスコープをコントロールできないという Haskell 全体での問題でもある)．&lt;/p&gt;
&lt;h4 id=&#34;拡張可能レコードのパーサー&#34;&gt;拡張可能レコードのパーサー&lt;/h4&gt;
&lt;p&gt;まずは拡張可能レコード(&lt;code&gt;Options&lt;/code&gt; 型)のパーサーを書いてみる． バリアント(&lt;code&gt;SubCmd&lt;/code&gt; 型)のは &lt;code&gt;undefined&lt;/code&gt; としておこう． 細かい &lt;code&gt;optparse-applicative&lt;/code&gt; の構文は割愛する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;options ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;options &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; switch (long &lt;span class=&#34;st&#34;&gt;&amp;quot;verbose&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; short &lt;span class=&#34;ch&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable verbose mode: verbosity level \&amp;quot;debug\&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date    &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; optional (strOption (long &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; short &lt;span class=&#34;ch&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;DATE&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Task&amp;#39;s date&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;subcmd  &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; subcmdParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;subcmdParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;subcmdParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードの値を構築するには &lt;code&gt;#fieldName @= fieldValue&lt;/code&gt; というの &lt;code&gt;&amp;lt;:&lt;/code&gt; で直列につないでいく(細かくは extensible の解説記事を読んで)． &lt;code&gt;&amp;lt;@=&amp;gt;&lt;/code&gt; 演算子はモナドなフィールドの値を持ち上げてくれるバージョンの &lt;code&gt;@=&lt;/code&gt; 演算子だ． &lt;code&gt;$&lt;/code&gt; の右側は，正確には違うが，次の型のようなイメージとなる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ch&#34;&gt;&amp;#39;[ Parser (&amp;quot;verbose&amp;quot; &amp;gt;: Bool)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt; , &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt; , &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;subcmd&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt; ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haskeller っであれば，後はリスト型で言う &lt;code&gt;sequence&lt;/code&gt; できれば良さそうとわかるだろう． その型レベルリスト版が &lt;code&gt;hsequence&lt;/code&gt; だ．&lt;/p&gt;
&lt;h4 id=&#34;拡張可能バリアントのパーサー&#34;&gt;拡張可能バリアントのパーサー&lt;/h4&gt;
&lt;p&gt;さて，今回の自分的なメインディッシュだ． 仮に通常の直和型であれば次のように書くだろう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;subcmdParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;subcmdParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subparser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; command &lt;span class=&#34;st&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;   (pure &lt;span class=&#34;dt&#34;&gt;New&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;   (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; strArgument (metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;TEXT&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class=&#34;st&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Done&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; argument auto (metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class=&#34;st&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; (pure &lt;span class=&#34;dt&#34;&gt;Tasks&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;withInfo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;withInfo opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; info (helper &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; opts) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; progDesc&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この程度のサブコマンドならそこまで複雑じゃなく書けた． しかし悲しいことに，例えば &lt;code&gt;command &amp;quot;tasks&amp;quot;&lt;/code&gt; の行が無くてもビルドは通る． 即ち，&lt;strong&gt;直和型に対し網羅性を型検査で保証することが出来ない&lt;/strong&gt;．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;対して extensible のバリアントならどうだろうか． 理想的にはバリアントと同じフィールドを持つレコードの各要素が &lt;code&gt;ParserInfo a&lt;/code&gt; であるような値から自動で導出してくれると良い． つまり次のように扱いたい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;subcmdParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubCmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;subcmdParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; variantFrom&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;new   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (pure () &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Create a new task file. Note: if don&amp;#39;t use --date option then use today&amp;#39;s date.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;add   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (strArgument (metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;TEXT&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Task contents&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Add Task&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;done  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (argument auto (metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Done task from id&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Done Task&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;tasks &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (pure () &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Show Tasks&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;variantFrom ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; data-line-number=&#34;10&#34;&gt;variantFrom &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Wrapper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; a &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; data-line-number=&#34;14&#34;&gt;  _Wrapper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; id&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@=&lt;/code&gt; と &lt;code&gt;&amp;lt;:&lt;/code&gt; で構築したレコードが &lt;code&gt;Record = RecordOf Identity&lt;/code&gt; ではなく，&lt;code&gt;RecordOf h&lt;/code&gt; であるためには &lt;code&gt;h&lt;/code&gt; が &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Wrapper.html#t:Wrapper&#34;&gt;&lt;code&gt;Wrapper&lt;/code&gt;&lt;/a&gt; 型クラスのインスタンスである必要がある(というかインスタンスでありさえすれば良い)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さてキモは &lt;code&gt;variantFrom&lt;/code&gt; だ． 通常の直和型版の &lt;code&gt;subcmdParser&lt;/code&gt; 関数を見ればわかるように，&lt;code&gt;command&lt;/code&gt; 関数で作成した値をモノイドで畳み込めばいいので，お察しの通り(??) &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#v:hfoldMap&#34;&gt;&lt;code&gt;hfoldMap&lt;/code&gt;&lt;/a&gt; を使う． ついでに &lt;code&gt;command&lt;/code&gt; の一引数目に渡すサブコマンドの文字列はフィールド名から取得するようにしよう． この場合，インデックスと &lt;code&gt;KnownSymbol&lt;/code&gt; 制約を渡す必要があるので &lt;code&gt;hfoldMap&lt;/code&gt; の代わりに &lt;code&gt;hfoldMapWithIndexFor&lt;/code&gt; 関数を使う．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;variantFrom ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyIs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt;) xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParserInfo&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;variantFrom &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subparser &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; subcmdVariant&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;    subcmdVariant &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hfoldMapWithIndexFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyIs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \m x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; k &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; symbolVal (proxyAssocKey m)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; command k ((&lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; m &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; pure) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getField x)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果として，&lt;strong&gt;extensible のバリアント版は網羅性を型検査によって検証できるようになった！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;バージョンの表示&#34;&gt;バージョンの表示&lt;/h3&gt;
&lt;p&gt;バージョンの表示は他のコマンドと違い，コマンドが間違って(例えばサブコマンドが無い)いても &lt;code&gt;--version&lt;/code&gt; という引数さえあれば優先的にバージョンを表示する必要がある． そのようなオプションを追加する場合には &lt;a href=&#34;http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:infoOption&#34;&gt;&lt;code&gt;infoOption&lt;/code&gt;&lt;/a&gt; 関数を使う．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Paths_taskpad&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Meta&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Version&lt;/span&gt;        (&lt;span class=&#34;dt&#34;&gt;Version&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Version&lt;/span&gt;        &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Version&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Development.GitRev&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; run &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; execParser opts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;    opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; info (options &lt;span class=&#34;fu&#34;&gt;&amp;lt;**&amp;gt;&lt;/span&gt; version Meta.version &lt;span class=&#34;fu&#34;&gt;&amp;lt;**&amp;gt;&lt;/span&gt; helper)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;         &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;version ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Version&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; data-line-number=&#34;13&#34;&gt;version v &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; infoOption (showVersion v)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; long &lt;span class=&#34;st&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; data-line-number=&#34;15&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Show version&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;showVersion ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Version&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; data-line-number=&#34;18&#34;&gt;showVersion v &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; unwords&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-19&#34; data-line-number=&#34;19&#34;&gt;  [ &lt;span class=&#34;st&#34;&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-20&#34; data-line-number=&#34;20&#34;&gt;  , Version.showVersion v &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-21&#34; data-line-number=&#34;21&#34;&gt;  , &lt;span class=&#34;st&#34;&gt;&amp;quot;Git revision&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-22&#34; data-line-number=&#34;22&#34;&gt;  , &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(gitHash)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-23&#34; data-line-number=&#34;23&#34;&gt;  , &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(gitCommitCount) &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; commits)&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-24&#34; data-line-number=&#34;24&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;**&amp;gt;&lt;/code&gt; 演算子はただの &lt;code&gt;flip (&amp;lt;*&amp;gt;)&lt;/code&gt; だ． ちなみに，&lt;code&gt;version&lt;/code&gt; と &lt;code&gt;helper&lt;/code&gt; の適用順を入れ替えると &lt;code&gt;--help&lt;/code&gt; の表示がほんの少しだけ変わる．&lt;/p&gt;
&lt;h3 id=&#34;バリアントと型クラス&#34;&gt;バリアントと型クラス&lt;/h3&gt;
&lt;p&gt;こっからは &lt;code&gt;run :: Options -&amp;gt; IO ()&lt;/code&gt; 関数を考える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;run opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;  date &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; maybe getTodaysDate pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;  matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;    undefined &lt;span class=&#34;co&#34;&gt;-- ???&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;    (opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;subcmd)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getTodaysDate&lt;/code&gt; 関数は自身で定義しているとする． &lt;code&gt;--date&lt;/code&gt; オプションを指定しなかった場合には今日の日付を取得する． 問題はサブコマンドの分岐だ．&lt;/p&gt;
&lt;p&gt;バリアントの分岐には &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField&#34;&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; 関数を用いる． &lt;code&gt;matchField&lt;/code&gt; 関数の型は &lt;code&gt;RecordOf (Match h r) xs -&amp;gt; VariantOf h xs -&amp;gt; r&lt;/code&gt; となる． 一引数目のレコードと二引数目のバリアントの &lt;code&gt;xs&lt;/code&gt; が等しいということから共通のフィールドを期待しているのが分かるだろう． レコード側の各フィールドに，各バリアントに対するフィールドの値を受け取り &lt;code&gt;r&lt;/code&gt; 型の返り値の関数を記述するといった具合だ(この部分が &lt;code&gt;Match h r&lt;/code&gt; に集約されている)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;今回は，このレコードの構築に型クラスを用いる． 以下のような型クラスを定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  run&amp;#39; ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AssocValue&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実装は置いておいて，インスタンスを与えてみよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;  run&amp;#39; _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;  run&amp;#39; _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;  run&amp;#39; _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;  run&amp;#39; _ _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 関数の &lt;code&gt;matchField&lt;/code&gt; 関数の引数は次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;run opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  date &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; maybe getTodaysDate pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;    (htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; run&amp;#39; m date &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runIdentity))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;    (opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;subcmd)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy @ Run&lt;/code&gt; の &lt;code&gt;@&lt;/code&gt; の部分は &lt;code&gt;TypeApplications&lt;/code&gt; 拡張のモノだ． フィールドの値は &lt;code&gt;Identity x&lt;/code&gt; 型として来るので &lt;code&gt;runIdentity&lt;/code&gt; 関数を用いて剥がし，&lt;code&gt;run&#39; m date&lt;/code&gt; へと適用する． もちろんサブコマンドのインスタンスを書き忘れていた場合は，ちゃんと型検査に引っかかる！&lt;/p&gt;
&lt;h3 id=&#34;rio-で大域変数&#34;&gt;rio で大域変数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rio&lt;/code&gt; で大域変数を扱うには &lt;code&gt;RIO env&lt;/code&gt; モナドを用いる． 適当なアプリケーションモナドを定義してやろう． 今回はひとつしか大域変数が無いのであんまりメリットを感じないかもしれないが…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaskPad&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;date&amp;quot; &amp;gt;: Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; data-line-number=&#34;5&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 関数も書き直してやる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;run opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;  date &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; maybe getTodaysDate pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; data-line-number=&#34;5&#34;&gt;         &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; data-line-number=&#34;6&#34;&gt;  runRIO env &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-7&#34; data-line-number=&#34;7&#34;&gt;    matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-8&#34; data-line-number=&#34;8&#34;&gt;      (htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; run&amp;#39; m &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runIdentity))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-9&#34; data-line-number=&#34;9&#34;&gt;      (opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;subcmd)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  run&amp;#39; ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AssocValue&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaskPad&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに &lt;code&gt;new&lt;/code&gt; サブコマンドを書いてみよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;  run&amp;#39; _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;    date &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;    writeMemo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mkMemo date&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkMemo&lt;/code&gt; や &lt;code&gt;writeMemo&lt;/code&gt; については次のように定義している． &lt;code&gt;Memo&lt;/code&gt; 型も拡張可能レコードだ． 最近の extensible のアップデートで拡張可能レコードが &lt;code&gt;ToJson&lt;/code&gt; 型クラスと &lt;code&gt;FromJson&lt;/code&gt; 型クラスのインスタンスになったので，Yaml への変換は特にインスタンスを書くことなく行えるようになった．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Memo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;date&amp;quot;  &amp;gt;: Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; data-line-number=&#34;5&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Task&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;memo&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; data-line-number=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TaskFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;children&amp;quot; &amp;gt;: [SubTask]])&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SubTask&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaskFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaskFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-14&#34; data-line-number=&#34;14&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-15&#34; data-line-number=&#34;15&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkMemo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Memo&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-18&#34; data-line-number=&#34;18&#34;&gt;mkMemo date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-20&#34; data-line-number=&#34;20&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;tasks &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; mempty&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-21&#34; data-line-number=&#34;21&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;memo  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; mempty&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-22&#34; data-line-number=&#34;22&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-23&#34; data-line-number=&#34;23&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-24&#34; data-line-number=&#34;24&#34;&gt;&lt;span class=&#34;ot&#34;&gt;writeMemo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Memo&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-25&#34; data-line-number=&#34;25&#34;&gt;writeMemo memo &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-26&#34; data-line-number=&#34;26&#34;&gt;  writeFileBinary (Text.unpack &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; memo &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.yaml&amp;quot;&lt;/span&gt;) (Y.encode memo)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;rio-でロギング&#34;&gt;rio でロギング&lt;/h3&gt;
&lt;p&gt;ロギングは実用アプリケーションの重要な要素だろう． &lt;code&gt;rio&lt;/code&gt; であればまぁまぁ簡単に書ける．&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;Env&lt;/code&gt; にロギング用の関数を足してやる． &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:LogFunc&#34;&gt;&lt;code&gt;LogFunc&lt;/code&gt;&lt;/a&gt; 型や &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:HasLogFunc&#34;&gt;&lt;code&gt;HasLogFunc&lt;/code&gt;&lt;/a&gt; 型クラスは &lt;code&gt;rio&lt;/code&gt; ライブラリに定義されているものだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;date&amp;quot;   &amp;gt;: Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; data-line-number=&#34;4&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasLogFunc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-7&#34; data-line-number=&#34;7&#34;&gt;  logFuncL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lens (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger) (\x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;ot&#34;&gt;`set`&lt;/span&gt; y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実はこれだけで &lt;code&gt;TaskPad&lt;/code&gt; モナド(すなわち &lt;code&gt;RIO Env&lt;/code&gt; モナド)の中で自由にロギング関数を呼べるようになる． 試しに &lt;code&gt;new&lt;/code&gt; サブコマンドにロギングを足してみよう． &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logInfo&#34;&gt;&lt;code&gt;logInfo&lt;/code&gt;&lt;/a&gt; 関数がロギング関数のひとつだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; data-line-number=&#34;2&#34;&gt;  run&amp;#39; _ _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; data-line-number=&#34;3&#34;&gt;    date &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; data-line-number=&#34;4&#34;&gt;    writeMemo &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mkMemo date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-5&#34; data-line-number=&#34;5&#34;&gt;    logInfo (display &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;create new task&amp;#39;s file: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; date &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.yaml&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;run&lt;/code&gt; 関数を書き換えよう(&lt;code&gt;Env&lt;/code&gt; 型の中身が変わったので)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; data-line-number=&#34;2&#34;&gt;run opts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; data-line-number=&#34;3&#34;&gt;  date    &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; maybe getTodaysDate pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; data-line-number=&#34;4&#34;&gt;  logOpts &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout (opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;verbose)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; data-line-number=&#34;5&#34;&gt;  withLogFunc logOpts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \logger &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; env &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; data-line-number=&#34;7&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; logger&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; data-line-number=&#34;8&#34;&gt;           &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-9&#34; data-line-number=&#34;9&#34;&gt;    runRIO env &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-10&#34; data-line-number=&#34;10&#34;&gt;      matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-11&#34; data-line-number=&#34;11&#34;&gt;        (htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Run&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; run&amp;#39; m &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runIdentity))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-12&#34; data-line-number=&#34;12&#34;&gt;        (opts &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;subcmd)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;LogFunc&lt;/code&gt; 型の値を得るには &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:withLogFunc&#34;&gt;&lt;code&gt;withLogFunc&lt;/code&gt;&lt;/a&gt; 関数を用いるのが良いだろう． &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:LogOptions&#34;&gt;&lt;code&gt;LogOptions&lt;/code&gt;&lt;/a&gt; 型の値(ここでいう &lt;code&gt;logOpts&lt;/code&gt;)を生成する &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logOptionsHandle&#34;&gt;&lt;code&gt;logOptionsHandle&lt;/code&gt;&lt;/a&gt; 関数の二引数目に &lt;code&gt;True&lt;/code&gt; を与えることでログがデバッグ仕様になる(そういえば &lt;code&gt;Options&lt;/code&gt; 型には &lt;code&gt;--verbose&lt;/code&gt; オプションがあった)． ちなみに，デバッグ仕様のときにだけ表示するロギング関数として &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logDebug&#34;&gt;&lt;code&gt;logDebug&lt;/code&gt;&lt;/a&gt; 関数がある．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;早く完成させるぞ&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-04-30T09:55:47+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/01/21/175227</id><title type="text">ぼくのかんがえた最強の拡張可能レコード</title><updated>2018-04-27T11:57:55+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/01/21/175227"/><summary type="html">注意(2018/04) かなり古い記事なので、extensibleの最新のバージョンとはまったく互換性がない __ 動機 GHCに、OverloadedRecordFields(ORF)という拡張の導入が提案されている。 (Records/OverloadedRecordFields/Design – GHCより) Haskellのレコードの深刻な欠点は、フィールドをオーバーロードできないことだ。例えば、 data Person = Person { personId :: Int, name :: String } data Address = Address { personId :: I…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html</id><title type="text">rio ライブラリを試す その１</title><updated>2018-04-13T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;rio ライブラリを試す その１&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-04-13&#34; itemprop=&#34;datePublished&#34;&gt;
        Apr 13, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/rio.html&#34;&gt;rio&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先日，alt. &lt;code&gt;Prelude&lt;/code&gt; を目指している &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;&lt;code&gt;rio&lt;/code&gt;&lt;/a&gt; ライブラリの ver.0.1 がリリースされました． 自作している CLI ツールを試しに &lt;code&gt;rio&lt;/code&gt; で置き換えようかとしてまして，自分の整理のためにまとめてみようと思います．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ただし，&lt;code&gt;rio&lt;/code&gt; 作者ではないし，全部をちゃんと追っていないので間違っているかも． 間違っている場合は&lt;a href=&#34;https://github.com/matsubara0507/source-gh-pages&#34;&gt;このリポジトリに Issue&lt;/a&gt; するか &lt;a href=&#34;https://www.reddit.com/r/haskell_jp&#34;&gt;Reddit&lt;/a&gt; でコメントでもしてください m(_ _ )m&lt;/p&gt;
&lt;h1 id=&#34;readme-でひとめぐり&#34;&gt;README でひとめぐり&lt;/h1&gt;
&lt;p&gt;もともとはビルドツール Stack を作成するために考えたデザインパターンをまとめたものっぽい．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fpcomplete.com/blog/2017/07/the-rio-monad&#34;&gt;The RIO Monad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rio&lt;/code&gt; ライブラリの README にはライブラリのゴール・目的の他に(彼らにとっての)ベストプラクティスが書いてある(&lt;code&gt;rio&lt;/code&gt; 自体がそれに則って作られてる)． ここには翻訳というより，README の各項目の要約を記述する．&lt;/p&gt;
&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rio&lt;/code&gt; ライブラリのゴール(目的)は以下の3つ．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;よく設計された信頼できるライブラリのコレクション&lt;/li&gt;
&lt;li&gt;より優れた Prelude の代替え&lt;/li&gt;
&lt;li&gt;高品質な Haskell コードを書くためのベストプラクティス&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1)により &lt;code&gt;text&lt;/code&gt; や &lt;code&gt;bytesyring&lt;/code&gt; のような，ほとんど &lt;code&gt;base&lt;/code&gt; のようなパッケージを &lt;code&gt;dependencies&lt;/code&gt; に列挙する必要が無くなる． (3)は大域変数(&lt;code&gt;Reader&lt;/code&gt; モナド)やロガーのような実用モナド回りのベストプラクティスが目玉かな(他にもあるけど)．&lt;/p&gt;
&lt;h2 id=&#34;標準ライブラリ&#34;&gt;標準ライブラリ&lt;/h2&gt;
&lt;p&gt;いくつかのパッケージを「標準」ライブラリとして再エクスポートしている． &lt;code&gt;rio&lt;/code&gt; の&lt;a href=&#34;https://github.com/commercialhaskell/rio/blob/311549f5a7c29abf6fc25e3ba7ec5ab6647e2d96/rio/package.yaml#L14&#34;&gt;依存関係&lt;/a&gt;を見る限り，次のパッケージを再エクスポートしているようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bytestring&lt;/li&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;li&gt;deepseq&lt;/li&gt;
&lt;li&gt;directory&lt;/li&gt;
&lt;li&gt;exceptions&lt;/li&gt;
&lt;li&gt;filepath&lt;/li&gt;
&lt;li&gt;hashable&lt;/li&gt;
&lt;li&gt;lens(microlens)&lt;/li&gt;
&lt;li&gt;process&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;unliftio&lt;/li&gt;
&lt;li&gt;unordered-containers&lt;/li&gt;
&lt;li&gt;vector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もちろん，元のパッケージの全ての関数や型を再エクスポートしているのではなく，取捨選択して再エクスポートしている． また，後述する &lt;code&gt;Prelude&lt;/code&gt; の代わりである &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html&#34;&gt;&lt;code&gt;RIO&lt;/code&gt;&lt;/a&gt; モジュールに含まれるものもあれば，&lt;code&gt;RIO.XXX&lt;/code&gt; として別のモジュールとして提供されているものもある．&lt;/p&gt;
&lt;h3 id=&#34;lens&#34;&gt;Lens&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lens&lt;/code&gt; の場合，申し訳程度の関数しか再エクスポートされていない． 基本的に &lt;code&gt;set&lt;/code&gt;・&lt;code&gt;sets&lt;/code&gt;・&lt;code&gt;over&lt;/code&gt;・&lt;code&gt;to&lt;/code&gt; だけだ． 演算子は参照の &lt;code&gt;(.^)&lt;/code&gt; しかない． 今後どうなるか分からないが，現状 &lt;code&gt;(.~)&lt;/code&gt; や &lt;code&gt;(%~)&lt;/code&gt; は無いので替わりに関数を中置演算子にして使うしか無さそうだ．&lt;/p&gt;
&lt;h2 id=&#34;prelude-の代替え&#34;&gt;&lt;code&gt;Prelude&lt;/code&gt; の代替え&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Prelude&lt;/code&gt; の代替えとして &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html&#34;&gt;&lt;code&gt;RIO&lt;/code&gt;&lt;/a&gt; モジュールというのがある． README には部分関数や遅延 I/O のような，よく問題になるものを削除していると書いてある． また，&lt;code&gt;Data.Maybe&lt;/code&gt; や &lt;code&gt;Control.Arrow&lt;/code&gt; のような良く使う &lt;code&gt;base&lt;/code&gt; ライブラリのモジュールが再エクスポートされていたり，&lt;code&gt;mapLeft&lt;/code&gt; や &lt;code&gt;whenM&lt;/code&gt; のような良く使いそうなのに &lt;code&gt;base&lt;/code&gt; には無い関数が&lt;a href=&#34;https://github.com/commercialhaskell/rio/blob/e8c4cba69599aecd9f91c4398aea47ab4eadbb07/rio/src/RIO/Prelude/Extra.hs&#34;&gt;定義されている&lt;/a&gt;． 正直，この辺りがすごい便利．&lt;/p&gt;
&lt;h2 id=&#34;ベストプラクティス&#34;&gt;ベストプラクティス&lt;/h2&gt;
&lt;p&gt;ココからが長い + 意見の分かれるところ． 結構 &lt;code&gt;TODO&lt;/code&gt; と書いてあるところも多いので彼らの中でもまとまってないのかな？？&lt;/p&gt;
&lt;h3 id=&#34;インポートプラクティス&#34;&gt;インポートプラクティス&lt;/h3&gt;
&lt;p&gt;以下をやってほしいらしい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoImplicitPrelude&lt;/code&gt; 言語拡張をオン&lt;/li&gt;
&lt;li&gt;全てのモジュールに &lt;code&gt;import RIO&lt;/code&gt; を追加 (すごいめんどい)&lt;/li&gt;
&lt;li&gt;必要に応じて &lt;code&gt;RIO.XXX&lt;/code&gt; モジュールを &lt;code&gt;qualified&lt;/code&gt; を使ってインポート
&lt;ul&gt;
&lt;li&gt;適切な &lt;code&gt;qualified&lt;/code&gt; の付け方は各モジュールの Haddock の冒頭に書いてある&lt;/li&gt;
&lt;li&gt;例えば &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO-ByteString.html&#34;&gt;&lt;code&gt;import qualified RIO.ByteString as B&lt;/code&gt;&lt;/a&gt; とか&lt;/li&gt;
&lt;li&gt;ドキュメントに &lt;code&gt;qualified&lt;/code&gt; が書いてない場合は &lt;code&gt;qualified&lt;/code&gt; しなくていいのかな？？(例えば &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO-Directory.html&#34;&gt;&lt;code&gt;RIO.Directory&lt;/code&gt;&lt;/a&gt; とか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中置演算子は &lt;code&gt;qualified&lt;/code&gt; しなくていい(他のモジュールと衝突しない限りは)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;言語拡張&#34;&gt;言語拡張&lt;/h3&gt;
&lt;p&gt;「言語拡張を使わないプロジェクトなんて，最近じゃほとんどないよね」とか書いてある． 以下の観点を基にデフォルトで利用しても良さそうな言語拡張を選定したそうだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コミュニティで受け入れられている&lt;/li&gt;
&lt;li&gt;コードを壊すようなことが &lt;strong&gt;ほとんど&lt;/strong&gt; ない&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般的に&lt;/strong&gt; 安全だと考えられている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;割と断言していないのが面白い(笑) 推奨する言語拡張はこちら&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AutoDeriveTypeable
BangPatterns
BinaryLiterals
ConstraintKinds
DataKinds
DefaultSignatures
DeriveDataTypeable
DeriveFoldable
DeriveFunctor
DeriveGeneric
DeriveTraversable
DoAndIfThenElse
EmptyDataDecls
ExistentialQuantification
FlexibleContexts
FlexibleInstances
FunctionalDependencies
GADTs
GeneralizedNewtypeDeriving
InstanceSigs
KindSignatures
LambdaCase
MultiParamTypeClasses
MultiWayIf
NamedFieldPuns
NoImplicitPrelude
OverloadedStrings
PartialTypeSignatures
PatternGuards
PolyKinds
RankNTypes
RecordWildCards
ScopedTypeVariables
StandaloneDeriving
TupleSections
TypeFamilies
TypeSynonymInstances
ViewPatterns&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RecordWildCards&lt;/code&gt; と &lt;code&gt;OverloadedStrings&lt;/code&gt; は議論の余地あり的なことが書いてある(詳しくはもとの README を見て)．&lt;/p&gt;
&lt;h3 id=&#34;ghcオプション&#34;&gt;GHCオプション&lt;/h3&gt;
&lt;p&gt;以下を使いなさいとのコト．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Wall
-Wcompat
-Wincomplete-record-updates
-Wincomplete-uni-patterns
-Wredundant-constraints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どういう形で指定してもいいけど，&lt;code&gt;package.yaml&lt;/code&gt; で書くと楽だし，後述するテンプレートにも書く予定だそうだ． あと，プロダクションコードなら &lt;code&gt;-Werror&lt;/code&gt; をオンにして，最後には確認した方が良いとも書いてある(CIとかでチェックしたいよね)．&lt;/p&gt;
&lt;h3 id=&#34;monads&#34;&gt;Monads&lt;/h3&gt;
&lt;p&gt;まってました！ モナドです． 実用的なプロジェクトを考えるとき，必要になってくるのが大域変数・ロガー・例外・IO だと思うので，気になるのはこの辺りだよね．&lt;/p&gt;
&lt;p&gt;全体としての推奨事項は以下の通り．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IO&lt;/code&gt; を使いたいときは &lt;code&gt;RIO&lt;/code&gt; モナドを使いなさい．
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RIO&lt;/code&gt; モナドは &lt;code&gt;ReaderT env IO&lt;/code&gt; と同じだけど，&lt;code&gt;rio&lt;/code&gt; には &lt;code&gt;RIO&lt;/code&gt; モナドに対する補助関数が含まれるのでぜひ使って．&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIO&lt;/code&gt; モナドで &lt;code&gt;env&lt;/code&gt; の参照関数を書くときは，具体的な型に対する参照関数を書かずに，型クラスを用いた多相的な関数を書くべき(詳しくは後述)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Has&lt;/code&gt; スタイルの型クラスを使えば lens を利用することが出来るよ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;いくつかの良い &lt;code&gt;mtl&lt;/code&gt; スタイルの型クラスも利用する必要は出てくるはず
&lt;ul&gt;
&lt;li&gt;ただし，推奨しているのは &lt;code&gt;MonadReader&lt;/code&gt; &lt;code&gt;MonadIO&lt;/code&gt; &lt;code&gt;MonadUnliftIO&lt;/code&gt; &lt;code&gt;PrimMonad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MonadReader&lt;/code&gt; + &lt;code&gt;Has&lt;/code&gt; の方が &lt;code&gt;MonadLogger&lt;/code&gt; のように新しい型クラスを作るより優れていると思う&lt;/li&gt;
&lt;li&gt;特に &lt;code&gt;MonadBase&lt;/code&gt; &lt;code&gt;MonadBaseControl&lt;/code&gt; &lt;code&gt;MonadMask&lt;/code&gt; &lt;code&gt;MonadCatch&lt;/code&gt; は避けるべき&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;大域変数&#34;&gt;大域変数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; 回りについて． &lt;code&gt;Has&lt;/code&gt; スタイル(パターン)というのがあって，それ自体はこの&lt;a href=&#34;https://hackernoon.com/the-has-type-class-pattern-ca12adab70ae&#34;&gt;ページ&lt;/a&gt;が参考になるのかな？ &lt;code&gt;env&lt;/code&gt; から何らかの値を参照する場合には&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;myFunction ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Foo&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような関数は &lt;strong&gt;やめて&lt;/strong&gt; ，次のように書くのを推奨している．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasConfig&lt;/span&gt; env &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  configL ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lens&amp;#39;&lt;/span&gt; env &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- more on this in a moment&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;myFunction ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasConfig&lt;/span&gt; env &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; env &lt;span class=&#34;dt&#34;&gt;Foo&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで，&lt;code&gt;env&lt;/code&gt; は次のようなレコードを想定しており&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; envConfig ::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうすることで，&lt;code&gt;env&lt;/code&gt; に複数の大域変数を持たせても，うまく機能させることが出来る． また，次のように &lt;code&gt;Env&lt;/code&gt; と &lt;code&gt;Config&lt;/code&gt; それぞれでインスタンスを定義することで，それぞれで利用できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasConfig&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;  configL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; id&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasConfig&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;  configL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lens envConfig (\x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x { envConfig &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; y })&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;ロガー&#34;&gt;ロガー&lt;/h4&gt;
&lt;p&gt;ロガーも同様に &lt;code&gt;Has&lt;/code&gt; スタイルを推奨している． &lt;code&gt;env&lt;/code&gt; にログを出力するための関数(&lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#t:LogFunc&#34;&gt;&lt;code&gt;LogFunc&lt;/code&gt;&lt;/a&gt; 型のもの)を持たせる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; envLogFunc ::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; envConfig ::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの &lt;code&gt;Has&lt;/code&gt; スタイル型クラスは &lt;code&gt;RIO&lt;/code&gt; モジュールに&lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#t:HasLogFunc&#34;&gt;定義してある&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasLogFunc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;  logFuncL &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lens envLogFunc (\x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x { envLogFunc &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; y })&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;LogFunc&lt;/code&gt; 型の値を渡すには &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:withLogFunc&#34;&gt;&lt;code&gt;withLogFunc&lt;/code&gt;&lt;/a&gt; 関数を用いるようだ(&lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:mkLogFunc&#34;&gt;&lt;code&gt;mkLogFunc&lt;/code&gt;&lt;/a&gt; 関数もあるがアドバンスドと書いてある．)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;  envConfig &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getConfig&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;  logOpts &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;  withLogFunc logOpts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \envLogFunc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runRIO &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;{&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;} action&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;action ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;action &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;例外&#34;&gt;例外&lt;/h4&gt;
&lt;p&gt;例外をどのように表現すべきかは結構議論されており，今のところの基本的アイデアは以下の通り．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup&lt;/code&gt; のような単純に失敗する関数(部分関数になり得る？)の場合は &lt;code&gt;Maybe&lt;/code&gt; や &lt;code&gt;Either&lt;/code&gt; を返そう&lt;/li&gt;
&lt;li&gt;それらを使いたくない場合(大域脱出とか？)は例外を使って
&lt;ul&gt;
&lt;li&gt;純粋なコード(IOではなく)の場合は &lt;code&gt;MonadThrow&lt;/code&gt; 制約を使う&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO&lt;/code&gt; の場合は &lt;code&gt;thorowIO&lt;/code&gt; を介した実行時例外を使う(&lt;code&gt;RIO&lt;/code&gt; モナドも同じ)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「IOアクションがどのように失敗するかを正確に把握できないことにより，不安と不満を感じるかもしれない．しかし，その痛みを受け入れて共存し内在化して，&lt;code&gt;tryAny&lt;/code&gt; を用いて移動してください．これは非同期例外に対して支払う代償です．」
&lt;ul&gt;
&lt;li&gt;ちょっと何言ってるかよくわからない…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全てのリソース割り当ては &lt;code&gt;bracket&lt;/code&gt; や &lt;code&gt;finally&lt;/code&gt; のような関数で行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下のようにして，アプリ専用の例外を定義し使用することが推奨されている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AppExceptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NetworkChangeError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePathError&lt;/span&gt; FilePath&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ImpossibleError&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AppExceptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AppExceptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; data-line-number=&#34;10&#34;&gt;  show &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;NetworkChangeError&lt;/span&gt; err &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;network error: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (unpack err)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;FilePathError&lt;/span&gt; fp &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error accessing filepath at: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fp&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;ImpossibleError&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;this codepath should never have been executed. Please report a bug.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，&lt;code&gt;Exception&lt;/code&gt; 型クラス(というか &lt;a href=&#34;https://hackage.haskell.org/package/base-4.11.0.0/docs/Control-Exception-Base.html#t:SomeException&#34;&gt;&lt;code&gt;SomeException&lt;/code&gt;&lt;/a&gt; 型)は，いわゆる存在型を利用して具体型(&lt;code&gt;AppExceptions&lt;/code&gt; とか)を隠蔽している．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;疑問なところは，投げた例外を &lt;code&gt;catch&lt;/code&gt; してからディスパッチして良いのだろうか？ 実行時例外じゃなくて大域脱出をしたいだけなんだけどな． ちょっとイマイチ使い方が分からない．&lt;/p&gt;
&lt;h3 id=&#34;strict&#34;&gt;Strict&lt;/h3&gt;
&lt;p&gt;特別な理由が無い限り，データフィールド(レコードのフィールド？？)は正格にすべき，とのこと． 割と重要そうなのに一文しかない．&lt;/p&gt;
&lt;h3 id=&#34;プロジェクトテンプレート&#34;&gt;プロジェクトテンプレート&lt;/h3&gt;
&lt;p&gt;そのうち，新しい Stack テンプレートを作るそうだ． もちろん，&lt;code&gt;cabal&lt;/code&gt; ファイルは使わず &lt;code&gt;hpack&lt;/code&gt; を使用する．&lt;/p&gt;
&lt;h3 id=&#34;安全第一&#34;&gt;安全第一&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rio&lt;/code&gt; は安全性を最優先しており，そのため部分関数と遅延 I/O を全力で避けている． もし，遅延 I/O を使いたい場合は &lt;code&gt;conduit&lt;/code&gt; のようなストリーミングライブラリを使いなさい，とのこと．&lt;/p&gt;
&lt;h3 id=&#34;一般化&#34;&gt;一般化&lt;/h3&gt;
&lt;p&gt;Haskell のよくある疑問として，いつ一般化すべきか，というのがある(いつ？)． README にはいくつかの簡単なガイドラインが書いてある．&lt;/p&gt;
&lt;p&gt;パラメトリック多相の場合，わりと議論の余地が無く，多相的な方が有用． つまり，&lt;code&gt;reverse :: [a] -&amp;gt; [a]&lt;/code&gt; は &lt;code&gt;reverse :: [Int] -&amp;gt; [Int]&lt;/code&gt; より優れている．&lt;/p&gt;
&lt;p&gt;型クラスの場合は話が微妙になる． &lt;code&gt;Foldable&lt;/code&gt; や &lt;code&gt;Traversable&lt;/code&gt; のような &lt;code&gt;RIO&lt;/code&gt; で定義済みの型クラスには可能な限り一般化(インスタンスを定義)するのが良いだろう． しかし，本当の疑問は &lt;strong&gt;自身で型クラスを定義すべきかどうか&lt;/strong&gt; の場合． 原則としては可能な限りそれは避けるべきだ． もし，自身で型クラスを定義している場合は，&lt;strong&gt;自分が期待していなかった型がインスタンス化されてもバグが起きないよう&lt;/strong&gt; に気を付けること，とのこと．&lt;/p&gt;
&lt;h3 id=&#34;コーディングスタイル&#34;&gt;コーディングスタイル&lt;/h3&gt;
&lt;p&gt;議論中だそうだ．&lt;/p&gt;
&lt;h3 id=&#34;モジュール階層&#34;&gt;モジュール階層&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RIO.Prelude.XXX&lt;/code&gt; モジュールはドキュメントを Haddock で読みやすくするための階層で，個別にインポートすることを想定しているわけではない． と書いてあるが，結局 &lt;a href=&#34;https://github.com/commercialhaskell/rio/pull/72&#34;&gt;ver.0.1 からは Haddock からも消えてしまった&lt;/a&gt;ので気にする必要はない．&lt;/p&gt;
&lt;h1 id=&#34;io-まわり&#34;&gt;I/O まわり&lt;/h1&gt;
&lt;p&gt;(この話は README に書いてあるわけではないです)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RIO&lt;/code&gt; モジュールには文字列型(&lt;code&gt;String&lt;/code&gt;)の一般的な &lt;code&gt;putStr&lt;/code&gt; や &lt;code&gt;getLine&lt;/code&gt; のような I/O 関数は無い． 実用コードの場合，これらの関数を直接呼ぶことは稀だろうが，例えば CLI を作ったときに &lt;code&gt;--version&lt;/code&gt; オプションでバージョン情報を出力したい場合などがある．&lt;/p&gt;
&lt;p&gt;替わりとして次のような I/O 関数が提供されている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Strict.ByteString&lt;/code&gt; 型の &lt;code&gt;putStr&lt;/code&gt; や &lt;code&gt;getLine&lt;/code&gt; であれば &lt;code&gt;RIO.ByteString&lt;/code&gt; モジュールで再定義されている&lt;/li&gt;
&lt;li&gt;ファイルの入出力であれば &lt;code&gt;RIO&lt;/code&gt; モジュールに &lt;code&gt;Strict.ByteString&lt;/code&gt; 版と &lt;code&gt;Text&lt;/code&gt; 版が提供されている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Builder&lt;/code&gt; 型の標準出力 &lt;a href=&#34;https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:hPutBuilder&#34;&gt;&lt;code&gt;hPutBuilder&lt;/code&gt;&lt;/a&gt; 関数ならある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンソールに対する I/O はどれを使うべきかはまだ&lt;a href=&#34;https://github.com/commercialhaskell/rio/issues/5&#34;&gt;議論中&lt;/a&gt;みたいだ．&lt;/p&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;何となく&lt;a href=&#34;https://github.com/matsubara0507/scrapbook/tree/rio&#34;&gt;置き換えはできた&lt;/a&gt;けど，例外や I/O 回りは良く分かってない… また試していこう．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/main-tester.html</id><title type="text">CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました</title><updated>2018-04-09T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/main-tester.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;こんにちは。みなさん、テストは書いてますか？&lt;br /&gt;
「&lt;a href=&#34;http://syocy.hatenablog.com/entry/haskell-library-2016#%E3%83%86%E3%82%B9%E3%83%88&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;&lt;/a&gt;」という記事でも紹介されているとおり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;にも様々なテスト用ライブラリーがあります。&lt;br /&gt;
今回は、「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ライブラリ所感&lt;span class=&#34;ascii&#34;&gt;2016&lt;/span&gt;」でも紹介されている&lt;a href=&#34;https://hackage.haskell.org/package/silently&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;&lt;/a&gt;というパッケージにインスパイアされた、新しいテスト用ライブラリーを作りました。&lt;br /&gt;
タイトルにも書きましたが&lt;a href=&#34;https://hackage.haskell.org/package/main-tester&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;&lt;/a&gt;といいます。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;ほかのライブラリーとの違い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;使い方・バグ報告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#main-testerができること&#34; title=&#34;main-testerができること&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;ができること&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は名前の通り、&lt;code&gt;main&lt;/code&gt;関数のテストをサポートするライブラリーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製のプログラムを起動すると最初に実行される、あの&lt;code&gt;main&lt;/code&gt;関数です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数は&lt;code&gt;IO ()&lt;/code&gt;という型であるとおり、原則として必ず入出力を伴うので、自動テストがしにくい関数です。&lt;br /&gt;
一般的なベストプラクティスとしては、できるだけ&lt;code&gt;IO&lt;/code&gt;でない、純粋な関数を中心にテストを書いていくのが普通でしょう。&lt;br /&gt;
それでも敢えて&lt;code&gt;main&lt;/code&gt;関数の自動テストを書くのには、以下のメリットがあります。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数をテストすると言うことは、作っているコマンドの、ユーザーの要求に最も近いレベルのテスト、&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テスト（&lt;span class=&#34;ascii&#34;&gt;end-to-end&lt;/span&gt; テスト）をすることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;関数（や、その他の&lt;code&gt;IO&lt;/code&gt;を伴う関数）に対するテストは、データベースやファイルシステムなど、外部のソフトウェアとの「組み合わせ」で起こるバグを検出できる。
&lt;ul&gt;
&lt;li&gt;経験上、特に単純なアプリケーションでは、そうした外部のソフトウェアに対する「誤解」が原因となったバグが比較的多いように感じています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;私の個人的な都合ですが、趣味では小さなアプリケーションを書くことが多いので、そうした&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストの方が効果的だったりする。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このように、&lt;code&gt;main&lt;/code&gt;関数をはじめとする、&lt;code&gt;IO&lt;/code&gt;な関数に対して敢えて自動テストを書くことには、様々なメリットがあります。&lt;br /&gt;
&lt;code&gt;main-tester&lt;/code&gt;はそうした&lt;code&gt;IO&lt;/code&gt;な関数をテストする際に伴う、&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの問題を解決しました。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;標準出力・標準エラー出力に出力した文字列がテストしにくい
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;captureProcessResult&lt;/code&gt;という関数で、標準出力・標準エラー出力に出力した文字列をそれぞれ&lt;code&gt;ByteString&lt;/code&gt;として取得することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;標準入力から文字列を読み出そうとすると、テストの実行が停止してしまう。
&lt;ul&gt;
&lt;li&gt;➡️ &lt;code&gt;withStdin&lt;/code&gt;という関数で、標準入力に与えたい文字列を&lt;code&gt;ByteString&lt;/code&gt;として与えることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここに書いたことは、ビルドした実行ファイルを子プロセスとして呼び出すことによってもできます。&lt;br /&gt;
入出力の順番など、標準出力や標準エラー出力のより細かい挙動をテストするにはその方がいいでしょう&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;br /&gt;
しかし、テストのために&lt;code&gt;PATH&lt;/code&gt;を分離させる必要があったり、そのために&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/2885&#34;&gt;&lt;code&gt;stack exec&lt;/code&gt;を使ったらめっちゃ遅い&lt;/a&gt;という問題があったり、そもそも子プロセス呼び出しはそれだけでオーバーヘッドがあったりと、様々な問題があります。&lt;br /&gt;
物事をよりシンプルにするには、&lt;code&gt;main&lt;/code&gt;関数を直接呼び出した方がよいでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;CLI&lt;/span&gt;アプリケーションの&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストにおける、そうした子プロセスの呼び出しの問題と、より大きな関数をテストしたいというニーズに応えるためのライブラリーなのです。&lt;/p&gt;
&lt;h1 id=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ほかのライブラリーとの違い&#34; title=&#34;ほかのライブラリーとの違い&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ほかのライブラリーとの違い&lt;/h1&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;というパッケージにインスパイアされた」と冒頭で申しましたとおり、前節で紹介した機能は、実はすでにほかのライブラリーに似たものがあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;に加え、&lt;a href=&#34;https://hackage.haskell.org/package/imperative-edsl-0.7.1/docs/System-IO-Fake.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;imperative-edsl&lt;/span&gt;というパッケージに含まれる、&lt;code&gt;System.IO.Fake&lt;/code&gt;というモジュール&lt;/a&gt;です&lt;small&gt;（ほかにもあったらすみません！🙇🙇🙇）&lt;/small&gt;。&lt;br /&gt;
これらと&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;との違いは何でしょう？&lt;/p&gt;
&lt;p&gt;第一に、先ほども触れましたが、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数や&lt;code&gt;withStdin&lt;/code&gt;関数は、標準出力・標準エラー出力・標準入力でやりとりする文字列を&lt;span class=&#34;ascii&#34;&gt;strict&lt;/span&gt;な&lt;code&gt;ByteString&lt;/code&gt;でやりとりします。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;silently&lt;/span&gt;や&lt;code&gt;System.IO.Fake&lt;/code&gt;は、&lt;code&gt;String&lt;/code&gt;なのです。&lt;br /&gt;
&lt;code&gt;ByteString&lt;/code&gt;は文字通り任意のバイト列を扱うことができるので、「&lt;span class=&#34;ascii&#34;&gt;Unicode&lt;/span&gt;の文字のリスト」である&lt;code&gt;String&lt;/code&gt;よりも、多様なデータを扱うことができます。&lt;/p&gt;
&lt;p&gt;これは、特に複数の種類の文字コードを扱うとき、非常に重要な機能となります。&lt;br /&gt;
&lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;以前の記事で取り上げた、&lt;code&gt;Invalid character&lt;/code&gt;というエラー&lt;/a&gt;を再現させる場合も、ないと大変やりづらいでしょう。&lt;/p&gt;
&lt;p&gt;第二に、&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;の&lt;code&gt;captureProcessResult&lt;/code&gt;関数は、&lt;code&gt;main&lt;/code&gt;関数の終了コードも&lt;a href=&#34;https://hackage.haskell.org/package/base-4.11.0.0/docs/System-Exit.html#t:ExitCode&#34;&gt;&lt;code&gt;ExitCode&lt;/code&gt;型&lt;/a&gt;の値として取得できます。&lt;br /&gt;
&lt;code&gt;main&lt;/code&gt;関数の中で&lt;code&gt;exitFailure&lt;/code&gt;等の関数を呼び出すと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として投げられます。&lt;br /&gt;
既存のライブラリーでこれを行うと、&lt;code&gt;ExitCode&lt;/code&gt;が例外として処理されるため、テストしたい&lt;code&gt;main&lt;/code&gt;関数の実行が終了してしまいます。&lt;br /&gt;
結果、&lt;code&gt;main&lt;/code&gt;関数が標準出力・標準エラー出力に書き込んだ文字列を取得することができないのです。&lt;br /&gt;
「○○というエラーメッセージを出力して異常終了する」といったことをテストしたい場合、これでは使いづらいでしょう。&lt;br /&gt;
&lt;strong&gt;「&lt;code&gt;main&lt;/code&gt;関数の&lt;span class=&#34;ascii&#34;&gt;E2E&lt;/span&gt;テストを行うためのライブラリーである」&lt;/strong&gt;という観点から、必須の機能であると判断し、実装しました。 ちなみに、&lt;code&gt;ExitCode&lt;/code&gt;以外の例外についてはそのまま投げられます。仕様を単純にするために、これはユーザーのテストコードの中で処理することとしています。&lt;/p&gt;
&lt;h1 id=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方バグ報告&#34; title=&#34;使い方バグ報告&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方・バグ報告&lt;/h1&gt;
&lt;p&gt;機能は非常にシンプルなので、使い方については&lt;a href=&#34;https://hackage.haskell.org/package/main-tester-0.1.0.0/docs/Test-Main.html&#34;&gt;ドキュメント&lt;/a&gt;のサンプルコードを読めば大体わかるかなぁと思いますが、簡単にサンプルを載せておきましょう。&lt;/p&gt;
&lt;p&gt;例えばこんなソース👇のプログラムがあった場合、&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleMain.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;  putStr &lt;span class=&#34;st&#34;&gt;&amp;quot;What&amp;#39;s your name?: &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`isInfixOf`&lt;/span&gt; name&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; putStrLn &lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; die &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; name &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;? Sorry I don&amp;#39;t know such a guy!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;を使えば、次のように&lt;span class=&#34;ascii&#34;&gt;Hspec&lt;/span&gt;でテストできます。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;ExampleSpec.hs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System.Exit&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Main&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExampleMain&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hspec &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;your-cool-command&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given &amp;#39;Yuji&amp;#39; to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints a string including &amp;#39;Nice name&amp;#39; without an error&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;Yuji&amp;quot;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitSuccess&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; B.null&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;        prStdout result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Nice name&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;    context &lt;span class=&#34;st&#34;&gt;&amp;quot;Given other name to stdin&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;      it &lt;span class=&#34;st&#34;&gt;&amp;quot;prints an error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;        result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; withStdin &lt;span class=&#34;st&#34;&gt;&amp;quot;other name&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; captureProcessResult ExampleMain.main&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;        prExitCode result &lt;span class=&#34;ot&#34;&gt;`shouldBe`&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExitFailure&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;        prStderr result &lt;span class=&#34;ot&#34;&gt;`shouldSatisfy`&lt;/span&gt; (not &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; B.null)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれのファイルを同じディレクトリーに置いた上で、次のように実行すれば試せるはずです &lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;ユーザーの皆さんは適当に読み替えてください…）&lt;/small&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build hspec main-tester&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc -- --ghc-arg=-i. ExampleSpec.hs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ex&#34;&gt;your-cool-command&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Yuji&amp;#39;&lt;/span&gt; to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; a string including &lt;span class=&#34;st&#34;&gt;&amp;#39;Nice name&amp;#39;&lt;/span&gt; without an error&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;ex&#34;&gt;Given&lt;/span&gt; other name to stdin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;prints&lt;/span&gt; an error message&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;ex&#34;&gt;Finished&lt;/span&gt; in 0.0130 seconds&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; examples, 0 failures&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バグを見つけたら&lt;a href=&#34;https://gitlab.com/igrep/main-tester/issues&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;に報告してください&lt;small&gt;（最近の個人的な判官贔屓により、敢えて&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;にしております 😏）&lt;/small&gt;。&lt;br /&gt;
それではこの春は&lt;span class=&#34;ascii&#34;&gt;main-tester&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Testing!!&lt;/span&gt; 💚💚💚&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;関数を子スレッドとして&lt;code&gt;forkIO&lt;/code&gt;することで同じことが恐らくできますが、テスト結果の報告に使うべき、標準出力・標準エラー出力を食い合うことになってしまうので、非常にやりづらいと思います。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/about-ghc-exts-1.html&#34; lang=&#34;ja&#34;&gt;GHC拡張ノック(Part 1)&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/renew-haskell-antenna.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Antenna をリニューアルしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html</id><title type="text">ML Day ＃1 に行ってきた</title><updated>2018-04-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;ML Day ＃1 に行ってきた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-04-02&#34; itemprop=&#34;datePublished&#34;&gt;
        Apr 2, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/event.html&#34;&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://ml-lang.connpass.com/event/78199/&#34;&gt;ML Day #1&lt;/a&gt; というイベントに参加してきたので，そのメモ？まとめ？みたいな感じの記事です．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ML Day は毎年やってるML勉強会というML系の発表会形式の勉強会のこと． (なぜか)名前を変えたらしい． ちなみに，今後は半年に一回ペースでやりたいらしい．&lt;/p&gt;
&lt;h2 id=&#34;ぼくのはなし&#34;&gt;ぼくのはなし&lt;/h2&gt;
&lt;p&gt;新設された LT 枠で発表してきた．&lt;/p&gt;
&lt;p&gt;スライドはこれ&lt;/p&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/o84VhGTUREO4No&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;さすがに Haskell の話をするのはアレだったので，Haskell の新しいモジュールシステム Backpack のベースになった MixML の話をした． この日までに(Haskellで)実装完了してドヤ顔する予定だったのだが全然終わらなかった orz (Alt braif*ck じゃなくて)ちゃんとした規模の処理系を実装するのって，大変なんですね…&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/rossberg/mixml&#34;&gt;SML/NJ で実装されたもの&lt;/a&gt;があり，実質これを参考に Haskell で書き直すだけの作業． だけど SML -&amp;gt; Haskell に直すのって大変，非純粋なものを純粋な世界にするって大変(そりゃそう)． 気軽に状態を持ちやがって…&lt;/p&gt;
&lt;h2 id=&#34;自分的ハイライト&#34;&gt;自分的ハイライト&lt;/h2&gt;
&lt;p&gt;濃い目の話が多かったのでざっくりと．&lt;/p&gt;
&lt;p&gt;資料は既に&lt;a href=&#34;https://ml-lang.connpass.com/event/78199/presentation/&#34;&gt;ほとんど上がっている&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;ml型付の基礎の基礎&#34;&gt;ML型付の基礎の基礎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者は &lt;a href=&#34;https://twitter.com/haochenxie&#34;&gt;Haochen&lt;/a&gt; くん
&lt;ul&gt;
&lt;li&gt;名〇屋で &lt;a href=&#34;https://sicss.connpass.com/event/71199/&#34;&gt;TaPL の読書会&lt;/a&gt;を主催してるひと&lt;/li&gt;
&lt;li&gt;こんど&lt;a href=&#34;https://nupsc.sicss.org/&#34;&gt;名古屋でプロコン&lt;/a&gt;やるんだって&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haochenxie.name/dl/the_introduction_of_foundation_of_ml_type_checking.pdf&#34;&gt;資料はコレ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基礎 (foundation) の 基礎 (introduction) の話
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;型は素晴らしい&lt;/li&gt;
&lt;li&gt;でも型を書きたくない
&lt;ul&gt;
&lt;li&gt;プログラマは怠惰を美徳にしている生き物だもんね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;再構築すればいいじゃない！
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;型検査無しにもどるなんてのは論外&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;素晴らしい本(TaPL)と素晴らしい先生(ピアース先生)
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ML Day 出る以上読め&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;おまけとして let 多相の話もしてた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sicss.connpass.com/event/83801/&#34;&gt;5/6に論理プログラミング言語の第一人者の講演&lt;/a&gt;を企画しているらしい
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://readcoqart.connpass.com/event/83722/&#34;&gt;Coq 勉強会&lt;/a&gt;と被ってるのがなぁぁぁぁ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tba&#34;&gt;TBA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者は&lt;a href=&#34;https://twitter.com/pi8027&#34;&gt;坂口和彦&lt;/a&gt;さん
&lt;ul&gt;
&lt;li&gt;PPL2018 のポスター賞の人でその話を&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;発表スライドは上がってないけど &lt;a href=&#34;http://logic.cs.tsukuba.ac.jp/~sakaguchi/posters/ppl2018.pdf&#34;&gt;PPL2018 のポスター&lt;/a&gt;はあった&lt;/li&gt;
&lt;li&gt;Coq でリストの置換(permutation)の自動証明(だったかな)
&lt;ul&gt;
&lt;li&gt;証明の過程をいろいろ話してくれた&lt;/li&gt;
&lt;li&gt;(がぼくはよくわかってない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sqlab.jp/FLOPS2018/&#34;&gt;FLOPS’18&lt;/a&gt; に通ったので発表するらしい&lt;/li&gt;
&lt;li&gt;質問: 項書き換えでできないの？
&lt;ul&gt;
&lt;li&gt;中野先生に聞かれた(PPLで？？)&lt;/li&gt;
&lt;li&gt;出来たら教えてといって何もないのでできないんじゃない？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;型つき組版処理システムsatysfi&#34;&gt;型つき組版処理システムSATySFi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者は &lt;a href=&#34;https://twitter.com/bd_gfngfn&#34;&gt;bd_gfngfn&lt;/a&gt; 氏&lt;/li&gt;
&lt;li&gt;資料は&lt;a href=&#34;https://drive.google.com/file/d/1BB7ZAiwPO3hVtq7PGImPtMs1-kOd7SzW/view&#34;&gt;コレ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;彼の有名な &lt;a href=&#34;https://github.com/gfngfn/SATySFi&#34;&gt;型つき組版処理システムSATySFi&lt;/a&gt; の話
&lt;ul&gt;
&lt;li&gt;目標: L〇TeX を倒す&lt;/li&gt;
&lt;li&gt;目標: エラーの可読性向上(大事)&lt;/li&gt;
&lt;li&gt;ML系に似た組版用型システムが載っている
&lt;ul&gt;
&lt;li&gt;let 多相もレコード多相もある&lt;/li&gt;
&lt;li&gt;しかし GADT や Functor はまだ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「いきなり PDF がでまして」をよく言っていた(笑)&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質問: 構文にポリシーはあるの？
&lt;ul&gt;
&lt;li&gt;ML系の文法にしたい(けど LaTeX に寄せたほうが…)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mlでつくる拡張可能インタプリタ&#34;&gt;MLでつくる拡張可能インタプリタ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者は &lt;a href=&#34;https://twitter.com/linerlock&#34;&gt;linerlock&lt;/a&gt; 氏
&lt;ul&gt;
&lt;li&gt;今日までつくば大生
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;これのせいで二番煎じに&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;資料は&lt;a href=&#34;https://speakerdeck.com/takahisa/extensible-interpreter-in-ml&#34;&gt;コレ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;言語開発 &lt;strong&gt;も&lt;/strong&gt; モジュラーにしたいので拡張可能なインタプリタを作ればいいじゃない
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/takahisa/kennel&#34;&gt;コレ&lt;/a&gt;のことかな？&lt;/li&gt;
&lt;li&gt;例えば超簡易的な自作言語に新しくリスト追加してと言われても簡単にできるように&lt;/li&gt;
&lt;li&gt;評価器は楽しいので(拡張可能な評価器の)研究が多い&lt;/li&gt;
&lt;li&gt;構文解析は無い…なのでここをサイボウズラボユースでやった(？)
&lt;ul&gt;
&lt;li&gt;構文解析の無い言語なんてないのにね&lt;/li&gt;
&lt;li&gt;作ったの&lt;a href=&#34;https://github.com/takahisa/finale&#34;&gt;コレ&lt;/a&gt;かな？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「(BNFに新しい構文を)上に足すか下に足すか、花火じゃないけど」
&lt;ul&gt;
&lt;li&gt;上に足すか下に足すかで意味が変わることが…&lt;/li&gt;
&lt;li&gt;そこで最長一致法 : 全部試して一番長いのをとる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型とか最適化とかできてない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT&lt;/h3&gt;
&lt;p&gt;は割愛(つかれた)． ラインナップは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自作言語を OCaml で作り直したら ML みたいなコア言語になってしまったという話&lt;/li&gt;
&lt;li&gt;Elm の紹介&lt;/li&gt;
&lt;li&gt;OCaml の祖先 CAML の解説&lt;/li&gt;
&lt;li&gt;自作したパーサージェネレーターの紹介&lt;/li&gt;
&lt;li&gt;Verifastの辛い話(&lt;del&gt;古いOCamlを使うのつらいという愚痴&lt;/del&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LT の資料は全部 connpass にあがっている．&lt;/p&gt;
&lt;h3 id=&#34;コンパイラバックエンド&#34;&gt;コンパイラバックエンド&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者は&lt;a href=&#34;&#34;&gt;インターネットの闇&lt;/a&gt;さん
&lt;ul&gt;
&lt;li&gt;この会の主催者(？)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OCaml のソースコードを皆で読もうの会
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;バックエンドはコンパイラのコト&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;not Webバックエンド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ガリグ先生しか読めない化け物(type系)&lt;/li&gt;
&lt;li&gt;OCaml のバックは副作用ガンガン使う、FPとは？GC付きのC&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bucklescriptでノベルゲームdslを作る&#34;&gt;BuckleScriptでノベルゲームDSLを作る&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者は[pocketberserker]氏
&lt;ul&gt;
&lt;li&gt;普段は F# の人&lt;/li&gt;
&lt;li&gt;F# ネタが切れた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;資料は&lt;a href=&#34;https://github.com/pocketberserker/ml_day_1&#34;&gt;ココ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;資料もこの DSL で書かれたもの(？？)&lt;/li&gt;
&lt;li&gt;ノベルゲーなのでバックができない(笑)&lt;/li&gt;
&lt;li&gt;発表者はデバッグモードで戻ってた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ノベルゲーDSLを作りたい遺伝子を持ってしまったので作るという話
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cowlick/cowlick&#34;&gt;つくったやつ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自分が今書いてるのはS式なのか？？？？S式が分からなくなる&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;strong&gt;Reason を ML ユーザーが触るべきではない！&lt;/strong&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;濃い(誉め言葉)&lt;/li&gt;
&lt;li&gt;後半は疲れてしまった(ごめん)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;質問時間を含めて発表時間(律儀に終わる必要はない)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;MixML 完成させてリベンジ発表したい&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html</id><title type="text">Haskell Antenna をリニューアルしました</title><updated>2018-03-21T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;&lt;a href=&#34;https://haskell.jp/antenna/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;&lt;/a&gt;は&lt;a href=&#34;https://github.com/lotz84&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;lotz84&lt;/span&gt;&lt;/a&gt;氏が作った&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の日本語情報を収集するウェブサイトです。 下記の記事を読むと、動機付けなどが分かると思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/03-haskell-antenna.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt; を公開しました &lt;span class=&#34;ascii&#34;&gt;- Haskell-jp&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残念なことに&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;は動作が重く、なかなか満足に閲覧することが出来ませんでした。 そこで、&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;をリニューアルしました！&lt;/p&gt;
&lt;p&gt;正確には、&lt;a href=&#34;https://planet.haskell.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Planet Haskell&lt;/span&gt;&lt;/a&gt;の日本語版として作成した&lt;a href=&#34;https://github.com/matsubara0507/planet-haskell-jp-demo&#34;&gt;もの&lt;/a&gt;を、新しい&lt;span class=&#34;ascii&#34;&gt;Haskell Antenna&lt;/span&gt;として置き換えました。 新&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;は旧&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;と比べると見た目も機能も更新頻度も残念なことになってしまいましたが、各サイトのフィードから記事の一覧を取得し静的サイトとして生成しているだけなので動作は軽快です。&lt;/p&gt;
&lt;p&gt;旧&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;同様に新&lt;span class=&#34;ascii&#34;&gt;Antenna&lt;/span&gt;でも配信する情報源&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;今のところ&lt;span class=&#34;ascii&#34;&gt;Atom&lt;/span&gt;か&lt;span class=&#34;ascii&#34;&gt;RSS2.0&lt;/span&gt;形式のフィード&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;をいつでも募集しています。 もし追加すべき情報源にアイデアがあれば&lt;a href=&#34;https://github.com/haskell-jp/antenna#サイトの追加方法&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;レポジトリの&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;&lt;/a&gt;にかかれている方法を参考に&lt;span class=&#34;ascii&#34;&gt;Pull Request&lt;/span&gt;を送っていただくことが可能です。 また、&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;を送るのは面倒だという方は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;#antenna&lt;/span&gt;チャンネルを通じて提案を行ってもらうことも大歓迎です。 &lt;span class=&#34;ascii&#34;&gt;(Planet Haskell&lt;/span&gt;がそうであるように&lt;span class=&#34;ascii&#34;&gt;)Haskell&lt;/span&gt;中心でなくても良いので、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の情報を発信しているブログを持っている方は是非、追加提案をしていただけると助かります。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/main-tester.html&#34; lang=&#34;ja&#34;&gt;CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/windows-long-path.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2018-03-20T22:47:14+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/windows-long-path.html</id><title type="text">WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</title><updated>2018-03-13T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/windows-long-path.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;去年、&lt;a href=&#34;/posts/2017/windows-gotchas.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を扱う時によく遭遇するエラーと対処法&lt;/a&gt;という記事で、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;ユーザーが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で開発したとき、あるいは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製のプログラムを使用した際によく遭遇するエラーやその回避方法を紹介しました。&lt;br /&gt;
今回は、そこに追記したい内容として、最近私がよく出遭うようになったエラーを紹介します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34; title=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;code&gt;openFile: does not exist (No such file or directory)&lt;/code&gt;といわれたら短いパスに移そう&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;回避方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34; title=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34; title=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;のユニコード版の関数に、&lt;code&gt;\\?\&lt;/code&gt;というプレフィックスを着けた絶対パスを渡す。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考url&#34; title=&#34;参考url&#34;&gt;参考&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34; title=&#34;openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;code&gt;openFile: does not exist (No such file or directory)&lt;/code&gt;といわれたら短いパスに移そう&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;というエラーは、本当に読んで字のごとく、開こうとしたファイルが存在しないためのエラーであることとがもちろん多いのですが、エラーメッセージに反して違う原因である場合もあります。&lt;/p&gt;
&lt;p&gt;例えば、最近私はとあるプロジェクトを数文字長い名前にリネームしたのですが、たったそれだけで、&lt;code&gt;stack test&lt;/code&gt;した際必ず問題のエラーが発生するようになってしまいました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack test
a-little-longer-name-project-0.1.0.0: build (lib + exe + test)
Preprocessing library for a-little-longer-name-project-0.1.0.0..
Building library for a-little-longer-name-project-0.1.0.0..
Preprocessing executable &amp;#39;mmlh&amp;#39; for a-little-longer-name-project-0.1.0.0..
Building executable &amp;#39;mmlh&amp;#39; for a-little-longer-name-project-0.1.0.0..
Preprocessing test suite &amp;#39;a-little-longer-name-project-test&amp;#39; for a-little-longer-name-project-0.1.0.0..
Building test suite &amp;#39;a-little-longer-name-project-test&amp;#39; for a-little-longer-name-project-0.1.0.0..
[1 of 5] Compiling Paths_aLittleLongerNameProject ( .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.hs, .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\Paths_aLittleLongerNameProject.o )
.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.dump-hi: openFile: does not exist (No such file or directory)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どういうことかと悩んでいたところ、&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3649&#34;&gt;こんな&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;を見つけました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3649#issuecomment-351612621&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Snoyman&lt;/span&gt;の指摘&lt;/a&gt;のとおり、こちらの問題は&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で使えるパスの長さが原因のエラーのようです。&lt;br /&gt;
どういうことかというと、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;MSDN&lt;/span&gt;のこちらのページ&lt;/a&gt;でも触れているとおり、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の（&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語レベルでの）各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;では、一度に扱えるパスの長さが&lt;span class=&#34;ascii&#34;&gt;260&lt;/span&gt;文字までと決められていて、その制限にかかったためのエラーだというのです！&lt;br /&gt;
&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;なんてエラーメッセージで表されるのでわかりづらい！&lt;small&gt;（おそらく&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;のエラーコードの出し方に問題があるんじゃないかと思います）&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;DOS&lt;/span&gt;時代から残るこの制限、完全に時代錯誤なものでしかないのですが、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;でパッケージマネージャーなどが自動的に作ったパスを扱っていると、しばしば出くわすことがあります。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;においても、&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/3285&#34;&gt;こちらの&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;で同じ問題が議論されていたり、&lt;a href=&#34;https://github.com/commercialhaskell/stack/releases/tag/v1.6.5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ver. 1.6.5&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ChangeLog&lt;/span&gt;&lt;/a&gt;でも言及されていたりと、至る所で格闘している跡があります。&lt;/p&gt;
&lt;h2 id=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;回避方法&lt;/h2&gt;
&lt;p&gt;そんな&lt;code&gt;does not exist (No such file or directory)&lt;/code&gt;ですが、残念ながら私が知る限り、プロジェクトなどのパスを（&lt;code&gt;C:\&lt;/code&gt;などのよりルートに近い場所に置いて）より短くする以外の回避方法はありません。&lt;br /&gt;
&lt;a href=&#34;https://github.com/haskell/haskell-ide-engine#installation-on-windows&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haskell-ide-engine&lt;/span&gt;のインストール方法のページ&lt;/a&gt;曰く、（新しめの）&lt;span class=&#34;ascii&#34;&gt;Windows 10&lt;/span&gt;であれば、グループポリシーを編集して、「&lt;span class=&#34;ascii&#34;&gt;Win32&lt;/span&gt;の長いパスを有効にする」を「有効」にすれば回避できるとのことですが、残念ながら手元で試した限りうまくいきませんでした。何かやり方がまずかったのかもしれませんが。&lt;br /&gt;
いずれにしても、&lt;code&gt;stack build&lt;/code&gt;コマンドなどを実行したときに問題のエラーに遭遇した場合、ビルドしたいもののパスをなんとかして短くする以上の方法はありません。&lt;br /&gt;
&lt;code&gt;C:\&lt;/code&gt;直下をホームディレクトリのように使う人が今でもたくさんいるわけです。&lt;/p&gt;
&lt;p&gt;一方、あなたが問題のエラーが発生するプログラムを&lt;strong&gt;修正する&lt;/strong&gt;ことができる立場にある場合、次の方法で回避できるかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34; title=&#34;長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。&lt;/h3&gt;
&lt;p&gt;本件はあくまでも、&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回の呼び出しで渡せる長さの制限ですので、制限を超えてしまうような場合はパスを分割すればよいのです。&lt;br /&gt;
&lt;a href=&#34;https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitFileName&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;filepath&lt;/span&gt;パッケージの&lt;code&gt;splitFileName&lt;/code&gt;関数&lt;/a&gt;や&lt;a href=&#34;https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitPath&#34;&gt;&lt;code&gt;splitPath&lt;/code&gt;関数&lt;/a&gt;を駆使してパスを分割した上で、対象のファイルの親ディレクトリーまで&lt;a href=&#34;https://hackage.haskell.org/package/directory-1.3.2.1/docs/System-Directory.html#v:setCurrentDirectory&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;directory&lt;/span&gt;パッケージの&lt;code&gt;setCurrentDirectory&lt;/code&gt;関数&lt;/a&gt;で移動すれば、制限に引っかからないはずです&lt;small&gt;（時間の都合でこちらについては試すコードを用意しておりません。あしからず）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;残念ながらカレントディレクトリーはプロセス全体で共有される情報ですので、マルチスレッドなプログラムでは頭の痛い問題が出てきてしまいますが、一番確実に回避できる方法のはずです。&lt;br /&gt;
マルチスレッドである場合を考慮したくない場合は、次に紹介する方法を検討するとよいでしょう。&lt;/p&gt;
&lt;h3 id=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34; title=&#34;win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;のユニコード版の関数に、&lt;code&gt;\\?\&lt;/code&gt;というプレフィックスを着けた絶対パスを渡す。&lt;/h3&gt;
&lt;p&gt;ここまでに出てきた、「&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;の各種ファイル操作用&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;」は、すべて「&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;」と呼ばれる&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;固有の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;群の一部です。&lt;br /&gt;
この「&lt;span class=&#34;ascii&#34;&gt;Win32 API&lt;/span&gt;」に含まれる関数の多くは、「ユニコード版」とそうでないものに分かれます&lt;small&gt;（詳細は&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317766(v=vs.85).aspx&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Conventions for Function Prototypes (Windows)&lt;/span&gt;&lt;/a&gt;をご覧ください）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;このうち、「ユニコード版」の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;には、この制限を緩和する専用の機能が含まれています。&lt;br /&gt;
先ほども触れた&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;MSDN&lt;/span&gt;のページ&lt;/a&gt;曰く、なんと&lt;code&gt;\\?\&lt;/code&gt;という変な文字列を絶対パスの頭に着けると、最大約&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字のパスまで受け付けるようになるというのです！&lt;br /&gt;
なんともアドホックな感じのする解決方法ですが、&lt;span class=&#34;ascii&#34;&gt;Microsoft&lt;/span&gt;が言うんだから間違いありません。&lt;br /&gt;
いずれにしても&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字という微妙な最大文字数ができてしまいますが、&lt;span class=&#34;ascii&#34;&gt;UTF-16&lt;/span&gt;での&lt;span class=&#34;ascii&#34;&gt;32,767&lt;/span&gt;文字なので、そう簡単に超えることはないでしょう。&lt;br /&gt;
いちいち絶対パスに変えて変なプレフィックスを加えないといけないという面倒くささはありますが、いちいち分割して相対パスに変換するよりは簡単なはずですので、検討する価値があります。&lt;/p&gt;
&lt;p&gt;この、&lt;code&gt;\\?\&lt;/code&gt;機能を試す場合、下記のコードを適当なファイルに貼り付けて保存し、&lt;code&gt;stack runghc file.hs&lt;/code&gt;などと実行してみてください &lt;span class=&#34;ascii&#34;&gt;(Thanks,&lt;/span&gt; &lt;span class=&#34;citation&#34; data-cites=&#34;matsubara0507&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;@matsubara0507&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;!)&lt;/span&gt;。&lt;br /&gt;
&lt;code&gt;catch&lt;/code&gt;関数を使って例外を捕捉している箇所では、実際にパスが長すぎるためにエラーが発生し、&lt;code&gt;catch&lt;/code&gt;されているはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Control.Exception&lt;/span&gt; (catch, &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;        (replicate)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Directory&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;  crDir &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getCurrentDirectory&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;    path1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; replicate &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdefgh/&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ok&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;    path2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; replicate &lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;abcdefgh/&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    path3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; crDir &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; path2 &lt;span class=&#34;co&#34;&gt;-- error&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;    path4 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\?\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; path3 &lt;span class=&#34;co&#34;&gt;-- ok&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path1: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path2: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path2 &lt;span class=&#34;ot&#34;&gt;`catch`&lt;/span&gt; (\e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show (&lt;span class=&#34;ot&#34;&gt;e ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path3: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path3 &lt;span class=&#34;ot&#34;&gt;`catch`&lt;/span&gt; (\e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show (&lt;span class=&#34;ot&#34;&gt;e ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IOException&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; data-line-number=&#34;23&#34;&gt;  putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;path4: &amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; show path4&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; data-line-number=&#34;24&#34;&gt;  createDirectoryIfMissing &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; path4&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;さて、またしても&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;固有の面倒な問題を紹介することとなってしまいましたが、俗世の喜び（主にゲーム）と簡単にインストールできる&lt;span class=&#34;ascii&#34;&gt;GUI&lt;/span&gt;に慣らされてしまった私は、今後も&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;を使い続けるつもりです。&lt;br /&gt;
いろいろ困難は尽きませんがこれからも&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Happy Haskell Life&lt;/span&gt;を！🏁🏁🏁&lt;/p&gt;
&lt;h1 id=&#34;参考url&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#参考url&#34; title=&#34;参考url&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;参考&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;※本文中で言及していないもののみ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kkamegawa.hatenablog.jp/entry/2016/07/27/220014&#34;&gt;プログラマ的に&lt;span class=&#34;ascii&#34;&gt;Windows 10 Anniversary Update&lt;/span&gt;のうれしいところ &lt;span class=&#34;ascii&#34;&gt;- kkamegawa&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s weblog&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows 10&lt;/span&gt; “&lt;span class=&#34;ascii&#34;&gt;Enable NTFS long paths policy&lt;/span&gt;” &lt;span class=&#34;ascii&#34;&gt;option missing - Super User&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/renew-haskell-antenna.html&#34; lang=&#34;ja&#34;&gt;Haskell Antenna をリニューアルしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/topic-request.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell-jp Blogで書いてほしいネタを募集します！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/topic-request.html</id><title type="text">Haskell-jp Blogで書いてほしいネタを募集します！</title><updated>2018-02-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/topic-request.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;では、設立当初より&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する記事を幅広く募集してきました。&lt;br /&gt;
このたびはそれに加え、この&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;で「書いて欲しい！」「読んでみたい！」&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する話題も募集することにしました！ 例えば、下記のような話題が考えられるでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;○○パッケージの解説記事が欲しい&lt;/li&gt;
&lt;li&gt;数学用語と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;用語の対応関係が知りたい&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Real World Haskell&lt;/span&gt;を今読むならの注意点&lt;/li&gt;
&lt;li&gt;そのほか、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する話題であれば何でも！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ただし、提案していただいたネタに関する知見の持ち主が居ないかもしれませんし、誰かの負担になるものなので必ず記事になるとは限りません。&lt;/strong&gt; また、場合によっては既に記事があるため、既存の記事を薦められるかもしれません。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ネタを提案してくれる場合&#34; title=&#34;ネタを提案してくれる場合&#34;&gt;ネタを提案してくれる場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#書いてもいいよって場合&#34; title=&#34;書いてもいいよって場合&#34;&gt;書いてもいいよって場合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ネタを提案してくれる場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ネタを提案してくれる場合&#34; title=&#34;ネタを提案してくれる場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ネタを提案してくれる場合&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-jp/blog/issues/new?template=topic-request.md&amp;amp;labels=Topic+Request&#34;&gt;この&lt;span class=&#34;ascii&#34;&gt;Blog&lt;/span&gt;のリポジトリの&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;&lt;/a&gt;からお願いします。 既に提案されていたら、その&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;に対して 👍 するといいと思います。&lt;/p&gt;
&lt;h2 id=&#34;書いてもいいよって場合&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#書いてもいいよって場合&#34; title=&#34;書いてもいいよって場合&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;書いてもいいよって場合&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TopicRequest&lt;/code&gt; というラベルを作ったので、&lt;a href=&#34;https://github.com/haskell-jp/blog/issues?q=is:issue+is:Aopen+label:%22Topic+Request%22&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;をそのラベルで検索&lt;/a&gt;してください。 書いてもいいという提案があった場合は、&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;に「書いてもいいよ」という旨をコメントしていただけるとバッティングが無くて助かります。&lt;/p&gt;
&lt;p&gt;それでは、今後は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関するあなたの記事だけでなく、あなたが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;について読みたい記事も募集していきますので、どしどし応募してください！ 🙏&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/windows-long-path.html&#34; lang=&#34;ja&#34;&gt;WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/ghc-proposal-and-patch.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHCへの変更提案とパッチ送付の手順例&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html</id><title type="text">GHCへの変更提案とパッチ送付の手順例</title><updated>2018-02-11T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ch1&#34; title=&#34;ch1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; 変更提案&lt;span class=&#34;ascii&#34;&gt;(proposal)&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#概要&#34; title=&#34;概要&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#変更提案の正確な手続き&#34; title=&#34;変更提案の正確な手続き&#34;&gt;変更提案の正確な手続き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#変更提案のおおまかな流れ&#34; title=&#34;変更提案のおおまかな流れ&#34;&gt;変更提案のおおまかな流れ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#変更提案の例&#34; title=&#34;変更提案の例&#34;&gt;変更提案の例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#いくつかのポイントなど&#34; title=&#34;いくつかのポイントなど&#34;&gt;いくつかのポイントなど&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ch2&#34; title=&#34;ch2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; パッチ送付&lt;span class=&#34;ascii&#34;&gt;(patch)&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#概要-1&#34; title=&#34;概要-1&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パッチ送付の正確な手続き&#34; title=&#34;パッチ送付の正確な手続き&#34;&gt;パッチ送付の正確な手続き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パッチ送付のおおまかな流れ&#34; title=&#34;パッチ送付のおおまかな流れ&#34;&gt;パッチ送付のおおまかな流れ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パッチ送付の例&#34; title=&#34;パッチ送付の例&#34;&gt;パッチ送付の例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#いくつかのポイントなど-1&#34; title=&#34;いくつかのポイントなど-1&#34;&gt;いくつかのポイントなど&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#補足&#34; title=&#34;補足&#34;&gt;補足&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコンパイラの１つである&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は、オープンソースソフトウェア&lt;span class=&#34;ascii&#34;&gt;(OSS)&lt;/span&gt;のプロジェクトとして今も活発に開発が進められています。 個人の経験や経歴や肩書きや権限などに関わらず、誰でも&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発にすぐに参加することができます。&lt;/p&gt;
&lt;p&gt;ここでは、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に新しい変更を提案し実装するための、以下の手順例を紹介します。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#ch1&#34;&gt;変更提案&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;(GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ghc-proposals&lt;/span&gt; リポジトリ上にて実施&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ch2&#34;&gt;パッチ送付&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;(Phabricator&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Haskell.org&lt;/span&gt; インスタンス上にて実施&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に改善したい点があれば、誰でも変更提案が可能です。 提案のハードルは案外高いものではありません。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;開発では、新たな&lt;span class=&#34;ascii&#34;&gt;contribution&lt;/span&gt;が歓迎されています。&lt;br /&gt;
仮に提案やパッチが&lt;span class=&#34;ascii&#34;&gt;reject&lt;/span&gt;判断されるとしても、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発者と直接やり取りする良い機会が得られます。&lt;/p&gt;
&lt;p&gt;以下では、数値リテラルの構文を変更する単純な例をもとに、変更提案やパッチ送付の手順例を紹介します。&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;文章だらけになってしまいましたがご容赦を 😊 &lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ch1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ch1&#34; title=&#34;ch1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;1.&lt;/span&gt; 変更提案&lt;span class=&#34;ascii&#34;&gt;(proposal)&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&#34;概要&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#概要&#34; title=&#34;概要&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は、コンパイラ本体やライブラリやツールチェーンなど多くの要素で構成されていますが、ここではコンパイラ本体への変更提案の手順について紹介します。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のコンパイラ本体の開発では、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#what-is-a-proposal&#34;&gt;ユーザーに見える&lt;span class=&#34;ascii&#34;&gt;(user-visible)&lt;/span&gt;振る舞い&lt;/a&gt;等を変更&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;追加・修正・削除など&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;するための提案&lt;span class=&#34;ascii&#34;&gt;(proposal)&lt;/span&gt;手順が定められています。 事前の調整や権限などを必要とせず、&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;への&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;を通じて誰もが提案できます。&lt;/p&gt;
&lt;p&gt;なお、変更提案&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;仕様&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;のプロセスと、修正パッチ送付&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;実装&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;のプロセスは、分離されています。必ずしも、変更提案者が実装まで行う必要はありません。&lt;/p&gt;
&lt;h3 id=&#34;変更提案の正確な手続き&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#変更提案の正確な手続き&#34; title=&#34;変更提案の正確な手続き&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;変更提案の正確な手続き&lt;/h3&gt;
&lt;p&gt;提案の具体的な手続きについては、以下に記載されています。よく読んでおきましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#ghc-proposals&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/ghc-proposals/ghc-proposals#ghc-proposals&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;変更提案は、提案書を書いて以下の場所&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;リポジトリ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;に、&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;を送ることで行えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pulls&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/ghc-proposals/ghc-proposals/pulls&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;変更提案のおおまかな流れ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#変更提案のおおまかな流れ&#34; title=&#34;変更提案のおおまかな流れ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;変更提案のおおまかな流れ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#what-is-the-timeline-of-a-proposal&#34;&gt;提案の流れ&lt;/a&gt;は、ざくっと以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提案の作成
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;上で、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ghc-proposals&lt;/span&gt;&lt;/a&gt;のリポジトリを&lt;span class=&#34;ascii&#34;&gt;fork&lt;/span&gt;する &lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;fork&lt;/span&gt;してきた自分のリポジトリで作業用のブランチを作る &lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals/tree/numeric-underscores&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;proposals&lt;/span&gt;ディレクトリの下に、“&lt;span class=&#34;ascii&#34;&gt;0000-&lt;/span&gt;プロポーザル名&lt;span class=&#34;ascii&#34;&gt;.rst&lt;/span&gt;”のファイル名で&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#how-to-start-a-new-proposal&#34;&gt;提案用のファイルを作る&lt;/a&gt; &lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“&lt;span class=&#34;ascii&#34;&gt;Motivation&lt;/span&gt;”などの&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#what-should-a-proposal-look-like&#34;&gt;必要な項目&lt;/a&gt;を、&lt;a href=&#34;http://docs.sphinx-users.jp/rest.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;reStructuredText&lt;/span&gt;&lt;/a&gt;の書式に従い記述する &lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;提案の送付
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;上で、&lt;span class=&#34;ascii&#34;&gt;ghc-proposals&lt;/span&gt;のリポジトリに、&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;を送る &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;確定した&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;を、提案用のファイルの“&lt;span class=&#34;ascii&#34;&gt;This proposal is discussed at this pull request.&lt;/span&gt;”の箇所に記載してから、再度&lt;span class=&#34;ascii&#34;&gt;commit&lt;/span&gt;し直す &lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals/commit/61149ee277aadc6bd46e0ad35aeb529f02da1182#diff-1128b179eb6630a402469b59a8a7dce6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;の &lt;span class=&#34;ascii&#34;&gt;Conversation&lt;/span&gt;のところに、“&lt;span class=&#34;ascii&#34;&gt;Rendered&lt;/span&gt;”という文字で提案ファイルへのリンクを貼っておく &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76#issue-261822915&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;提案についての議論
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;上で、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#discussion-goals&#34;&gt;議論する&lt;/a&gt; &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;フィードバックがあれば、提案ファイルを修正する&lt;/li&gt;
&lt;li&gt;議論期間を充分に&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;一ヶ月くらいは&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;設ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;提案の判断
&lt;ul&gt;
&lt;li&gt;議論が収束したら、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#who-is-the-committee&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC Steering Committee&lt;/span&gt;&lt;/a&gt; へ、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals#how-to-bring-a-proposal-before-the-committee&#34;&gt;判断依頼&lt;/a&gt;をかける &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76#issuecomment-339952996&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC Steering Committee&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;Accepted/Rejected&lt;/span&gt;を判断する &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76#event-1341434473&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Accepted&lt;/span&gt;なら、&lt;span class=&#34;ascii&#34;&gt;Trac&lt;/span&gt;で&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/newticket?type=task&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ticket&lt;/span&gt;を登録&lt;/a&gt;する &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/14473&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;次は、コード修正パッチの作成・送付フェーズへ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;変更提案の例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#変更提案の例&#34; title=&#34;変更提案の例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;変更提案の例&lt;/h3&gt;
&lt;p&gt;数値リテラルの構文を変更する場合の、具体的な変更提案の例を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/takenobu-hs/ghc-proposals/blob/0a694636560ca37d9b76e56bddc43c6bf1c9348a/proposals/0000-numeric-underscores.rst&#34;&gt;変更提案の初版&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0009-numeric-underscores.rst&#34;&gt;最終的な変更提案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pull/76&#34;&gt;議論フェーズの例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他の提案の例は以下にたくさんあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Aopen+is%3Apr&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Open&lt;/span&gt;中の提案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Apr+is%3Aclosed&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Close&lt;/span&gt;済みの提案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;いくつかのポイントなど&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#いくつかのポイントなど&#34; title=&#34;いくつかのポイントなど&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;いくつかのポイントなど&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;他の良い提案が参考になります &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;同じ種類の提案や議論がうまく進んでいる提案などから、色々な観点を学べます。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;数カ月単位で気長に根気よくやる&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;開発者は全員がボランティアで忙しい。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;提案してよいか迷う場合は、事前に&lt;a href=&#34;https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ghc-devs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ML(&lt;/span&gt;メーリングリスト&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;などで相談してもよい&lt;/li&gt;
&lt;li&gt;英語の精度を必要以上に気にする必要はない。日本語でしっかり考える。あとは短い文に区切って、&lt;span class=&#34;ascii&#34;&gt;Google&lt;/span&gt;翻訳にでも。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提案プロセスは&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;上で行うものです。操作ミスがあったところでやり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。&lt;br /&gt;
また、多くの提案は&lt;span class=&#34;ascii&#34;&gt;Accepted&lt;/span&gt;に至らないこともあるので、結果を恥ずかしがる必要もありません。提案の結果に関わらず、提案とその議論自体が、他の開発者に新たな観点や気づき・刺激を提供できます。&lt;/p&gt;
&lt;p&gt;それでは、提案プロセスをお楽しみ！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;ch2&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ch2&#34; title=&#34;ch2&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;2.&lt;/span&gt; パッチ送付&lt;span class=&#34;ascii&#34;&gt;(patch)&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&#34;概要-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#概要-1&#34; title=&#34;概要-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;への変更提案に対するコード修正は、パッチを作成して送付することにより行われます。 ここでは、コード開発ツールである&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;differential&lt;/span&gt;機能を用いる、標準的なパッチ送付の手順について紹介します。&lt;/p&gt;
&lt;p&gt;なお、修正パッチは&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;pull request&lt;/span&gt;を通じても送付できますが、後のコードレビューのフェーズを考慮すると、&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;を用いるこの手順が効率的です。&lt;/p&gt;
&lt;h3 id=&#34;パッチ送付の正確な手続き&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パッチ送付の正確な手続き&#34; title=&#34;パッチ送付の正確な手続き&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パッチ送付の正確な手続き&lt;/h3&gt;
&lt;p&gt;パッチ作成から送付についての具体的な手続きについては以下に記載されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions/FixingBugs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;How to contribute a patch to GHC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Phabricator&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Using Phabricator for GHC development&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;の詳細な操作手順については、以下に解説記事があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@zw3rk/contributing-to-ghc-290653b63147&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Contributing to GHC via Phabricator&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;パッチ送付のおおまかな流れ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パッチ送付のおおまかな流れ&#34; title=&#34;パッチ送付のおおまかな流れ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パッチ送付のおおまかな流れ&lt;/h3&gt;
&lt;p&gt;パッチ送付の流れは、ざくっと以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パッチの作成
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;build/validate&lt;/span&gt;用環境を&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Building/Preparation&#34;&gt;整えておく&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のリポジトリを&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Building/GettingTheSources#CloningHEAD&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;clone&lt;/span&gt;する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;事前に&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチ上で、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Building/QuickStart&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;build&lt;/span&gt;できることを確認しておく&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;(master&lt;/span&gt;自体が&lt;span class=&#34;ascii&#34;&gt;fail&lt;/span&gt;していることがあるため。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;事前に&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチ上で、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/TestingPatches#Locally&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;validate&lt;/span&gt;が正常終了することを確認しておく&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;(master&lt;/span&gt;自体が&lt;span class=&#34;ascii&#34;&gt;fail&lt;/span&gt;していることがあるため。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;作業用のブランチを作り、コードを修正する
&lt;ul&gt;
&lt;li&gt;修正が１つの&lt;span class=&#34;ascii&#34;&gt;commit&lt;/span&gt;にまとまっていると、後の&lt;span class=&#34;ascii&#34;&gt;arc&lt;/span&gt;コマンドでのパッチ送付がラクです。“&lt;span class=&#34;ascii&#34;&gt;git merge&lt;/span&gt; –&lt;span class=&#34;ascii&#34;&gt;squash&lt;/span&gt;”でまとめられます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Building/RunningTests/Adding&#34;&gt;テストケースを追加する&lt;/a&gt; &lt;a href=&#34;https://phabricator.haskell.org/D4235#change-AHneoV84zpis&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;必要に応じて&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Commentary/UserManual&#34;&gt;ユーザーガイド&lt;/a&gt;に変更機能についての説明を追加する &lt;a href=&#34;https://phabricator.haskell.org/D4235#change-0p_6dVtsoCP3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修正コードにて&lt;span class=&#34;ascii&#34;&gt;build&lt;/span&gt;できることを確認しておく&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;必ず行う&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;修正コードにて&lt;span class=&#34;ascii&#34;&gt;validate&lt;/span&gt;が正常終了することを確認しておく&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;必ず行う&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パッチの送付
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;用のコマンドラインツール&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Phabricator#TheCLI:Arcanist&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Arcanist&lt;/span&gt;をインストールする&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://secure.phabricator.com/book/phabricator/article/arcanist/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;arcanist&lt;/span&gt;ツールの説明&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Startingoff:Fixingabugsubmittingareview&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;にパッチを送付する&lt;/a&gt; &lt;a href=&#34;https://phabricator.haskell.org/D4235&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;具体的なコマンドは“&lt;span class=&#34;ascii&#34;&gt;arc diff HEAD~&lt;/span&gt;”。 最後の&lt;span class=&#34;ascii&#34;&gt;commit&lt;/span&gt;が送信される。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Trac&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ticket&lt;/span&gt;の、“&lt;span class=&#34;ascii&#34;&gt;Differential Rev&lt;/span&gt;”の箇所に&lt;span class=&#34;ascii&#34;&gt;Phab&lt;/span&gt;の管理番号を書いておく &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/14473&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;上で、コードレビューしてもらう（待つ、議論する）&lt;/li&gt;
&lt;li&gt;必要に応じてコードを修正する
&lt;ul&gt;
&lt;li&gt;コード修正後に、修正パッチを送り直すコマンドは“&lt;span class=&#34;ascii&#34;&gt;arc diff&lt;/span&gt;”。&lt;/li&gt;
&lt;li&gt;レビュー待ちの間に、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;conflict&lt;/span&gt;を起こした場合は、パッチを送り直すと親切。&lt;/li&gt;
&lt;li&gt;レビュー待ちの間に、&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;との差分が大きくなった場合は、“&lt;span class=&#34;ascii&#34;&gt;git rebase&lt;/span&gt;”してから送り直すのも親切。&lt;span class=&#34;ascii&#34;&gt;rebase&lt;/span&gt;については&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Workingwithmultipledependentdiffs&#34;&gt;ここを参照&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レビューが完了して&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチに取り込まれたら、&lt;span class=&#34;ascii&#34;&gt;proposals&lt;/span&gt;の“&lt;span class=&#34;ascii&#34;&gt;implemented&lt;/span&gt;”のフィールドに、実装済みの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョン番号を記載しておく &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/commit/1974c2a45a782461084ea596ec839638d4ff0743#diff-ffb9f607b8f1e69494a276ae9afa8268&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;例&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;パッチ送付の例&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#パッチ送付の例&#34; title=&#34;パッチ送付の例&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;パッチ送付の例&lt;/h3&gt;
&lt;p&gt;数値リテラルの構文を変更する場合の、具体的なパッチ送付の例を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://phabricator.haskell.org/D4235&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://phabricator.haskell.org/D4235&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他のレビュー中パッチの例は以下にたくさんあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://phabricator.haskell.org/differential/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://phabricator.haskell.org/differential/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;いくつかのポイントなど-1&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#いくつかのポイントなど-1&#34; title=&#34;いくつかのポイントなど-1&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;いくつかのポイントなど&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;他の良いパッチが参考になります&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;同じ種類の修正を探すと、修正方法や慣習や修正漏れなどを確認できます。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;build&lt;/span&gt;確認と&lt;span class=&#34;ascii&#34;&gt;validation&lt;/span&gt;確認は絶対に行う&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;つたないコードは問題視されませんが、本来行うべき手順を行わないことは、開発全体にダメージを与えるとともに、個人の信用度に影響します。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;数カ月単位で気長に根気よくやる&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;パッチ作業は多数並走しており、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のリリース時期は特に多忙です。全員がボランティアで行っている自発的な活動ですので、忘れられている状況への&lt;span class=&#34;ascii&#34;&gt;ping&lt;/span&gt;は構いませんが、強い催促は控えるのが賢明です。&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;わからない点は、&lt;span class=&#34;ascii&#34;&gt;ghc-devs ML&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;上で相談するとよいでしょう。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Phabricator(arc&lt;/span&gt;コマンド&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;には慣れが必要かと思います。最初は影響範囲の少ない、ドキュメント修正などで&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;の作業手順に慣れていくのも良いです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パッチ送付は、&lt;span class=&#34;ascii&#34;&gt;Phabricator&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;git&lt;/span&gt;の機能を用いて行うものです。操作ミスがあったところで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のリポジトリ本体に直ちに反映されるわけではありません。やり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。&lt;span class=&#34;ascii&#34;&gt;community&lt;/span&gt;のためになる&lt;span class=&#34;ascii&#34;&gt;contribution&lt;/span&gt;は常に歓迎されています。&lt;/p&gt;
&lt;p&gt;それでは、パッチ送付プロセスをお楽しみ！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;補足&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#補足&#34; title=&#34;補足&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;補足&lt;/h2&gt;
&lt;p&gt;わからないことがあれば、&lt;a href=&#34;https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ghc-devs&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ML&lt;/span&gt;&lt;/a&gt;に問い合わせると親切に教えてもらえます。 もちろん、&lt;a href=&#34;https://join-haskell-jp-slack.herokuapp.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;slack&lt;/span&gt;&lt;/a&gt;の&lt;span class=&#34;ascii&#34;&gt;#questions&lt;/span&gt;チャネルなどで尋ねるのも良いでしょう。&lt;/p&gt;
&lt;p&gt;なお、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;での開発作業については、&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Working on GHC&lt;/span&gt;&lt;/a&gt;も参考にどうぞ。&lt;br /&gt;
また、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発フロー全体については、&lt;a href=&#34;https://takenobu-hs.github.io/downloads/ghc_development_flow.pdf&#34;&gt;こちら&lt;/a&gt;も参考にどうぞ。&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;関連のサイトの情報を力づくで検索するには、&lt;a href=&#34;https://takenobu-hs.github.io/haskell-wiki-search/&#34;&gt;こちら&lt;/a&gt;もどうぞ。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Happy Hacking!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/topic-request.html&#34; lang=&#34;ja&#34;&gt;Haskell-jp Blogで書いてほしいネタを募集します！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2018/unordered-containers-hash-dos.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;hashdos脆弱性とunordered-containers&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html</id><title type="text">hashdos脆弱性とunordered-containers</title><updated>2018-01-21T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;あらゆるソフトウェアに脆弱性は存在し得ます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は高度な型システムを駆使することで、脆弱性を根本的に回避したプログラムを作ることを可能にします&lt;small&gt;（脆弱性を防ぐためだけのものではないですが、興味のある人は&lt;a href=&#34;http://www.kotha.net/ghcguide_ja/7.6.2/safe-haskell.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Safe Haskell&lt;/span&gt;&lt;/a&gt;についても調べてみるといいでしょう）&lt;/small&gt;。&lt;br /&gt;
しかし、だからといって、型を設計する段階で脆弱性を回避できるよう気をつけなければいけないことには変わりませんし、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が生成した実行ファイル、使用するライブラリーに絶対に脆弱性がないとは言えません。&lt;br /&gt;
現状、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;はほかの著名なプログラミング言語ほど使用されていないためか、あまり脆弱性が報告されることはありません&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;libc&lt;/span&gt;など、ほかの言語の処理系も依存しているようなライブラリーの脆弱性は別として）&lt;/small&gt;。&lt;br /&gt;
今回は、そんな中でも&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;というパッケージ&lt;/a&gt;について、&lt;a href=&#34;https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security&#34;&gt;ドキュメントにも書かれている&lt;/a&gt;ため&lt;strong&gt;おそらく直ることがないであろう脆弱性&lt;/strong&gt;と、その回避方法について紹介します。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;脆弱性自体は結構有名ですし、ドキュメントに書いてあることなので、ご存知の方には何を今更感があるかと思いますが、検索した限りこの問題について日本語で説明した記事は見当たらなかったので、ここで紹介します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#そもそもunordered-containersって&#34; title=&#34;そもそもunordered-containersって&#34;&gt;そもそも&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;って？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#どうやって高速化しているの&#34; title=&#34;どうやって高速化しているの&#34;&gt;どうやって高速化しているの？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hashdos脆弱性とは&#34; title=&#34;hashdos脆弱性とは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;脆弱性とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ直さないのか&#34; title=&#34;なぜ直さないのか&#34;&gt;なぜ直さないのか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;回避方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;そもそもunordered-containersって&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#そもそもunordered-containersって&#34; title=&#34;そもそもunordered-containersって&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;そもそも&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;って？&lt;/h1&gt;
&lt;p&gt;脆弱性の前に&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;パッケージについて簡単に紹介しましょう。&lt;br /&gt;
&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;パッケージ&lt;/a&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に標準で付いている&lt;a href=&#34;https://hackage.haskell.org/package/containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージ&lt;/a&gt;よりも高速な連想配列（&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashMap-Lazy.html&#34;&gt;&lt;code&gt;HashMap&lt;/code&gt;型&lt;/a&gt;）や集合（&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashSet.html&#34;&gt;&lt;code&gt;HashSet&lt;/code&gt;型&lt;/a&gt;）を提供してくれます。&lt;br /&gt;
&lt;a href=&#34;https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell 10.3&lt;/span&gt;ではなんと&lt;span class=&#34;ascii&#34;&gt;970&lt;/span&gt;ものパッケージに依存されている&lt;/a&gt;、超大人気汎用パッケージです。&lt;/p&gt;
&lt;h2 id=&#34;どうやって高速化しているの&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#どうやって高速化しているの&#34; title=&#34;どうやって高速化しているの&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;どうやって高速化しているの？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;という名前が示しているとおり、キーとなる値のハッシュ値を計算・利用することで高速化しています。&lt;br /&gt;
しかし、&lt;span class=&#34;ascii&#34;&gt;Java&lt;/span&gt;言語などほかの言語によくある&lt;code&gt;HashMap&lt;/code&gt;とは大きく異なり、内部ではハッシュテーブルを使用していません。&lt;br /&gt;
&lt;a href=&#34;http://itpro.nikkeibp.co.jp/article/COLUMN/20091104/340002/?rt=nocnt&#34;&gt;本物のプログラマは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使う &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 第&lt;span class=&#34;ascii&#34;&gt;35&lt;/span&gt;回　キーを使って値を参照する&lt;span class=&#34;ascii&#34;&gt;Map&lt;/span&gt;型：&lt;span class=&#34;ascii&#34;&gt;ITpro&lt;/span&gt;&lt;/a&gt;でも説明しているとおり、ハッシュテーブルはミュータブルな配列を内部で使用していることから、イミュータブルなデータ構造を使用して行う関数型プログラミングとは、相性が悪いのです&lt;small&gt;（&lt;code&gt;ST&lt;/code&gt;モナドや&lt;code&gt;IO&lt;/code&gt;モナドを利用した&lt;a href=&#34;https://hackage.haskell.org/package/hashtables&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;hashtables&lt;/span&gt;パッケージ&lt;/a&gt;などを使えば、限られた範囲内でハッシュテーブルを使うこともできます）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;ハッシュテーブルを使用しない代わりに、&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;では内部で&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_array_mapped_trie&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Hash array mapped trie&lt;/span&gt;&lt;/a&gt;という特殊な木を使っています。&lt;br /&gt;
どのような構造かは、&lt;a href=&#34;http://keens.github.io/slide/HAMT/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HAMT ~&lt;/span&gt; イミュータブルで高速なハッシュマップ &lt;span class=&#34;ascii&#34;&gt;~ |&lt;/span&gt; κ&lt;span class=&#34;ascii&#34;&gt;een&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Happy Hac&lt;/span&gt;κ&lt;span class=&#34;ascii&#34;&gt;ing Blog&lt;/span&gt;&lt;/a&gt;に詳しく書かれています。&lt;br /&gt;
こちらのスライドは&lt;span class=&#34;ascii&#34;&gt;Scala&lt;/span&gt;での実装の話ですが、基本的には&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;パッケージの&lt;code&gt;HashMap&lt;/code&gt;も同じはずです。&lt;/p&gt;
&lt;p&gt;大雑把に言うと、&lt;span class=&#34;ascii&#34;&gt;Hash array mapped trie&lt;/span&gt;を使った&lt;code&gt;HashMap&lt;/code&gt;では、ハッシュテーブルと同様に、キーとなる値を&lt;strong&gt;ハッシュ関数で一旦固定長の整数に変換する&lt;/strong&gt;ことで、キーが存在しているかどうかの確認を高速化しています。そのため、&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージよりも高速な処理ができるのです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージの&lt;code&gt;Map&lt;/code&gt;ではキーの存在を確認する際、キー全体を既存のキーと比較する必要があるため、特に長い文字列をキーとする場合は、処理が遅くなりがちだったのです。&lt;/p&gt;
&lt;h1 id=&#34;hashdos脆弱性とは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#hashdos脆弱性とは&#34; title=&#34;hashdos脆弱性とは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;脆弱性とは？&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;脆弱性は&lt;a href=&#34;https://blog.tokumaru.org/2011/12/webdoshashdos.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2011&lt;/span&gt;年頃&lt;span class=&#34;ascii&#34;&gt;Ruby&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;PHP&lt;/span&gt;、&lt;span class=&#34;ascii&#34;&gt;Perl&lt;/span&gt;など多くのプログラミング言語が影響を受けるとされた&lt;/a&gt;、著名な脆弱性です。&lt;br /&gt;
ここでも簡単に仕組みを説明しましょう。&lt;/p&gt;
&lt;p&gt;前節で説明したとおり、&lt;span class=&#34;ascii&#34;&gt;Hash array mapped trie&lt;/span&gt;もハッシュテーブルも、必ずキーを一旦固定長の整数に変換します。&lt;br /&gt;
文字列など、ハッシュ関数を適用されるキーとなる値は、当然固定長の整数よりも幅広い値を取り得るので、違う文字列同士でも、同じハッシュ値をとることがあります。&lt;br /&gt;
この、違う値であるはずのキーが同じハッシュ値をとってしまった状態を「ハッシュ値の衝突」と呼びます。&lt;br /&gt;
ハッシュ値の衝突が発生した場合、ハッシュテーブルや&lt;span class=&#34;ascii&#34;&gt;Hash array mapped trie&lt;/span&gt;といったハッシュ値を利用した連想配列は、（単純な）配列やリストなど、やむを得ず逐次探索が必要なデータ構造を内部で使用しなければならなくなります。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;脆弱性はこの性質を利用した&lt;span class=&#34;ascii&#34;&gt;DoS&lt;/span&gt;攻撃です。&lt;br /&gt;
攻撃者は、あらかじめ対象のプログラムで使っているハッシュ関数が、「必ず同じハッシュ値」を返すキー&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;大抵文字列でしょう）を大量に用意して、それを対象のプログラムに入力として与えることで、簡単に&lt;span class=&#34;ascii&#34;&gt;DoS&lt;/span&gt;攻撃を仕掛けることができるのです。&lt;br /&gt;
&lt;a href=&#34;https://blog.tokumaru.org/2011/12/webdoshashdos.html&#34;&gt;先ほど触れた徳丸先生の記事&lt;/a&gt;では、&lt;span class=&#34;ascii&#34;&gt;PHP&lt;/span&gt;のアプリケーションに対してわずか&lt;span class=&#34;ascii&#34;&gt;500KB&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;form-data&lt;/span&gt;を送るだけで&lt;span class=&#34;ascii&#34;&gt;CPU&lt;/span&gt;時間を&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;分も消費させることができたそうですから、その威力はすさまじいものと言えるでしょう。&lt;/p&gt;
&lt;h1 id=&#34;なぜ直さないのか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ直さないのか&#34; title=&#34;なぜ直さないのか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;なぜ直さないのか？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Developer Guide&lt;/span&gt;&lt;/a&gt;には、次のように書かれています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;There&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s an uncomfortable trade-off with regards to security threats posed by e.g. denial of service attacks. Always using more secure hash function, like SipHash, would provide security by default. However, those functions would make the performance of the data structures no better than that of ordered containers, which defeats the purpose of this package.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要するに、「セキュリティー上問題はあるけど、&lt;span class=&#34;ascii&#34;&gt;SipHash&lt;/span&gt;のような安全なハッシュ関数を使ったら&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージよりも速度が出なかった。それではこのパッケージの意味がない」ということです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージよりも高速な連想配列を作るために&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;パッケージを作ったのだから、それより遅くなっては存在価値がなくなってしまうのです。&lt;br /&gt;
従って、ユーザーが任意にキーを入力できるようなプログラムでは、&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;ではなく、&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;を使え、ということです。&lt;br /&gt;
このことは&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;が使用している&lt;a href=&#34;https://hackage.haskell.org/package/hashable-1.2.6.1/docs/Data-Hashable.html#g:1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;hashable&lt;/span&gt;のドキュメント&lt;/a&gt;にも書かれています。ある意味ノーガード戦法ですね。&lt;/p&gt;
&lt;h1 id=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#回避方法&#34; title=&#34;回避方法&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;回避方法&lt;/h1&gt;
&lt;p&gt;前節で触れたとおりですが、&lt;strong&gt;ユーザーが任意にキーを入力できるようなプログラム&lt;/strong&gt;では、&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;パッケージの&lt;code&gt;HashMap&lt;/code&gt;や&lt;code&gt;HashSet&lt;/code&gt;ではなく、&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージの&lt;code&gt;Map&lt;/code&gt;や&lt;code&gt;Set&lt;/code&gt;を使いましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;containers&lt;/span&gt;パッケージにある&lt;code&gt;Map&lt;/code&gt;や&lt;code&gt;Set&lt;/code&gt;はハッシュ関数を一切使っていないので、ハッシュ値の衝突も起こらず、内部で逐次探索が必要なデータ構造を使ってもいません。&lt;br /&gt;
なので&lt;span class=&#34;ascii&#34;&gt;hashdos&lt;/span&gt;攻撃に遭うことはないのです。&lt;/p&gt;
&lt;p&gt;ただし、実際のところ、&lt;a href=&#34;https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;LTS Haskell 10.3&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;970&lt;/span&gt;ものパッケージに依存されている&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;です。&lt;br /&gt;
その中には&lt;span class=&#34;ascii&#34;&gt;JSON&lt;/span&gt;のパーサーである&lt;span class=&#34;ascii&#34;&gt;aeson&lt;/span&gt;も含まれているので、もしかしたら現状回避するのは非常に困難なのかもしれません。😱&lt;br /&gt;
次回は、この問題について試しに攻撃用のコードを書いて速度の低下をチェックして報告する話を書くかもしれません…。😰&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/ghc-proposal-and-patch.html&#34; lang=&#34;ja&#34;&gt;GHCへの変更提案とパッチ送付の手順例&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2017/advent-calendar-2017.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Advent Calendar 2017 まとめ&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>https://haskell.jp/blog/posts/2017/advent-calendar-2017.html</id><title type="text">Haskell Advent Calendar 2017 まとめ</title><updated>2017-12-31T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;これは &lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt; その&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;&lt;/a&gt; の&lt;span class=&#34;ascii&#34;&gt;12&lt;/span&gt;日目の記事です。&lt;/p&gt;
&lt;p&gt;なんで&lt;span class=&#34;ascii&#34;&gt;12&lt;/span&gt;日目の記事で「まとめ」をやっているのかって？ &lt;span class=&#34;ascii&#34;&gt;25&lt;/span&gt;日を過ぎてから余ってた日付に登録しただけですよ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/calendars&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;&lt;/a&gt;と&lt;a href=&#34;https://adventar.org/calendars?year=2017&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ADVENTAR&lt;/span&gt;&lt;/a&gt;のアドベントカレンダーで投稿された、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する記事を集めてみました。 いちおう機械的に集めたので、それなりに拾えてると思いますが、もし「この記事が無いよ」とか、逆に「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちゃうやんこの記事」ってのがあったら、&lt;a href=&#34;https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md&#34;&gt;ここから編集して&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;でも送ってください。&lt;/p&gt;
&lt;p&gt;ちなみに「&lt;a href=&#34;https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_%E3%81%BE%E3%81%A8%E3%82%81&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Elm Advent Calendar 2017&lt;/span&gt; まとめ&lt;/a&gt;」という記事が面白かったので、その&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;版オマージュ&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;パクリ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-advent-calendar&#34; title=&#34;haskell-advent-calendar&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#記事を集めた&#34; title=&#34;記事を集めた&#34;&gt;記事を集めた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#記事たち&#34; title=&#34;記事たち&#34;&gt;記事たち&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ポエム&#34; title=&#34;ポエム&#34;&gt;ポエム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#入門してみた&#34; title=&#34;入門してみた&#34;&gt;入門してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ノウハウ&#34; title=&#34;ノウハウ&#34;&gt;ノウハウ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#解説&#34; title=&#34;解説&#34;&gt;解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#周辺ツールについて&#34; title=&#34;周辺ツールについて&#34;&gt;周辺ツールについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ライブラリ紹介&#34; title=&#34;ライブラリ紹介&#34;&gt;ライブラリ紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#作ってみた&#34; title=&#34;作ってみた&#34;&gt;作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#処理系&#34; title=&#34;処理系&#34;&gt;処理系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#言語機能&#34; title=&#34;言語機能&#34;&gt;言語機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#型&#34; title=&#34;型&#34;&gt;型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#base&#34; title=&#34;base&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Base&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アルゴリズムとデータ構造&#34; title=&#34;アルゴリズムとデータ構造&#34;&gt;アルゴリズムとデータ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数学科学&#34; title=&#34;数学科学&#34;&gt;数学・科学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker&#34; title=&#34;docker&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eta&#34; title=&#34;eta&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Eta&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#書籍紹介&#34; title=&#34;書籍紹介&#34;&gt;書籍紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#翻訳記事&#34; title=&#34;翻訳記事&#34;&gt;翻訳記事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;haskell-advent-calendar&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-advent-calendar&#34; title=&#34;haskell-advent-calendar&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;の方では&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つもできましたね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁしかし、残念ながらどのカレンダーも埋まってないため&lt;a href=&#34;https://qiita.com/advent-calendar/2017/ranking/subscriptions&#34;&gt;ランキング&lt;/a&gt;圏外となってしまいましたが&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;笑&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;加えて何故か、&lt;span class=&#34;ascii&#34;&gt;25&lt;/span&gt;日が過ぎてからその&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;のカレンダーができるという、なかなか面白い事案が発生しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/haskell5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;5) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記のカレンダーの記事以外も含めて、全部で&lt;span class=&#34;ascii&#34;&gt;104&lt;/span&gt;記事もありました。 みんなすごいですね。&lt;/p&gt;
&lt;h2 id=&#34;記事を集めた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#記事を集めた&#34; title=&#34;記事を集めた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;記事を集めた&lt;/h2&gt;
&lt;p&gt;超雑にスクレイパーを書いて&lt;span class=&#34;ascii&#34;&gt;Qiita&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;ADVENTAR&lt;/span&gt;のカレンダーをスクレイピングしてきました。 プログラムは以下のリポジトリにあります&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;もちろん&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作ったよ&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;matsubara0507/advent-calendar - GitHub&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;カレンダーのタイトルか、記事のタイトルに「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;」って単語が入っているやつだけ集めてます。 このプログラムの解説っぽい記事はそのうち自分のとこの記事として挙げる気がする&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;たぶん&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;記事たち&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#記事たち&#34; title=&#34;記事たち&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;記事たち&lt;/h2&gt;
&lt;p&gt;分類は温もりのある手作業でやってます。 自然言語処理系が出来れば機械的に分類できたかもしれませんが…&lt;/p&gt;
&lt;p&gt;分類違くね？というモノがあれば、&lt;a href=&#34;https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md&#34;&gt;ここから編集して&lt;/a&gt;&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;でも送ってください。&lt;/p&gt;
&lt;p&gt;それでは良いお年を。&lt;/p&gt;
&lt;h3 id=&#34;ポエム&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ポエム&#34; title=&#34;ポエム&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ポエム&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B&#34;&gt;なぜ &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; が好きなのか &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 趣味はデバッグ……&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by kakkun61 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/06&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Mizunashi_Mana/items/e82214dfae2765c6839a&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;副作用ポエム &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by Mizunashi_Mana on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ababup1192/items/b15cdace30b7fef3338c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を勉強して感動したこと・難しいと思ってること &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ababup1192 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/04&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;入門してみた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#入門してみた&#34; title=&#34;入門してみた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;入門してみた&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/sys9kdr/2484ed09f5cb7ea86beae8f5222d9a3c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門しようとして環境構築で失敗。 &lt;span class=&#34;ascii&#34;&gt;· GitHub&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by sys9kdr on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/05&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/lagenorhynque/items/f8b14ff70a26cfd27976&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Clojurian&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Web API&lt;/span&gt;開発に入門してみた &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by lagenorhynque on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/hitsujisanmeme/items/e14972cfd349c1149d58&#34;&gt;美術の人が考える &lt;span class=&#34;ascii&#34;&gt;Haskell - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by hitsujisanmeme on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/14&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/brackss1/items/9f9466f160391dc53bba&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門者がライブラリを触っちゃう&lt;span class=&#34;ascii&#34;&gt;!? - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by brackss1 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/22&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ryosukue/items/cf14d817a7067dfd2094&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Ubuntu&lt;/span&gt;、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;web&lt;/span&gt;アプリ手始め &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ryosukue on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/nuco&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Nuco Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/23&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/3nan/items/b89b7383ddb2bac5dda1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;をちょこっと紹介（フィボナッチ数列を書いてみる） &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by 3nan on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/tecotec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TECOTEC Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/23&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ノウハウ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ノウハウ&#34; title=&#34;ノウハウ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ノウハウ&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ncaq.net/2017/12/02/00/00/00/&#34;&gt;私の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;コーディングスタイルガイド&lt;span class=&#34;ascii&#34;&gt;,&lt;/span&gt;改行出来るポイントを紹介 &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ncaq on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ncaq.net/2017/12/03/00/00/00/&#34;&gt;ゲーム販売&lt;span class=&#34;ascii&#34;&gt;web&lt;/span&gt;アプリケーション&lt;span class=&#34;ascii&#34;&gt;SYAKERAKE&lt;/span&gt;を支える技術&lt;span class=&#34;ascii&#34;&gt;,Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Yesod&lt;/span&gt;で作られています &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ncaq on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/03&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ncaq.net/2017/12/04/00/00/00/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Stackage Server&lt;/span&gt;のちょっとした便利な使い方&lt;span class=&#34;ascii&#34;&gt;,Hoogle&lt;/span&gt;をブラウザのカスタム検索エンジンに追加しましょう&lt;span class=&#34;ascii&#34;&gt;,&lt;/span&gt;よく使うパッケージをブックマークする時は&lt;span class=&#34;ascii&#34;&gt;PackageR&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;にしましょう &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ncaq on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://d.hatena.ne.jp/kazu-yamamoto/20171212/1513050147&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;go&lt;/span&gt;な関数&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by kazu_yamamoto on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2017/12/19/203500&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;ABC(Haskell Advent Calendar 6th) -&lt;/span&gt; モナドとわたしとコモナド&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by fumieval on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/06&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Windows&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を扱う時によく遭遇するエラーと対処法 &lt;span class=&#34;ascii&#34;&gt;- Haskell-jp&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by igrep on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/14&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;解説&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#解説&#34; title=&#34;解説&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;解説&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;A Tour of Go in Haskell&lt;/span&gt;を作ったのと、&lt;span class=&#34;ascii&#34;&gt;Go&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の比較 &lt;span class=&#34;ascii&#34;&gt;- syocy&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s diary&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by syocy on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/03&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/cyclone_t/items/8443ed5d4a77f87b1f1b&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;のハンドラに&lt;span class=&#34;ascii&#34;&gt;ReaderT&lt;/span&gt;を適用する &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by cyclone_t on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/15&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/wgag/items/11a6e667011d530832e8&#34;&gt;スーパーモナドについて &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by wgag on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tech.recruit-mp.co.jp/dev-tools/post-13981/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;CircleCI2.0&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のテストを実行する – &lt;span class=&#34;ascii&#34;&gt;PSYENCE:MEDIA&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by yukiasai on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2360&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;RECRUIT MARKETING PARTNERS Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/yukiasai/items/248294a871d40c0dcef6&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Dokku&lt;/span&gt;環境を構築して&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のアプリケーションをデプロイする &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by yukiasai on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2324&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Recruit Engineers Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/07&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;周辺ツールについて&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#周辺ツールについて&#34; title=&#34;周辺ツールについて&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;周辺ツールについて&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/usamik26/items/672ed3c4451402bfc275&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Stack&lt;/span&gt; とは何をするツールなのか &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by usamik26 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-20-stack-ls-command.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack ls&lt;/span&gt; コマンドが追加されます&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/08&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-24-stack163.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;stack v1.6.3&lt;/span&gt; がリリースされました。&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/09&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ogata-k/items/23d70250ec42359b6bb5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;や周辺ツールについてのリンク集 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ogata-k on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/15&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ogata-k/items/2b21326b2b7351bfc28c&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;によるプロジェクトについて &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ogata-k on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-27-haddock-grid-table.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;haddock&lt;/span&gt; に &lt;span class=&#34;ascii&#34;&gt;Grid Table&lt;/span&gt; 記法が追加されました&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;5) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html&#34;&gt;カスタムスナップショットの紹介&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/14&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://myuon.github.io/posts/haskell-project-setup/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;プロジェクトを始めるにあたって &lt;span class=&#34;ascii&#34;&gt;- The curse of&lt;/span&gt; λ&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by myuon_myon on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/myuon_myon_cs&#34;&gt;一人&lt;span class=&#34;ascii&#34;&gt;Computer Science Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/15&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ライブラリ紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ライブラリ紹介&#34; title=&#34;ライブラリ紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;ライブラリ紹介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/jabaraster/items/e8ebbe6d25b535947aba&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;servant+persistent&lt;/span&gt;を利用する &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by jabaraster on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/07&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/makoraru/items/596729de09d6aeb81e5a&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Yampa&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Functional Reactive&lt;/span&gt;な認知行動療法ボット &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by makoraru on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://nnwww.github.io/blog/post/haskell_ml/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で機械学習を実装しようと思った過去の自分へ&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by _Nnwww on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/23&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/cyclone_t/items/52ad44cfbb4603e123f3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;・&lt;span class=&#34;ascii&#34;&gt;Servant+Persistent/Esqueleto&lt;/span&gt;で作る実用&lt;span class=&#34;ascii&#34;&gt;WebAPI (1) Servant&lt;/span&gt;の基本 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by cyclone_t on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-09-extensible-effects-step-by-step.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Extensible Effects&lt;/span&gt; ステップ・バイ・ステップ&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by matsubara0507 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/09&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Mizunashi_Mana/items/115855bf2af9b9970198&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のパーサライブラリまとめ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by Mizunashi_Mana on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.zaneli.com/blog/20171213&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門者&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会で自作ライブラリ&lt;span class=&#34;ascii&#34;&gt;network-voicetext&lt;/span&gt;の話をしてきた &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; ザネリは列車を見送った&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by zaneli@github on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/satosystems/items/32bf104a041c8cc13809&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; と &lt;span class=&#34;ascii&#34;&gt;SQLite - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by satosystems on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/masahiro_sakai/items/6a989d5b898a08f17821&#34;&gt;部分構造の共有を観測する&lt;span class=&#34;ascii&#34;&gt;data-reify - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by masahiro_sakai on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/21&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;作ってみた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#作ってみた&#34; title=&#34;作ってみた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;作ってみた&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Elm&lt;/span&gt; と &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で作る &lt;span class=&#34;ascii&#34;&gt;ToDo&lt;/span&gt; アプリ&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by matsubara0507 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/elm&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Elm Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://abc10946.hatenablog.com/entry/2017/12/18/014203&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に入門して&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;年位経ったのでライフゲームを作ってみた話 &lt;span class=&#34;ascii&#34;&gt;- abc10946&lt;/span&gt;の日記&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ABC10946 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://d.hatena.ne.jp/wvogel00/20171222/1513924995&#34;&gt;仕事で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を使いたいなら外堀から&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by hxf_vogel on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/22&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://blog.nakaji.me/slack-api-bloodhound-servant/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;slack-api + bloodhound + servant&lt;/span&gt; で&lt;span class=&#34;ascii&#34;&gt;bot+&lt;/span&gt;αを作る&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by nakaji-dayo on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/07&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://secret-garden.hatenablog.com/entry/2017/12/16/000000&#34;&gt;【&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017&lt;/span&gt;】&lt;span class=&#34;ascii&#34;&gt;Vim&lt;/span&gt; から &lt;span class=&#34;ascii&#34;&gt;Hoogle&lt;/span&gt; の検索が出来るプラグインをつくった【&lt;span class=&#34;ascii&#34;&gt;16&lt;/span&gt;日目】 &lt;span class=&#34;ascii&#34;&gt;- Secret Garden(Instrumental)&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by pink_bangbi on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/807866bdaa81c3057ac0&#34;&gt;お天気&lt;span class=&#34;ascii&#34;&gt;Bot&lt;/span&gt; で理解する &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; の便利パッケージ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/25&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/arowM/items/e59442120ad3c1071c57&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell ochintin-daicho&lt;/span&gt; で年末調整プログラミング &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by arowM on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/lotz/items/1aa6cf18aa193f40c647&#34;&gt;作って学ぶ&lt;span class=&#34;ascii&#34;&gt;Bitcoin&lt;/span&gt;！ゼロから作る&lt;span class=&#34;ascii&#34;&gt;SPV&lt;/span&gt;ウォレット &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by lotz on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://tune.hateblo.jp/entry/2017/12/27/031803&#34;&gt;優秀な秘書を雇いました&lt;span class=&#34;ascii&#34;&gt;!!! - Creatable a =&amp;gt; a -&amp;gt; IO b&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by tokiwoousaka@github on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/satosystems/items/c1c0feef87345a9df69d&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; における遅延ファイル読み込みとリソースリーク &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by satosystems on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/23&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/typesafe-precure2.html&#34;&gt;タイプセーフプリキュア！を支える技術 その&lt;span class=&#34;ascii&#34;&gt;2 - Haskell-jp&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by igrep on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/24&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ncaq.net/2017/12/19/00/00/00/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;による&lt;span class=&#34;ascii&#34;&gt;web&lt;/span&gt;スクレイピングの方法を&lt;span class=&#34;ascii&#34;&gt;dic-nico-intersection-pixiv&lt;/span&gt;を例に書く &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by&lt;/span&gt; エヌユル &lt;span class=&#34;ascii&#34;&gt;on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2105&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;スクレイピング &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-02-re-adventar-slack-bot-part1.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Re:&lt;/span&gt; ゼロから作る &lt;span class=&#34;ascii&#34;&gt;ADVENTAR&lt;/span&gt; の &lt;span class=&#34;ascii&#34;&gt;Slack Bot (Haskell&lt;/span&gt; 編&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by&lt;/span&gt; ひげ &lt;span class=&#34;ascii&#34;&gt;on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2300&#34;&gt;群馬大学電子計算機研究会 &lt;span class=&#34;ascii&#34;&gt;IGGG Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;処理系&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#処理系&#34; title=&#34;処理系&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;処理系&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://ilyaletre.hatenablog.com/entry/2017/12/10/195016&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の中間言語&lt;span class=&#34;ascii&#34;&gt;Core&lt;/span&gt;への脱糖を覗き見る &lt;span class=&#34;ascii&#34;&gt;- Hash&lt;/span&gt; λ &lt;span class=&#34;ascii&#34;&gt;Bye&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ilyaletre on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://fujiy.hatenablog.com/entry/type-inference-1&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型システムを書く&lt;span class=&#34;ascii&#34;&gt;(1) -&lt;/span&gt; 純粋技術メモ&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by fujiy on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/03&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/takoeight0821/items/9a1c3eb5b0f292026596&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;での中置演算子のパース &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by takoeight0821 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/06&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://uhideyuki.sakura.ne.jp/studs/index.cgi/ja/HindleyMilnerInHaskell&#34;&gt;型システムを学ぼう！&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by unnohideyuki on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/15&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;言語機能&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#言語機能&#34; title=&#34;言語機能&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;言語機能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Backpack&lt;/span&gt; 覚え書き&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by matsubara0507 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/aiya000/items/b802531c58c161cd245f&#34;&gt;にこ、希と一緒に学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（番外）「あまり知られていない&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張の紹介」 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by aiya000 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ruicc/items/e2879c44eba77b1e7170&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Levity polymorphism&lt;/span&gt;について軽く &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ruicc on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ryoppy/items/7156d587da2e6ae7e605&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Kind&lt;/span&gt;について &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ryoppy on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://khibino.hatenadiary.jp/entry/2017/12/18/081814&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;OverloadedLabels&lt;/span&gt; と &lt;span class=&#34;ascii&#34;&gt;Haskell Relational Record - khibino blog&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by khibino on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/thimura/items/0d289c231f9aceac61dc&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.2&lt;/span&gt; 以前で &lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt; を使う際に注意すること &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by thimura on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/19&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;型&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#型&#34; title=&#34;型&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/junjihashimoto@github/items/31f245f5e0138e5fac7e&#34;&gt;依存型の紹介と応用としての&lt;span class=&#34;ascii&#34;&gt;Clash&lt;/span&gt;の紹介 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by junjihashimoto@github on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/aiya000/items/81e8424c8a3ee23586a6&#34;&gt;ことり、穂乃果と一緒に学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;（入門）その&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;「高階データ型」 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by aiya000 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/24&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/mod_poppo/items/50ad2c0ee66171cc1ee9&#34;&gt;型を実行時に作る：怖くないリフレクション &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by mod_poppo on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/HirotoShioi/items/5474119ba3682448c109&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;における型クラス制約の役割 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by HirotoShioi on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;5) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/04&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;base&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#base&#34; title=&#34;base&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Base&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ncaq.net/2017/12/01/00/00/01/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;State&lt;/span&gt;の必要性が&lt;span class=&#34;ascii&#34;&gt;,&lt;/span&gt;プログラミング言語の処理系を書いた時にわかったので&lt;span class=&#34;ascii&#34;&gt;,State&lt;/span&gt;の良さを語ります &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ncaq on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/grainrigi/items/f45b586b4013ffc3814e&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell - $&lt;/span&gt;の仕組みを覗いてみよう &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by grainrigi on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/08&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.b123400.net/functor/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Mapping things&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by b123400 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/elipmoc101/items/4590210c9946ee2fd4c5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Maybe&lt;/span&gt;自作から学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;！ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by elipmoc101 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://keiorogiken.wordpress.com/2017/12/24/list%E3%81%A7%E9%81%8A%E3%81%B6/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;List&lt;/span&gt;で遊ぶ &lt;span class=&#34;ascii&#34;&gt;|&lt;/span&gt; 慶應義塾大学ロボット技術研究会&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by mt_caret on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Lugendre/items/6b4a8c8a9c85fcdcb292&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Arrow&lt;/span&gt;を理解する &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by Lugendre on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/08&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;アルゴリズムとデータ構造&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アルゴリズムとデータ構造&#34; title=&#34;アルゴリズムとデータ構造&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アルゴリズムとデータ構造&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/ryohji/items/d8bdba1648978c308cdd&#34;&gt;探索問題を &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で解く &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by ryohji on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/09&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/v97ug/items/d6dd50a2b6b84a9e4d41&#34;&gt;巡回セールスマン問題を遺伝的アルゴリズムとデータ構造を使って&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で解く！ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by v97ug on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/15&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/as_capabl/items/39e55e7a035dea4dc93a&#34;&gt;いつから&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;行クイックソートが遅いと錯覚していた？ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by as_capabl on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rst76/items/a7dd81b522a09d1b9986&#34;&gt;キューの効率的な実装 または私は如何にして&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を止めて&lt;span class=&#34;ascii&#34;&gt;F#&lt;/span&gt;を愛するようになったか &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rst76 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://autotaker.hatenablog.com/entry/2017/12/21/125153&#34;&gt;永続リアルタイムキューの&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;実装と計算量解析 &lt;span class=&#34;ascii&#34;&gt;- autotaker&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s blog&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by autotaker1984 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/22&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Aruneko/items/dee20161358e7c39e27a&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Zipper&lt;/span&gt;に挑む &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by Aruneko on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/nobsun/items/27fe53516cbb90ba02e2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Tree:&lt;/span&gt; 親子関係の付け替え &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by nobsun on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/07&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://zodi-g12.hatenablog.com/entry/2017/12/06/133951&#34;&gt;コラッツの問題を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書いてみた &lt;span class=&#34;ascii&#34;&gt;- Zodiac&lt;/span&gt;の黙示録&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by zodi_G12 on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2377&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IQ&lt;/span&gt;が&lt;span class=&#34;ascii&#34;&gt;1 Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/06&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;数学科学&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#数学科学&#34; title=&#34;数学科学&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;数学・科学&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/tezca686/items/855236ccdda584ee8ebb&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;[Haskell]&lt;/span&gt; とびだせ！&lt;span class=&#34;ascii&#34;&gt;Hask&lt;/span&gt;圏 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by tezca686 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/14&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/makoraru/items/768089b2aab1dde47593&#34;&gt;区間代数と無限小と無限大 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by makoraru on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;3) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/17&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/as_capabl/items/2031fe28e577e77dc269&#34;&gt;しりとりの圏の回答、または定理証明&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を少しだけ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by as_capabl on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/hiratara/items/6265b5d4791144bee33b&#34;&gt;しりとりの圏の実装&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;未完&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by hiratara on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/05&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/kyamaz/items/67ec5c7d39e62c1de91d&#34;&gt;量子コンピューターにはモナドがよく似合う &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by kyamaz on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/17&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/makoraru/items/ab891a60d4dfe4bbf649&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と層 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by makoraru on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/NaOHaq/items/ba490cc1e1ab890cb399&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;上で有限体を使って遊ぶ &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by NaOHaq on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/22&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/cutsea110/items/69889a99d30b627bc04a&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;somehow-morphisms on fixed point written in Haskell - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by cutsea110 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/kyamaz/items/e49b07e05e871a22246c&#34;&gt;量子プログラミングは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by kyamaz on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/quantum&#34;&gt;量子コンピュータ &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/17&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#docker&#34; title=&#34;docker&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/t10471/items/4afa598e1be5d6c7cc1f&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でも&lt;span class=&#34;ascii&#34;&gt;Go&lt;/span&gt;みたいにシングルバイナリでアプリケーションをデプロイしたい &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by t10471 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;2) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/09&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/algas/items/fde155abbc9d8ae3f8c9&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell on Docker&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;Portable CLI&lt;/span&gt; を作ろう &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by algas on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/05&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;eta&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#eta&#34; title=&#34;eta&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Eta&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/aiya000/items/881d5f7e04b1178e7764&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Eta&lt;/span&gt;で表現されるデータ型としての&lt;span class=&#34;ascii&#34;&gt;Java&lt;/span&gt;クラスとその継承関係 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by aiya000 on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/25&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/aiya000/items/7dc0cb8694de0675088e&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (Eta)&lt;/span&gt; で&lt;span class=&#34;ascii&#34;&gt;JavaFX&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;を作る雰囲気を醸し出す &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by aiya000 on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2546&#34;&gt;プロ生ちゃん &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/25&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;書籍紹介&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#書籍紹介&#34; title=&#34;書籍紹介&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;書籍紹介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/waddlaw/items/dd926462d398c4cbd019&#34;&gt;これから &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を学ぶ人のための書籍紹介 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Aruneko/items/e72f7c6ee49159751cba&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;2017&lt;/span&gt;年に「すごい&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;たのしく学ぼう」を読む &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by Aruneko on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/YoshikuniJujo/items/0708f108bf53a216a61a&#34;&gt;拙書「&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 教養としての関数型プログラミング」の紹介 &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by YoshikuniJujo on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/24&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mt-caret.github.io/blog/posts/2017-12-01-book01.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;mt_caret.log -&lt;/span&gt; 本&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt; “&lt;span class=&#34;ascii&#34;&gt;Haskell Programming from first principles&lt;/span&gt;”&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by mt_caret on&lt;/span&gt; &lt;a href=&#34;http://adventar.org/calendars/2433&#34;&gt;本 &lt;span class=&#34;ascii&#34;&gt;Advent Calendar 2017 - Adventar&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;翻訳記事&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#翻訳記事&#34; title=&#34;翻訳記事&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;翻訳記事&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Pythonissam/items/ace180b1b78876f1c190&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; で暗号学的ハッシュを扱う &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/02&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/d767f36d544427a9c60d&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; のアプリケーション向けに軽量の &lt;span class=&#34;ascii&#34;&gt;Docker&lt;/span&gt;イメージ を作る &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/03&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/8b7d2a200a932e761fa3&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 初心者へのアドバイス &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/31b835b493abf5be3549&#34;&gt;将来も使えるテストスイート &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/05&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/27c12237d9ef1c5569ba&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VS Code&lt;/span&gt; で &lt;span class=&#34;ascii&#34;&gt;Ghcid&lt;/span&gt; を使う &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/06&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/rounddelta/items/4584f5486c1061c93f0b&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HLint&lt;/span&gt; のルールを理解する &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/07&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/Pythonissam/items/41f8121795f5d8954802&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SPJ&lt;/span&gt; の憂鬱 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;和訳&lt;span class=&#34;ascii&#34;&gt;) - Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by rounddelta on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/17&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qiita.com/reotasosan/items/d9fdfab10e24eabfefda&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;SPJ&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のエコシステム（和訳） &lt;span class=&#34;ascii&#34;&gt;- Qiita&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by reotasosan on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell4&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;4) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-27-haskell-performance-debugging&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; のパフォーマンスをデバッグする&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;by waddlaw on&lt;/span&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2017/haskell5&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell (&lt;/span&gt;その&lt;span class=&#34;ascii&#34;&gt;5) Advent Calendar 2017 - Qiita&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;ascii&#34;&gt;12/01&lt;/span&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2018/unordered-containers-hash-dos.html&#34; lang=&#34;ja&#34;&gt;hashdos脆弱性とunordered-containers&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2017/windows-gotchas.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2016/02/13/175220</id><title type="text">すごい JVM 言語 Frege をたのしく学ぼう！</title><updated>2016-02-13T17:52:20+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2016/02/13/175220"/><summary type="html">言わずと知れた Haskell の定番教科書『すごい Haskell たのしく学ぼう！』に登場するサンプルコードを、プログラミング言語 Frege に翻訳してみました。 github.com Frege について Frege は、JVM 上で動く純粋関数型プログラミング言語です。 github.com 最近、JVM 用 Lisp である Clojure の存在感を増してきている気がしますが、Frege はいわばその Haskell 版ですね。 文法的には Haskell + Java のメソッドを呼び出すための追加構文、といった感じ。細かな違いはありますが、Haskell が読める人間であれば…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/23/190729</id><title type="text">Alloy で自動定理証明っぽいやつ</title><updated>2015-12-23T19:42:18+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/23/190729"/><summary type="html">このエントリは Theorem Prover Advent Calendar 2015 - Qiita の 23 日目です。 とは言ってみたものの、内容はいわゆる定理証明器の話ではありません。モデル検査器 Alloy を利用して古典命題論理のシークエント計算をモデル化し、証明図を自動生成させることを目標にします。 なお、以下で部分的に引用しているモデル定義の完全版は alloy_sequent.als · GitHub にアップロードしてあります。 モデル化してみる 命題論理式の実装 まず対象となる論理式を Alloy で記述します。 abstract sig Formula {} sig A…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/12/13/193508</id><title type="text">NGK2015B で AWS + Alloy について話してきました</title><updated>2015-12-13T19:35:08+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/12/13/193508"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2015B / 名古屋合同懇親会 2015 忘年会 で発表してきました。 AWS は形式手法の夢を見るか？ - モデル検査器 Alloy によるインフラ設計 from y_taka_23 www.slideshare.net 当日の動画は [3] NGK2015B（名古屋合同懇親会 2015 忘年会） - YouTube から見ることができます。 TL;DR AWS でインフラ運用中 でも設定が大人の都合でカオスになりがちだったりして辛い よろしい、ならば形式手法だ サンプルコードを動かしてみよう！ まずはインストールしてみる 公式ページ Alloy …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="http://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/08/01/203751</id><title type="text">第十二回渋谷 Java で Featherweight Java の話をしてきました</title><updated>2015-08-01T20:37:51+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/08/01/203751"/><summary type="html">8 月 1 日に行われた第十二回渋谷 Java で Java の型システムについて LT をしてきました。以下が使用したスライドです。 Hello, Type Systems! - Introduction to Featherweight Java from y_taka_23 ちなみに Featherweight Java を導入した論文はここで読めます。今回の LT では時間の都合上細かい内容をほとんど述べていないので、もし興味があればぜひ元論文に目を通してみると面白いと思います。なお LT で扱ったのは第 2 章で述べられている（ジェネリクスを持たない）FJ の部分です。 スライドの補…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/07/26/174136</id><title type="text">稼働中の Docker コンテナ内にファイルを転送するツール Docker Inject を作ってみました</title><updated>2015-07-26T17:41:36+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/07/26/174136"/><summary type="html">ホスト側から run 中の Docker コンテナ内へ、ディレクトリごとコピーします。 y-taka-23/docker-injectgithub.com 背景 Docker を運用している上で、動いているコンテナの中にファイルを送り込みたくなったことはないでしょうか。ないですか？ 残念ながらあるところにはあるのです。とりあえず今回はあるということにして進みます。 docker cp コマンドを使用すれば「コンテナからホストへ」のファイル転送は可能ですが、逆に「ホストからコンテナへ」の転送手段は公式では提供されていないはずです。docker run 時に -v オプションを付けておいて、マウン…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/06/22/162833</id><title type="text">Haskellの型クラスを活用する</title><updated>2015-06-22T16:30:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/06/22/162833"/><summary type="html">Haskellの型クラスは、うまく使えば高いパフォーマンスと抽象度を両立できる、優れた仕組みである。その使い方のコツは、決して理解の難しいものではない。 小さな性質、大きな恩恵 プログラマは大きなものを小さく見せがちだ。オブジェクト指向プログラミングに慣れている人がやりがちなアンチパターンとして、欲しい機能と、それを分割する基準が現実に寄りすぎていて、一つ一つが巨大というものがある。 普通のプログラミングではありえない例かもしれないが、たとえば家を作りたいことを考える。「ベッド」「箪笥」「台所」「冷蔵庫」「トイレ」「風呂」のように設備ごとに分けた抽象化をしたいと考えるだろう。確かにこれは理に適…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2015/06/21/200416</id><title type="text">Dockerfile をパラメータ化するツール VoicePipe を作ってみました</title><updated>2015-06-21T20:04:16+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2015/06/21/200416"/><summary type="html">ひとつの Dockerfile から複数の Docker イメージをビルドすることができます。 y-taka-23/voicepipegithub.com 背景 インフラ環境まわりを Docker 化している場合、しばしば複数の Docker イメージを同時並行的に管理する必要が生じます。例えばミドルウェアのバージョンの組み合わせをいろいろ試したいとか、開発環境と本番環境とで設定を変えたいとか。 一方、一般的にイメージとしてビルドされる情報はすべて Dockerfile に記述されており、docker build コマンドの際にはパラメータを渡すことができないため、いきおい、一部分だけ異なる …</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/17/125213</id><title type="text">最近やったこと</title><updated>2015-04-20T18:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/17/125213"/><summary type="html">最近やったことのまとめ。 CPSのモナド変換子 モナド変換子の速さを測ってみる - モナドとわたしとコモナドfumieval.hatenablog.com で作ったmtl-cの塵を払い、Hackageにリリースした。 StateTやWriterTは中でタプルを作ったり壊したりしているが、CPS変換するとそれがなくなり、しかも(&gt;&gt;=)も最適化されるためそれなりのパフォーマンスの向上が期待できる。モナドガチユーザにおすすめだ。 補足 GHC 7.10.1現在、StateTに関しては最適化がうまく効くらしく、Lazy、Strict、CPS版のパフォーマンスはほぼ同じだった。一方、CPS版Write…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/173848</id><title type="text">Haskellでいかに多態を表すか</title><updated>2015-04-06T17:46:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/173848"/><summary type="html">オブジェクト指向を行使する心 ではオブジェクト指向の必要性と仕組みについて議論した。 インスタンスは言語によって様々な実装方法があるが、大きく分けて「クラス(処理)のインデックス」か「処理そのもの」のどちらかがインスタンスの内部に隠れている。 と述べたが、Haskellの場合、クラスのインデックスに基づいた表現では、インターフェイスは型クラス、クラスはインスタンス、インスタンスは存在量化された型の値に対応する。…といってもややこしいことこの上ないので、実装例を考えてみよう。 まず、問題となっている愚直な実装は、Haskellではこんな感じだ。 data World = World { … } …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/141523</id><title type="text">オブジェクト指向を行使する心</title><updated>2015-04-06T14:16:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/141523"/><summary type="html">今日、とあるツイートでプログラミングにおけるよくある問題が顕現していた。 プログラミングしてそうなサークル探したら、ゲーム公開してて、ソースコード公開されてたから見た。 pic.twitter.com/7W09sb9DFa— タコス(祭り) (@tacosufestival) 2015, 4月 4 奇妙な行コメントには目を瞑るとして、このコードは要約すれば以下のような処理を実現していることが窺える。 ゲームプログラミングでは、現在のシーンによって処理を切り替える必要がある。メニュー画面ならメニューの処理を、戦闘画面なら戦闘を、マップならマップの表示をそれぞれ行う。 現在のシーンの種類は変数によ…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
&#34;Haslell Platform 2014.2.0.0&#34;を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/20/155326</id><title type="text">モノイドと継続渡しの道具箱</title><updated>2015-03-21T06:54:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/20/155326"/><summary type="html">関数型言語Haskellにおいて、普通は計算の結果は関数の戻り値として扱うが、「結果を受け取る関数」 に渡すという継続渡しというスタイルもある。これは単なる冗長なやり方ではなく、様々な興味深い性質を持つ。 基本形は、aという値を渡すところを ∀r. (a -&gt; r) -&gt; r のような表現にする。たとえば、与えられた数の42倍を渡したいとき、そのまま\x -&gt; x * 42ではなく、\x f -&gt; f (x * 42)と書く。もちろんこれだけではありがたみが分からない。 さて、与えられた文字列の中のうち、大文字のアルファベットを取り出し、それがアルファベットの何番目か計算するプログラムを作りた…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/03/08/214505</id><title type="text">Haskellにおけるたった一つのデザインパターン</title><updated>2015-03-08T21:45:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/03/08/214505"/><summary type="html">デザインパターンを作らないこと。型とクラスがあんたの武器だ。</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/02/05/174342</id><title type="text">出、出～～ｗｗｗｗｗ銀行員待行列解説奴～ｗｗｗｗｗｗｗ</title><updated>2015-02-06T14:16:34+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/02/05/174342"/><summary type="html">銀行員待行列(Banker&#39;s deque)、二つのリストで構成奴～～ｗｗｗｗｗ 入奴と出奴～ｗｗｗｗｗｗｗｗｗ ↓入奴 三(^o^)ノ [(^o^)ノ, (^o^)ノ, (^o^)ノ] ヽ(^o^)三 [ヽ(^o^), ヽ(^o^), ヽ(^o^)] ↑出奴 追加は入奴にcons、取り出しは出奴にuncons奴～ｗｗｗリストなので基本定数時間奴～ｗｗｗｗｗｗ リスト枯渇防止の為、リストの長さに以下の条件課奴～～～ｗｗｗｗｗｗ length (入奴) &lt;= length (出奴) * 3 + 1 length (出奴) &lt;= length (入奴) * 3 + 1 条件充足不能場合、|leng…</summary></entry><entry><id>http://ccvanishing.hateblo.jp/entry/2014/12/15/220409</id><title type="text">NGK2014B で SPIN について話してきました</title><updated>2014-12-15T22:04:09+09:00</updated><author><name>y_taka_23</name></author><link href="http://ccvanishing.hateblo.jp/entry/2014/12/15/220409"/><summary type="html">名古屋工業大学で行われた LT 大会 NGK2014B で発表しました。内容はタイトルそのままで、モデル検査ツール SPIN とその記述言語である Promela の特徴を概観する、というものです。 猫でもわかる！ モデル検査器 SPIN 入門 from y_taka_23 当日の動画は Youtube から見ることができます。ちなみに、発表順は乱数で決められているはずなのですが、なぜか去年の NGK と全く同じ 3 番目でした。 リソース共有問題の Promela モデル LT の冒頭に登場するリソース共有時のデッドロックについて、Promela で記述したモデルが Gist においてありま…</summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>